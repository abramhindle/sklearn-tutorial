@relation large.json
@attribute id integer
@attribute owner string
@attribute content string
@data
4147,'',"Problem with java integration\nLet's suppose that I have this java class\r\n\r\n```java\r\n/**\r\n * Created by michelperez on 11/22/14.\r\n */\r\npublic class GUI3 {\r\n\r\n    /**\r\n     * Created by michelperez on 11/22/14.\r\n     */\r\n    public interface GUI1 {\r\n\r\n        public final static Integer DEMO1 = 123;\r\n\r\n    }\r\n\r\n    public static final class GUI2 implements GUI1 {\r\n\r\n    }\r\n}\r\n```\r\n\r\nAnd if I try to use it form scala in this way\r\n\r\n```scala\r\n(new GUI3.GUI2).DEMO1\r\n```\r\n\r\nI got a compilation error, that DEMO1 isn't a member\r\n\r\nI made this test because I was trying to use scaloid but I got problems whe I try to call a Constant from a java class\r\n\r\n```scala\r\ncontactName = cursor.getString(cursor.getColumnIndex(PhoneLookup.DISPLAY_NAME))\r\n```\r\n\r\nI got that PhoneLookup.DISPLAY_NAME doesn't exists, but in java works"
4140,'','SI-8251 Remove ListBuffer.readOnly as deprecated\nComplete the story arc.'
4138,'','Fix one typo in the scaladoc of Inliners\nThe Scaladoc of `Inliners` contained one tiny typo for the word "accessibility".\r\nThis PR only fixes this typo.'
4135,'','Add curly brace (zero-or-more) in grammar for Bindings\nMissing closing curly brace as reported by Andre at https://groups.google.com/forum/#!topic/scala-language/4Zb6dc6EEFM.'
4134,'',"SI-8948 resurrect the scaladoc for Any/AnyRef/Nothing/Null.\nThey disappeared in dc1cd96 when `scala.tools.nsc.doc.DocParser` lost\r\nits `override def forScaladoc = true`, which used to trigger whether to\r\nparse `DocDef` nodes. This was deprecated in favor of a custom global\r\nwhen scaladoc was modularized out (#2226), but `DocParser` didn't get it\r\nsince it didn't override `forScaladoc` anymore...\r\n\r\nI added back `forScaladoc` in `DocParser` for consistency with\r\n`ScaladocGlobal`, although it doesn't do anything anymore."
4132,'','SI-7444 docs: null Executor allowed in ExecutionContext factories\nUpdate the ScalaDoc for the factory methods for `ExecutionContext`\r\nwhich allow a `null` `Executor`/`ExecutorService`.\r\n\r\nEnhancement of https://github.com/scala/scala/pull/4119\r\n'
4129,'','SI-8977 remove duplicate decoder.properties from scalap\nAll .properties files in sources folder are already included in the\r\npacked jar (see [line 1028][1]), so there is no need to add it again.\r\n\r\n[1]: https://github.com/scala/scala/blob/3a949a18cee6b4197a981892f305a9890e402f12/build.xml#L1028'
4128,'','SI-8932 Fix dropRight/takeRight implementations\nI looked up at all the overrides of `IterableLike#takeRight` and\r\n`IterableLike#dropRight` and replaced usages of its argument `n` with\r\n`math.max(n, 0)` every time it was being used in an index subtraction.\r\n\r\nFixes [SI-8932](https://issues.scala-lang.org/browse/SI-8932).'
4127,'','Update to Maven Ant tasks to 2.1.3\nTrying to work around an upload failure after an upgrade to JFrog.\n\nJARs uploaded with: ./push-binary-libs.sh <user> <password>'
4124,'gkossakowski',"SI-7521 Fix erasure of parametric value classes.\n`Erasure.boxingErasure` exists to ensure that we use boxed primitives\nto represent the value, if the value class has type parameters\nreferred to by its element type.\n\nHowever, this is implenented with a type map that runs deeply\nacross the type. In the enclosed test case, we have\n`Repr=Array[Int]`, which should be erased to `Array[Int]`, _not_\nto `Array[Integer]`.\n\nThis commit ensures that the `boxingErasure` map only applies\nboxing at the top level, and not within array arguments. (Other\ntype arguments will be erased, so we don't have to deal with them.)\n\nReview by @gkossakowski"
4123,'','SI-8253 Fix incorrect parsing of <elem xmlns={f("a")}/>\nThe spliced application was placed in the `attrMap` in\n`SymbolicXMLBuilder` and later incorrectly matched by a pattern\nintended only to match:\n\n    xml.Text(s)\n\nThat attribute value is generated by parsing:\n\n   <elem xmlns=\'a\'/>\n\nSo the net effect was that the two fragments of XML were identical!\n\nThis commit sharpens up the match to really look for a syntactic\n`_root_.scala.xml.Text("...")`.\n\nThe test just prints the parse trees of a variety of cases, as we\nwe should not test the modularized XML library in scala/scala.\n\nReview by @som-snytt'
4121,'gkossakowski',"SI-5938 Test for a FSC bug with mixin, duplicate static forwarders\nUnder resident compilation, we were getting multiple copies of static\nforwarders created for mixed in methods. It seems like the bug was\nfixed as a by-product of #4040.\n\nThis commit adds a test to show this. I've confirmed that the test\nfails appropriately with 2.11.4.\n\nFor future reference, before I figured out how to write the test\nfor this one (test/resident doesn't seem to let you run the code\nafter compiling it), I was using bash to test as follows:\n\n    (export V=2.11.x; (scalac-hash $V sandbox/t5938_1.scala; (for i in 1 2; do echo sandbox/t5938.scala; done; printf '\\n') | scalac-hash $V  -Xresident); stty echo; scala-hash $V X ; echo ':javap -public X' | scala-hash $V);\n\nReview by @gkossakowski"
4120,'','SI-5665 Test case for fixed private[this], trait crasher\nFixed in SI-5508 / cca4d51db.\n\nReview by @gourlaysama'
4119,'','SI-7444 docs: null Executor is allowed in ExecutionContext factories\nUpdate the ScalaDoc for the factory methods for `ExecutionContext`\nwhich allow a null `Executor`.'
4118,'adriaanm','SI-5639 Fix spurious discarding of implicit import\nIn Scala fa0cdc7b (just before 2.9.0), a regression in implicit search,\nSI-2866, was discovered by Lift and fixed. The nature of the regression was\nthat an in-scope, non-implicit symbol failed to shadow an eponymous\nimplicit import.\n\nThe fix for this introduced `isQualifyingImplicit` which discards in-scope\nimplicits when the current `Context`\'s scope contains a name-clashing\nentry.\n\nIncidentally, this proved to be a shallow solution, and we later improved\nshadowing detection in SI-4270 / 9129cfe9. That picked up cases where a\nlocally defined symbol in an intervening scope shadowed an implicit.\n\nThis commit includes the test case from the comments of SI-2866. Part of it\nis tested as a neg test (to test reporting of ambiguities), and the rest is\ntested in a run test (to test which implicits are picked.)\n\nHowever, in the test case of SI-5639, we see that the scope lookup\nperformend by `isQualifyingImplicit` is fooled by a "ghost" module symbol.\nThe apparition I\'m referring to is entered when\n`initializeFromClassPath` / `enterClassAndModule` encounters a class file\nnamed \'Baz.class\', and speculatively enters _both_ a class and module\nsymbol. AFAIK, this is done to defer parsing the class file to determine\nwhat inside. If it happens to be a Java compiled class, the module symbol\nis needed to house the static members.\n\nThis commit adds a condition that `Symbol#exists` which shines a torch\n(forces the info) in the direction of the ghost module symbol. In our test,\nthis causes it to vanish, as we only need a class symbol for the Scala\ndefined `class Baz`.\n\nThe existing `pos` test for this actually did not exercise the bug,\nseparate compilation is required. It was originally checked in to\n`pending` with this error, and then later moved to `pos` when someone\nnoticed it was not failing.\n\nTo be conservative, I\'ve predicated this fix in `-Xsource:2.12`. This is\ndone in separate commit to show that the previous fix passes the test\nsuite, rather than just tests with `-Xsource:2.12`.\n\nReview by @adriaanm'
4117,'adriaanm','SI-8449 Fix spurious error with Java raw type over a Scala class\nWhen the Scala typechecker typechecks signatures in Java sources,\nit must enable use of a type constructor without applied type\narguments (a raw type).\n\nHowever, the check in `adaptType::properTypeRequired` was too\nrestricive: it only allows raw types given a) we are typechecking a\nJava source file and b) the type constructor itself is Java defined.\n\nThe second check does not make sense; it is perfectly legal to define\na Java raw type for over a Scala defined type constructor. This commit\nremoves it.\n\nThe bug was noticed in the Scaladoc context, as it explores the\nsignatures of all Java sources so it can document them. But the\nenclosed test demonstrates the underlying bug under normal\ncompilation.\n\nReview by @adriaanm'
4116,'lrytz','SI-5413 Test for fixed owner-corruption bug with names/defaults\nFixed in SI-8111 / 2.10.4.\n\nReview by @lrytz'
4115,'adriaanm','SI-8597 Improved pattern unchecked warnings\nThe spec says that `case _: List[Int]` should be always issue\nan unchecked warning:\n\n> Types which are not of one of the forms described above are\n> also accepted as type patterns. However, such type patterns\n> will be translated to their erasure (§3.7). The Scala compiler\n> will issue an “unchecked” warning for these patterns to flag\n> the possible loss of type-safety.\n\nBut the implementation goes a little further to omit warnings\nbased on the static type of the scrutinee. As a trivial example:\n\n   def foo(s: Seq[Int]) = s match { case _: List[Int] => }\n\nneed not issue this warning.\n\nThese discriminating unchecked warnings are domain of\n`CheckabilityChecker`.\n\nLet\'s deconstruct the reported bug:\n\n  def nowarn[T] = (null: Any) match { case _: Some[T] => }\n\nWe used to determine that if the first case matched, the scrutinee\ntype would be `Some[Any]` (`Some` is covariant). If this statically\nmatches `Some[T]` in a pattern context, we don\'t need to issue an\nunchecked warning. But, our blanket use of `existentialAbstraction`\nin `matchesPattern` loosened the pattern type to `Some[Any]`, and\nthe scrutinee type was deemed compatible.\n\nI\'ve added a new method, `scrutConformsToPatternType` which replaces\npattern type variables by wildcards, but leaves other abstract\ntypes intact in the pattern type. We have to use this inside\n`CheckabilityChecker` only. If we were to make `matchesPattern`\nstricter in the same way, tests like `pos/t2486.scala` would fail.\n\nI have introduced a new symbol test to (try to) identify pattern\ntype variables introduced by `typedBind`. Its not pretty, and it\nmight be cleaner to reserve a new flag for these.\n\nI\'ve also included a test variation exercising with nested matches.\nThe pattern type of the inner case can\'t, syntactically, refer to the\npattern type variable of the enclosing case. If it could, we would\nhave to be more selective in our wildcarding in `ptMatchesPatternType`\nby restricting ourselves to type variables associated with the closest\nenclosing `CaseDef`.\n\nAs some further validation of the correctness of this patch,\nfour stray warnings have been teased out of\nneg/unchecked-abstract.scala\n\nI also had to changes `typeArgsInTopLevelType` to extract the type\narguments of `Array[T]` if `T` is an abstract type. This avoids the\n"Checkability checker says \'Uncheckable\', but uncheckable type\ncannot be found" warning and consequent overly lenient analysis.\nWithout this change, the warning was suppressed for:\n\n    def warnArray[T] = (null: Any) match { case _: Array[T] => }'
4114,'adriaanm','SI-8534 Avoid crash in erroneous SelectFromTypeTree\nPR #2374 changed the behaviour of `typedSingletonTypeTree` in the\npresence of an error typed reference tree. It incorrectly\nreturns the reference tree in case on an error. However, this is\na term tree, which is an inconsistent result with the input type\ntree. Consequently, a `typedSelectInternal` later fails when\nusing this as the qualifier of a `SelectFromTypeTree`.\n\nBoth test cases enclosed show this symptom.\n\nThis commit:\n\n  - Returns `tree` rather than `refTyped` when `refTyped` is\n    error typed or when it isn\'t suitable as a stable prefix.\n  - Avoids issuing a cascading "not a stable prefix" error if the\n    `refTyped` is error typed.\n  - Adds an extra layer of defense in `typedSelectFromTypeTree`\n    to bail out quickly if the qualifier is error typed.\n\nThe last measure is not necessary to fix this bug.\n\nReview by @adriaanm'
4113,'adriaanm','SI-8967 Only add JARs and dirs from $SCALA_HOME/lib to classpath\nThat\'s all we ship in that directory, but it seems that some\r\nJVMs freak out with a core dump if something else ends up\r\nin that directory and we add it to the boot classpath.\r\n\r\nTesting on unix:\r\n\r\n```\r\n    % rm ./build/pack/bin.complete; ant\r\n    % touch /Users/jason/code/scala/build/pack/lib/foo.txt\r\n    % mkdir /Users/jason/code/scala/build/pack/lib/dir\r\n  \xa0 % bash -x ./build/pack/bin/scala -version\r\n    ...\r\n    /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/bin/java -Xmx256M -Xms32M -Xbootclasspath/a:/Users/jason/code/scala/build/pack/lib/dir:/Users/jason/code/scala/build/pack/lib/jline.jar:/Users/jason/code/scala/build/pack/lib/scala-actors.jar:/Users/jason/code/scala/build/pack/lib/scala-compiler.jar:/Users/jason/code/scala/build/pack/lib/scala-continuations-library_2.11-1.0.2.jar:/Users/jason/code/scala/build/pack/lib/scala-continuations-plugin_2.11.2-1.0.2.jar:/Users/jason/code/scala/build/pack/lib/scala-library.jar:/Users/jason/code/scala/build/pack/lib/scala-parser-combinators_2.11-1.0.2.jar:/Users/jason/code/scala/build/pack/lib/scala-partest-extras.jar:/Users/jason/code/scala/build/pack/lib/scala-partest-javaagent.jar:/Users/jason/code/scala/build/pack/lib/scala-reflect.jar:/Users/jason/code/scala/build/pack/lib/scala-swing_2.11-1.0.1.jar:/Users/jason/code/scala/build/pack/lib/scala-xml_2.11-1.0.2.jar:/Users/jason/code/scala/build/pack/lib/scalap.jar -classpath \'""\' -Dscala.home=/Users/jason/code/scala/build/pack -Dscala.usejavacp=true -Denv.emacs= scala.tools.nsc.MainGenericRunner -version\r\n```\r\n\r\nThe boot classpath contains `build/pack/lib/dir` but not `foo.txt`.\r\n\r\nI will seek a Windows test of the same during PR review.\r\n\r\nReview by @gourlaysama'
4111,'',"SI-8502 Improve resiliance to absent packages\nWhen unpickling a class, we create stub symbols for references\nto classes absent from the current classpath. If these references\nonly appear in method signatures that aren't called, we can\nproceed with compilation. This is in line with javac.\n\nWe're getting better at this, but there are still some gaps.\nThis bug is about the behaviour when a package is completely\nmissing, rather than just a single class within that package.\n\nTo make this work we have to add two special cases to the unpickler:\n\n  - When unpickling a `ThisType`, convert a `StubTermSymbol` into\n    a `StubTypeSymbol`. We hit this when unpickling\n    `ThisType(missingPackage)`.\n  - When unpickling a reference to `<owner>.name` where `<owner>`\n    is a stub symbol, don't call info on that owner, but rather\n    allow the enclosing code in `readSymbol` fall through to\n    create a stub for the member.\n\nThe test case was distilled from an a problem that a Spray user\nencountered when Akka was missing from the classpath.\n\nReview by @gkossakowski"
4110,'','Make t8960 pass under delambdafy:method\nWhen using `delambdafy:method`, anonymous function classes are not\r\ncurrently specialized, as noted here:\r\n\r\nhttps://github.com/scala/scala/blob/f08e96571479552b103b15cc2d40ea5454999546/src/compiler/scala/tools/nsc/transform/Delambdafy.scala#L26\r\n\r\nFixes the `GenBCode` / `delambdafy:method` build (https://scala-webapps.epfl.ch/jenkins/view/2.11.x/job/scala-nightly-genbcode-2.11.x/191/console)'
4109,'','SI-1994 Test case for fixed overriding problem\nThe test case passes since Scala 2.9.2.\n\nPrior, it failed with:\n\n\t~/scala/2.9.1/bin/scalac sandbox/t1994.scala\n\tsandbox/t1994.scala:9: error: method y overrides nothing\n\t  override def y = 1\n\t               ^\n\tone error found\n\nReview by @gourlaysama'
4108,'','SI-7750 Test case for fixed spurious existential feature warning\nIn 2.11.0-M8, the enclosed test issued the following feature\nwarning:\n\n    sandbox/t7750.scala:7: warning: the existential type LazyCombiner[_$1,_$2,_$3] forSome { type _$1; type _$2; type _$3 <: Growable[_$1] with Sizing }, which cannot be expressed by wildcards,\n\nThis went way in 2.11.0-RC1 after we turned off the problematic\nattempt to infer existential bounds based on the bounds of the\ncorresponding type parameters.\n\nReview by @soc'
4106,'',"SI-6856 Fix incorrect EBNF in comment in Parsers\n'&' isn't a prefix operator, perhaps to the chagrin of the C crowd."
4105,'','SI-5730 hide constructors of sealed abstract classes in scaladoc\nSealed abstract classes (like `List`) have a primary constructor, public\r\nby default. It can never be called by external code but it shows up in\r\nthe scaladoc as a nice `new List()` construtor...\r\n\r\nIf a class is only abstract, the constructor is still useful because\r\npeople can subclass and call it. If it is only sealed (i.e. effectively final),\r\nthen it is the normal constructor of a final class. But sealed *and*\r\nabstract makes documenting the constructor useless.\r\n\r\nThis should remove the misleading constructors of `List`, `Double`,\r\n`Option` and others from the scaladoc.'
4104,'',"SI-8966 Allow use of jvm-1.8 via the Ant scalac task\nThis option has been allowed by the command line compiler since\nee706b873a28.\n\nThis commit allows use of this via Ant.\n\nNote: we still don't exploit the features of classfile version 52,\nbut watch this space as we roll out method handle based closures\nsoon!"
4103,'gkossakowski',"SI-5938 Test for a FSC bug with mixin, duplicate static forwarders\nUnder resident compilation, we were getting multiple copies of static\r\nforwarders created for mixed in methods. It seems like the bug was\r\nfixed as a by-product of #4040.\r\n\r\nThis commit adds a test to show this. I've confirmed that the test\r\nfails appropriately with 2.11.4.\r\n\r\nFor future reference, before I figured out how to write the test\r\nfor this one (test/resident doesn't seem to let you run the code\r\nafter compiling it), I was using bash to test as follows:\r\n\r\n    (export V=2.11.x; (scalac-hash $V sandbox/t5938_1.scala; (for i in 1 2; do echo sandbox/t5938.scala; done; printf '\\n') | scalac-hash $V  -Xresident); stty echo; scala-hash $V X ; echo ':javap -public X' | scala-hash $V);\r\n\r\nReview by @gkossakowski"
4102,'adriaanm','SI-8965 Account for corner case in "unrelated types" warning\nIt\'s okay for the two types to LUB to something above `Object`\nif they both individially were its supertype.'
4101,'','[sammy] eta-expansion, overloading, existentials\nReview by @retronym, please.\r\n\r\nWhile playing with Java 8 Streams from the repl,\r\nI realized we weren\'t eta-expanding,\r\nnor resolving overloading properly for SAMs.\r\n\r\nAlso, the way Java uses wildcards to represent use-site variance\r\nstresses type inference (since it results in existentials).\r\n\r\nIntroduce `wildcardExtrapolation` to simplify the resulting types\r\n(without losing precision): `wildcardExtrapolation(tp) =:= tp`.\r\n\r\nFor example, the `MethodType` given by `def bla(x: (_ >: String)): (_ <: Int)`\r\nis both a subtype and a supertype of `def bla(x: String): Int`.\r\n\r\nTranslating http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/ into Scala:\r\n\r\n```\r\nscala> import java.util.Arrays\r\nscala> import java.util.stream.Stream\r\nscala> import java.util.stream.IntStream\r\nscala> val myList = Arrays.asList("a1", "a2", "b1", "c2", "c1")\r\nmyList: java.util.List[String] = [a1, a2, b1, c2, c1]\r\n\r\nscala> myList.stream.filter(_.startsWith("c")).map(_.toUpperCase).sorted.forEach(println)\r\nC1\r\nC2\r\n\r\nscala> myList.stream.filter(_.startsWith("c")).map(_.toUpperCase).sorted\r\nres8: java.util.stream.Stream[?0] = java.util.stream.SortedOps$OfRef@133e7789\r\n\r\nscala> Arrays.asList("a1", "a2", "a3").stream.findFirst.ifPresent(println)\r\na1\r\n\r\nscala> Stream.of("a1", "a2", "a3").findFirst.ifPresent(println)\r\na1\r\n\r\nscala> IntStream.range(1, 4).forEach(println)\r\n<console>:37: error: object creation impossible, since method accept in trait IntConsumer of type (x$1: Int)Unit is not defined\r\n(Note that Int does not match Any: class Int in package scala is a subclass of class Any in package scala, but method parameter types must match exactly.)\r\n              IntStream.range(1, 4).forEach(println)\r\n                                            ^\r\n\r\nscala> IntStream.range(1, 4).forEach(println(_: Int)) // TODO: can we avoid this annotation?\r\n1\r\n2\r\n3\r\n\r\nscala> Arrays.stream(Array(1, 2, 3)).map(n => 2 * n + 1).average.ifPresent(println(_: Double))\r\n5.0\r\n\r\nscala> Stream.of("a1", "a2", "a3").map(_.substring(1)).mapToInt(_.parseInt).max.ifPresent(println(_: Int)) // whoops!\r\nReplGlobal.abort: Unknown type: <error>, <error> [class scala.reflect.internal.Types$ErrorType$, class scala.reflect.internal.Types$ErrorType$] TypeRef? false\r\nerror: Unknown type: <error>, <error> [class scala.reflect.internal.Types$ErrorType$, class scala.reflect.internal.Types$ErrorType$] TypeRef? false\r\nscala.reflect.internal.FatalError: Unknown type: <error>, <error> [class scala.reflect.internal.Types$ErrorType$, class scala.reflect.internal.Types$ErrorType$] TypeRef? false\r\n\tat scala.reflect.internal.Reporting$class.abort(Reporting.scala:59)\r\n\r\nscala> IntStream.range(1, 4).mapToObj(i => "a" + i).forEach(println)\r\na1\r\na2\r\na3\r\n\r\n```'
4100,'','SI-8954 Make @deprecated{Overriding,Inheritance} aware of @deprecated.\nThis makes sure that:\r\n - there is no warning for a `@deprecated` class inheriting a\r\n   `@deprecatedInheritance` class\r\n - there is no warning for a `@deprecated` method or a method of a\r\n   `@deprecated` class overriding a `@deprecatedOverriding` method\r\n\r\nThis should remove quite a few useless deprecation warnings from the\r\nlibrary.'
4099,'gkossakowski','SI-7596 Curtail overloaded symbols during unpickling\nIn code like:\n\n    object O { val x = A; def x(a: Any) = ... }\n    object P extends O.x.A\n\nThe unpickler was using an overloaded symbol for `x` in the\nparent type of `P`. This led to compilation failures under\nseparate compilation.\n\nThe code that leads to this is in `Unpicklers`:\n\n    def fromName(name: Name) = name.toTermName match {\n      case nme.ROOT     => loadingMirror.RootClass\n      case nme.ROOTPKG  => loadingMirror.RootPackage\n      case _            => adjust(owner.info.decl(name))\n    }\n\nThis commit filters the overloaded symbol based its stability\nunpickling a singleton type. That seemed a slightly safer place\nthan in `fromName`.\n\nResubmission of #2664 incorporating review from @gkossakowski.\n\nReview by @gkossakowski :)'
4097,'adriaanm','SI-7602 Avoid crash in LUBs with erroneous code\nIf a class contains a double defintion of a method that overrides\nan interface method, LUBs could run into a spot where filtering\noverloaded alternatives to those that match the interface method\nfails to resolve to a single overload, which crashes the compiler.\n\nThis commit uses `filter` rather than `suchThat` to avoid the crash.'
4096,'','SI-7019 Fix crasher with private[this] extension methods\nWhen we move the body of value class methods to the corresponding\nextension method, we typecheck a forward method that remains\nin the class. In order to allow access, this commit weakens the\naccess of `private[local]` extension methods to `private`.\n\nReview by @lrytz'
4095,'lrytz','Fix problems in Symbol Literal static caching\nDetails in the commit messages.\n\nReview by @soc / @lrytz'
4094,'',"SI-8962 Fix regression with skolems in pattern translation\nDuring the refactoring of error reporting in 258d95c7b15, the result\r\nof `Context#reportError` was changed once we had switched to\r\nusing a `ThrowingReporter`, which is still the case in post\r\ntyper phase typechecking\r\n\r\nThis was enough to provoke a type error in the enclosed test.\r\nHere's a diff of the typer log:\r\n\r\n    %  scalac-hash 258d95~1 -Ytyper-debug sandbox/test.scala 2>&1 | tee sandbox/good.log\r\n    %  scalac-hash 258d95 -Ytyper-debug sandbox/test.scala 2>&1 | tee sandbox/bad.log\r\n    %  diff -U100 sandbox/{good,bad}.log | gist --filename=SI-8962-typer-log.diff\r\n    https://gist.github.com/retronym/3ccbe7e0791447d272a6\r\n\r\nThe test `Context#reportError` happens to be used when deciding\r\nwhether the type checker should be lenient when it hits a type error.\r\nIn lenient mode (see `adaptMismatchedSkolems`), it `adapt` retries\r\nwith after slackening the expected type by replacing GADT and\r\nexistential skolems with wildcard types. This is to accomodate\r\nknown type-incorrect trees generated by the pattern matcher.\r\n\r\nThis commit restores the old semantics of `reportError`, which means\r\nit is `false` when a `ThrowingReporter` is being used.\r\n\r\nReview by @adriaanm"
4093,'','SI-8960 Bring back the SerialVersionUID to anonymous function classes\nIn PR #1673 / 4267444, the annotation `SerialVersionId` was changed\r\nfrom a `StaticAnnotation` to `ClassFileAnnotation` in order to enforce\r\nannotation arguments to be constants. That was 2.11.0.\r\n\r\nThe ID value in the AnnotationInfo moved from `args` to `assocs`, but\r\nthe backend was not adjusted. This was fixed in PR #3711 / ecbc9d0 for\r\n2.11.1.\r\n\r\nUnfortunately, the synthetic AnnotationInfo that is added to anonymous\r\nfunction classes still used the old constructor (`args` instead of\r\n`assocs`), so extracting the value failed, and no field was added to\r\nthe classfile.'
4092,'','SI-5217 Companion privates in scope of class parms\nTest of the same. It progressed in 2.10.1.\r\n\r\nReview by @lrytz @gourlaysama'
4091,'','SI-5217 add a test case: it was already fixed\nThis was indirectly fixed in 2.10.1-RC1 by b74c33e.\r\n\r\n-----\r\n\r\nReview @lrytz'
4090,'',"SI-8955 Fix hanging fork-join pool via parallel collections\nA recent change [1] to Scala's default fork join thread pool caused\nintermittent deadlocks. This is only visible in the development series\nof Scala, 2.12.0-SNAPSHOT.\n\nWe changed our thread factory to place a hard limit the number of\nthreads created (equal to the desired parallelism.)\n\nI have extracted a test case [2] that uses jsr166e directly, rather\nthan using Scala's parallel collections and abstractions on top of FJ.\n\nIn the comments of the bug, Viktor suggests this was too aggressive\nand instead we ought to increase the limit to parallelism + 256\n(with a system property override.)\n\nHe explained:\n\n> The number 256 is going to be the default for the max threads for\n> FJP in Java9 (down from 32k) so this change will harmonize the\n> settings while making it possible to override from the outside.\n>\n> The cause of the deadlock is twofold:\n>\n> 1) The test uses ExecutionContext.global, which is not designed\n>    for typical ForkJoin workloads since it has async = true\n>    (FIFO instead of LIFO)\n> 2) And we capped the default max number of threads to be created\n>    when doing managed blocking from 32k to number of cores\n>    (a tad too aggressive it seems)\n\nThrough testing, I found that for this example I could trigger the\nhang with:\n\n    parallelismLevel | maxThreads\n    -----------------------------\n                   2 | <= 4\n                   4 | <= 9\n                   8 | <= 11\n                  16 | <= 15\n\nI have emailed concurrency-interest [3] to help analyse the problem\nfurther, but in the interest of avoiding hangs in the\nscalacheck/parallel-collections test, I'm implementing Viktor's\nsuggestion in the interim.\n\n[1] https://github.com/scala/scala/pull/4042\n[2] https://gist.github.com/retronym/2e14cdab6d5612562d95\n[3] http://markmail.org/message/czphdyjxpkixeztv"
4089,'','SI-6626 make @throws tags create links to exceptions\nIn scaladoc, this turns exceptions in `@throws` tags into links\r\n(when it can find the target exception), instead of just showing\r\nthe name.\r\n\r\nReview by @VladUreche :)'
4088,'lrytz','GenBCode: cleanup optimizations\nMethod-level cleanup optimizations.\r\n\r\nSee individual commit messages.'
4087,'',"IntelliJ IDEA files for version 14\nThe latest version of the Scala plugin for IntelliJ IDEA introduces\r\na new project structure\r\n\r\nhttp://blog.jetbrains.com/scala/2014/10/30/scala-plugin-update-for-intellij-idea-14-rc-is-out/\r\n\r\nDue to a bug (https://youtrack.jetbrains.com/issue/SCL-7753), you\r\ncurrently need to install the latest nightly build from here:\r\nhttp://confluence.jetbrains.com/display/SCA/Scala+Plugin+Nightly+Builds+for+Cassiopeia\r\n\r\nThe new format doesn't allow scala compiler options per-module, so\r\nthe `-sourcepath src/libarary` is used for all modules."
4086,'','SI-8835 Lazier slice for Iterator\nAn iterator for slicing that does not drop eagerly.\r\n\r\nA series of `take m drop n` that results in nothing taken\r\nwill not call the underlying iterator.\r\n\r\nChained invocations do not create intermediate iterators.\r\n\r\nAdds eager `drop` to `IterableSplitter`, which overrides `take` and `slice`.\r\n\r\nLet `stringOf` handle `ParIterable` so your ScalaCheck labels can be shown truncated, at least during debug.\r\n\r\nThis PR against 2.12 (because of the change to laziness)\r\nincludes the expanded unit test from #4075, but does not\r\ndelete the redundant test files.\r\n\r\nThis is similar to a proposal at #3963: just track drop and take numbers (skip and limit counters) until forced.\r\n\r\nThere may be a question whether this is worth it, in the space between deprecated views and the collections getting rewritten by multiple parties.\r\n\r\nThe other question is, if `take` and `drop` and `slice` are defined in terms of a template method, should they be final?\r\n\r\nReview by @Ichoran '
4084,'Ichoran','Correct collections variable definitions to avoid many scaladoc warnings.\nRunning \'ant docs.lib\' produces such a long warning list that nobody seems to care. Consequently the documentation for stdlib contains many errorneous signatures.\r\n\r\nThis PR addresses most of the "Unresolved $Coll when documenting XXX" warnings and reduces scaladoc output from 1600 to 400 lines. Since this is a pure documentation change, it is safe to merge in 2.11.x'
4083,'xeno-by','SI-8947 Avoid cross talk between tag materializers and reify\nAfter a macro has been expanded, the expandee are expansion are\nbidirectionally linked with tree attachments. Reify uses the back\nreference to replace the expansion with the expandee in the reified\ntree. It also has some special cases to replace calls to macros\ndefined in scala-compiler.jar with `Predef.implicitly[XxxTag[T]]`.\nThis logic lives in `Reshape`.\n\nHowever, the expansion of a macro may be `EmptyTree`. This is the case\nwhen a tag materializer macro fails. User defined macros could do the\nalso expand to `EmptyTree`. In the enclosed test case, the error\nmessage that the tag materializer issued ("cannot materialize\nclass tag for unsplicable type") is not displayed as the typechecker\nfinds another means of making the surrounding expression typecheck.\n\nHowever, the macro engine attaches a backreference to the materializer\nmacro on `EmpytyTree`!\n\nLater, when `reify` reshapes a tree, every occurance of `EmptyTree`\nwill be replaced by a call to `implicitly`.\n\nThis commit expands the domain of `CannotHaveAttrs`, which is mixed\nin to `EmptyTree`. It silently ignores all attempts to mutate\nattachments.\n\nUnlike similar code that discards mutations of its type and position,\nI have refrained from issuing a developer warning in this case, as\nto silence this I would need to go and add a special case at any\nplaces adding attachments.\n\nReview by @xeno-by @densh'
4081,'','SI-8943 Handle non-public case fields in pres. compiler\nWhen a case class is type checked, synthetic methods are added,\r\nsuch as the `hashCode`/`equals`, implementations of the `Product`\r\ninterface. At the same time, a case accessor method is added for\r\neach non-public constructor parameter. This the accessor for a\r\nparameter named `x` is named `x$n`, where `n` is a fresh suffix.\r\n\r\nThis is all done to retain universal pattern-matchability of\r\ncase classes, irrespective of access. What is the point of allowing\r\nnon-public parameters if pattern matching can subvert access? I\r\nbelieve it is to enables private setters:\r\n\r\n```\r\ncase class C(private var x: String)\r\n\r\nscala> val c = new C("")\r\nc: C = C()\r\n\r\nscala> val C(x) = c\r\nx: String = ""\r\n\r\nscala> c.x\r\n<console>:11: error: variable x in class C cannot be accessed in C\r\n              c.x\r\n                ^\r\n\r\nscala> c.x = ""\r\n<console>:13: error: variable x in class C cannot be accessed in C\r\nval $ires2 = c.x\r\n               ^\r\n<console>:10: error: variable x in class C cannot be accessed in C\r\n       c.x = ""\r\n         ^\r\n```\r\n\r\nPerhaps I\'m missing additional motivations.\r\n\r\nIf you think scheme sounds like a binary compatiblity nightmare,\r\nyou\'re right: https://issues.scala-lang.org/browse/SI-8944\r\n\r\n`caseFieldAccessors` uses the naming convention to find the right\r\naccessor; this in turn is used in pattern match translation.\r\n\r\nThe accessors are also needed in the synthetic `unapply` method\r\nin the companion object. Here, we must tread lightly to avoid\r\ntriggering a typechecking cycles before; the synthesis of that method\r\nis not allowed to force the info of the case class.\r\n\r\nInstead, it uses a back channel, `renamedCaseAccessors` to see\r\nwhich parameters have corresonding accessors.\r\n\r\nThis is pretty flaky: if the companion object is typechecked\r\nbefore the case class, it uses the private param accessor directly,\r\nwhich it happends to have access to, and which duly gets an\r\nexpanded name to allow JVM level access. If the companion\r\nappears afterwards, it uses the case accessor method.\r\n\r\nIn the presentation compiler, it is possible to typecheck a source\r\nfile more than once, in which case we can redefine a case class. This\r\nuses the same `Symbol` with a new type completer. Synthetics must\r\nbe re-added to its type.\r\n\r\nThe reported bug occurs when, during the second typecheck, an entry\r\nin `renamedCaseAccessors` directs the unapply method to use `x$1`\r\nbefore it has been added to the type of the case class symbol.\r\n\r\nThis commit clears corresponding entries from that map when we\r\ndetect that we are redefining a class symbol.\r\n\r\nCase accessors are in need of a larger scale refactoring. But I\'m\r\nleaving that for SI-8944.\r\n\r\nReview by @dragos @lrytz'
4080,'',"SI-8931 make generic signature consistent with interface list in classfiles\nAn optimization was introduced in 7a99c03 ([SI-5278][1]) to remove redundant\r\ninterfaces from the list of implemented interfaces in the bytecode.\r\nHowever the same change was not propagated to the generic signature\r\nof a class, which also contains a list of direct parent classes and\r\ninterfaces.\r\n\r\nThe JVM does not check the well-formedness of signatures at class\r\nloading or linking (see §4.3.4 of jdk7 jvms), but other tools might\r\nassume the number of implemented interfaces is the same whether one\r\nasked for generic or erased interfaces.\r\n\r\nIt doesn't break reflection so nobody complained, but it does show:\r\n```scala\r\nscala> val c = classOf[Tuple1[String]]\r\nc: Class[(String,)] = class scala.Tuple1\r\n\r\nscala> c.getInterfaces // Product is gone\r\nres0: Array[Class[_]] = Array(interface scala.Product1, interface\r\nscala.Serializable)\r\n\r\nscala> c.getGenericInterfaces // Product is back!\r\nres1: Array[java.lang.reflect.Type] = Array(scala.Product1<T1>,\r\ninterface scala.Product, interface scala.Serializable)\r\n```\r\nThis moves the optimization to erasure, for use in emitting the generic\r\nsignature, and the backend calls into it later for the list of\r\ninterfaces.\r\n\r\n[1]: https://issues.scala-lang.org/browse/SI-5278"
4079,'lrytz',"SI-8941 Idempotent presentation compilation of implicit classes\nWhen we name an implicit class, `enterImplicitWrapper` is called,\r\nwhich enters the symbol for the factory method into the\r\nowning scope. The tree defining this factory method is stowed into\r\n`unit.synthetics`, from whence it will be retrieved and incorporated\r\ninto the enclosing tree during typechecking (`addDerivedTrees`).\r\nThe entry in `unit.synthetics` is removed at that point.\r\n\r\nHowever, in the presentation compiler, we can typecheck a unit\r\nmore than once in a single run. For example, if, as happens\r\nin the enclosed test, a call to ask for a type at a given\r\nposition interrupts type checking of the entire unit, we\r\ncan get into a situation whereby the first type checking\r\ninvocation has consumed the entry from `unit.synthetics`,\r\nand the second will crash when it can't find an entry.\r\n\r\nSimilar problems have been solved in the past in\r\n`enterExistingSym` in the presentation compiler. This method\r\nis called when the namer encounters a tree that already has\r\na symbol attached. See 0b78a0196 / 148736c3df.\r\n\r\nThis commit takes a two pronged approach.\r\n\r\nFirst, `enterExistingSym` is extended to handle implicit classes.\r\nAny previous factory method in the owning scope is removed, and\r\n`enterImplicitWrapper` is called to place a new tree for the factory\r\ninto `unit.synthetics` and to enter its symbol into the owning scope.\r\n\r\nSecond, the assertions that could be tripped in `addDerivedTrees`\r\nand in `ImplicitClassWrapper#derivedSym` have been converted to\r\npositioned errors.\r\n\r\nThe first change is sufficient to fix this bug, but the second\r\nis also enough to make the enclosed test pass, and has been retained\r\nas an extra layer of defence.\r\n\r\nReview by @lrytz / @dragos"
4077,'','Bump version to 2.11.5 in build.number file.\nScala 2.11.4 release has been staged, we should start publishing snapshots\r\nfor Scala 2.11.5 now.'
4076,'','SI-8934 Fix whitebox extractor macros in the pres. compiler\nThe code that "aligns" patterns and extractors assumes that it can\nlook at the type of the unapply method to figure the arity of the\nextractor.\n\nHowever, the result type of a whitebox macro does not tell the\nwhole story, only after expanding an application of that macro do\nwe know the result type.\n\nDuring regular compilation, this isn\'t a problem, as the macro\napplication is expanded to a call to a synthetic unapply:\n\n    {\n      class anon$1 {\n        def unapply(tree: Any): Option[(Tree, List[Treed])]\n      }\n      new anon$1\n    }.unapply(<unapply selector>)\n\nIn the presentation compiler, however, we now use\n`-Ymacro-expand:discard`, which expands macros only to compute\nthe type of the application (and to allow the macro to issue\nwarnings/errors). The original application is retained in the\ntypechecked tree, modified only by attributing the potentially-sharper\ntype taken from the expanded macro.\n\nThis was done to improve hyperlinking support in the IDE.\n\nThis commit makes an isolated change to take the type of the macro\napplication into account as the result type of the `MethodType`\nused to calculate the extractor arity.\n\nThe enclosed test used to fail with:\n\n    too many patterns for trait api: expected 1, found 2\n\nBut now passes.'
4075,'',"SI-8835 Iterator tests can be junit\nWithout loss of generality or convenience, but helps\r\nreduce the number of files in test/files and may reduce\r\ncompile times for test suite.\r\n\r\nThis commit includes the fix from #3963 and an extra\r\ntest of that fix that ensures the stack doesn't grow\r\non chained drops.\r\n\r\nReview by @Ichoran "
4074,'','Improve PartialFunction/Function1 docs\nTODO: if this is what we want, all FunctionX should be documented as "*partial* function of X arguments" like I did for `Function1`.\r\n\r\nPrompted by https://groups.google.com/d/msg/scala-language/QuYtWldPNi8/hW2FjM0x96QJ. Apparently https://issues.scala-lang.org/browse/SI-5370\'s earlier doc fix wasn\'t enough (EDIT: I misattributed the fix to myself, while I just reported a bug).\r\n\r\nA question on the API: I get why isDefinedAt = true still allows for exceptions (changing that would require solving the halting problem, for compiler-generated partial functions), but I don\'t get why isDefinedAt = false does not require exceptions. The new doc explains this, and I don\'t assume this could be changed, but I\'m still curious about the rationale.\r\n\r\nReview by @phaller (for the library) & @heathermiller (for the docs).'
4073,'',"Bump version number in build.number to 2.11.4\nThis should happen every time we cut a new release. We don't touch\r\nversions.properties files because that file specifies dependencies and\r\nwe don't want to depend on broken Scala 2.11.3 release."
4072,'','SI-4950 Add tests, looks like it has been fixed earlier\n'
4071,'','Delete zipfile-bug.txt\nThe observed bug is probably solved (or should have a ticket), this 4-year-old thread dump does not seem to belong here.\r\n\r\nReview by @jsuereth.'
4070,'','Scala doc -- inconsistent  code style\nhttps://twitter.github.io/scala_school/collections.html#partition\r\n![image](https://cloud.githubusercontent.com/assets/1642040/4739786/5139218a-5a07-11e4-8620-1b4f03dd85ce.png)\r\n\r\n\r\n'
4069,'','SI-8898 javap -fun under new style lambdas\nTo support both -Ydelambdafy strategies, look for both inline\r\n(anonfun) and method (lambda) closure classes.\r\n\r\nFor method (lambda) style, use the anonfun method that is\r\ninvoked by the accessor.\r\n\r\nAlso, the output of javap must be captured eagerly for\r\nfiltering for the current target method.'
4068,'gkossakowski',"SI-8925, SI-7407 test cases, fixed in new backend\nGiven that the issue exists is old (2.10) and we move to the new\r\nbackend in 2.12, I don't plan to fix it in GenASM.\r\n\r\nThe test case for 7407 existed already, this commit just adds\r\n`-Yopt:l:none` to the flags to make no dead code is eliminated."
4067,'','SI-8926 default visbility RUNTIME for java annotations\nWhen parsed from source, java annotation class symbol are lacking the\r\n`@Retention` annotation. In mixed compilation, java annotations are\r\ntherefore emitted with visibility CLASS.\r\n\r\nThis patch conservatively uses the RUNTIME visibility in case there is\r\nno @Retention annotation.\r\n\r\nThe real solution is to fix the Java parser, logged in SI-8928.'
4066,'',"SI-8927 Update OSGi stuff to get rid of bndlib warning\nThe way the desired OSGi frameworks are chosen has changed between\r\nPax Exam versions:\r\n\r\nOn earlier versions, specifying it in code was fine, but PAX Exam 4.x\r\nruns the tests on the first OSGi framework it finds on classpath.\r\n\r\nAn exclusion for the transitive dependency org.osgi.core was added,\r\nbecause it seems that artifact has broken dependecies (which would\r\nhave brought us back to square one).\r\nGood thing is that it isn't needed here, because the OSGi framework JARs\r\ncontain all necessary classes."
4065,'Ichoran',"Propsing a simple addition to collections API\nI often find myself in need of a method like `groupWhile` (it similar in essence to `takeWhile`, and hence the name). so far I've written similar solutions using `foldLeft` or `span`, but it is less convinient to use."
4064,'','fix typo. s/represenation/representation\n'
4063,'','Make global-showdef a DirectTest\nThe test test/files/run/global-showdef.scala was outputting\r\nto the cwd instead of the test output dir.\r\n\r\nGood behavior is now inherited from DirectTest.\r\n\r\nTest frameworks, of any ilk or capability, rock.\r\n\r\nIssue was revealed by https://github.com/scala/scala/pull/4024\r\n\r\nReview by @retronym '
4062,'',"Proper cleanup after finishing global-showdef test\nThe temporary foo directory with classes created by global-showdef.scala was not deleted after finishing a test. When I was running tests from Scala project root, this directory was created there and was visible when running git status.\r\n\r\nI just forced the creation of a foo directory inside global-showdef-run.obj - so it's properly deleted after finishing the test."
4059,'','SI-8918 Unary ids are plain ids\nAllow +,-,!,~ to be used as unprefixed identifiers.\r\n\r\nAs prefix operators, they must be followed by\r\na simple expression, so otherwise, consume the\r\nid itself as the start of a simple expression.'
4058,'',"SI-8922 REPL load -v\nVerbose mode causes the familiar prompt and\r\nline echo so you can see what you just loaded.\r\n\r\nThe quit message is pushed up a level in the\r\nprocess loop.\r\n\r\nThis has the huge payoff that if you start the\r\nrepl and immediately hit ctl-D, you don't have to\r\nwait for the compiler to init (yawn) before you\r\nget a shell prompt back.\r\n\r\nReview by @gourlaysama "
4057,'','Is Scala pickling forgets to skip over transient members\nHi,\r\nI came across a very random (low probability) bug using the scalax graph library.\r\n\r\nThe suspicion is that transient members are not handled properly?\r\n\r\nThe code where the stack originates is this:\r\n\r\nhttps://github.com/scala-graph/scala-graph/blob/master/core/src/main/scala/scalax/collection/Graph.scala#L43\r\n\r\n```scala\r\n@transient lazy val isDirected =\r\n    edgeT.tpe.baseClasses contains (typeOf[DiHyperEdgeLike[_]].typeSymbol)\r\n```\r\n\r\nHere is the stack\r\n\r\n```\r\n[11:10:56][Step 1/1] java.lang.AssertionError: assertion failed: trait EdgeLike\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.finishSym$1(UnPickler.scala:281)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readSymbol(UnPickler.scala:292)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.run(UnPickler.scala:76)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler.unpickle(UnPickler.scala:37)\r\n[11:10:56][Step 1/1] \tat scala.reflect.runtime.JavaMirrors$JavaMirror.unpickleClass(JavaMirrors.scala:565)\r\n[11:10:56][Step 1/1] \tat scala.reflect.runtime.SymbolLoaders$TopClassCompleter.complete(SymbolLoaders.scala:32)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1231)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.scala$reflect$internal$pickling$UnPickler$Scan$$fromName$1(UnPickler.scala:207)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readExtSymbol$1(UnPickler.scala:226)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readSymbol(UnPickler.scala:250)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readSymbolRef(UnPickler.scala:783)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readType(UnPickler.scala:346)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$$anonfun$readTypeRef$1.apply(UnPickler.scala:792)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$$anonfun$readTypeRef$1.apply(UnPickler.scala:792)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.at(UnPickler.scala:171)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readTypeRef(UnPickler.scala:792)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$$anonfun$readType$1.apply(UnPickler.scala:353)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$$anonfun$readType$1.apply(UnPickler.scala:353)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.PickleBuffer.until(PickleBuffer.scala:163)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.PickleBuffer.until(PickleBuffer.scala:163)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readType(UnPickler.scala:353)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$$anonfun$readTypeRef$1.apply(UnPickler.scala:792)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$$anonfun$readTypeRef$1.apply(UnPickler.scala:792)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.at(UnPickler.scala:171)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readTypeRef(UnPickler.scala:792)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readType(UnPickler.scala:358)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$$anonfun$readTypeRef$1.apply(UnPickler.scala:792)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$$anonfun$readTypeRef$1.apply(UnPickler.scala:792)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.at(UnPickler.scala:171)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readTypeRef(UnPickler.scala:792)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readType(UnPickler.scala:366)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$LazyTypeRef$$anonfun$34.apply(UnPickler.scala:855)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$LazyTypeRef$$anonfun$34.apply(UnPickler.scala:855)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.at(UnPickler.scala:171)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan$LazyTypeRef.complete(UnPickler.scala:855)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1231)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.Symbols$Symbol.initialize(Symbols.scala:1374)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.Symbols$Symbol.annotations(Symbols.scala:1581)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.Symbols$Symbol.addAnnotation(Symbols.scala:1600)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.readSymbolAnnotation(UnPickler.scala:491)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler$Scan.run(UnPickler.scala:88)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.pickling.UnPickler.unpickle(UnPickler.scala:37)\r\n[11:10:56][Step 1/1] \tat scala.reflect.runtime.JavaMirrors$JavaMirror.unpickleClass(JavaMirrors.scala:565)\r\n[11:10:56][Step 1/1] \tat scala.reflect.runtime.SymbolLoaders$TopClassCompleter.complete(SymbolLoaders.scala:32)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1231)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.Types$TypeRef.thisInfo(Types.scala:2407)\r\n[11:10:56][Step 1/1] \tat scala.reflect.internal.Types$TypeRef.baseClasses(Types.scala:2412)\r\n[11:10:56][Step 1/1] \tat scalax.collection.GraphLike$class.isDirected(Graph.scala:44)\r\n[11:10:56][Step 1/1] \tat scalax.collection.immutable.DefaultGraphImpl.isDirected$lzycompute(Graph.scala:41)\r\n[11:10:56][Step 1/1] \tat scalax.collection.immutable.DefaultGraphImpl.isDirected(Graph.scala:41)\r\n```'
4056,'','Insert missing copyright headers\nReview by @gourlaysama'
4055,'lrytz',"Update copyright notices in source code to 2014\nI used this command:\n\n    % git grep -l --null Copyright | xargs -0 -n 1 perl -p -i -e 's/(Copyright\\s+(20..-|))(20(09|10|11|12|13))(\\b.*(LAMP|Typesafe).*)/${1}2014$5/g'"
4054,'','SI-8916 Clean up unused imports, values and variables\n'
4053,'',"SI-8907 Don't force symbol info in isModuleNotMethod\nTest case by Jason.\r\n\r\nRefChecks adds the lateMETHOD flag lazily in its info transformer.\r\nThis means that forcing the `sym.info` may change the value of\r\n`sym.isMethod`.\r\n\r\n0ccdb151f introduced a check to force the info in isModuleNotMethod,\r\nbut it turns out this leads to errors on stub symbols (SI-8907).\r\n\r\nThe responsibility to force info is transferred to callers, which\r\nis the case for other operations on symbols, too."
4052,'','SI-8910 BitSet sometimes uses exponential memory.\nBecause of an off-by-one error in scala.collection.mutable.BitSet, where a function (ensureCapacity) is passed a list length instead of an index, when ^=, &=, |=, or &~= are passed BitSets with the same internal capacity as the set the method is being invoked on, the size of the first BitSet is needlessly doubled.\r\n\r\nThis patch simply changes the ensureCapacity calls to pass the last index of the list, instead of the raw length.'
4051,'','SI-6502 Reenables loading jars into the running REPL (regression in 2.10)\nFixes [SI-6502](https://issues.scala-lang.org/browse/SI-6502), reenables loading jars into the running REPL (regression in 2.10). This PR allows adding a jar to the compile and runtime classpaths without resetting the REPL state (crucial for Spark [SPARK-3257](issues.apache.org/jira/browse/SPARK-3257)).\r\n\r\nThis follows the lead taken by @som-snytt in PR [#3986](https://github.com/scala/scala/pull/3986), which differentiates two jar-loading behaviors (muddled by `cp`):\r\n - adding jars and replaying REPL expressions (using `replay`)\r\n - adding jars without resetting the REPL (deprecated `cp`, introduced `require`)\r\nThis PR implements `require` (left unimplemented in [#3986](https://github.com/scala/scala/pull/3986))\r\n\r\nThis PR is a simplification of a similar approach taken by @gkossakowski in #3884. In this attempt, we check first to make sure that a jar is only added if it only contains _new_ classes/traits/objects, otherwise we emit an error. This differs from the old invalidation approach which also tracked deleted classpath entries.'
4050,'','SI-8910 BitSet sometimes uses exponential memory.\nBecause of an off-by-one error in scala.collection.mutable.BitSet, where a function (ensureCapacity) is passed a length list instead of an index, when ^=, &=, |=, or &~= are passed BitSets with the same internal capacity as the set the method is being invoked on, the size of the first BitSet is needlessly doubled.\r\n\r\nThis patch simply changes the ensureCapacity calls to pass the last index of the list, instead of the raw length.'
4049,'','SI-8900 Don\'t assert !isDelambdafyFunction, it may not be accurate\nThe implementations of isAnonymousClass, isAnonymousFunction,\r\nisDelambdafyFunction and isDefaultGetter check if a specific substring\r\n(eg "$lambda") exists in the symbol\'s name.\r\n\r\nSI-8900 shows an example where a class ends up with "$lambda" in its\r\nname even though it\'s not a delambdafy lambda class. In this case the\r\nconflict seems to be introduced by a macro. It is possible that the\r\ncompiler itself never introduces such names, but in any case, the\r\nabove methods should be implemented more robustly.\r\n\r\nThis commit is band-aid, it fixes one specific known issue, but there\r\nare many calls to the mentioned methods across the compiler which\r\nare potentially wrong.'
4048,'','[nomerge] SI-8899 Revert "SI-8627 make Stream.filterNot non-eager"\nThis reverts commit 9276a1205f74fdec74206209712831913e93f359.\r\n\r\nThe change is not binary compatible, See discussion on SI-8899. Making\r\nfilterImpl non-private changes its call-sites (within TraversableLike)\r\nfrom INVOKESTATIC to INVOKEINTERFACE. Subclasses of TraversableLike\r\ncompiled before this change don\'t have a mixin for filterImpl.'
4047,'',"Fix tests under -Ydelambdafy:method\nWe don't currently run a nightly build using `-Ydelambdafy:method`, that's why some tests diverged.\r\n\r\nFor this PR, a successful `-Ydelambdafy:method` build is [here](https://scala-webapps.epfl.ch/jenkins/view/All/job/scala-checkin-manual/1354/console)\r\n\r\nAfter this PR is merged, I will add the `Ydelambdafy:method` flag to the [nightly genbcode build](https://scala-webapps.epfl.ch/jenkins/view/2.11.x/job/scala-nightly-genbcode-2.11.x/)"
4046,'','SI-8711 ScalaVersion.unparse doesn\'t produce valid versions\nThere is no dot between `major.minor.rev` and `-build` in a scala\r\nversion, yet that\'s what unparse returns for:\r\n\r\n```\r\n// was "2.11.3.-SNAPSHOT"\r\nScalaVersion("2.11.3-SNAPSHOT").unparse\r\n```'
4045,'retronym','SI-8875 showCode should print all class constructor modifiers.\nshowCode used to print nothing when the only modifier was a change in\r\nvisibility scope (i.e. no flags but privateWithin is set).'
4044,'','SI-5091 Move named-args cycle test from pending to neg\nThere is a typechecking cycle, and since 4669ac180e5 we now report\nthis in a clearer manner.\n\nOnce we change the language to unconditionally interpret an\nassignent in argument position as a named argument would be the\nonly way to get this over to `pos`.\n\nReview by @lrytz'
4043,'lrytz',"SI-3439 Fix use of implicit constructor params in super call\nWhen typechecking the primary constructor body, the symbols of\nconstructor parameters of a class are owned by the class's owner.\nThis is done make scoping work; you shouldn't be able to refer to\nclass members in that position.\n\nHowever, other parts of the compiler weren't so happy about\nthis arrangement. The enclosed test case shows that our\nchecks for invalid, top-level implicits was spuriously triggered,\nand implicit search itself would fail.\n\nFurthermore, we had to hack `Run#compiles` to special case\ntop-level early-initialized symbols. See SI-7264 / 86e6e9290.\n\nThis commit:\n\n  - introduces an intermediate local dummy term symbol which\n    will act as the owner for constructor parameters and early\n    initialized members\n  - adds this to the `Run#symSource` map if it is top level\n  - simplifies `Run#compiles` accordingly\n  - tests this all in a top-level class, and one nested in\n    another class.\n\nReview by @lrytz.\n\nUp for discussion: this might need to target `-Xsource:2.12`\nas it could introduce a new candidate implicit in the super call."
4042,'adriaanm',"SIP-14 improvements\n Add missing canonical combinators:\r\n\r\n  - `def transform[S](f: Try[T] => Try[S])(implicit executor: ExecutionContext): Future[S]`\r\n  - `def transformWith[S](f: Try[T] => Future[S])(implicit executor: ExecutionContext): Future[S]`\r\n  - `def flatten[S](implicit ev: T <:< Future[S]): Future[S]`\r\n  - `def zipWith[U, R](that: Future[U])(f: (T, U) => R)(implicit executor: ExecutionContext): Future[R]`\r\n\r\nAdd missing utilities:\r\n  -  `val unit: Future[Unit]` in `object Future`\r\n  -  `val never: Future[Nothing]` in `object Future`\r\n  -  `def defaultBlockContext: BlockContext` in `object BlockContext`\r\n\r\nRefactors:\r\n  - the `scala.concurrent.Future` trait to not explicit create any `Promises`,\r\n    so that implementations can control implementation type,\r\n    this is mainly facilitated through adding of the `transform` and `transformWith` methods.\r\n  - the implementation of `ExecutionContextImpl` has been cleaned up\r\n\r\nSecuring:\r\n  - Add a self-check in `completeWith` and `tryCompleteWith` to avoid cycles in trait Promise\r\n  - Capping the maximum number of threads for the global `ExecutionContext` to the max parallelism\r\n  - Implementing (almost) all `Future` combinators on `transformWith` and `transform` means\r\n     that `DefaultPromise` linking works on both `(flat)map` and `recover(With)`\r\n  - Nested `blocking {}` should not spawn extra threads beyond the first.\r\n\r\nRemoves:\r\n  - the private `internalExecutor` method in favor of an import in trait `Future`\r\n  - the private `internalExecutor` method in favor of an import in trait `Promise`\r\n  - the `AtomicReferenceFieldUpdater` in `AbstractPromise` since we're using `Unsafe`\r\n  - `scala.concurrent.impl.Future` is no longer needed\r\n\r\nDeprecates:\r\n  - `Future.onSuccess` - discourage the use of callbacks\r\n                         (and is also redundant considering `foreach` and `onComplete`)\r\n  - `Future.onFailure` - discourage the use of callbacks\r\n                       (and is also redundant considering `onComplete` and `failed.foreach`)\r\n  - `ExecutionContext.prepare` - it was ill specced and it is too easy to forget to call it\r\n                     (or even know when to call it or call it more times than needed)\r\n\r\nReimplements:\r\n  - `failed` - in terms of `transform`\r\n  - `map` - in terms of `transform`\r\n  - `flatMap` - in terms of `transformWith`\r\n  - `recover` - in terms of `transform`\r\n  - `recoverWith` - in terms of `transformWith`\r\n  - `zip` - in terms of `flatMap` + `map`\r\n  - `fallbackTo` - in terms of `recoverWith` + `recoverWith`\r\n  - `andThen` - in terms of `transform`\r\n\r\nMiscellaneous:\r\n  - Giving the threads of `ExecutionContext.global` sensible names\r\n\r\nDocumentation:\r\n  - Almost all methods on `Future` and `Promise` have been revisited and had their ScalaDoc updated\r\n\r\nTests:\r\n  - Yes"
4040,'lrytz',"FSC / REPL Bug Bonanza\nThe big contribution here is to change `adaptInfos` to\nstart with a clean slate (a one element type history)\non subsequent runs. I did the same a while back for package\nclasses, this is an generalization of that idea. This ensures\nthat all info transformers are run, importantly the side-effecty\nones.\n\nThis fixes a regression in specialization in the REPL, which\nwas a latent bug uncovered by our recent fix to `perRunCaches`.\n\nThe other changes are similarly themed, being more disciplined\nwhen reading or mutating the type history.\n\nSubmitting for a test run and initial review by @lrytz. The commit\nmessages might need some fleshing out as I've been a little bit\nhand wavy in a few of my explanations where I wasn't able to\nprecisely explain *why* the fix works."
4039,'','Minor spelling corrections and fix of the claimed outcome of the examples in the section on repeated parameters\n'
4038,'','SI-8894 dealias when looking at tuple components\n[Shooting from the hip here: did not run test suite.]\r\n\r\nClassic bait-and-switch: `isTupleType` dealiases, but `typeArgs` does not.\r\nWhen deciding with `isTupleType`, process using `tupleComponents`.\r\nSimilar for other combos. We should really enforce this using extractors,\r\nand only decouple when performance is actually impacted.'
4037,'','SI-8890 handle reference to overload with error\nWe must report the ambiguity error to avoid a stack overflow.\r\n\r\nTODO: should we simply always report? The test suite passes,\r\nwith the added test file reporting a valid second error.\r\n\r\nreview by @lrytz, cc @dragos '
4036,'retronym',"SI-8893 Restore linear perf in TailCalls with nested matches\nDetails in the individual commits. The one with SI-8893 in the commit\r\ntitle offers the biggest win.\r\n\r\nI'd ask for some help from the kindly reviewer to understand why\r\nthat fixed exponential performance, rather than just giving\r\na constant factor speedup.\r\n\r\nReview by @adriaanm"
4035,'','Scala docs - can\'t reorder by alphabetic\nIf you click on "order by inheritance" you can\'t click on alphabetic after that.\r\n\r\nI think [this](https://github.com/scala/scala/commit/466340cf9e3fbc6fbd3c65e13b43d7fe57471d86 ) commit accidentally removed $("#order > ol > li.alpha").click(function()\r\n'
4034,'','Update stripPrefix/StringLike docs to talk about no op case\nrework of #3950:\r\n\r\n- rebased on 2.11.x\r\n- incorporated review comments by @som-snytt\r\n'
4033,'','SI-8888 Avoid ClassFormatError under -Ydelambdafy:method\nThe pattern matcher phase (conceivably, among others) can generate\ncode that binds local `Ident`s symbolically, rather than according\nto the lexical scope. This means that a lambda can capture more than\none local of the same name.\n\nIn the enclosed test case, this ends up creating the following\ntree after delambdafy\n\n    [[syntax trees at end of                delambdafy]] // delambday-patmat-path-dep.scala\n    matchEnd4({\n      case <synthetic> val x1: Object = (x2: Object);\n      case5(){\n        if (x1.$isInstanceOf[C]())\n          {\n            <synthetic> val x2#19598: C = (x1.$asInstanceOf[C](): C);\n            matchEnd4({\n              {\n                (new resume$1(x2#19598, x2#19639): runtime.AbstractFunction0)\n              };\n              scala.runtime.BoxedUnit.UNIT\n            })\n          }\n        else\n          case6()\n      };\n      ...\n    })\n    ...\n    <synthetic> class resume$1 extends AbstractFunction0 {\n      <synthetic> var x2: C = null;\n      <synthetic> var x2: C = null;\n      ...\n    }\n\nAfter this commit, the var members of `resume$1` are given fresh\nnames, rather than directly using the name of the captured var:\n\n    <synthetic> var x2$3: C = null;\n    <synthetic> var x2$4: C = null;\n\nReview by @lrytz or @gkossakowski'
4032,'',"Make Scaladoc actually exit with non-zero exit code in case of errors, as its docs say it does\nI did this work for Twitter, on Twitter's time, so I'm covered under Twitter's CLA. \r\n\r\nFixes https://issues.scala-lang.org/browse/SI-8885."
4031,'','Scaladoc exit code is always 0\nIt should be non-zero if scaladoc has any errors.\r\n\r\nPull request at #4032'
4030,'','SI-8843 AbsFileCL acts like a CL\nLet the AbstractFileClassLoader override just the usual suspects.\r\n\r\nNormal delegation behavior should ensue.\r\n\r\nThat\'s instead of overriding `getResourceAsStream`, which was intended\r\nthat "The repl classloader now works more like you\'d expect a classloader to."\r\n(Workaround for "Don\'t know how to construct an URL for something which exists\r\nonly in memory.")\r\n\r\nAlso override `findResources` so that `getResources` does the obvious thing,\r\nnamely, return one if `getResource` does.  (If `getResources.size > 1`, the others come\r\nfrom parent/system loaders.)\r\n\r\nThe translating class loader for REPL only special-cases `foo.class`: as\r\na fallback, take `foo` as `$line42.$read$something$foo` and try that class file.\r\nThat\'s the use case for "works like you\'d expect it to."\r\n\r\nThere was a previous fix to ensure `getResource` doesn\'t take a class name.\r\nThe convenience behavior, that `classBytes` takes either a class name or a resource\r\npath ending in ".class", has been promoted to `ScalaClassLoader`.\r\n\r\nReview by @retronym '
4029,'','SI-8291 Fix implicitNotFound message with type aliases\nThis pattern of code is typically a bug:\n\n    if (f(tp.typeSymbol)) {\n       g(tp.typeArgs)\n    }\n\nIntead, one needs to take the base type of `tp` wrt `tp.typeSymbol`.\n\nThis commit does exactly that when formatting the `@implicitNotFound`\ncustom error message.\n\nPatch found on the back of an envelope in the handwriting of @adriaanm\n\nReview by @som-snytt'
4028,'lrytz',"Avoid ClassfileAnnotation warning for @SerialVersionUID\n@SerialVersionUID is special-cased, the warning doesn't apply.\r\n\r\nRelated to SI-7041."
4027,'','Revert "Disable flaky presentation compiler test."\nThis reverts commit 8986ee4fd56c53d563165d992185c6c532f35790.\r\n\r\nScaladoc seems to work reliably for 2.11.x. We are using it in the IDE builds and haven\'t noticed any\r\nflakiness, so we\'d like to get reinstate this test.'
4026,'','SI-4788/SI-5948 Respect RetentionPolicy of Java annotations\n'
4025,'',"SI-7981 override toSeq in immutable.MapLike and immutable.Set\nhttps://issues.scala-lang.org/browse/SI-7981\r\nThis pull request is a way to pay attention to the issue. I'm not sure that it is the best implementation. There are may be faster way."
4024,'adriaanm',"SI-8217 allow abstract type members in objects\nPreviously, abstract type members were allowed in objects only when inherited,\nbut not when declared directly. This inconsistency was not intended. In dotty,\nabstract type members are allowed in values and represent existentials; so upon\ndiscussion, it was decided to fix things to conform to dotty and allow such type\nmembers. Adriaan also asked to keep rejecting abstract type members in methods\neven though they would conceivably make sense.\n\nDiscussions happened on #3407, scala/scala-dist#127.\nThis code is improved from #3442, keeps closer to the current logic, and passes tests.\n\nExisting tests that have been converted to `pos` tests show that\nthis works, and a new test has been added to show that local\naliases (ie term-owned) without a RHS are still rejected.\n\nI've just added the new test to @Blaisorblade's PR, #3978.\n\nReview by @adriaanm\n\nI tend to think this one is okay for 2.11.x, as it only loosens\na restriction. That said, it would be no great loss to wait until\n2.12."
4023,'gkossakowski','Increase REPL startup timeout to avoid test failures\nUnder load on Jenkins, we\'ve been seeing:\n\n```\n% diff /localhome/jenkins/a/workspace/scala-nightly-auxjvm-2.12.x/jdk/jdk7/label/auxjvm/test/files/run/t4542-run.log /localhome/jenkins/a/workspace/scala-nightly-auxjvm-2.12.x/jdk/jdk7/label/auxjvm/test/files/run/t4542.check\n@@ -2,75 +2,14 @@ Type in expressions to have them evaluated.\n Type :help for more information.\n\n scala> @deprecated("foooo", "ReplTest version 1.0-FINAL") class Foo() {\n java.util.concurrent.TimeoutException: Futures timed out after [60 seconds]\n \tat scala.concurrent.impl.Promise$DefaultPromise.ready(Promise.scala:219)\n \tat scala.concurrent.impl.Promise$DefaultPromise.ready(Promise.scala:153)\n \tat scala.concurrent.Await$$anonfun$ready$1.apply(package.scala:95)\n \tat scala.concurrent.Await$$anonfun$ready$1.apply(package.scala:95)\n \tat scala.concurrent.BlockContext$DefaultBlockContext$.blockOn(BlockContext.scala:53)\n \tat scala.concurrent.Await$.ready(package.scala:95)\n \tat scala.tools.nsc.interpreter.ILoop.processLine(ILoop.scala:431)\n \tat scala.tools.nsc.interpreter.ILoop.loop(ILoop.scala:457)\n \tat scala.tools.nsc.interpreter.ILoop$$anonfun$process$1.apply$mcZ$sp(ILoop.scala:875)\n```\n\nThis commit bumps the timeout up be a factor of ten to try to\nrestore that comforting green glow to https://scala-webapps.epfl.ch/jenkins/view/2.N.x\n\nReview by @gkossakowski'
4022,'',"SI-8870 Fix markup errors in the Types section of the spec\nBad: `T'_n`\nGood: `T_n'`\n\nReview by @gourlaysama"
4021,'adriaanm',"SI-8869 Prevent ill-kindedness in type lambdas\nWhen type checking an type application, the arguments are allowed\nto be of kinds other than *. This leniency is controlled by the\n`ContextMode` bit `TypeConstructorAllowed`.\n\n(More fine grained checking of matching arity a bounds of type\nconstructors is deferred until the refchecks phase to avoid\ncycles during typechecking.)\n\nHowever, this bit is propagated to child contexts, which means\nthat we fail to report this error in the lexical context marked\nhere:\n\n    T[({type x = Option}#x)]\n        `-------------'\n\nThis commit resets this bit to false in any child context\nrelates to a different tree from its parent.\n\nReview by @adriaanm"
4020,'','SI-8624 PriorityQueue documentation is not clear enough\nAdded a paragraph explaining that dequeue is the only way to get your elements in priority order.'
4019,'','SI-6192  Range: to, until and end are confusing\nAdded some documentation explaining what the role of `end` is.'
4018,'',"Don't remove elements from a map during iteration.\nDoing so relies on implementation details which might change.\n\nSee #3911 / SI-8774.\n\nReview by @lrytz; /cc @alextg-github"
4017,'retronym','SI-6541 valid wildcard existentials for case-module-unapply\nInstead of letting the compiler infer the return type of case module\r\nunapply methods, provide them explicitly.'
4016,'gkossakowski','SI-8731 warning if @switch is ignored\nFor matches with two or fewer cases, @switch is ignored. This should\r\nnot happen silently.'
4015,'','.       ‘«\n'
4014,'','......f45rf cv r\n'
4013,'','SI-8868 Fix unpickling of local dummy symbols\nThese pop up as the owner of symbols in annotation arguments,\r\nsuch as the ones introduced by the names/defaults desugaring.\r\n\r\nThe first two test cases here motivate the two patches to Unpicker.\r\n\r\nThe third requires both fixes, but exploits the problem directly,\r\nwithout using `@deprecated` and named arguments.\r\n\r\nSee also 14fa7be / SI-8708 for a recently remedied kindred bug.\r\n\r\nReview by `scala.annotation.`@lrytz'
4012,'',"Merge 2.11.x to 2.12.x\nNo conflicts, no skipped commits.\n\nI'm keen to have the increased test timeout from #4007 merged to 2.12\nto improve the stability of our nightly builds.\n\n```\n% export MB=$(git merge-base origin/2.12.x origin/2.11.x)\n\n% git --no-pager  log --graph --oneline --decorate $MB...origin/2.11.x\n*   2cfac1a (origin/2.11.x, 2.11.x) Merge pull request #3996 from gourlaysama/wip/spec\n|\\\n| * 65eb42f (origin/pr/3996) spec: a header that links to the index, with a scala logo\n| * e95d91e spec: a print stylesheet to remove the TOC when printing\n| * 3a72a9d spec: generated TOC with linkable headers\n* |   547f0a1 Merge pull request #4009 from gourlaysama/wip/test-flags\n|\\ \\\n| * | 3059afb (origin/pr/4009) Cleanup a few flags in test/files/\n* | |   cb26ad3 Merge pull request #4007 from retronym/topic/bump-timeout\n|\\ \\ \\\n| * | | 5320424 (retronym/topic/bump-timeout, origin/pr/4007, codescala/topic/bump-timeout) Bump timeout in interactive tests from 10s -> 30s.\n|/ / /\n* | |   5508e00 (codescala/2.11.x) Merge pull request #4006 from retronym/topic/defragility\n|\\ \\ \\\n| |/ /\n|/| |\n| * | dc54894 (retronym/topic/defragility, origin/pr/4006, codescala/topic/defragility) Avoid test fragility to changes in Predef\n|/ /\n* |   f62c312 (codescala/topic/test-r) Merge pull request #4002 from retronym/merge/2.10.x-to-2.11.x-20140925\n|\\ \\\n| * \\   610c284 (retronym/merge/2.10.x-to-2.11.x-20140925, origin/pr/4002, merge/2.10.x-to-2.11.x-20140925) Merge remote-tracking branch 'origin/2.10.x' into merge/2.10.x-to-2.11.x-20140925\n| |\\ \\\n|/ / /\n| * | a908ded (origin/2.10.x, codescala/2.10.x, 2.10.x) Merge pull request #3998 from retronym/backport/7756\n| * | 0022dcc (retronym/backport/7756, origin/pr/3998, backport/7756) [backport] SI-7756 Uncripple refchecks in case bodies\n|  /\n* |   5695588 (codescala/ticket/8079.scala) Merge pull request #3999 from mpociecha/classpath-findSourceFile-method-renaming\n|\\ \\\n| * | ea2ec79 (origin/pr/3999) Get rid of Platform.doLoad method.\n| * | ea589ea Rename ClassPath.findSourceFile to ClassPath.findClassFile\n|/ /\n* |   269cb7b Merge pull request #3994 from puffnfresh/feature/system-compiler-properties\n|\\ \\\n| * | 48caed5 (origin/pr/3994) Make compiler.properties fall back to prefixed\n* | |   88bf17d Merge pull request #3997 from krystiannowak/patch-1\n|\\ \\ \\\n| |_|/\n|/| |\n| * | fab1ffc (origin/pr/3997) HasSet to HashSet typo fix\n|/ /\n* |   7956469 Merge pull request #3990 from som-snytt/issue/spec-overload-title\n|\\ \\\n| |/\n|/|\n| * 92692e6 (origin/pr/3990) Particular formatting improvement in the spec\n|/\n*   379dbb0 (origin/flatClasspath) Merge pull request #3984 from gourlaysama/wip/spec\n|\\\n| * d24ad90 (origin/pr/3984, codescala/pr/3984) spec: fix broken links and anchors, including examples\n| * 3b0c71d spec: remove trailing whitespace everywhere\n| * bca19f3 spec: fix latex formatting all over the place\n| * 6e19162 spec: add syntax highlighting for scala code with highlight.js\n| * e11fe9b spec: use the yaml title as the HTML title\n*   79f59c5 Merge pull request #3988 from ghik/issue/8459\n|\\\n| * 7c81959 (origin/pr/3988, codescala/pr/3988) SI-8459 fix incorrect positions for incomplete selection trees\n* |   8e1efc3 Merge pull request #3989 from retronym/ticket/8852\n|\\ \\\n| * | 17a1abb (retronym/ticket/8852, origin/pr/3989, codescala/ticket/8852) SI-8852 Support joint compilation of Java interfaces w. statics\n|  /\n* |   2c23a5e Merge pull request #3974 from xeno-by/topic/buffer-pattern-expander-errors\n|\\ \\\n| |/\n|/|\n| * 3b35177 (origin/pr/3974) This ensures that typechecking custom unapplications in silent mode doesn't leak uncatchable errors. Interestingly enough, the problem only manifested itself for custom unapply methods, not for synthetic ones generated for case classes.\n* 190c672 Merge pull request #3980 from retronym/ticket/8844\n* a8a31e9 (retronym/ticket/8844, origin/pr/3980, codescala/ticket/8844) SI-8844 Fix regression with existentials + type aliases\n\n% git merge origin/2.11.x\nRemoving test/files/run/t5614.flags\nRemoving test/files/run/t5532.flags\nRemoving test/files/run/t5530.flags\nRemoving test/files/pos/five-dot-f.flags\nMerge made by the 'recursive' strategy.\n spec/01-lexical-syntax.md                                                  |  68 ++++++-------\n spec/02-identifiers-names-and-scopes.md                                    |  11 +--\n spec/03-types.md                                                           | 313 ++++++++++++++++++++++++++++--------------------------------\n spec/04-basic-declarations-and-definitions.md                              | 129 +++++++++++--------------\n spec/05-classes-and-objects.md                                             | 134 +++++++++++---------------\n spec/06-expressions.md                                                     | 281 +++++++++++++++++++++++------------------------------\n spec/07-implicit-parameters-and-views.md                                   |  65 ++++++-------\n spec/08-pattern-matching.md                                                | 124 ++++++++++++------------\n spec/09-top-level-definitions.md                                           |  14 +--\n spec/10-xml-expressions-and-patterns.md                                    |  55 ++++++-----\n spec/11-user-defined-annotations.md                                        |   5 +-\n spec/12-the-scala-standard-library.md                                      | 131 ++++++++++++-------------\n spec/13-syntax-summary.md                                                  |  36 +++----\n spec/14-references.md                                                      |   8 +-\n spec/README.md                                                             |   5 +-\n spec/_includes/numbering.css                                               |   6 ++\n spec/_layouts/default.yml                                                  |  62 +++++++++++-\n spec/_layouts/toc.yml                                                      |  17 +++-\n spec/index.md                                                              |   2 -\n spec/public/favicon.ico                                                    | Bin 0 -> 6518 bytes\n spec/public/highlight/LICENSE                                              |  24 +++++\n spec/public/highlight/highlight.pack.js                                    |   1 +\n spec/public/images/scala-logo-red-spiral-dark.png                          | Bin 0 -> 13021 bytes\n spec/public/octicons/LICENSE.txt                                           |   9 ++\n spec/public/octicons/octicons.css                                          | 235 +++++++++++++++++++++++++++++++++++++++++++++\n spec/public/octicons/octicons.eot                                          | Bin 0 -> 31440 bytes\n spec/public/octicons/octicons.svg                                          | 198 ++++++++++++++++++++++++++++++++++++++\n spec/public/octicons/octicons.ttf                                          | Bin 0 -> 31272 bytes\n spec/public/octicons/octicons.woff                                         | Bin 0 -> 17492 bytes\n spec/public/scripts/navigation.js                                          |  70 ++++++++++++++\n spec/public/stylesheets/print.css                                          |  15 +++\n spec/public/stylesheets/screen.css                                         | 112 ++++++++++++++++++++--\n src/compiler/scala/tools/nsc/Properties.scala                              |   2 +-\n src/compiler/scala/tools/nsc/ast/parser/Parsers.scala                      |   2 +-\n src/compiler/scala/tools/nsc/javac/JavaParsers.scala                       |   5 +-\n src/compiler/scala/tools/nsc/symtab/classfile/ClassfileParser.scala        |   4 +-\n src/compiler/scala/tools/nsc/symtab/classfile/ICodeReader.scala            |   2 +-\n src/compiler/scala/tools/nsc/transform/UnCurry.scala                       |   2 +-\n src/compiler/scala/tools/nsc/transform/patmat/MatchTranslation.scala       |   4 +-\n src/compiler/scala/tools/nsc/transform/patmat/ScalacPatternExpanders.scala |  17 ++--\n src/compiler/scala/tools/nsc/typechecker/PatternTypers.scala               |   2 +-\n src/compiler/scala/tools/nsc/util/ClassPath.scala                          |   2 +-\n src/interactive/scala/tools/nsc/interactive/tests/core/TestSettings.scala  |   2 +-\n src/library/rootdoc.txt                                                    |   2 +-\n src/library/scala/util/Properties.scala                                    |   6 +-\n src/reflect/scala/reflect/internal/Types.scala                             |   2 +-\n test/files/neg/macro-invalidret.check                                      |   3 +-\n test/files/neg/macro-invalidret/Impls_1.scala                              |   2 +-\n test/files/pos/five-dot-f.flags                                            |   1 -\n test/files/pos/t8719.check                                                 |   0\n test/files/pos/t8719/Macros_1.scala                                        |  21 ++++\n test/files/pos/t8719/Test_2.scala                                          |  10 ++\n test/files/pos/t8844.scala                                                 |   4 +\n test/files/presentation/t8459.check                                        |  14 +++\n test/files/presentation/t8459/Test.scala                                   |   3 +\n test/files/presentation/t8459/src/IncompleteDynamicSelect.scala            |  14 +++\n test/files/run/t5530.flags                                                 |   1 -\n test/files/run/t5532.flags                                                 |   1 -\n test/files/run/t5614.flags                                                 |   1 -\n test/files/run/t8852a.scala                                                |  34 +++++++\n test/junit/scala/tools/nsc/symtab/SymbolTableForUnitTesting.scala          |   1 -\n 61 files changed, 1476 insertions(+), 818 deletions(-)\n create mode 100644 spec/public/favicon.ico\n create mode 100644 spec/public/highlight/LICENSE\n create mode 100644 spec/public/highlight/highlight.pack.js\n create mode 100644 spec/public/images/scala-logo-red-spiral-dark.png\n create mode 100644 spec/public/octicons/LICENSE.txt\n create mode 100644 spec/public/octicons/octicons.css\n create mode 100644 spec/public/octicons/octicons.eot\n create mode 100644 spec/public/octicons/octicons.svg\n create mode 100644 spec/public/octicons/octicons.ttf\n create mode 100644 spec/public/octicons/octicons.woff\n create mode 100644 spec/public/scripts/navigation.js\n create mode 100644 spec/public/stylesheets/print.css\n delete mode 100644 test/files/pos/five-dot-f.flags\n create mode 100644 test/files/pos/t8719.check\n create mode 100644 test/files/pos/t8719/Macros_1.scala\n create mode 100644 test/files/pos/t8719/Test_2.scala\n create mode 100644 test/files/pos/t8844.scala\n create mode 100644 test/files/presentation/t8459.check\n create mode 100644 test/files/presentation/t8459/Test.scala\n create mode 100644 test/files/presentation/t8459/src/IncompleteDynamicSelect.scala\n delete mode 100644 test/files/run/t5530.flags\n delete mode 100644 test/files/run/t5532.flags\n delete mode 100644 test/files/run/t5614.flags\n create mode 100644 test/files/run/t8852a.scala\n ```"
4011,'',"SI-8445, SI-6622 test cases, already fixed\nThey were most likely fixed in #3931 / e3107465c3.\r\n\r\nThe test case for SI-6622 is taken from Jason's PR #2654. I adjusted\r\nthe EnclosingMethod to be `null` in two places in the check file, for\r\nthe classes that are owned by fields (not methods)."
4010,'retronym','SI-8087 keep annotations on mixed-in private[this] fields\nRelated to SI-2511 / eea7956, which fixed the same issue for non\r\n`private[this]` fields.\r\n\r\nIf you have\r\n\r\n    trait T { private[this] val f = 0 }\r\n    class C extends T\r\n\r\nMixin geneartes an accessor method `T.f` with owner `T`. When\r\ngenerating the field in `C`, the Mixin.mixinTraitMembers calls\r\n`fAccessor.accessed`. The implementation of `accessed` does a lookup\r\nfor a member named `"f "` (note the space). The bug is that\r\n`private[this]` fields are not renamed to have space\r\n(`LOCAL_SUFFIX_STRING`) in their name, so the accessed was not found,\r\nand no annotations were copied from it.'
4009,'',"Cleanup a few compiler flags in test/files/\n * String interpolation isn't Xexperimental anymore\r\n\r\n   A few useless Xexperimental flags in tests were left behind by 6917cca,\r\n   after string interpolation was made non-experimental in 983f414.\r\n\r\n * Things added under -Xfuture in 2.10 are very much Xpresent now, the\r\n   flag isn't needed anymore."
4008,'',"Better ant / junit interaction\nCurrently junit test sources are always rebuilt, that's wasteful. The\r\nsecond dependency on the junit task is there so that the first can be\r\nskipped if sources haven't changed.\r\n\r\nAlso normalize package names versus location in the `test/junit` folder:\r\nant isn't very clever when it comes to selectively recompiling tests, so\r\nnow editing a test will only cause that one to be recompiled (instead of\r\n~13 files every time).\r\n\r\nThis makes TDD with junit even faster, /cc @som-snytt :)"
4007,'','Bump timeout in interactive tests from 10s -> 30s.\nSeeing too many of these failures on our build servers.\n\nhttps://scala-webapps.epfl.ch/jenkins/view/2.N.x/job/scala-nightly-auxjvm-2.11.x/148/jdk=jdk8,label=auxjvm/console\n\nThis is most likely due to load on the machines.'
4006,'',"Avoid test fragility to changes in Predef\nThe check file used to contain a stack trace entry from\nPredef with a line number. I've made the macro fail\nin a different manner that avoids this fragility.\n\nReview by @xeno-by"
4005,'',"add 'constantly' function to complement 'identity'\nProposing to move const (renamed as constantly) and identity together to improve language consistency.\r\nLittle conversation about: https://groups.google.com/forum/#!topic/scala-language/IgMLwK3ztjk"
4004,'retronym','SI-8861 Handle alias when probing for Any\nIf args to a method are alias types, dealias to see if they\r\ncontain Any before warning about inferring it. Similarly for\r\nreturn and expected types.'
4003,'','just added const functions\nExample:\r\n\r\n    val l: List[String] = List(1, 2, 3).map(const("A"))\r\n    val l: List[Any] = List(1, 2, 3).map(cnst("A"))'
4002,'',"Merge 2.10.x to 2.11.x\nJust one patch in play this time, but it is a backport that\ncan't be automatically merged forward, and its tripping our\n[merge alarm](https://scala-webapps.epfl.ch/jenkins/view/2.N.x/job/scala-integrate-2.10.x-to-2.11.x/)\n\n```\n% git fetch origin\n\n% export MB=$(git merge-base origin/2.11.x origin/2.10.x)\n\n% git log --oneline --graph --decorate $MB..origin/2.10.x\n* a908ded (origin/2.10.x) Merge pull request #3998 from retronym/backport/7756\n* 0022dcc (retronym/backport/7756, origin/pr/3998, backport/7756) [backport] SI-7756 Uncripple refchecks in case bodies\n\n% git co -b merge/2.10.x-to-2.11.x-20140925\nSwitched to a new branch 'merge/2.10.x-to-2.11.x-20140925'\n\n% git merge -sours origin/2.10.x\nMerge made by the 'ours' strategy.\n```\n\nReview by @gkossakowski"
4001,'adriaanm','SI-8862 Fix treatment of inherited implicits in package objects\nTwo spots in implicit search fell prey to a trap with package\r\nobjects. Members of a package object are entered into the scope\r\nof the enclosing package, but that doesn\'t form a suitable prefix\r\nfor determing the member type.\r\n\r\nA REPL transcript paints a picture that speaks a 1000 words:\r\n\r\n```\r\nscala> :paste -raw\r\n// Entering paste mode (ctrl-D to finish)\r\n\r\npackage p { class C[A] { def foo: A = ??? }; object `package` extends C[String] }\r\n\r\n// Exiting paste mode, now interpreting.\r\n\r\nscala> val p = rootMirror.getPackageIfDefined("p")\r\nwarning: there was one deprecation warning; re-run with -deprecation for details\r\np: $r.intp.global.Symbol = package p\r\n\r\nscala> p.info.decls\r\nres0: $r.intp.global.Scope = Scopes(class C, package object p, method foo)\r\n\r\nscala> val foo = p.info.decl(TermName("foo"))\r\nfoo: $r.intp.global.Symbol = method foo\r\n\r\nscala> p.typeOfThis memberType foo\r\nres1: $r.intp.global.Type = => A\r\n\r\nscala> val fooOwner = foo.owner\r\nfooOwner: $r.intp.global.Symbol = class C\r\n\r\nscala> p.info.decl(nme.PACKAGE).typeOfThis memberType foo\r\nres3: $r.intp.global.Type = => String\r\n```\r\n\r\nThis commit detects if we find an implicit in a package module,\r\nand then uses the self type of the corresponding package object\r\nas the prefix for the `ImplicitInfo`. This is done in both\r\n`Context.implicitss` (which collects in-scope implicits), and\r\nin `companionImplicitMap` (which harvests them from the implicit\r\nscope.) In addition, it was necessary / possible to remove a special\r\ncase that excluded package object implicits, the referenced tests for\r\nSI-3999 now pass without this.'
4000,'','SI-8861 Handle alias when probing for Any\nIf args to a method are alias types, dealias to see if they\r\ncontain Any before warning about inferring it. Similarly for\r\nreturn and expected types.'
3999,'',"Rename ClassPath.findSourceFile and delete Platform.doLoad\nThis is a change cherry-picked from a branch with new classpath implementation as\r\nit's something independent which doesn't affect anything and so that it should be safe to merge it.\r\n\r\nIf you look at the implementation of ClassPath.findSourceFile method and its usage\r\nit's clear that it should have been named `findClassFile` from the\r\nbeginning because that's what it does: find a class file and not a source file.\r\n\r\nWe don't need Platform.doLoad - .NET backend has been removed so method is a no-op."
3998,'','[backport] SI-7756 Uncripple refchecks in case bodies\nIn 65340ed4ad2e, parts of RefChecks were disabled when\nwe traversed into the results of the new pattern matcher.\nSimilar logic existed for the old pattern matcher, but in\nthat case the Match / CaseDef nodes still existed in the tree.\n\nThe new approach was too broad: important checks no longer\nscrutinized the body of cases.\n\nThis commit turns the checks back on when it finds the remnants\nof a case body, which appears as an application to a label def.\n\nConflicts:\n\tsrc/compiler/scala/tools/nsc/typechecker/RefChecks.scala\n\nCherry pick of 3df1d77fc984b976efa68098206e801cf3b83a9e\n\nReview by @gkossakowski'
3997,'','HasSet to HashSet typo fix\nHasSet to HashSet typo fix'
3996,'','spec: generated TOC, with linkable headers and return to top links\nThis adds a table of contents to the spec, with a way to get the link of a\r\nheader on hover (like on GitHub) and a "return to top" small icon at the\r\nend of each section.\r\n\r\nJekyll generates the H1-level table of contents, and then the current\r\none is expended using jQuery all the way down to H5 titles. Examples and\r\nH6 headers are ignored.\r\n\r\nGitHub\'s (MIT licensed) octicons are used for nice "link" and "up"\r\nicons.\r\n\r\n----\r\n\r\nOnline preview [here][1]. It looks fine in Firefox (32) and Chrome (37) (and even, surprisingly, in IE8).\r\n\r\nI just realized there is no particular reason for the TOC being on the right. I guess I was in a right-hand-side mood. I can move it to the left if needed...\r\n\r\nreview @retronym @som-snytt /cc @soc\r\n\r\n[1]: http://static.antoine.gourlay.fr/temp/spec/'
3995,'','SI-8267 Avoid existentials after polymorphic overload resolution\n... which can be introduced by `memberType` for methods\nwith methods dependent on class type parameters.\n\nUsually these are skolemized out of existence, but when\nwe carry through multiple overloaded alternatives and deferred\nthe call to `memberType`, this wasn\'t happening.\n\nThis commit calls `adapt` on function tree after polymorphic\noverload resolution has run. This is analagous to `doTypedApply`:\n\n```scala\ninferMethodAlternative(fun, undetparams, argTpes, pt)\ndoTypedApply(tree, adapt(fun, mode.forFunMode, WildcardType), args1, mode, pt)\n```\n\nThis REPL transcript might further illustrate the problem.\n\n```\nscala> class Bippy { trait Foo[A] }\ndefined class Bippy\n\nscala> final class RichBippy[C <: Bippy with Singleton](val c1: C) {\n     |   def g[A](x: A)(ev: c1.Foo[A]): Int = 2\n     | }\ndefined class RichBippy\n\nscala> :power\n** Power User mode enabled - BEEP WHIR GYVE **\n** :phase has been set to \'typer\'.          **\n** scala.tools.nsc._ has been imported      **\n** global._, definitions._ also imported    **\n** Try  :help, :vals, power.<tab>           **\n\nscala> val g = typeOf[RichBippy[_]].member(TermName("g"))\ng: $r.intp.global.Symbol = method g\n\nscala> val c = new Bippy\nc: Bippy = Bippy@92e2c93\n\nscala> val memberType = typeOf[RichBippy[c.type]].memberType(g)\nmemberType: $r.intp.global.Type = ([A](x: A)(ev: _7.c1.Foo[A])Int) forSome { val _7: RichBippy[c.type] }\n\nscala> val tree = Ident(TermName("dummy")).setType(memberType)\ntree: $r.intp.global.Ident = dummy\n\nscala> def adaptExprWildcard(t: Tree) = {\n     |   type HasAdapt = { def adapt(t: Tree, mode: Int, pt: Type, original: Tree) }\n     |   typer.asInstanceOf[HasAdapt].adapt(t, Mode.EXPRmode.bits, WildcardType, EmptyTree)\n     | }\nwarning: there was one feature warning; re-run with -feature for details\nadaptExprWildcard: (t: $r.intp.global.Tree)Unit\n\nscala> adaptExprWildcard(tree)\n\nscala> tree.tpe\nres1: $r.intp.global.Type = [A](x: A)(ev: _7.c1.Foo[A])Int\n\nscala> memberType.skolemizeExistential\nres2: $r.intp.global.Type = [A](x: A)(ev: _7.c1.Foo[A])Int\n```\n\nReview by @lrytz / @adriaanm'
3994,'','Make compiler.properties fall back to prefixed\nPreviously, if we wanted to override the shell.prompt property, we had\r\nto modify compiler.properties in the jar. This change lets us do the\r\nfollowing, instead:\r\n\r\n    scala -Dscala.shell.prompt="$(echo -e "\\npuffnfresh> ")"\r\n\r\nAll properties previously loaded from compiler.properties now fall back\r\nto "scala." in the system properties when not found.'
3993,'','Color REPL under -Dscala.color\nWe already use -Dscala.color when using -Ytyper-debug\r\n\r\nThis tries to reuse the colors chosen from the debug flag:\r\n\r\n* Bold blue for vals (e.g. "res0")\r\n* Bold green for types (e.g. "Int")\r\n* Magenta for the shell prompt (e.g. "scala>")'
3991,'','Scala parser cuts last bracket\nIn scenario [mirror.mkToolBox(options = "-Yrangepos")](http://stackoverflow.com/q/25547149/651140):\r\n```scala\r\nlibraryDependencies ++= Seq("org.scala-lang" % "scala-compiler" % "2.10.4") map {\r\n    (dependency) =>{\r\n        dependency\r\n    }\r\n}\r\n```\r\nScala parser create tree with wrong RangePosition. In method: `scala.reflect.internal.Positions` `def atPos[T <: Tree](pos: Position)(tree: T): T` if the tree.pos is assigned - `pos` with correct `end` is ignored. So for the same tree method now check - if flag Yrangepos is set - and then replace `end` position of statement.\r\nI compiled some projects with this version of scala - and code works,  but I think - acceptance tests are needed.\r\n\r\nFor scala 2.11 the trait Positions was rewritten. For scala 2.10 I do not have fix. It is needed for https://github.com/sbt/sbt/issues/1606'
3990,'','Particular formatting improvement in the spec\nFixes the titularity of the "Overloading resolution" header\r\nunder 6.26.1 "Value conversions" to match "Type instantiation."\r\n\r\nHopefully this makes the link to the actual 6.26.3 overloading\r\nresolution section work without further renaming.\r\n\r\nPossibly that is the oftenest-cited section of the entire document.\r\n\r\nAt least on Stack Overflow, if not in Proceedings of the ACM.\r\n\r\nReview by @gourlaysama\r\n'
3989,'gkossakowski','SI-8852 Support joint compilation of Java interfaces w. statics\nWe had to change the java parser to accomodate this language\nchange in Java 8.\n\nThe enclosed test does not require JDK8 to run, it only tests\nJavaParsers.\n\nHere is a transcript of my manual testing using Java 8.\n\n```\n% tail test/files/run/8852b/{Interface.java,client.scala}\n==> test/files/run/8852b/Interface.java <==\npublic interface Interface {\n  public static int staticMethod() {\n  \treturn 42;\n  }\n}\n\n==> test/files/run/8852b/client.scala <==\nobject Test extends App {\n  assert(Interface.staticMethod() == 42)\n}\n\n// Under separate compilation, statics in interfaces were already working\n% rm /tmp/*.class 2> /dev/null; javac -d /tmp test/files/run/8852b/Interface.java && scalac-hash v2.11.2 -classpath /tmp -d /tmp test/files/run/8852b/client.scala && scala-hash v2.11.2 -classpath /tmp -nc Test\n\n// Under joint compilation, statics in interfaces now work.\n% rm /tmp/*.class 2> /dev/null; qscalac -d /tmp test/files/run/8852b/{client.scala,Interface.java} && javac -d /tmp test/files/run/8852b/Interface.java && qscala -classpath /tmp -nc Test\n```\n\nReview by @gkossakowski'
3988,'','SI-8459 fix incorrect positions for incomplete selection trees\nThe mentioned issue is a presentation compiler issue, but its root cause is a bug in the parser which incorrectly assigned positions to incomplete selection trees (i.e. selections that lack an indentifier after dot and have some whitespace instead).\r\n\r\nIn detail: for such incomplete selection trees, the "point" of the position should be immediately after the dot but instead was at the start of next token after the dot. For range positions, this caused a pathological situation where the "point" was greater than the "end" of the position. This position is later used by the typechecker during resolution of dynamic calls and causes it to crash. Of course, because a syntactically incorrect code is required for the bug to manifest, it only happens in the presentation compiler.'
3987,'','Merge 2.11.x to 2.12.x\nOne conflict in build.xml around the addition of the property\n`test.bc.skip`. Straight forward to resolve.\n\n```\n% export MB=$(git merge-base origin/2.12.x origin/2.11.x)\n\n% git --no-pager log --oneline --graph --decorate $MB..origin/2.11.x\n*   223e207 (origin/2.11.x, 2.11.x) Merge pull request #3848 from Ichoran/issue/8680\n|\\\n| * 039f3e3 (origin/pr/3848) SI-8680  Stream.addString is too eager\n*   75f1235 Merge pull request #3941 from Ichoran/issue/8815\n|\\\n| * 1da69e8 (origin/pr/3941) SI-8815  mutable.LongMap makes different choices for splitAt vs etc.\n*   eb5d0a6 Merge pull request #3936 from som-snytt/issue/8806\n|\\\n| * c9ec916 (origin/pr/3936) SI-8806 Add lower bound check to Any lint\n*   3307e44 Merge pull request #3972 from lrytz/BCodeDelambdafyFix\n|\\\n| * 63207e1 (origin/pr/3972) isAnonymousClass/Function for delambdafy classes is not true\n* 0e2be38 Merge pull request #3971 from lrytz/opt/dce\n* 9132efa (origin/pr/3971) Address review feedback.\n* 59070cc Remove stale local variables and exception handlers after DCE\n* 01f5435 SI-8568 unreachable test now passes in GenBCode\n* 630bd29 Clarify why we emit ATHROW after expressions of type Nothing\n* 35c53af Tools to run the compiler in JUnit tests\n* 44b5c26 JUnit tests for dead code elimination.\n* d3cfbb1 -Yopt mulit-choice flag\n* 90781e8 Eliminate unreachable code in GenBCode\n* a3dfb43 Removed empty class, unused imports\n\n% git merge origin/2.11.x\nRemoving test/files/jvm/unreachable.flags\nAuto-merging src/library/scala/collection/mutable/LongMap.scala\nAuto-merging build.xml\nCONFLICT (content): Merge conflict in build.xml\nAutomatic merge failed; fix conflicts and then commit the result.\n```'
3986,'gkossakowski',' SI-6502 Repl reset/replay take settings args\nThe reset and replay commands take arbitrary command line args.\r\nWhen settings args are supplied, the compiler is recreated.\r\n\r\nFor uniformity, the settings command performs only the usual\r\narg parsing: use `-flag:true` or `-flag` instead of `+flag`, and clearing a\r\nsetting is promoted to the command line, so that -Xlint: is not\r\nan error but clears the flags.\r\n\r\n```\r\nscala> maqicode.Test main null\r\n<console>:8: error: not found: value maqicode\r\n              maqicode.Test main null\r\n              ^\r\n\r\nscala> :reset -classpath/a target/scala-2.11/sample_2.11-1.0.jar\r\nResetting interpreter state.\r\nForgetting all expression results and named terms: $intp\r\n\r\nscala> maqicode.Test main null\r\nHello, world.\r\n\r\nscala> val i = 42\r\ni: Int = 42\r\n\r\nscala> s"$i is the loneliest numbah."\r\nres1: String = 42 is the loneliest numbah.\r\n\r\nscala> :replay -classpath ""\r\nReplaying: maqicode.Test main null\r\nHello, world.\r\n\r\nReplaying: val i = 42\r\ni: Int = 42\r\n\r\nReplaying: s"$i is the loneliest numbah."\r\nres1: String = 42 is the loneliest numbah.\r\n\r\nscala> :replay -classpath/a ""\r\nReplaying: maqicode.Test main null\r\n<console>:8: error: not found: value maqicode\r\n              maqicode.Test main null\r\n              ^\r\n\r\nReplaying: val i = 42\r\ni: Int = 42\r\n\r\nReplaying: s"$i is the loneliest numbah."\r\nres1: String = 42 is the loneliest numbah.\r\n```\r\n\r\nClearing a clearable setting:\r\n```\r\nscala> :reset -Xlint:missing-interpolator\r\nResetting interpreter state.\r\n\r\nscala> { val i = 42 ; "$i is the loneliest numbah." }\r\n<console>:8: warning: possible missing interpolator: detected interpolated identifier `$i`\r\n              { val i = 42 ; "$i is the loneliest numbah." }\r\n                             ^\r\nres0: String = $i is the loneliest numbah.\r\n\r\nscala> :reset -Xlint:\r\nResetting interpreter state.\r\nForgetting this session history:\r\n\r\n{ val i = 42 ; "$i is the loneliest numbah." }\r\n\r\nscala> { val i = 42 ; "$i is the loneliest numbah." }\r\nres0: String = $i is the loneliest numbah.\r\n\r\nscala> :replay -Xlint:missing-interpolator\r\nReplaying: { val i = 42 ; "$i is the loneliest numbah." }\r\n<console>:8: warning: possible missing interpolator: detected interpolated identifier `$i`\r\n              { val i = 42 ; "$i is the loneliest numbah." }\r\n                             ^\r\nres0: String = $i is the loneliest numbah.\r\n```\r\nReview by @gkossakowski '
3985,'',"Merge 2.11.x to 2.12.x\nSkips the tweak to productIterator's type (#3938), as the special case was\r\nsubsequently removed in 2.12.x (e01b461).\r\n\r\nOtherwise everything was mechanically merged.\r\n\r\n```\r\n% export MB=$(git merge-base origin/2.12.x origin/2.11.x)\r\n\r\n% git --no-pager log --oneline --graph --decorate $MB..origin/2.11.x\r\n*   1b98061 (origin/2.11.x) Merge pull request #3983 from retronym/merge/2.10.x-2.11.x-20140915\r\n|\\\r\n| *   25e9326 (retronym/merge/2.10.x-2.11.x-20140915, origin/pr/3983, merge/2.10.x-2.11.x-20140915) Merge commit '9ecfac8' into merge/2.10.x-2.11.x-20140915\r\n| |\\\r\n|/ /\r\n| * 9ecfac8 (origin/2.10.x) Merge pull request #3859 from xeno-by/topic/fundep-materialization-210x\r\n| * 5966a11 (origin/pr/3859) -Xfundep-materialization => -Yfundep-materialization\r\n| * 364c8e9 (xenoby/topic/fundep-materialization-210x) pull request feedback\r\n| * 0c5dd9e [backport] SI-7470 implements fundep materialization\r\n*   7b59154 (2.11.x) Merge pull request #3977 from terma/issue/8817\r\n|\\\r\n| * b416dc6 (origin/pr/3977) SI-8817 Correct scaladoc for scala.sys.addShutdownHook\r\n* |   5046f7b Merge pull request #3846 from xeno-by/topic/move-quasiquotes\r\n|\\ \\\r\n| * | 9ba986e (origin/pr/3846) moves the impl of quasiquotes to scala.reflect\r\n|/ /\r\n* |   7c8eaef Merge pull request #3968 from Feodorov/ticket/8398\r\n|\\ \\\r\n| * | 24ccfa0 (origin/pr/3968) SI-8398 - unused warning reports lazy val as a method\r\n|/ /\r\n* |   2ac6dc0 Merge pull request #3938 from gourlaysama/wip/t8764\r\n|\\ \\\r\n| * | e01b461 (origin/pr/3938) [nomaster] SI-8764 fix return type of case class productElement under Xexperimental\r\n|  /\r\n* |   abd595d Merge pull request #3967 from retronym/topic/mathjax\r\n|\\ \\\r\n| * | 8e531d3 (retronym/topic/mathjax, origin/pr/3967) Fix broken URL for MathJAX Javascript dependency.\r\n| |/\r\n* |   8082d38 Merge pull request #3946 from gourlaysama/wip/t5254\r\n|\\ \\\r\n| * | 9519eb0 (origin/pr/3946) SI-5254 running an empty scala script should succeed\r\n|  /\r\n* |   0729b29 Merge pull request #3801 from Ichoran/issue/8474\r\n|\\ \\\r\n| * | 3d64dee (origin/pr/3801) SI-8474  Inconsistent behavior of patch method\r\n|  /\r\n* |   068237a Merge pull request #3939 from lrytz/ystats\r\n|\\ \\\r\n| |/\r\n|/|\r\n| * 1ea6843 (origin/pr/3939) Make MultiChoiceSetting.compute easier to understand\r\n| * 861ad72 Address PR feedback, fix MultiChoiceSetting.contains\r\n| * 7655a70 Use Enumeration for MultiChoiceSetting\r\n| * b562d96 -Ystatistics accepts a list of phases, cleanups in MultiChoiceSetting\r\n| * 0a6dd09 Fix assertThrows, and the behaviors that it shadowed\r\n*   87ca181 Merge pull request #3935 from lrytz/t8803\r\n|\\\r\n| * f324ca5 (origin/pr/3935, pr/3935) SI-8803 generate super accessor for super[A], if A is outer superclass\r\n*   9753f23 Merge pull request #3961 from lrytz/t8786-disable-test\r\n|\\\r\n| * e9a6fbb (origin/pr/3961) SI-8786 disable part of test that's failing the jdk8 build\r\n* |   a66f5df Merge pull request #3932 from gourlaysama/wip/t8498\r\n|\\ \\\r\n| * | 984025b (origin/pr/3932) SI-8498 @compileTimeOnly should be aware of bridge methods.\r\n|  /\r\n* |   266c210 Merge pull request #3951 from pawel-wiejacha/2.11.x_SI-8810_fix\r\n|\\ \\\r\n| * | 2b5ac5a (origin/pr/3951) SI-8810 scaladoc: fixed code block indentation normalization\r\n|  /\r\n* |   174193c Merge pull request #3960 from gourlaysama/wip/t8113\r\n|\\ \\\r\n| |/\r\n|/|\r\n| * d153cee (origin/pr/3960) SI-8113 allow a newline between a link target and title\r\n|/\r\n*   2f78ddd Merge pull request #3955 from som-snytt/issue/8410\r\n|\\\r\n| * 6076d61 (origin/pr/3955) SI-8410 Summarize if warnings and not disabled\r\n| * 7f21475 SI-8410 Don't warn fatally on disabled flag\r\n* 816c399 Merge pull request #3958 from lrytz/merge/2.10-to-2.11-sept-2\r\n\r\n% git merge abd595d\r\nAuto-merging test/scaladoc/scalacheck/HtmlFactoryTest.scala\r\nMerge made by the 'recursive' strategy.\r\n spec/_layouts/default.yml                                      |   2 +-\r\n src/compiler/scala/tools/nsc/CompilerCommand.scala             |   2 +-\r\n src/compiler/scala/tools/nsc/Global.scala                      |   2 +-\r\n src/compiler/scala/tools/nsc/MainBench.scala                   |   2 +-\r\n src/compiler/scala/tools/nsc/Reporting.scala                   |   4 +-\r\n src/compiler/scala/tools/nsc/ScriptRunner.scala                |  34 +++++++----\r\n src/compiler/scala/tools/nsc/backend/opt/Inliners.scala        |   2 +-\r\n src/compiler/scala/tools/nsc/settings/AbsScalaSettings.scala   |  24 ++++----\r\n src/compiler/scala/tools/nsc/settings/MutableSettings.scala    | 221 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--------------\r\n src/compiler/scala/tools/nsc/settings/ScalaSettings.scala      |  44 +++++++++------\r\n src/compiler/scala/tools/nsc/settings/Warnings.scala           | 195 ++++++++++++++++++++++++---------------------------------------\r\n src/compiler/scala/tools/nsc/typechecker/Infer.scala           |   2 +-\r\n src/compiler/scala/tools/nsc/typechecker/RefChecks.scala       |   3 +-\r\n src/compiler/scala/tools/nsc/typechecker/SuperAccessors.scala  |  20 +++++--\r\n src/compiler/scala/tools/nsc/util/StatisticsInfo.scala         |   4 +-\r\n src/library/scala/collection/Iterator.scala                    |  40 +++++++++----\r\n src/library/scala/collection/SeqViewLike.scala                 |  23 ++++++--\r\n src/reflect/scala/reflect/internal/StdNames.scala              |   2 +-\r\n src/scaladoc/scala/tools/nsc/doc/base/CommentFactoryBase.scala |  58 +++++--------------\r\n test/files/jvm/varargs/VaClass.scala                           |   4 +-\r\n test/files/neg/compile-time-only-a.check                       |   5 +-\r\n test/files/pos/t8410.flags                                     |   1 +\r\n test/files/pos/t8410.scala                                     |  15 +++++\r\n test/files/pos/t8498.scala                                     |   6 ++\r\n test/files/run/t8803.check                                     |  16 ++++++\r\n test/files/run/t8803.scala                                     |  57 +++++++++++++++++++\r\n test/junit/scala/tools/nsc/ScriptRunnerTest.scala              |  23 ++++++++\r\n test/junit/scala/tools/nsc/settings/SettingsTest.scala         | 109 +++++++++++++++++++++++++++++++++++-\r\n test/junit/scala/tools/nsc/symtab/CannotHaveAttrsTest.scala    |   4 +-\r\n test/junit/scala/tools/nsc/symtab/FreshNameExtractorTest.scala |   4 +-\r\n test/junit/scala/tools/nsc/symtab/StdNamesTest.scala           |   8 ++-\r\n test/junit/scala/tools/testing/AssertUtil.scala                |   2 +\r\n test/scaladoc/resources/code-indent.scala                      |   6 ++\r\n test/scaladoc/run/t8113.check                                  |   1 +\r\n test/scaladoc/run/t8113.scala                                  |  36 ++++++++++++\r\n test/scaladoc/scalacheck/HtmlFactoryTest.scala                 |   7 ++-\r\n 36 files changed, 691 insertions(+), 297 deletions(-)\r\n create mode 100644 test/files/pos/t8410.flags\r\n create mode 100644 test/files/pos/t8410.scala\r\n create mode 100644 test/files/pos/t8498.scala\r\n create mode 100644 test/files/run/t8803.check\r\n create mode 100644 test/files/run/t8803.scala\r\n create mode 100644 test/junit/scala/tools/nsc/ScriptRunnerTest.scala\r\n create mode 100644 test/scaladoc/run/t8113.check\r\n create mode 100644 test/scaladoc/run/t8113.scala\r\n\r\n% git merge -sours 2ac6dc0\r\nMerge made by the 'ours' strategy.\r\n\r\n% git merge 1b98061\r\nAuto-merging src/compiler/scala/reflect/quasiquotes/Reifiers.scala\r\nAuto-merging src/compiler/scala/reflect/quasiquotes/Quasiquotes.scala\r\nAuto-merging src/compiler/scala/reflect/quasiquotes/Placeholders.scala\r\nAuto-merging src/compiler/scala/reflect/quasiquotes/Parsers.scala\r\nAuto-merging src/compiler/scala/reflect/quasiquotes/Holes.scala\r\nMerge made by the 'recursive' strategy.\r\n src/compiler/scala/{tools => }/reflect/quasiquotes/Holes.scala        |  2 +-\r\n src/compiler/scala/{tools => }/reflect/quasiquotes/Parsers.scala      |  2 +-\r\n src/compiler/scala/{tools => }/reflect/quasiquotes/Placeholders.scala |  2 +-\r\n src/compiler/scala/{tools => }/reflect/quasiquotes/Quasiquotes.scala  |  2 +-\r\n src/compiler/scala/{tools => }/reflect/quasiquotes/Reifiers.scala     |  2 +-\r\n src/compiler/scala/tools/nsc/typechecker/TypeDiagnostics.scala        |  2 +-\r\n src/compiler/scala/tools/reflect/FastTrack.scala                      |  2 +-\r\n src/library/scala/sys/package.scala                                   |  9 ++++-----\r\n test/files/neg/warn-unused-privates.check                             | 39 +++++++++++++++++++++------------------\r\n test/files/neg/warn-unused-privates.scala                             |  1 +\r\n 10 files changed, 33 insertions(+), 30 deletions(-)\r\n rename src/compiler/scala/{tools => }/reflect/quasiquotes/Holes.scala (99%)\r\n rename src/compiler/scala/{tools => }/reflect/quasiquotes/Parsers.scala (99%)\r\n rename src/compiler/scala/{tools => }/reflect/quasiquotes/Placeholders.scala (99%)\r\n rename src/compiler/scala/{tools => }/reflect/quasiquotes/Quasiquotes.scala (98%)\r\n rename src/compiler/scala/{tools => }/reflect/quasiquotes/Reifiers.scala (99%)\r\n ```"
3984,'retronym','General formatting improvements in the spec\nThe spec always needs some love, so here I go:\r\n\r\n**This is only about formatting, it does not change content or even wording.**\r\n\r\n * syntax highlighting for scala code, using highlight.js: \r\n    * this is done in a way that *interacts nicely with MathJax*: one can use latex inside code blocks without problem (and still get syntax highlighting),\r\n    * uses the latest highlight.js 8.2, with the Scala support freshly revamped by @non,\r\n * individual HTML pages now have titles,\r\n * no more broken links,\r\n * fix or work around some latex problems with MathJax,\r\n * mass-removal of trailing whitespace, while I was at it...\r\n\r\nI uploaded a preview of the result [here](http://static.antoine.gourlay.fr/temp/spec/) to make reviewing easier.'
3983,'',"Merge 2.10.x to 2.11.x\nJust a solitary backport that we could merge with -sours.\n\n```\n% export MB=$(git merge-base origin/2.11.x origin/2.10.x)\n\n% git log --graph --oneline --decorate $MB..origin/2.10.x\n* 9ecfac8 (origin/2.10.x) Merge pull request #3859 from xeno-by/topic/fundep-materialization-210x\n* 5966a11 (origin/pr/3859) -Xfundep-materialization => -Yfundep-materialization\n* 364c8e9 (xenoby/topic/fundep-materialization-210x) pull request feedback\n* 0c5dd9e [backport] SI-7470 implements fundep materialization\n\n% git merge -sours 9ecfac8\nMerge made by the 'ours' strategy.\n```\n\nReview by @lrytz"
3982,'',"SI-8845 Control flow pot-pourri crashes GenASM, but not -BCode\nGiven that we'll switch to GenBCode in 2.12, the test case\nshowing the bug is fixed under that option is all I plan to\noffer for this bug."
3981,'lrytz','SI-8575 Fix subtyping transitivity with aliases, compound types\nThanks to @b-studios and @Blaisorblade for investigation into this\nbug.\n\n`RefinedType#normalize` is responsible for flattening nested\ncompound types to a flat representation.\n\nTypes are normalized during `=:=` in search of a successful\nresult.\n\nThis means that `((A with B) with C) =:= (A with B with C)`.\n\nHowever, if we introduce a type alias for `A with B` on the LHS,\nthe attempt at flattening is thwarted.\n\nThis commit dealiases parents of refined types during normalization.\n\nTwo tests are included. The first demonstrates a symptom of this\nproblem: failure to install a bridge method resulted in a linkage\nerror.\n\nThe second test uses the reflection API to directly show transitivity\nof subtyping now holds.\n\nTargetting at 2.12, as bug fixes in subtyping usually can be shown\nto lead to binary incompatibilities between code using the old and\nnew compilers.'
3980,'lrytz','SI-8844 Fix regression with existentials + type aliases\nRegressed in 2a1b15e / SI-8283. Another specimen of an archetypal\nbug: unwanted dealising by using `typeSymbol`, rather than\n`typeSymbolDirect`.\n\nReview by @lrytz'
3979,'','SI-8575 Prevent AbstractMethodError caused by type alias\nFor some reason, erasure will not create the bridge method for consume in the situation below.\r\n\r\n~~~scala\r\n  type F = A with B\r\n  type X = E[F with C]\r\n  def consume(x: X): Unit\r\n~~~\r\n\r\nWhen the method consume is defined in a subclass but called in the super class (using the generated bridge) an AbstractMethodError is triggered.\r\n\r\nThis appears to be only the case if `X` is aliased to an applied type constructor with the argument being a compound type as above.\r\n\r\nSince manually deliasing `F` to `A with B` does work, the solution appears to be to dealias components of compound types. However, dealiasing must not be performed on `AnyRef`, which would result in Object and thus break tests.\r\n\r\nThis might change the binary interface of the generated code to a theoretically equivalent one. But who knows whether this is equivalent enough.\r\n\r\nReview by @adriaanm and @dragos '
3978,'','SI-8217 allow abstract type members in objects\nPreviously, abstract type members were allowed in objects only when inherited,\r\nbut not when declared directly. This inconsistency was not intended. In dotty,\r\nabstract type members are allowed in values and represent existentials; so upon\r\ndiscussion, it was decided to fix things to conform to dotty and allow such type\r\nmembers. Adriaan also asked to keep rejecting abstract type members in methods\r\neven though they would conceivably make sense.\r\n\r\nDiscussions happened on #3407, scala/scala-dist#127.\r\nThis code is improved from #3442, keeps closer to the current logic, and passes tests.\r\nI did not yet add extra test cases though, will do so in separate commits.\r\n\r\n(Not naming a reviewer yet on purpose).'
3977,'','SI-8817 Correct scaladoc for scala.sys.addShutdownHook\n - Remove mention that shutdown hook is daemon thread\r\n - Add link on scala.sys.ShutdownHookThread class\r\n\r\nPlease review by @VladUreche'
3976,'','SI-8817 Remove mention that shutdown hook is daemon thread\nPlease review by @VladUreche '
3975,'','SI-8817 Remove mention that shutdown hook is daemon thread\nPlease review by @heathermiller '
3974,'',"This ensures that typechecking custom unapplications in silent mode\ndoesn't leak uncatchable errors. Interestingly enough, the problem\r\nonly manifested itself for custom unapply methods, not for synthetic\r\nones generated for case classes."
3973,'','Improve scala.io.Source documentation\n- fixes several typos\r\n- clarifies non-obvious parameters\r\n- adds code formatting and external class references\r\n\r\nFor methods with obvious parameters, I omitted ``@param`` documentation.  In all cases, I omitted the ``@return`` doc.\r\n\r\nThere are no code changes in this commit.'
3972,'',"isAnonymousClass/Function for delambdafy classes is not true\nYdelambdafy:method lambda classes are not anonymous classes, and not\r\nanonymous function classes either. They are somethig new, so there's\r\na new predicate isDelambdafyFunction.\r\n\r\nThey are not anonymous classes (or functions) because anonymous\r\nclasses in Java speak are nested. Delambdafy classes are always\r\ntop-level, they are just synthetic.\r\n\r\nBefore this patch, isAnonymous was sometimes accidentailly true: if\r\nthe lambda is nested in an anonymous class. Now it's always false.\r\n\r\nThis should fix the [BCode-Delambdafy community build](https://jenkins-dbuild.typesafe.com:8499/job/Community-2.11.x-BCode-Delambdafy/125/console). An assertion in BCode failed because it was trying to emit an EnclosingMethod attribute for a delambdafy class - this should only happen for inner classes."
3971,'','GenBCode: eliminate unreachable code\nRe-submission of #3957\r\n\r\n[`-Ybackend:GenBCode` test](https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/1338/console) passed.\r\n\r\nHere\'s some of the changes, but just refer to individual commit messages.\r\n\r\nThe actual DCE is implemented by the ASM framework. As noted in the commit message, it is slow. I think OK enough if we run it once (which is currently the case. Note that it\'s enabled even in non-optimized mode). But it will probably be too slow if we apply it multiple times (to clean up after other optimizations). I think we should merge it as-is for now, we can later implement a faster DCE.\r\n\r\nI added a new compiler flag `-Yopt` for enabling / disabling optimizations in GenBCode. I think it makes sense for now, we can always decide later how to interpret old flags when the new backend is enabled.\r\n\r\nYou can now write JUnit tests like:\r\n```\r\nassertSameCode(\r\n  singleMethodInstructions(compiler)("def f: Int = { return 1; 2 }").dropNonOp,\r\n  List(Op(ICONST_1), Op(IRETURN))\r\n```\r\n'
3970,'',"SI-8764 remove Xexperimental special Product members for case classes\nSee #3938 for the original PR targeted to 2.11.x.\r\n\r\n----\r\n`productElement` and `productIterator` return types under Xexperimental\r\nuse the weak lub of the case class's parameters instead of just `Any`.\r\nThis isn't really useful, nor tested and it is broken (SI-8764) anyway.\r\n\r\nThe special casing of `productElement` and `productIterator` was\r\nintroduced with `ProductN` support in case classes (e412524), but was\r\nnot removed when `ProductN` support went away (70996f8, d7f498a,\r\nb7395e9, 317a105)."
3969,'gkossakowski',"Interactive / ScalaDoc housekeeping\nThis is a re-issue of https://github.com/scala/scala/pull/3903 (closed during my leave)\r\n\r\nThose are the leftovers of what should have been a larger bugfix PR, but that's finally not meant to be.\r\nNo issue, since the changes are straightforward & compiler warnings-driven, but I'd be happy to create one.\r\nShould probably be merged into 2.12.\r\n\r\n[reviewed & LGTM'ed](https://github.com/scala/scala/pull/3903#issuecomment-50616549) by @dragos \r\nAdaptation PR for refactoring is [open](https://github.com/scala-ide/scala-refactoring/pull/60)\r\n\r\nEdit : non-trivial changes in the last commit post-review (but going in the direction of simplicity)"
3968,'',"SI-8398 - Compiler specifies lazy variables as methods\nHi,\r\nThis is a fix for compiler warning on unused lazy val. I didn't discuss it in a mailing list, because it seems to be a trivial to fix."
3967,'',"Fix broken URL for MathJAX Javascript dependency.\nLoaded using an DNS alias for the CDN, as per the\n[instructions](http://docs.mathjax.org/en/latest/configuration.html)\n\nI also switched from `latest` to `2.3-latest`, so that we don't\nautomatically perform major upgrades.\n\nReview by @lrytz"
3966,'',"Interactive / ScalaDoc housekeeping\nThis is a re-issue of https://github.com/scala/scala/pull/3903 (closed during my leave)\r\n\r\nThose are the leftovers of what should have been a larger bugfix PR, but that's finally not meant to be.\r\nNo issue, since the changes are straightforward & compiler warnings-driven, but I'd be happy to create one.\r\nShould probably be merged into 2.12.\r\n\r\n[reviewed & LGTM'ed](https://github.com/scala/scala/pull/3903#issuecomment-50616549) by @dragos \r\nAdaptation PR for refactoring is [open](https://github.com/scala-ide/scala-refactoring/pull/60)"
3965,'lrytz','Prefer scala.Serializable to j.io.Serializable\nThe former extends the latter, and exists as a platorm agnostic\nserialization marker trait. It is of less value now that we\nhave jettisoned the MSIL backend, but while it still exists\nwe ought ought to use it.\n\nI achieved this by replacing wildcard import of `java.io._`\nwith selective imports, leaving `Serializable` to bind to\n`scala.Serializable`.'
3964,'lrytz',"SI-8788 Add generic signature to Parcelable static field special case.\nAndroid's AIDL generates Java code that assumes the presence of generic\r\nannotations for Parcelable classes, which previously were not being\r\ngenerated. This patch adds a generic signature to the generated CREATOR\r\nfield, resolving the issue.\r\n\r\nSame as https://github.com/scala/scala/pull/3922 except into 2.11.x instead of 2.12.x."
3963,'','SI-8835 Fix implementation of Iterator drop to remove quadratic behavior\nThe Iterator drop method (defined in Iterator.scala) generates nested anonymous classes. When drop is used in a loop, this causes linear traversal to become quadratic, and will also eventually cause a stack overflow if invoked sufficiently many times.\r\n\r\nI wrote up a description and analysis of the problem here:\r\nhttp://erikerlandson.github.io/blog/2014/09/03/matryoshka-class-construction-from-the-scala-iterator-drop-method/\r\n'
3962,'','WIP New classpath and sourcepath implementation\nThis is WIP branch pushed to consult it with Grzegorz Kossakowski.\r\n \r\nCurrent implementation of classpath is not very efficient and it\'s quite abstract because it was created when e.g. .NET was supported. Therefore one of goals of new implementation is to improve efficiency by creation of dedicated classes for various file types characteristic for Scala with JVM backend - what allows us to create more efficient, more low-level operations. The second goal is to reduce memory consumption. To do that there\'s added caching for jar/zip files. So that we can reuse existing instances, when we create entries for the same files once again. Hopefully it will lead to significant reduction of used memory also in the case of e.g. ScalaPresentationCompilers.\r\n \r\nOne of the most important things took into account during creating this implementation was adding it as optional feature, which can be marked as experimental and turned on  using flag. At the beginning users will use old classpath implementation by default and they will be able to use new implementation when:\r\n- they will want to test it (feedback)\r\n- they will want to gain benefits which it provides\r\n \r\nThere are a lot of TODOs, some unused classes, temporary (?) benchmarks and maybe not very pretty solutions and names, but it\'s something, what will be discussed with Grzegorz. Definitely we need more unit tests. Right now existing tests (including partest) and also other, manually executed tests pass.\r\n \r\nTHIS PROGRAM IS SUBJECT TO THE TERMS OF THE BSD 3-CLAUSE LICENSE.\r\nIN ADDITION, THE FOLLOWING DISCLAIMER APPLIES IN CONNECTION WITH THIS PROGRAM:\r\nTHIS SOFTWARE IS LICENSED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY OF NON-INFRINGEMENT, ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\nOR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. THIS SOFTWARE MAY BE REDISTRIBUTED TO OTHERS ONLY BY EFFECTIVELY USING THIS OR\r\nANOTHER EQUIVALENT DISCLAIMER IN ADDITION TO ANY OTHER REQUIRED LICENSE TERMS.\r\n \r\n \r\nTHE FOLLOWING DISCLAIMER APPLIES TO ALL SOFTWARE CODE AND OTHER MATERIALS CONTRIBUTED IN CONNECTION WITH THIS SOFTWARE:\r\nTHIS SOFTWARE IS LICENSED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY OF NON-INFRINGEMENT, ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\nOR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  THIS SOFTWARE MAY BE REDISTRIBUTED TO OTHERS ONLY BY EFFECTIVELY USING THIS OR\r\nANOTHER EQUIVALENT DISCLAIMER IN ADDITION TO ANY OTHER REQUIRED LICENSE TERMS.\r\nONLY THE SOFTWARE CODE AND OTHER MATERIALS CONTRIBUTED IN CONNECTION WITH THIS SOFTWARE, IF ANY, THAT ARE ATTACHED TO (OR OTHERWISE ACCOMPANY) THIS SUBMISSION (AND ORDINARY\r\nCOURSE CONTRIBUTIONS OF FUTURES PATCHES THERETO) ARE TO BE CONSIDERED A CONTRIBUTION.  NO OTHER SOFTWARE CODE OR MATERIALS ARE A CONTRIBUTION.'
3961,'',"SI-8786 disable part of thest that's failing the jdk8 build\nAs noted in SI-8786, this test currently fails the [jdk 8 build](https://scala-webapps.epfl.ch/jenkins/view/2.11.x/job/scala-nightly-auxjvm-2.11.x/jdk=jdk8,label=auxjvm/122/console).\r\n"
3960,'','SI-8113 scaladoc: allow a newline between a link target and title\nParsing `[[http://foo.bar link title]]` stops at the first whitespace.\r\nThis breaks pretty badly in:\r\n```\r\n[[http://foo.bar\r\nlink title]]\r\n```\r\nIt stops after "link", interprets what it parsed as a link to a member,\r\nobviously fails, and then just ouputs "title".\r\nIt should at least return a proper error, or, even better, just allow a\r\nnewline between the target and title. I went for the latter.'
3959,'','Merge 2.11 to 2.12\nInstead of merging in 2.11, i already used https://github.com/scala/scala/pull/3958 (which is an open PR that merges 2.10 into 2.11).\r\n\r\nConflicts:\r\n  * `versions.properties` (usually we merge changes to `versions.properties` with `-s ours`, but here it was part of a larger commit https://github.com/scala/scala/commit/e3107465c3e8ac80d1cc6a759e2f3298c2531424#diff-22)\r\n  * comment in `Regex.scala`\r\n\r\nTwo commits were merged with `-s ours`\r\n  * 5a878c2 updates `versions.properties` after the 2.11.2 release\r\n  * eb74148 contains backports from 2.12 to 2.11\r\n\r\nFull log (long)\r\n\r\n```\r\nlucmac:scala luc$ git lg\r\n*   61dbf4a - (HEAD, upstream/2.12.x, upstream-writable/2.12.x, 2.12.x) Merge pull request #3928 from kzys/dup-html-ids (4 hours ago) <Grzegorz Kossakowski>\r\n\r\nlucmac:scala luc$ git checkout -b merge/2.11-to-2.12-is-it-really-sept-2-already-where-was-summer\r\nSwitched to a new branch \'merge/2.11-to-2.12-is-it-really-sept-2-already-where-was-summer\'\r\n\r\nlucmac:scala luc$ git lg merge/2.10-to-2.11-sept-2 \r\n*   1bbfd6b - (origin/merge/2.10-to-2.11-sept-2, merge/2.10-to-2.11-sept-2) Merge branch \'2.10.x\' into merge/2.10-to-2.11-sept-2 (13 minutes ago) <Lukas Rytz>\r\n\r\nlucmac:scala luc$ export MB=$(git merge-base head merge/2.10-to-2.11-sept-2)\r\n\r\nlucmac:scala luc$ git log --graph --oneline --decorate $MB..merge/2.10-to-2.11-sept-2 \r\n*   1bbfd6b (origin/merge/2.10-to-2.11-sept-2, merge/2.10-to-2.11-sept-2) Merge branch \'2.10.x\' into merge/2.10-to-2.11-sept-2\r\n|\\  \r\n| *   d2a5555 (upstream/2.10.x, upstream-writable/2.10.x, origin/2.10.x, 2.10.x) Merge pull request #3937 from som-snytt/issue/8787-doc-backport\r\n| |\\  \r\n| | * 8876227 (som-snytt/issue/8787-doc-backport) [backport] SI-8787 Backport Regex doc\r\n| |/  \r\n| *   1d3613b Merge pull request #3865 from xeno-by/topic/extractor-macros-210x\r\n| |\\  \r\n| | * 36379cf [backport] transformers no longer ignore UnApply.fun\r\n| *   ac7e102 Merge pull request #3860 from gourlaysama/wip/t7710-backport\r\n| |\\  \r\n| | * fceae70 [backport] SI-7710 fix memory performance of RegexParsers in jdk7u6+\r\n* |   3f69314 Merge commit \'b5759ef\' into merge/2.10-to-2.11-sept-2\r\n|\\ \\  \r\n| |/  \r\n| *   b5759ef Merge pull request #3904 from kzys/jira-8314-2.10.x\r\n| |\\  \r\n| | * b6c00d6 Prevent SI-8314 by adding a test\r\n| |/  \r\n| * d74da16 Merge pull request #3752 from jeroentervoorde/SI_8589\r\n| * 099a426 SI-8589 Performance improvement for ArrayCharSequence.toString\r\n*   c66b886 (upstream/2.11.x, upstream-writable/2.11.x, origin/2.11.x, 2.11.x) Merge pull request #3952 from gourlaysama/wip/t8828-lint-innacessible\r\n|\\  \r\n| * 997ef56 (gourlaysama/wip/t8828-lint-innacessible) SI-8828 fix regression in Xlint visibility warning for sealed classes\r\n* |   fc21e3b Merge pull request #3956 from gourlaysama/wip/interp-warn\r\n|\\ \\  \r\n| * | 20daa00 (gourlaysama/wip/interp-warn) SI-7931 fix Dscala.repl.vids and some string interpolation typos\r\n| |/  \r\n* |   97d0953 Merge pull request #3948 from retronym/ticket/8823\r\n|\\ \\  \r\n| * | f6467d0 SI-8823 Exclude specialized methods from extension method rewrite\r\n* | |   bb3b08d Merge pull request #3931 from lrytz/opt/tracked-final\r\n|\\ \\ \\  \r\n| |_|/  \r\n|/| |   \r\n| * | 2256753 (origin/opt/tracked-final, opt/tracked-final) Small cleanup in toTypeKind.\r\n| * | e310746 Fix InnerClass / EnclosingMethod attributes\r\n| * | 2606bd9 Don\'t traverse all trees in delambdafy phase if delambdafy:inline\r\n| * | 3bcad9a Fix indentation in delambdafy\r\n| * | 2229583 Integrate CoreBTypes by composition (not inheritance), non-var fields\r\n| * | 53437e6 Minor cleanups, integrating review feedback\r\n| * | c3752d7 Add the ACC_DEPRECATED flag in javaFlags, instead of each call site.\r\n| * | f73f026 Remove Tracked, add type information to ClassBType\r\n| * | bdc3ff9 Set currentUnit while generating bytecode.\r\n* | |   7693cec Merge pull request #3949 from lrytz/t8627\r\n|\\ \\ \\  \r\n| * | | 9276a12 (origin/t8627, t8627) SI-8627 make Stream.filterNot non-eager\r\n| |/ /  \r\n* | |   b9048bb Merge pull request #3905 from gourlaysama/wip/t5691-2\r\n|\\ \\ \\  \r\n| * | | 756e551 (gourlaysama/wip/t5691-2) SI-5691 lint warning when a type parameter shadows an existing type.\r\n* | | |   eb74148 Merge pull request #3947 from lrytz/backports\r\n|\\ \\ \\ \\  \r\n| |_|_|/  \r\n|/| | |   \r\n| * | |   e27d024 (origin/backports, backports) Merge remote-tracking branch \'upstream/2.11.x\' into backports\r\n| |\\ \\ \\  \r\n| |/ / /  \r\n|/| | |   \r\n* | | |   47908f1 Merge pull request #3929 from retronym/ticket/8793\r\n|\\ \\ \\ \\  \r\n| * | | | a16a635 SI-8793 Fix patmat regression with extractors, existentials\r\n* | | | |   63a0876 Merge pull request #3886 from adriaanm/report-filter\r\n|\\ \\ \\ \\ \\  \r\n| * | | | | ca9f64d Encapsulate creating SilentResultValue/SilentTypeError.\r\n| * | | | | e21096f Separate statistics from functional code; optimize.\r\n| * | | | | 3a4c6db Towards more privacy for _reporter.\r\n| * | | | | e131424 Work around weird AbstractMethodError\r\n| * | | | | 5d00b59 Cleanup ContextReporter hierarchy\r\n| * | | | | 9707e1d s/reportBuffer/reporter\r\n| * | | | | 258d95c Remove dead code: mode setting\r\n| * | | | | 725c5c9 Encapsulate reporting mode as class of reportBuffer.\r\n| * | | | | f0fdcc0 Clarify that ThrowErrors is the default\r\n| * | | | | ff7c467 repl depends on jline-2.12\r\n| * | | | | cdee835 Configure `checking` mode in `rootContext`.\r\n| * | | | | 064bc5e Remove `def error(pos: Position, err: Throwable)`\r\n| * | | | | 43da1db Introduce `AbsAmbiguousTypeError`.\r\n| * | | | | c6bee64 Untangle reporting of ambiguous errors.\r\n| * | | | | 5e62c59 Reduce Context iface: remove dead code.\r\n| * | | | | 03baff7 Reduce Context iface: make contextMode mutators private.\r\n| * | | | | 1f1c131 Reduce Context iface: inline internally.\r\n| * | | | | dc955c9 Reduce Context iface: encapsulate buffer manipulation.\r\n| * | | | | 474141f Reduce Context iface: inline complex forwarders.\r\n| * | | | | 338cfff Reduce Context iface: inline trivial forwarders.\r\n| * | | | | ecda101 Make more explicit that TypeError is being thrown.\r\n| * | | | | dda3f24 Rely less on intricacies of `contextMode`-based reporting.\r\n| * | | | | b8503f6 Restrict `contextMode` fiddling to `Context`\r\n| * | | | | 543bb3e Encapsulate `TryTwice` as a class, move to `Context`.\r\n| * | | | | ac6dcad Extract the `makeNonSilent` method.\r\n| * | | | | a740746 Clarify divergentError comment\r\n| * | | | | 3fd4f47 Add errorCount to wean partest off Reporter$Severity\r\n| * | | | | 5895e10 Concretize diagnostics: one boolean suffices for now.\r\n| * | | | | 67651e2 Simplify (ambiguous) error issuing.\r\n| * | | | | 2aa1f1e Remove another redundant forwarder\r\n| * | | | | 64ebac2 Move more parsing hooks out of reporting.\r\n| * | | | | 638b4c3 Regularize `comment` hook method\r\n| * | | | | 4b333fb Minor cleanup in AbstractReporter.\r\n| * | | | | 8f25a51 Eclipse project: repl depends on compiler/lib projects\r\n* | | | | |   6ec0d70 Merge pull request #3943 from gourlaysama/wip/fsc\r\n|\\ \\ \\ \\ \\ \\  \r\n| * | | | | | 066d102 (gourlaysama/wip/fsc) SI-5227 make fsc notify its client upon compiler crash\r\n| * | | | | | 6f54b1d SI-1264 fsc compiler output should go to stderr, like scalac\r\n* | | | | | |   3555e0e Merge pull request #3942 from gourlaysama/wip/junit\r\n|\\ \\ \\ \\ \\ \\ \\  \r\n| |/ / / / / /  \r\n|/| | | | | |   \r\n| * | | | | | 42f8a96 (gourlaysama/wip/junit) Add support for running a specific Junit test/method.\r\n|/ / / / / /  \r\n* | | | | |   d4b5c7b Merge pull request #3923 from som-snytt/issue/8787\r\n|\\ \\ \\ \\ \\ \\  \r\n| |_|_|_|_|/  \r\n|/| | | | |   \r\n| * | | | | f98c53c (som-snytt/issue/8787) SI-8787 Addressing feedback, additional periods.\r\n| * | | | | 0e26910 SI-8787 Update doc for Regex\r\n| * | | | | cd2394e SI-8787 If you love nulls, so does Regex\r\n* | | | | |   5e0880f Merge pull request #3909 from som-snytt/issue/8512\r\n|\\ \\ \\ \\ \\ \\  \r\n| |_|_|/ / /  \r\n|/| | | | |   \r\n| * | | | | 606a553 (som-snytt/issue/8512) SI-8512 Infer Any for the q\r\n| * | | | | 2e3583b SI-8512 Infer a type for f"$args"\r\n|/ / / / /  \r\n* | | | |   7a69474 Merge pull request #3927 from lrytz/innerClassesTest\r\n|\\ \\ \\ \\ \\  \r\n| * | | | | 0270972 test for InnerClass and EnclosingMethod attributes\r\n| |/ / / /  \r\n* | | | |   eb7b834 Merge pull request #3907 from gourlaysama/wip/proxy\r\n|\\ \\ \\ \\ \\  \r\n| * | | | | bb2c246 a few missing deprecations in proxy collections.\r\n| | |_|_|/  \r\n| |/| | |   \r\n* | | | |   ed9cca8 Merge pull request #3902 from gourlaysama/wip/t4563\r\n|\\ \\ \\ \\ \\  \r\n| * | | | | ed9dfee SI-4563 friendlier behavior for Ctrl+D in the REPL\r\n| |/ / / /  \r\n* | | | |   bc0fc0f Merge pull request #3889 from som-snytt/issue/6476-alt\r\n|\\ \\ \\ \\ \\  \r\n| |_|/ / /  \r\n|/| | | |   \r\n| * | | | eff9a58 (som-snytt/issue/6476-alt) SI-6476 Unitize ALL the procedures!\r\n| * | | | ccbb84b SI-6476 Unitize procedures, readability\r\n| * | | | b4f5067 SI-6476 Documentation\r\n| * | | | abb58dc SI-6476 Improve error on escapement\r\n| | | | * 7717244 (gourlaysama/backports) [backport] Rewrite explanation of doc-source-url option more clearly, and fix encoding to show euro-sign correctly.\r\n| | | | * 40beefb [backport] Update javadoc tag to new scaladoc tags.\r\n| | | | * 5cb672b [backport] Fixes cut sentences in the generated scaladocs\r\n| | | | * 2b78c32 [backport] Refactored example to Option.collect method.\r\n| | | | * cb2cfc0 [backport] Fixed mathematically wrong statement in the documentation of scala.math.PartialOrdering.\r\n| | | | * b70b074 [backport] Fix scaladoc typo\r\n| | | | * e54b772 [backport] Did not know of the fix for SI-8672. Followed the recommendation given by som-snytt.\r\n| | | | * 9ef3d29 [backport] Fixes first sentence delimiters\r\n| | | | * 3b7a989 [backport] [scaladoc] Changed align of example code to Option.contains and Option.collect methods.\r\n| | | | * 1c96ed5 [backport] SI-8705   Added example to Option.contains method.\r\n| | | | * f18db59 [backport] Added example to Option.collect method.\r\n| | | | * c52bceb [backport] Change StringContext scaladoc\r\n| | | | * 730f311 [backport] som-snytt\'s update to wording\r\n| | | | * 165d21e [backport] Revised comment to appeal to lchoran\'s and som-snytts comments\r\n| | | | * 70d8aaa [backport] Update PartialFunction documentation to include the fact that the caller is responsible for checking \'isDefinedAt\'\r\n| | | | * f7e7f70 [backport] Update PartialFunction documentation to include the fact that the caller is responsible for checking \'isDefinedAt\'\r\n| | | | * 5321b1b [backport] Make comment consistent with code\r\n| | | | * 7bcb316 [backport] Update AnyVals.scala\r\n| |_|_|/  \r\n|/| | |   \r\n* | | |   50167e3 Merge pull request #3914 from som-snytt/issue/orphan-check\r\n|\\ \\ \\ \\  \r\n| * | | | 199ae26 (som-snytt/issue/orphan-check) Orphan check file\r\n| | |/ /  \r\n| |/| |   \r\n* | | |   4ac27f4 Merge pull request #3921 from gourlaysama/goodbye-jline\r\n|\\ \\ \\ \\  \r\n| * | | | 9e13f7e remove jline sources from src/ now that we use a released jline.\r\n| |/ / /  \r\n* | | |   c86fdbf Merge pull request #3916 from retronym/ticket/8781\r\n|\\ \\ \\ \\  \r\n| |/ / /  \r\n|/| | |   \r\n| * | | 1f3319c SI-8781 Avoid double-expansion under -Ymacro-expand:discard\r\n|/ / /  \r\n* | |   84d4ebc Merge pull request #3895 from lrytz/jline-update\r\n|\\ \\ \\  \r\n| * | | ee665e2 Also update jline.version when update.versions is set during build\r\n* | | |   4445615 Merge pull request #3894 from adriaanm/depmsg\r\n|\\ \\ \\ \\  \r\n| * | | | c436048 Better error message than \'bad symbolic reference\'.\r\n| |/ / /  \r\n* | | |   5a878c2 Merge pull request #3897 from lrytz/2.11.2-bump\r\n|\\ \\ \\ \\  \r\n| * | | | ef427b2 Bump versions for Scala 2.11.2\r\n| |/ / /  \r\n* | | |   01f2d27 Merge pull request #3890 from dhgarrette/2.11.x\r\n|\\ \\ \\ \\  \r\n| * | | | 0f5580e Fixed incorrect example in StringContext.raw doc\r\n| * | | | 7a1863e Remove "throws InvalidEscapeException" from StringContext.raw doc\r\n| |/ / /  \r\n* | | |   d1941ea Merge pull request #3884 from mpociecha/remove-invalidation-from-global\r\n|\\ \\ \\ \\  \r\n| * | | | 41507ba Remove invalidation from Global.scala\r\n* | | | |   e89fe92 Merge pull request #3826 from lrytz/opt/refactorTracked\r\n|\\ \\ \\ \\ \\  \r\n| * | | | | a8c88b1 Documentation for isModuleClass\r\n| * | | | | ee706b8 Support writing classfile of version 52\r\n| * | | | | 0ccdb15 Clean up and document some usages of flags in the backend\r\n| * | | | | 1bed39a Pattern matching on ClassBType extracts the inernalName\r\n| * | | | | 57de87e Remove unnessecary check when computing InnerClass attribute flags\r\n| * | | | | 91c7be1 Comment summarizing the JVM spec for InnerClass / EnclosingMethod\r\n| * | | | | 4c2217e Minor cleanups and comments in GenBCode\r\n|  / / / /  \r\n* | | | |   33b847b Merge pull request #3896 from retronym/ticket/8743\r\n|\\ \\ \\ \\ \\  \r\n| |_|/ / /  \r\n|/| | | |   \r\n| * | | | 926585a SI-8743 Fix crasher with poly-methods annotated with @varargs\r\n|/ / / /  \r\n* | | |   73fb460 (tag: v2.11.2) Merge pull request #3888 from som-snytt/issue/8736\r\n|\\ \\ \\ \\  \r\n| * | | | 5a30c40 (som-snytt/issue/8736) SI-8736 Error if no arg and no default\r\n| * | | | 01da58e SI-8736 Restore -language to former glory\r\n| | |/ /  \r\n| |/| |   \r\n* | | |   afa96e3 Merge pull request #3887 from Ichoran/issue/8738\r\n|\\ \\ \\ \\  \r\n| |/ / /  \r\n|/| | |   \r\n| * | | c7cc1a8 SI-8738  Regression in range equality\r\n|/ / /  \r\n* | |   abdd570 Merge pull request #3885 from som-snytt/issue/8525-cleanup\r\n|\\ \\ \\  \r\n| |_|/  \r\n|/| |   \r\n| * | 68560dd SI-8525 MultiChoice takes a helper function\r\n| * | bde6239 SI-8525 Multichoice help\r\n| * | f81ec8d (som-snytt/issue/8252-help) SI-8525 Clarify usage of -Xlint:_,flag\r\n|/ /  \r\n* |   04cb634 Merge pull request #3792 from som-snytt/issue/8525\r\n|\\ \\  \r\n| * | 3b89c16 SI-8525 No anonymous lint\r\n| * | 44855dc SI-8525 Add -Xlint:-warn-missing-interpolator\r\n| * | 91670d9 SI-8616 Error on -deprecation:true,false\r\n| * | 2103dbc SI-8610 -Xlint is multichoice option\r\n|  /  \r\n* |   0f8b07a Merge pull request #3883 from gourlaysama/wip/t8557\r\n|\\ \\  \r\n| * | ec46a1f SI-8557 make scaladoc normalize paths of external jars.\r\n|  /  \r\n* |   174cf45 Merge pull request #3817 from phaller/topic/typetags\r\n|\\ \\  \r\n| * | f15a289 Add SerialVersionUID to SerializedTypeTag and SerializedExpr\r\n| * | 5762110 SI-5919 TypeTags and Exprs should be serializable\r\n| |/  \r\n* |   41491b0 Merge pull request #3858 from densh/si/8703\r\n|\\ \\  \r\n| * | 9d527b6 Address pull request feedback\r\n| * | 14d1fe0 SI-8703 add support for blocks with just a single expression to quasiquotes\r\n|  /  \r\n* |   2429603 Merge pull request #3882 from adriaanm/jline-2.12\r\n|\\ \\  \r\n| * | 997647e Bump jline version to 2.12 (Re: SI-8535)\r\n| |/  \r\n* |   87eda3a Merge pull request #3845 from xeno-by/topic/attachment-subclassing\r\n|\\ \\  \r\n| * | 70afd05 relaxes attachment-matching rules\r\n|  /  \r\n* |   2a137d0 Merge pull request #3844 from xeno-by/topic/rangepos-subpatterns\r\n|\\ \\  \r\n| |/  \r\n|/|   \r\n| * 5ba2be2 prevents some reflection APIs from destroying rangeposes\r\n*   87bba94 Merge pull request #3872 from lrytz/no-adapted-args\r\n|\\  \r\n| * adba405 Fix -Yno-adapted-args, it would just warn, not err\r\n*   64df8bc Merge pull request #3878 from som-snytt/issue/8608\r\n|\\  \r\n| * 146bdd7 SI-8608 f-interpolator inlines StringOps\r\n| * b0dd01e SI-8608 f interpolator emits constant strings\r\n*   854de2d Merge pull request #3871 from lrytz/t8117\r\n|\\  \r\n| * c39c693 SI-8117 Fix bug when mixing well-positioned named and positional args\r\n* efe4f63 Merge pull request #3874 from phaller/issue/8590\r\n* 26b77ac SI-8590 Expand doc comments for ExecutionContext\r\n\r\n\r\nlucmac:scala luc$ git merge 01f2d27\r\nMerge made by the \'recursive\' strategy.\r\n 102 files changed, 1321 insertions(+), 552 deletions(-)\r\n\r\nlucmac:scala luc$ git lg\r\n*   f196ee2 - (HEAD, merge/2.11-to-2.12-is-it-really-sept-2-already-where-was-summer) Merge commit \'01f2d27\' into merge/2.11-to-2.12-is-it-really-sept-2-already-where-was-summer (2 minutes ago) <Lukas Rytz>\r\n\r\n\r\nlucmac:scala luc$ git merge 5a878c2 -s ours\r\nMerge made by the \'ours\' strategy.\r\nlucmac:scala luc$ git diff f196ee2\r\nlucmac:scala luc$ \r\n\r\n\r\nlucmac:scala luc$ git merge 47908f1\r\nAuto-merging src/library/scala/util/matching/Regex.scala\r\nCONFLICT (content): Merge conflict in src/library/scala/util/matching/Regex.scala\r\nAutomatic merge failed; fix conflicts and then commit the result.\r\n\r\nlucmac:scala luc$ git add src/library/scala/util/matching/Regex.scala\r\nlucmac:scala luc$ git ci\r\n[merge/2.11-to-2.12-is-it-really-sept-2-already-where-was-summer a08be99] Merge commit \'47908f1\' into merge/2.11-to-2.12-is-it-really-sept-2-already-where-was-summer\r\n\r\n\r\nlucmac:scala luc$ git lg\r\n*   a08be99 - (HEAD, merge/2.11-to-2.12-is-it-really-sept-2-already-where-was-summer) Merge commit \'47908f1\' into merge/2.11-to-2.12-is-it-really-sept-2-already-where-was-summer (48 seconds ago) <Lukas Rytz>\r\n\r\n\r\nlucmac:scala luc$ git merge eb74148 -s ours\r\nMerge made by the \'ours\' strategy.\r\nlucmac:scala luc$ git diff a08be99\r\nlucmac:scala luc$ \r\n\r\n\r\nlucmac:scala luc$ git merge merge/2.10-to-2.11-sept-2\r\nAuto-merging versions.properties\r\nCONFLICT (content): Merge conflict in versions.properties\r\nAutomatic merge failed; fix conflicts and then commit the result.\r\n\r\nlucmac:scala luc$ git add versions.properties\r\nlucmac:scala luc$ git ci\r\n[merge/2.11-to-2.12-is-it-really-sept-2-already-where-was-summer 91c4192] Merge branch \'merge/2.10-to-2.11-sept-2\' into merge/2.11-to-2.12-is-it-really-sept-2-already-where-was-summer\r\n```'
3958,'',"Merge 2.10 to 2.11\nThree `[backport]` commits (and their merge commits) are merged using `-s ours`.\r\n\r\n```\r\nlucmac:scala luc$ git lg\r\n*   c66b886 - (HEAD, upstream/2.11.x, upstream-writable/2.11.x, origin/2.11.x, 2.11.x) Merge pull request #3952 from gourlaysama/wip/t8828-lint-innacessible (4 hours ago) <Grzegorz Kossakowski>\r\n\r\nlucmac:scala luc$ git checkout -b merge/2.10-to-2.11-sept-2\r\nlucmac:scala luc$ export MB=$(git merge-base head origin/2.10.x)\r\nlucmac:scala luc$ git log --graph --oneline --decorate $MB..origin/2.10.x\r\n*   d2a5555 (upstream/2.10.x, upstream-writable/2.10.x, origin/2.10.x, 2.10.x) Merge pull request #3937 from som-snytt/issue/8787-doc-backport\r\n|\\  \r\n| * 8876227 (som-snytt/issue/8787-doc-backport) [backport] SI-8787 Backport Regex doc\r\n|/  \r\n*   1d3613b Merge pull request #3865 from xeno-by/topic/extractor-macros-210x\r\n|\\  \r\n| * 36379cf [backport] transformers no longer ignore UnApply.fun\r\n*   ac7e102 Merge pull request #3860 from gourlaysama/wip/t7710-backport\r\n|\\  \r\n| * fceae70 [backport] SI-7710 fix memory performance of RegexParsers in jdk7u6+\r\n*   b5759ef Merge pull request #3904 from kzys/jira-8314-2.10.x\r\n|\\  \r\n| * b6c00d6 Prevent SI-8314 by adding a test\r\n|/  \r\n* d74da16 Merge pull request #3752 from jeroentervoorde/SI_8589\r\n* 099a426 SI-8589 Performance improvement for ArrayCharSequence.toString\r\n\r\nlucmac:scala luc$ git merge b5759ef\r\nAuto-merging src/library/scala/runtime/SeqCharSequence.scala\r\nwarning: inexact rename detection was skipped due to too many files.\r\nwarning: you may want to set your merge.renamelimit variable to at least 2183 and retry the command.\r\nMerge made by the 'recursive' strategy.\r\n src/library/scala/runtime/SeqCharSequence.scala |  7 ++++++-\r\n test/scaladoc/run/t8314.check                   |  3 +++\r\n test/scaladoc/run/t8314.scala                   | 16 ++++++++++++++++\r\n 3 files changed, 25 insertions(+), 1 deletion(-)\r\n create mode 100644 test/scaladoc/run/t8314.check\r\n create mode 100644 test/scaladoc/run/t8314.scala\r\n\r\nlucmac:scala luc$ git lg\r\n*   3f69314 - (HEAD, merge/2.10-to-2.11-sept-2) Merge commit 'b5759ef' into merge/2.10-to-2.11-sept-2 (21 seconds ago) <Lukas Rytz>\r\n|\\  \r\n| *   b5759ef - Merge pull request #3904 from kzys/jira-8314-2.10.x (4 weeks ago) <Grzegorz Kossakowski>\r\n| |\\  \r\n| | * b6c00d6 - Prevent SI-8314 by adding a test (5 weeks ago) <Kato Kazuyoshi>\r\n| |/  \r\n| *   d74da16 - Merge pull request #3752 from jeroentervoorde/SI_8589 (9 weeks ago) <Adriaan Moors>\r\n| |\\  \r\n| | * 099a426 - SI-8589 Performance improvement for ArrayCharSequence.toString (3 months ago) <Jeroen ter Voorde>\r\n| |/  \r\n* |   c66b886 - (upstream/2.11.x, upstream-writable/2.11.x, origin/2.11.x, 2.11.x) Merge pull request #3952 from gourlaysama/wip/t8828-lint-innacessible (4 hours ago) <Grzegorz Kossakowski>\r\n\r\nlucmac:scala luc$ git merge 2.10.x -s ours\r\nMerge made by the 'ours' strategy.\r\n\r\nlucmac:scala luc$ git df 3f69314\r\nlucmac:scala luc$ \r\n```"
3957,'','GenBCode: eliminate unreachable code\nThe first 4 commits (on MultiChoiceSetting) are reviewed separately in #3939, ignore them here.\r\n\r\nHere\'s some of the changes, but just refer to individual commit messages.\r\n\r\nThe actual DCE is implemented by the ASM framework. As noted in the commit message, it is slow. I think OK enough if we run it once (which is currently the case. Note that it\'s enabled even in non-optimized mode). But it will probably be too slow if we apply it multiple times (to clean up after other optimizations). I think we should merge it as-is for now, we can later implement a faster DCE.\r\n\r\nI added a new compiler flag `-Yopt` for enabling / disabling optimizations in GenBCode. I think it makes sense for now, we can always decide later how to interpret old flags when the new backend is enabled.\r\n\r\nYou can now write JUnit tests like:\r\n```\r\nassertSameCode(\r\n  singleMethodInstructions(compiler)("def f: Int = { return 1; 2 }").dropNonOp,\r\n  List(Op(ICONST_1), Op(IRETURN))\r\n```\r\n\r\n'
3956,'','fix a few string interpolation typos\nThe ones in scala-reflect were caught by Xlint (who knew building with\r\nXlint was actually useful...), the other was just luck.\r\n\r\nThat nice little `-Dscala.repl.vids` feature regressed in f56f9a3c, but\r\nthere was no test to catch that. So there is one now.'
3955,'gkossakowski','SI-8410 Don\'t warn fatally on disabled flag\nSince boolean settings can now be set false by user,\r\nsummary warnings should not be issued when the flag\r\nis explicitly off (as opposed to unset, default).\r\n\r\nIn particular, `-Xfatal-warnings` should not fail\r\nif there were no warnings otherwise.\r\n\r\n```\r\n$ ~/scala-2.11.2/bin/scalac -d /tmp -deprecation:false test/files/pos/t8410.scala\r\n$ ~/scala-2.11.2/bin/scalac -d /tmp -deprecation:false -Xfatal-warnings test/files/pos/t8410.scala\r\nwarning: there were three deprecation warnings; re-run with -deprecation for details\r\nerror: No warnings can be incurred under -Xfatal-warnings.\r\none warning found\r\none error found\r\n\r\n```\r\nAfter this commit:\r\n```\r\n$ skalac -d /tmp -Xfatal-warnings test/files/pos/t8410.scala\r\nwarning: there were three deprecation warnings; re-run with -deprecation for details\r\nerror: No warnings can be incurred under -Xfatal-warnings.\r\none warning found\r\none error found\r\n$ skalac -d /tmp -deprecation:false -Xfatal-warnings test/files/pos/t8410.scala\r\n```\r\nSimilarly for other collecting flags:\r\n```\r\n$ skalac -d /tmp -optimise -Yinline-warnings -deprecation:false -Xfatal-warnings test/files/pos/t8410.scala\r\ntest/files/pos/t8410.scala:14: warning: Could not inline required method dropWhile because access level required by callee not matched by caller.\r\n  def k = List(0).dropWhile(_ < 1)   // inlining warns doubly\r\n                           ^\r\ntest/files/pos/t8410.scala:14: warning: At the end of the day, could not inline @inline-marked method dropWhile\r\n  def k = List(0).dropWhile(_ < 1)   // inlining warns doubly\r\n                           ^\r\nerror: No warnings can be incurred under -Xfatal-warnings.\r\ntwo warnings found\r\none error found\r\n$ skalac -d /tmp -optimise -Yinline-warnings:false -deprecation:false -Xfatal-warnings test/files/pos/t8410.scala\r\n\r\n```\r\nFootnote: handling of deprecated locals also changed in 2014:\r\n```\r\n$ ~/scala-2.11.0-M7/bin/scalac -d /tmp -deprecation -Xfatal-warnings test/files/pos/t8410.scala\r\ntest/files/pos/t8410.scala:8: warning: method f in object Test is deprecated:\r\n  Console println f  // warns\r\n                  ^\r\nerror: No warnings can be incurred under -Xfatal-warnings.\r\none warning found\r\none error found\r\n$ ~/scala-2.11.0-M8/bin/scalac -d /tmp -deprecation -Xfatal-warnings test/files/pos/t8410.scala\r\ntest/files/pos/t8410.scala:5: warning: method _f is deprecated:\r\n  def g = { @deprecated("","") def _f = f ; _f }                   // warns in 2.11.0-M8\r\n                                            ^\r\ntest/files/pos/t8410.scala:6: warning: class X is deprecated:\r\n  def x = { @deprecated("","") class X { def x = f } ; new X().x } // warns in 2.11.0-M8\r\n                                                           ^\r\ntest/files/pos/t8410.scala:8: warning: method f in object Test is deprecated:\r\n  Console println f  // warns\r\n                  ^\r\nerror: No warnings can be incurred under -Xfatal-warnings.\r\nthree warnings found\r\none error found\r\n\r\n```'
3954,'adriaanm','SI-7746 fix unspecifc non-exhaustiveness warnings and non-determinism in pattern matcher (2.11)\nThis pull request should resolve all remaining non-determinisms regarding exhaustiveness warnings in the pattern matcher. It was buried deep in the machinery and thus not easy to find. The non-determinism is also the reason behind SI-7746.\r\n\r\nReview by @adriaanm or @retronym\r\n\r\n1) The implementation of the DPLL algorithm was flawed and did not return all solutions. Depending on the ordering of the symbols, more or less solutions were found.\r\nYou can find a test project that compares the results of the implementation with Sat4j here:\r\nhttps://github.com/gbasler/dpll\r\n2) The formulas that were passed to the solver resulted in counter examples that were invalid and removed in a following filtering step. That led to the weird situation where the fixed algorithm returned less counter examples than the buggy one. The recursion goes now deeper than before and also this led to less counter examples reported, since it was stopped too early before.\r\n3) I also cleaned up the `LinkedHashSet` workarounds. They should not be needed anymore. I\'ve repeated Jason\'s checks (see below) and could not find any problems.\r\n\r\nIf the search for exhaustivity stops at the max recursion depth, all bets are off since we might not find all possible counter examples. Thus I added a switch `-Ypatmat-exhaust-depth <n> | <off>` that lets the user set the max recursion depth. This is necessary in order to keep the regression tests stable.\r\n\r\nI\'m working on another PR that will get rid of the "analysis budget" error but this one is a prerequisite to make it work.\r\n\r\nCheck 1:\r\n\r\n```\r\n  ~/Documents/scala-fix-nondet-patmat:ticket/7746$ (f=test/files/neg/t8430.scala; (for i in {1..20}; do echo $f; done; printf "\\n") | qbin/scalac -Xresident) 2>&1 | grep "fail" | sort | uniq | wc -l\r\n      1\r\n```\r\nCheck 2:\r\n\r\n```\r\n for i in {1..100}; do cp test/files/neg/t7020.scala test/files/neg/t7020-$i.scala; cp test/files/neg/t7020.flags test/files/neg/t7020-$i.flags; cat test/files/neg/t7020.check | sed "s/t7020/t7020-$i/" > test/files/neg/t7020-$i.check; done\r\n\r\n~/Documents/scala-fix-nondet-patmat:ticket/7746$ test/partest --terse --srcpath disabled test/files/neg/t7020*.scala\r\n\r\nSelected 101 tests drawn from specified tests\r\n\r\n\r\n# starting 101 tests in neg\r\n\r\n........................................................................\r\n\r\n.............................\r\n\r\n\r\n101/101 passed (elapsed time: 00:00:32)\r\n\r\nTest Run PASSED\r\n```'
3953,'','SI-7746 fix unspecifc non-exhaustiveness warnings and non-determinism in pattern matcher\nThis pull request should resolve all remaining non-determinisms regarding exhaustiveness warnings in the pattern matcher. It was buried deep in the machinery and thus not easy to find. The non-determinism is also the reason behind SI-7746.\r\n\r\n@adriaanm / @retronym\r\n\r\n1) The implementation of the DPLL algorithm was flawed and did not return all solutions. Depending on the ordering of the symbols, more or less solutions were found.\r\nYou can find a test project that compares the results of the implementation with Sat4j here:\r\nhttps://github.com/gbasler/dpll\r\n2) The formulas that were passed to the solver resulted in counter examples that were invalid and removed in a following filtering step. That led to the weird situation where the fixed algorithm returned less counter examples than the buggy one. The recursion goes now deeper than before and also this led to less counter examples reported, since it was stopped too early before.\r\n3) I also cleaned up the `LinkedHashSet` workarounds. They should not be needed anymore. I\'ve repeated Jason\'s checks (see below) and could not find any problems.\r\n\r\nI\'m working on another PR that will get rid of the "analysis budget" error but this one is a prerequisite to make it work.\r\n\r\nCheck 1:\r\n\r\n```\r\n  ~/Documents/scala-fix-nondet-patmat:ticket/7746$ (f=test/files/neg/t8430.scala; (for i in {1..20}; do echo $f; done; printf "\\n") | qbin/scalac -Xresident) 2>&1 | grep "fail" | sort | uniq | wc -l\r\n      1\r\n```\r\nCheck 2:\r\n\r\n```\r\n for i in {1..100}; do cp test/files/neg/t7020.scala test/files/neg/t7020-$i.scala; cp test/files/neg/t7020.flags test/files/neg/t7020-$i.flags; cat test/files/neg/t7020.check | sed "s/t7020/t7020-$i/" > test/files/neg/t7020-$i.check; done\r\n\r\n~/Documents/scala-fix-nondet-patmat:ticket/7746$ test/partest --terse --srcpath disabled test/files/neg/t7020*.scala\r\n\r\nSelected 101 tests drawn from specified tests\r\n\r\n\r\n# starting 101 tests in neg\r\n\r\n........................................................................\r\n\r\n.............................\r\n\r\n\r\n101/101 passed (elapsed time: 00:00:32)\r\n\r\nTest Run PASSED\r\n```'
3952,'','SI-8828 fix regression in Xlint visibility warning for sealed classes\n5dfcf5e reverted a change to `Symbol#isEffectivelyFinal` (made in\r\nadeffda) that broke overriding checks, and moved the new enhanced\r\nversion to a new method.\r\n\r\nHowever, the test for inaccessible type access still uses the old one,\r\nso it lost the ability to see that the owner of some method is either\r\nfinal or sealed and not overridden.\r\n\r\nThis just makes it use the new `isEffectivelyFinalOrNotOverriden`.'
3951,'','scaladoc: fixed code block indentation normalization\nsee SI-8810'
3950,'',"Update stripPrefix documentation to talk about no op case\nUpdate StringLike Documentation to indicate what happens when you remove a prefix from a string, and the string doesn't have that prefix."
3949,'',"SI-8627 make Stream.filterNot non-eager\nThe obvious fix, overriding `filterNot` in Stream, is not binary\r\ncompatible, see https://github.com/scala/scala/pull/3925\r\n\r\nInstead, this makes `filterImpl` in TaversableLike private[scala],\r\nwhich allows overriding it in Stream. The corresponding mima-failures\r\ncan be whitelisted, as the changes are only to private[scala].\r\n\r\nIn 2.12.x we can remove the override of `filter` in Stream, but in\r\n2.11.x this is not binary compatible.\r\n\r\nEventually we'd also like to make filter / filterNot in\r\nTraversableLike final, but that's not source compatible, so it cannot\r\nbe done in 2.12.x."
3948,'retronym','SI-8823 Exclude specialized methods from extension method rewrite\nIf a value class extends a specialized class, it can sprout\nspecialized members after the specialization info transformer has run.\nHowever, we only install extension methods for class members we know\nabout at the extmethods phase.\n\nThis commit simply disables rewiring calls to these methods in\nerasure to an extention method. This follows the approach taken\nfrom super accessors.\n\nNote: value class type parameters themselves currently are not\nallowed to be specialized.\n\nReview by @gkossakowski'
3947,'','Backporting from 2.12.x to 2.11.x\nRe-submission of #3926, with 2.11.x merged and the conflict resolved'
3946,'gkossakowski','SI-5254 running an empty scala script should succeed\nThe script runner made the assumption that "compilation succeeded"\r\nimplies "there is a Main class to run", but this can be wrong if the\r\nscript is empty (or only contains imports/comments).\r\n\r\nThe ScriptRunner now uses the ClassPath utility to check if there really\r\nis a main class. If not, it doesn\'t try to run it and returns\r\npeacefully. This also makes `scala -e \'\'` succeed.'
3945,'lrytz',"Ystats\nReduce book-keeping Lukas's cleanup by using an Enumeration and a ValueSet or two.\r\n\r\nEnumeration rocks!\r\n\r\nSee if this passes tests this morning.\r\n\r\nI wanted to PR against lrytz, but the UI doesn't show me how. :(\r\n"
3944,'',"Mbileschi update string like documentation\nUpdate StringLike Documentation to indicate what happens when you remove a prefix from a string, and the string doesn't have that prefix."
3943,'',"SI-1264 SI-5227 fsc isn't very good at returning error messages\nTwo little error-message-related fsc fixes:\r\n\r\n**SI-1264 fsc compiler output should go to stderr, like scalac**\r\n    \r\nThis properly sends the compiler output of `scala -e`, scala worksheets,\r\n... to sdterr, just like scalac does.\r\n    \r\nBefore:\r\n```sh\r\n% scala -e 'foo' > /dev/null\r\n%\r\n```\r\nAfter:\r\n```sh\r\n% scala -e 'foo' > /dev/null\r\n/tmp/scalacmd8514641341855028538.scala:1: error: not found: value foo\r\nfoo\r\n^\r\none error found\r\n%\r\n```\r\n---\r\n**SI-5227 make fsc notify its client upon compiler crash**\r\n\r\nFsc shoudln't just write to its own stderr when a major compiler crash\r\nhappens, it should also send an error to the client (`scala -e` for\r\nexample).\r\n\r\nOtherwise the client thinks everything went fine (silence == success)\r\nand tries to run something, crashes too, and displays only its own\r\nerror, not the original one."
3942,'','Add support for running a specific Junit test/method.\nUnless I really missed something, there is currently no way to run a\r\nspecific Junit test (class or method). Running the whole thing is going\r\nto get worse and worse since Junit is supposed to be the preferred way,\r\nso here it goes:\r\n```sh\r\n# will run all methods in a test file\r\nant test.junit -Dtest.class=scala.WhateverTest\r\n\r\n# will run a specific method (just an alias for the one below)\r\nant test.junit -Dtest.class=scala.WhateverTest -Dtest.method=mymethod\r\n\r\n# will run several methods (comma separated)\r\nant test.junit -Dtest.class=scala.WhateverTest -Dtest.methods="foo,bar"\r\n```\r\n`test.method(s)` without `test.class` is just ignored (all tests are\r\nrun).'
3941,'lrytz',"SI-8815  mutable.LongMap makes different choices for splitAt vs etc.\nIt turns out that take/drop/splitAt/takeWhile/dropWhile inherit a smattering of foreach vs. iterator-based implementations.  These aren't consistent unless they iterate in the same order.  This probably reflects an undesirable underlying weakness, but in this particular case it was easy to make LongMap's foreach order agree with iterator.\r\n\r\nMade traversal order of other foreach-like methods match also.\r\n\r\nAlso fixed a bug where Long.MinValue wasn't iterated."
3940,'lrytz','SI-7128  copyToArray(xs, 0, 0) should not fail\nFixed all copyToArray methods to do exactly what the docs say they do, with the least-suprise behavior of not throwing an exception if you ask to copy nothing (but would have copied out of range).\r\n\r\nIterator had an undocumented requirement for the target index to be in range regardless if anything happened; this has been removed.'
3939,'','-Ystatistics accepts a list of phases for which to print stats\nAlso cleaned up handling of defaults in MultiChoiceSetting.'
3938,'retronym',"SI-8764 fix return type of case class productElement under Xexperimental\nUnder `-Xexperimental`, `productElement` now returns the lub instead\r\nof the weak lub of case class parameter types (numeric widening\r\nshouldn't magically happen *inside* `productElement`)."
3937,'lrytz','[backport] SI-8787 Backport Regex doc\nBackport the doc with two material changes:\r\n\r\n1. need to use Groups to extract from Match,\r\nso say that in lieu of the 2.11 advice that\r\nthe Regex instance can be used without\r\nrecomputing the match;\r\n\r\n2. and relatedly, in 2.10 there is no secondary\r\nconstructor, so the doc for group names is\r\nmoved back up to the class doc.\r\n\r\nOriginal doc update on PR #3923 was:\r\n\r\n0e26910\r\n\r\nf98c53c\r\n\r\nReview by @lrytz \r\n'
3936,'retronym','SI-8806 Add lower bound check to Any lint\nWe already exclude the lint check for infer-any if\r\nAny is somewhere explicit.\r\n\r\nThis commit adds lower bounds of type params to\r\nthe somewheres.\r\n\r\nApologies for the "royal we" in the commit message.\r\n\r\nReview by @retronym '
3935,'retronym',"SI-8803 generate super accessor for super[A], if A is outer superclass\n    class C extends A with T {\r\n      class I {\r\n        C.super[T]\r\n        C.super[A]\r\n      }\r\n    }\r\n\r\nA super call in a nested class of the form super[T] where T is a\r\nparent trait of the outer class doesn't need an accessor: mixin can\r\ndirectly re-route the call to the correct implementation class - it's\r\nstatically known to be T$class.\r\n\r\nHowever, if a nested class accesses super[A] and A is the superclass\r\nof the outer class (not a trait), then we need a super accessor in the\r\nouter class.\r\n\r\nWe need to add the mixin name to the super accessor name, otherwise\r\nit clashes with non-qualified super accessors."
3933,'','Mistake in documentation\nThere is a small mistake in documentation for Map. For method:\r\n\r\n`def withDefaultValue[B1 >: B](d: B1)`\r\n\r\n`d` is described as function instead of value. '
3932,'retronym','SI-8498 @compileTimeOnly should be aware of bridge methods.\nValues classes, for example, will create bridges to a `@compileTimeOnly`\r\nmethod (the bridge is also marked `@compileTimeOnly`), which should not\r\nthrow an error. Calling the bridge or the method will anyway.'
3931,'gkossakowski','GenBCode refactoring (remove Tracked) and fix InnerClass / EnclosingMethod attributes\nThe largest commit, "Remove Tracked, ...", was already reviewed in #3855. It is a squashed version of the commits labelled `[squash-after-review]` in that PR.\r\n\r\nThe subsequent commits address the review comments. They should be reviewed.\r\n\r\nThe commit "Fix InnerClass / EnclosingMethod attributes" is new and should be reviewed.\r\n\r\n[`-Ybackend:GenBCode` build OK](https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/1330/consoleFull)'
3930,'','make ConsoleReporter handle both stdout and stderr\n`scala` and `scalac` always had a problem with deciding where to send\r\nmessages in the console and just sent everything to stderr, so it is\r\ntime to improve that:\r\n\r\n`ConsoleReporter` now takes two `PrintWriter`, one for errors/warnings and\r\none for normal messages. The short constructor sets them to stderr and\r\nstdout, respectively.\r\n\r\nThis finally makes scala(c) ouput like any normal program. For example:\r\n```sh\r\n$ scalac -help > /dev/null # will now print nothing\r\n\r\n$ scala -nc -e "val" > /dev/null # will print an error message\r\n\r\n$ scala -nc -e "println(1)" > /dev/null # but this won\'t\r\n```\r\nPeople calling the old constructor (with a single writer) get no change\r\nin behavior: everything goes to the writer.\r\n\r\n---\r\n\r\nThe second commit uses that to fix a 6-year-old issue, [SI-1264][1].\r\n\r\n[1]: https://issues.scala-lang.org/browse/SI-1264'
3929,'lrytz',"SI-8793 Fix patmat regression with extractors, existentials\nIn the same vein as SI-8128 / 3e9e2c65a, revert to the 2.10.x style\nof determining the types of the product elements of an extractor\nwhen using `TupleN`.\n\nI believe we can discard the special casing for Option/Tuple/Seq\naltogether with judicious application of `repackExistential` in\n`unapplyMethodTypes`. That ought to also fix fix SI-8149. But I'll\ntarget that work at 2.12.x."
3928,'lrytz','Scaladoc: the value of an id attribute must be unique within a document\nThe value of an id attribute must be unique, according to HTML spec.'
3927,'','test for InnerClass and EnclosingMethod attributes\nSome parts of the test assert (current) buggy behavior. This is marked\r\nin the test file with TODO. It will be fixed in later work on the\r\nbackend.\r\n\r\nThe test also passes under `-Ybackend:GenBCode` (ran it locally).'
3926,'',"Backporting from 2.12.x to 2.11.x\nBackports of all those PR sent to 2.12.x that could have been targeted to 2.11.x:\r\n\r\n - scaladoc improvements: #3898, #3918, #3892, #3891, #3880, #3857, #3864, #3853, #3822, #3819, #3810\r\n - actual code changes (in the scaladoc tool): #3881, #3875 (last two commits here)\r\n\r\nChanges to `src/library` only happen within scaladoc comments. It doesn't get more binary compatible than that."
3925,'','SI-8627 Override filterNot in Stream\nFixes a bug in which `Stream#filterNot` performs an eager evaluation of\r\nthe `Stream` it is called on. Also adds an additional unit test that\r\nexposes the bug.\r\n\r\nPreviously, commit 7a6905dc15 fixed this method, but commit 3059e3a0c03\r\nbroke it again. In my opinion, `Stream` should not rely on the fact\r\nthat `TraversableLike`’s implementation of `filterNot` uses `filter`,\r\nas it is not mandatory in the method’s contract. Instead, the method\r\nshould be overriden in `Stream` - that way, `Stream` will be more\r\nresilient to changes in its underlying traits.'
3924,'','mutable.LongMap.fromZip takes collection.Iterable\nThe type should be qualified as collection.Iterable, because Iterable is that context is mutable.Iterable.\r\n\r\nThe fix can probably be backported to 2.11.x if generalizing final method arguments does not break binary compatibility (the companion object of `LongMap` cannot be subclassed).'
3923,'',"SI-8787 Regextraction is null-proof\nA null never matches.\r\n\r\nThat's what they say at eHarmony, anyway.\r\n"
3922,'lrytz',"SI-8788 Add generic signature to Parcelable static field special case.\nAndroid's AIDL generates Java code that assumes the presence of generic\r\nannotations for Parcelable classes, which previously were not being\r\ngenerated. This patch adds a generic signature to the generated CREATOR\r\nfield, resolving the issue."
3921,'',"remove jline sources from src/ now that we use a released jline.\nWe don't need those, right?\r\nWe don't even build that folder anymore (since 1b0fa91), it is just dead\r\ncode."
3920,'gkossakowski','SI-7350 Prevent resource leaks in PipedProcesses.runAndExitValue()\nThis patch fixes some problems in `PipedProcesses` as listed bellow:\r\n\r\n- `source` and `sink` leak when b.run() fails at [ProcessImpl.scala#L132](https://github.com/scala/scala/blob/538aa22ec8144430e778a34bc749eccb6f5dbf4c/src/library/scala/sys/process/ProcessImpl.scala#L132). ([SI-7350](https://issues.scala-lang.org/browse/SI-7350))\r\n\r\n- `source`, `sink` and `second` leak when a.run() fails at [ProcessImpl.scala#L133](https://github.com/scala/scala/blob/538aa22ec8144430e778a34bc749eccb6f5dbf4c/src/library/scala/sys/process/ProcessImpl.scala#L133). ([SI-7350](https://issues.scala-lang.org/browse/SI-7350))\r\n\r\n- `source` and `sink` leak when `Process.exitValue()` interrupted in [ProcessImpl.scala#L135](https://github.com/scala/scala/blob/538aa22ec8144430e778a34bc749eccb6f5dbf4c/src/library/scala/sys/process/ProcessImpl.scala#L135). ([SI-7350](https://issues.scala-lang.org/browse/SI-7350))\r\n\r\n- `first` do not properly connected with `second` when `None` putted to `currentSink` before `sink` receive `Some(InputStream)` at [ProcessImpl.scala#L138](https://github.com/scala/scala/blob/538aa22ec8144430e778a34bc749eccb6f5dbf4c/src/library/scala/sys/process/ProcessImpl.scala#L138). ([SI-8768](https://issues.scala-lang.org/browse/SI-8768))\r\n\r\nand, a broblem in [BasicIO.scala#L222](https://github.com/scala/scala/blob/538aa22ec8144430e778a34bc749eccb6f5dbf4c/src/library/scala/sys/process/BasicIO.scala#L222) that \r\n\r\n- `InputStream` and `OutputStream` never throw `InterruptedException`, but `BasicIO.transferFully` trying to catch it at [package.scala#L238](https://github.com/scala/scala/blob/159baa268e5cc14b50bf29a40fff922e36dd7bc9/src/library/scala/sys/process/package.scala#L238). \r\n\r\nI guess this originally intented to catch `InterruptedIOException`.\r\n'
3919,'',"SI-1264 scala -e now outputs compilation messages to stderr\nThis makes `scala -e` send the compilation output from fsc to stderr, just\r\nlile `scala -nc -e`, and like `scalac` itself, instead of stdout.\r\n\r\nNote that this only aligns fsc with the rest, but it doesn't fix the\r\nactual issue that, currently, a line can be printed without the error\r\nseverity and yet be part of an error message, so the severity is useless\r\nfor the purpose of discriminating stdout vs. stderr. This ended up with\r\nfsc picking stdout for (mostly) everything and the others stderr. Even\r\n`scalac -help` sends its output to stderr..."
3918,'','Fixes cut sentences in the generated scaladocs\nThis commit changes all first sentences of library functions which\r\ncontain `i.e.` or `e.g.` and adds a `,` to prevent that the scaladoc\r\nsummary sentence is cut after this abbreviation.\r\n\r\nThis is possible as [pull/3824](https://github.com/scala/scala/pull/3824) fixed how Scaladoc parses the first\r\nsentence of a method description into a sumary sentence (now the first\r\nsentence has to end with a dot followed by whitespace).\r\n\r\nOnly docs in the core library are changed (src/library/**/*.scala)\r\nby this pull request and only if they occur in a first sentence.\r\n\r\nReview by @heathermiller'
3917,'Ichoran','Possible fix for SI-8782\nModified Range.Double to use NumericRange of Double instead of using BigDecimal internally and then converting it to Double.\r\n\r\nSame change can be made on the other branches 2.9.x, 2.10.x and 2.11.x'
3916,'','SI-8781 Avoid double-expansion under -Ymacro-expand:discard\nThis mode of macro expansion is used by the presentation compiler to\nleave the original macro applications ("expandees") in the type\nchecked trees, annotated with the types of the expansions.\n\nHowever, under some circumstances involving implicits, we would\nre-expand the macro. If the macro wasn\'t stable, this could lead\nto a type mismatch.\n\nThe originally reported problem was with the shapeless\n`mkSingletonOps` macro. Its expansion had the type of a freshly-named\nclass local to the expansion. Upon the re-expansion, a new class\nwas generated, which lead to errors like:\n\n    client/Client.scala:4: error: type mismatch;\n     found   : fresh$macro$2\n     required: fresh$macro$1\n\nThis commit suppressed re-expansion of the expandee by use of\nthe existing, tree attachment driven mechanism.\n\nReview by @xeno-by. /cc @dragos'
3915,'','SI-4427 document package objects appearing in implicit scope\nThe implicit scope of `a.A` includes package object `a`. Document this, following the text posted by @odersky in the ticket (hoping my manual diff is correct).\r\n\r\nFixes #4427.\r\n\r\nWarning: please make sure `2.11.x` is the branch where I should send this.'
3914,'','Orphan check file\nOrphaned by the override check reversion that deleted the test source.\r\n\r\n2524fdde3edc7b668fdb4bf68e990141d3ec18d6\r\n\r\nI guess it would be more useful to write a script to sanity check the myriad files.\r\n\r\nOr a kind of reverse-test-coverage, to check that all test resources were applied during a build.\r\n\r\nFor posterity: the answer was "3".'
3913,'','SI-8768 Process may block and never return value\nPipedProcesses.runAndExitValue() have several issues, also discussed in #2379.\r\n\r\n- Block when a process generated by `a.run()` quickly responded to `Process.exitValue()`.\r\n- Leak `Thread` when `ProcessBuilder.run()` threw an error or `Process.exitValue()` interrupted.\r\n- Leak `Process` when `ProcessBuilder.run()` threw an error.\r\n\r\nThis fixes these problems.\r\n'
3912,'','Code cleanup to be more conforming to style guide.\n- Return `Unit` instead of using procedure syntax.\r\n- Explicitly listed return type for `def`s.\r\n- Added/removed `()` for arity-0 methods depending on whether or not they have side-effects.\r\n- Removed unused imports.\r\n- Fixed missing "`" in doc strings.\r\n- Removed redundant `final` qualifier.\r\n- Renamed values to prevent shadowing.'
3911,'','SI-8774 - set LinkedHashMap/LinkedHashSet node\'s link fields to null when removed\nSeveral collection types have var link fields in their nodes. Examples\r\ninclude LinkedHashMap and LinkedHashSet. As implemented, removal \r\nof a value from one of these structures unlinks the node from the \r\ncollection but leaves that node\'s link fields unchanged. This can lead to\r\na form of nepotism causing unnecessary promotion of objects in\r\ngenerational garbage collection and can lead to sequences of frequent\r\nfull garbage collections.\r\n\r\nHow does this happen? These fields allow older (previously allocated\r\nobjects) to point to younger objects in the heap. If a removed node\r\nhappens to be in an older generation, the fact that it refers to younger\r\nobjects causes these objects to be promoted even if they are otherwise\r\nunreachable. This then causes an instance of one of these collections\r\n(especially if used as a queue) to repeatedly promote objects that\r\nshould have been collected in the young generation. The problem is not\r\na semantic one, but instead, a limitation of incremental tracing garbage\r\ncollection in which it collects part of the heap while treating another\r\npart, conservatively, as if it were reachable.\r\n\r\nThe PR includes a simple benchmark (LinkedHashMapTest.scala) that shows\r\nthe issue. The benchmark has three phases. In the first phase, a\r\nLinkedHashMap[Int, Int] is populated. In the second phase, that collection\r\ninstance (and all its nodes) is promoted by invoking System.gc(). In the\r\nfinal phase, nodes are repeatedly added and removed as if the data structure\r\nwere a queue. The test not included in this changeset because it needs to be\r\nrun in a way that can quantify the number of full GCs that occur during\r\nthe third phase.\r\n\r\nWhen  run on the existing code base, the test shows frequent repeated\r\nfull GCs after phase three starts. The fix is relatively straightforward:\r\nadd code in the remove operations to null out the link fields. With the\r\nfix, there are only young GCs during that final phase.\r\n\r\nAside: This all came out of the observation of occasional/unpredictable\r\nspikes in GC activity in some of our services. We also found and fixed\r\nthese issues with the Java LinkedHashMap class and fixed our 1.7 JDK to\r\nalso null out these link fields. We\'ve verified that this fixes the\r\npathologies we saw. We also found that, independently, the OpenJDK 1.8\r\nclass files for these collection classes have also been modified (by\r\nOracle) to null out these link fields. We\'d now like to do the same for\r\nthe Scala types.\r\n\r\ntesting: "test/partest --all" passes all tests'
3910,'','SI-8774 - set mutable HashMap/HashSet node\'s link fields to null when th...\nSeveral collection types have var link fields in their nodes. Examples\r\ninclude HashMap, LinkedHashMap, LinkedHashSet, and ParHashMap. As\r\nimplemented, removal of a value from one of these structures unlinks the\r\nnode from the collection but leaves that node\'s link fields unchanged.\r\nThis can lead to a form of nepotism causing unnecessary promotion of\r\nobjects in generational garbage collection and can lead to sequences\r\nof frequent full garbage collections.\r\n\r\nHow does this happen? These fields allow older (previously allocated\r\nobjects) to point to younger objects in the heap. If a removed node\r\nhappens to be in an older generation, the fact that it refers to younger\r\nobjects causes these objects to be promoted even if they are otherwise\r\nunreachable. This then causes an instance of one of these collections\r\n(especially if used as a queue) to repeatedly promote objects that\r\nshould have been collected in the young generation. The problem is not\r\na semantic one, but instead, a limitation of incremental tracing garbage\r\ncollection in which it collects part of the heap while treating another\r\npart, conservatively, as if it were reachable.\r\n\r\nThe PR includes a simple benchmark (LinkedHashMapTest.scala) that shows\r\nthe issue. The benchmark has three phases. In the first phase, a\r\nLinkedHashMap[Int, Int] is populated. In the second phase, that collection\r\ninstance (and all its nodes) is promoted by invoking System.gc(). In the\r\nfinal phase, nodes are repeatedly added and removed as if the data structure\r\nwere a queue. The test not included in this changeset because it needs to be\r\nrun in a way that can quantify the number of full GCs that occur during\r\nthe third phase.\r\n\r\nWhen  run on the existing code base, the test shows frequent repeated\r\nfull GCs after phase three starts. The fix is relatively straightforward:\r\nadd code in the remove operations to null out the link fields. With the\r\nfix, there are only young GCs during that final phase.\r\n\r\nAside: This all came out of the observation of occasional/unpredictable\r\nspikes in GC activity in some of our services. We also found and fixed\r\nthese issues with the Java LinkedHashMap class and fixed our 1.7 JDK to\r\nalso null out these link fields. We\'ve verified that this fixes the\r\npathologies we saw. We also found that, independently, the OpenJDK 1.8\r\nclass files for these collection classes have also been modified (by\r\nOracle) to null out these link fields. We\'d now like to do the same for\r\nthe Scala types.\r\n\r\ntesting: "test/partest --all" passes all tests'
3909,'','SI-8512 Infer a type for f"$args"\nThe f-interpolator gets a type param that better be Any to avoid\r\nunfortunate widenings.\r\n\r\nHey, it worked!\r\n\r\n@densh \'s comments on the ticket are longer than the fix and the test.\r\n\r\nReview by @densh\r\n'
3908,'','Scala splat parameters are badly implemented\n1. Combination of splat and fixed parameters\r\n===\r\nLet\'s define this simple function:\r\n```scala\r\ndef sum(xs: Int*) = xs.sum\r\n```\r\nNow, while the simple case `sum(List(1,2,3): _*)` works, these don\'t:\r\n```scala\r\nsum(1, List(2,3): _*)\r\nsum(List(1,2): _*, 3)\r\nsum(List(1): _*, 2, List(3): _*)\r\n```\r\nThird one is a little advanced, however, it works in all other languages that support passing variadic parameters.\r\n\r\n2. Implcits are not applied to splat parameters\r\n===\r\nLet\'s define this funny (and dangerous) implicit:\r\n```scala\r\nimplicit def wrapper(s: String) = s.toInt\r\n```\r\nNow, the problem is, while this works:\r\n```scala\r\nsum("1", "2", "3")\r\n```\r\nthis doesn\'t:\r\n```scala\r\nsum(List("1", "2", "3"): _*)\r\n```\r\n\r\nI think `f(...)` and `f(List(...): _*)` should behave identically, even from the standpoint of implicits. It\'s just POLS (principle of least surprise) in action.\r\n\r\n3. Unable to create anonymous variadic function\r\n===\r\nMartin has already commented on this, but nevertheless, here i\'m writing this again.\r\n```\r\nval f = (xs: Int*) => xs.sum\r\n```\r\n\r\n'
3907,'','a few missing deprecations in proxy collections.\nSeqProxy was properly deprecated, so were the CollProxyLike classes, and\r\nthe ones in collection.immutable, but these four somehow survived\r\nthe Big Proxy Deprecation (tm).'
3906,'','SI-8768 Process may block and never return value\nPipedProcesses.runAndExitValue() may block and never returns a value. Fixed by moving two lines `currentSource put None` and `currentSink put None` to the finally clause. \r\nAdded a test to verify the behavior.'
3905,'lrytz',"SI-5691 lint warning when a type parameter shadows an existing type.\nThis adds a new lint warning for when a class/method/type-member's\r\ntype parameter shadows an existing type: `-Xlint:type-parameter-shadow`.\r\n\r\nIt excludes type parameters of synthetic methods (the user can't\r\nrename or remove those anyway), otherwise, for example, every case class\r\ntriggers the warning.\r\n\r\nAlso fixes a test that contained wrong java sources (that didn't even\r\ncompile...), discovered thanks to the warning.\r\n\r\n---\r\nThis kind of errors shows up every now and then on the mailing-list, on\r\nstackoverflow, etc. so maybe a warning would be useful.\r\nI was afraid this would yield too many warnings for libraries that are\r\nheavy on type parameters, but no: running this on scalaz and shapeless\r\nHEAD (`v7.1.0-RC1-41-g1cc0a96` and `v2.0.0-M1-225-g78426a0` respectively)\r\nyields 44 warnings. None of them are false positives; they usually come\r\nfrom:\r\n - scalaz loving using `A` as type parameter, even several levels deep\r\n   of parametrized classes/methods\r\n - or calling a type parameter that will hold a map `Map`, or similar,\r\n   thus shadowing an existing type"
3904,'','Prevent SI-8314 by adding a test\nThe original issue was fixed already. This test is just for make sure.'
3903,'',"Interactive / ScalaDoc housekeeping\nThose are the leftovers of what should have been a larger bugfix PR, but that's finally not meant to be.\r\n\r\nNo issue, since the changes are straightforward & compiler warnings-driven, but I'd be happy to create one.\r\n\r\nShould probably be merged into 2.12.\r\n\r\nreview by @jaguarul, who kindly agreed to look at what should be boring improvements"
3902,'',"SI-4563 friendlier behavior for Ctrl+D in the REPL\nClosing the REPL with Ctrl+D does not issue a newline, so the user's\r\nprompt displays on the same line as the `scala>` prompt. This is bad.\r\nWe now force a newline before closing the interpreter, and display\r\n`:quit` while we're at it so that people know how to exit the REPL\r\n(since `exit` doesn't exist anymore).\r\n\r\nThe tricky part was to only add a newline when the console is\r\ninterrupted, and *not* when it is closed by a command (like `:quit`),\r\nsince commands are processed after their text (including newline) has\r\nbeen sent to the console."
3901,'','SI-8755 Phase Assembly is broken\n    - Fixes various bugs in the phase assembly of the Scala compiler (see below and JIRA ticket)\r\n    - Plugins with empty after and rightAfter constraints are no longer ignored\r\n    - runsRightAfter no longer causes other constraints to be ignored\r\n    - constraint systems are now accepted iff they are solvable\r\n    - No more illegal modifications of objects contained in hash sets (hash code no longer dependent on field values, identity semantics sufficient)\r\n    - Realized constraint solving by well-known topological sort algorithm (due to Kahn (1962))\r\n    - Fixes #8755\r\n    - backport to 2.11.x'
3900,'',"Prevent SI-7905 by adding a test just in case\nThis is for just in case. I couldn't reproduce the original issue."
3899,'','SI-8314 Prevent SI-8314 by adding a test\nThe original issue was fixed already. This test is just for make sure.'
3898,'','Refactored example to Option.collect method.\nrebase of #3862\r\n\r\nalready LGTMed'
3897,'','Bump versions for Scala 2.11.2\n`versions.properties` from https://scala-webapps.epfl.ch/jenkins/view/scala-release-2.11.x/job/scala-release-2.11.x/133/\r\n\r\n'
3896,'',"SI-8743 Fix crasher with poly-methods annotated with @varargs\nThe code that generated the Java varargs forwarder was basing\nthings on the `ValDef-s` of the parameters of the source method.\nBut, their types refer to a type parameter skolems of the enclosing\nmethod, which led to a type mismatch when typechecking the forwarder.\n\nInstead, I've reworked the code to simply use the `DefDef`-s symbol's\ninfo, which *doesn't* refer to skolems. This actually simplifies the\nsurrounding code somewhat; rather than repeated symbols in a map\nwe can just time travel the pre-uncurry method signatures to figure\nout which params are releated."
3895,'','Also update jline.version when update.versions is set during build\n'
3894,'',"Better error message than 'bad symbolic reference'.\nLet's not scare people, and try to give them some advice.\r\n\r\nreview by @dragos"
3893,'','Update versions.properties for building 2.11.2\nparser combinators: current tag\r\nhttps://github.com/scala/scala-parser-combinators/releases\r\n\r\nakka: current release http://akka.io/downloads/\r\n\r\nscalacheck: current tag\r\nhttps://github.com/rickynils/scalacheck/releases\r\n\r\nReview by @adriaanm.\r\n\r\nWith this change, I can push a tag and run the [release job](https://scala-webapps.epfl.ch/jenkins/view/scala-release-2.11.x/job/scala-release-2.11.x/build) with the default parameters.'
3892,'','Fixed error in the documentation of scala.math.PartialOrdering\nThe documentation of the `scala.math.PartialOrdering` trait contains a very confusing since – from a mathematical perspective – wrong statement. In particular, it reads:\r\n\r\n> A partial ordering is a binary relation on a type `T` that is also an equivalence relation on values of type `T`. This relation is exposed as the `lteq` method of the `PartialOrdering` trait.\r\n\r\nThis suggests that every partial ordering is itself an equivalence relation, and that the relation exposed as the lteq method is an equivalence relation. Clearly, this is not correct: if *R* is a partial ordering, then in general only the **intersection** of *R* and *R^(-1)* is an equivalence relation. I therefore propose to adjust the documentation.\r\n\r\nAdditionally, the existing documentation had some minor formatting inconsistencies, which have been fixed as well.'
3891,'','Fix scaladoc typo\nFix scaladoc typo in the scala.math.Ordering class\r\n\r\n> If you have already sent a pull request please add a comment to the pull request saying you did sign the CLA.\r\n\r\nI already signed the CLA.'
3890,'','Remove "throws InvalidEscapeException" from StringContext.raw doc\nSince StringContext.raw doesn\'t escape its input, it does not call `treatEscapes` and cannot throw the InvalidEscapeException.'
3889,'','SI-6476 Improve error on escapement \nBehavior of escape processing under string interpolation can\r\nbe confusing.  This commit improves the exception message so\r\nyou know at least what sort of escapes are handled.\r\n\r\nThis came up on SO in the form `s"\\d".r`, where it may not\r\nbe obvious what is throwing and how to work around it.\r\n\r\n```\r\nscala> s"\\d".r\r\nscala.StringContext$InvalidEscapeException: invalid escape \'\\d\' not one of [\\b, \\t, \\n, \\f, \\r, \\\\, \\", \\\'] at index 0 in "\\d". Use \\\\ for literal \\.\r\n\r\nscala> s"a\\"\r\nscala.StringContext$InvalidEscapeException: invalid escape at terminal index 1 in "a\\". Use \\\\ for literal \\.\r\n```\r\n\r\nReferencing SI-6476 because that has become the magnet ticket\r\nfor "escape processing under string interpolation, huh?"\r\n\r\nThis doesn\'t address `$"` and doesn\'t handle the more interesting\r\nparse error `s"a\\"b"`.\r\n\r\nSupersedes #3768.'
3888,'','SI-8736 Restore -language to former glory\nMultiChoice allows -language to work like -Xlint.\r\n\r\nThe bug as described was that the setting value was set instead of updated\r\n(++=) with additional flags.\r\n\r\nThe unreported bug was that `_` no longer set all settings.\r\n\r\nThe corrected behavior is that "contains" means "it was enabled, or\r\n_ was set and it was not disabled explicitly."\r\n\r\nThat is the behavior of `-Xlint` but with a different mechanism,\r\nsince each lint option is a Setting.\r\n\r\nA semantic difference is that -Xlint enables all the lint options,\r\nbut -language does not enable all the language features. `scalac -X` does\r\nnot explain this additional behavior of the `-Xlint` flag.\r\n\r\nAlso worth noting that `scalac -feature -language unused.scala` failed\r\nin 2.11.1 but succeeds silently now.\r\n\r\nnote: -language as string settings and -Xlint as a group of Settings represent two\r\ndifferent models, so unifying them is annoying.  The contains test is convenient\r\nfor the -language check, and the individual Setting objects are convenient for\r\nprogrammatic linting.'
3887,'','SI-8738  Regression in range equality\nMissed the case of comparing a non-empty range to an empty one.  Fixed by checking nonEmpty/isEmpty on other collection.\r\n\r\nAdded a test to verify the behavior.'
3886,'retronym','part 2 of the big error reporting refactoring\nThe big refactoring, pt 2. review by @retronym when the 2.11.2 dust has settled'
3885,'','SI-8525 Clarify usage of -Xlint:_,flag\nAlign more with javac -Xlint:all,-flag,flag where once a flag is\r\nexplicitly enabled it cannot be disabled, but where the wildcard\r\nis a backstop only.\r\n\r\n-Xlint and -Xlint:_ just set a flag which is consulted by any\r\nunset lint warning.\r\n\r\nSome tests are corrected. Also, option order is no longer\r\nsignificant, see the unit test.\r\n'
3884,'',"Remove invalidation from Global.scala\n@gkossakowski stated that this code is unnecessary and probably it still exists only by accident\r\n\r\nIt has to be taken into account during making changes so it's better to remove this code, if it's really unnecessary.."
3883,'','SI-8557 make scaladoc normalize paths of external jars.\nScaladoc compares (string representations of) the paths from\r\n-doc-external-doc and the paths form `sym.underlyingSource`.\r\nWe now normalize on both ends before comparing them.\r\n\r\n----\r\nreview by @VladUreche'
3882,'',"Bump jline version to 2.12 (Re: SI-8535)\nMove version info where it belongs: versions.properties\r\n\r\nI skimmed https://github.com/jline/jline2/compare/jline-2.11...jline-2.12 -- looks like all bug fixes to me.\r\n\r\nThis should fix SI-8535, but I don't have a repro to verify."
3881,'','Update javadoc tag to new scaladoc tags.\nreview @vladureche \r\n\r\nhttps://issues.scala-lang.org/browse/SI-6144'
3880,'','Fixes first sentence delimiters\nScaladoc places the first sentence in the method summary table and index. The first sentence is defined as the sequence of chars up to the first period (not as in JavaDoc where the sentence ends with the first period *followed by a blank*). As a consequence, the clause starting with `i.e.` ends the first sentence at a wrong position. This request replaces `i.e.` with `i&period;e&period;`. Alghough a valid HTML code, I do not know whether this change is compatible with other tools. And I assume that this is not the only source file affected.\r\nAn alternative fix would be to reformulate the summary of methods `onSuccess` and `onFailure`.'
3879,'gkossakowski',"SI-8715 Include versions.properties in scala-compiler.jar.\nSo that it can be consumed in builds that cannot use scala-library-all's pom.\r\n\r\nReview by @dragos, cc @skyluc"
3878,'','SI-8608 f interpolator emits constant strings\nWhen invoking `format` is obviated by a lack of\r\nformatting fields, then just degenerate to an\r\nunenhanced constant string.\r\n\r\nThis means it doesn\'t cost anything to use\r\nf"$$ordinary" in place of "$ordinary", which\r\nmay cause warnings under -Xlint.\r\n\r\nNote that certain format literals, in particular\r\nfor line separator %n, are not actually literals and\r\ncan\'t be replaced at compile time.\r\n\r\nReview by @lrytz'
3877,'',"Merge 2.11.x to 2.12.x\n```\n% export MB=$(git merge-base origin/2.11.x head)\n\n% git --no-pager log --oneline --decorate --graph $MB..origin/2.11.x\n*   aea6519 (origin/2.11.x) Merge pull request #3867 from lrytz/t8708\n|\\\n| * 14fa7be (origin/pr/3867) SI-8708 Fix pickling of LOCAL_CHILD child of sealed classes\n* |   4d3ede9 Merge pull request #3866 from Blaisorblade/issue/8677-backport\n|\\ \\\n| * | acab0fa (origin/pr/3866) [backport] SI-8677 Duration: Zero - Inf should be MinusInf\n* | |   d1fa9ac (2.11.x) Merge pull request #3868 from adriaanm/report-filter\n|\\ \\ \\\n| * | | 532ef33 (origin/pr/3868) Restore reporter forwarders in CompilationUnit\n|/ / /\n* | |   75ac225 Merge pull request #3820 from adriaanm/report-filter\n|\\ \\ \\\n| * | | b384d50 (origin/pr/3820) Use countElementsAsString for summarized warnings.\n| * | | 3066bd4 Encapsulate deprecation warning message synthesis.\n| * | | 9fc68e1 Remove deprecationWarning, currentReporting from Reporting\n| * | | b724201 Rip out reporting indirection from CompilationUnit\n| * | | 59db57f Route type checker reporting through context\n| * | | e087353 Track symbol that caused a deprecation warning.\n| * | | 62c8f90 Uniformly route reporting through reporter.\n| * | | 98216be Move reporting logic into Reporting trait\n| * | | f2b76e8 Pure refactor: reorder definitions\n| * | | ffb0e25 Unclutter Reporter. Move truncation to ReplReporter.\n|/ / /\n* | |   b38fc5e Merge pull request #3842 from Ichoran/issue/8335\n|\\ \\ \\\n| |_|/\n|/| |\n| * | ff43de9 (origin/pr/3842) SI-8335  List.++ avoidably burns memory\n|  /\n* |   3f79f8e Merge pull request #3788 from som-snytt/issue/8494\n|\\ \\\n| * | fadb21d (origin/pr/3788) SI-8494 Javap filter includes specialized\n| * | 7332240 SI-8494 Restore filtering javap output\n|  /\n* |   8ef3897 Merge pull request #3840 from Ichoran/issue/8638\n|\\ \\\n| |/\n|/|\n| * 36ef5c3 (origin/pr/3840) SI-8638  Empty UnrolledBuffer hangs on prepend.\n*   4dcb51c Merge pull request #3841 from Ichoran/issue/5200\n|\\\n| * 23ae5c4 (origin/pr/3841) SI-5200  Incorrect advice for implementing mutable.Set in scaladoc\n*   300d646 Merge pull request #3839 from Ichoran/issue/7115\n|\\\n| * 9ceab68 (origin/pr/3839) SI-7115  JMapWrapper.get can incorrectly return Some(null)\n*   6a1e592 Merge pull request #3834 from Ichoran/issue/7577\n|\\\n| * 1f53a0d (origin/pr/3834) SI-7577  Incorrect documentation: current default isn't Vector\n*   dd36e57 Merge pull request #3736 from VladimirNik/print-types-issue-2.11.x\n|\\\n| * e2fb217 (origin/pr/3736) TypeTree printing modified (SI-8447)\n*   c9ab6b6 Merge pull request #3772 from densh/si/8609\n|\\\n| * 56ed4fc (origin/pr/3772) SI-8609 Fix flattening of definitions and imports in quasiquotes\n*   17d56e4 Merge pull request #3863 from adriaanm/rebase-3852\n|\\\n| * b3c4e3a (origin/pr/3863) Document SuperAccessors\n|/\n*   2c08914 Merge pull request #3828 from retronym/ticket/8675\n|\\\n| * 5ba1290 (origin/pr/3828) SI-8675 Add another test case for swallowed type errors\n| * 7a16f76 SI-8675 Avoid unreported error after second try using implicit view\n*   e67146c Merge pull request #3836 from gourlaysama/wip/t8292\n|\\\n| * 5d63ef3 (origin/pr/3836) SI-8292 report error when scaladoc fails to find doclet.\n* 1feda98 Merge pull request #3849 from gourlaysama/wip/t8690\n* 4e29e9a (origin/pr/3849) SI-8690 BufferedSource.mkString mistakenly skipped the first char.\nmerge/2.11.x-to-2.12.x-20140714 ~/code/scala3 git merge origin/2.11.x\nMerge made by the 'recursive' strategy.\n```"
3876,'',"SI-8719 pattern expander errors and warnings now go through context\nThis ensures that typechecking custom unapplications in silent mode\r\ndoesn't leak uncatchable errors. Interestingly enough, the problem\r\nonly manifested itself for custom unapply methods, not for synthetic\r\nones generated for case classes."
3875,'','Fix encoding to show euro-sign of doc-source-url option correctly.\nVery little fix for [SI-8699](https://issues.scala-lang.org/browse/SI-8699 "SI-8699").\r\n\r\nreview @vladureche'
3874,'','SI-8590 Expand doc comments for ExecutionContext\n- link to Java API docs for ForkJoinPool-based default implementation\r\n- add example for creating an execution context from a `java.util.concurrent.ExecutorService`\r\n- add tags for parameters and return values'
3873,'','SI-8710 Fix crasher for value classes + private + overloading\nThe link between methods owned by a value class and the corresponding\nextension method in the companion is governed in part by a naming\nconvention that depends on how many eponymous decls exist. This is\neasiest to explain with an example:\n\n    % cat sandbox/test.scala && \\\n      qscalac -Xprint:extmethods sandbox/test.scala \\\n      | egrep \'class|object|def (foo|bar)|}$\'\n    class C(val x: Any) extends AnyVal {\n      def foo(a: Int) = ""\n      def foo(a: String) = ""\n      def bar(a: Byte)\n    }\n      final class C extends scala.AnyVal {\n        def foo(a: Int): String = C.foo$extension0(C.this)(a);\n        def foo(a: String): String = C.foo$extension1(C.this)(a);\n        def bar(a: Byte): Unit = C.bar$extension(C.this)(a);\n      }\n      <synthetic> object C extends AnyRef {\n        final def foo$extension0($this: C)(a: Int): String = "";\n        final def foo$extension1($this: C)(a: String): String = "";\n        final def bar$extension($this: C)(a: Byte): Unit = (<empty>.asInstanceOf[Unit]: Unit);\n      }\n      }\n    }\n\nNotice how the extension method names for `foo` are suffixed with\na counter. This logic is contained in `extensionNames`.\n\nHowever, in the enclosed test cases, when we call `extensionNames`\nin a late phase of the compiler, in particular during erasure when\nwe rewire `new C(x).foo(args)` to `C.foo$extensionN(x)(args)`, we\ncrash. Why? The private method in the value class has been name\nmangled by `ExplicitOuter`\'s use of `makeNotPrivate`, and we no longer\nappear to have multiple eponymous methods in play.\n\nWe could try to fix this by changing `extensionNames` to poke around\nthrough the scopes of the value class and its companion in a manner\ninsensitive to expanded names. This might look something like:\n\n    - info.decl(imeth.name)\n    + newOverloadedSymbol(info.decls.filter(sym => unexpandedName(sym) == unexpandedName(imeth.name))\n\nBut in fact we never need to expand the name of a private method in\nan value class, nor its corresponding companion, as:\n\n  * calls to private value class members end up as calls to public\n    extension methods\n  * extension methods already have a the `$extension[N]` suffix\n    and need no further mangling.\n\nThis commit:\n  - Resets `PRIVATE` and `LOCAL` when deriving the extension method\n  - Adds a special case to `ExplicitOuter` to imbue the special\n    knowledge that a call to `SomeValueClass#somePrivateMethod`\n    need not `makeNotPrivate`, as erasure will come along later\n    and rewire that to a (public) extension method.'
3872,'','Fix -Yno-adapted-args, it would just warn, not err\nreview by @soc'
3871,'','SI-8117 Fix bug when mixing well-positioned named and positional args\nThe method `missingParams` which returns undefined parameters of\r\na given invocation expression still assumed that named arguments can\r\nonly appear after positional ones.'
3870,'','SIP-24: Arbitrary idents and $" in interpolations\nAllow arbitrary identifiers to be interpolated using\r\nsimple syntax, including backquoted identifiers.\r\n\r\nIdentifiers containing a dollar sign must be backquoted.\r\n\r\nAccept `$"` for a literal quote.\r\n\r\n```\r\nscala> val foo = 42; val foo_ = 43; val foo_* = 44\r\nfoo: Int = 42\r\nfoo_: Int = 43\r\nfoo_*: Int = 44\r\n\r\nscala> s"$foo_*"\r\nres0: String = 44\r\n\r\nscala> s"$`foo`_*"\r\nres1: String = 42_*\r\n\r\nscala> val `a..z` = (0 until 26) map (\'a\' + _) map (_.toChar)\r\na..z: scala.collection.immutable.IndexedSeq[Char] = Vector(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)\r\n\r\nscala> s"ABCs: $`a..z`"\r\nres2: String = ABCs: Vector(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)\r\n\r\nscala> val foo$bar = 3\r\nfoo|: Int = 3\r\n\r\nscala> s"<$`foo$bar`"\r\nres3: String = <3\r\n\r\nscala> s"$"Don\'t quote me on that!$" he objected."\r\nres4: String = "Don\'t quote me on that!" he objected.\r\n```'
3869,'',"SI-8323 Erase constant types for better double-def checks\nHistorically, Constant Types in method signatures have not been\nerased. Rather, this was done in the backend.\n\nThis state of affairs leads to wrong decisions when the erasure\nphase makes decisions about whether a pair of methods will clash\nin bytecode.\n\nThis commit changes `ErasureMap` to take the underlying type of a\nconstant type.\n\nThis change obviates the fix for SI-4753, dcc07bd9f.\n\nI've added test to show that constants are still inlined.\n\nI believe this will answer the question in the backend about why\nexistential types make it that far; they come from the underlying\nof a constant type representing a class literal. I'll leave it to\n@lrytz to verify that the code in question is now dead and to remove\nit in his backend work.\n\nThis change should be binary compatible with 2.11.0. Even though we\nchanged erasure, the combination of erasure and bytecode generation\nlead to the same results.\n\nReview by @lrytz @gkossakowski\n\nI ran this patch by @odersky last Friday. He said it looks correct\nso long as we verify it doesn't affect behaviour of inlining. He\nshowed my some code in Dotty that actually followed the new approach.\n\nHowever, when I look at dotty master, I see that `ConstantTypes`\nare not erased: https://github.com/lampepfl/dotty/blob/master/src/dotty/tools/dotc/core/transform/Erasure.scala#L129.\n\nSo, clarification by @odersky, too."
3868,'adriaanm','Restore reporter forwarders in CompilationUnit\n'
3867,'',"SI-8708 Fix pickling of LOCAL_CHILD child of sealed classes\nWhen a sealed class or trait has local children, they are not pickled\r\nin as part of the children of the symbol (introduced in 12a2b3b to fix\r\nAladdin bug 1055). Instead the compiler adds a single child class\r\nnamed LOCAL_CHILD. The parents of its ClassInfoType were wrong: the\r\nfirst parent should be a class. For sealed traits, we were using the\r\ntrait itself.\r\n\r\nAlso, the LOCAL_CHILD dummy class was entered as a member of its\r\nenclosing class, which is wrong: it represents a local (non-member)\r\nclass, and it's a synthetic dummy anyway."
3866,'','SI-8677 Duration: Zero - Inf should be MinusInf\nFixes #8677. Add basic tests.\r\nThis is a backport from 2.12.x of dead39dc5f21c6eac41788e93426c50ddd398c24.'
3865,'','[backport] transformers no longer ignore UnApply.fun\nBackports 7122560063 and 4133eb8 from the 2.11.x branch'
3864,'','SI-8705   Added example to Option.contains method.\nI added code which described how to **Option.contains** method works.\r\n```scala\r\n// Returns true because Some instance contains string "something" which equals "something".\r\nSome("something") contains "something"\r\n\r\n// Returns false because "something" != "anything".\r\nSome("something") contains "anything"\r\n\r\n// Returns false when method called on None.\r\nNone contains "anything"\r\n```\r\n[SI-8705](https://issues.scala-lang.org/browse/SI-8705)'
3863,'','Document SuperAccessors\n[Rebase of #3852 on 2.11.x]\r\n\r\nAdded comment giving an up-to-date overview of SuperAccessors\r\nand how we might want to change it.'
3862,'','Refactored example to Option.collect method.\nAfter refactoring:\r\n```scala\r\n// Returns Some(HTTP) because the partial function covers the case.\r\nSome("http") collect {case "http" => "HTTP"}\r\n\r\n// Returns None because the partial function doesn\'t cover the case.\r\nSome("ftp") collect {case "http" => "HTTP"}\r\n\r\n// Returns None because None is passed to the collect method.\r\nNone collect {case value => value}\r\n```'
3861,'','Refactor example to Option.collect method\nRemove parentheses in example to **Option.collect** method.'
3860,'lrytz','[backport] SI-7710 fix memory performance of RegexParsers in jdk7u6+\nBackport of scala/scala-parser-combinators@91584dc.\r\n\r\nSee scala/scala-parser-combinators#17.\r\n\r\n---\r\n\r\nStarting with 1.7.0_06 [1], String.substring no longer reuses the internal\r\nchar array of the String but make a copy instead. Since we call\r\nsubSequence twice for *every* input character, this results in horrible\r\nparse performance and GC.\r\n\r\nWith the benchmark from the (duplicate) ticket SI-8542, I get:\r\n\r\nBEFORE:\r\n    parseAll(new StringReader(String))\r\n    For 100 items: 49 ms\r\n    For 500 items: 97 ms\r\n    For 1000 items: 155 ms\r\n    For 5000 items: 113 ms\r\n    For 10000 items: 188 ms\r\n    For 50000 items: 1437 ms\r\n    ===\r\n    parseAll(String)\r\n    For 100 items: 4 ms\r\n    For 500 items: 67 ms\r\n    For 1000 items: 372 ms\r\n    For 5000 items: 5693 ms\r\n    For 10000 items: 23126 ms\r\n    For 50000 items: 657665 ms\r\n\r\nAFTER:\r\n    parseAll(new StringReader(String))\r\n    For 100 items: 43 ms\r\n    For 500 items: 118 ms\r\n    For 1000 items: 217 ms\r\n    For 5000 items: 192 ms\r\n    For 10000 items: 196 ms\r\n    For 50000 items: 1424 ms\r\n    ===\r\n    parseAll(String)\r\n    For 100 items: 2 ms\r\n    For 500 items: 8 ms\r\n    For 1000 items: 16 ms\r\n    For 5000 items: 79 ms\r\n    For 10000 items: 161 ms\r\n    For 50000 items: 636 ms\r\n\r\n[1] http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6924259'
3859,'adriaanm',"[backport] SI-7470 implements fundep materialization\nBackports 21a8c6c from the 2.11.x branch under -Xfundep-materialization\r\nas per Miles Sabin's request. Thanks Miles!"
3858,'xeno-by','SI-8703 add support for blocks with just a single expression to quasiquotes\nPreviously it was impossible to match a block that was constructed as\r\n\r\n    Block(Nil, term)\r\n\r\nDue to the fact that quasiquotes always flatten those into just `term`. This is\r\na correct behavior for construction (for sake of consistency with parser) but\r\ndoing it in deconstruction mode make it impossible to match such blocks which\r\ncould have been constructed manually somewhere.\r\n\r\nTo fix this we just disable block flattening in deconstruction mode.\r\nInterestingly enough this doesn\'t break existing code due to the fact that\r\nquasiquote\'s block matcher also matches expressions as single-element blocks.\r\n\r\nThis allows to match single-element blocks with patterns like `q"{ $foo }"`.\r\n\r\nreview @retronym @xeno-by'
3857,'','Added example to Option.collect method.\nI added code which described how to **Option.collect** method works.\r\n```scala\r\n// Returns Some(HTTP) because the partial function covers the case.\r\nSome("http").collect({case "http" => "HTTP"})\r\n\r\n// Returns None because the partial function doesn\'t cover the case.\r\nSome("ftp").collect({case "http" => "HTTP"})\r\n\r\n// Returns None because None is passed to the collect method.\r\nNone.collect({case value => value})\r\n```'
3856,'','Add example to Option.collect method\nAdd example to Option.collect method like Option.orNull method.'
3855,'gkossakowski','Refactorings in GenBCode, remove Tracked\nNote 1: the first bunch of commits in this PR (the ones from June 22) is being reviewed in a separate PR (#3826), ignore them here.\r\n\r\nNote 2: the commits marked [squash-after-review] don\'t build (except for the last). They exist to make reviewing easier, I\'ll squash them into one before merging.\r\n\r\nFor the big commit ("Remove Tracked, ..."), I\'ll add some comments to the diff on GitHub.\r\n\r\nReview by @gkossakowski\r\n\r\n[`-Ybackend:GenBCode` build succeeded](https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/1255/)'
3854,'',"Exhaustiveness check for Java enums doesn't work when scalac uses the enum's source file\nTo reproduce:\r\n\r\n    $ ls\r\n    Bar.scala Foo.java\r\n\r\n    $ cat Foo.java \r\n    public enum Foo {\r\n        A,\r\n        B\r\n    }\r\n\r\n    $ cat Bar.scala \r\n    object Bar {\r\n        def baz(foo: Foo) = foo match {\r\n            case Foo.A => 1\r\n        }\r\n    }\r\n\r\n    $ scalac Foo.java Bar.scala\r\n\r\nNo warning here, even though the pattern match isn't exhaustive. If, however, the enum is compiled first and then excluded from `scalac` run, the warning is printed as expected.\r\n\r\n    $ javac Foo.java \r\n\r\n    $ scalac Bar.scala \r\n    Bar.scala:2: warning: match may not be exhaustive.\r\n    It would fail on the following input: B\r\n        def baz(foo: Foo) = foo match {\r\n                            ^\r\n    one warning found\r\n\r\n"
3853,'','Change StringContext scaladoc\nSee @e2a3498 for explanation'
3852,'adriaanm','Document SuperAccessors\nAdded comment giving an up-to-date overview of SuperAccessors\r\nand how we might want to change it. '
3851,'','Style guide for symbolic method names definitions\nHi!\r\n\r\nI found two styles:\r\n```scala\r\n// with space\r\ndef + (...)\r\n\r\n// without space\r\ndef +(...)\r\n```\r\nExamples with spaces: [in specs](https://github.com/scala/scala/blob/2.12.x/spec/12-the-scala-standard-library.md), [in library](https://github.com/scala/scala/blob/2.12.x/src/library/scala/Enumeration.scala#L200), [in Scala book](http://www.artima.com/pins1ed/functional-objects.html#6.9).\r\n\r\nExamples without spaces: [in auto-generated code](https://github.com/scala/scala/blob/2.12.x/src/library/scala/Byte.scala#L367), [in library](https://github.com/scala/scala/blob/2.12.x/src/library/scala/collection/immutable/ListSet.scala#L179).\r\n\r\nWhat style is correct?\r\n\r\nMaybe, add rule to the [style guide](http://docs.scala-lang.org/style/naming-conventions.html#symbolic_method_names)?'
3850,'retronym','add distinctBy method and implement distinct in terms of distinctBy\nadd distinctBy method to Seq (move it from scala-reflect) and implement distinct in terms of distinctBy\r\n\r\nreview by @Ichoran '
3849,'','SI-8690 BufferedSource.mkString mistakenly skipped the first char.\nmkString is overriden in BufferedSource for performance, but the\r\nimplementation always used the wrong reader. This seems to be a typo\r\n(`allReader` is declared 5 lines earlier but never used, `charReader`\r\nis used in its place).'
3848,'lrytz','SI-8680  Stream.addString is too eager\nUsed the standard method of sending out two iterators, one twice as fast as the others, to avoid hanging on .force, .hasDefiniteSize, and .addString.\r\n\r\n.addString appends a "..." as the last element if it detects a cycle.  It knows how to print the cycle length, but there\'s no good way to specify what you want right now, so it\'s not used.\r\n\r\nAdded tests in t8680 that verify that cyclic streams give the expected results.'
3847,'','Fail to Recover Remaining Tasks in BatchExecutor\nIn `scala.concurrent.BatchExecutor$Batch.run()` of Scala 2.11.1, if `head.run()` (line 63) throws a exception, remaining tasks will attempt to execute. But `require(_tasksLocal.get eq null)` at the beginning of the `Batch.run()` that is called recursively from `unbatchedExecute()` will always fail because it set the `Nil` to `_tasksLocal` here.\r\nThis hides the original cause. `_tasksLocal` should be `remove` because the remaining tasks are passed as an argument.\r\n\r\n```\r\njava.lang.IllegalStateException: problem in scala.concurrent internal callback\r\n\tat scala.concurrent.Future$InternalCallbackExecutor$.reportFailure(Future.scala:601)\r\n\tat scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:40)\r\n\tat scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:248)\r\n\tat scala.concurrent.Promise$class.complete(Promise.scala:55)\r\n\tat scala.concurrent.impl.Promise$DefaultPromise.complete(Promise.scala:153)\r\n\tat scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235)\r\n\tat scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235)\r\n\tat scala.concurrent.impl.CallbackRunnable.run(Promise.scala:32)\r\n\tat scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121)\r\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\r\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.pollAndExecAll(ForkJoinPool.java:1253)\r\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1346)\r\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\r\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\r\nCaused by: java.lang.IllegalArgumentException: requirement failed\r\n\tat scala.Predef$.require(Predef.scala:207)\r\n\tat scala.concurrent.BatchingExecutor$Batch.run(BatchingExecutor.scala:51)\r\n\tat scala.concurrent.Future$InternalCallbackExecutor$.unbatchedExecute(Future.scala:599)\r\n\tat scala.concurrent.BatchingExecutor$Batch$$anonfun$run$1.processBatch$1(BatchingExecutor.scala:72)\r\n\tat scala.concurrent.BatchingExecutor$Batch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:78)\r\n\tat scala.concurrent.BatchingExecutor$Batch$$anonfun$run$1.apply(BatchingExecutor.scala:55)\r\n\tat scala.concurrent.BatchingExecutor$Batch$$anonfun$run$1.apply(BatchingExecutor.scala:55)\r\n\tat scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72)\r\n\tat scala.concurrent.BatchingExecutor$Batch.run(BatchingExecutor.scala:54)\r\n\tat scala.concurrent.Future$InternalCallbackExecutor$.unbatchedExecute(Future.scala:599)\r\n\tat scala.concurrent.BatchingExecutor$class.execute(BatchingExecutor.scala:106)\r\n\tat scala.concurrent.Future$InternalCallbackExecutor$.execute(Future.scala:597)\r\n\t... 13 more\r\n```'
3846,'gkossakowski','moves the impl of quasiquotes to scala.reflect\nThis brings consistency with scala.reflect.reify and scala.reflect.macros\r\nalready existing in scala-compiler. To the contrast, scala.tools.reflect,\r\nthe previous home of quasiquotes, is a grab bag of various stuff without\r\nany central theme.'
3845,'retronym','relaxes attachment-matching rules\nIt came as a surprise recently, but attachments.contains/get/update/remove\r\nrequire the class of the payload to match the provided tag exactly, not\r\ntaking subclassing into account. This commit fixes the oversight.'
3844,'retronym','prevents c.internal.subpatterns from destroying rangeposes\nreview @retronym @densh'
3843,'','SI-8677 Duration: Zero - Inf should be MinusInf\nFixes #8677. Add basic tests.\r\n\r\nImproved from #3829.\r\nReview by @ichoran.'
3842,'adriaanm','SI-8335  List.++ avoidably burns memory\nChanged to check the identity of the CanBuildFrom instead of the identity of the generated builder to shortcut building.  Should reduce memory churn on ++ a little.'
3841,'','SI-5200  Incorrect advice for implementing mutable.Set in scaladoc\nFixed advice; it was already there in mutable.SetLike but a case sensitivity error kept it from appearing.'
3840,'adriaanm','SI-8638  Empty UnrolledBuffer hangs on prepend.\nTracked down bug to incorrect recursion in insertAll.  Fixed by adding a missing case (which incidentally will provide better performance when adding to the end of a block).\r\n\r\nNo specific tests, as this is caught by quasi-complete collections tests.'
3839,'',"SI-7115  JMapWrapper.get can incorrectly return Some(null)\nThis isn't actually a bug.  Trying to use a single-threaded interface in a concurrent context is supposed to break in various unpleasant ways.\r\n\r\nDocumentation has been added to encourage one to avoid wrapping a concurrent map in the generic wrapper (which assumes a single thread)."
3838,'',"Merge 2.11.x to 2.12.x\n```\n export MB=$(git merge-base origin/2.12.x origin/2.11.x)\nmerge/2.11.x-2.12.x-20140627 ~/code/scala3 git log --oneline --graph --decorate $MB..origin/2.11.x\n*   fbfce33 (origin/2.11.x) Merge pull request #3778 from xeno-by/topic/plugins-is-blackbox\n|\\\n| * a907887 (origin/pr/3778) adds MacroPlugin.pluginsIsBlackbox\n*   856fe4a Merge pull request #3780 from xeno-by/topic/rangepos-macro-args\n|\\\n| * fcb3932 (origin/pr/3780) macro args now correctly preserve range positions\n*   899ad4f Merge pull request #3835 from Ichoran/issue/7562\n|\\\n| * c51c5e1 (origin/pr/3835) SI-7562  Regex.findAllIn does not report all matches\n* |   e5964e2 Merge pull request #3832 from jrudolph/w/fix-tailrec\n|\\ \\\n| * | 299594e (origin/pr/3832) SI-8657 don't miss tailrec defs in more positions\n* | |   44f1029 Merge pull request #3749 from huitseeker/issue/DeprecWarning\n|\\ \\ \\\n| * | | cb6546e (origin/pr/3749) SI-8185 Correct grammar for single-warning compilation run\n|  / /\n* | |   400f28d Merge pull request #3758 from gourlaysama/wip/t7372\n|\\ \\ \\\n| |_|/\n|/| |\n| * | 4826d71 (origin/pr/3758) SI-7372 make binarySearch methods use the same parameters for the same things.\n| * | 85a2640 SI-7372 fix wrong insertion point for binary & linear search.\n|  /\n* |   0a67b3c Merge pull request #3806 from clhodapp/fix/SI-6967\n|\\ \\\n| * | 1a20152 (origin/pr/3806) SI-6967 Fix ClassTag unapply for primitives\n|  /\n* |   cb9d5ce Merge pull request #3805 from Ichoran/issue/6409\n|\\ \\\n| |/\n|/|\n| * 2ef1932 (origin/pr/3805) SI-6409  Stream flatMap leaks memory if mapper returns many empties\n*   1c0b48d Merge pull request #3824 from retronym/ticket/8672\n|\\\n| * 2238a85 (origin/pr/3824) SI-8672 Better end-of-sentence detection for Scaladoc\n|/\n*   b664a48 Merge pull request #3797 from retronym/topic/exhaust-compound\n|\\\n| * 78caf29 (origin/pr/3797) Remove now-redundant condition in sealedness checking\n| * 1ed2031 Refactor `enumerateSubtypes`\n| * ad9d87b SI-8631 Treat `A with Sealed` as enumerable for pattern matching\n*   a704678 Merge pull request #3781 from retronym/topic/8611\n|\\\n| * 7046d73 (origin/pr/3781) SI-8611 Avoid accidental patmat unification with refinement types\n* fdc3812 Merge pull request #3777 from som-snytt/issue/5905-test\n* 85af6f0 (origin/pr/3777) SI-5905 Clarify test case\nmerge/2.11.x-2.12.x-20140627 ~/code/scala3 git merge origin/2.11.x\n```"
3837,'Ichoran','SI-8686: scala.io.Source now implements java.io.Closeable\nallows users to write a single function for dealing with Input/Output\r\nstreams and Sources. It also allows Source to be used in\r\n"try-with-resources" statements in Java > 7.\r\n\r\nNo tests since this is a binary and source compatible change.'
3836,'','SI-8292 report error when scaladoc fails to find doclet.\n'
3835,'','SI-7562  Regex.findAllIn does not report all matches\nChanged findAllIn docs to clarify that it finds non-overlapping matches.'
3834,'',"SI-7577  Incorrect documentation: current default isn't Vector\nFixed documentation to specify List in four cases where it was wrong or missing."
3833,'','SI-8680 Avoid Stream evaluation when it is cyclic\nThe methods `addString` and `hasDefiniteSize` were too eagerly\r\nimplemented in case the Stream references itself and therefore contains\r\na cycle.\r\n\r\nOne example of such a Stream is\r\n\r\n    val s: Stream[Int] = 1 #:: 2 #:: 3 #:: s\r\n\r\nThe cycle detection is very simple. A reference to the head of the\r\nStream is stored and in the iteration to reach the end it is checked\r\nif this reference occurs again. If yes further evaluation is aborted.\r\n\r\nReview by @ichoran'
3832,'',"SI-8657 don't miss tailrec defs in more positions\n1) First operand of boolean expression using `&&` or `||`. Second operands of those boolean exprs were already treated specially here but handling for first operands was missing.\r\n2) Condition of `If`. Also added a test for guards."
3831,'',"SI-8657 don't miss tailrec defs in more positions\n1) First operand of boolean expression using `&&` or `||`. Second operands of\r\n   those boolean exprs were already treated specially here but handling for first\r\n   operands was missing.\r\n2) Condition of `If`.\r\n\r\nThis may be a candidate for backporting as well."
3830,'',"Add a FAQ on the repo workflow to CONTRIBUTING.md\nHello folks,\r\n\r\nI've been playing with scala repo for several months. Finding my way around was (and is) not an easy job. Watching @retronym, @xeno-by, @adriaanm, @paulp, @densh, @soc and others perform huge refactorings/changes is always amazing. How do they know where those things are? How do I even check that the thing I've just added does what I want it to?\r\n\r\nThe way I gathered information presented in this PR was by asking scala-internals and bothering people via email. I can imagine, this might be quite annoying – answering same newbie questions over and over again. Do you think it makes sense to have some centralized place to keep these kinds of tips? Does it make sense to have it here, or should this be somewhere under http://docs.scala-lang.org? There's a lot of unwritten folklore around this repo, and writing it down would certainly help people find their way around, and attract new contributors. It would definitely help me.\r\n\r\nNot sure about the format: my knowledge is very sparse here, so can be most easily presented as a FAQ. Just wanted to kick off the conversation and see if there are more people struggling with these kinds of things, or if I'm the only one having those problems.\r\n\r\nThanks."
3829,'','SI-8677 Duration: Zero - Inf should be MinusInf\nFixes #8677.\r\n(Extra tests still missing).\r\nTo be sure, this PR is just to get the "obvious" change built and run through basic tests.'
3828,'adriaanm',"SI-8675 Avoid unreported error after second try using implicit view\nThis is specific to situations in which we first typecheck an\napplication `qual.m(arg)` against the method `m` directly provided\nby `qual`, and then fall back to `implicitView(qual).m(arg)`.\n\nRegressed in SI-3971 / 7fa77af, in which error reports were moved\nto the innermost `Apply`, and the check for `errorInResult` was\naccordingly changed to recurse through `Apply` trees.\n\nBefore that change, we did not fall back to using a view. After the\nchange, we do try a view. We retypecheck the arguments under the\n`retyping` mode (see `tryTypedArgs`), but this doesn't seem to\nbe enough to avoid leaking the error typed nested trees from the\nfirst try.\n\nHere's an example from the enclosed test case:\n\n    a.update(0, x[A]({new isString(true)}))\n                                   `-- error typed\n\n    refArrayOps(a).update(0, x[A]({new isString(true)}))\n                             `                  `-- error type persists\n                              `-- this tree is retypecked by tryTypedArgs\n\nThis commit changes `onError` to only proceed with the second\ntry if the retyped argument trees are error free."
3827,'adriaanm','WIP: investigating SI-8069\n'
3826,'gkossakowski','Assortiment of cleanups and comments around the backend\n'
3825,'',"SI-8323 Erase constant types for better double-def checks\nHistorically, Constant Types in method signatures have not been\nerased. Rather, this was done in the backend.\n\nThis state of affairs leads to wrong decisions when the erasure\nphase makes decisions about whether a pair of methods will clash\nin bytecode.\n\nThis commit changes `ErasureMap` to take the underlying type of a\nconstant type.\n\nThis change obviates the fix for SI-4753, dcc07bd9f.\n\nReview by @lrytz @gkossakowski. This PR doesn't actually change\nerasure in a binary imcompatible way, so I think its a candidate\nfor 2.11.x"
3824,'','SI-8672 Better end-of-sentence detection for Scaladoc\nThe first sentence of a Scaladoc comment is parsed as the summary.\nHowever, this was breaking of the sentence at the first `.`, even\nif that was immediately followed by another character.\n\nThis commit only considers a period followed by whitespace, EOL or\nEOF as the end of a sentence.\n\nReview by @vladureche'
3823,'','Introduced Heterogeneous List.\n Introducing Heterogeneous List  could be a good step to improve the core library of scala. Sometime it is very useful when dealing with problems that requires TupleN without adding frameworks to a project which often contains a lot of unnecessary tools.'
3822,'Ichoran',"Mlbileschi update partial function documentation\nTo include the fact that the caller is responsible for checking 'isDefinedAt', except when using partial functions defined using {} and case statements."
3821,'adriaanm','Merge 2.11.x to 2.12.x\n'
3820,'gkossakowski','refactor error/warning reporting\nRefactor error/warning reporting to prepare making it configurable.\r\n\r\nreview by @gkossakowski (on hangout?)'
3819,'','Make comment consistent with code\nreview by @phaller'
3818,'','Java 8 support for run/repl-javap-app.check\nJust adding the java 8 output.\r\n\r\nNo attempt to finesse anything.\r\n\r\nBut the partest mechanism does still need auto-update of these\r\nconditional check files, plus expression evaluation of the condition.'
3817,'gkossakowski','SI-5919 TypeTags and Exprs should be serializable\n- Make TypeCreator and TreeCreator extend Serializable.\r\n- When replacing a SerializedTypeTag with a TypeTag or WeakTypeTag,\r\n  do not use scala.reflect.runtime.universe.rootMirror, since\r\n  it is unlikely to find user classes; instead, create a runtime\r\n  mirror using the context ClassLoader of the current thread.\r\n  Use the same logic for SerializedExpr.\r\n- Remove writeObject/readObject methods from SerializedTypeTag\r\n  and SerializedExpr since they are unused.\r\n- Add @throws annotation on writeReplace and readResolve methods.\r\n- Handle SecurityException if the current thread cannot access the\r\n  context ClassLoader.\r\n- To make type tags of primitive value classes serializable, make\r\n  PredefTypeCreator a top-level class. Otherwise, it would\r\n  retain a reference to the enclosing Universe,\r\n  rendering the TypeCreator non-serializable.'
3816,'','Don\'t crash on dead code in ICodeReader\nUnder `-Ybackend:GenBCode`, the scala compiler occasionally emits dead code, see discussion on PR #3726 for example.\r\n\r\nSuch a class file crashes ICodeReader. This was uncovered because under `-optimise`, the compiler switches to the ICode-GenASM pipeline, even if the `-Ybackend:GenBCode` flag is present.\r\n\r\nThere are multiple [tests that fail before](https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/1227/consoleFull) basically because the compiler emits inliner warnings ("could not inline") when the ICodeReader failed.'
3815,'lrytz',"Java 8 agnostism for our test suite\nContinuing on from @gkossakowski's work in #3404."
3814,'','This is a test of the new uber-build. Please ignore. No review. Do not merge\n'
3813,'',"Disable OSGi tests under Java 8\nI've lodged SI-8642 with more details of the failure to make sure we\nget them going again.\n\nReview by @lrytz\n\n/cc @jsuereth"
3812,'','Merge 2.10.x to 2.11.x\nOnly a whitespace conflict.'
3811,'','Fix emitting Array(1).clone() in GenBCode\n'
3810,'','Update AnyVals.scala\nCorrected api doc for >> operator to say it bit-shifts right rather than left, and fills the left bits rather than the right bits'
3809,'','Topic/invoke dynamic lambda\n'
3808,'','Merge 2.11.x into 2.12.x\n```\r\nlocalhost:scala luc$ git lg 2.12.x..2.11.x \r\n*   e671c08 - (upstream/2.11.x, 2.11.x) Merge pull request #3774 from lrytz/opt/backendWip (10 hours ago) <Lukas Rytz>\r\n|\\  \r\n| * ec3bcc2 - (origin/opt/backendWip, opt/backendWip) Unit tests for reflect/internal/Names (19 hours ago) <Lukas Rytz>\r\n| * 4b800a1 - Unit tests for new BType classes (19 hours ago) <Lukas Rytz>\r\n| * 3914e2b - Rewrite BType to a type hierarchy. (19 hours ago) <Lukas Rytz>\r\n| * 70d1790 - Move class BType to separate component, include it by composition. (11 days ago) <Lukas Rytz>\r\n| * 0f2bf1d - More cleanups and commenting in GenBCode (11 days ago) <Lukas Rytz>\r\n| * d190139 - Re-use the exsiting range of the name table when using subName. (11 days ago) <Lukas Rytz>\r\n| * 9d80fd0 - Cleanups in Names.scala (11 days ago) <Lukas Rytz>\r\n| * 805843d - Minor cleanups and commenting around BType. (11 days ago) <Lukas Rytz>\r\n| * 88d63f2 - Cleanups for tracing in GenBCode, improve some comments (11 days ago) <Lukas Rytz>\r\n*   da2896c - Merge pull request #3770 from retronym/ticket/8607 (3 days ago) <Grzegorz Kossakowski>\r\n|\\  \r\n| * 93bcff0 - SI-8607 Generalize previous change to preErase (12 days ago) <Jason Zaugg>\r\n| * 75c411c - SI-8607 Fix erasure for value class inheriting from private class (12 days ago) <Jason Zaugg>\r\n*   6c8a120 - Merge pull request #3791 from S11001001/ticket/8346 (4 days ago) <Ichoran>\r\n|\\  \r\n| * 9fc098d - SI-8346: Rebuild invariant sets in #toSet, avoiding CCE. (8 days ago) <Stephen Compall>\r\n* |   60a06a7 - Merge pull request #3735 from lefou/osgi-fix (5 days ago) <Adriaan Moors>\r\n|\\ \\  \r\n| * | 4483085 - Re-added the scala.util.parsing package import, with optional resolution. (3 weeks ago) <Tobias Roeser>\r\n| * | f4db4af - Refined package imports for scala modules. (4 weeks ago) <Tobias Roeser>\r\n| * | 5139316 - Add JavaSE-1.7 to set of required execution environments. (4 weeks ago) <Tobias Roeser>\r\n| * | 5679159 - Restrict Import-Package for scala.* (5 weeks ago) <Tobias Roeser>\r\n|  /  \r\n* |   5551cf6 - Merge pull request #3733 from retronym/topic/pr-3712-resubmit (6 days ago) <Jason Zaugg>\r\n|\\ \\  \r\n| * | 71cfb57 - SI-8475 Fix off by one in GroupedIterator when Streaming (3 weeks ago) <Jean-Remi Desjardins>\r\n|  /  \r\n* |   b20bb55 - Merge pull request #3794 from lrytz/t8625 (6 days ago) <Jason Zaugg>\r\n|\\ \\  \r\n| * | 7ecd98b - (origin/t8625, t8625) SI-8625 fix unreachability analysis for boolean expressions (6 days ago) <Lukas Rytz>\r\n* | |   159bade - Merge pull request #3782 from retronym/topic/opt-scope (6 days ago) <Jason Zaugg>\r\n|\\ \\ \\  \r\n| |/ /  \r\n|/| |   \r\n| * | 33446bd - Optimize enforcement of dependent method type restrictions (7 days ago) <Jason Zaugg>\r\n| * | 748ab30 - Fast path in Namer for methods without defaults (7 days ago) <Jason Zaugg>\r\n| * | 4aa10a1 - Optimize nested scope creation (7 days ago) <Jason Zaugg>\r\n| * | a6714f8 - Eliminate some N^2 performance in type checking (7 days ago) <Jason Zaugg>\r\n* | |   ae67245 - (origin/2.11.x) Merge pull request #3790 from retronym/ticket/8617 (8 days ago) <Lukas Rytz>\r\n|\\ \\ \\  \r\n| |_|/  \r\n|/| |   \r\n| * | bdf9195 - SI-8617 Avoid rangepos crash for OptManifest materializer (9 days ago) <Jason Zaugg>\r\n|/ /  \r\n* |   e948b39 - Merge pull request #3779 from adriaanm/2.11.1 (9 days ago) <Adriaan Moors>\r\n|\\ \\  \r\n| |/  \r\n|/|   \r\n| * 302bed0 - Bump version number to 2.11.2 (10 days ago) <Adriaan Moors>\r\n|/  \r\n* 9e79885 - Merge pull request #3766 from adriaanm/bump-version (10 days ago) <Adriaan Moors>\r\n* b6cea5f - Bump versions for Scala 2.11.1 (13 days ago) <Adriaan Moors>\r\nlocalhost:scala luc$\r\n```\r\n\r\nThe "Bump version number to 2.11." commit 302bed0 is not merged. b6cea5f on the other hand is.\r\n\r\n```\r\nlocalhost:scala luc$ git merge 9e79885\r\nMerge made by the \'recursive\' strategy.\r\n versions.properties | 12 ++++++------\r\n 1 file changed, 6 insertions(+), 6 deletions(-)\r\n\r\n\r\nlocalhost:scala luc$ git merge -s ours e948b39\r\nMerge made by the \'ours\' strategy.\r\n\r\n\r\nlocalhost:scala luc$ git df 2.12.x\r\ndiff --git a/versions.properties b/versions.properties\r\nindex 2fbd4c4..1212734 100644\r\n--- a/versions.properties\r\n+++ b/versions.properties\r\n@@ -1,10 +1,10 @@\r\n-#Wed, 16 Apr 2014 11:13:08 +0200\r\n+#Tue, 20 May 2014 10:01:37 +0200\r\n # NOTE: this file determines the content of the scala-distribution\r\n # via scala-dist-pom.xml and scala-library-all-pom.xml\r\n # when adding new properties that influence a release,\r\n # also add them to the update.versions mechanism in build.xml,\r\n # which is used by scala-release-2.11.x in scala/jenkins-scripts\r\n-starr.version=2.11.0\r\n+starr.version=2.11.1\r\n starr.use.released=1\r\n \r\n # These are the versions of the modules that go with this release.\r\n@@ -14,13 +14,13 @@ starr.use.released=1\r\n scala.binary.version=2.11\r\n # e.g. 2.11.0-RC1, 2.11.0, 2.11.1-RC1, 2.11.1\r\n # this defines the dependency on scala-continuations-plugin in scala-dist\'s pom\r\n-scala.full.version=2.11.0\r\n+scala.full.version=2.11.1\r\n \r\n # external modules shipped with distribution, as specified by scala-library-all\'s pom\r\n-scala-xml.version.number=1.0.1\r\n+scala-xml.version.number=1.0.2\r\n scala-parser-combinators.version.number=1.0.1\r\n-scala-continuations-plugin.version.number=1.0.1\r\n-scala-continuations-library.version.number=1.0.1\r\n+scala-continuations-plugin.version.number=1.0.2\r\n+scala-continuations-library.version.number=1.0.2\r\n scala-swing.version.number=1.0.1\r\n akka-actor.version.number=2.3.3\r\n actors-migration.version.number=1.1.0\r\n\r\n\r\nlocalhost:scala luc$ git merge 2.11.x\r\nRemoving src/compiler/scala/tools/nsc/backend/jvm/BCodeGlue.scala\r\nMerge made by the \'recursive\' strategy.\r\n bincompat-backward.whitelist.conf                               |   4 +\r\n bincompat-forward.whitelist.conf                                |   4 +\r\n build-ant-macros.xml                                            |   5 +\r\n src/build/bnd/scala-actors.bnd                                  |   2 +\r\n src/build/bnd/scala-compiler-doc.bnd                            |   3 +-\r\n src/build/bnd/scala-compiler-interactive.bnd                    |   3 +-\r\n src/build/bnd/scala-compiler.bnd                                |   4 +\r\n src/build/bnd/scala-continuations-library.bnd                   |   4 +-\r\n src/build/bnd/scala-continuations-plugin.bnd                    |   4 +-\r\n src/build/bnd/scala-library.bnd                                 |   1 +\r\n src/build/bnd/scala-parser-combinators.bnd                      |   4 +-\r\n src/build/bnd/scala-reflect.bnd                                 |   5 +-\r\n src/build/bnd/scala-swing.bnd                                   |   4 +-\r\n src/build/bnd/scala-xml.bnd                                     |   4 +-\r\n src/compiler/scala/tools/nsc/backend/icode/GenICode.scala       |  13 +-\r\n src/compiler/scala/tools/nsc/backend/jvm/AsmUtils.scala         |   8 +\r\n src/compiler/scala/tools/nsc/backend/jvm/BCodeBodyBuilder.scala |  91 ++++-----\r\n src/compiler/scala/tools/nsc/backend/jvm/BCodeGlue.scala        | 718 --------------------------------------------------------------------\r\n src/compiler/scala/tools/nsc/backend/jvm/BCodeHelpers.scala     |  96 ++++-----\r\n src/compiler/scala/tools/nsc/backend/jvm/BCodeIdiomatic.scala   | 139 +++++++------\r\n src/compiler/scala/tools/nsc/backend/jvm/BCodeSkelBuilder.scala |  25 +--\r\n src/compiler/scala/tools/nsc/backend/jvm/BCodeSyncAndTry.scala  |  17 +-\r\n src/compiler/scala/tools/nsc/backend/jvm/BCodeTypes.scala       | 171 ++++++++--------\r\n src/compiler/scala/tools/nsc/backend/jvm/BTypes.scala           | 416 +++++++++++++++++++++++++++++++++++++++\r\n src/compiler/scala/tools/nsc/backend/jvm/GenASM.scala           |   7 +-\r\n src/compiler/scala/tools/nsc/backend/jvm/GenBCode.scala         |  11 +-\r\n src/compiler/scala/tools/nsc/transform/Erasure.scala            |  12 +-\r\n src/compiler/scala/tools/nsc/transform/Mixin.scala              |   2 +-\r\n src/compiler/scala/tools/nsc/typechecker/Implicits.scala        |   2 +-\r\n src/compiler/scala/tools/nsc/typechecker/Namers.scala           |  20 +-\r\n src/compiler/scala/tools/nsc/typechecker/Typers.scala           |  11 +-\r\n src/library/scala/collection/Iterator.scala                     |   4 +-\r\n src/library/scala/collection/immutable/HashSet.scala            |   7 +\r\n src/library/scala/collection/immutable/ListSet.scala            |   7 +\r\n src/library/scala/collection/immutable/Set.scala                |  16 +-\r\n src/reflect/scala/reflect/internal/Names.scala                  | 106 +++++-----\r\n src/reflect/scala/reflect/internal/Scopes.scala                 |  24 +--\r\n src/reflect/scala/reflect/runtime/SymbolLoaders.scala           |   2 +-\r\n src/reflect/scala/reflect/runtime/SynchronizedOps.scala         |   3 +-\r\n test/files/neg/double-def-top-level.check                       |   7 +\r\n test/files/neg/double-def-top-level/A_1.scala                   |   4 +\r\n test/files/neg/double-def-top-level/B_2.scala                   |   2 +\r\n test/files/neg/double-def-top-level/C_3.scala                   |   2 +\r\n test/files/neg/double-def-top-level/D_3.scala                   |   2 +\r\n test/files/pos/t8617.flags                                      |   1 +\r\n test/files/pos/t8617.scala                                      |  10 +\r\n test/files/pos/t8625.scala                                      |   5 +\r\n test/files/run/analyzerPlugins.check                            |  13 +-\r\n test/files/run/t8346.check                                      |   6 +\r\n test/files/run/t8346.scala                                      |  34 ++++\r\n test/files/run/t8607.scala                                      |  36 ++++\r\n test/junit/scala/collection/IteratorTest.scala                  |  20 ++\r\n test/junit/scala/reflect/internal/NamesTest.scala               |  95 +++++++++\r\n test/junit/scala/reflect/internal/ScopeTest.scala               |  54 ++++++\r\n test/junit/scala/tools/nsc/backend/jvm/BTypesTest.scala         | 104 ++++++++++\r\n test/junit/scala/tools/testing/AssertUtil.scala                 |  17 +-\r\n 56 files changed, 1261 insertions(+), 1130 deletions(-)\r\n delete mode 100644 src/compiler/scala/tools/nsc/backend/jvm/BCodeGlue.scala\r\n create mode 100644 src/compiler/scala/tools/nsc/backend/jvm/BTypes.scala\r\n create mode 100644 test/files/neg/double-def-top-level.check\r\n create mode 100644 test/files/neg/double-def-top-level/A_1.scala\r\n create mode 100644 test/files/neg/double-def-top-level/B_2.scala\r\n create mode 100644 test/files/neg/double-def-top-level/C_3.scala\r\n create mode 100644 test/files/neg/double-def-top-level/D_3.scala\r\n create mode 100644 test/files/pos/t8617.flags\r\n create mode 100644 test/files/pos/t8617.scala\r\n create mode 100644 test/files/pos/t8625.scala\r\n create mode 100644 test/files/run/t8346.check\r\n create mode 100644 test/files/run/t8346.scala\r\n create mode 100644 test/files/run/t8607.scala\r\n create mode 100644 test/junit/scala/collection/IteratorTest.scala\r\n create mode 100644 test/junit/scala/reflect/internal/NamesTest.scala\r\n create mode 100644 test/junit/scala/reflect/internal/ScopeTest.scala\r\n create mode 100644 test/junit/scala/tools/nsc/backend/jvm/BTypesTest.scala\r\n```'
3807,'phaller','SI-8554 Two-arg remove throws exception on large count\nSI-8554  Two-arg remove throws exception on large count\r\n\r\nMade ArrayBuffer and BufferLike have same behavior, which is also consistent with single-arg remove.'
3806,'adriaanm','SI-6967 Fix ClassTag unapply for primitives\nThis pull request should make the unapply method on ClassTag work much better for primitives; It makes reflect.ClassTag.Int unapply (2: Any) work.'
3805,'adriaanm','SI-6409  Stream flatMap leaks memory if mapper returns many empties \nSI-6409  Stream flatMap leaks memory if mapper returns many empties          \r\n\r\nAdded Scaladoc explaining that this is necessary behavior, but closed ticket as'
3804,'',"SI-8634 Improve asSeenFrom handling of existentials\nReverts the change to `asSeenFrom`, b7b81ca28. The test from that\ncommit remains; it must have been fixed in the right place in\nthe meantime.\n\nThe error that we've shed in `run/t8634.scala` also looks like\na progression.\n\nReview by the build kitteh then by @adriaanm\n\nIf it seems like this is the right direction, I'll see about bisecting\nwhat changed in the meantime. It is probably worth dbuilding this one,\ntoo."
3803,'',"SI-8637 fixes toolbox phase corruption\nIt turns out, Toolbox.typecheck hasn't been properly re-initializing its state\r\nbetween requests.\r\n\r\nIn particular, globalPhase was left untouched, which made the compiler\r\nthink that it's past typer, and that in turn disabled implicits.\r\n\r\nThis commit applies a symptomatic fix to this problem."
3802,'',"Issue/8553\n SI-8553 WrappedArray throws exception on lastIndexWhere\r\n\r\nActually affected all of IndexedSeqOptimized: if the end (start?) index was at or beyond the length it'd try to index into it anyway.  No tests; this will be covered by quasi-comprehensive collections tests.\r\n\r\n"
3801,'gkossakowski','SI-8474  Inconsistent behavior of patch method\n SI-8474 Inconsistent behavior of patch method\r\n\r\nChanged Iterator to be consistent with other collections.\r\n\r\nAlso fixed SeqViewLike to validate/constrain inputs.\r\n\r\nNo specific tests; quasi-comprehensive collection tests will cover this later.'
3800,'','SI-8503 -version is info setting \nAnd the Scala runner exits with 0 for info settings.\r\n\r\n```\r\napm@mara:~$ javac -version 2> /dev/null\r\napm@mara:~$ echo $?\r\n0\r\napm@mara:~$ java -version 2> /dev/null\r\napm@mara:~$ echo $?\r\n0\r\napm@mara:~$ java -help 2> /dev/null\r\napm@mara:~$ echo $?\r\n0\r\napm@mara:~$ java -junk 2> /dev/null\r\napm@mara:~$ echo $?\r\n1\r\napm@mara:~$ skala -version\r\nScala code runner version 2.11.2-20140528-130424-c8f8782f6a -- Copyright 2002-2013, LAMP/EPFL\r\napm@mara:~$ echo $?\r\n0\r\napm@mara:~$ skalac -version\r\nScala compiler version 2.11.2-20140528-130424-c8f8782f6a -- Copyright 2002-2013, LAMP/EPFL\r\napm@mara:~$ echo $?\r\n0\r\napm@mara:~$ skalac -junk 2> /dev/null\r\napm@mara:~$ echo $?\r\n1\r\n```\r\nReview by @adriaanm in case this breaks one of his scripts\r\n'
3799,'',"SI-8596 Fix rangepos crasher with defaults, poly methods\nRegressed in SI-7915 / 3009a525b5\r\n\r\nWe should be deriving the position of the synthetic `Select`\r\nfrom `basefun1`, rather than `basefun`. In the new, enclosed\r\ntest, the difference amounts to:\r\n\r\n    new Container().typeParamAndDefaultArg[Any]()\r\n    `------------ basefun1 --------------'\r\n    `----------------- basefun ---------------'\r\n\r\nFor monomorphic methods, these are one and the same, which is\r\nwhy `presentation/t7915` was working. I've extended that test\r\nto a polymorphic method to check that hyperlink resolution works.\r\n\r\nReview by @dotta\r\n\r\nTargetting to 2.10.x as the regression was backported to 2.10.4"
3798,'',"Include scalap in the distro.\nI guess that shows how often this is used. No tweets complaining about it missing so far, but let's keep it in the distribution.\r\n\r\nReview by @lrytz."
3797,'retronym','SI-8631 Treat `A with Sealed` as enumerable for pattern matching\nEnumerate the subtypes of sealed parent types of refinement\ntypes, and filter those that conform to the refinement type.\n\nSuch types can crop up easily when LUB-bing case classes which\nadd `Product with Serializable` to the mix.'
3796,'','SI-8630 lineToString no longer long by one at eof\nOne more EOL crasher, or lack-of-EOL crasher, when the text\r\nis at EOF.\r\n\r\nIt was not caught by the last round of excellent and\r\nthorough tests because\r\n\r\n```\r\n// If non-whitespace tokens run all the way up to EOF,\r\n// positions go wrong because the correct end of the last\r\n// token cannot be used as an index into the char array.\r\n// The least painful way to address this was to add a\r\n// newline to the array.\r\n```\r\n\r\nReview by @retronym\r\n'
3795,'','SI-8475 GroupedIterator is also lazy when padded\nThis is the related case which dnlgtm in the previous fix.\r\n\r\nThe old code seems to be tilting for laziness, but we have\r\nto fill the buffer with the current group anyway, so there\r\nis no reason to be coy about calling ArrayBuffer.length.'
3794,'','SI-8625 fix unreachability analysis for boolean expressions\n'
3793,'','scalac 2.11.1 crash in GenASM\nThe scala compiler crashes with expressions of the form\r\n\r\n     ((a || ???) && (b || ???))\r\n\r\nwhere `???` is of type `Nothing` (i.e., throws an exception).\r\nThe Bug is *not* triggered by `(a || ???)`.\r\n\r\nA quick look at `scala.tools.nsc.backend.jvm.GenASM` indicates an undefined failure label:\r\n\r\n    2442: jcode.emitIF(cond.negate(), labels(failure))\r\n\r\nInstructions to reproduce:\r\n\r\n    uname -a\r\n    Linux fixpoint 3.14.4-1-ARCH #1 SMP PREEMPT Tue May 13 16:41:39 CEST 2014 x86_64 GNU/Linux\r\n\r\n    scalac -version\r\n    Scala compiler version 2.11.1 -- Copyright 2002-2013, LAMP/EPFL\r\n\r\n    cat CompilerBug.scala\r\n    object CompilerBug {\r\n      def test(a: Boolean, b: Boolean) = {\r\n        ((a || ???) && (b || ???))\r\n      }\r\n    }\r\n\r\n    scalac CompilerBug.scala\r\n    error: java.util.NoSuchElementException: key not found: 5\r\n            at scala.collection.MapLike$class.default(MapLike.scala:228)\r\n            at scala.collection.AbstractMap.default(Map.scala:59)\r\n            at scala.collection.mutable.HashMap.apply(HashMap.scala:65)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genJumpInstr$1(GenASM.scala:2442)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.scala$tools$nsc$backend$jvm$GenASM$JPlainBuilder$$genInstr$1(GenASM.scala:2484)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder$$anonfun$genBlock$1$2.apply(GenASM.scala:2199)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder$$anonfun$genBlock$1$2.apply(GenASM.scala:2185)\r\n            at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)\r\n            at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186)\r\n            at scala.tools.nsc.backend.icode.BasicBlocks$BasicBlock.foreach(BasicBlocks.scala:195)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genBlock$1(GenASM.scala:2185)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genBlocks$1(GenASM.scala:2124)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genCode(GenASM.scala:2718)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genMethod(GenASM.scala:1446)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genClass(GenASM.scala:1277)\r\n            at scala.tools.nsc.backend.jvm.GenASM$AsmPhase.emitFor$1(GenASM.scala:135)\r\n            at scala.tools.nsc.backend.jvm.GenASM$AsmPhase.run(GenASM.scala:141)\r\n            at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1625)\r\n            at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1610)\r\n            at scala.tools.nsc.Global$Run.compileSources(Global.scala:1605)\r\n            at scala.tools.nsc.Global$Run.compile(Global.scala:1703)\r\n            at scala.tools.nsc.Driver.doCompile(Driver.scala:34)\r\n            at scala.tools.nsc.MainClass.doCompile(Main.scala:23)\r\n            at scala.tools.nsc.Driver.process(Driver.scala:55)\r\n            at scala.tools.nsc.Driver.main(Driver.scala:68)\r\n            at scala.tools.nsc.Main.main(Main.scala)\r\n    Exception in thread "main" java.util.NoSuchElementException: key not found: 5\r\n            at scala.collection.MapLike$class.default(MapLike.scala:228) \r\n            at scala.collection.AbstractMap.default(Map.scala:59)\r\n            at scala.collection.mutable.HashMap.apply(HashMap.scala:65)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genJumpInstr$1(GenASM.scala:2442)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.scala$tools$nsc$backend$jvm$GenASM$JPlainBuilder$$genInstr$1(GenASM.scala:2484)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder$$anonfun$genBlock$1$2.apply(GenASM.scala:2199)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder$$anonfun$genBlock$1$2.apply(GenASM.scala:2185)\r\n            at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)\r\n            at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186)\r\n            at scala.tools.nsc.backend.icode.BasicBlocks$BasicBlock.foreach(BasicBlocks.scala:195)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genBlock$1(GenASM.scala:2185)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genBlocks$1(GenASM.scala:2124)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genCode(GenASM.scala:2718)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genMethod(GenASM.scala:1446)\r\n            at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genClass(GenASM.scala:1277)\r\n            at scala.tools.nsc.backend.jvm.GenASM$AsmPhase.emitFor$1(GenASM.scala:135)\r\n            at scala.tools.nsc.backend.jvm.GenASM$AsmPhase.run(GenASM.scala:141)\r\n            at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1625)\r\n            at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1610)\r\n            at scala.tools.nsc.Global$Run.compileSources(Global.scala:1605)\r\n            at scala.tools.nsc.Global$Run.compile(Global.scala:1703)\r\n            at scala.tools.nsc.Driver.doCompile(Driver.scala:34)\r\n            at scala.tools.nsc.MainClass.doCompile(Main.scala:23)\r\n            at scala.tools.nsc.Driver.process(Driver.scala:55)\r\n            at scala.tools.nsc.Driver.main(Driver.scala:68)\r\n            at scala.tools.nsc.Main.main(Main.scala)\r\n'
3792,'adriaanm','SI-8525 -Xlint:nowarn-missing-interpolator\nTurn warn-missing-interpolator into an -Xlint choice. Allow choice negation with prefix "no".  Refactor choice logic from MultiString to MultiChoice. Update set of choices all together.\r\n\r\nThe mechanism between MutableSettings and concrete settings could be further over-engineered. Rube Goldberg is occupied on another project at the moment.  For instance, no easy way to override `def wildcards = choices // filter (!_.isSetByUser)`.\r\n\r\nDepends on #3776\r\n\r\nReview by @retronym as follow-up to #3776 '
3791,'',"SI-8346 Rebuild invariant sets in #toSet, avoiding CCE\nSI-3953 caused several types of sets' operations to trivially throw `ClassCastException` after using inherited covariant #toSet method, by doing an unchecked cast that is only safe for intrinsically covariant set data structures like `HashSet`, but totally unsafe for others like `TreeSet` or `Enumeration.ValueSet`.\r\n\r\nThis change moves the cast to the leaves of the class hierarchy where that is safe, and incidentally undeprecates overriding Set#toSet.\r\n"
3790,'','SI-8617 Avoid rangepos crash for OptManifest materializer\nThe tree to create a `NoManifest` was unpositioned.\r\n\r\nReview by @lrytz\r\n\r\nAs seen in a -Yrangepos [run](https://jenkins-dbuild.typesafe.com:8499/job/Community-2.11.x-manual/26/consoleFull) of the community build.'
3789,'',"SI-6678 Make currentMirror macro hygenic\nI was bitten by the lack of hygiene here, so I thought I'd submit a patch."
3788,'retronym','SI-8494 Restore filtering javap output\nRegressed in support for new delayedEndPoint, where it must\r\npick what to filter for.\r\n\r\n`s/claas/klass/` and similar.\r\n\r\nReview by @retronym who had to manually snip some output, to my chagrin'
3787,'','Add documentation to parts of scala.concurrent.\n'
3786,'','Deprecate fixes for 2.11.x\n'
3785,'','To have effect, @deprecated needs to be an annotation.\n'
3784,'',"Add documentation to parts of scala.concurrent.\nSmall doc nits for stuff historically not documented. If you'd like this in 2.11.x, I'll cherry-pick and submit a pull for that too."
3783,'',"To have effect, @deprecated needs to be an annotation.\nThis was intended to be deprecated in 2.11.0 based on the commit and text, but apparently wasn't.\r\n\r\nI don't know whether this can still be pulled into the 2.11 branch or not, but if this was the intent, it should be pulled there as well as 2.12.x; otherwise, I'll resubmit with 2.12.0 as the deprecation version."
3782,'','Compiler optimizations for Scopes, checkDoubleDefs, Namer\nResubmission of #3771, adds a unit test for Scope and\r\nfixes the boostrap error from the previous attempt.\r\n\r\nReview by @gkossakowski '
3781,'adriaanm',"SI-8611 Avoid accidental patmat unification with refinement types\nIn the enclosed test, t8611a.scala, the patterns `O.{A, B}` were\r\nincorrect treated as equivelent by the combination of\r\n`uniqueTpForTree` and `Const.uniqueTpForTree`.\r\n\r\n`uniqueTpForTree` used `Type#narrow` to try to create a distinct\r\ntype for each new pattern tree it encountered. However, narrowing a\r\n`RefinedType` does not create a distinct type as we are used to\r\nwhen narrowing, e.g. a class type.\r\n\r\n    // Type\r\n    def narrow: Type =\r\n      if (phase.erasedTypes) this\r\n      else {\r\n        val cowner = commonOwner(this)\r\n        refinedType(this :: Nil, cowner, EmptyScope, cowner.pos).narrow\r\n      }\r\n\r\n    // CompoundType\r\n    override def narrow: Type = typeSymbol.thisType\r\n\r\nThis commit first tries to use `narrow`, and then detects if the\r\nresult shares a type symbol with the input. If so, it compensates\r\nby creating another refinement type over the result and narrows that.\r\n\r\nI've included a unit test to show the subtleties of narrowing refinements.\r\n\r\nReview by @adriaanm. I'm hoping you can find a less ugly way to do this!"
3780,'retronym',"macro args now correctly preserve range positions\nSomewhen in the 2.11.0 development cycle we started duplicating macro arguments\r\nfor increased robustness. What wasn't taken into account though is that\r\nTree.duplicate destroys range positions. This commit fixes the problem.\r\n\r\n2.10.x is unaffected by this bug, because it doesn't duplicate the args yet."
3779,'','Bump version number to 2.11.2\nreview by @xeno-by'
3778,'retronym','adds MacroPlugin.pluginsIsBlackbox\nThis is an important omission in the current macro plugin API, which was\r\ndesigned before the blackbox vs whitebox separation was implemented.\r\n\r\nEven if one overrides pluginsTypedMacroBody and pluginsMacroExpand,\r\nthat would still be not enough to write a custom macro expander, because\r\ntypedImplicit1 uses isBlackbox, which is tightly coupled with the standard\r\nway of reading/writing macro signatures.'
3777,'retronym','SI-5905 Clarify test case\nThe language feature options are discovered reflectively, but it\r\nis nice to enforce that expected options are supplied.\r\n\r\nShort of that, the code string includes a rowdy postfix operator.\r\n\r\nIt still does enforce that at least one option was discovered.\r\n\r\n(Resubmittal.)\r\n\r\nReview by @retronym since this is in response to previous minor feedback from him.'
3776,'adriaanm','SI-8610 -Xlint is multichoice option\nMake -Xlint a "multichoice" option for purposes of option parsing.\r\n\r\nThis allows turning on "lint with these warnings" instead of only\r\n"turn off these warnings but enable other lint warnings".\r\n\r\n```\r\n$ scalac -Xlint:warn-adapted-args linty.scala  # lint plus a warning\r\n$ scalac -Xlint warn-adapted-args linty.scala  # same\r\n$ scalac -Xlint linty.scala                    # same as now\r\n$ scalac -Xlint -- linty.scala                 # ok, not necessary\r\n$ scalac -Xlint _ -- linty.scala               # another funky underscore\r\n```\r\n\r\nThis would also enable Xlint options that are not standalone options,\r\nalthough that is not implemented in this commit.  For example,\r\n`-Xlint:no-missing-interpolator` could be used to disable that\r\nwarning. (There is no `-Xoption:flavor=off` syntax.) (`no-` switches\r\nwould not be enabled by `_`.)\r\n\r\nReview by @retronym who has expressed opinions about the warning group conundrum\r\n'
3775,'',"PagedSeqReader\n```\r\n/** Returns a PagedSeqReader consisting of all elements except the first\r\n   *\r\n   * @return If `atEnd` is `true`, the result will be `this`;\r\n   *         otherwise, it's a `PagedSeqReader` containing the rest of input.\r\n   */\r\n  def rest: PagedSeqReader =\r\n    if (seq.isDefinedAt(offset)) new PagedSeqReader(seq, offset + 1)\r\n    else this\r\n```\r\n\r\nThe PagedSeqReader rest operation creates a new PagedSeqReader for every rest call. When processing n data len it causes heap crashes unless the looped variable is reassigned to the newly created PagedSeqReader and GC executes in a reasonably immediate time. If that is the rule of the operation then it should be stated in the comments, so that a user can develop accordingly. Otherwise this should just return a copy of itself with the pointer incremented."
3774,'','More type safe implementation of BType, cleanups in GenBCode\nMore type safe `BType` implementation. Various cleanups in the `GenBCode` backend. Also some cleanups and clarifications in `Names`. More details in the individual commit messages.\r\n'
3773,'','Merge 2.11.x into 2.12.x\nThe last commit fixes the failing test in https://scala-webapps.epfl.ch/jenkins/job/scala-integrate-2.11.x-to-2.12.x/87/console'
3772,'retronym','SI-8609 Fix flattening of definitions and imports in quasiquotes \nQuasiquotes allow to unquote trees with ..$ with block flattening\r\nsemantics to simplify composition:\r\n```\r\n  val onetwo = q"1; 2"\r\n  val onetwothree = q"..$onetwo; 3" // same as q"1; 2; 3"\r\n```\r\nIf there is no block it will be equivalent to $ unquoting:\r\n```\r\n  val one = q"1"\r\n  val onetwo = q"..$one; 2" // same as q"1; 2"\r\n```\r\nBut the inconsistency here is that currently only terms support\r\nthis single-element semantics. This commit extends this functionality\r\nto also support definitions and imports. So that following code works:\r\n```\r\n  val q1 = q"val x = 1"\r\n  val q2 = q"..$q1; val y = 2" // same as q"val x = 1; val y = 2"\r\n```\r\nreview @retronym @xeno-by'
3771,'','Compiler optimizations for Scopes, checkDoubleDefs\nStarting with the most valuable commits from:\n\n  https://github.com/retronym/scala/compare/topic;opt20\n\nReview by @gkossakowski'
3770,'',"SI-8607 Fix erasure for value class inheriting from private class\nDetails in the commits.\n\nHere's the full diff of scalac logging output to explain\nhow we led into the crash:\n\n   https://gist.github.com/retronym/e533b3f35d6b5288c36b"
3769,'xeno-by','SI-8608 f interpolator emits plain old strings\nWhen invoking `format` is obviated by a lack of\r\nformatting fields, then just degenerate to an\r\nunenhanced string.\r\n\r\nThis means it doesn\'t cost anything to use\r\nf"$$ordinary" in place of "$ordinary", which\r\nmay cause warnings under -Xlint.\r\n\r\nNote that certain format literals, in particular\r\nfor line separator %n, are not actually literals and\r\ncan\'t be replaced at compile time.\r\n\r\nReview by @xeno-by for macro expertise'
3768,'densh',' SI-6476 Improve error on escapement\nBehavior of escape processing under string interpolation can\r\nbe confusing.  This PR improves the exception message so\r\nyou know at least what sort of escapes are handled.\r\n```\r\nscala> s"\\d".r\r\nscala.StringContext$InvalidEscapeException: invalid escape \'\\d\' not one of [\\b, \\t, \\n, \\f, \\r, \\\\, \\", \\\'] at index 0 in "\\d". Use \\\\ for literal \\.\r\n\r\nscala> s"a\\"\r\nscala.StringContext$InvalidEscapeException: invalid escape at terminal index 1 in "a\\". Use \\\\ for literal \\.\r\n\r\nt6476-bad-esc-d.scala:3: error: \';\' expected but string literal found. (A trailing \'\\\' escapes nothing. Use \\\\, $$ or $" for literal \\, $ or ".)\r\n  def f = s"\\"abcdef\\""\r\n                     ^\r\n```\r\nAlso enable $" under -Xfuture. This is the same as retronym\'s tweak,\r\nbut puts it under `-Xfuture` until the ecosystem catches up.\r\n\r\nAlso give the parser enough knowledge of `s` and `f`\r\nto emit an error on the puzzling badly escaped\r\nquote.  The error is emitted as supplemental\r\nadvice when a subsequent syntax error is encountered,\r\nsuch as an unclosed literal.\r\n\r\nThe mechanism is non-ideal but serves to mitigate the pain of\r\nmany users from us hoi polloi all the way up to paulp.  Hoi paulpoi.\r\n\r\nThese are the remaining commits from #3695.\r\n\r\nReview by @retronym'
3767,'',"Upgrade ASM to 5.0.2\nThis commit is a squashed version of all commits in PR #3747.\r\n\r\nFor future upgrades, consult the README and check the commits in\r\nhttps://github.com/scala/scala/pull/3747/commits\r\n\r\nThere's one bug in ASM 5.0.2 that breaks scalac:\r\nhttp://forge.ow2.org/tracker/?func=detail&aid=317200&group_id=23&atid=100023\r\n\r\nThis bug is fixed in ASM trunk, the patch has been merged into this\r\ncommit. A future upgrade of ASM should contain the fix."
3766,'','Bump versions for Scala 2.11.1\n'
3765,'','Reining on over eager optimizations (take 2)\nThis time I allow elimination of dead, non-static loads\nof closure classes.\n\nReview by @lrytz @dragos @gkossakowski'
3764,'adriaanm',"SI-8597 Issue an elusive unchecked warning\nFor:\r\n\r\n```scala\r\ndef nowarn[T] = (null: Any) match { case _: Some[T] => }\r\n```\r\n\r\nReview by @adriaanm. I'll be out your way on Wedsneday, let's\r\nrun through this together then.\r\n\r\nSee also a followup issue that I lodged as SI-8604."
3763,'','Revert #3760\nThis should be delayed until 2.11.2. Review by @retronym'
3762,'',"Bump akka-actor version to 2.3.3 (ref SI-8549)\nBecause serialization affected akka, we're upgrading the included\r\nakka-actor to 2.3.3, which is built with Scala 2.11.1.\r\n\r\nReview by @retronym"
3761,'','SI-8507 Avoid lazy val in StringContext\nThis mild refactor eliminates the lazy val StringBuilder\r\nand arguably makes the code easier to read.\r\n\r\nThere is a small unit test but no benchmark to prove\r\nanything useful about performance. The ticket notes\r\ncontention due to lazy implementation.\r\n\r\nThis is the first commit from #3695. \r\n\r\nReview by @retronym '
3760,'','SI-8601 Reining back over-eager optimizations.\nThis started when I found a failing test in a run of the\ncommunity build with `-optimize`. That test intentionally\ntriggered `1/x` with `x == 0` to test error handling, but\nthis was eliminated by `-Ydead-code`.\n\nI then went through the rest of the JVM instruction set\nand found more bugs of the same category.\n\nThe deletion of the peephole optimization of `[LOAD_FIELD, DROP]`\nis worth discussion here.'
3759,'retronym','SI-8599 Improve type variable inference in nested matches\nRefine the upper and lower bounds independentally, rather than\nbailing out if `!(lo1 <:< hi1)`.\n\nBefore, the enclosed test case traced out as follows:\n\n```\ninferTypedPattern\n-----------------------------------\npattpt   = RefinementTest.Child[c]\npt       = RefinementTest.Parent[a]\nptparams = [type a]\nptvars   = [=?(?c, ?c)]\nptvars foreach instantiateTypeVar\n\n  instantiateTypeVar\n  -----------------------------------\n  tvar  = =?(?c, ?c)\n  tb0   =  >: A <: A\n  instBounds(tvar)\n\n    instBounds\n    -----------------------------------\n    loBounds   = [(c, c)]\n    hiBounds   = [(c, c)]\n    tparam     = type a\n    val TypeBounds(lo, hi) = tparam.info.bounds\n    lo         = A\n    hi         = A\n    lub(A :: (c, c) :: Nil) = Any\n    glb(A :: (c, c) :: Nil) = A with (c, c)\n    result = >: Any <: A with (c, c)\n\n  lo1   = Any\n  hi1   = A with (c, c)\n  if (! (lo1 <:< hi1) )\n   log(s"inconsistent bounds: discarding TypeBounds($lo1, $hi1)")\n```\n\nSo because we haven\'t yet refined the info of `a`, it still appears\ndistinct from `(c, c)`, and the LUB is `Any`. Based on this, we\ndon\'t proceed to refine the type.\n\nThis commit changes the process to individually retain or discard\nthe low and high bounds, which is enough to tie the knot here.'
3758,'Ichoran','SI-7372 fix wrong insertion point for binary & linear search.\nIt should return the position the value would have if it was a part of\r\nthe sequence. Somehow even the test was wrong.'
3757,'retronym','List extends scala.Serializable\nList should extend scala.Serializable, not java.io.Serializable. Because of `import java.io._` java.io.Serializable has higher priority than scala.Serializable which is not good (Personally I found this problem not being able to pass List as an argument of type scala.Serializable). \r\n\r\nThis is clearly a bug.'
3756,'','SI-8591 Scaladoc: Problem with scrolling under Safari on iOS\nSee #3755 for details.'
3755,'',"SI-8591 Scaladoc: Problem with scrolling under Safari on iOS\nThis PR resolves some 'small but snippy' problem with scrolling scaladoc contents under Safari on iOS.\r\n\r\nTo ease reviewing my changes, I've published two versions of generated documentation:\r\n\r\n1. Version without fix (you can't scroll the right frame): http://scaladoc-permalinks.herokuapp.com/index.html#scalaz.CoyonedaInstances0@finalize():Unit\r\n\r\n2. Version with CSS fix: http://scaladoc-ios.herokuapp.com/index.html#scalaz.CoyonedaInstances0@finalize():Unit\r\n\r\nMy branch came out from 2.12.x but I can rebase it if needed.\r\n\r\nI've signed Scala CLA.\r\n\r\nOT: I regret that I didn't fix it before I finished reading 'scala puzzlers' - exploring scaladocs would be then much more comfortable. Maybe it's worth to publish this fix before that book will be published? There is not so much to review.."
3754,'','Runtime stackoverflow due to implicit resolution\nWhen i create a value and call it like this:\r\n```scala\r\nval evidenceStr2Long: String => Long = _.toLong\r\nevidenceStr2Long("42")\r\n```\r\n\r\nit works fine, but if it declared as implicit val it crashes with StackOverflowException calling to itself, at least reason is not obvious\r\n```scala\r\nimplicit val evidenceStr2Long: String => Long = _.toLong\r\nevidenceStr2Long("42")\r\n```\r\n\r\nreproducible in 2.11.0 REPL, Java 1.7_55 HotSpot\r\n'
3753,'retronym',"SI-5920 enables default and named args in macros\nHopefully third time's a charm. review @retronym"
3752,'Ichoran','SI-8589 Performance improvement for ArrayCharSequence.toString\nWhile using a csv parser to process large char arrays i ran into the problem that the toString method of ArrayCharSequence was very slow on large buffers (and, as it appears, also on small buffers)\r\nThe problematic method:\r\noverride def toString = xs drop start take length mkString ""\r\n\r\nI created a faster version which is already almost 50% faster on an empty charsequence and only becomes relatively faster when the array gets bigger.\r\n\r\nSee https://issues.scala-lang.org/browse/SI-8589'
3751,'','SI-8589 Performance improvement for ArrayCharSequence.toString\nWhile using a csv parser to process large char arrays i ran into the problem that the toString method of ArrayCharSequence was very slow on large buffers (and, as it appears, also on small buffers)\r\nThe problematic method:\r\noverride def toString = xs drop start take length mkString ""\r\n\r\nI created a faster version which is already almost 50% faster on an empty charsequence and only becomes relatively faster when the array gets bigger.\r\n\r\nSee https://issues.scala-lang.org/browse/SI-8589'
3750,'','SI-8589 Performance improvement in scala.runtime.ArrayCharSequence.toString\nWhile using a csv parser to process large char arrays i ran into the problem that the toString method of ArrayCharSequence was very slow on large buffers (and, as it appears, also on small buffers)\r\nThe problematic method:\r\noverride def toString = xs drop start take length mkString ""\r\n\r\nI created a faster version which is already almost 50% faster on an empty charsequence and only becomes relatively faster when the array gets bigger.\r\n\r\nSee https://issues.scala-lang.org/browse/SI-8589'
3749,'retronym','SI-8185 Correct grammar for single-warning compilation run\nThis is a re-issue of #3419\r\n\r\n50-odd updated tests (!)\r\nreview by @retronym\r\n'
3748,'',"SI-8587 Explicitly document forall/exists for empty collections\nThis behaviour isn't always intuitive for newcomers.\n\nAlso changes inadvertant doc comment to an impl. comment."
3747,'','Upgrade ASM to 5.0.2\nChange log: http://asm.ow2.org/history.html\r\n - Support for Java 8 annotations (on types and method parameters)\r\n - Fixes for stack map frames generation, maxLocals calculation\r\n\r\nThe initial commit in this PR resets all our customizations and is just a 1:1 copy of the asm\r\nsource tree. This simplifies future upgrades, see README.\r\n\r\nThe build will fail for all the intermediate commits. I can squash them to generate fewer failures,\r\nbut I think it would be good to keep at least those with [asm-cherry-pick].\r\n'
3746,'','Deprecation of @BeanInfo\n'
3745,'','SI-8582 emit InnerClasses attribute in GenBCode\nIt seems it was simply forgotten, the `InnerClasses` attribute is emitted for mirror classes and bean info classes.\r\n\r\nI removed the `-bcode` test since we have a build that passes `-Ybackend:GenBCode` to all tests.\r\n\r\nReview by @retronym.'
3744,'','SI-8582 Pending test for InnerClasses bug in GenBCode\nAs seen in a runtime reflection failure in Slick during a GenBCode\nenabled run of our beloved Community Build.'
3743,'',"SI-8553 WrappedArray throws exception on lastIndexWhere when index out of range\nAdds a check in `IndexedSeqOptimized#lastIndexWhere(A => Boolean, Int)` to begin searching in the end of the collection if `end` is greater than the collection's length.\r\n\r\nDiscussed in https://groups.google.com/d/topic/scala-internals/-MacXivbY0Q/discussion."
3742,'','SI-8578 Avoid fresh name clashes under -Ydelambdafy:method\nReview by @lrytz'
3741,'retronym','SI-6778 scala.math.random should have parenthesis\nAdded parenthesis to scala.math.random because it has side-effects on\r\nthe seed.'
3740,'',"Make PartialFunction.OrElse extend AbstractPartialFunction.\nThis shaves a few kB off of the generated class file.\r\n\r\nGoes along with the various other micro-optimizations using Abstract* under the hood. The class itself is private, so this doesn't expose any new API."
3739,'','SI-8576 Temporarily disable part of serialization test\nParts of this test fail if testing a library built with -Xcheckinit.\n\nThe failures seem to be in two categories:\n\n  - A component of the serialized structure does not have a\n    declared SerialVersionUID, meaning that the extra field\n    added to track initialization results in a different ID.\n    This manifests as a `java.io.InvalidClassException` when\n    deserializing the blobs of data saved in the test case.\n  - Spurious `UnitializedFieldErrors` when calling methods on\n    the object that has been serialized and then deserialized.\n\nUntil we figure out the right course of action (more @SerialVersionUID\nannotations / weaker tests / ...), this commit disabled those tests.\n\nReview by @lrytz'
3738,'adriaanm','SI-8574 Copy @SerialVersionUID, etc, to specialized subclasses\nThe test case demonstrates that this is important for serialization\nand for strictfp. (Although the latter is still pretty broken,\nsee SI-7954.)'
3737,'','@inline Predef.identity[A].\nThis is a bytecode micro-optimization, but I don\'t see any issues with including it.\r\n\r\nIt helps in the case of something like:\r\n\r\ndef foo(a: (A)=>A): ...\r\n\r\nfoo(identity[A] _)\r\n\r\nCommit text:\r\n===\r\nSince identity[A] is often used as a function directly supplied to\r\nmethods requiring (A)=>A, there\'s no need to have the generated\r\nFunction1 object contain an explicit call to identity[A].\r\n\r\nThis implementation isn\'t going to change, so let the synthetic\r\nFunction1 elide the extra call, generating just "aload_1; areturn".'
3736,'xeno-by','SI-8447 fix TypeTree printing (2.11.x)\nAdded TypeTree printing based on tpe to CodePrinter (if original is not available) - [SI-8447](https://issues.scala-lang.org/browse/SI-8447)\r\n\r\nPrevious [version](https://github.com/scala/scala/pull/3710) of this pull request'
3735,'','OSGi: Restrict Import-Package for scala.*\nRestrict the Import-Package OSGi manifest entry to match only binary compatible scala.* packages. This is necessary, because the Scala OSGi versions do not match the OSGi semantic versioning policy and are not binary compatible between their OSGi minor versions. This means that e.g. the scala-compiler-2.11 bundle will never work if it imports a scala.* package from 2.10 or 2.12. Thus this patch enforces a tight version range, only accepting versions within the same minor version. E.g. Applied to version 2.11.1 the range would expand to "[2.11,2.12)".\r\n\r\nThis PR also enforces a Java 6/7 execution environment for the bundles.\r\n\r\nThis PR has already a discussion history as #3697'
3734,'','Merge master to 2.11.x\nmaster is now retired. \n\nHere\'s its final breath:\n\n```\ngit show origin/master\ncommit af6941fbcf6f4f4efeb372a9a937463ff630b81c\nMerge: 6f33b24 bdb1258\nAuthor: Jason Zaugg <jzaugg@gmail.com>\nDate:   Fri May 9 17:21:33 2014 +0200\n\n    Merge pull request #3732 from retronym/revert/5905\n\n    Revert "SI-5905 Clarify test case"\n```'
3733,'','SI-8475 Fix off by one in GroupedIterator when Streaming\nThis also affected sliding and grouped since they defer to GroupedIterator'
3732,'','Revert "SI-5905 Clarify test case"\nThis reverts commit 78bd175afcc89878ca1c00cce69d0517909c6ff3.\n\nSee discussion:\n\n  https://github.com/scala/scala/pull/3597#commitcomment-6270375'
3731,'','Merge 2.11.x to 2.12.x\n```\n% git fetch origin\n\n% git checkout origin/2.12.x\n\nHEAD is now at 132a058... Merge pull request #3715 from retronym/topic/bump\n\n% git checkout -b merge/2.11.x-to-2.12.x\nSwitched to a new branch \'merge/2.11.x-to-2.12.x\'\n\n\n% export MB=$(git merge-base origin/2.11.x origin/2.12.x)\n\n% git log --decorate --oneline --graph $MB...origin/2.11.x\n*   7523ed3 (origin/2.11.x) Merge pull request #3719 from retronym/ticket/8546\n|\\\n| * 1ba2d7b (origin/pr/3719) SI-8546 Pattern matcher analysis foiled by over-widening\n*   7bac372 Merge pull request #3727 from retronym/ticket/8531\n|\\\n| * b154269 (origin/pr/3727, origin/pr/3696) SI-8531 Better space efficiency for patmat analysis\n*   d32459b Merge pull request #3729 from retronym/merge/master-to-2.11.x\n|\\\n| *   a132314 (retronym/merge/master-to-2.11.x, origin/pr/3729, merge/master-to-2.11.x) Merge commit \'b5392a0\' into merge/master-to-2.11.x\n| |\\\n| | *   b5392a0 Merge pull request #3704 from gourlaysama/wip/t8504\n| | |\\\n| | | * c6b5028 (origin/pr/3704) SI-8504 fix NPE in the Java wrapper for a Scala Map.\n| | *   6dd0a36 Merge pull request #3689 from xeno-by/ticket/8523\n| | |\\\n| | | * 2d37cc0 (origin/pr/3689) makes bundles friendly to -Ywarn-dead-code\n| | *   63b91bf Merge pull request #3706 from gourlaysama/wip/t8550\n| | |\\\n| | | * b3243e8 (origin/pr/3706) SI-8550 fix scaladoc for the default s.c.LinearSeq.\n| | *   a4e56ef Merge pull request #3711 from retronym/ticket/8549-2\n| | |\\\n| | | * 2dbd269 (retronym/ticket/8549-2, origin/pr/3711) SI-6988 Test case for non-literal / non-constant SerialVersionUID\n| | | * e7ab41e SI-8549 Enforce serialization stability for selected collections\n| | | * ecbc9d0 SI-8549 Honour the @SerialVersionUID annotatation\n| | *   e8ed2d2 Merge pull request #3703 from huitseeker/issue/SI-8537\n| | |\\\n| | | * 8317266 (origin/pr/3703) SI-8537 Puts SI-8157 fix under Xsource\n| | * e735cb3 Merge pull request #3576 from som-snytt/issue/8325\n| | * b0fe135 (origin/pr/3576) SI-8325 Accept infix star type outside patterns\n* |   d757662 (topic/merge-2.10.x-to-2.11.x-2, 2.11.x) Merge pull request #3726 from lrytz/unreachable\n|\\ \\\n| |/\n|/|\n| * cee2ad2 (origin/pr/3726) Disable \'unreachable\' test for GenBCode\n* |   972244d Merge pull request #3721 from lrytz/t7852\n|\\ \\\n| * | 30610d5 (origin/pr/3721) BCodeICodeCommon through composition rather than inheritance\n| * | 8402340 SI-7852 for GenBCode\n|  /\n* |   a469cab Merge pull request #3728 from retronym/topic/merge-2.10.x\n|\\ \\\n| * \\   b7f91a2 (retronym/topic/merge-2.10.x, origin/pr/3728) Merge commit \'ec05aeb\' into topic/merge-2.10.x\n| |\\ \\\n| | * \\   ec05aeb (origin/2.10.x, 2.10.x) Merge pull request #3678 from retronym/ticket/8479\n| | |\\ \\\n| | | * | c4561c1 (retronym/ticket/8479, origin/pr/3678) SI-8479 Fix constructor default args under scaladoc\n| | |  /\n| | * |   c74e132 Merge pull request #3655 from retronym/ticket/8442\n| | |\\ \\\n| | | * | 8262ed2 (retronym/ticket/8442, origin/pr/3655) SI-8442 Ignore stub annotation symbols in `AnnotationInfo#matches`\n| | |  /\n| | * |   2af68ee Merge pull request #3551 from xeno-by/topic/typecheck-member-def\n| | |\\ \\\n| * | \\ \\   ac8b44d Merge commit \'3314d76\' into topic/merge-2.10.x\n| |\\ \\ \\ \\\n| | | |/ /\n| | |/| |\n| | * | | 3314d76 (origin/pr/3551) [nomaster] typecheck(q"class C") no longer crashes\n| |  / /\n| * | |   81f79a0 Merge commit \'876590b\' into topic/merge-2.10.x\n| |\\ \\ \\\n| | |/ /\n| | * | 876590b Merge pull request #3614 from retronym/ticket/8196\n| | * | 540963f (retronym/ticket/8196, origin/pr/3614) SI-8195 Test case to show this is a dup of SI-8196\n| | * | 7b72f95 SI-8196 Runtime reflection robustness for STATIC impl details\n| |  /\n* | |   6a0b661 Merge pull request #3725 from gkossakowski/fastTrack-composition\n|\\ \\ \\\n| |_|/\n|/| |\n| * | f52d31f (origin/pr/3725) Refactor FastTrack to use composition instead of inheritance.\n* | |   c26b4cc Merge pull request #3724 from gkossakowski/classpath-doLoad\n|\\ \\ \\\n| * | | a4151c0 (origin/pr/3724) Get rid of Platform.doLoad method.\n| |/ /\n* | |   069cb86 Merge pull request #3723 from gkossakowski/partest-eclipse-project\n|\\ \\ \\\n| |/ /\n|/| |\n| * | bab1740 (origin/pr/3723) Make partest to depend on Scala compiler Eclipse project.\n|/ /\n* |   cc58870 Merge pull request #3717 from retronym/topic/mima\n|\\ \\\n| |/\n|/|\n| * fff4722 (retronym/topic/mima, origin/pr/3717, topic/mima) Use 2.11.0 as the MiMa baseline for 2.11.x\n* 9ad96d0 Merge pull request #3718 from lrytz/partestArgs\n* 10d77e9 (origin/pr/3718) Respect -Dpartest.scalac_opts when running the test suite through ANT\n\n% git show fff4722\ncommit fff4722157d89cd6350ebc888efd3ba95b29c1a0\nAuthor: Jason Zaugg <jzaugg@gmail.com>\nDate:   Wed May 7 11:14:13 2014 +0200\n\n    Use 2.11.0 as the MiMa baseline for 2.11.x\n\n    Rather than 2.11.0-RC3.\n\ndiff --git a/build.xml b/build.xml\nindex a66c138..ed12eb0 100755\n--- a/build.xml\n+++ b/build.xml\n@@ -1505,7 +1505,7 @@ TODO:\n                                   BINARY COMPATIBILITY TESTING\n ============================================================================ -->\n   <target name="bc.init" depends="init" unless="maven-deps-done-mima">\n-    <property name="bc-reference-version" value="2.11.0-RC1"/>\n+    <property name="bc-reference-version" value="2.11.0"/>\n\n     <property name="bc-build.dir" value="${build.dir}/bc"/>\n     <!-- Obtain mima -->\n\n\n% git merge origin/2.11.x\nAuto-merging build.xml\nMerge made by the \'recursive\' strategy.\n```'
3730,'','Fix checkinit build\nThere was only one real bug, SI-8570.'
3729,'',"Merge master to 2.11.x\n```\r\n% git show --oneline\r\n972244d Merge pull request #3721 from lrytz/t7852\r\n\r\n% export MB=$(git merge-base origin/2.11.x origin/master)\r\n\r\n% git log --graph --oneline --decorate $MB..origin/master\r\n*   b5392a0 (origin/master, origin/HEAD) Merge pull request #3704 from gourlaysama/wip/t8504\r\n|\\\r\n| * c6b5028 (origin/pr/3704) SI-8504 fix NPE in the Java wrapper for a Scala Map.\r\n*   6dd0a36 Merge pull request #3689 from xeno-by/ticket/8523\r\n|\\\r\n| * 2d37cc0 (origin/pr/3689) makes bundles friendly to -Ywarn-dead-code\r\n*   63b91bf Merge pull request #3706 from gourlaysama/wip/t8550\r\n|\\\r\n| * b3243e8 (origin/pr/3706) SI-8550 fix scaladoc for the default s.c.LinearSeq.\r\n*   a4e56ef Merge pull request #3711 from retronym/ticket/8549-2\r\n|\\\r\n| * 2dbd269 (retronym/ticket/8549-2, origin/pr/3711) SI-6988 Test case for non-literal / non-constant SerialVersionUID\r\n| * e7ab41e SI-8549 Enforce serialization stability for selected collections\r\n| * ecbc9d0 SI-8549 Honour the @SerialVersionUID annotatation\r\n*   e8ed2d2 Merge pull request #3703 from huitseeker/issue/SI-8537\r\n|\\\r\n| * 8317266 (origin/pr/3703) SI-8537 Puts SI-8157 fix under Xsource\r\n* e735cb3 Merge pull request #3576 from som-snytt/issue/8325\r\n* b0fe135 (origin/pr/3576) SI-8325 Accept infix star type outside patterns\r\n\r\n% git checkout -b merge/master-to-2.11.x\r\nSwitched to a new branch 'merge/master-to-2.11.x'\r\n\r\n% git merge b5392a0\r\n```\r\n\r\nNo conflicts"
3728,'','Merge 2.10.x to 2.11.x\n```\r\n% export MB=$(git merge-base origin/2.10.x head)\r\n\r\n% git log --graph --oneline --decorate $MB..origin/2.10.x\r\n*   ec05aeb (origin/2.10.x) Merge pull request #3678 from retronym/ticket/8479\r\n|\\\r\n| * c4561c1 (retronym/ticket/8479, origin/pr/3678) SI-8479 Fix constructor default args under scaladoc\r\n*   c74e132 Merge pull request #3655 from retronym/ticket/8442\r\n|\\\r\n| * 8262ed2 (retronym/ticket/8442, origin/pr/3655) SI-8442 Ignore stub annotation symbols in `AnnotationInfo#matches`\r\n*   2af68ee Merge pull request #3551 from xeno-by/topic/typecheck-member-def\r\n|\\\r\n| * 3314d76 (origin/pr/3551) [nomaster] typecheck(q"class C") no longer crashes\r\n* 876590b Merge pull request #3614 from retronym/ticket/8196\r\n* 540963f (retronym/ticket/8196, origin/pr/3614) SI-8195 Test case to show this is a dup of SI-8196\r\n* 7b72f95 SI-8196 Runtime reflection robustness for STATIC impl details\r\n\r\n% git merge 876590b\r\n\r\n% git merge -sours 3314d76\r\n\r\n% git merge ec05aeb\r\n```\r\n\r\nConflicts resolved in `JavaMirrors`.'
3727,'adriaanm','SI-8531 Better space efficiency for patmat analysis\nBy adding logging to `clause`, I found that the majority of\ncalls provide 0 or 1 elements. In SI-7020 / 69557da55, we changed this\nmethod to use a `LinkedHashSet` to have deterministic results\nfor clauses with more elements. But I suspect that this\ncontributes to higher memory usage from the pattern matcher.\n\nThe enclosed test case, carefully whittled down by @oxbowlakes,\nused to consume an inordinate amount of memory and time.\nAfter this patch, it is back to 2.10.4 performance.\n\nI have run `neg/t7020.scala` in a loop and it still is deterministic.\n\nReview by @adriaanm\n\nResubmission of #3696 that included a test and uses `toSet` as\nsuggested.'
3726,'',"Disable 'unreachable' test for GenBCode\nGenICode has some logic to eliminate some dead code directly at code\r\ngen (introduced in b50a0d811f for SI-7006). This has not been ported\r\nover to GenBCode.\r\n\r\nGenBCode with the new optimizer (in Miguel's branch) also eliminates\r\nsuch dead code. Before adding such functionality to GenBCode I'd like\r\nto investigate the cost of running DCE. Maybe we can keep the code\r\ngenerator simple.\r\n\r\nI created SI-8568 to keep track of this."
3725,'',"Refactor FastTrack to use composition instead of inheritance.\nInstead of mixing in FastTrack into Macros trait just have a member\r\nwith an instance of FastTrack. The motivation for this change is to reduce\r\nthe overall use of inheritance is Scala compiler and FastTrack seems like\r\na nice target for first step. It's an implementation detail of Scala\r\ncompiler that we are free to modify.\r\n\r\nPreviously, `fastTrack` method would be inherited from FastTrack trait and\r\ncalled from clients (sub classes). The `fastTrack` method returned Map.\r\nNow, the `fastTrack` viariable is of type `FastTrack`. In order for clients\r\nto continue to work we had to implement three operations called by\r\nclients: contains, apply, get.\r\n\r\nAlternatively, we could keep the `fastTrack` method and import it in\r\nclients. This approach is likely to be more common in the future when\r\nbigger pieces of code get refactored."
3724,'','Get rid of Platform.doLoad method.\nSince .NET backend got removed this method is a no-op.'
3723,'','Make partest to depend on Scala compiler Eclipse project\nThis way changes made to Scala compiler sources are visible to partest in Eclipse.'
3722,'','Issue/8325 spec update\nRemove the clause in 3.2.8 that reserves `*` as a postfix\r\nmodifier thing.  For emphasis, the language that an infix\r\ntype name can be an arbitrary identifier is retained, sans buts.'
3721,'','SI-7852 for GenBCode\nAvoid null checks for "someLiteral".== and SomeModule.==. This has\r\nbeen implemented in GenICode in #2954.\r\n\r\nIntroduces a trait to share code between GenICode and GenBCode. This\r\nis just a start, more such refactorings will come quite certainly.\r\n\r\nTest already exists. The new `scala-nightly-genbcode-2.1X.x` nightly build\r\nruns all tests on the new backend (that\'s how the difference was found).'
3720,'','Avoid throwing exceptions in macro context.\nThis eliminates probably the last place where type errors are thrown\r\nin an obvious way - reporting errors is off for whitebox macros, which\r\nmakes it pretty annoying if you are trying to understand the decision\r\nprocess of implicit search (any c.abort will throw a type error rather\r\nthan simply buffering an error like in every other normal case).\r\n\r\nAs a bonus we get more messages that are reported during (failed) macro\r\nexpansion (see updated test case).'
3719,'adriaanm','SI-8546 Pattern matcher analysis foiled by over-widening\nIn the enclosed test, the prefix checkable type\n`ModuleTypeRef(F2.this, C)` was being inadvertently widened to\n`ModuleTypeRef(F2[?], C)`. This started after some misguided\nfuture-proofing in SI-6771 / 3009916.\n\nThis commit changes the `dealiasWiden` to a `delias`.'
3718,'','Respect -Dpartest.scalac_opts when running the test suite through ANT\nUsed to enable `-Xcheckinit` (now also `-Ybackend:GenBCode`) when\r\ncompiling tests in the respective jenkins builds. This is currently\r\nbroken, as you can see in [recent build logs] [1], `-Xcheckinit` is\r\nmissing:\r\n\r\n    [partest] Scalac options are:  -optimise\r\n\r\nAdds `.flags` files for macro tests (correct range positions not\r\nenforced) and for tests failing due to SI-8560 or SI-8562.\r\n\r\nResubmission of #3709 (against 2.11 branch).\r\n\r\n[1]: https://scala-webapps.epfl.ch/jenkins/view/nightlies/job/scala-nightly-checkinit/2058/consoleFull'
3717,'','Use 2.11.0 as the MiMa baseline for 2.11.x\nRather than 2.11.0-RC3.'
3716,'','SI-5547: Add efficient access to java.util.Enum{Map,Set}.\nThis uses JavaConversions wrappers, which will then be cleanly\r\nconvertible back to their Java equivalents.\r\n\r\nI had this in my old Scala utility library for ages, and it seems I was not the only one who wanted this functionality. Rather than implementing pure-Scala collections for enums, reusing the Java versions is best, as they are already designed to be optimized for the Java enum type structure. The scaladoc includes examples exploiting each method, and the methods are organized to make "EnumSet" and "EnumMap" appear to act like integral collection types even though they aren\'t. The results of each object method are explicitly typed as scala.collection.mutable.{Set,Map}.'
3715,'','Bump version for 2.12.x\nFor this step, we still depend on _2.11 libraries (partest, xml,\nparser-combinators).\n\nAfter we release the first milestone of 2.12, we will update\nversions.property to bootstrap to 2.12 dependencies.'
3714,'','Bump version for 2.12.x\nFor this step, we still depend on _2.11 libraries (partest, xml,\nparser-combinators).\n\nAfter we release the first milestone of 2.12, we will update\nversions.property to bootstrap to 2.12 dependencies.'
3713,'','SI-8032 Provides an implicit macro for materialization of Liftable for case classes\nNow that development of 2.12 has started, reopening this PR.\r\n\r\nCase classes can now be used in quasiquotes.\r\n\r\n```scala\r\nWelcome to Scala version 2.11.1-20140505-184318-2e6e13ff25 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_51).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n\r\nscala> import scala.reflect.runtime.{universe => u}\r\nimport scala.reflect.runtime.{universe=>u}\r\n\r\nscala>  import u._\r\nimport u._\r\n\r\nscala> case class Test(str: String, i: Int, lst: List[Double])\r\ndefined class Test\r\n\r\nscala> val test = Test("test", 1, List(2.0, 3.5))\r\ntest: Test = Test(test,1,List(2.0, 3.5))\r\n\r\nscala> showRaw(q"$test")\r\nres0: String = Apply(Ident(Test), List(Literal(Constant("test")), Literal(Constant(1)), Apply(Select(Select(Select(Ident(scala), TermName("collection")), TermName("immutable")), TermName("List")), List(Literal(Constant(2.0)), Literal(Constant(3.5))))))\r\n\r\nscala> val cm = runtimeMirror(getClass.getClassLoader)\r\ncm: reflect.runtime.universe.Mirror = JavaMirror with scala.tools.nsc.interpreter.IMain$TranslatingClassLoader@75293656 of type class scala.tools.nsc.interpreter.IMain$TranslatingClassLoader with classpath [(memory)] and parent being scala.reflect.internal.util.ScalaClassLoader$URLClassLoader@64ae8431 of type class scala.reflect.internal.util.ScalaClassLoader$URLClassLoader with classpath [file:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar,file:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar,file:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar,file:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar,file:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Con...\r\nscala> import scala.tools.reflect.ToolBox\r\nimport scala.tools.reflect.ToolBox\r\n\r\nscala> val tb = cm.mkToolBox()\r\ntb: scala.tools.reflect.ToolBox[reflect.runtime.universe.type] = scala.tools.reflect.ToolBoxFactory$ToolBoxImpl@641c66ff\r\n\r\nscala> tb.eval(q"$test")\r\nres1: Any = Test(test,1,List(2.0, 3.5))\r\n\r\nscala> .asInstanceOf[Test]\r\nres2: Test = Test(test,1,List(2.0, 3.5))\r\n```\r\n\r\nReview by @xeno-by, @densh, and @retronym please.'
3712,'','SI-8475 Fix off by one in GroupedIterator when Streaming\nThis also affected sliding and grouped since they defer to GroupedIterator'
3711,'','SI-8549 Serialization: fix regression with @SerialVersionUID / start enforcing backwards compatibility\n'
3710,'','SI-8447 fix TypeTree printing\nAdded TypeTree printing based on tpe to CodePrinter (if original is not available) - [SI-8447](https://issues.scala-lang.org/browse/SI-8447)'
3709,'','Respect -Dpartest.scalac_opts when running the test suite through ANT\nUsed to enable `-Xcheckinit` (now also `-Ybackend:GenBCode`) when\r\ncompiling tests in the respective jenkins builds. This is currently\r\nbroken, as you can see in [recent build logs] [1], `-Xcheckinit` is\r\nmissing:\r\n\r\n    [partest] Scalac options are:  -optimise\r\n\r\n[1]: https://scala-webapps.epfl.ch/jenkins/view/nightlies/job/scala-nightly-checkinit/2058/consoleFull'
3708,'','IntelliJ project files\nFixes compilation within IDEA. Allows compiling and running JUnit tests directly withing the IDE.\r\n\r\nReview by @retronym'
3707,'','Docs reference old shebang style\nThe Scala docs describe an old style of shebangs, using multiple lines:\r\n\r\nhttp://www.scala-lang.org/documentation/getting-started.html\r\n\r\n    #!/bin/sh\r\n    exec scala "$0" "$@"\r\n    !#\r\n\r\nThe new style, working in 2.10, works like simple shebangs in other languages:\r\n\r\n    #!/usr/bin/env scala\r\n\r\nCould we please update the documentation to reflect this?'
3706,'','SI-8550 fix scaladoc for the default s.c.LinearSeq.\nThe default LinearSeq is a List (LinearSeq.newBuilder delegates to\r\nimmutable.LinearSeq.newBuilder, whose default is List).'
3705,'','SI-8546 Pattern matcher analysis foiled by over-widening\nIn the enclosed test, the prefix checkable type\n`ModuleTypeRef(F2.this, C)` was being inadvertently widened to\n`ModuleTypeRef(F2[?], C)`. This started after some misguided\nfuture-proofing in SI-6771 / 3009916.\n\nThis commit changes the `dealiasWiden` to a `delias`.'
3704,'','SI-8504 fix NPE in the Java wrapper for a Scala Map.\nMapWrapper blindly calls .hashCode on keys that can very well be null.'
3703,'','SI-8537 Puts SI-8157 fix under Xsource\nThis puts https://github.com/scala/scala/pull/3380 under the control of `-Xsource`'
3702,'','Use named class for UndoPair.\nUse specific, named class for UndoPair instead of generic Tuple2. This\r\nmakes analysis of heap dumps much easier because profilers let you inspect\r\nmemory consumption on per-class basis.'
3701,'','Construct the class with dynamic default value\nMy case class is：\r\n```\r\ncase class IdentityId(userId: String, providerId: String)\r\ncase class IdentityItem (\r\nuserId:String,\r\nproviderID: String,\r\nidentityId:IdentityId)\r\n```\r\nI want to set the new initial value of identityId equal to IdentityId(userId,providerID) , This is similar to C++ initialize members of a class.\r\nthe whole code is like:\r\n```\r\ncase class IdentityId(userId: String, providerId: String)\r\ncase class IdentityItem (\r\nuserId:String,\r\nproviderID: String,\r\nidentityId:IdentityId=IdentityId(userId,providerID))\r\n```\r\n'
3700,'','Construct the class with different constructor.\nI use slick 2.0.1\r\n\r\nMy case class is：\r\n\r\n   case class IdentityId(userId: String, providerId: String)\r\n   case class IdentityItem (\r\n   userId:String,\r\n   providerID: String,\r\n   ....\r\n     ){\r\n    def identityId=IdentityId(userId,providerID)\r\n   }\r\n\r\nuserId is the foreign key of user table, providerID is the foreign key of provider table, for avoid composite primary keys, I decide add another column name identityId.\r\n\r\nyou should know that in default slick use only constructed field as the datatable column. In this case I want to use additional column "identityId".\r\n'
3699,'','SI-8514 NumericRange[Double] take and drop are broken\nFixes SI-8514, plus regressions associated with fix of SI-4370, plus other regressions from earlier commits regarding floating-point ranges.  This fixes only Double; Float is still broken.  Jumped through all sorts of hoops to (try to) preserve binary compatibility--this should be redone for 2.12.'
3698,'',"Restore linking to source from scaladoc.\nSomehow the `docsourceurl` param got dropped in the build refactor.\r\nWhile I was in the neighborhood, reformatted the scaladoc tag.\r\n\r\n(It's all copy/paste except for docRootContent, because xml and poor ant task implementation)\r\n\r\nreview by @gkossakowski"
3697,'','OSGi: Restrict Import-Package for scala.*\nRestrict the Import-Package OSGi manifest entry to match only binary compatible scala.* packages. This is necessary, because the Scala OSGi versions do not match the OSGi semantic versioning policy and are not binary compatible between their OSGi minor versions. This means that e.g. the scala-compiler-2.11 bundle will never work if it imports a scala.* package from 2.10 or 2.12. Thus this patch enforces a tight version range, only accepting versions within the same minor version. E.g. Applied to version 2.11.1 the range would expand to "[2.11,2.12)".\r\n\r\nThis PR also enforces a Java 6 execution environment for the bundles.\r\n\r\nSuggested reviewer: @jsuereth'
3696,'',"SI-8531 Better space efficiency for patmat analysis\nBy adding logging to `clause`, I found that the majority of\r\ncalls provide 0 or 1 elements. In SI-7020 / 69557da55, we changed this\r\nmethod to use a `LinkedHashSet` to have deterministic results\r\nfor clauses with more elements. But I suspect that this\r\ncontributes to higher memory usage from the pattern matcher.\r\n\r\nSI-8531 doesn't come with a test case (yet), so this analysis\r\nis based on a little guesswork after analysing the heap dump\r\nfrom @oxbowlakes' project.\r\n\r\nI'll submit this as a pull request and ask him to try again\r\nwith the pr validation snapshot build of the compiler.\r\n\r\nI have run `neg/t7020.scala` in a loop and it still is deterministic.\r\n\r\nReview by @adriaanm"
3695,'','SI-8507 Avoid lazy val in StringContext\nThis mild refactor eliminates the lazy val StringBuilder\r\nand arguably makes the code easier to read.\r\n\r\nThere is a small unit test but no benchmark to prove\r\nanything useful about performance.'
3694,'',"SI-8478 Fix a performance regression in subtyping\nWhen checking `M[X] <:< M[Y]` for an `M` with an invariant\r\nparameter, we have to check that `X <:< Y && Y <:< X`. This is\r\ndone in `isSubArgs`.\r\n\r\nThe compile time of the test in the ticket jumps from 20s in\r\n2.10.4 to too-long-to-measure in 2.11.0. This commit reverts the\r\na subtle change to `isSubArgs` in ea93654 that was ultimately\r\nresponsible.\r\n\r\nThe search for this was unusually circuitious, even for scalac.\r\nIt appeared in 9c09c1709 due a tiny error that has since been\r\nreverted in 58bfa19. But 58bfa19 still exhibited abysmal performance,\r\ndue to an intervening regression that I'm targeting here.\r\n\r\nI haven't managed to extract a performance test from Slick. Using\r\nthe test that @cvogt provided, however, with this patch:\r\n\r\n\t% time qbin/scalac -J-Xmx4G -classpath /Users/jason/code/slick-presentation/target/scala-2.10/classes:/Users/jason/.sbt/0.13/staging/b64b71d1228cdfe7b6d8/slick/target/scala-2.10/classes:/Users/jason/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.6.4.jar /Users/jason/code/slick-presentation/src/main/scala/SlickPresentation.scala\r\n\r\n\treal\t0m21.853s\r\n\tuser\t0m33.625s\r\n\tsys\t0m0.878s\r\n\r\nWhich is back to 2.10.x style performance."
3693,'','TailRec should be sealed, or a MatchError would be thrown\n'
3692,'','SI-7566 Remove scala.actors\n'
3691,'',"don't return err 1 when running 'scala -version' on repl\nfix SI-8503. I have already signed the Scala CLA."
3690,'','2.11 is out now\n'
3689,'',"makes bundles friendly to -Ywarn-dead-code\nApparently, the `new Bundle(???).impl` synthetic tree generated as a\r\nmacro impl ref for bundles evokes -Ywarn-dead-code warnings.\r\n\r\nThis pull requests changes `???` to `null` in order not to stress out\r\nthe checker. What's in the argument doesn't actually make any difference\r\nanyway."
3688,'',"Another spot to fully cross version continuations plugin\nThe continuations plugin is fully cross versioned, as it\r\ndependes on the non-BC compiler API.\r\n\r\nI had to make the same change externally releasing 2.11.0:\r\n\r\n   https://github.com/scala/jenkins-scripts/pull/99/files\r\n\r\nThis fix addresses the problem in scala/scala. Without it,\r\nwe can't resolve dependencies in development.\r\n\r\nReview by @xeno-by @adriaanm"
3687,'','SI-8520 Fix -Dscalac.patmat.analysisBudget=off\nCorrectly parse "off" instead of throwing java.lang.NumberFormatException'
3686,'','Re-enable typechecked types part of quasiquote test suite\nIt was accidentally disabled.\r\n\r\nreview @xeno-by'
3685,'','SI-8514 Remove scaladoc html inconsistencies\nSome classes only got inline comments instead of getting the full comment.'
3684,'','SI-5920 enables default and named args in macros\nreview @retronym'
3683,'','Bump versions after release of 2.11.0-final\nNew versions.properties generated by:\r\n\r\n   https://scala-webapps.epfl.ch/jenkins/view/scala-release-2.11.x/job/scala-release-2.11.x/57/\r\n\r\nReview by @gkossakowski\r\n\r\nFor merge on Friday (after artifacts for 2.11.0 have propagated to Maven central)'
3682,'gkossakowski','SI-8497 Fix regression in pickling of AnnotatedTypes\nFixes an inconsistency introduced in these two spots:\r\n\r\n  https://github.com/scala/scala/pull/3033/files#diff-6ce1a17ebee31068f41c36a8a2b3bc9aR79\r\n  https://github.com/scala/scala/pull/3033/files#diff-c455cb229f5227b1bcaa1544478fe3acR452\r\n\r\nThe bug shows up when pickling then unpickling an AnnotatedType\r\nthat has only non-static annotations. It manifests as a crash in unpickling.'
3681,'','Added mapAll which will map/recover in a single PF\n'
3680,'','Reword javap filtering options\n"To filter out" means remove, and, therefore, has the exact opposite meaning of what the example shows. But "filter" is kind of an ambiguous word when it comes to what\'s removed and what\'s left, not to mention which you are interested in (if you filter water to drink that\'s one thing, if you filter water to mine gold, that\'s another), so I\'m avoiding it altogether and going for some unambiguous.'
3679,'','Correction in the documentation.\nCorrected the description of the method parameters.'
3678,'',"SI-8479 Fix constructor default args under scaladoc\nThe `DocDef` node hid the `DefDef` constructor from the scrutinee\nof the namer when determining if the class had constructor defaults\nor not.\n\nThe current pattern for fixing these bugs is to delegate the check\nto `TreeInfo`, and account for the wrapper `DocDef` node. I've\nfollowed that pattern, but expressed my feelings about this approach\nin a TODO comment.\n\nBefore this patch, the enclosed test failed with:\n\n     error: not enough arguments for constructor SparkContext: (master: String, appName: String)SparkContext\n\nReview by @vladureche"
3677,'','Sorry, made a mistake, delete this request please\nSorry, made a mistake, delete this request please'
3676,'','Bump versions after release of Scala 2.11.0-RC4\nBased on:\r\n\r\n   https://scala-webapps.epfl.ch/jenkins/view/scala-release-2.11.x/job/scala-release-2.11.x/52/artifact/scala/versions.properties\r\n\r\nWith a manual edit of the new property, scala.full.version, which\r\nwas not written out by `ant -Dupdate.versions`. That has since\r\nbeen remedied.\r\n\r\nReview by @adriaanm'
3675,'',"Render scala.full.version to versions.properties.\nWhen called with -Dupdate.versions, the build will render its current\r\nset of versions to versions properties. This is used during releases,\r\nwhen bootstrapping to a consistent set of modules that constitute\r\na release.\r\n\r\nParticularly, scala.full.version is the non-SNAPSHOT full version\r\nof scala that's closed to maven.version.number. It's similar in\r\nspirit to the module build's snapshotScalaBinaryVersion,\r\nexcept that it's always the full version, so, e.g., 2.11.1 rather than 2.11.\r\n\r\nThis version is so far only used to determine the dependency on\r\nscala-continuations-plugin in scala-dist.\r\n\r\nReview by @retronym. See also https://github.com/scala/jenkins-scripts/pull/91"
3674,'','Update references to quasiquotes guide\nreview @heathermiller @retronym'
3673,'',"SI-8461 -Xsource:2.10 mode for macro signature checks\nI can't get the test to fail in partest, so I've resorted to\r\na manual test case.\r\n\r\n    % qbin/scalac -nobootcp -Dscala.usejavacp=false -Xsource:2.10 -classpath $HOME/.m2/repository/org/scala-lang/scala-library/2.10.3/scala-library-2.10.3.jar:$HOME/.m2/repository/org/scala-lang/scala-reflect/2.10.3/scala-reflect-2.10.3.jar test/files/pos/t8461/Impl.scala\r\n    warning: there were 1 deprecation warning(s); re-run with -deprecation for details\r\n    one warning found\r\n\r\n    % qbin/scalac -nobootcp -Dscala.usejavacp=false -Xsource:2.11 -classpath $HOME/.m2/repository/org/scala-lang/scala-library/2.10.3/scala-library-2.10.3.jar:$HOME/.m2/repository/org/scala-lang/scala-reflect/2.10.3/scala-reflect-2.10.3.jar test/files/pos/t8461/Impl.scala\r\n    test/files/pos/t8461/Impl.scala:6: error: macro implementations cannot have implicit parameters other than WeakTypeTag evidences\r\n      def reads[A] = macro readsImpl[A]\r\n                           ^\r\n    one error found\r\n\r\nBefore this change, when using a 2.10 JAR for scala-reflect, the\r\nmacro signature validation checks failed. This was due to the fact\r\nthat `scala.reflect.macros.Context` was changed in 2.11 to be\r\na type alias.\r\n\r\nTo get things working again, I've had to route both\r\n`defintions.{WhiteBoxContextClass, BlackBoxContextClass}` to the\r\nold location. This might mean that we misclassify the boxity under\r\nthis mode. All that we can actually handle are blackbox macros, really,\r\nas macro expansion is likely to hit binary incompatibilites very\r\nquickly. We can refine this in subsequent releases.\r\n\r\nReview by @huitseeker @xeno-by"
3672,'','Further tweak version of continuations plugin in scala-dist.pom\nWhile we must use full version, rather than the cross version\r\n(12720e699), we need to use latest non-snapshot version.\r\n\r\nThis should avoid failures like:\r\n\r\n  https://jenkins.scala-ide.org:8496/jenkins/view/Scala%20Xsource%20flag%20nightlies/job/Akka/63/console\r\n\r\nSuch as:\r\n\r\n\t[warn] ::::::::::::::::::::::::::::::::::::::::::::::\r\n\t[warn] ::          UNRESOLVED DEPENDENCIES         ::\r\n\t[warn] ::::::::::::::::::::::::::::::::::::::::::::::\r\n\t[warn] :: org.scala-lang.plugins#scala-continuations-plugin_2.11.0-SNAPSHOT;1.0.1:\r\n\tnot found\r\n\t[warn] ::::::::::::::::::::::::::::::::::::::::::::::\r\n\tsbt.ResolveException: unresolved dependency:\r\n\torg.scala-lang.plugins#scala-continuations-plugin_2.11.0-SNAPSHOT;1.0.1:\r\n\r\nReview by @gkossakowski / @huitseeker'
3671,'',"SI-8466 fix quasiquote crash on recursively iterable unlifting\nIn order to handle unquoting quasiquotes needs to know if type is\r\niterable and whats the depth of the iterable nesting which is called\r\nrank. (e.g. List[List[Tree]] is rank 2 iterable of Tree)\r\n\r\nThe logic that checks depth of iterable nesting didn't take a situation\r\nwhere T is in fact Iterable[T] which caused infinite recursion in\r\nstripIterable function.\r\n\r\nIn order to fix it stripIterable now always recurs no more than\r\nnon-optional limit times.\r\n\r\nreview @retronym"
3670,'adriaanm','SI-8463 Avoid unpositioned errors from search for views\nIdeally, I\'d like to fix this using `saveErrors = false` here to\nfirewall the enclosing context from the ambiguiouty error encountered\nduring implicit search.\n\nI originally proposed that patch as a fix for SI-8419 in\nhttps://github.com/scala/scala/pull/3460 but withdrew from\nthat approach as I uncovered a deeper bug that meant that\nwe actually shouldn\'t have even been looking for views in\nthat case.\n\nBut, this runs into SI-8230 and these failures:\n\n\ttest/partest --update-check \\\n\t  /Users/jason/code/scala/test/files/pos/t2504.scala \\\n\t  /Users/jason/code/scala/test/files/pos/t4457_1.scala \\\n\t  /Users/jason/code/scala/test/files/neg/t4457_2.scala\n\nTurns out that typechecking the ostensible straight forward\napplication, `Array("abc")`, hinges on us leaking an ambiguity\nerror from `viewExists` to find a path through overload resolution!\n\nThis commit takes a tiny step forward by using `context.tree`\nrather than `EmptyTree` as the argument to `inferImplicit`.\nThis avoids unpositioned type errors.\n\nReview by @adriaanm'
3669,'','SI-8460 Fix regression in implicit divergence recovery\nMinor rework of #3667.\r\n\r\nReview by @retronym.'
3668,'','Disable more of the Travis spec build for PR validation\nSo as to avoid:\n\n\t$ ssh-add -D\n\tAll identities removed.\n\t$ ssh-add spec/id_dsa_travis\n\tEnter passphrase for spec/id_dsa_travis:\n\tNo output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.\n\nReview by @adriaanm'
3667,'','SI-8460 Fix regression in implicit divergence recovery\nReview by @adriaanm'
3666,'','Spec cleanups\n'
3665,'','Minor typographical fixes for types chapter\nTables did not have any header content, which made them look weird. Added meaningful headers.'
3664,'','Minor typographical fixes for lexical syntax chapter\nChange mostly consists of fixing single quotes and stripping code back-ticks where they are not required.\r\n\r\nFor some reason, unescaped superscript notation within math mode is preventing MathJAX from doing its job. There may be a better fix for this than simply escaping the superscript, which makes the math-mode syntax different from what one might normally expect.'
3663,'',"More cleanup for the spec. Ported over @som-snytt's PRs.\n"
3662,'',"Import markdown spec under spec/\nThe bulk of the effort was done in:\r\nhttps://github.com/iainmcgin/scala-ref-markdown/ -- thanks, @iainmcgin!!\r\n\r\nI just ported it to redcarpet 3.1, added a jekyll build to run on Travis,\r\nand fixed some long-standing spec bugs.\r\n\r\nAs described in spec/README.md, for now we're only generating\r\nan html page per each chapter with a rudimentary toc index.\r\nWe'll focus on presenting this more nicely first, and then\r\nlook into a pdf / single-page html version.\r\n\r\nSigned off by @gkossakowski "
3661,'','Remove scala-continuations-plugin from scala-library-all\nThe continuations plugin should instead be a dependency of scala-dist,\r\nas scala-library-all should be a drop-in replacement for scala-library,\r\nand as such should not (indirectly) depend on plugins/the compiler.\r\n\r\nReview by @retronym.'
3660,'',"Import the markdown spec\nThe bulk of the effort was done in:\r\nhttps://github.com/iainmcgin/scala-ref-markdown/\r\n\r\nI just ported it to redcarpet 3.1, added a jekyll build to run on Travis,\r\nand fixed some long-standing spec bugs.\r\n\r\nAs described in spec/README.md, for now we're only generating\r\nan html page per each chapter with a rudimentary toc index.\r\nWe'll focus on presenting this more nicely first, and then\r\nlook into a pdf / single-page html version.\r\n\r\nPS: I'm submitting this PR to the master-tmp branch, so that the bot will ignore it (since there's no milestone that targets it)\r\n"
3659,'retronym','SI-8451 makes uncurry more forgiving\nApparently even though the rhs of a secondary constructor looks like an expr,\r\nit always gets wrapped in a block by the parser. This works just fine with\r\nthe typer, but crashes in uncurry. This commit brings quasiquotes in line with the parser.'
3658,'','SI-8450 no "implicit numeric widening" in silent mode\nBefore this fix, we get a second, spurious warning.\r\n\r\n```\r\nt8450.scala:5: warning: implicit numeric widening\r\n  def elapsed: Foo = (System.nanoTime - 100L).foo\r\n                                      ^\r\nt8450.scala:11: warning: implicit numeric widening\r\n  def elapsed: Foo = (System.nanoTime - 100L).foo\r\n                                      ^\r\nerror: No warnings can be incurred under -Xfatal-warnings.\r\ntwo warnings found\r\none error found\r\n```\r\n\r\nBy respecting silent contexts, we now get only one.\r\n\r\nI sneakily fixed similar occurrences without adding a test.'
3657,'retronym',"SI-8388 consistently match type trees by originals\nDue to the fact that all TypTrees are transformed into TypeTrees\r\nduring typechecking one couldn't treat typed type trees in the same\r\nway as they treat untyped type trees.\r\n\r\nThis change implements support for pattern matching of TypeTrees as their\r\ncorresponding TypTree equivalent using tree preserved in the original.\r\n\r\nThe implementation itself is a trivial wrapping of regular TypTree\r\nextractors into MaybeTypeTreeOriginal."
3656,'xeno-by','SI-8350 SI-8387 tweak handling of new trees\nAdds two tweaks to the handling of `q"new ..."` trees:\r\n\r\n1. Makes `q"$f(...$argss)"` not match `q"new Foo(x)"` as function with arguments \r\n2. Makes `q"new Foo"` and `q"new Foo()"` match one another\r\n\r\nreview @xeno-by @retronym'
3655,'',"SI-8442 Ignore stub annotation symbols in `AnnotationInfo#matches`\nAnd update the java `ClassFileParser` to create distinguished\n`StubClassSymbol`s, rather that a regular `ClassSymbol`s, when\nencountering a deficient classpath. This brings it into line\nwith `Unpickler`, which has done as much since a55788e275f.\n\nThis stops the enclosed test case from crashing when determining\nif the absent symbol, `A_1`, is a subclass of `@deprecated`.\n\nThis is ostensibly fixes a regression, although it only worked in\n`2.10.[0-3]` by a fluke: the class file parser's promiscious\nexception handling caught and recovered from the NPE introduced\nin SI-7439!\n\n\t% javac -d /tmp test/files/run/t8442/{A,B}_1.java &&  qbin/scalac -classpath /tmp -d /tmp test/files/run/t8442/C_2.scala && (rm /tmp/A_1.class; true) && scalac-hash v2.10.0 -classpath /tmp -d /tmp test/files/run/t8442/C_2.scala\n\twarning: Class A_1 not found - continuing with a stub.\n\twarning: Caught: java.lang.NullPointerException while parsing annotations in /tmp/B_1.class\n\ttwo warnings found\n\nReview by @gkossakowski"
3654,'','SI-7469 (followup) corrects typo in deprecation version from 765ac94c\n'
3653,'xeno-by','SI-8200 provide an identity liftable for trees\nThis liftable hasn\'t been originally included in the set of standard\r\nliftables due to following contradiction:\r\n\r\n1. On one hand we can have identity lifting that seems to be quite\r\n   consistent with regular unquoting and splicing:\r\n   ```scala\r\n    q"..${List(1,2)}"        <==> q"1; 2"\r\n    q"${List(1,2)}"          <==> q"s.c.i.List(1, 2)"\r\n    q"..${List(q"a", q"b")}” <==> q"a; b"\r\n    q"${List(q"a", q"b")}"   <==> q"s.c.i.List(a, b)" // introduced by this pr, currently fails\r\n   ```\r\n   This is also consistent with how lisp unquoting works although they\r\n   get lifting for free thanks to homoiconicity:\r\n   ```scala\r\n    // scala\r\n    scala> val x = List(q"a", q"b"); q"f($x)"\r\n    q"f(s.c.i.List(a, b))"\r\n   ```\r\n   ```scheme\r\n    ;; scheme\r\n    > (let [(x (list a b))] `(f ,x))\r\n    \'(f (list a b))\r\n   ```\r\n\r\n2. On the other hand lifting is an operation that converts a value into\r\n   a code that when evaluated turns into the same value. In this sense\r\n   `Liftable[Tree]` means reification of a tree into a tree that\r\n   represents it, i.e.:\r\n   ```scala\r\n    q"${List(q"a", q"b")}"\r\n    <==>\r\n    q"""s.c.i.List(Ident(TermName("a")), Ident(TermName("b")))"""\r\n   ```\r\n   But I belive that such lifting will be very confusing for everyone\r\n   other than a few very advanced users.\r\n\r\nThis commit introduces the first option as a default Liftable for trees.\r\n\r\nreview @xeno-by @retronym'
3652,'retronym',"SI-8388 consistently match type trees by originals\nDue to the fact that all TypTrees are transformed into TypeTrees\r\nduring typechecking one couldn't treat typed type trees in the same\r\nway as they treat untyped type trees.\r\n\r\nThis change implements support for pattern matching of TypeTrees as their\r\ncorresponding TypTree equivalent using tree preserved in the original.\r\n\r\nThe implementation itself is a trivial wrapping of regular TypTree\r\nextrarctors into MaybeTypeTreeOriginal.\r\n\r\nreview @retronym"
3651,'retronym',"SI-8437 macro runtime now also picks inherited macro implementations\nPreviously it didn't matter much that we used Class.getDeclaredMethods\r\ninstead of just getMethods, but with the introduction of macro bundles\r\nit can make a difference which is fixed in this commit.\r\n\r\nI'd also like to note that the fact that getMethods only returns public\r\nmethods and getDeclaredMethods also sees private methods, doesn't make\r\na difference, because macro implementations must be public."
3650,'','Merge 2.10.x to master\nWhich was a no-op.\n\n\t% export MB=`git merge-base master origin/2.10.x`\n\n\t% git log --graph --oneline --decorate $MB...origin/2.10.x\n\t*   daa77d1 (origin/pr/3648, origin/2.10.x) Merge pull request #3602 from xeno-by/topic/backport-vampire-warni\n\t|\\\n\t| * db300d4 (xenoby/topic/backport-vampire-warning, origin/pr/3602) [backport] no longer warns on calls to vam\n\t* |   43e06be Merge pull request #3643 from gkossakowski/2.10.5-nightlies\n\t|\\ \\\n\t| |/\n\t|/|\n\t| * a16e003 (origin/pr/3643) Bump version to 2.10.5 for nightly builds.\n\t|/\n\t*   b66a396 (tag: v2.10.4-RC3, tag: v2.10.4, xenoby/2.10.x, huit/2.10.x) Merge pull request #3491 from retrony\n\t|\\\n\t| * 5f4011e (retronym/backport/7902, origin/pr/3491) [backport] SI-7902 Fix spurious kind error due to an unit\n\t|/\n\t*   5720e97 Merge pull request #3430 from som-snytt/issue/8205-backport\n\t|\\\n\t| * 8ee165c (origin/pr/3430) SI-8205 [nomaster] backport test pos.lineContent\n\t*   50453ce Merge pull request #3415 from xeno-by/topic/reify210x\n\t|\\\n\t| * d167f14 (origin/pr/3415) [nomaster] corrects an error in reify’s documentation\n\t|/\n\t*   6557570 Merge pull request #3359 from huitseeker/issue/VarianceAdaptations\n\t|\\\n\t| * 806b6e4 (origin/pr/3359, huit/issue/VarianceAdaptations) Backports library changes related to SI-6566 from\n\t* d9ee69f Merge pull request #3367 from retronym/backport/3363\n\t* ff13742 (retronym/backport/3363, origin/pr/3367) [nomaster] SI-8146 Fix non-deterministic <:< for deeply nes\n\t* cbb88ac [nomaster] Update MiMa and use new wildcard filter\n\n    % git merge -s ours daa77d1'
3649,'','scalac compile command flexible behaviour\nSeems like an unreported error/ or not,\r\n\r\nscalac command seems to compile .txt files as well or any extensions, if the correct code is inside the file. Noticed on ver 2.10.3\r\n\r\nis it a deliberate flexibility provided by the scala ?'
3648,'','2.10.x\nWas just trying to post a pull request, new here but ......\r\nSeems like an unreported error/ or not,\r\n\r\n`scalac` command seems to compile .txt files as well or any extensions, if the correct code is inside the file. Noticed on ver 2.10.3 \r\n\r\nis it a deliberate flexibility provided by the scala ? '
3647,'xeno-by','SI-8411 match desugared partial functions\nreview @xeno-by /cc @vladimirnik'
3646,'','Parallelize classfile writing in genasm.\nThis is not urgent. Scheduled for 2.11.1-RC1, but I needed a break from release hacking.\r\n\r\nReview by @retronym, @viktorklang /cc @dragos.'
3645,'',"SI-8430 Less non-determinism in patmat exhautiveness warnings\nAnother mole whacked on the head by using `LinkedHashMap`.\n\nCaution: `LinkedHashMap` doesn't preserve its runtime type if\nyou map through the generic interface. I've noted this gotcha as\nSI-8434. I've structured this patch to enforce that concrete\ncollection with types, which is a good idea anyway.\n\nMy method to track this down was to place breakpoints in\n`Hash{Map,Set}`.{foreach,iterator}` to see where that was\nused from within pattern match translation. This approach was\ndrastically faster than my previous rounds of whack-a-mole.\n\nThe counter-examples are still a bit off; I'm going to merge\nthat aspect of this ticket with SI-7746, in which we've\npinpointed the culpable part of the implementation, but haven't\nhad success in fixing the bug.\n\nReview by @adriaanm. This should probably wait for 2.11.1 as\nit isn't blocker material."
3644,'','SI-8428 Fix regression in iterator concatenation\nRegressed in e3ddb2d7, which introduced `ConcatIterator` to\navoid super-linear runtime on chains of concatenated iterators.\n\n`ConcatIterator` maintains a queue of thunks for the remaining\niterators. Both `next` and `hasNext` delegate to `advance`, which\nevaluates the thunks and discards any empty iterators from the\nstart of the queue. The first non-empty iterator is stored in\nthe var `current`.\n\nIt also overrides `++`, and creates a new `ConcatIterator` with\nthe given `that` as an extra element in the queue. However, it\nfailed to copy `current` across, which led to data loss.'
3643,'','Bump version to 2.10.5 for nightly builds.\nThe 2.10.4 final has been tagged so we should start publishing nightlies as 2.10.5.'
3642,'','Bump versions for 2.11.0-RC3\nTo merge as soon as the release is on maven.'
3641,'adriaanm','SI-8341 minor fixup for comments in test\n'
3640,'','2.11.0-RC4\nIf needed, otherwise the final. Announce on Mar 26th.'
3639,'',"SI-8341 Refine handoff of undet. params from implicit search\nIn SI-7944 / 251c2b93, we discovered that typechecking of an implicit\ncandidate could leave orphaned undetermined type parameters in the\nimplicit search context. This resulted in naked type parameters\nleaking into implicit expansions. The fix seemed easy: just copy\nany symbols from `implicitSearchContext.undetparams` to the enclosing\ncontext (other than ones in `SearchResult#subst`).\n\nHowever, the test case in this ticket reveals a subtle flaw in that\nfix: `implicitSerachContext.undetparams` only contains the type params\nfrom the most recently typechecked candidate!\n\nWhy? Implicit search uses the same context to typecheck all plausibly\ncompatible candidates.  The typechecking itself is driven by\n`typedImplicit1`.\n\nSide note, that explains the heisenbug behaviour noted in the ticket:\nNot *all* plausibly implicit candidates are typechecked. If\nthe current 'best' eligible candidate is more specific than the next\ncandidate, we can skip that altogether.Implicit search actually\nexploits this for performance by ordering the candidates according to\nusage statistics. This reordering, means that commenting out lines\nelsewhere in the file changed the behaviour!\n\nThis commit simply stores the undet. tparams in the `SearchResult`,\nwhere it is safe from the vaguries of typechecking other candidates.\n\nThat makes `Test1` and `Test2` with in the enclosed test case fail\nuniformly, both with each other, and with an explicit call to\nthe view.\n\nThis is ostensibly a regression from 2.10.3. To get there,\nwe need an implicit search that has to infer `Nothing` in a covariant\nposition. In 2.10.3, we would just let the `G` out into the wild,\nwhich did the right thing for the wrong reasons."
3638,'retronym',"SI-8425 don't create double-dollar names in c.freshName\nIf we append a dollar to a user-provided prefix that ends in a dollar,\r\nwe create a potential for confusion for backend phases. That's why\r\nthis commit prevents such situations from happening."
3637,'retronym',"SI-8420 don't crash on unquoting of non-liftable native type\nPreviously quasiquote's type-based dispatch failed to handle situation\r\nwhere unquotee's type is native but non-liftable and was used to splice\r\nwith non-zero cardinality.\r\n\r\nreview @retronym"
3636,'retronym',"introduces Mirror.typeOf\nI just realized that our tag-based shortcuts were incomplete, because\r\nthey only work with root mirrors (doing just u.typeTag[T].tpe means that\r\nthe type is going to be resolved in u.rootMirror because that's the default).\r\n\r\nThis commit fixes this oversight. I'm hoping for 2.11.0-RC3, but also feel\r\nfree to reschedule to 2.12.0-M1 if it becomes clear that RC3 isn't happening."
3635,'adriaanm',"SI-8329 Better hygiene for patmat partial functions\nDon't enter synthetic parameters of `applyOrElse` et al into\r\nscope when typechecking the user-code; instead reference those\r\nsymbolically.\r\n\r\nReview by @adriaanm. For 2.11.1"
3634,'',"SI-7992 Fix super-accessor generation after a local class\nThe transformer in the superaccessors phase uses the var\n`validCurrentOwner` to track whether we're in a part of the\ncode that won't end up in the host method, and as such, will\nneed to access super-method via a super-accessor.\n\nBut, this bit of bookkeeping was not correctly reset after traversing\nout of a local class. A `VerifyError` ensued.\n\nThis commit changes `atOwner` to save and restore that flag, rather\nthan leaving it set to `true`.\n\nI've also added a test variation using a by-name argument.\n\nReview by @gkossakowski. For 2.11.1"
3633,'','SI-8415 Exception handling in REPL init\nIncremental robustness, and probe for typer phase.\r\n\r\nThe probe would be unnecessary if repl contributed a\r\nterminal phase that "requires" whatever it needs; that\r\nis checked when the Run is built.'
3632,'',"Add mapTry and flatten methods to Future\nThese are a couple of methods that I've found myself wishing for when working with futures."
3631,'',"SI-4492 More informative error when class not found on classpath\nSorry, I don't have time to add a test for the module advice part of the error message.\r\nOur classpath handling needs to be fixed to do this reliably anyway.\r\n\r\nI discovered another bug in our launcher script (#3630) while testing it manually...\r\n"
3630,'','SI-8368 respect user-supplied scala.usejavacp\nNow also works  when the option is -Dscala.usejavacp=false...\r\n\r\nurghhhh'
3629,'retronym','SI-8086 follow-up that fixes the problem with `setter`\nThis is a super-low risk follow-up for 47dba05 that fixes the same\r\nproblem with a neighboring method.'
3628,'','Minor fixes in test. The equals method always returned true.\nThis commit ensures that the classes we use to test HashMaps and\r\nHashSets in t6196 and t6200 have proper equals and hashCode\r\nmethods. (The old equals method returned always true and therefore\r\nhashCode violated its contract).'
3627,'gkossakowski','SI-8407 "symbol not found" in Scaladoc use cases: warning only\nThe refactoring in aedec1980 mistakenly used the non-silent\ntyper to typecheck the use cases. It temptingly had the desired\ntype (`ScalaDocAnalyzer`), but sadly the wrong properties (it will\nreport errors, rather than buffer.)\n\nThis meant that "symbol not found" errors in use cases would prevent\nScaladoc generation.\n\nThis commit introduces a little downcast on the silent typer.\nA more principled approach would be to go through the rigmarole\nof the virtual class pattern for `Analzyer.Typer`, but that will\nhave to remain work for another day.\n\nReview by @gkossakowski'
3626,'adriaanm','SI-2458 Explicit import should shadow def in other comp. unit\nFixes the implementation of point 4. from SLS chapter 2:\n\n> Definitions made available by a package clause not in the\n> compilation unit where the definition occurs have lowest precedence.\n\nWe had code to deal with this:\n\n    if (defSym.exists && impSym.exists) {\n      if (isPackageOwnedInDifferentUnit(defSym))\n        defSym = NoSymbol\n\nBut, in the `pos/t2458a`, no `impSym` was around, due to filtering\nin `depthOk`. The depth of the imported symbol was the same as the\ndepth of the defined symbol, which didn\'t pass:\n\n    imp.depth > symbolDepth\n\n`depthOk` already had special handling for Java sources: if the\nimport is non-wildcard and depths are equal, retain the import.\n\nThis commit does the same thing for Scala sources, using the\n`isPackageOwnedInDifferentUnit` as the criteria. It also makes\nthe check for the "imported ... is permanently hidden" warning\nto avoid this spurious warning:\n\n    test/files/pos/t2458a/A.scala:3: warning: imported `BitSet\' is permanently hidden by definition of class BitSet in package p\n    import scala.collection.BitSet\n                        ^\n\nI have retained compatibiltiy with the bug under -Xsource:2.10\n\nReview by @adriaanm. I\'l trigger a dbuild of this one to check for fallout.'
3625,'','SI-8403 Fix regression in name binding with imports in templates\nRegressed in dbd8457 which changed `Context#make` to automatically\ninclude the imports from the given `Tree` if it was an `Import`\ntree, rather than requiring callers to call `makeNewImport`.\n\nHowever, this turns out to double up the imports for the "inner" namer\nof a template that starts with imports. The inner namer has a new\nscope, but the same owner and tree as its parent.\n\nThis commit detects this case by seeing if the `Import` tree used\nto consruct the child context is the same as the parent context.\nIf that is the case, we don\'t augment `Context#imports`.\n\nReview by @adriaanm'
3624,'','Remove "will not terminate" from toStream doc\nIt\'s at least not always true:\r\n\r\n    scala> val example = Iterator.continually(1).toStream\r\n    example: scala.collection.immutable.Stream[Int] = Stream(1, ?)'
3623,'','SI-8402 Restore 2.10 variance behavior under -Xsource:2.10\nReview by @retronym.'
3622,'','SI-8395 Regression in pattern matching with nested binds\nRegressed in https://github.com/scala/scala/pull/2848. In particular,\r\nsee 0cf47bdb5b and 017460e63c.\r\n\r\nBecause of the regression, this pattern:\r\n\r\n    (s @ (_s @ (_: String)))\r\n\r\nwas translated into `typeTestStep`, rather than a `bindingStep`. This\r\ncame down the the use of `unbind` in the `TypeBound` extractor.\r\n\r\nMy first step was to remove the `unbind`. That led to another\r\nproblem: the tree now matches `SymbolAndTypeBound`, which extracted\r\n`symbol = s, tpe = String`, ignoring the `_s`. I changed that\r\nextractor to no longer recursively apply to the sub-pattern tree,\r\nwhich is what `MaybeTypedBound` used to do.\r\n\r\nI also checked for other uses of `unbind` in the match translation.\r\nThe only place I found it is in `BoundTree#pt`. I believe that this\r\nusage is correct, or at least, not obviously incorrect.'
3621,'',"SI-8368 respect user-supplied -Dscala.usejavacp in Windows runner\nI got out my 10 foot pole and my Windows VM. Here's #3608 for the .bat scripts.\r\n\r\nReview by @adriaanm"
3620,'','Fixes syntax error in unix runner.\nreview by @adriaanm, @jsuereth '
3619,'',"SI-8392 Guards QuasiquoteClass against non-availability in scala-reflect\nThis assimilates behavior on Quasiquotes to the one on Reflection : if we\r\ndon't have the right resource on classpath, we do without rather than\r\nthrowing.\r\n\r\nSee the bug report for more on rationale (-Xsource flag, early quasiquote\r\nloading in Analyzer through FastTrack, etc).\r\n\r\nReview by @gkossakowski or @xeno-by"
3618,'',"SI-8144 permalinks in scaladoc\nAdded 'Permalink' button (visible on mouse hover) for type's members.\r\nhttps://issues.scala-lang.org/browse/SI-8144\r\n\r\nTested under:\r\n- Firefox 27.0.1,\r\n- Chrome 33.0.1750.146\r\n- Safari 6.1.2"
3617,'','SI-8386 showCode fails to pretty print application to assign\n1) Fix for SI-8386.\r\n2) Tests for attributed trees are restored.'
3616,'','SI-8363 Disable -Ydelambdafy:method in constructor position\nAs @magarciaEPFL has done in his experimental optimizer [1], we can\navoid running into limitations of lambdalift (either `VerifyError`s,\nala SI-6666, or compiler crashes, such as this bug), by using the\nold style of "inline" lambda translation when in a super- or self-\nconstrutor call.\n\nWe might be able to get these working later on, but for now we\nshouldn\'t block adoption of `-Ydelamndafy:method` for this corner\ncase.\n\n[1] https://github.com/magarciaEPFL/scala/blob/GenRefactored99sZ/src/compiler/scala/tools/nsc/transform/UnCurry.scala#L227\n\nReview by @gkossakowski'
3615,'','SI-8376 Fix overload resolution with Java varargs\nWhen comparing specificity of two vararg `MethodTypes`, `isAsSpecific`\ngets to:\n\n```\n  case mt @ MethodType(_, _) if bothAreVarargs =>\n    checkIsApplicable(mt.paramTypes mapConserve repeatedToSingle)\n```\n\nThe formal parameter type of a Java varargs parameter is represented\nas `tq"${defintions.JavaRepeatedParamClass}[$elemTp]"`. For a Scala\nrepeated parameter, we instead use `defintions.RepeatedParamClass`.\n\n`bothAreVarargs` detects `JavaRepeatedParamClass`, by virtue of:\n\n```\ndef isRepeatedParamType(tp: Type)      = isScalaRepeatedParamType(tp) || isJavaRepeatedParamType(tp)\n```\n\nBut, `repeatedToSingle` only considers `RepeatedParamClass`.\n\nThis bug was ostensibly masked in 2.10.3, but became apparent after\na not-quite-refactoring in 0fe56b9770. It would be good to pin that\nchange down to a particular line, but I haven\'t managed that yet.\n\nReview by @adriaanm / @gkossakowski.\n\nI\'ll look at 0fe56b9770 a bit more tomorrow to try to explain why this\never worked in to 2.10.3.'
3614,'',"SI-8196 Runtime reflection robustness for STATIC impl details\nScala's runtime reflection works in few modes. The primary mode reads\nreads out the pickled signatures from ScalaSig annotations, if\navaialable. However, these aren't available for Java-defined classes\n(obviously) nor for local Scala-defined classes (less obviously.),\nand the Scala `Symbol`s and `Types` must be reconstructed from\nthe Java generic reflection metadata.\n\nThis bug occurs in the last case, and is centered in\n`FromJavaClassCompleter`.\n\nIn that completer, member fields and methods are given an owner\nbased on the STATIC modifier. That makes sense for Java defined\nclasses. I'm not 100% if it makes sense for Scala defined classes;\nmaybe we should just skip them entirely?\n\nThis patch still includes them, but makes the ownership-assignment\nmore robust in the face of STATIC members emitted by the Scala\ncompiler backend, such as the cache fields for structural calls.\n(It's reflection all the way down!). We might not have a companion\nmodule at all, so before we ended up owning those by `NoSymbol`,\nand before too long hit the dreaded NSDHNAO crash.\n\nThat crash doesn't exist any more on 2.11 (it is demoted to a\n-Xdev warning), but this patch still makes sense on that branch.\n\nThis commit makes `followStatic` and `enter` more robust when\nfinding a suitable owner for static members. I've also factored\nout the duplicated logic between the two.\n\nReview by @xeno-by\n\nI think this fix should be targetted at 2.10.5 and 2.11.1"
3613,'','SI-8377 - Clarify the asynchronous requirement of ExecutionContext\nhttps://issues.scala-lang.org/browse/SI-8377'
3612,'','SI-8367 Fix positioning of extends, super in bodyless templates\nA refinement of the fix in ac779096.\r\n\r\nJust submitting this for pr-validation against scala-ide, scala-refactoring, as I expect problems.'
3611,'retronym','SI-8385 make sure $quasiquote$tuple gets reified properly \nPreviously due to greediness of SyntacticApplied there was a chance that\r\nquasiquote tuple placeholder got reified as its representation rather\r\nthan its meaning.\r\n\r\nreview @retronym'
3610,'retronym','SI-8369 resetAttrs now correctly accounts for skolems\nresetAttrs (née resetLocalAttrs) has been oblivious to existence of skolems.\r\nNot anymore, which prevents us from reverting to the untyper nightmare.'
3609,'adriaanm',"SI-8370 fixes an infinite loop in repl init\nUnder a weird coincidence of circumstances provided by `sbt console-quick`,\r\nnew XML parsing logic in compiler plugin initialization could lead to stack\r\noverflow errors.\r\n\r\nHere's the abridged sequence events that led to this unfortunate problem\r\n(full description can be found on the JIRA issue page):\r\n\r\n1) Initialization of the compiler underlying the REPL would kick off\r\nplugin initialization.\r\n\r\n2) PluginDescription.fromXML would call into DocumentBuilderFactory, i.e.\r\nDocumentBuilderFactory.newInstance.newDocumentBuilder.parse(xml).\r\n\r\n3) That thing would call into javax.xml.parsers.SecuritySupport.getResourceAsStream,\r\nrequesting META-INF/services/javax.xml.parsers.DocumentBuilderFactory.\r\n\r\n4) That request would get serviced by TranslatingClassLoader provided\r\nby the REPL to expose dynamically compiled code.\r\n\r\n5) TranslatingClassLoader would call translatePath that would call into\r\nIMain.symbolOfIdent trying to map the requested resource onto one of the\r\nclasses defined by the REPL (which don't exist yet, because REPL hasn't\r\nyet finished initializing).\r\n\r\n6) IMain.symbolOfIdent would request IMain.global, which is exactly the\r\ninstance of the compiler that underlies the REPL, and that's currently\r\nbeing initialized.\r\n\r\n7..inf) Repeat until a StackOverflowError."
3608,'',"SI-8368 respect user-supplied -Dscala.usejavacp in unix runner\nI checked, you don't need to \\ escape the ."
3607,'retronym',"SI-8367 revert SI-8192's change to primaryConstructor when isJavaDefined\nthis is some weird stuff"
3606,'retronym',"SI-8375 saner binary incompat errors for macros\nInspired by Brian McKenna's RC1 migration experience, this commit improves\r\nmacro impl binding validation in order to provide more helpful diagnostic\r\nfor this quite frequent class of errors."
3605,'',"SI-8372: unspliceable type printed in error message\nThe b8a76f6 introduced `ArrayOps.{unzip, unzip3}` methods. Both of those methods have ClassTags as context bounds on their type parameters so they can create (and return) instances of Arrays.\r\nThe type inference for those methods is supposed to be guided by implicit evidence that `T <: (T1, T2)` (or `T <: (T1, T2, T3)` in unzip3 case). However, context bounds are desugared into implicit parameters that\r\nprepended in front of implicit parameters declared in source code. That means the implicit evidence won't have a chance to guide type inference because it comes as last implicit parameter.\r\n\r\nThis commit desugars context bounds and puts them at the end of implicit parameter list. This way type inference is guided properly and we get expected compiler errors for missing class tags."
3604,'','SI-8366 make partial function and match trees disjoint\nPreviously one could match a partial function with match quasiquote:\r\n\r\n    scala> val q"$scrutinee match { case ..$cases }" = q"{ case Foo => Bar\r\n    }"\r\n    scrutinee: universe.Tree = <empty>\r\n    cases: List[universe.CaseDef] = List(case Foo => Bar)\r\n\r\nThis was quite annoying as it leaked encoding of partial functions as\r\nMatch trees with empty tree in place of scrutinee.\r\n\r\nThis commit make sure that matches and partial functions are disjoint\r\nand don\'t match one another (while preserving original encoding under\r\nthe hood out of sight of the end user.)\r\n\r\nreview @retronym'
3603,'','SI-8364 fixes cxTree lookup for imports\nThis is reminiscent of the bug that I recently fixed in paradise:\r\nhttps://github.com/scalamacros/paradise/commit/0dc4e35883d357b7cbcdfd83b5b4821c1dcc0bb1.\r\n\r\nWhen doing something non-standard with contexts, we usually have to keep\r\nin mind that new contexts are created not only for trees that demarcate\r\nblocks of code, but also for imports.'
3602,'retronym',"[backport] no longer warns on calls to vampire macros\nAs eloquently elaborated and cleverly named by Travis Brown, macros\r\ndefined in structural types are useful:\r\nhttp://meta.plasm.us/posts/2013/07/12/vampire-methods-for-structural-types/.\r\n\r\nHowever, since such macros are on the intersection of a number of language\r\nfeatures, as usual, there are bugs.\r\n\r\nThis commit fixes an unwanted interaction of macros defined in structural\r\ntypes with the scala.language.reflectiveCalls guard. Since macro calls\r\naren't going to be carried to runtime, there's no need to warn about them."
3601,'','Honour the "maven.repo.local" property while building\nIf the property "maven.repo.local" is defined, then use\r\nits value as the local Maven cache repository while\r\nobtaining artifacts.\r\n\r\nNote that this does not change the location of the\r\nsettings file, which is still in ~/.m2/settings.xml'
3600,'',"Enable binary comp testing. Final build cleanup.\nThis will hopefully by my last changes to build.xml.\r\nFor my grand finale, reduced the line & file count to an all-time low.\r\n\r\nReview by @gkossakowski\r\n\r\nNightly job running to double check the build changes don't break it:\r\n  - https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/1206/console\r\n  - https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual-windows/40/console\r\n\r\nNote: the next item on my TODO list is to build full scala releases nightly, to replace what I removed here (and then some)."
3599,'','Fix typo in log message.\n'
3598,'','SI-8266 Amend advice for deprecated octal 042\nImprove the advice for `f"\\042"` to read:\r\n\r\n```\r\nuse ${\'"\'} or a triple-quoted literal """with embedded " or \\u0022""" instead.\r\n```\r\n\r\nas per the discussion on SI-6476.\r\n\r\nKnuth says that Charles XII came close to introducing octal arithmetic to Sweden,\r\nand Wikipedia doesn\'t deny it.\r\n\r\nI imagine an alternative history in which octal literals are deprecated in Scala\r\nbut required by legislation in Akka. #octal-fan-fiction'
3597,'','SI-5905 Sanity check -language options\nThe option names are hardcoded, but checked by a test.\r\n\r\nThere are no hooks to verify options after the compiler\r\nis constructed.\r\n\r\nIntroduced a `MultiChoiceSetting` required for the\r\nsetting creation framework.'
3596,'retronym',"SI-8333 can't use modifiers if class is in a block\nWas caused by the ordering of parser cases. Need to check for definition\r\nfirst due to the fact that modifiers unquote looks like identifier from\r\nparser point of view.\r\n\r\nreview @retronym"
3595,'','SI-8332 implicit class param unquoting in quasiquotes\nA new api that simplifies handling of implicit parameters has been\r\nmistakingly supporting just methods parameters. This commit adds\r\nsupport for class parameters too.\r\n\r\nreview @retronym'
3594,'retronym',"SI-8331 make sure type select & applied type doesn't match terms\nDue to tree re-use it used to be the fact that type quasiquotes could\r\nmatch term trees. This commit makes sure selections and applied type and\r\ntype applied are all non-overlapping between `q` and `tq`.\r\n\r\nreview @retronym"
3593,'retronym',"SI-8285 use correct kind of map for quasiquote positions\nPreviously mutable.ListMap was used with assumption that it preserved\r\norder of inserted elements (but it doesn't). Surprisingly logic that\r\nassumed ordered elements worked mosly fine on unordered ones. I guess\r\ntwo bugs can cancel each other out.\r\n\r\nreview @retronym"
3592,'retronym','SI-8281 check for unbound placeholder parameters in quasiquote parser\nreview @retronym'
3591,'xeno-by','SI-8275 allow to directly extract block contents of the case def\nDue to the fact that blocks in cases are implicit one might expect to be\r\nable to extract its contents with `..$`.\r\n\r\nreview @xeno-by '
3590,'','Bump versions for 2.11.0-RC1\nTo merge when RC1 is on maven'
3589,'adriaanm','test case that verifies SI-8352\nreview @re^W @adriaanm'
3588,'','Revert "SI-7624 Fix -feature warnings in scala/tools/scalap"\nrework of #3587 to preserve compatibility with partest\r\n\r\nThis reverts commit f2de2c4ec43180351ef1f306bcc5f24643ba5477 because it\r\nbroke both lift-json and json4s libraries that depend on scalap\'s APIs.\r\nArguably, those libraries shouldn\'t depend on unofficial APIs but they do\r\nbecause they had no better alternative at the time (no Scala reflection).\r\n\r\nThe cost of breaking them is not worth minor change of the package.\r\n\r\nThe f2de2c4ec43180351ef1f306bcc5f24643ba5477 mixed two things:\r\n\r\n  1. Fixing feature warnings\r\n  2. Changing package name\r\n\r\nWhen reverting (and resolving conflicts) I tried to keep 1. and revert just\r\n2. However, there were also some questionable changes related to 1. that\r\ngot reverted. In particular, a package object with implicit members that\r\nenable language features is an anti-pattern because members of package\r\nobject are visible both _within_ and _outside_ of the package. Therefore,\r\nuser could use wildcard import for importing everything from scalap\r\npackage and enabled postfixOps language feature unknowingly. I went for\r\njust adding imports in just those few files where they were needed.\r\n\r\nWe had to ensure compatibility with partest, which already depends on the\r\npackage structure that this commit reverts. This is done in the package object in:\r\nsrc/scalap/scala/tools/scalap/package.scala\r\n\r\nConflicts:\r\n\tsrc/partest/scala/tools/partest/nest/Runner.scala\r\n\tsrc/scalap/scala/tools/scalap/scalax/rules/Memoisable.scala\r\n\tsrc/scalap/scala/tools/scalap/scalax/rules/Rule.scala\r\n\tsrc/scalap/scala/tools/scalap/scalax/rules/Rules.scala\r\n\tsrc/scalap/scala/tools/scalap/scalax/rules/scalasig/ClassFileParser.scala\r\n\tsrc/scalap/scala/tools/scalap/scalax/rules/scalasig/ScalaSig.scala'
3587,'','Revert "SI-7624 Fix -feature warnings in scala/tools/scalap"\nThis reverts commit f2de2c4ec43180351ef1f306bcc5f24643ba5477 because it\r\nbroke both lift-json and json4s libraries that depend on scalap\'s APIs.\r\nArguably, those libraries shouldn\'t depend on unofficial APIs but they do\r\nbecause they had no better alternative at the time (no Scala reflection).\r\n\r\nThe cost of breaking them is not worth minor change of the package.\r\n\r\nThe f2de2c4ec43180351ef1f306bcc5f24643ba5477 mixed two things:\r\n\r\n  1. Fixing feature warnings\r\n  2. Changing package name\r\n\r\nWhen reverting (and resolving conflicts) I tried to keep 1. and revert just\r\n2. However, there were also some questionable changes related to 1. that\r\ngot reverted. In particular, a package object with implicit members that\r\nenable language features is an anti-pattern because members of package\r\nobject are visible both _within_ and _outside_ of the package. Therefore,\r\nuser could use wildcard import for importing everything from scalap\r\npackage and enabled postfixOps language feature unknowingly. I went for\r\njust adding imports in just those few files where they were needed.\r\n\r\nConflicts:\r\n\tsrc/partest/scala/tools/partest/nest/Runner.scala\r\n\tsrc/scalap/scala/tools/scalap/scalax/rules/Memoisable.scala\r\n\tsrc/scalap/scala/tools/scalap/scalax/rules/Rule.scala\r\n\tsrc/scalap/scala/tools/scalap/scalax/rules/Rules.scala\r\n\tsrc/scalap/scala/tools/scalap/scalax/rules/scalasig/ClassFileParser.scala\r\n\tsrc/scalap/scala/tools/scalap/scalax/rules/scalasig/ScalaSig.scala'
3586,'','Revert "SI-8315 Better debugging facility for ICode"\nThis reverts commit 0561dd084b5f3c2678eb032a40b85cb25bb6d589.\r\n\r\nWhen the windows nightly broke, git bisect pointed its unwavering finger at this poor soul.\r\n\r\nBuild passes again after the revert: https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual-windows/39/console\r\n\r\nI have no idea why, but the machines don\'t lie (and I don\'t have time right now to dig deeper).\r\nOk, if I had to guess, I\'d say the longer filenames for the .icode files confused windows somehow.'
3585,'','SI-4728 test case\n'
3584,'','minor typos in the doc of applyOrElse\n'
3583,'','SI-8197 clarify overloading resolution with default args\nIf there are multiple applicable alternatives, drop those\r\nthat use default arguments. This is done indirectly by\r\nchecking applicability based on arity\r\n(disallowing tupling to ensure exact arity matching!).\r\nIf defaults are required in the application, the arities\r\nwon\'t match up exactly.\r\n\r\nTODO this `namesMatch` business is not spec\'ed, and is\r\nthe wrong fix for SI-4592. We should instead clarify what\r\nthe spec means by "typing each argument with an undefined expected type".\r\n\r\nWhat does typing a named argument entail when we don\'t know what\r\nthe valid parameter names are? (Since we\'re doing overload resolution,\r\nthere are multiple alternatives that can define different names.)\r\n\r\nLuckily, the next step checks applicability to the individual alternatives,\r\nso it knows whether an assignment is:\r\n - a valid named argument\r\n - a well-typed assignment\r\n - an error (e.g., rhs does not refer to a variable)\r\n\r\nI propose the following solution (as a TODO):\r\ncheck whether a named argument (when typing it in `doTypedApply`)\r\ncould be interpreted as an assign; `infer.checkNames` must not use\r\n`UnitType` for its type unless it\'s a legal assignment'
3582,'',"SI-8251 deprecate `ListBuffer::readOnly`\nThis is a minimal version of #3489, which only deprecates `readOnly`.\r\n\r\nThis is the first step towards fixing the unexpected behavior of `ListBuffer`.\r\n\r\nMany of `ListBuffer`'s operations are forwarded to the underlying `List`,\r\nessentially leaking that abstraction to clients that call e.g., `toIterable`.\r\nWhen the buffer changes, the `Iterable` obtained through `toIterable` will\r\nreflect that change.\r\n\r\nTo avoid this exposure, call `toList` to obtain an immutable copy.\r\n\r\nSee also:\r\nhttps://groups.google.com/d/msg/scala-internals/g_-gIWgB8Os/kWazrALbLKEJ\r\nhttps://gist.github.com/paulp/9081797"
3581,'','SI-3235 math.round() returns wrong results for Int and Long\nMinimal fix for SI-3235.\r\n\r\nNo deprecation or migration messages; if anyone used this to clip Long into Int (with rounding errors from Float), they will observe altered behavior.\r\n\r\nTest verifies behavior.'
3580,'',"SI-8330: Mismatch in stack heights\nThe SI-8233 / 9506d52 missed one case when we need to DROP a null from\r\na stack: when unboxed Unit is an expected type. If we forgot to do that\r\nin a context where two branches were involved we could end up with\r\nunbalanced stack sizes.\r\n\r\nLet's fix that omission and a test covering that specific case to the\r\noriginal test for SI-8233.\r\n\r\nFixes SI-8330."
3579,'xeno-by','Add ScalaDoc to Quasiquotes and Liftables parts of api\nreview @xeno-by @heathermiller'
3578,'',"SI-6493 more robust symbol handling in existentialTransform\nThe fix is only enabled under -Xexperimental, because the\r\nfull fix is blocked by SI-2071.\r\n\r\nTo illustrate the problem, let's compute the result type for\r\n\r\n```\r\ndef foo = { class Foo { class Bar { val b = 2 }}; val f = new Foo; new f.Bar }\r\n```\r\n\r\nNote the inconsistent symbol ids in:\r\n\r\nrawSyms     = List(value f#49740, class Foo#49739, class Bar#49742)\r\nquantifiers + their infos =\r\n  type f.type#49774 <: AnyRef{type Bar#49762 <: AnyRef{val b#49764: Int}} with Singleton,\r\n  type Foo#49775    <: AnyRef{type Bar#49770 <: AnyRef{val b#49772: Int}},\r\n                              type Bar#49773 <: AnyRef{val b#49758: Int}\r\n\r\nIt makes sense to subst the symbols in tp, but the modifyInfo will have\r\nlittle effect on quantifiers. Luckily, coevolveSym will fix up some of\r\nthe inconsistencies, so that we get `f.type#49774.Bar#49762`, which is\r\nextrapolated to `AnyRef{type Bar#49868 <: AnyRef{val b: Int}}#Bar#49868`.\r\n\r\nThe intermediate type `f.type#49774.Bar#49762` motivates the need for\r\nthe `.substSym` above, as `.subst` does not touch the `Bar#49742` in\r\nthe `f#49740.Bar#49742` that we start out with.\r\n\r\nThe remaining problem is that ExistentialExtrapolation will not consider\r\ntype Bar#49868 as existentially bound. Instead, it's looking for the\r\nstale version in quantifiers, Bar#49773. If it was looking for Bar#49868,\r\nthe result type would simply be `AnyRef{val b: Int}`\r\n\r\nTODO: figure out how to compute the full set of quantifiers for extrapolation\r\n      the `doSubst(tp)` will clone more symbols, so we'll probably need to\r\n      traverse its result and somehow correlate the contained symbols to\r\n      those in `quantifiers`..."
3577,'','SI-8324 fix permutation in test filename\nfixup for #3573, thanks @paulp'
3576,'','SI-8325 Accept infix star type outside patterns\nAlso, do not take backticked star as the repeated\r\nparameter marker in postfix position.\r\n\r\nNote: not satisfied with the error messages yet. This is a test run for feedback.\r\n'
3575,'','Fix ./build/<stage>/bin/scaladoc\nWas:\n\n    ./build/quick/bin/scaladoc -version\n    Exception in thread "main" java.lang.NoClassDefFoundError: scala/tools/nsc/ScalaDoc\n    Caused by: java.lang.ClassNotFoundException: scala.tools.nsc.ScalaDoc\n\nNow:\n\n    % for tool in ./build/quick/bin/{fsc,scala,scalac,scaladoc,scalap}; do $tool -version; done\n    Fast Scala compiler version 2.11.0-20140222-144307-b0dcf79875 -- Copyright 2002-2013, LAMP/EPFL\n    Scala code runner version 2.11.0-20140222-144307-b0dcf79875 -- Copyright 2002-2013, LAMP/EPFL\n    Scala compiler version 2.11.0-20140222-144307-b0dcf79875 -- Copyright 2002-2013, LAMP/EPFL\n    Scaladoc version 2.11.0-20140222-144307-b0dcf79875 -- Copyright 2002-2013, LAMP/EPFL\n    Scala classfile decoder version 2.0.1 -- (c) 2002-2013 LAMP/EPFL\n\nReview by @gkossakowski'
3574,'',"SI-7962 Scalac runner does not work within Emacs's terminal\n  - Always set the env.emacs system property - scalac only cares\r\n    about whether the system property has a non-empty value, not\r\n    whether it is set or not. Fixes 7962"
3573,'',"SI-8324 Fix regression in override checks for sealed classes\nadeffda25 changed `Symbol#isEffectivelyFinal` to help the optimizer\nby inferring finality within sealed class hierarchies.\n\nHowever, this change wasn't neccesarily welcome for other clients of\nthat method. In the enclosed test case, we see that overriding checks\nin `RefChecks` regressed.\n\nThis commit moves the enhanced version into a new method and\nselectively uses it in the optimizer (and the tail call optimizer).\n\nReview by @adriaanm"
3572,'',"SI-8197 Only consider immediate params for defaults, overloading\nA recent commit fixed the behaviour of overloading with regards\nto discarding candiates that include default arguments. The old\ncheck was checking the wrong flag.\n\nBut, the new code is actually checking all parameter lists for\ndefaults, which led to a regression in scala-io, which is distilled\nin the enclosed test case. Applications are typechecked one\nparameter list at a time, so a holistic check for defaults doesn't\nseem to make sense; only defaults in the first parameter list\nought to count.\n\nReview (and adoption if needed!) by @adriaanm"
3571,'retronym',"SI-8321 bundles can't be whitebox\nreview @retronym"
3570,'',"Support def macros for constructors\nFixes an oversight that lasted from the times of 2.10.0-M3. Back then we\r\nallowed defs to be a macro, but didn't think of constructors. Of course,\r\nprimary constructors can't be macros, because a class ought to have at\r\nleast one JVM-compatible ctor, but secondary constructors - why not?!\r\n\r\nYou might ask what's the point of turning constructors into macros.\r\nAfter all, constructors have to expand into something that calls into\r\nother constructors. Therefore even if one wants to hide a certain\r\nconstructor from the user by making that constructor private or protected,\r\nit won't help because a public macro constructor would eventually have\r\nto call that hidden constructor, producing a compilation error.\r\n\r\nSo we're stuck, right? Not really! Indeed, we can't expand into\r\na direct call to the hidden ctor, but what we can do is call a companion's\r\nmethod and companions can see private constructors:\r\n\r\n  class C private (x: Int) {\r\n    def this(x: Int) = macro ??? // expands into `C(x)`\r\n  }\r\n\r\n  object C {\r\n    def apply(x: Int) = new C(x)\r\n  }\r\n\r\nNow, you might point out that the signatures of the hidden ctor\r\nand of the macro ctor are the same. So how do we disambiguate? Easy!\r\nLet's wrap our state in a zero-overhead value class!\r\n\r\n  class CState(val x: Int) extends AnyVal\r\n\r\n  class C private (x: CState) {\r\n    def this(x: Int) = macro ??? // expands into `C(x)`\r\n  }\r\n\r\n  object C {\r\n    def apply(x: Int) = new C(new CState(x))\r\n  }"
3569,'retronym',"SI-8316 SI-8318 SI-8248 reintroduces resetAllAttrs\nUnfortunately, due to the aforementioned bugs we have to delay our triumph\r\nover resetAllAttrs.\r\n\r\nTherefore, I'm rolling back the internal changes to scalac introduced in\r\nhttps://github.com/scala/scala/pull/3485. Our public reflection API interface\r\nin Scala 2.11 is still going to contain only resetLocalAttrs, but both\r\nthe reifier and the label typechecker are too heavily addicted to resetAllAttrs\r\nto do away with it right now."
3568,'xeno-by',"Fix quasiquote terminology to be consistent with Scheme \n1. Fix terminology not to contradict Scheme's one\r\n2. Tweak signature of quasiquote's apply to help IDEs\r\n\r\nreview @xeno-by"
3567,'','SI-8315 Fix crash in dead code elimination\nThis bug is blocking the under-consideration #3498.'
3566,'gkossakowski','SI-6455 no longer rewrite .withFilter to .filter\nThis has been deprecated for two major releases now,\r\nand during that time caused plenty of harm (see also SI-7239).\r\n\r\nTime to retire, rewrite.\r\n\r\nWhat say ye, @gkossakowski, @Ichoran & @retronym?'
3565,'gkossakowski','SI-6217 deprecate `_root_` as part of package name\nreview by @gkossakowski'
3564,'retronym',"SI-6675 deprecation warning for auto-tupling in patterns\nNOTE: when the deprecation warning becomes an error,\r\nSI-6111 must become a `won't fix`\r\n\r\nreview by @retronym"
3563,'gkossakowski',"SI-5479 deprecate DelayedInit outside of App\nDelayedInit's semantics are way too surprising.\r\n\r\nFor example, it delays initialization of fields,\r\nso that fields on objects that extend `App`\r\n(which `extends DelayedInit`) are not initialized\r\nuntil the `main` method is called.\r\n\r\nFor more details and a proposed alternative,\r\nsee https://issues.scala-lang.org/browse/SI-4330?jql=labels%20%3D%20delayedinit%20AND%20resolution%20%3D%20unresolved.\r\n\r\nSupport for `App` will continue -- we'll special case it.\r\n\r\nreview by @gkossakowski"
3562,'retronym',"SI-8197 Overload resolution should not consider default arguments\nThe spec says\r\n\r\n> Let B be the set of alternatives in A that are applicable (§6.6)\r\n> [...] It is an error if none of the members in B is applicable. If\r\n> there is one single applicable alternative, that alternative is\r\n> chosen. Otherwise, let C be the set of applicable alternatives which\r\n> don’t employ any default argument in the application to e1, ..., em.\r\n> It is again an error if C is empty. Otherwise, one chooses the most\r\n> specific alternative among the alternatives in C [...].\r\n\r\nThere are many ways to interpret this, but none of them involves\r\nexcluding default getters, which is what the old code was doing.\r\nWe now exclude all alternatives that define any default arguments.\r\n\r\nNOTE: according to SI-4728, this should fail to compile with an\r\nambiguity error. The compiler has been accepting this program\r\nfor all of 2.10.x, as far as I can tell, so let's not change that\r\nfor 2.11.0-RC1..."
3561,'','SI-3235 Deprecate {Double,Float}#{round,ceil,floor}\n'
3560,'','SI-8306: handle SWITCH nodes with just default case\nHandle properly SWITCH nodes that contain just a default case in optimizer\r\n(ConstantOptimization). SWITCH with just default case is expressed as a\r\nnode with empty tags and exactly one label. We can handle such nodes\r\neasily by introducing a shortcut in logic that computes reachableLabels.\r\n\r\nAdd a test case which triggers patmat to generate SWITCH node with just\r\na default case.\r\n\r\nFixes SI-8306.'
3559,'gkossakowski',"SI-1503 don't assume unsound type for ident/literal patterns\nThe fix only kicks in under -Xfuture. We also warn under -Xlint.\r\n\r\nWhat type should a variable bound to the value matched by a pattern have?\r\nTo avoid CCEs, it should be a type that's implied by the matching\r\nsemantics of the pattern.\r\n\r\nUsually, the type implied by a pattern matching a certain value\r\nis the pattern's type, because pattern matching implies instance-of checks.\r\n\r\nHowever, Stable Identifier and Literal patterns are matched using `==`,\r\nwhich does not imply a type for the binder that binds the matched value.\r\n\r\nThe change in type checking due to this fix is that programs that used to crash with a CCE\r\n(because we blindly cast to the type of the pattern, which a `==` check does not imply)\r\nnow get a weaker type instead (and no cast). They may still type check, or they may not.\r\n\r\nTo compensate for this fix, change `case x@Foo => x` to `case x: Foo.type => x`,\r\nif it's important that `x` have type `Foo.type`.\r\n\r\nSee also:\r\n- SI-4577: matching of singleton type patterns uses `eq`,\r\n  not `==` (so that the types are not a lie).\r\n- SI-5024: patmat strips unused bindings, but affects semantics"
3558,'retronym',"SI-4577 singleton type pattern test should use `eq`, not `==`\nI find it hard to imagine anyone is relying on `case x: foo.type =>`\r\nerroneously being compiled to `foo == x` instead of the spec'ed `foo eq x`,\r\nso let's finally fix this.\r\n\r\nMaybe my imagination is lacking, so feel free to veto this, @retronym and @gkossakowski."
3557,'retronym',"SI-8224 Fix regression in f-bound aware LUBs\nDisable the heuristic approach to recursive bounds unless\r\nthe compiler is running under `-Dscalac.experimental.lub`.\r\n[NOTE: the above part of the patch was authored by @adriaanm,\r\n the rest is by the commit's original author.]\r\n\r\nIn db46c71e88, steps were taken to avoid blowing up in the\r\npathological LUB calculation needed for:\r\n\r\n    def trav = List(List(), Stream())\r\n\r\nThis skipped a level in the base class sequence when f-bounds\r\nwere detected at the current level.\r\n\r\nIn that example, when `lublist` was about to:\r\n\r\n    mergePrefixAndArgs(\r\n      typeOf[LinearSeqOptimized[A, List[A]]],\r\n      typeOf[LinearSeqOptimized[A, Stream[A]]],\r\n    )\r\n\r\nIf it proceeded (as in 2.10.3), the LUB is invalid:\r\n\r\n    error: type arguments [B[_ >: D with C <: B[_ >: D with C <: A]],s.c.immutable.LinearSeq[B[_ >: D with C <: A]] with s.c.AbstractSeq[B[_ >: D with C <: A]] with s.c.LinearSeqOptimized[B[_ >: D with C <: A],s.c.immutable.LinearSeq[A] with s.c.AbstractSeq[A] with s.c.LinearSeqOptimized[A,Immutable with Equals with java.io.Serializable] with java.io.Serializable] with java.io.Serializable] do not conform to trait LinearSeqOptimized's type parameter bounds [+A,+Repr <: s.c.LinearSeqOptimized[A,Repr]]\r\n\r\nTo avoid this, the added code would skip to the first non-F-bounded\r\nbase type of the same arity of each element in the list. This would\r\nget to:\r\n\r\n    LinearSeqLike[D, Stream[D]]\r\n    LinearSeqLike[C, List[C]]\r\n\r\nwhich are lubbable without violating the type constraints.\r\n\r\nI don't think this was the right remedy. For starters, as seen in\r\nthis bug report, SI-8224, if the list of types are identical we\r\nhave let a perfectly good lub slip through our fingers, and end up\r\ncalculating too general a type.\r\n\r\nMore generally, if the type arguments in f-bounded positions coincide,\r\nwe don't risk calculating a ill-bounded LUB.\r\n\r\nFurthermore, the code was widening each of the types separately;\r\nthis isn't something we want to do within `if (isUniformFrontier)`.\r\nAFAICT this was just wasteful and as all `ts0` start with the same\r\ntype symbol, so `typeConstructorList` should be uniform.\r\n\r\nThis commit restricts this base-class skipping to situations where\r\nthe argument inferred for an type argument that is used as an f-bound\r\nis not:\r\n\r\n    a) an existential (as created by `mergePrefixAndArgs` in invariant\r\n      positions.), or\r\n    b) equivalent to one of the corresponding input type arguments\r\n       (this is the case that fixes the regression in pos/8224.scala)"
3556,'gkossakowski','SI-3235 math.round() returns wrong results for Int and Long\nNear-minimal fix for math.round() issue.  (Based on a more extensive fix proposed by soc.)\r\n\r\nRichLong intercepts calls to the four floating-point-only methods of .math: round, rint, ceil, and floor.\r\n\r\nAlso catches round on Int/Long in scala.math.'
3555,'retronym',"Small Predef cleanup\nRebased and improved #3553's fix for SI-8229.\r\nAlso rename Predef.conforms to Predef.$conforms so it can't accidentally be shadowed."
3554,'','SI-8065 Regression in implicit resolution\nFollow-up to https://github.com/scala/scala/pull/3540'
3553,'','SI-8219 Source compatible name for implicit any2stringadd\nTo support the established pattern for disabling it for\nan compilation unit.\n\nReview by @adriaanm'
3552,'',"Optimization: remove assertion from SubstMap constructor\nA profile [1] reported 3% of a compile run was spent here.\n\nThis commit demotes the eager check to -Xdev.\n\nThis assertion was added in e557acb9a7.\n\n[1] https://dl.dropboxusercontent.com/u/106552/perf/rudder-nailgun-2014-02-18-1.snapshot\n\nReview by @adriaanm. I was reminded of this inefficiency\nwhile profiling compilation of @fanf's code base."
3551,'retronym','[nomaster] backports 609047ba37\nreview @retronym @gkossakowski'
3550,'','SI-7932 Exclude PolyTypes from Java generic signatures\nIn the enclosed test case, we were emitting just the result type of\n`[a, b]Float` in the Java generic signature.\n\nThis resulted in a `GenericSignatureFormatError`.\n\nThis commit changes `argSig` to project such type functions to `*`\ninstead.\n\nThe test case shows that we still emit the class when we use\nits type constructor directly as the type argument.\n\nReview by @adriaanm'
3549,'','SI-5134 Test case for fixed DelayedInit / structural type bug\nAs with SI-5655, this started working in b4fbb7be0e by @magarciaEPFL\n\nReview by @gkossakowski'
3548,'','SI-5165 separate compilation test Java annotations bug\nProgressed at the genesis of GenASM, dc6a49337f.\n\nReview by @gkossakowski'
3547,'','SI-5565 Test case for fixed delayed init bug\nFixed in b4fbb7be0e by @magarciaEPFL\r\n\r\nReview by @gkossakowski'
3546,'retronym','CodePrinter added to Printers 2.11.0\n1. Typed trees printer is added to internal.Printers (as a part of CodePrinter). \r\nCodePrinter generates the code for passed attributed/unattributed trees.\r\n2. Attributed val/var processing for syntactics is added (SI-8180).\r\n3. Tests for CodePrinter are added.\r\n4. Code cleanup for EOL-printing #3377\r\n\r\nPrevious version (with comments): #3481'
3545,'','SI-8301 fix regression with refinement subtyping, wildcard type.\nIn the enclosed test case, the list of candidate implicit is\nchecked for eligibility with the view by:\n\n    pt = Test.sym.type => ?{def asFreeType: ?}\n    tp = (sym: Test.u.Symbol)Test.u.CompatibleSymbol\n    matchesPt(tp, pt)\n\nThis ends up in `TypeComparers#specializesSym`, which compares:\n\n   symLo = asFreeType: => Universe.this.TypeSymbol\n   symHi = asFreeType: ?\n\nBefore the regression in fada1ef6, that method called `isStable`\non both of these to make sure that `symLo` was as least as stable\nas `symHi`. Both returned `false`, and, they matched.\n\nAfter that refactoring, two calls were made. `isStable` *only*\nchecked for stability, and gave the same results as before.\nBut, the new check for volatility believes that the low symbol\nwas more volatile than the high, because `WildCardType` is treated\nas non-volatile.\n\nReally, it should have the same volatility as whatever it is\nbeing compared to, so that these sort of comparisons yield true.\n\nThis commit ammends `specializesSym` to special case `symHi: ?`,\nand ignore the volatilty gap in that case.\n\nReview by @adriaanm, /cc @xeno-by'
3544,'','Toning down the noise of -Xlint and allow `-optimise -Yinline:false`\nMotivation in the commit messages. I think the deluge of warnings\nform unused imports is a regression that will turn away X-linters.\n\nAnd we\'ve had reports of spurios "unused local" warnings, too,\nthat suggest this feature needs more time to stabilize.\n\nWhile I was in settings land, I implemented something I\'ve been\nmissing for ages, the ability to disable individual settings within\na group.'
3543,'retronym',"SI-5920 enables default and named args in macros\nFixes a tiny vararg mistake introduced in https://github.com/scala/scala/pull/3397, covers vararg expansion extensively, and additionally makes sure that new code paths are only taken by the code that didn't previously compile (named/default macro applications)."
3542,'','Revert "SI-5920 enables default and named args in macros"\nThis reverts commit a02e053a5dec134f7c7dc53a2c1091039218237d.\n\nReview by @xeno-by'
3541,'retronym',"SI-5920 hardens macro engine against invalid inputs\nDue to an unexpected combination of c.abort's in Slick codebase (something\r\nthat I've yet to minimize), it was possible for a Block of erroneous macro\r\napplications to enter macro engine, wreaking havoc in undoNamesDefaults.\r\nThis commit prevents this from ever happening again."
3540,'','SI-8065 Regression in implicit resolution\nFollow-up to https://github.com/scala/scala/pull/3408'
3539,'retronym',"Avoid storing source file contents twice\nBatchSourceFile instances contain two almost identical character arrays,\r\ncontent0 and content. What's worse, content0 is even public. Instead,\r\ncontent0 should just be a constructor parameter. This seems the residual\r\nof an incomplete refactoring.\r\n\r\nI observed this waste of memory during debugging; after applying this\r\npatch, I've verified by hand that the second field indeed disappears.\r\n\r\nI don't expect a measurable difference, but this patch is not premature\r\noptimization because it makes code more logical.\r\n\r\nReview by @retronym ."
3538,'','README.md: Add link to CONTRIBUTING.md\nI think this link also appears when opening pull requests, but one needs to read this document before pushing the branch.\r\n\r\nBTW:\r\n- there\'s also another version of the pull request policy [here](https://github.com/scala/scala/wiki/Pull-Request-Policy) on the wiki, which is more up-to-date. @heathermiller, I guess this needs consolidation?\r\n- @paulp is listed as the only reviewer for "repl, compiler performance", which seems to place on him a possibly unwanted load. I suspect listing a second reviewer is appropriate. (I don\'t propose removing him unless he asks to be removed).'
3537,'','SI-6566, unsoundness with alias variance: document fix\nCommit a419799f872d5aae99728d711b1ced89e06804a8 changed the behavior of\r\nrelativeVariance, but without updating the corresponding comment. Fix\r\nthat.'
3536,'xeno-by','TypedTreePrinter added to Printers\nSupersedes https://github.com/scala/scala/pull/3481'
3535,'','SI-7475 use intersection type for pattern type\nUsually, the type of a pattern binder is an intersection of\r\nthe scrutinee type and the pattern type.\r\n\r\nWe used to "simplify" this intersection to eliminate\r\n"redundancies", so that `intersect(Sub, Super)` will just\r\nbe `Sub` (where `Sub` <:< `Super`).\r\n\r\nBut, if we are nested in `Super` there is an observable difference\r\nbetween `Sub` and `Sub with Super`. Only the latter will allow\r\nuse to select private members of `Super`.'
3534,'adriaanm','Add an extremely well-commented test\nThis commit includes a test for some simple existential subtyping\r\nchecks. It is exceptionally well-commented and may be helpful to\r\nsomeone trying to figure out what the rules are (supposed to be)\r\nin the future.\r\n\r\nReview by @retronym'
3533,'retronym','SI-8283 mutation-free bound inference for existentials\nA safer version of the fix for SI-6169 (#3471)\r\n\r\nreview by @retronym'
3532,'adriaanm','SI-7711 Do not emit extra argv in script body\nTake away `argv` and make `args` the standard parameter name.\r\n\r\nThis is a quick fix to avoid "unused local" lint error.  All\r\nthe examples use `args`; in particular, "Step 4. Write some\r\nScala scripts" in "Programming in Scala" uses `args`.\r\n\r\nI see the footnote there is also where Odersky concatenation is\r\nspecified, `"Hello, "+ args(0) +"!"` with no space next to the\r\nliterals.'
3531,'','SI-8188 NPE during deserialization of TrieMap\nThe writer was using the constructor headf and ef instead of the internal vars hashingobj and equalityobj.'
3530,'',"SI-6632 ListBuffer's updated accepts negative positions\nChanged the behavior in SeqLike.updated (which would silently accept negatives and throw on empty.tail) to throw IndexOutOfBoundException.\r\n\r\nUpdated tests to verify the behavior in ListBuffer.  Everything else SeqLike will come along for the ride."
3529,'adriaanm',"SI-8072 rationalize public implicits in scala parallel collections\nPretty much everything seems like it's intended for internal use, so I wrapped it in a (deprecated) object.\r\n\r\nSplit toParArray out and put it in an implicit class."
3528,'adriaanm',"SI-6908 FlatHashTable and things that depend on it can't store nulls\nFixed ParFlatHashTable to use entryToElem which correctly converts sentinels to nulls."
3527,'adriaanm',"SI-8264 scala.collection.immutable.HashSet#- returns broken Set\nWas an error in HashSet's handling of removal of an element when a HashTrieSet should turn into a HashSet1.\r\n\r\nAlso slightly modified HashMap's filter0 to more closely match HashSet (by adding the same comment)."
3526,'gkossakowski',"SI-8276 Test for cyclic error caused by (reverted) SI-1786 fix\nWe reverted SI-1786 recently on the grounds that its means of\navoiding cycles (not sharpening bounds of T[_] when T is\nuninitialized) caused unacceptable non-determinism (well:\ncompilation order dependency) to type inference.\n\nNary a day later, @gkossakowski hit a regression in scala-io.\nBisection revealed that it stopped working in 2dbd17a2 and\nstarted working agiain after the revert. How's that for\nprescience!\n\nI've distilled the cyclic error in scala-io in this test\ncase.\n\nI'm yet to pinpoint this, followon error, which didn't survive\nthe shrink ray, and only appeared in the original code:\n\n    error: java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOptimized$class.apply(LinearSeqOptimized.scala:51)\n\tat scala.collection.immutable.List.apply(List.scala:83)\n\tat scala.reflect.internal.tpe.TypeMaps$AsSeenFromMap.correspondingTypeArgument(TypeMaps.scala:5\n\nReview by @gkossakowski.\n\n/cc @adriaanm (it will make a good test case for the alternative\napproach you're trying.)"
3525,'adriaanm','SI-8177 specializeSym must use memberInfo on high side\nWhen determining whether member `symLo` of `tpLo`\r\nhas a stronger type than member `symHi` of `tpHi`,\r\nshould we use memberType or memberInfo?\r\n\r\nWell, memberType transforms (using `asSeenFrom`) `sym.tpe`,\r\nwhereas memberInfo performs the same transform on `sym.info`.\r\nFor term symbols, this ends up being the same thing (`sym.tpe == sym.info`).\r\nFor type symbols, however, the `.info` of an abstract type member\r\nis defined by its bounds, whereas its `.tpe` is a `TypeRef` to that type symbol,\r\nso that `sym.tpe <:< sym.info`, but not the other way around.\r\n\r\nThus, for the strongest (correct) result,\r\nwe should use `memberType` on the low side.\r\n\r\nOn the high side, we should use the result appropriate\r\nfor the right side of the `<:<` above (`memberInfo`).'
3524,'adriaanm',"SI-8280 regression in implicit selection.\nIn 2fa2db7840 I fixed a bug where applicable implicit conversions\r\nwould not be found for numeric types if one introduced any aliasing\r\nor singleton types, for the usual reasons involving the absence of\r\nuniform type normalization. See pos/t7228 for examples - that test\r\ncase has 20 errors in 2.10.3 but compiles in master.\r\n\r\nAn unintended side effect was making implicit search less oblivious.\r\nIt turns out that in so doing I had created ambiguity where there was\r\nnone before. Not because it was any more ambiguous, but because the\r\ncompiler now had the wits to notice the ambiguity at an earlier time.\r\n\r\nThe fix for this is not intuitive. The way the internal logic is,\r\nwe need to keep the wool over implicit search's eyes, which leads\r\nto those unrecognized types being passed to adapt, where they are\r\nrecognized and weak subtyping suffices to be more specific. It is\r\nsufficient for SI-7228 that weak subtyping be done correctly - the\r\nother change, which is reverted here, was exposing the type arguments\r\nof Function1 when a view exists as a subtype of Function1.\r\n\r\nIt is also possible this could be remedied by calling weak_<:<\r\nsomewhere which is presently <:<, but I don't know where and it\r\nhas a far greater chance of affecting something else than does\r\nthis, which is a straight reversion of a post-2.10.3 change."
3523,'adriaanm','SI-5900 Fix pattern inference regression\nRebase #3514'
3522,'adriaanm',"SI-6493 more robust symbol handling in existentialTransform\nTo illustrate the problem, let's compute the result type for\r\n\r\n```\r\ndef foo = { class Foo { class Bar { val b = 2 }}; val f = new Foo; new f.Bar }\r\n```\r\n\r\nNote the inconsistent symbol ids in:\r\n\r\nrawSyms     = List(value f#49740, class Foo#49739, class Bar#49742)\r\nquantifiers + their infos =\r\n  type f.type#49774 <: AnyRef{type Bar#49762 <: AnyRef{val b#49764: Int}} with Singleton,\r\n  type Foo#49775    <: AnyRef{type Bar#49770 <: AnyRef{val b#49772: Int}},\r\n                              type Bar#49773 <: AnyRef{val b#49758: Int}\r\n\r\nIt makes sense to subst the symbols in tp, but the modifyInfo will have\r\nlittle effect on quantifiers. Luckily, coevolveSym will fix up some of\r\nthe inconsistencies, so that we get `f.type#49774.Bar#49762`, which is\r\nextrapolated to `AnyRef{type Bar#49868 <: AnyRef{val b: Int}}#Bar#49868`.\r\n\r\nThe intermediate type `f.type#49774.Bar#49762` motivates the need for\r\nthe `.substSym` above, as `.subst` does not touch the `Bar#49742` in\r\nthe `f#49740.Bar#49742` that we start out with.\r\n\r\nThe remaining problem is that ExistentialExtrapolation will not consider\r\ntype Bar#49868 as existentially bound. Instead, it's looking for the\r\nstale version in quantifiers, Bar#49773. If it was looking for Bar#49868,\r\nthe result type would simply be `AnyRef{val b: Int}`\r\n\r\nTODO: figure out how to compute the full set of quantifiers for extrapolation\r\n      the `doSubst(tp)` will clone more symbols, so we'll probably need to\r\n      traverse its result and somehow correlate the contained symbols to\r\n      those in `quantifiers`..."
3521,'retronym',"SI-8270 unconfuses bundles and vanilla macros\nThis fixes a mistake in macro impl ref typechecking that used to have\r\nan heuristic to figure out whether it looks at a bundle method ref or at\r\na vanilla object method ref. Under some circumstances the heuristic could\r\nfail, and then the macro engine would reject perfectly good macro impls.\r\n\r\nNow every macro impl ref is typechecked twice - once as a bundle method ref\r\nand once as a vanilla object method ref. Results are then analyzed,\r\nchecked against ambiguities (which are now correctly reported instead\r\nof incorrectly prioritizing towards bundles) and delivered to the macro\r\nengine.\r\n\r\nThe only heuristic left in place is the one that's used to report errors.\r\nIf both bundle and vanilla typechecks fail, then if a bundle candidate\r\nlooks sufficiently similar to a bundle, a bundle typecheck error is reported\r\nproviding some common bundle definition hints."
3520,'retronym',"SI-8269 tolerates CaseDefs with empty bodies\nThis commit proposes to make `CaseDef(_, _, EmptyTree)` behave the\r\nsame as `CaseDef(_, _, Literal(Constant(())))` with respect to typechecking.\r\n\r\nIt's not like we absolutely have to have that, but it would be definitely\r\nuseful for people who don't remember default values of tree parts by heart."
3519,'',"SI-8244 Fix raw type regression under separate compilation\n[Rebase of #3483 that also avoids overlapping test files t8244b/ became t8244e/]\r\n\r\nIn #1901, handling of raw types encountered in signatures during class\r\nfile parsing was changed to work in the same manner as\r\n`classExistentialType`, by using\r\n`existentialAbstraction(cls.tparms, cls.tpe_*)`\r\n\r\nBut this never creates fresh existential symbols, and just sticks\r\nthe class type parameters it `quantified`:\r\n\r\n\tscala> trait T[A <: String]\r\n\tdefined trait T\r\n\r\n\tscala> val cls = typeOf[T[_]].typeSymbol\r\n\tcls = trait T#101864\r\n\r\n\tscala> cls.typeParams\r\n\tres0 = List(type A#101865)\r\n\r\n\tscala> cls.tpe_*\r\n\tres1 = T#101864[A#101865]\r\n\r\n\tscala> classExistentialType(cls)\r\n\tres3 = T#101864[_ <: String#7209]\r\n\r\n\tscala> val ExistentialType(quantified, result) = res3\r\n\tList(type A#101865)\r\n\r\nIn the enclosed test case, this class type parameter was substituted\r\nduring `typeOf[X] memberType sym`, which led us unsoundly thinking\r\nthat `Raw[_]` was `Raw[X]`.\r\n\r\nI've added a TODO comment to review the other usages of\r\n`classExistentialType`.\r\n\r\nTest variations include joint and separate compilation, and the\r\ncorresponding Scala-only code. All fail with type errors now,\r\nas we expect. I've also added a distillation of a bootstrap\r\nerror that failed when I forgot to wrap the `existentialType`."
3518,'',"SI-7753 InstantiateDependentMap narrows type of unstable args\nRebase of  #3507, already LGTM'ed over there.\r\n\r\n[Most of this comment and the initial fix were implemented by Jason Zaugg.\r\nI just cleaned it up a bit.]\r\n\r\nAfter a soundness fix in , instantiation of dependent\r\nmethod type results behaved differently depending on whether the argument\r\nfrom which we were propagating information had a stable type\r\nor not. This is particular to substitution into singleton types\r\nover the parameter in question.\r\n\r\nIf the argument was stable, it was substituted into singleton\r\ntypes, such as the one below in the prefix in `a.type#B`\r\n(which is the longhand version of `a.B`)\r\n\r\n  scala> class A { type B >: Null <: AnyRef }\r\n  defined class A\r\n\r\n  scala> object AA extends A { type B = String }\r\n  defined object AA\r\n\r\n  scala> def foo(a: A): a.B = null\r\n  foo: (a: A)a.B\r\n\r\n  scala> foo(AA)\r\n  res0: AA.B = null\r\n\r\nBut what if it isn't stable?\r\n\r\n  scala> foo({def a = AA; a: A { type B <: String}})\r\n  res1: a.B = null\r\n\r\nThis commit changes that to:\r\n\r\n  scala> foo({def a = AA; a: A { type B <: String}})\r\n  res1: A{type B <: String}#B = null"
3517,'retronym',"SI-8271 ignore free term values if we can't see them\nMigration of reification from resetAllAttrs to resetLocalAttrs uncovered\r\na serious bug with reifications of free terms that could emit references\r\nto symbols that don't belong to current lexical scopes. Such symbols can\r\narise when recursively reifying owners of existentials that can come from\r\narbitrary places in the program.\r\n\r\nThis commit ignores values of such free terms (reifying them as ???)\r\nin order to plug an issue that would otherwise be a non-workaroundable\r\nregression in 2.11.0-RC1.\r\n\r\nI don't have a very good understanding of this thing, but intuitively\r\nwe shouldn't even think of reifying existentials that originate elsewhere.\r\nFrom what I can see from my brief excursion into typer, a typical approach\r\nof dealing with this is skolemizing existentials that come from elsewhere\r\nand then packing them up by calling existentialAbstraction on created skolems.\r\nTheoretically we could apply the same approach to reified types, but\r\nthat will have to remain future work, as that would be too risky for RC1."
3516,'retronym'," SI-8177 co-evolve more than just RefinedTypes \n[Rebase and improvement of #3482]\r\n\r\n`asSeenFrom` produced a typeref of the shape `T'#A` where `A` referred to a symbol\r\ndefined in a `T` of times past.\r\n\r\nMore precisely, the `TypeRef` case of `TypeMap`'s `mapOver` correctly modified a prefix\r\nfrom having an underlying type of `{ type A = AIn }` to `{ type A = Int }`,\r\nwith a new symbol for `A` (now with info `Int`), but the symbol in the outer\r\n`TypeRef` wasn't co-evolved (so it still referred to the `A` in `{ type A = AIn }`\r\nunderlying the old prefix).\r\n\r\n`coEvolveSym` used to only look at prefixes that were directly `RefinedType`s,\r\nbut this bug shows they could also be `SingleType`/`ThisType`s with an underlying `RefinedType`,\r\nso we look for a prefix's for a refinement class for a type symbol instead.\r\n\r\nReview by @retronym  "
3515,'gkossakowski','A test case for a name binding progression\nI noticed the change when adapting Slick to work with\nScala 2.11 in `AbstractSourceCodeGenerator.scala`.\nThe behaviour changed in a70c8219.\n\nThis commit locks down the new, correct behaviour with a test.\n\nReview by @gkossakowski\n\n/cc @szeiger, @cvogt'
3514,'adriaanm',"SI-5900 Fix pattern inference regression\nDeets in the commits, review by @adriaanm\n\n/cc @paulp (we'll take another swing at SI-7886 in 2.12)"
3513,'retronym','typecheck(q"class C") no longer crashes\nMemberDefs alone can\'t be typechecked as is, because namer only names\r\ncontents of PackageDefs, Templates and Blocks. And, if not named, a tree\r\ncan\'t be typed.\r\n\r\nThis commit solves this problem by wrapping typecheckees in a trivial block\r\nand then unwrapping the result when it returns back from the typechecker.'
3512,'',"SI-261 private vals in traits depend on composition order\nFix for SI-7475 in #3440 took care of this one.\r\n\r\nI nixed the old (redundant) test cases and replaced by a single run/ test,\r\nwhich didn't compile until.\r\n\r\n@retronym, please do the merge-honors."
3511,'densh','SI-8266 Deprecate octal escapes in f-interpolator\nAlso turns the f-interpolator into a migration\r\nassistant by suggesting alternatives for the\r\nstandard escapes.\r\n\r\nJust a little brown-bagged exercise, in case it is useful.\r\n\r\nIt would have been more fun if it could have recommended replacing `\\042` with \'$"`.\r\n'
3510,'',"SI-6493 more robust symbol handling in existentialTransform\nTo illustrate the problem, let's compute the result type for\r\n\r\n```\r\ndef foo = { class Foo { class Bar { val b = 2 }}; val f = new Foo; new f.Bar }\r\n```\r\n\r\nNote the inconsistent symbol ids in:\r\n\r\n```\r\nrawSyms     = List(value f#49740, class Foo#49739, class Bar#49742)\r\nquantifiers + their infos =\r\n  type f.type#49774 <: AnyRef{type Bar#49762 <: AnyRef{val b#49764: Int}} with Singleton,\r\n  type Foo#49775    <: AnyRef{type Bar#49770 <: AnyRef{val b#49772: Int}},\r\n                              type Bar#49773 <: AnyRef{val b#49758: Int}\r\n```\r\n\r\nIt makes sense to subst the symbols in tp, but the modifyInfo will have\r\nlittle effect on quantifiers. Luckily, coevolveSym will fix up some of\r\nthe inconsistencies, so that we get `f.type#49774.Bar#49762`, which is\r\nextrapolated to `AnyRef{type Bar#49868 <: AnyRef{val b: Int}}#Bar#49868`.\r\n\r\nThe intermediate type `f.type#49774.Bar#49762` motivates the need for\r\nthe `.substSym` above, as `.subst` does not touch the `Bar#49742` in\r\nthe `f#49740.Bar#49742` that we start out with.\r\n\r\nThe remaining problem is that ExistentialExtrapolation will not consider\r\ntype Bar#49868 as existentially bound. Instead, it's looking for the\r\nstale version in quantifiers, Bar#49773. If it was looking for Bar#49868,\r\nthe result type would simply be `AnyRef{val b: Int}`\r\n\r\nTODO: figure out how to compute the full set of quantifiers for extrapolation\r\n      the `doSubst(tp)` will clone more symbols, so we'll probably need to\r\n      traverse its result and somehow correlate the contained symbols to\r\n      those in `quantifiers`...\r\n\r\nreview by @retronym"
3509,'','Revert "SI-1786 incorporate defined bounds in inference"\nHave to revert because the stricter bounds it inferred break e.g., slick.\r\nWorse, the fix was compilation order-dependent.\r\n\r\nThere\'s a less invasive fix (SI-6169) that could be generalized\r\nin `sharpenQuantifierBounds` (used in `skolemizeExistential`),\r\nbut I\'d rather not mess with existentials at this point.\r\n\r\nThis reverts commit e28c3edda4dd405ed382227d2a688b799bf33c72.\r\n\r\nConflicts:\r\n\tsrc/compiler/scala/tools/nsc/typechecker/Typers.scala\r\n\ttest/files/pos/t1786.scala\r\n\r\nreview by @retronym'
3508,'','Add a great test case.\nCreated to convince moors that certain code should compile, it\r\nwound up flushing out some quite nutty behavior. Some day this\r\nwill compile rather than having an 11-failure checkfile.'
3507,'',"SI-7753 InstantiateDependentMap narrows type of unstable args\n[Most of this comment and the initial fix were implemented by Jason Zaugg.\r\nI just cleaned it up a bit.]\r\n\r\nAfter a soundness fix in SI-3873, instantiation of dependent\r\nmethod type results behaved differently depending on whether the argument\r\nfrom which we were propagating information had a stable type\r\nor not. This is particular to substitution into singleton types\r\nover the parameter in question.\r\n\r\nIf the argument was stable, it was substituted into singleton\r\ntypes, such as the one below in the prefix in `a.type#B`\r\n(which is the longhand version of `a.B`)\r\n\r\n  scala> class A { type B >: Null <: AnyRef }\r\n  defined class A\r\n\r\n  scala> object AA extends A { type B = String }\r\n  defined object AA\r\n\r\n  scala> def foo(a: A): a.B = null\r\n  foo: (a: A)a.B\r\n\r\n  scala> foo(AA)\r\n  res0: AA.B = null\r\n\r\nBut what if it isn't stable?\r\n\r\n  scala> foo({def a = AA; a: A { type B <: String}})\r\n  res1: a.B = null\r\n\r\nThis commit changes that to:\r\n\r\n  scala> foo({def a = AA; a: A { type B <: String}})\r\n  res1: A{type B <: String}#B = null\r\n\r\nreview by @retronym"
3506,'',"SI-8263 Avoid SOE in logicallyEnclosingMember\nNot sure when the regression hit, but we're seeing this in the\nSBT build. It's probably a mistake to be calling this method\non somthing that isn't owned by a method, but let's not SOE\nin that case.\n\nThis is analagous with the way the `NoSymbol#owner` doesnt throw\nand exception anymore.\n\nReview by @gkossakowski"
3505,'','Tweak parser entry point for pq""\nPreviously pq"" used `pattern1` which required parens to be used in alternative pattern. This commit tweaks it to support parens-free `pq"a | b"` syntax. Also adds some tests for alternative patterns.\r\n\r\nreview @xeno-by'
3504,'gkossakowski','SI-8167 readLine shold flush output before reading input\n(patch by @retronym from #3393, I just rebased it)\r\n\r\nAs reported on scala-user:\r\n\r\n> Using `scala.Predef.readLine(text: String, args: Any*)`\r\n> on Windows causes strange behavior. If I am leaving some\r\n> part of `text` unforced to be flushed (say, "---\\nEnter new\r\n>  expression >") then "Enter new expression >" flushed only\r\n> after Enter press. Still, it works fine on Ubuntu and (seems like)\r\n> on MacOS.\r\n>\r\n> My workaround is to force `java.lang.System.out` (that readLine\r\n> depends on to write welcome string) to flush output like\r\n> "---\\nEnter new expression >\\n".'
3503,'adriaanm',"SI-7475 Private members aren't inheritable, findMember overhaul\nRebase of #3440"
3502,'','Fix regression for using Scala IDE on scala-library\nReview by @dragos'
3501,'',"Alternate approach to coevolveSym\nThis is a different variation on #3482. I'm opening a PR mostly to demonstrate that the tests pass."
3500,'','scala.tools.jline.internal.Log push stack traces to StdOut without regard to PrintStream output\nscala.tools.jline.internal.Log at line 61 always display stack traces at StdOut. This is very annoying in OSGi environment when InterruptedException was thrown. Console is overloaded with useless garbage.'
3499,'xeno-by','Make handling of tuples more consistent in quasi-quotes\nOn one hand we know that `q"($expr)"` is the same as `q"$expr"`. On the other if we wrap it into a list and splice as `q"(..$expr)"` we get a `Tuple1` which is inconsistent.\r\n\r\nThis pull request fixes this inconsistency by making `q"(..$expr)"` being equivalent `q"(${expr.head})"` for single-element list.\r\n\r\nWe also add support for matching of expressions as single-element tuples (similarly to blocks) and remove liftables and unliftables for `Tuple1` (which aren\'t clearly defined any longer due to `q"(foo)" == q"foo"` invariant).\r\n\r\nreview @xeno-by'
3498,'gkossakowski','SI-8240 Consider rolling back optimizations for List\nSome compiler-specific optimizations turn out to be very helpful for Lists in general.\r\n\r\n  * List map can be a lot faster (up to 5x!)\r\n  * List collect can be considerably faster (up to 2.5x)\r\n  * List flatMap can be a bit faster (1.5x)\r\n  * List take can be slightly faster (1.1x) and have better structural sharing\r\n\r\nThese appear to be unqualified wins (tested), even in a scenario with mixed collections.  This is expected: detecting the builder is faster than the otherwise mandatory object creation, and multiple dispatch is mostly a wash since it was already multiple dispatch in getting to the builder.'
3497,'adriaanm','SI-8129 Make Object#== override Any#==\n[This is a rebase of #3464]\r\n\r\nAnd the same for !=\r\n\r\nIf we tried to declare these signatures in non-fictional classes,\r\nwe would be chastised about collapsing into the "same signature after\r\nerasure".\r\n\r\nThis will have an influence of typing, as the typechecking of\r\narguments is sensitive to overloading: if multiple variants are\r\nfeasible, the argument will be typechecked with a wildcard expected\r\ntype. So people inspecting the types of the arguments to `==` before\r\nthis change might have seen an interesting type for\r\n`if (true) x else y`, but now the `If` will have type `Any`, as we\r\ndon\'t need to calculate the LUB.\r\n\r\nI\'ve left a TODO to note that we should really make `Any#{==, !=}`\r\nnon-final and include a final override in `AnyVal`. But I don\'t think\r\nthat is particularly urgent.'
3496,'','SI-6169 TODO: consolidate with fix for SI-1786 (#2518)\nTODO comments only\r\n\r\nplease merge when convenient'
3495,'retronym','changes the order of whitebox typechecks. yes, again.\nMy first attempt at SI-6992 was about having whitebox expansions first\r\ntypecheck against outerPt and only then verify that the result is compatible\r\nwith innerPt.\r\n\r\nThat was a nice try, but soon after it went live in 2.11.0-M8, we\'ve got\r\nmultiple reports with problems - both shapeless and then in a week specs2\r\nstarted having issues with their whitebox macros.\r\n\r\nIn shapeless, typecheck against outerPt screwed up type inference, which\r\nwas more or less fixable by explicit type annotations, so I decided to\r\nwait a bit before jumping to conclusions.\r\n\r\nHowever, in specs2 the problem was more insidious. After being typechecked\r\nagainst outerPt, expansions were being implicitly converted to a type\r\nthat became incompatible with innerPt. This revealed a fatal flaw of the\r\nimplemented approach - if allowed to typecheck against outerPt first,\r\nwhitebox macros could never be robust.\r\n\r\nNow realizing that "outerPt > innerPt" doesn\'t work, I nevertheless wasn\'t\r\nlooking forward to rolling that back to "innerPt > outerPt", because that\r\nwould revive SI-6992 and SI-8048 that are highly unintuitive, especially\r\nthe latter one.\r\n\r\nTherefore, this commit combines the permissiveness of "... > innerPt"\r\napproaches with the robustness of "innerPt > outerPt", introducing\r\n"WildcardType > innerPt > outerPt".'
3494,'gkossakowski',"Optimization: use AnyRef map for Namer -> Typer tree handoff\nAnd uses a map per-compilation unit, rather than one per Typer.\n\nNo need to cleanup in `reset()`, this way.\n\nReview by @gkossakowski\n\nIn my topic/opt2 branch, I used tree attachments as an alternative\nto using a map at all. But when I submitted a PR with that change,\nthe test suite picked up a subtle change in behaviour that I didn't\nhave time to investigate. Switching to `AnyRefMap` is a lower-risk\npatch, but still worthwhile for performance."
3493,'gkossakowski','SI-3452 Correct Java generic signatures for mixins, static forwarders\n[Parts of this patch and some of the commentary are from @paulp]\r\n\r\nThis took me so long to figure out I can\'t even tell you. Partly because\r\nthere were two different bugs, one which only arose for trait forwarders\r\nand one for mirror class forwarders, and every time I\'d make one set\r\nof tests work another set would start failing. The runtime failures\r\nassociated with these bugs were fairly well hidden because you usually\r\nhave to go through java to encounter them: scala doesn\'t pay that much\r\nattention to generic signatures, so they can be wrong and scala might still\r\ngenerate correct code. But java is not so lucky.\r\n\r\n## Bug in mixin forwarders\r\n\r\nDuring mixin composition, classes which extend traits receive forwarders\r\nto the implementations. An attempt was made to give these the correct\r\ninfo (in method "cloneBeforeErasure") but it was prone to giving\r\nthe wrong answer, because: the key attribute which the forwarder\r\nmust capture is what the underlying method will erase to *where the\r\nimplementation is*, not how it appears to the class which contains it.\r\nThat means the signature of the forwarder must be no more precise than\r\nthe signature of the inherited implementation unless additional measures\r\nwill be taken.\r\n\r\nThis subtle difference will put on an unsubtle show for you in test\r\nrun/t3452.scala.\r\n\r\n    trait C[T]\r\n    trait Search[M] { def search(input: M): C[Int] = null }\r\n    object StringSearch extends Search[String] { }\r\n    StringSearch.search("test");  // java\r\n    // java.lang.NoSuchMethodError: StringSearch.search(Ljava/lang/String;)LC;\r\n\r\nThe principled thing to do here would be to create a pair of\r\nmethods in the host class: a mixin forwarder with the erased\r\nsignature `(String)C[Int]`, and a bridge method with the same\r\nerased signature as the trait interface facet.\r\n\r\nBut, this turns out to be pretty hard to retrofit onto the\r\ncurrent setup of Mixin and Erasure, mostly due to the fact\r\nthat mixin happens after erasure which has already taken\r\ncare of bridging.\r\n\r\nFor a future, release, we should try to move all bridging\r\nafter mixin, and pursue this approach. But for now, what can\r\nwe do about `LinkageError`s for Java clients?\r\n\r\nThis commit simply checks if the pre-erasure method signature\r\nthat we generate for the trait forward erases identically to\r\nthat of the interface method. If so, we can be precise. If not,\r\nwe emit the erased signature as the generic signature.\r\n\r\n## Bug in static forwarders\r\n\r\nThe same principle is at work, at a different location.\r\nDuring genjvm, objects without declared companion classes\r\nare given static forwarders in the corresponding class, e.g.\r\n\r\n    object Foo { def bar = 5 }\r\n\r\nwhich creates these classes (taking minor liberties):\r\n\r\n    class Foo$ { static val MODULE$ = new Foo$ ; def bar = 5 }\r\n    class Foo  { static def bar = Foo$.MODULE$.bar }\r\n\r\nIn generating these, genjvm circumvented the usual process whereby one\r\ncreates a symbol and gives it an info, preferring to target the bytecode\r\ndirectly. However generic signatures are calculated from symbol info\r\n(in this case reusing the info from the module class.) Lacking even the\r\nattempt which was being made in mixin to "clone before erasure", we\r\nwould have runtime failures of this kind:\r\n\r\n    abstract class Foo {\r\n      type T\r\n      def f(x: T): List[T] = List()\r\n    }\r\n    object Bar extends Foo { type T = String }\r\n    Bar.f("");    // java\r\n    // java.lang.NoSuchMethodError: Bar.f(Ljava/lang/String;)Lscala/collection/immutable/List;\r\n\r\nBefore/after this commit:\r\n\r\n    <   signature                                     f  (Ljava/lang/String;)Lscala/collection/immutable/List<Ljava/lang/String;>;\r\n    ---\r\n    >   signature                                     f  (Ljava/lang/Object;)Lscala/collection/immutable/List<Ljava/lang/Object;>;\r\n\r\nThis takes the warning count for compiling collections under\r\n`-Ycheck:jvm` from 1521 to 26.\r\n'
3492,'retronym',"prevents using reify and quasiquotes in the compiler\nKind of prevents us from using quasiquoting facilities in scalac,\r\nbecause those depend on internal APIs that can easily diverge from starr,\r\ncreating problems similar to https://groups.google.com/forum/#!topic/scala-internals/K4EoU6q0dek.\r\n\r\nThis hack doesn't strictly prohibit those facilities from being used,\r\nsince I have no good idea about how to do that reliably, but rather\r\nmakes reification/quasiquoting print swaths of debug output that are\r\ngoing to catch someone's eye."
3491,'',"[backport] SI-7902 Fix spurious kind error due to an unitialized symbol\nTracked down this error:\n\n    <none> is invariant, but type Y2 is declared covariant\n    <none>'s bounds<notype> are stricter than type X2's declared bounds >: Nothing <: Any, <none>'s bounds<notype> are stricter than type Y2's declared bounds >: Nothing <: Any\n\nto `Symbol#typeParams` returning `List(NoSymbol)` if the symbol\nwas not initialized.\n\nThis happends in the enclosed test for:\n\n    // checkKindBoundsHK()\n    hkArgs   = List(type M3)\n    hkParams = List(type M2)\n\nThis commit forces the symbol of the higher-kinded type argument\nbefore checking kind conformance.\n\nA little backstory:\n\nThe `List(NoSymbol)` arises from:\n\n    class PolyTypeCompleter... {\n      // @M. If `owner` is an abstract type member, `typeParams` are all NoSymbol (see comment in `completerOf`),\n      // otherwise, the non-skolemized (external) type parameter symbols\n      override val typeParams = tparams map (_.symbol)\n\nThe variation that triggers this problem gets into the kind\nconformance checks quite early on, during naming of:\n\n    private[this] val x = ofType[InSeq]\n\nThe inferred type of which is forced during:\n\n    def addDerivedTrees(typer: Typer, stat: Tree): List[Tree] = stat match {\n      case vd @ ValDef(mods, name, tpt, rhs) if !noFinishGetterSetter(vd) =>\n        // If we don't save the annotations, they seem to wander off.\n        val annotations = stat.symbol.initialize.annotations\n\n(cherry picked from commit 03a06e02483eaf442158339c2edd6bcfd99847a3)\n\nReview by @gkossakowski. This problem hit some more people yesterday.\nThe fix in master has had four months of battle testing, I think its\nsuitable for the backport for RC3."
3490,'','SI-7459 Handle pattern binders used as prefixes in TypeTrees.\nMatch translation was incorrect for:\r\n\r\n    case t => new t.C\r\n    case D(t) => new d.C\r\n\r\nWe would end up with Types in TypeTrees referring to the wrong symbols, e.g:\r\n  \r\n    // t7459a.scala\r\n    ((x0$1: this.LM) => {\r\n      case <synthetic> val x1: this.LM = x0$1;\r\n      case4(){\r\n       matchEnd3(new tttt.Node[Any]())\r\n      };\r\n      matchEnd3(x: Any){\r\n        x\r\n    }\r\n\r\nOr:\r\n    // t7459b.scala\r\n     ((x0$1: CC) => {\r\n       case <synthetic> val x1: CC = x0$1;\r\n       case4(){\r\n         if (x1.ne(null))\r\n           matchEnd3(new tttt.Node[Any]())\r\n         else\r\n           case5()\r\n       };\r\n\r\nThis commit:\r\n\r\n  - Changes `bindSubPats` to traverse types, as well as terms,\r\n    in search of references to bound symbols\r\n  - Changes `Substitution` to reuse `Tree#substituteSymbols` rather\r\n    than the home-brew substitution from `Tree`s to `Tree`s, if the\r\n    `to` trees are all `Ident`s\r\n\r\nI had to dance around the awkward handling of "swatches" (exception\r\nhandlers that can be implemented with JVM native type switches) by\r\nduplicating trees to avoid seeing the results of `substituteSymbols`\r\nin `caseDefs` after we abandon that approach if we detect the\r\npatterns are too complex late in the game.\r\n'
3489,'Ichoran','This fixes SI-8251: `ListBuffer.readOnly` destroys List immutability\nMethod `BufferLike.readOnly` now returns a view over changing state of the buffer.\r\n\r\nDiscussion:\r\nhttps://groups.google.com/d/msg/scala-internals/g_-gIWgB8Os/kWazrALbLKEJ\r\n'
3488,'','SI-8245 Fix regression in interplay between lazy val, return\nIn 4c86dbbc492 / SI-6358, synthesis of lazy val accessors trees was\nmoved into the typer phase (in MethodSynthesis). Before that point,\nthe symobl for the accessor *was* created early, but the tree was\nnot. This led to crashes in intervening phases (extensionmethods)\nas `changeOwner` calls didn\'t catch the smuggled symbol.\n\nMoving the accessor generation forward, however, brought a problem:\nwe now introduce a DefDef around the RHS of the lazy val, but we\'re\nnot actually guaranteed that the body has already been typechecked.\nIf it happened to be typechecked for the purposes of return type\ninference, we\'ll pick up the typechecked tree from `transformed`:\n\n    // LazyValGetter#derivedTree\n    val rhs1 = transformed.getOrElse(rhs0, rhs0)\n\nBut if the method had an explicit return type (which must *always*\nbe the case if it contains a `return`!), `rhs0` will be untyped.\n\nThis leads to, e.g.:\n\n    def foo(o: Option[Int]): Int = {\n      lazy val i = o.getOrElse(return -1)\n      i + 1\n    }\n\n    def foo(o: Option[Int]): Int = {\n      lazy <artifact> var i$lzy: Int = _;\n      <stable> <accessor> lazy def i: Int = {\n        i$lzy = o.getOrElse(return -1);\n        i$lzy\n      };\n      i.+(1)\n    };\n\nWhen this is typechecked, the `return` binds to the closest enclosing\n`DefDef`, `lazy def i`. This commit changes `Context#enclMethod` to\ntreat `DefDef`s as transparent.\n\n`enclMethod` is only used in one other spot that enforces the\nimplementation restriction that "module extending its companion class\ncannot use default constructor arguments".\n\nReview by @gkossakowski'
3487,'gkossakowski','fix typo\n'
3486,'adriaanm',"SI-7553 Propagate type of unstable args through dependent methods\nAfter a soundness fix in , instantiation of dependent\r\nmethod type results behaved differently for if the argument\r\nfrom which we were propagating information had a stable type\r\nor not. This is particular to substutition into singleton types\r\nover the parameter in question.\r\n\r\nIf the argument was stable, it was substituted into singleton\r\ntypes, such as the one below in the prefix in `a.type#B`\r\n(which is the longhand version of `a.B`)\r\n\r\n\tscala> class A { type B >: Null <: AnyRef }\r\n\tdefined class A\r\n\r\n\tscala> object AA extends A { type B = String }\r\n\tdefined object AA\r\n\r\n\tscala> def foo(a: A): a.B = null\r\n\tfoo: (a: A)a.B\r\n\r\n\tscala> foo(AA)\r\n\tres0: AA.B = null\r\n\r\nBut what if it isn't stable?\r\n\r\n\tscala> foo({def a = AA; a: A { type B <: String}})\r\n\tres3: a.B = null\r\n\r\nThis commit changes that to:\r\n\r\n\tscala> foo({def a = AA; a: A { type B <: String}})\r\n\tres1: a.type with A{type B <: String}#B = null\r\n\r\nThat oddly printed type is missing parens: it should be:\r\n\r\n    (a.type with A{type B <: String})#B\r\n\r\nIt is is a projection from refinement that combines:\r\n  a) the singleton type on the parameter\r\n  b) the type of the argument\r\n\r\nReview by @adriaanm"
3485,'retronym','kills resetAllAttrs\nreview @retronym'
3484,'','SI-8237 Avoid cyclic constraints when inferring hk type args\nAn `AppliedTypeVars` spawned from `HKTypeVar#applyArgs`\n(necessarily) shares the same `TypeConstraints`.\n\nBut, we can have multiple ATVs based on a single HKTV floating\naround during inference, and they can appear on both sides\nof type relations. An example of this is traced out in\nthe enclosed test.\n\nThis commit avoids registering upper/lower bound constraints\nwhen this is detected.\n\nIn the enclosed test, we end up with an empty set of constraints\nfor `?E`, which results in inference of Nothing, which is what\nwe expect.\n\nI have also improved the printing of ATVs (to include the args)\nand sharpened the log message when `solve` leaves type variables\ninstantiated to `NoType`, rather than some other type that doesn\'t\nconform to the bounds. Both of these changes helped me to get\nto the bottom of this ticket.\n\nThe reported test has quite a checkered history:\n\n  - in 2.10.0 it worked, but more by good luck than good planning\n  - after the fix for SI-7226 / 221f52757aa6, it started crashing\n  - from 3bd897ba0054f (a merge from 2.10.x just before 2.11.0-M1)\n    we started getting a type inference failure, rather than a crash.\n    "no type parameters for method exists [...] because cyclic\n    instantiation".\n  - It still crashes in `isGround` in 2.10.3.\n\nReview by @adriaanm'
3483,'adriaanm',"SI-8244 Fix raw type regression under separate compilation\nIn #1901, handling of raw types encountered in signatures during class\nfile parsing was changed to work in the same manner as\n`classExistentialType`, by using\n`existentialAbstraction(cls.tparms, cls.tpe_*)`\n\nBut this never creates fresh existential symbols, and just sticks\nthe class type parameters it `quantified`:\n\n\tscala> trait T[A <: String]\n\tdefined trait T\n\n\tscala> val cls = typeOf[T[_]].typeSymbol\n\tcls = trait T#101864\n\n\tscala> cls.typeParams\n\tres0 = List(type A#101865)\n\n\tscala> cls.tpe_*\n\tres1 = T#101864[A#101865]\n\n\tscala> classExistentialType(cls)\n\tres3 = T#101864[_ <: String#7209]\n\n\tscala> val ExistentialType(quantified, result) = res3\n\tList(type A#101865)\n\nIn the enclosed test case, this class type parameter was substituted\nduring `typeOf[X] memberType sym`, which led us unsoundly thinking\nthat `Raw[_]` was `Raw[X]`.\n\nI've added a TODO comment to review the other usages of\n`classExistentialType`.\n\nTest variations include joint and separate compilation, and the\ncorresponding Scala-only code. All fail with type errors now,\nas we expect.\n\nReview by @adriaanm. /cc @paulp"
3482,'retronym',"SI-8177 co-evolve more than just RefinedTypes\n`asSeenFrom` produced a typeref of the shape `T'#A` where `A` referred to a symbol\r\ndefined in a `T` of times past.\r\n\r\nMore precisely, the `TypeRef` case of `TypeMap`'s `mapOver` correctly modified a prefix\r\nfrom having an underlying type of `{ type A = AIn }` to `{ type A = Int }`,\r\nwith a new symbol for `A` (now with info `Int`), but the symbol in the outer\r\n`TypeRef` wasn't co-evolved (so it still referred to the `A` in `{ type A = AIn }`\r\nunderlying the old prefix).\r\n\r\n`coEvolveSym` used to only look at prefixes that were directly `RefinedType`s,\r\nbut this bug shows they could also be `SingleType`s with an underlying `RefinedType`.\r\n\r\nReview by @paulp "
3481,'xeno-by','TypedTreePrinter added to Printers\n1. TypedTreePrinter is added to internal.Printers. TypedTreePrinter generates the code for passed attributed trees.\r\n2. Attributed val/var processing for syntactics added ([SI-8180] (https://issues.scala-lang.org/browse/SI-8180)).\r\n3. Tree-based printer selection for showCode added.\r\n4. Tests for TypedTreePrinter are added.\r\n5. Code cleanup for EOL-printing https://github.com/scala/scala/pull/3377'
3480,'Ichoran',"SI-6948 Make the Abstract* classes public.\nSeveral weaknesses in the implementation converge and force multiply.\r\n\r\n1) Type constructor inference is not persistent. During implicit search\r\nit will give up after the first seen parent even if some deeper base type\r\n(even another direct parent) would satisfy the search.\r\n\r\n2) Type inference is not aware of access restrictions. Inferred types are\r\ncalculated with disregard for whether the inferred type is visible at\r\nthe point of inference. That means that package-private types - which may be\r\nprivate for any number of good reasons, such as not wanting them to appear in\r\nbytecode thus creating binary compatibility obligations - are not private.\r\nThere is no such thing as a qualified private type.\r\n```\r\n  package p {\r\n    trait PublicInterface[T] { def foo(): Int }\r\n    private[p] trait ImplementationOnly[T] extends PublicInterface[T] { def foo(): Int = 1 }\r\n    class PublicClass extends ImplementationOnly[PublicClass]\r\n  }\r\n  package q {\r\n    object Test {\r\n      def f[A, CC[X]](xs: CC[A]): CC[A] = xs\r\n      def g = f(new p.PublicClass) // inferred type: p.ImplementationOnly[p.PublicClass]\r\n      def h = g.foo()\r\n      // Bytecode contains:\r\n      // public p.ImplementationOnly<p.PublicClass> g();\r\n      // public int h();\r\n      //    0: aload_0\r\n      //    1: invokevirtual #30                 // Method g:()Lp/ImplementationOnly;\r\n      //    4: invokeinterface #33,  1           // InterfaceMethod p/ImplementationOnly.foo:()I\r\n      //    9: ireturn\r\n    }\r\n  }\r\n```\r\n3) The trait encoding leads to a proliferation of forwarder methods, so much so that\r\n1.5 Mb of bytecode was taken off of the standard library size by creating abstract classes\r\nwhich act as central mixin points so that leaf classes can inherit some methods the\r\nold fashioned way rather than each receiving their own copy of every trait defined method.\r\nThis was done for 2.10 through the creation of the Abstract* classes, all of which were\r\ngiven reduced visibility to keep them out of the API.\r\n```\r\n  private[scala] class AbstractSeq extends ...\r\n```\r\nThis achieved its intended goal very nicely, but also some unintended ones.\r\n\r\nIn combination with 1) above:\r\n```\r\n  scala> val rand = new scala.util.Random()\r\n  rand: scala.util.Random = scala.util.Random@7f85a53b\r\n\r\n  // this works\r\n  scala> rand.shuffle(0 to 5)\r\n  res1: scala.collection.immutable.IndexedSeq[Int] = Vector(4, 0, 1, 2, 5, 3)\r\n\r\n  // and this doesn't! good luck reasoning that one out\r\n  scala> rand.shuffle(0 until 5)\r\n  <console>:9: error: Cannot construct a collection of type scala.collection.AbstractSeq[Int]\r\n    with elements of type Int based on a collection of type scala.collection.AbstractSeq[Int].\r\n                rand.shuffle(0 until 5)\r\n                            ^\r\n\r\n  // Somewhat comically, in scala 2.9 it was flipped: to failed (differently), until worked.\r\n  scala> scala.util.Random.shuffle(0 to 5)\r\n  <console>:8: error: type mismatch;\r\n   found   : scala.collection.immutable.Range.Inclusive\r\n   required: ?CC[?T]\r\n\r\n  scala> scala.util.Random.shuffle(0 until 5)\r\n  res2: scala.collection.immutable.IndexedSeq[Int] = Vector(4, 3, 1, 2, 0)\r\n```\r\nIn combination with 2) above:\r\n```\r\n  scala> def f[A, CC[X]](xs: CC[A]): CC[A] = xs\r\n  f: [A, CC[X]](xs: CC[A])CC[A]\r\n\r\n  scala> var x = f(1 until 10)\r\n  x: scala.collection.AbstractSeq[Int] = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n\r\n  // It has inferred a type for our value which it will not allow us to use or even to reference.\r\n  scala> var y: scala.collection.AbstractSeq[Int] = x\r\n  <console>:10: error: class AbstractSeq in package collection cannot be accessed in package collection\r\n         var y: scala.collection.AbstractSeq[Int] = x\r\n                                 ^\r\n  // This one is a straight regression - in scala 2.9,\r\n  scala> var x = f(1 until 10)\r\n  x: scala.collection.immutable.IndexedSeq[Int] = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n```\r\nSince 1) and 2) are essentially unfixable - at least by me - I propose\r\nto ameliorate these regressions by attacking the symptoms at the leaves.\r\nThat means making all the Abstract* classes public - keeping in mind that\r\nthey must already be assumed to be in the binary compatibility footprint,\r\nsince they have been leaking throughout their existence. This only impacts\r\nthe inference of inaccessible collections types - it doesn't help with the\r\nmore serious issue with type inference."
3479,'','Fix partest-extras eclipse project dependencies\n'
3478,'','SI-6948 Make several Abstract* classes public.\nSeveral weaknesses in the implementation converge and force multiply.\r\n\r\n1) Type constructor inference is not persistent. During implicit search\r\nit will give up after the first seen parent even if some deeper base type\r\n(even another direct parent) would satisfy the search.\r\n\r\n2) Type inference is not aware of access restrictions. Inferred types are\r\ncalculated with disregard for whether the inferred type is visible at\r\nthe point of inference. That means that package-private types - which may be\r\nprivate for any number of good reasons, such as not wanting them to appear in\r\nbytecode thus creating binary compatibility obligations - are not private.\r\nThere is no such thing as a qualified private type.\r\n```\r\n  package p {\r\n    trait PublicInterface[T] { def foo(): Int }\r\n    private[p] trait ImplementationOnly[T] extends PublicInterface[T] { def foo(): Int = 1 }\r\n    class PublicClass extends ImplementationOnly[PublicClass]\r\n  }\r\n  package q {\r\n    object Test {\r\n      def f[A, CC[X]](xs: CC[A]): CC[A] = xs\r\n      def g = f(new p.PublicClass) // inferred type: p.ImplementationOnly[p.PublicClass]\r\n      def h = g.foo()\r\n      // Bytecode contains:\r\n      // public p.ImplementationOnly<p.PublicClass> g();\r\n      // public int h();\r\n      //    0: aload_0\r\n      //    1: invokevirtual #30                 // Method g:()Lp/ImplementationOnly;\r\n      //    4: invokeinterface #33,  1           // InterfaceMethod p/ImplementationOnly.foo:()I\r\n      //    9: ireturn\r\n    }\r\n  }\r\n```\r\n3) The trait encoding leads to a proliferation of forwarder methods, so much so that\r\n1.5 Mb of bytecode was taken off of the standard library size by creating abstract classes\r\nwhich act as central mixin points so that leaf classes can inherit some methods the\r\nold fashioned way rather than each receiving their own copy of every trait defined method.\r\nThis was done for 2.10 through the creation of the Abstract* classes, all of which were\r\ngiven reduced visibility to keep them out of the API.\r\n```\r\n  private[collection] class AbstractSeq extends ...\r\n```\r\nThis achieved its intended goal very nicely, but also some unintended ones.\r\n\r\nIn combination with 1) above:\r\n```\r\n  scala> val rand = new scala.util.Random()\r\n  rand: scala.util.Random = scala.util.Random@7f85a53b\r\n\r\n  // this works\r\n  scala> rand.shuffle(0 to 5)\r\n  res1: scala.collection.immutable.IndexedSeq[Int] = Vector(4, 0, 1, 2, 5, 3)\r\n\r\n  // and this doesn\'t! good luck reasoning that one out\r\n  scala> rand.shuffle(0 until 5)\r\n  <console>:9: error: Cannot construct a collection of type scala.collection.AbstractSeq[Int]\r\n    with elements of type Int based on a collection of type scala.collection.AbstractSeq[Int].\r\n                rand.shuffle(0 until 5)\r\n                            ^\r\n\r\n  // Somewhat comically, in scala 2.9 it was flipped: to failed (differently), until worked.\r\n  scala> scala.util.Random.shuffle(0 to 5)\r\n  <console>:8: error: type mismatch;\r\n   found   : scala.collection.immutable.Range.Inclusive\r\n   required: ?CC[?T]\r\n\r\n  scala> scala.util.Random.shuffle(0 until 5)\r\n  res2: scala.collection.immutable.IndexedSeq[Int] = Vector(4, 3, 1, 2, 0)\r\n```\r\nIn combination with 2) above:\r\n```\r\n  scala> def f[A, CC[X]](xs: CC[A]): CC[A] = xs\r\n  f: [A, CC[X]](xs: CC[A])CC[A]\r\n\r\n  scala> var x = f(1 until 10)\r\n  x: scala.collection.AbstractSeq[Int] = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n\r\n  // It has inferred a type for our value which it will not allow us to use or even to reference.\r\n  scala> var y: scala.collection.AbstractSeq[Int] = x\r\n  <console>:10: error: class AbstractSeq in package collection cannot be accessed in package collection\r\n         var y: scala.collection.AbstractSeq[Int] = x\r\n                                 ^\r\n  // This one is a straight regression - in scala 2.9,\r\n  scala> var x = f(1 until 10)\r\n  x: scala.collection.immutable.IndexedSeq[Int] = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n```\r\nSince 1) and 2) are essentially unfixable - at least by me - I propose\r\nto ameliorate these regressions by attacking the symptoms at the leaves.\r\nThat means making public the Abstract* classes which are likely to show\r\nup in type calculations (and remember they must already be assumed to\r\nbe in the binary compatibility footprint, since they have been leaking\r\nthroughout their existence.) And then, because if they don\'t have\r\nbuilders they will continue to create inference failures for all their\r\nsubclasses, it means providing them with minimal CanBuildFrom instances.\r\n\r\nThis is what it takes to make "0 until 5" act the same as "0 to 5", unless\r\nsomeone has a better idea.'
3477,'',"Rename EmptyTypTree into SyntacticEmptyTypeTree\n1. Change the name as @xeno-by believes that previous name was misleading\r\n2. Remove EmptyTree case as it's not needed any longer, only TypeTrees are used now \r\n\r\nreview @xeno-by \r\n/cc @vladimirnik"
3476,'adriaanm',"SI-8207 Allow import qualified by self reference\nThis regressed in SI-6815 / #2374. We check if the result of\r\n`typedQualifier(Ident(selfReference))` is a stable identifier\r\npattern. But we actually see the expansion to `C.this`, which\r\ndoesn't qualify.\r\n\r\nThis commit adds a special cases to `importSig` to compensate.\r\nThis is safe enough, because the syntax prevents the following:\r\n\r\n\tscala> class C { import C.this.toString }\r\n\t<console>:1: error: '.' expected but '}' found.\r\n\t       class C { import C.this.toString }\r\n\t                                        ^\r\nSo loosening the check here doesn't admit invalid programs.\r\nI've backed this up with a `neg` test.\r\n\r\nThe enclosed test also checks that we can use the self\r\nreference in a singleton type. (That wasn't broken.)\r\n\r\nMaybe it would be more principled to avoid expanding the self\r\nreference in `typedIdent`. I can imagine that the current situation\r\nis a pain for refactoring tools that try to implement a rename\r\nrefactoring, for example.\r\n\r\nSeems a bit risky at the minute, but I've noted the idea\r\nin a comment.\r\n\r\nReview by @adriaanm. \r\n\r\n/cc @misto for discussion about the expansion of the `Ident` to a `This` in the IDE context."
3475,'','Fix inconsistent binding in patterns with 10+ holes\nPreviously a map that was storing bindings of fresh hole variables with\r\ntheir contents (tree & cardinality) used to be a SortedMap which had\r\nissues with inconsistent key ordering:\r\n```\r\n   "$fresh$prefix$1" < "$fresh$prefix$2"\r\n   ...\r\n   "$fresh$prefix$8" < "$fresh$prefix$9"\r\n   "$fresh$prefix$9" > "$fresh$prefix$10"\r\n```\r\nThis issue is solved by using a LinkedHashMap instead (keys are inserted\r\nin the proper order.)\r\n\r\nreview @retronym'
3474,'','Fix feature warnings in test.osgi.comp\nReduces the amount of noise from 22 lines down to the actually\r\ninteresting 5 lines of information.'
3473,'','Add repl as dependency of test-junit Eclipse project.\nSince 8f20fa23dbb5b000f0889132b8c6e2acfff096b3 junit tests depend on\r\nrepl. We need to reflect that dependency in our Eclipse project files.'
3472,'gkossakowski',"Fix compilation errors\nThis fixes compilation errors about adapted argument lists and\r\na type error between CharSequence and String\r\n\r\n---\r\n\r\nI have no idea how the type error between CharSequence and String happened. Compiling it in the IDE doesn't work whereas on the command line everything is ok."
3471,'',"SI-6169 Refine java wildcard bounds using corresponding tparam\nAlso fixes part of SI-8197. Necessary complement to SI-1786, because we now infer tighter bounds for RHSs to conform to.\r\n\r\nWhen opening an existential, Java puts constraints in the context that are derived\r\nfrom the bounds on the type parameters of the existentially quantified type,\r\nso let's do the same for existentials over java-defined classes...\r\n\r\nExample:\r\n```\r\npublic class Exist<T extends String> {\r\n  // java helpfully re-interprets Exist<?> as Exist<? extends String>\r\n  public Exist<?> foo() { throw new RuntimeException(); }\r\n}\r\n```\r\n\r\nreview by @retronym"
3470,'adriaanm',"SI-8215: Correcting typo and splitting a long sentence in MatchIterator doc\nFollow-up to 9c0ca62. The typo comes from the fact that I didn't take into account the full rendering of exception names:\r\n\r\n![image](https://f.cloud.github.com/assets/223702/2091023/ed0ff260-8e9b-11e3-88f3-b6a1465e096c.png)\r\n\r\nAlso taken the opportunity to split a sentence that seems a bit long into two.\r\n\r\nReview by @adriaanm @heathermiller\r\n\r\nSorry that we need this fixup!"
3469,'',"SI-8239 don't loop forever in ContextTrees.locateContextTree\nMade loop invariant / recursion metric explicit.\r\n\r\nreview by @dragos, as no good bug-reporting deed goes unpunished"
3468,'xeno-by',"Add support for a more straightforward alternative to import selectors\nWhile writing new revised version of documentation for quasiquotes I've noticed that quasiquotes still required usage of ugly non-tree ImportSelector api that didn't compose very well. This pull request adds a much nicer syntactic construction/deconstruction alternative.\r\n\r\nreview @xeno-by"
3467,'','SI-8030 Restore thread safety to the parser\nIn addition to the invariant "parsing doesn’t enter new symbols",\nwhich was respected and tested in 760df9843a910d6, we also must\nensure that "parsing doesn\'t call Symbol#info".\n\nThat happend indirectly if we call `companionModule`.\n\nThis commit just converts the name of `class TupleN` to a term\nname, rather than getting the name of its companion.\n\nNo test is included. This is tested upstream in:\n\n    https://jenkins.scala-ide.org:8496/jenkins/view/Memory%20Leak%20Tests/job/scalac-memory-leaks-test-2.11.0/\n\nReview by @densh / @dragos'
3466,'',"Fix typo in compiler's error message: anoynmous => anonymous\n"
3465,'','PR #3233 cleanup\n- `::.head` became a `val`; excessive accessor removed\r\n- SerializationProxy moved to `object List`'
3464,'adriaanm',"SI-8219 Coherency for `{Any, Object}#==`; typer.context / infer.context\n- Make our ficticious == and != methods line up for overriding checks\r\n  - Eliminate a major source of puzzling behaviour by ensuring Inferencer\r\n    and Typer agree on what the current Context is.\r\n\r\nReview by @adriaanm, @xeno-by @lrytz (or any number of people that have been puzzled about what a strange Context was doing in their inferencer over the years...)\r\n\r\nThese changes are independent, I can break them up if desired. The `==` parts are probably a touch riskier as I don't know the history of the divergent signatures."
3463,'densh',"SI-7937 No nested if after val def in for\nDeprecate nested if after a value definition in\r\na for comprehension. (That is per spec.)\r\n\r\nThe difference is between\r\n```\r\nfor (i <- is if i > 0)\r\n```\r\nand\r\n```\r\nfor (i <- is ; j = 2 * i if i > 0)\r\n```\r\nwhere, in the second form, the guard seems to\r\ncontrol perlesquely the val def. That is confusing\r\nto the human eye.\r\n\r\nThe first form, where the guard directly follows\r\na generator, is OK because a generator doesn't\r\nlook like an expression that would be guarded\r\nby the if condition.\r\n\r\nReview by @densh"
3462,'','SI-8233 Fix regression in backend with boxed nulls\nRegressed in SI-7015 / 1b6661b8.\n\nWe do need to "unbox" the null (ie, drop a stack from and load\na null) in general. The only time we can avoid this is if the\ntree we are adapting is a `Constant(Literal(null))`.\n\nI\'ve added a test for both backends. Only GenICode exhibited\nthe problem.\n\nReview by @gkossakowski, /cc @JamesIry'
3461,'','Null Handling in scala.collection.mutable.FlatHashTable\nWith reference to the conversation in:\r\n\r\nhttps://github.com/cheeseng/scalatest/commit/f28781dee7e28b2a08c34c9ed3e92563a147a92e#commitcomment-5135008\r\n\r\nIt seems that there\'s still a problem in null handling for scala.collection.mutable.FlatHashTable, following are steps to reproduct in 2.11-M8: \r\n\r\n[info] Starting scala interpreter...\r\n[info] \r\nWelcome to Scala version 2.11.0-M8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_51).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n\r\nscala> val set = collection.mutable.Set("1", null, "3").par\r\nset: scala.collection.parallel.mutable.ParSet[String] = ParHashSet(null, 3, 1)\r\n\r\nscala> set.exists(_ == null)\r\njava.lang.ClassCastException: scala.collection.mutable.FlatHashTable$NullSentinel$ cannot be cast to java.lang.String\r\nat $anonfun$1.apply(:9)\r\nat scala.collection.Iterator$class.exists(Iterator.scala:769)\r\nat scala.collection.parallel.mutable.ParFlatHashTable$ParFlatHashTableIterator.exists(ParFlatHashTable.scala:27)\r\nat scala.collection.parallel.ParIterableLike$Exists.leaf(ParIterableLike.scala:1089)\r\nat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\r\nat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\r\nat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\r\nat scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\r\nat scala.collection.parallel.ParIterableLike$Exists.tryLeaf(ParIterableLike.scala:1086)\r\nat scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.internal(Tasks.scala:159)\r\nat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.internal(Tasks.scala:443)\r\nat scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:149)\r\nat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\r\nat scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\r\nat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\r\nat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\r\nat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\r\nat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\r\n\r\nscala>'
3460,'','SI-8219 Avoid unpositioned ambiguous implicit error\nAnd characterization of the curiously case of overloaded ==\n\nReview by @lrytz'
3459,'gkossakowski','SI-4788 Respect RetentionPolicy of Java annotations\nAlso closes SI-5420 and SI-5948.'
3458,'xeno-by','SI-8173 add support for patterns like init :+ last to quasiquotes\nAdds support for patterns like:\r\n```scala\r\n  val q"{ ..$init; $last }" = q"{ a; b; c }"\r\n  // init == List(q"a", q"b")\r\n  // last == q"c"\r\n```\r\nWhich under the hood get compiled as `:+` patterns:\r\n```scala\r\n  SyntacticBlock(init :+ last)\r\n```'
3457,'adriaanm',"SI-8228 Avoid infinite loop with erroneous code, overloading\nSI-8228 Avoid infinite loop with erroneous code, overloading …\r\n`isApplicableBasedOnArity` couldn't get of the ferris wheel after\r\nas `followApply` kept insisting on another spin.\r\n\r\n    scala> ErrorType nonPrivateMember nme.apply\r\n    res0: $r.intp.global.Symbol = value apply\r\n\r\n    scala> res0.info\r\n    res1: $r.intp.global.Type = <error>\r\n\r\nThis commit makes `followApply` consider that an `ErrorType`\r\ndoes not contain an `apply` member.\r\n\r\nI also considered whether to do a deep check on the type\r\n(`isErroneous`), but I can't motivate this with a test.\r\nI tend to think we *shouldn't* do that: `List[${ErrorType}]`\r\nstill has an `apply` member that we should follow, right?\r\n\r\nReview by @adriaanm "
3456,'gkossakowski','SI-8226 Deduplicate JavaTokens/ScalaTokens\n'
3455,'xeno-by','Fix SI-8202 and improve support for splicing patterns into vals\nFixes:\r\n- SI-8202 makes quasiquote parse q"val (x: Int) = 1" the same as q"val x: Int = 1" \r\n- Splicing of patterns into vals which was quite broken previously\r\n\r\nreview @xeno-by @retronym'
3454,'retronym',"SI-5994 battling implicits for String.lines\nDeprecated ProcessBuilder's lines method and renamed it streaming.\r\n\r\nstream was another possibility, but that seemed more likely to cause conflicts.\r\n\r\nAlso updated tutorial in ProcessBuilder.\r\n\r\nI am sure this will break some tests, but because of the name conflict it's hard to be sure where they are.  So Jenkins gets to find the problems for me."
3453,'','SI-4997 deprecate StringLike.linesIterator for StringLike.lines\nDeprecated.  lines is by far more consistent with the rest of the naming in the library.'
3452,'retronym','SI-8063 and its seventy friends\nThis is a preview version of the pull request that addresses https://issues.scala-lang.org/browse/SI-8063 in parallel with cleaning up reflection API for 2.11 and fixing a bunch of low-hanging bugs.\r\n\r\n**Much needed day-to-day APIs**\r\n\r\nThis pull request brings a number of methods that have been frequently requested by you guys (thanks a lot for your relentless feedback!), including `Type.typeArgs`, `Flag.PARAMACCESSOR` and `Type.companionType`. It also adds new conveniences like `ClassSymbol.isPrimaryConstructor`, `symbolOf[T]` and `typecheck(tree, TYPEmode)` that simplify typical reflection tasks both at compile time and at runtime.\r\n\r\n**First-class support for complex macros**\r\n\r\nOver the course of Scala 2.10, it\'s become clear that high-level reflection APIs are insufficient for complex macros (async, sbt, etc) and that those low-level APIs that we put in place anticipating the difficulties aren\'t enough either. As a result, macro programmers are often forced to perform casts to compiler internals, which not only requires close knowledge of compiler internals, but also makes such macros hard to maintain, as compiler internals can change without notice at any time.\r\n\r\nThese problems with complex macros are caused by internal implementation details of the macro engine that we\'ve already been trying to address for some time (https://groups.google.com/forum/#!topic/scala-internals/TtCTPlj_qcQ), but we\'re still not done with the fixes. Hopefully, we\'ll be able to merge some progress over the course of 2.11.x lifecycle, and by the 2.12.0-final release we\'ll have this handled, but no promises yet.\r\n\r\nIn the meanwhile, thanks to precious feedback from Jason Zaugg, we have been able to identify the low-level APIs that should be sufficient to work around the existing problems while we\'re looking for a definitive fix. We have exposed these APIs under `import c.internal._`, so that there\'s no longer need to cast to address typical issues arising in complex macros.\r\n\r\nDocumentation of these techniques is still scarce, but in mid-May @densh and I are going to run the ["Macrology 201" workshop](http://2014.flatmap.no/speakers/burmako.html) at flatMap, so stay tuned if you\'re interested in that kind of stuff.\r\n\r\n**Towards perfect reflection API**\r\n\r\nWhile reflection API has definitely become easier to use during the Scala 2.11 development cycle (quasiquotes, bunch of deprecations of confusing APIs, isolation of low-level APIs in `internal`, thread safety), there\'s still much work to do.\r\n\r\nAmong the most pressing issues I would highlight the following five bugs that we\'re going to take a very good look at for Scala 2.12: [Typechecking is not idempotent](https://issues.scala-lang.org/browse/SI-5464), [Hygiene for tree manipulation](https://issues.scala-lang.org/browse/SI-7823), [Get rid of pervasive casts in the reflection API](https://issues.scala-lang.org/browse/SI-8220), [Better usability for reflective invocations](https://issues.scala-lang.org/browse/SI-8221) and [Toolbox doesn\'t respect relative imports](https://issues.scala-lang.org/browse/SI-6393).\r\n'
3451,'adriaanm','SI-8214 AnyRefMap should not be final\nAnyRefMap is now not final; instead, the interrelated core methods for retrieval/removal are marked final.\r\n\r\nAdditionally, the defaultEntry field has been removed, and the overriding method for specifying a default has been restored.\r\n\r\nThe same changes have been made to LongMap also (as that has the same design).\r\n\r\nTests have been modified appropriately.'
3450,'gkossakowski',"SI-7266 Stream leaks memory\nChanged tail-generation function to mutable and clear it after it's used to allow any captured memory to be freed once the tail has been generated.\r\n\r\n(This is a case where a by-name parameter was used when a lazy val parameter was wanted instead.  If we ever get lazy val parameters, we should switch to that.)"
3449,'gkossakowski','Another grab bag of compiler optimizations\nReview by @gkossakowski'
3448,'gkossakowski','Optimizations in tail calls\nReview by @gkossakowski'
3447,'','Optimize the pickler phase\n- move "erroneous type" diagnostic into a crash recovery handler,\n    rather than running it proactively\n - move the "unexpanded macros" check into refchecks.\n\nCuts this phase in half, from about 1% of compile time to 0.5%.\n\nReview by @adriaanm'
3446,'','Optimize handoff namer -> typer tree handoff\nUse tree attachments, rather than a global hashmap, to record\nthe results of computing inferred types in Namer.\n\nFor cases when no transform occurs (the typer mutates a Literal\ntree in-place by just setting its type), this leads to a minor\nchange in behaviour in the interaction with plugins: they will\nbe asked a second time to amend the type. This stems from the\nfact that Typers uses a lazy tree copier.\n\nI have encapsulated the way this handoff is handled in\n`unit.transformed`. If we want to try a different strategy\n(perhaps `AnyRefMap`?), we have a single place to change.\n\nReview by @gkossakowski'
3445,'gkossakowski',"Grab bag of compiler optimizations\n@gkossakowski This work comes from my branch that we\nwent through in Lausaunne a few months back.\n\nSorry I was so slow to submit this as PRs. I had hoped\nto find more time to robustly benchmark, but you know\nhow it goes...\n\nWhen I tried, your benchmark tool showed the usual\nproblems of saying anything conclusive about individual\ncommits, but the trend over the entire series unambigious.\nThe entire series showed ~30% delta for FSC-style compilation,\n~20% for SBT-style (new Global instance each compilation batch.)\n\nI'm trying to submit what I consider to be uncontroversial\nchanges in groups. If a particular change requires deeper\nreview, I'll submit it individually.\n\n/cc @ichoran"
3444,'gkossakowski','Avoid generic collections operations hot paths\n- Use a specialized version of List#{map, collectFirst}\n   These special case mapping over an empty list and avoid\n   allocating.\n - Avoid nonEmpty in favor of `ne Nil`\n\nI see in the order of 2% speedup.\n\nPerhaps more useful is that\nthese methods no longer dominate the YourKit profiles, even though\nprofiler bias due to safepoints at allocation of the ListBuffer\nmight have been overstating their significance.\n\nReview by @gkossakowski / @ichoran'
3443,'adriaanm','add -Xsource:version to scalac man page\nThe flag was added in d43618a (PR #3340) by @huitseeker.'
3442,'adriaanm',"Fix SI-8217\nRealign the compiler with the proposed spec update: scala/scala-dist#127\r\n\r\nI know I'll need to rewrite the commit message.\r\n\r\nReview by @retronym."
3441,'','SI-7124 make macro definitions prettier in scaladoc\nMacros are now prettier in scaladoc, by\r\n - hiding the `macroImpl` annotation\r\n - showing the `macro` modifier in front\r\n\r\n---\r\n\r\nreview by @VladUreche'
3440,'adriaanm',"SI-7475 Private members aren't inheritable, findMember overhaul\nReview by @adriaanm @odersky @xeno-by\n\nDetails in the commit messages. The last one poses a few questions\nfor which I need input."
3439,'heathermiller','SI-8215: Document IllegalStateExceptions thrown by uninitialized MatchIterator from Regex (review by @heathermiller)\nAlso cleans up a misaligned ASCII art class diagram which is duplicated by the Content Hierarchy anyway.\r\n\r\nSee https://groups.google.com/forum/#!topic/scala-language/2T2wKVQiyVg'
3438,'heathermiller','SI-4014 Scaladoc omits @author\nreview by @VladUreche'
3437,'adriaanm','SI-6736 Range.contains is wrong\nRemoved once-used private method that was calculating ranges in error and corrected the contains method (plus improved performance).'
3436,'','SI-8124 Scaladoc package object members\nModifies the package pruning test to check whether the\r\npackage symbol was seen during namer.\r\n\r\nPackages of interest which seem to have something inside\r\nare not pruned.'
3435,'Ichoran','SI-3235 Add round/ceil/floor to integral number types\nThis is a stopgap measure to prevent implicit conversions to\r\nfloating point numbers which cause issues like\r\n\r\n  123456789.round == 123456792'
3434,'','SI-8213 AnyRefMap.getOrElseUpdate is faulty\nAltered getOrElseUpdate to be robust to the map changing out from under it as a result of calling the default value method.  Side-effects FTW!\r\n\r\nMade a comparable change in LongMap also, as it was also affected.  And added a test to SetMapConsistencyTest.'
3433,'adriaanm','SI-7933 REPL javax.script eval is cached result\n'
3432,'adriaanm',"Improve ExecutionContext implicitNotFound and docs\nIt is not good practice to import a specific ExecutionContext all over the place; we shouldn't recommend that. People should allow callers to specify the context in most cases and only import the context in some central location in their code."
3431,'',"SI-7475 Private members aren't inheritable, and findMember(s) TLC\nPreview to see if PR validation is happy with this, and if\nany previewers (@adriaanm ?) have feedback. Additional test cases\nare really welcome.\n\nI'm planning to give `findMember` a nip and tuck tomorrow to see\nif we can't improve the scrutability, not to mention a bit more\ninternal documentation."
3430,'','SI-8205 [nomaster] backport test pos.lineContent\nVerifies previous behavior.'
3429,'',"SI-8205 Don't include CR in line\nMore penance. Extend the unit test and don't include CR\r\nin the line text.\r\n\r\nThis is obvious, which shows how dangerous it is to refactor\r\nwithout unit tests.\r\n\r\nMy very favorite bugs are off-by-one and EOL handling, followed\r\nclosely by off-by-Int.MaxValue."
3428,'gkossakowski',"SI-6260 Avoid double-def error with lambdas over value classes\nPost-erasure of value classs in method signatures to the underlying\ntype wreaks havoc when the erased signature overlaps with the\ngeneric signature from an overriden method. There just isn't room\nfor both. But we *really* need both; callers to the interface method\nwill be passing boxed values that the bridge needs to unbox and\npass to the specific method that accepts unboxed values.\n\nThis most commonly turns up with value classes that erase to\nObject that are used as the parameter or the return type of\nan anonymous function.\n\nThis was thought to have been intractable, unless we chose\na different name for the unboxed, specific method in the\nsubclass. But that sounds like a big task that would require\ncall-site rewriting, ala specialization.\n\nBut there is an important special case in which we don't need\nto rewrite call sites. If the class defining the method is\nanonymous, there is actually no need for the unboxed method;\nit will *only* ever be called via the generic method.\n\nI came to this realisation when looking at how Java 8 lambdas\nare handled. I was expecting bridge methods, but found none.\nThe lambda body is placed directly in a method exactly matching\nthe generic signature.\n\nThis commit detects the clash between bridge and target,\nand recovers for anonymous classes by mangling the name\nof the target method's symbol. This is used as the bytecode\nname. The generic bridge forward to that, as before, with\nthe requisite box/unbox operations.\n\nReview by @gkossakowski"
3427,'',"SI-8205 Avoid long, slow march to AIIOBE in SourceFile#lineContent\nFixing a regression from SI-8015.\n\nThe failure mode is kind of amusing: a while loop in `lineToString`\nwould count all the way to `Int.MaxValue`, and integer overflow\nwould foil a bounds check when looking for the 'LF' in 'CR'-'LF'.\n\nGiven that we're not a style checker to enforce that source files\nend in a new-line, this commit accounts for EOF, and fixed the\noverflow problem too.\n\nA JUnit test exercises the bug and a few other variations of\n`lineContent`.\n\nReview by @som-snytt / @huitseeker"
3426,'','SI-8199 Account for module class suffix in -Xmax-classfile-name\nThe class file name of an inner class is based on the flattened\nname of its owner chain.\n\nBut, if this is going to be unreasonably long, it is shortened\nwith the help of a MD5 hash.\n\nHowever, after this shortening takes place, we sneakily add one\nmore character (the infamous \'$\') to the name when it is used\nfor the module class. It is thus possible to exceed the limit\nby one.\n\nThe enclosed test failed on Mac with "filename too long" because\nof this. I have also tested for trait implementatation classes,\nbut these seem to be suffixed with "$class" before the name\ncompactification runs, so they weren\'t actually a problem.\n\nThis change is binary incompatible as separately compiled\ndefintions and usages of named, inner classes need to agree\non this setting. Most typically, however, these long names\ncrop up for inner anonymous classes / functions, which are\nnot prone to the binary incompatiblity, assuming that their\ncreation hasn\'t be inlined to a separately compiled client.\n\nReview by @gkossakowski'
3425,'',"SI-7700 @unspecialized, Part Deux: Now Working.\nThis annotation was introduced to allow us to mark methods within\na specialized trait as immune from specialization. In particular,\nthis is desirable for `Function1.{andThen, compose}`.\n\nHowever, it seems we need to check for this in two places in the\nspecialization code base. The feature is now backed with a test.\n\nReview by @VladUreche\n\nThis will introduce a binary incompatibility in the library wrt\n2.11.0-M8. We'll only notice this if partest or scalacheck calls\n`andThen` or `compose` on `Function1`; our PR validation build\nshould tell us whether that's a problem or not."
3424,'adriaanm','SI-7322 Interpolator idents must be encoded\nOtherwise, they are not found.\r\n\r\nThis matters for term names with a differential encoding.'
3423,'retronym',"SI-1503 don't assume unsound type for ident/literal patterns\nWhat type should a variable bound to the value matched by a pattern have?\r\nTo avoid CCEs, it should be a type that's implied by the matching\r\nsemantics of the pattern.\r\n\r\nUsually, the type implied by a pattern matching a certain value\r\nis the pattern's type, because pattern matching implies instance-of checks.\r\n\r\nHowever, Stable Identifier and Literal patterns are matched using `==`,\r\nwhich does not imply a type for the binder that binds the matched value.\r\n\r\nThe change in type checking due to this fix is that programs that used to crash with a CCE\r\n(because we blindly cast to the type of the pattern, which a `==` check does not imply)\r\nnow get a weaker type instead (and no cast). They may still type check, or they may not.\r\n\r\nTo compensate for this fix, change `case x@Foo => x` to `case x: Foo.type => x`,\r\nif it's important that `x` have type `Foo.type`.\r\n\r\nNOTE: once  is fixed, matching of singleton type patterns will use `eq`,\r\nnot `==` (so that the types are not a lie).\r\n\r\nSee also: \r\n\r\nReview by @retronym"
3422,'adriaanm','update mailmap\nreview by @som-snytt, @vladimirnik'
3421,'','SI-4788 Respect RetentionPolicy of Java classes\n'
3420,'densh',"SI-8092 More verify for f-interpolator\nAttempt to verify the nooks and crannies of the format string.\r\n\r\nAllows all syntax in the javadoc, including arg indexes. If the\r\nspecifier after an arg has an index that doesn't refer to the arg,\r\na warning is issued and the missing `%s` is prepended (just as\r\nfor a part with a leading `%n`).\r\n\r\nOther enhancements include detecting that a `Formattable` wasn't\r\nsupplied to `%#s`.\r\n\r\nError messages attempt to be pithy but descriptive."
3419,'adriaanm',"SI-8185 Correct grammar for single-warning compilation run\n50-odd updated tests (!)\r\n\r\nreview by @dragos or @adriaanm or anybody who isn't too busy (this is an easy one)"
3418,'','SI-8182 Avert crash due to type args in pattern\nError out type args on binary op after emitting error.\r\nLet the parse limp into the whirring blades.'
3417,'','SI-8182 Avert crash due to type args in pattern\nStrip type args on binary op after emitting error.\r\nLet the parse limp into the whirring blades.'
3416,'','Prohibit views targeting AnyVal\nLibrary changes in Scala 2.10 mean that we are left with the\nunfortunate situation of admitting:\n\n    scala> "": AnyVal\n    res0: AnyVal =\n\n We already have explicit checks in place to prevent views\n targeting `AnyRef`. This commit balances this out by prohibiting\n `AnyVal`, as well.\n\nThe enclosed test shows that this case is now prevented. If multiple\nimplicits views are applicable, the ambiguity error is still raised;\nthese check comes right at the end. Maybe that ought to be changed,\nbut I don\'t think it matters too much.\n\nI\'ve also disabled this prohibition under -Xsource:2.10.\n\nReview by @adriaanm'
3415,'retronym','[nomaster] corrects an error in reify’s documentation\nreview @retronym'
3414,'retronym','corrects an error in reify’s documentation\n'
3413,'',"Fix misuse of underscores.\n```It's a language bug, but M[_] <: Foo[_] does not mean what\r\nanyone who writes it believes that it means. You have to give\r\nthe type parameter a name, like M[X] <: Foo[X].```"
3412,'','SI-2066 -Xsource:2.10: lenient treatment of variance in <:<, =:=\nThe soundness hole was exploited in Scalaz. They have fixed their\ncodebase correctly for Scalac 7.1.x, but have less freedom to\nbreak source compatiblity in 7.0.x.\n\nAfter this commit, they could choose to compile that branch with\n-Xsource:2.10\n\nReview by @huitseeker and/or @adriaanm'
3411,'','SI-7919 Newline after empty string interp\nConsume the newline non-raw for safe handling after\r\nsingle-line interpolation.'
3410,'','SI-8171 make tq"" an alias for empty type tree\nreview @retronym'
3409,'retronym','SI-6411 SI-7328 value class fixes for runtime reflection\n'
3408,'','Fixes SI-8065 Regression in implicit resolution\nThis is just to see if tests pass. I will close it afterwards.'
3407,'','Move check for undefined members in objects from Namer to RefCheck\nAlternative to #3375 (closed)\r\n\r\nWhen writing an object (or an anonymous class) with declared but undefined members, the compiler complains specifically about the method which is not allowed:\r\n\r\n    object Foo {\r\n      def x: Int  // will cause an error message\r\n    }\r\n\r\nwill emit\r\n\r\n    test.scala:16: error: only classes can have declared but undefined members\r\n      def x: Int\r\n          ^\r\n\r\nThis check has been performed by the Namer, unlike other checks for completeness of classes that are performed in the RefCheck phase. There are two issues with that:\r\n\r\n1. The test in the Namer is conceptually wrong and only shallow (it e.g. does not check for unimplemented inherited abstract methods)\r\n2. This does not allow compiler plugins to generate such code in a post-Typer but pre-RefCheck phase.\r\n3. The testing code exists twice. So this commit removes some duplicate code.\r\n\r\nThis commit moves the check to the RefCheck phase. The example code above will now emit the following error:\r\n\r\n    test.scala:15: error: object creation impossible, since method x is not defined\r\n    object Foo {\r\n           ^\r\n\r\nThe new test `undefined-members` verifies that behavior stays the same.'
3406,'retronym','SI-7570 top-level codegen for toolboxes\nProvides a way to inject top-level classes, traits and modules into\r\ntoolbox universes.\r\n\r\nPreviously that was impossible, because compile and eval both wrap their\r\narguments into an enclosing method of a synthetic module, which makes it\r\nimpossible to later on refer to any definitions from the outside.'
3405,'gkossakowski','SI-3600 Allow annotations on package objects\nThis will desugar annotations on package objects to the object `package` which is generated. Further, it will add the annotations to the package symbol.'
3404,'','Preliminary support for building and testing with Java 8\nA few straightforward fixes of problems that arise when we try to build and test master with Java 8.\r\n\r\nThere are more test failures that are Java 8-specific but we need a release of partest that includes scala/scala-partest#14 first.'
3403,'',"SI-8092 Try to verify f-interpolator format\nThere is a private parse routine on Formatter in OpenJDK,\r\nso use it if it's there to verify the format string.\r\n\r\nOtherwise, try performing the format with dummy arguments.\r\n\r\n"
3402,'xeno-by','SI-7275 allow flattening of blocks with ..$ \nThis commit extends current splicing rules to allow flattening of\r\ntrees into other trees.\r\n\r\nWithout such support it is impossible to correctly use vals with\r\npatterns and use it in other location as they could expand into\r\nmultiple-statement blocks:\r\n```scala\r\n    scala> q"val (a, b) = (1, 2)"\r\n    res0: reflect.runtime.universe.Tree =\r\n    {\r\n      <synthetic> <artifact> private[this] val x$1 = scala.Tuple2(1, 2):\r\n    @scala.unchecked match {\r\n        case scala.Tuple2((a @ _), (b @ _)) => scala.Tuple2(a, b)\r\n      };\r\n      val a = x$1._1;\r\n      val b = x$1._2;\r\n      ()\r\n    }\r\n\r\n    scala> q"..$res0; println(a + b)"\r\n    res1: reflect.runtime.universe.Tree =\r\n    {\r\n      <synthetic> <artifact> private[this] val x$1 = scala.Tuple2(1, 2):\r\n    @scala.unchecked match {\r\n        case scala.Tuple2((a @ _), (b @ _)) => scala.Tuple2(a, b)\r\n      };\r\n      val a = x$1._1;\r\n      val b = x$1._2;\r\n      println(a.$plus(b))\r\n    }\r\n```\r\nreview by @xeno-by'
3401,'retronym','SI-6879 improves Context.freshName\nInstead of per-compilation unit unique counters, the freshName API now\r\nuses a per-Global counter. Fresh names now also contain dollars to exclude\r\nclashes with supported user-defined names (the ones without dollar signs).\r\n\r\nThis doesn’t fix the bug, because per-Global counters get created anew\r\nevery time a new Global is instantiated, and that provides some potential\r\nfor name clashes even for def macros, but at least it completely excludes\r\nclashes in typical situations.'
3400,'adriaanm',"SI-8170 Fix regression in TypeRef#transform w. PolyTypes\nRegressed in SI-8046 / edc9edb7, by my hand.\n\nAt the time, I noticed the problem: transform wasn't accounting\nfor the potential Poly-Type-ness of its argument, and this would\nlead to under-substituted types. The commit comment of edc9edb7\nshows an example.\n\nBut the remedy wasn't the right one. The root problem is\nthat a TypeMap over a PolyType can return one with cloned\ntype parameter symbols, which means we've lose the ability\nto substitute the type arguments into the result.\n\nThis commit detects up front whether the type-under-transform\nis a PolyType with the current TypeRef's type parameters, and\njust runs the `asSeenFrom` over its result type.\n\nReview by @adriaanm"
3399,'retronym','an optimization for c.eval\nPeople are very frequently using c.eval in order to obtain underlying\r\nvalues of literals. Spinning up a new compiler for that modest purpose\r\nis a gross waste of fossil fuels.'
3398,'',"Expose seq field for variable arity definitions\nIn 2.11 we've changed TupleClass, ProductClass and FunctionClass\r\nendpoints to be exposed as (Int => Symbol) functions that never throw\r\nexceptions but rather return NoSymbol instead of previous error-prone\r\nindexed access on array that could explode.\r\n\r\nWhile simplifying one use case (indexed access) it complicated\r\nability to check if symbol at hand is in fact a tuple, product or\r\nfunction:\r\n```scala\r\n  (1 to 22).map(TupleClass).toList.contains(symbol)\r\n```\r\nTo cover this extra use case we add a seq method to the variable arity\r\nclass definitions that exposes a corresponding sequence of class symbols:\r\n```scala\r\n  TupleClass.seq.contains(symbol)\r\n```\r\nreview @retronym "
3397,'retronym','SI-5920 enables default and named args in macros\nWhen producing an initial spec for macros two years ago, we sort of glossed\r\nover named/default arguments in macro applications, leaving them for future work.\r\n\r\nOnce the aforementioned future has come, I’ve made several attempts at\r\nmaking things operational (e.g. last summer), but it’s always been unclear\r\nhow to marry the quite complex desugaring that tryNamesDefaults performs\r\nwith the expectations of macro programmers to see unsugared trees\r\nin macro impl parameters.\r\n\r\nHere’s the list of problems that arise when trying to encode named/default\r\narguments of macro applications:\r\n1) When inside macro impls we don’t really care about synthetic vals\r\nthat are typically introduced to preserve evaluation order in non-positional\r\nmethod applications. When we inline those synthetics, we lose information\r\nabout evaluation order, which is something that we wouldn’t like to lose\r\nin the general case.\r\n2) More importantly, it’s also not very exciting to see invocations of\r\ndefault getters that stand for unspecified default arguments. Ideally,\r\nwe would like to provide macro programmers with right-hand sides of those\r\ndefault getters, but that is: a) impossible in the current implementation\r\nof default parameters, b) would anyway bring scoping problems that we’re\r\nnot ready to deal with just yet.\r\n\r\nBeing constantly unhappy with potential solutions to the aforementioned\r\nproblems, I’ve been unable to nail this down until the last weekend,\r\nwhen I realized that: 1) even though we can’t express potential twists in\r\nevaluation order within linearly ordered macro impl params, we can use\r\nc.macroApplication to store all the named arguments we want, 2) even though\r\nwe can’t get exactly what we want for default arguments, we can represent\r\nthem with EmptyTree’s, which is not ideal, but pretty workable. That’s\r\nwhat has been put into life in this commit.\r\n\r\nAs a pleasant side-effect, now the macro engine doesn’t have to reinvent\r\nthe wheel wrt reporting errors about insufficient arg or arglist count.\r\nSince this logic is intertwined with the tryNamesDefaults desugaring,\r\nwe previously couldn’t make use of it and had to roll our own logic\r\nthat checked that the number of arguments and parameters of macro applications\r\ncorrespond to each other. Now it’s all deduplicated and consistent.'
3396,'retronym','SI-5940 enables default and named args in macros\nWhen producing an initial spec for macros two years ago, we sort of glossed\r\nover named/default arguments in macro applications, leaving them for future work.\r\n\r\nOnce the aforementioned future has come, I’ve made several attempts at\r\nmaking things operational (e.g. last summer), but it’s always been unclear\r\nhow to marry the quite complex desugaring that tryNamesDefaults performs\r\nwith the expectations of macro programmers to see unsugared trees\r\nin macro impl parameters.\r\n\r\nHere’s the list of problems that arise when trying to encode named/default\r\narguments of macro applications:\r\n1) When inside macro impls we don’t really care about synthetic vals\r\nthat are typically introduced to preserve evaluation order in non-positional\r\nmethod applications. When we inline those synthetics, we lose information\r\nabout evaluation order, which is something that we wouldn’t like to lose\r\nin the general case.\r\n2) More importantly, it’s also not very exciting to see invocations of\r\ndefault getters that stand for unspecified default arguments. Ideally,\r\nwe would like to provide macro programmers with right-hand sides of those\r\ndefault getters, but that is: a) impossible in the current implementation\r\nof default parameters, b) would anyway bring scoping problems that we’re\r\nnot ready to deal with just yet.\r\n\r\nBeing constantly unhappy with potential solutions to the aforementioned\r\nproblems, I’ve been unable to nail this down until the last weekend,\r\nwhen I realized that: 1) even though we can’t express potential twists in\r\nevaluation order within linearly ordered macro impl params, we can use\r\nc.macroApplication to store all the named arguments we want, 2) even though\r\nwe can’t get exactly what we want for default arguments, we can represent\r\nthem with EmptyTree’s, which is not ideal, but pretty workable. That’s\r\nwhat has been put into life in this commit.\r\n\r\nAs a pleasant side-effect, now the macro engine doesn’t have to reinvent\r\nthe wheel wrt reporting errors about insufficient arg or arglist count.\r\nSince this logic is intertwined with the tryNamesDefaults desugaring,\r\nwe previously couldn’t make use of it and had to roll our own logic\r\nthat checked that the number of arguments and parameters of macro applications\r\ncorrespond to each other. Now it’s all deduplicated and consistent.'
3395,'jsuereth',"Dist cleanup\n1. Figured out why we were packaging extraneous jars.\r\n2. Removed <distributionManagement> from POMs. I could close the staged repo without the distributionManagement tag, and all the docs I've seen indicate it's a maven-publishing-client kind of thing (not necessary for publishing to maven central).\r\n\r\nReview by @jsuereth (not urgent)"
3394,'','Add cross suffix customizability for modules\nFor each module whose version can be specified using\r\nthe property "xxx.version.number", it is now possible\r\nto specify its cross version suffix by using an\r\noptional property "xxx.cross.suffix".\r\n\r\nIf such a property is not defined, then continue to\r\nuse the string "_${scala.binary.version}", as before.\r\n\r\nReview by @adriaanm'
3393,'Ichoran','SI-8167 readLine shold flush output before reading input\nAs reported on scala-user:\n\n> Using `scala.Predef.readLine(text: String, args: Any*)`\n> on Windows causes strange behavior. If I am leaving some\n> part of `text` unforced to be flushed (say, "---\\nEnter new\n>  expression >") then "Enter new expression >" flushed only\n> after Enter press. Still, it works fine on Ubuntu and (seems like)\n> on MacOS.\n>\n> My workaround is to force `java.lang.System.out` (that readLine\n> depends on to write welcome string) to flush output like\n> "---\\nEnter new expression >\\n".\n\nReview by @ichoran'
3392,'retronym','deprecates resetAllAttrs and resetLocalAttrs in favor of the new API\nreview @retronym'
3391,'retronym',"SI-8131 fixes residual race condition in runtime reflection\nreview @retronym\r\n\r\nThis is the version of yesterday's pull request with `gitSynchronizedIfNotThreadsafe` optimization disabled. Let's get this in first and experiment with optimizations later."
3390,'','Versions of modules part of Scala 2.11.0-M8.\n'
3389,'lrytz','SI-8134 SI-5954 Fix companions in package object under separate comp.\nReview by @odersky'
3388,'','SI-7445 ListMap.tail is returning wrong result\nReverted the commit that introduced the bug, and modified HashMap to no\r\nlonger assume that tail is O(1).\r\n\r\nReview by @Ichoran, @soc'
3387,'retronym','SI-8131 fixes residual race condition in runtime reflection\nreview @retronym'
3386,'retronym','SI-8131 fixes residual race condition in runtime reflection\nreview @retronym'
3385,'retronym','fixes some typos and types\nreview @retronym /cc @densh'
3384,'retronym','Merge 2.10.x\nforgot one PR from the 2.10.4-RC2 queue\r\n\r\nclean merge, luckily -- review by @retronym'
3383,'retronym','Merge 2.10.x\nreview by @retronym\r\n\r\n```\r\n$ g co 2.10.x && g pull scala 2.10.x && g co master && g pull scala master\r\n$ export MB=`git merge-base 2.10.x master` # 9cdbe28c00b39c51ae9afe3066c8b44a6e5f6f96\r\n$ git log --graph --oneline $MB...2.10.x\r\n\r\n*   b3ad7534fb (scala/2.10.x, 2.10.x) Merge pull request #3364 from retronym/ticket/8152\r\n|\\  \r\n| * 9df2dcc584 (scala/pr/3364) [nomaster] SI-8152 Backport variance validator performance fix\r\n* |   d5801b9eee Merge pull request #3328 from retronym/ticket/8111\r\n|\\ \\  \r\n| |/  \r\n|/|   \r\n| * c91d373a78 (scala/pr/3328) SI-8111 Expand the comment with a more detailed TODO\r\n| * 2c770ae31a (scala/pr/3327) SI-8111 Repair symbol owners after abandoned named-/default-args\r\n* |   a8122413c0 Merge pull request #3345 from retronym/ticket/8114\r\n|\\ \\  \r\n| * | 5876e8c621 (scala/pr/3345) [nomaster] SI-8114 Binary compat. workaround for erasure bug SI-7120\r\n* | |   aefe3fb844 Merge pull request #3344 from jamesward/fix/ec-implicit-error\r\n|\\ \\ \\  \r\n| |/ /  \r\n|/| |   \r\n| * | bd4adf5c97 (scala/pr/3344) More clear implicitNotFound error for ExecutionContext\r\n|/ /  \r\n* |   1f2cd7e512 (origin/2.10.x) Merge pull request #3329 from retronym/ticket/6563\r\n|\\ \\  \r\n| |/  \r\n|/|   \r\n| * 255c51b3dd (scala/pr/3329) SI-6563 Test case for already-fixed crasher\r\n|/  \r\n*   370d6d6188 Merge pull request #3312 from xeno-by/topic/fine-points-of-whiteboxity-210x\r\n|\\  \r\n| * c0cb1d891a (scala/pr/3312) [nomaster] codifies the state of the art wrt SI-8104\r\n|/  \r\n*   97b9b2c06a Merge pull request #3282 from retronym/ticket/8085\r\n|\\  \r\n| * 7e85b59550 (scala/pr/3282) SI-8085 Fix BrowserTraverser for package objects\r\n| * a12dd9c3b6 Test demonstrating SI-8085\r\n|/  \r\n*   5cbb5a7f62 (tag: v2.10.4-RC1) Merge pull request #3268 from adriaanm/support-3021\r\n|\\  \r\n| * 3fa2c97853 (scala/pr/3268, adriaanm/support-3021) Report error on code size overflow, log method name.\r\n|/  \r\n* 2aa9da578e Partially revert f8d8f7d08d.\r\n*   ba7bf5e229 Merge pull request #3261 from adriaanm/ticket-6426\r\n|\\  \r\n| * 47562e7adb (scala/pr/3261, adriaanm/ticket-6426, ticket-6426) Revert "SI-6426, importable _."\r\n* da919ec24c Merge pull request #3253 from retronym/ticket/8062\r\n* f0d913b51d (scala/pr/3253) SI-8062 Fix inliner cycle with recursion, separate compilation\r\n\r\n$ g log --oneline --no-merges $MB..97b9b2c06a\r\n7e85b59550 (scala/pr/3282) SI-8085 Fix BrowserTraverser for package objects\r\na12dd9c3b6 Test demonstrating SI-8085\r\n3fa2c97853 (scala/pr/3268, adriaanm/support-3021) Report error on code size overflow, log method name.\r\n2aa9da578e Partially revert f8d8f7d08d.\r\n47562e7adb (scala/pr/3261, adriaanm/ticket-6426, ticket-6426) Revert "SI-6426, importable _."\r\nf0d913b51d (scala/pr/3253) SI-8062 Fix inliner cycle with recursion, separate compilation\r\n\r\n$ g log --oneline --no-merges 97b9b2c06a..370d6d6188\r\nc0cb1d891a (scala/pr/3312) [nomaster] codifies the state of the art wrt SI-8104\r\n\r\n$ g log --oneline --no-merges 370d6d6188..aefe3fb844\r\nbd4adf5c97 (scala/pr/3344) More clear implicitNotFound error for ExecutionContext\r\n255c51b3dd (scala/pr/3329) SI-6563 Test case for already-fixed crasher\r\n\r\n$ g log --oneline --no-merges aefe3fb844..a8122413c0\r\n5876e8c621 (scala/pr/3345) [nomaster] SI-8114 Binary compat. workaround for erasure bug SI-7120\r\n\r\n$ g log --oneline --no-merges a8122413c0..d5801b9eee\r\nc91d373a78 (scala/pr/3328) SI-8111 Expand the comment with a more detailed TODO\r\n2c770ae31a (scala/pr/3327) SI-8111 Repair symbol owners after abandoned named-/default-args\r\n\r\n$ g log --oneline --no-merges d5801b9eee..2.10.x\r\n9df2dcc584 (scala/pr/3364) [nomaster] SI-8152 Backport variance validator performance fix\r\n\r\n$ g merge 97b9b2c06a\r\n$ g merge -s ours 370d6d6188\r\n$ g merge aefe3fb844\r\n$ g merge -s ours a8122413c0\r\n$ g merge d5801b9eee\r\n$ g merge -s ours 2.10.x\r\n\r\n```'
3382,'',"Improve naming of ReadStdin\nWe don't need to say everything twice, methods are already prefixed\r\nwith “read”."
3381,'','Fix compilation under -Ydebug\nReview by @xeno-by\r\n\r\nBefore this patch:\r\n\r\n```\r\n% scalac -Ydebug test/files/pos/t3999b.scala\r\n..\r\nwarning: !!! ... hit cycle trying to complete class FT\r\ntest/files/pos/t3999b.scala:5: error: illegal cyclic reference involving class FT\r\n  case class FT(f : Float) extends Score\r\n             ^\r\nlocals (2 total):\r\n  constructor FT\r\n  value f\r\nlocals (6 total):\r\n  class FT\r\n  module FT\r\n  value <local FT>\r\n  value f\r\n  constructor FT\r\n  value f\r\n```'
3380,'','SI-8157 Make overloading, defaults restriction PolyType aware\nNamed/Default args levies an implementation restriction that\nonly one overloaded alternative may declare defaults.\n\nBut, this restriction failed to consider polymorphic methods.\n\nRather than matching on MethodType, this commit uses `Type#paramms`,\nwhich handles PolyTypes and curried MethodTypes in one fell swoop.\n\nReview by @odersky, who found the bug.'
3379,'','Windows installer sets incorrect path\ni installed scala 2.10.3, windows installer edition with default options on windows 7 (version 6.1.7600)\r\nthe windows PATH is set to ```C:\\Program Files\\scala\\\\bin```\r\n(look at extra \\\\)\r\n\r\ni wonder if this repository is responsible for that or the windows installer is maintained somewhere else?'
3378,'','Fix typo\nIn "for inner classes `val mm2 = im.reflectClass(<module symbol>)`", `<module symbol>` should read `<class symbol>`.\r\n\r\nThe same error is also in docs.scala-lang.org, so I sent pull request scala/scala.github.com#284.\r\n\r\nReview by @heathermiller or @xeno-by.'
3377,'','Fix EOL-printing in Printers test suite\nFixes for [problem](https://gist.github.com/adriaanm/8449000) with EOL processing in Printers test suite (scala-nightly-windows tests failed).\r\n1. EOL printing in scala.reflect.internal.Printers is modified.\r\n2. EOL processing for tests (PrintersTest) is added.\r\n'
3376,'adriaanm',"SI-8153 Mutation is hard, let's go shopping with an empty list\nChanged the implementation of iterator to be more robust to mutation of the underlying ListBuffer.\r\n\r\nTest added to verify the fix."
3375,'','Move check for undefined members in objects from Typer to RefCheck\nAlternative PR: #3407 \r\n\r\nWhen writing an object (or an anonymous class) with declared but undefined members, the compiler complains specifically about the method which is not allowed:\r\n\r\n    object Foo {\r\n      def x: Int  // will cause an error message\r\n    }\r\n\r\nwill emit\r\n\r\n    test.scala:16: error: only classes can have declared but undefined members\r\n      def x: Int\r\n          ^\r\n\r\nThis check has been performed by the Typer, unlike other checks for completeness of classes that are performed in the RefCheck phase. There are two issues with that:\r\n\r\n1. The test in the typer is conceptually wrong and only shallow (it\r\n   e.g. does not check for unimplemented inherited abstract methods)\r\n2. This does not allow compiler plugins to generate such code in a\r\n   post-Typer but pre-RefCheck phase.\r\n\r\nThis commit moves the check to the RefCheck phase. Error messages remain the same, except for the additional "object creation impossible" message emitted from the RefCheck phase. The example code above will now emit the following errors:\r\n\r\n    test.scala:15: error: object creation impossible, since method x is not defined\r\n    object Foo {\r\n           ^\r\n    test.scala:16: error: only classes can have declared but undefined members\r\n      def x: Int\r\n          ^\r\n\r\nThere is no need for additional tests since `neg/nested-fn-print` and `neg/t565` already verify this behavior.'
3374,'','SI-6844  SI-8076 improve handling of function parameters in quasiquotes\nFixes two bugs related to handling of function parameters:\r\n\r\n* [SI-6844](https://issues.scala-lang.org/browse/SI-6844) restrict splicing in parameter position\r\n* [SI-8076](https://issues.scala-lang.org/browse/SI-8076) improve support for implicit argument list\r\n\r\nBest viewed per commit. \r\n\r\nreview @retronym'
3373,'','A few minor changes to standard liftable instances and liftable support\n1. Fixes existing `Liftable` definitions to cover more use-cases \r\n2. Renames `UnliftHelper1` into `UnliftListElementwise` and `UnliftHelper2` into `UnliftListOfListsElementwise`\r\n3. Removes redundant `asInstanceOf` from `Liftable` support implementation\r\n\r\nBest viewed per-commit. \r\n\r\nreview @xeno-by'
3372,'','SI-8148 fix anonymous functions with placeholders in quasiquotes\nQuasiquotes used to fail to generate proper fresh identifiers for\r\nanonymous functions like:\r\n\r\n```\r\n  q"_ + _" // used to be parsed as q"(x$1, x$1) => x$1 + x$1"\r\n```\r\n\r\nDue to improper initialization of FreshNameCreator in quasiquote\r\nparser which was erroneously not preserved throughout parsing of\r\nthe code snippet but re-created on every invocation.\r\n\r\nreview @retronym'
3371,'gkossakowski','SI-8154 AnyRefMap iterates its way to ((null, null))\nChanged logic to prevent mutation between hasNext and next from delivering invalid results.'
3370,'',"Repairs unexpected failure of test t6200.scala\nAdded extra ()'s to get rid of deprecation warning for inferring unit arg."
3369,'','SI-8132 Fix false "overrides nothing" for case class protected param\nCase class parameters that are less-than-public have an accessor\nmethod created. In the enclosed test, we saw:\n\n    case class G extends AnyRef with T with Product with Serializable {\n      override <synthetic> <stable> <caseaccessor> def s$1: String = G.this.s;\n      <caseaccessor> <paramaccessor> private[this] val s: String = _;\n      override <stable> <accessor> <paramaccessor> protected def s: String = G.this.s;\n      ...\n    }\n\nThis commit removes the OVERRIDE flag from the accessor method,\nwhich avoids the spurious "overrides nothing" error.\n\nReview by @gkossakowski'
3368,'','SI-8151 Remove -Yself-in-annots and associated implementation\nThis experimental option typechecked arguments of annotations\nwith an injected value in scope named `self`:\n\n    @Foo(self.foo < 1)\n\nThis has been slated for removal [1] for some time.\n\nThis commit removes it in one fell swoop, without any attempt\nat source compatibility with code that constructs or pattern\nmatches on AnnotatedType.\n\n[1] https://groups.google.com/d/msg/scala-internals/VdZ5UJwQFGI/C6tZ493Yxx4J'
3367,'','[nomaster] SI-8146 Fix non-deterministic <:< for deeply nested types\nBackported from master. This is a squashed commmit comprising:\n\nSI-8146 Pending test, diagnosis for bug in decidability of <:<\n\n(cherry picked from commit 8beeef339ad65f3308ece6fb0440cdb31b1ad404)\n\nSI-8146 Test cases for typechecking decidability\n\nTaken from "On Decidability of Nominal Subtyping with Variance"\n(Pierce, Kennedy), which was implemented in 152563b.\n\nPart of the implementation (SubTypePair) will be changed in the\nfollowing commit to fix the non-deterministic errors typechecking\nheavily nested types involving aliases or annotations.\n\n(cherry picked from commit 2e28cf7f76c3d5fd0c2df4274f1af9acb42de699)\n\nSI-8146 Fix non-deterministic <:< for deeply nested types\n\nIn the interests of keeping subtyping decidable [1], 152563b\nadded some bookkeeping to `isSubType` to detect cycles.\n\nHowever, this was based on a hash set containing instances of\n`SubTypePair`, and that class had inconsistencies between its\n`hashCode` (in terms of `Type#hashCode`) and `equals`\n(in terms of `=:=`).\n\nThis inconsistency can be seen in:\n\n    scala> trait C { def apply: (Int @unchecked) }\n    defined trait C\n\n    scala> val intUnchecked = typeOf[C].decls.head.info.finalResultType\n    intUnchecked: $r.intp.global.Type = Int @unchecked\n\n    scala> val p1 = new SubTypePair(intUnchecked, intUnchecked)\n    p1: $r.intp.global.SubTypePair = Int @unchecked <:<? Int @unchecked\n\n    scala> val p2 = new SubTypePair(intUnchecked.withoutAnnotations, intUnchecked.withoutAnnotations)\n    p2: $r.intp.global.SubTypePair = Int <:<? Int\n\n    scala> p1 == p2\n    res0: Boolean = true\n\n    scala> p1.hashCode == p2.hashCode\n    res1: Boolean = false\n\nThis commit switches to using `Type#==`, by way of the standard\ncase class equality.\n\nThe risk here is that you could find a subtyping computation that\nprogresses in such a manner that we don\'t detect the cycle. It would\nneed to produce an infinite stream of representations for types that\nwere `=:=` but not `==`. If that happened, we\'d fail to terminate,\nrather than judging the relationship as `false`.\n\n[1] http://research.microsoft.com/pubs/64041/fool2007.pdf\n\n(cherry picked from commit a09e143b7fd1c6b433386d45e9c5ae3548819b59)\n\nConflicts:\n\tsrc/reflect/scala/reflect/internal/tpe/TypeComparers.scala\n\tsrc/reflect/scala/reflect/runtime/JavaUniverseForce.scala\n\nReview by @adriaanm'
3366,'','SI-6457 ImmutableSetFactory.empty results in StackOverflowError\nImmutableSetFactory relies upon empty to create its builder, which in turn relies upon its builder to create an empty.  Added an emptyInstance method to hold the actual empty set (which also removes duplicated functionality for empty sets).\r\n\r\nNo test, as the original pattern:\r\n\r\n  object Factory extends collection.generic.ImmutableSetFactory[collection.immutable.Set] {}\r\n\r\nno longer compiles.  This should be verified by whoever checks this commit, but this kind of change is hard to revert by accident.  No reason to waste resources checking it forevermore.'
3365,'adriaanm','SI-8133 Fix regression with package objects, overloading\nReview by @adriaanm.\n\n/cc @paulp on the off chance you haven\'t scrubbed the part of\nyour memory that could confirm or disconfirm the "ostensibly"\npart.'
3364,'',"[nomaster] SI-8152 Backport variance validator performance fix\n    % time qbin/scalac test/files/pos/t8146-performance.scala\r\n\r\n\treal\t0m2.015s\r\n\tuser\t0m2.892s\r\n\tsys\t0m0.215s\r\n\r\n\t% time scalac-hash v2.10.3 test/files/pos/t8146-performance.scala\r\n\r\n\treal\t1m13.652s\r\n\tuser\t1m14.245s\r\n\tsys\t0m0.508s\r\n\r\nCherry-picks one hunk from 882f8e64.\r\n\r\nAffects Slick, so I'm considering for 2.10.4. Review by @adriaanm"
3363,'adriaanm','SI-8146 Fix non-deterministic <:< for deeply nested types\nDetails in the commit messages.\r\n\r\nReview by @adriaanm, @odersky /cc @szeiger'
3362,'','SI-7544 StringContext.f docs update\nCorrect the scaladoc to reflect how f"%" is handled,\r\nnamely, it\'s no longer taken as f"%%".\r\n\r\nStole this correction from https://github.com/scala/scala/pull/3360. Except for the `%q` part.'
3361,'adriaanm','SI-6615 junit test\nTest for #3303'
3360,'','SI-8147 Add f"%q" escaped quote\nWhen the f-interpolator processes conversions, it also\r\nsubstitutes "\\"" for "%q" with this commit.\r\n\r\nThis may not fly, in the face of $", but it has a pleasing uniformity; maybe it will await other compelling additions to the conversion layer.\r\n'
3359,'','[backport] Backports library changes related to SI-6566 from a419799\nThe idea of backporting this occured while developing the -source flag for\r\nSI-8126 : without this the library breaks at refchecks for any Scala compiler\r\nthat checks type aliases variance.\r\n\r\nShould be BC and promote good hygiene. Review by @retronym.'
3358,'',"SI-8136 Replaced `askTypeAt` with `askEnclosingTreesAt` in `CompilerControl`\nWhile working on a fix for SI-8125, I found out that the Trees with\r\nsynthetic `apply` where constructed with the wrong kind of positions on\r\npurpose. The rationale for doing so was that the Scala IDE relies on\r\nopaque range positions for providing hyperlinking, and we wanted to\r\nsupport hyperlinkling to `apply` definition when hovering on a qualifier\r\nwith a synthetic `apply`. However, if the Select Tree containing the\r\n`apply` was given a transparent position (as it should be the case, and\r\nthat's indeed the issue I'm fixing with SI-8125), the Scala IDE would no\r\nlonger offer hyperlinking to `apply` declaration (some more information\r\nabout this can be found in this discussion\r\nhttps://github.com/scala/scala/pull/1251/files#r1573933).\r\n\r\nThe proposed solution was to change the implementation of\r\n`askTypeAt(pos)` to return the parents' chain enclosing `pos`, instead\r\nof only the innermost tree. However, making this change would be both\r\nsource and binary incompatible, because the signature of the method\r\nwould be different. Hence, I'm taking a different road here and adding a\r\nnew method to the `CompilerControl` API to carry out the desired\r\nfunctionality: `askEnclosingTreesAt(pos)`. This method will allow us to\r\nnavigate the parents chain of the Tree found at the passed `pos`, making\r\nit possible to fix SI-8125 and still be able to offer hyperlinking on\r\nsynthetic `apply`.\r\n\r\nreview by @dragos"
3357,'adriaanm',"SI-8143 Regressions with override checks, private members\nThese regressed in e609f1f20b, which excluded all private methods from\r\noverriding checks. We should only exclude private[this] members on the\r\nlow end of a pair, as was done before that commit, and, we must also\r\nexclude private members on the high side.\r\n\r\nWhy? Warning: reverse engineered intuition follows.\r\n\r\nWe need to report an error when if a private method in a subclass\r\nhas matches a less-private method in the super class and report an\r\nerror, lest the user be fooled into thinking it might be invoked\r\nvirtually. On the other hand, adding a private method to a super\r\nclass shouldn't invalidate the choice names of public members in\r\nits superclasses.\r\n\r\nI've removed the test case added by that commit and will lodge a\r\nreworked version of it that Paul provided as a new issue. That shows\r\na bug with qualified private + inheritance.\r\n\r\nIn addition, the expectation of `neg/accesses.check` is reverted\r\nto its 2.10.3 version, which I believe is correct. When it was\r\nchanged in e609f1f20b it sprouted a variation, `neg/accesses-2`,\r\nwhich has now changed behaviour. The intent of that test will\r\nbe captured in the aforementioned issue covering qualified private\r\ninheritance.\r\n\r\nReview by @adriaanm.\r\n"
3356,'',"SI-8138 Fix bug with super-accessors / dependent types\nSuper-accessors are generated as `DefDef`'s with `EmptyTree` as a\r\nplaceholder for the RHS. This is filled in later in `Mixin` in\r\n`completeSuperAccessor`.\r\n\r\nA change in `Uncurry` ( / 493197f), however, converted this\r\nto a `{ EmptyTree }`, which evaded the pattern match in mixin.\r\n\r\nThis commit adds a special case to the dependent method treatment\r\nin Uncurry to avoid generating redundant blocks."
3355,'retronym','reshuffles names for blackbox/whitebox contexts, changes bundle notation\nreview @retronym'
3354,'retronym','deprecates c.enclosingTree-style APIs\nExisting enclosing tree macro APIs face both technical and philosophical problems.\r\n\r\nOn the one hand, it’s close to impossible to provide their robust\r\nimplementation within the current typer infrastructure. From the very\r\nbeginning, these APIs have been very experimental, and I was very much\r\nhoping to tackle the underlying technical problems, but after a year and\r\na half I can say that it’s still outside our reach.\r\n\r\nOn the other hand, we’re gravitating towards increasingly more local macro\r\nexpansion, which is in direct contradiction with the existence of\r\nc.enclosingTree APIs. Therefore, in order to be able to further evolve\r\nmacros, we need need additional freedom to reshape the enclosing tree APIs.\r\n\r\nTherefore I suggest we deprecate the aforementioned APIs and start\r\npreparing ourselves to removing them for good in 2.12.0.\r\n\r\nI hope that existing macros that use these APIs can be reformulated in\r\nterms of completely local expansion or be built on top of orthogonal\r\nlanguage features (existing ones or new ones, e.g. something like\r\nhttps://groups.google.com/forum/#!topic/scala-debate/f4CLmYShX6Q).\r\nPlease share your use cases, and I will be glad to help!\r\n\r\nWe have at least the entire 2.12 development cycle ahead of us, so I’m\r\nsure we’ll figure this out. Let’s shape robust and scalable reflection\r\nAPI together!'
3353,'','SI-8124 Scaladoc package object members\nModifies the package pruning test to check whether the\r\npackage was first seen during namer.  Scaladoc gets a\r\ncustom namer that remembers package symbols.\r\n\r\nA nicer mechanism may have been to turn on symbol\r\ntracking and then query the tracker after namer, but\r\nthere are no hooks presently for that.'
3352,'','Need better Scaladocs for String and other Java wrappers\nThe humble "String.replaceAll()" method, available in the "String" type via the StringOps type and implemented in the JDK, lacks documentation in Scaladocs. A new Scala programmer will have a devil of a time finding (1) where the "String" type scaladocs are located and (2) once on the "StringOps" page where the docs for replaceAll() are located.\r\n'
3351,'retronym','fixes run/macroPlugins-namerHooks.scala\nMakes run/macroPlugins-namerHooks.scala work equally well on both\r\nUnix and Windows machines.'
3350,'','SI-8131 Move test for reflection thread safety to pending.\nExamples noted in SI-8131 show that race conditions still abound.\nThis has been noted twice during pull request validation.\n\nReview by @xeno-by\n\n/cc @dotta'
3349,'','SI-8135 Disabled flaky hyperlinking presentation compiler test\nThis PR (https://github.com/scala/scala/pull/3275#issuecomment-31986434)\r\ndemonstrates that the test is flaky.\r\n\r\nThe disabled test was introduced with the intent of preventing a\r\nregression (here is the commit\r\nhttps://github.com/scala/scala/commit/ccacb06c4928fd6aebc2c2539d7565cb079dc625).\r\n\r\nIt looks like there is a race condition when `askTypeAt(pos)` is called\r\non `implicitly[Foo[A]].foo` where `pos` is matches the end point of the\r\nformer expression. The issue is that the returned Tree is unattributed,\r\nwhich is why the error "No symbol is associated with tree\r\nimplicitly[Foo[A]].foo" is reported.'
3348,'retronym','deprecates resetAllAttrs and resetLocalAttrs in favor of the new API\nWe now have c.untypecheck, which is supposed to be a counterpart of c.typecheck\r\nin the sense that it goes back from typed trees to untyped ones:\r\nhttp://stackoverflow.com/questions/20936509/scala-macros-what-is-the-difference-between-typed-aka-typechecked-an-untyped.\r\n\r\nLet’s hope that c.untypecheck will soon be able to solve our problems\r\nwith partially/incorrectly attributed trees emitted by macros:\r\nhttps://groups.google.com/forum/#!topic/scala-internals/TtCTPlj_qcQ.'
3347,'',"Remove temporary binary compat scaffolding from AbstractPartiionFun.\nThese were only needed during the transition period when we removed\nspecialization on AnyRef from `AbstractPartialFunction`.\n\nIt's time to cast away the crutches.\n\nReview by @gkossakowski"
3346,'gkossakowski','SI-8129 Plug a leak in perRunCaches\nI guess we\'ve never leaned to heavily on these, because the\r\nregistry of caches was forgetting about most of them\r\nimmediately if they compared == at the point of creation.\r\n\r\nConsequently, maps like `treatedInfos` in Mixin were holding\r\nonto old types and symbols and leaking memory.\r\n\r\nYou can reproduce the leak with:\r\n\r\n\t(for i in {1..200}; do echo src/library/scala/collection/*.scala; done; printf "\\n") | scalac-hash v2.11.0-M7 -J-Xmx256M -Xresident\r\n\r\n\tnsc> warning: there were 6 deprecation warning(s); re-run with -deprecation for details\r\n\r\n\t(... 15 times)\r\n\r\n\tnsc> java.lang.OutOfMemoryError: GC overhead limit exceeded\r\n\tDumping heap to java_pid90362.hprof ...\r\n\tHeap dump file created [340635728 bytes in 7.993 secs]\r\n\t^CException in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded\r\n\r\nReview by @gkossakowski'
3345,'adriaanm',"[nomaster] SI-8114 Binary compat. workaround for erasure bug SI-7120\nWe can't backport SI-7120 to 2.10.x as it changes erased signatures,\nwhich can lead to interop problems between 2.10.3 and 2.10.4.\n\nBut, we can detect one of the nasty symptoms -- a bridge method\nwith the same signature as its target -- and treat that.\n\nThis commit detects duplicate bridges in the ASM (only) backend\nand removes them.\n\nReview by @adriaanm @magarcia"
3344,'','More clear implicitNotFound error for ExecutionContext\n'
3343,'','SI-8107 Add Regex.quoted\nAdd `quoted` as an instance method of Regex.\r\n\r\nChange `pattern` to a lazy val to defer compilation.\r\n\r\nThis makes the regex string the primary representation,\r\nreverting a previous change that preferred the compiled\r\npattern.\r\n\r\nThis is complementary to https://github.com/scala/scala/pull/3317.\r\n'
3342,'retronym','Presentation compiler friendliness for macros\n   - Retain macro expansion in the tree in the presentation compiler\r\n     under a new setting -Ymacro-expand:discard.\r\n   - Deprecate -Ymacro-no-expand, in favour of -Ymacro-expand:none\r\n   - Prevent range position validation errors in macro expansions (even\r\n     though the preceding change means they no longer impact the IDE.)\r\n\r\nI trialled the "discard-the-macro-expansion" approach recently in\r\nscala-async (it can actually all be driven from a suitably ambitious\r\nmacro), and the results in the IDE were pleasing: hyperlinking works\r\nas expected.\r\n\r\nFuture work: Add `-Ymacro-expand:discard-whitebox-only` to avoid expanding\r\nblackbox macros altogether. This would be handy when troubleshooting\r\nperformance problems in the IDE.'
3341,'','SI-7859 fix AnyVal.scala scaladoc.\nValue class member need not be public in 2.11+'
3340,'adriaanm','SI-8126 add -Xsource option to let (parts of) the compiler run on older code\nThis adds a `-source` flag and puts various 2.10 source-level\r\ncompatibility-breaking fixes under it (so that the fixed codepath\r\ndoesn\'t run with -source:2.10). \r\n\r\nThe last commit adds another (early) setting (`-Yrelax-variance-checks`)\r\nfor the specific checks brought by SI-6566, fixed in a419799f87. This\r\nis needed to bypass the stricter (and correct) variance checks done in\r\n`reflect/internal/Variances`. `-Y-relax-variance-checks`, contrarily to\r\n`-source`, doesn\'t depend on the `nsc.settings.ScalaVersion` class. This\r\noption is turned on by `-source:2.10`\r\n\r\nThis has been tested by compiling the 2.10 scala library (using the\r\ncompiler in this PR , with "`-source:2.10 -Ystop-after:typer`") using\r\nthis project: https://github.com/huitseeker/scala-library\r\n\r\nreview by @dragos or @retronym.'
3339,'','SI-5722 Macrofy classOf, make it work with ClassTags\n'
3338,'retronym','SI-7491 fix typo in scala.App documentation\nThis is a really cheap PR, but hey, there was a ticket for it!'
3337,'retronym','SI-8125 SI-8130 position fixes for presentation compiler\nreview by @retronym\r\n\r\n@danchia This PR should make you happy ;-)'
3336,'retronym','Fix typo in documentation\n'
3335,'Ichoran','Fixes #3330 with Scaladoc changes only\nImproves the Scaladocs for sequence operations apply(), +:, :+, ++, /:, :\\ and addString.'
3334,'adriaanm','SI-4841 CLI help update for -Xplugin\nThe argument to `-Xplugin` is now a comma-separated list of paths.\r\nThis commit updates the option descriptor and a code comment.'
3333,'adriaanm','Update man pages for scala and scalac.\nThey had fallen quite a bit behind the output of\r\n"scalac -X" and "scalac -Xshow-phases".\r\n\r\n----\r\nI always have to remember to query scalac directly instead of using the man page; well, not anymore :-)\r\n\r\nHere is the resulting html man page : https://dl.dropboxusercontent.com/u/46938538/static/man/html/scalac.html\r\nAnd the old one for comparison: http://www.scala-lang.org/files/archive/nightly/docs/manual/html/scalac.html'
3332,'retronym','ExistentialTypeTree.whereClauses are now MemberDefs\nToday’s flight back to Lausanne wasn’t as productive as the recent flight\r\nto Minsk (https://github.com/scala/scala/pull/3305), but I noticed\r\none minor thingie: ExistentialTypeTree had an imprecise type specified\r\nfor its whereClauses. This is now fixed.\r\n\r\nI didn’t increment PickleFormat.*Version numbers, because this change\r\nintroduces only a miniscule incompatibility with what would have been\r\na meaningless and most likely crash-inducing pickle anyway.'
3331,'',"SI-8120 Avoid tree sharing when typechecking patmat anon functions\nWhen typechecking an empty selector `Match` corresponding to:\n\n    { case ... => ... }: (A => B)\n\nWe wrap it in a `Function` and typecheck:\n\n    (x$1 => x$1 match { case ... => ... })\n\nLocal symbols in this expression (representing values bound by\nthe pattern, or just definitions in the body or guard) are then\nowned by the anonymous function's symbol.\n\nHowever, if we ever discard this `Function` and start anew with\nthe empty selector match, as happens during the fallback to\nuse a view on the receiver in `tryTypedApply`, we found that we\nhad mutated the cases of the original tree, and allowed orphaned\nlocal symbols to escape into the compiler pipeline.\n\nThis commit uses duplicated trees for the the cases in the synthetic\n`Match` to avoid this problem.\n\nReview by @adriaanm @xeno-by"
3330,'',"Scaladoc for GenTraversableLike.++() should use List, not LinkedList\nThe scaladoc for GenTraversableLike.++(), which is reused by subclasses including List, uses a mutable LinkedList as an example. \r\n\r\nThis is a poor choice to show off the ++() method since (a) there's no actual mutating happening here, (b) using immutable sequences is preferable and (c) the text would be simplified by using List\r\n\r\n```\r\nscala> val a = LinkedList(1)\r\na: scala.collection.mutable.LinkedList[Int] = LinkedList(1)\r\n\r\nscala> val b = LinkedList(2)\r\nb: scala.collection.mutable.LinkedList[Int] = LinkedList(2)\r\n\r\nscala> val c = a ++ b\r\nc: scala.collection.mutable.LinkedList[Int] = LinkedList(1, 2)\r\n\r\nscala> val d = LinkedList('a')\r\nd: scala.collection.mutable.LinkedList[Char] = LinkedList(a)\r\n\r\nscala> val e = c ++ d\r\ne: scala.collection.mutable.LinkedList[AnyVal] = LinkedList(1, 2, a)\r\n```\r\n\r\nI'll happily submit a pull request if approved.\r\n"
3329,'','SI-6563 Test case for already-fixed crasher\nProgressed to working in SI-7636 / c4bf1d5.'
3328,'',"SI-8111 Repair symbol owners after abandoned named-/default-args\nNames/Defaults eagerly transforms an application with temporaries\nto maintain evaluation order, and dutifully changes owners of\nsymbols along the way.\n\nHowever, if this approach doesn't work out, we throw away this\nand try a auto-tupling. However, we an still witness symbols\nowned by the temporaries.\n\nThis commit records which symbols are owned by the context.owner\nbefore `transformNamedApplication`, and rolls back the changes\nbefore `tryTupleApply`.\n\nPerhaps a better approach would be to separate the names/defaults\napplicability checks from the evaluation-order-preserving transform,\nand only call the latter after we have decided to go that way."
3327,'','2.10.x\n'
3326,'retronym','SI-8032 Provides an implicit macro for materialization of Liftable for case classes\nNow case classes can be used in quasiquotes.\r\n\r\n```scala\r\nWelcome to Scala version 2.11.0-20140105-195053-c1b3d94af9 (OpenJDK 64-Bit Server VM, Java 1.7.0_45).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n\r\nscala> import scala.reflect.runtime.{universe => u}\r\nimport scala.reflect.runtime.{universe=>u}\r\n\r\nscala> import u._\r\nimport u._\r\n\r\nscala> case class Test(str: String, i: Int, lst: List[Double])\r\ndefined class Test\r\n\r\nscala> val test = Test("test", 1, List(2.0, 3.5))\r\ntest: Test = Test(test,1,List(2.0, 3.5))\r\n\r\nscala> showRaw(q"$test")\r\nres0: String = Apply(Select(Select(Select(Select(Select(Ident($line8.$read), TermName("$iw")), TermName("$iw")), TermName("$iw")), TermName("$iw")), TermName("Test")), List(Literal(Constant("test")), Literal(Constant(1)), Apply(Select(Select(Select(Ident(scala), TermName("collection")), TermName("immutable")), TermName("List")), List(Literal(Constant(2.0)), Literal(Constant(3.5))))))\r\n\r\nscala> val cm = runtimeMirror(getClass.getClassLoader)\r\ncm: reflect.runtime.universe.Mirror = JavaMirror with scala.tools.nsc.interpreter.IMain$TranslatingClassLoader@74a2ccbd of type class scala.tools.nsc.interpreter.IMain$TranslatingClassLoader with classpath [(memory)] and parent being scala.reflect.internal.util.ScalaClassLoader$URLClassLoader@6c2fc81d of type class scala.reflect.internal.util.ScalaClassLoader$URLClassLoader with classpath [file:/usr/lib/jvm/java-7-openjdk/jre/lib/resources.jar,file:/usr/lib/jvm/java-7-openjdk/jre/lib/rt.jar,file:/usr/lib/jvm/java-7-openjdk/jre/lib/jsse.jar,file:/usr/lib/jvm/java-7-openjdk/jre/lib/jce.jar,file:/usr/lib/jvm/java-7-openjdk/jre/lib/charsets.jar,file:/usr/lib/jvm/java-7-openjdk/jre/lib/rhino.jar,file:/home/folone/workspace/scala/build/quick/classes/library/,file:/home/folone/workspace/scala/...\r\nscala> import scala.tools.reflect.ToolBox\r\nimport scala.tools.reflect.ToolBox\r\n\r\nscala> val tb = cm.mkToolBox()\r\ntb: scala.tools.reflect.ToolBox[reflect.runtime.universe.type] = scala.tools.reflect.ToolBoxFactory$ToolBoxImpl@e01afa1\r\n\r\nscala> tb.eval(q"$test")\r\nres1: Any = Test(test,1,List(2.0, 3.5))\r\n\r\nscala> .asInstanceOf[Test]\r\nres2: Test = Test(test,1,List(2.0, 3.5))\r\n```\r\n\r\nReview by @xeno-by, @densh, and @retronym please.'
3325,'','Fix SI-8102 (postfix abs for -0.0)\nSI-8102 points out that -0.0.abs returns -0.0 (in error). The same issue\r\nexists for -0.0f. This commit fixes the issue for both by delegating to\r\nmath.abs.'
3324,'retronym','remove symbol-based factories for MemberDef AST nodes\nAs recent discussion shows, methods like ValDef(sym) or DefDef(sym, rhs)\r\nare not just useless (i.e. not achieving the goal that users expect them\r\nto achieve), but they are also misleading (i.e. actively confusing users\r\nfrom utilizing the reflection API the right way):\r\nhttp://stackoverflow.com/questions/20908036/how-do-i-splice-symbols-of-various-types-in-a-quasiquote.\r\n\r\nTherefore this PR removes these factories from the public API in 2.11.0.\r\nEven though we don’t have a formal right to do that, as the factories\r\nweren’t deprecated before 2.10.1, I strongly propose to go for it, because:\r\n1) these APIs are actively harmful, 2) reflection is an experimental API,\r\nso we’re not bound as tightly as usual.'
3323,'Ichoran','Removes TODO comments that are no longer applicable\n- we do not want to use mutable updates because that would mean making vals\r\nvars, losing various guarantees for final fields of the java memory model\r\n\r\n- we do not want to add more subcasses of HashSet, because that would make\r\ncallsites megamorphic. If anything, we should try to reduce the number of\r\nsubclasses\r\n\r\n- checking for monomorphic call site is not worth it for a single virtual\r\nmethod call.\r\n\r\nReview by @Ichoran'
3322,'Ichoran','SI-6253 HashSet should implement union\nImplements of HashSet.union that reuses the two trees as much as\r\npossible when calculating the union of two sets. This leads to significant\r\nperformance improvements as well as to much better structural sharing.\r\n\r\nThere is a comprehensive correctness test for union since there was not a single test\r\nfor HashSet.union before. In addition, there are some tests of the desirable\r\nproperties of the new implementation (structural sharing and efficiency\r\nregarding calls of key.hashCode.\r\n\r\nThe other operations diff and intersect, which are conceptually very\r\nsimilar to union, are also implemented along with comprehensive test cases\r\nfor both correctness and structural sharing.\r\n\r\nNote that while it appears that there is some code duplication between the\r\nthree methods, they are sufficiently different that it is not possible\r\nto merge them into one without sacrificing performance.\r\n\r\nReview by @Ichoran, @axel22'
3321,'retronym','Add tree-based code generation\nNew printer (ParsedTreePrinter) is intended for unattributed trees and generates the code based on the passed AST.\r\nResult code can be later compiled by scalac retaining the same meaning.\r\nParsedTreePrinter is based on [Sprinter project](http://vladimirnik.github.io/sprinter/).'
3320,'gkossakowski','SI-8081 unzip/unzip3 return wrong static type when applied to Arrays\nAdded unzip and unzip3 methods to ArrayOps so that we get proper return\r\nvalues.  (No tests due to unfavorable effort/reward ratio for an ongoing\r\ntest of something so simple.)'
3319,'retronym','SI-4370 Range bug: Wrong result for Long.MinValue to Long.MaxValue by In...\n...t.MaxValue\r\n\r\nFixed by rewriting the entire logic for the count method.  This is necessary because the old code was making all kinds of assumptions about what numbers were, but the interface is completely generic.\r\n\r\nThose assumptions still made have been explicitly specified.  Note that you have to make some or you end up doing a binary search, which is not exactly fast.\r\n\r\nThe existing routine is 10-20% slower than the old (broken) one in the worst cases.  This seems close enough to me to not bother special-casing Long and BigInt, though I note that this could be done for improved performance.\r\n\r\nNote that ranges that end up in Int ranges defer to Range for count.\r\n\r\nA new JUnit test has been added to verify that the test works.  It secretly contains an alternate BigInt implementation, but that is a lot slower (>5x) than Long.'
3318,'Ichoran','SI-6196 - Set should implement filter\nImplements a version of filter and filterNot that reuses as much as\r\npossible from the existing tree instead of building an entirely new one\r\nlike the builder-based filter does. This results in significant performance\r\nimprovements on average.\r\n\r\nAdds a test of basic correctness of filter and filterNot as well as of the\r\ndesirable properties of the new filter implementation.\r\n\r\nThis is a collaboration between me and @Ichoran\r\n\r\nReview by @Ichoran, @soc'
3317,'Ichoran','SI-8107: Add Regex.quote\nhttps://issues.scala-lang.org/browse/SI-8107'
3316,'adriaanm',"Quasi-comprehensive BigDecimal soundness/correctness fix.\nThis fixes issues SI-6153, SI-6173, SI-6456, SI-6699, and SI-8116, along with a number of other similar possible issues.\r\n\r\nRelevant changes include\r\n  * Changes to avoid heap explosion when working with BigInt\r\n    - to isWhole\r\n    - to hashCode\r\n    - to equals\r\n    - to BigInt's equals\r\n  * Changes to enable equality matching hashCode\r\n    - Only for sufficiently small BigInt\r\n    - For identical values with different precision\r\n  * Changes to isValidDouble\r\n    - Takes precision into account now\r\n    - New methods added to test whether even if the Double is not represented exactly, it's a representation of a certain type\r\n    - New companion methods added to allow intended expansion of Double (binary/decimal difference)\r\n  * Changes to constructor\r\n    - Null arguments are not allowed (these can throw NPEs later at awkward/unexpected times)\r\n  * New JUnit test to test all these things\r\n  * Fixed existing tests to expect new behavior\r\n  * Modified scaladocs to explain the issues\r\n  * Deprecated problematic methods\r\n  * Made application of MathContext more consistent (it is where you expect it and not where you don't)\r\n\r\nThese changes are coordinated, for the most part, hence the monolithic commit."
3315,'Ichoran','Implements specialized subsetOf for HashSet\nFixes SI-7326. This also adds a basic test for subsetOf that was missing before.\r\n\r\nReview by @Ichoran, @soc\r\n\r\n@Ichoran: feel free to integrate the subsetOf test into your collection comparison test suite and remove the testCorrectness part of t7326.scala'
3314,'retronym','makes well-known packages and package classes consistent with each other\nAs discovered in https://groups.google.com/forum/#!topic/scala-user/RckXE90LoXo,\r\nRootClass.sourceModule and EmptyPackageClass.sourceModule used to incorrectly\r\nreturn NoSymbol instead of RootModule and EmptyPackage. This is now fixed.'
3313,'','Fix typos in documentation\n'
3312,'retronym','(2.10.x) codifies the state of the art wrt SI-8104\nAs it was discovered in SI-8104, whiteboxity doesn’t apply equally to\r\ntype parameters and type members of materialized type classes.\r\n\r\nDuring implicit search and subsequent type inference, whitebox type parameters\r\nare consistently erased to wildcards, whereas whitebox type members sometimes\r\nremain as is and get in the way of signature conformance checks.\r\n\r\nUnfortunately, 2.10.x can’t make use of type parameter whiteboxity, because\r\nit requires fundep materializers that were only merged into 2.11:\r\nhttps://github.com/scala/scala/pull/2499, and therefore Si-8104 seems to be\r\na hard blocker for 2.10.x at the moment. Stay tuned for updates.'
3311,'retronym','(master) codifies the state of the art wrt SI-8104\nAs it was discovered in SI-8104, whiteboxity doesn’t apply equally to\r\ntype parameters and type members of materialized type classes.\r\n\r\nDuring implicit search and subsequent type inference, whitebox type parameters\r\nare consistently erased to wildcards, whereas whitebox type members sometimes\r\nremain as is and get in the way of signature conformance checks.'
3310,'retronym','SI-6355 SI-7059 it is possible to overload applyDynamic\nAs our discussion at https://issues.scala-lang.org/browse/SI-6355 shows,\r\nit looks like it is possible to overload applyDynamic, even though a\r\nstraightforward way is closed. This commit codifies the pattern proposed\r\nby @paulp and makes sure that it doesn’t break in the future.'
3309,'retronym','SI-7777 SI-8006 assorted fixes for dynamics\n'
3308,'','Remove commented out code from HashSet and HashMap\nRemove an ancient, commented out microbenchmark from HashSet and HashMap.\r\nAlso, fix indentation for while loop in HashSet.foreach and remove some\r\nother commented out code that no longer serves any purpose.\r\n\r\nReview by @soc'
3307,'','Added .ant-targets-build.xml to .gitignore.\nSomething generates this repo-dirtying file during ant replacestarr.'
3306,'',"Improved testing framework for sets and maps.\nSwitched to JUnit testing framework for sets and maps.  They now test\r\nbroadly against each other for consistency.  Tests for mutable.AnyRefMap\r\nand mutable.LongMap are folded in here (originals removed).  There is still\r\nlots of redundancy with other tests that has not been removed.\r\n\r\nThis framework is also designed to enable more robust testing of changes to\r\nimplementations of sets and maps; although it's still quite possible to get\r\na broken implementation through, these tests should make it harder to get\r\nthe fundamentals wrong."
3305,'retronym','awakens default getter synthesis from the untyper nightmare\nOur happy little macro paradise is regularly invaded by resetAllAttrs,\r\nthe bane of all macros and typers. It’s so ruthless and devastating that\r\nwe’ve been long scheming to hack something really cool and to one day\r\ndefeat it.\r\n\r\nToday we make the first step towards the happy future. Today we overthrow\r\nthe UnTyper, resetAllAttrs’s elder brother that rules in the kingdoms of\r\nGetterLand and CaseClassia, and banish him from the land of getters.\r\nIn the name of what’s good and meta, let’s band together and completely\r\ndrive him away in a subsequent pull request! (upd. Done - see the second commit).'
3304,'retronym','SI-8100 - prevent possible SOE during Stream#flatten.\nThis commit changes stream flatten to avoid allocating a\r\nstack frame for every stream item. Previously, flattening\r\na stream whose elements are mostly empty would result in\r\na StackOverflowException.\r\n\r\nThis commit also adds a test demonstrating the problem.'
3303,'adriaanm','Fixes SI-6615, NPE on slice of PagedSeq.\nMade sure to addMore when roving forward on a slice into unpaged territory.'
3302,'adriaanm','Resolves SI-6364, O(n) performance of wrapped set contains.\nAdded overrides for contains and isEmpty to SetWrapper.  Note that sets are\r\ninvariant in Scala, while the Java signature is for any Object, so we trap\r\na ClassCastException if one occurs.  (Is this everything that could possibly\r\ngo wrong?  I think so, but am not as confident as I would like.)'
3301,'','Resolves SI-7837, failure in quickSort.\n== instead of equiv (from Ordering) was used by mistake.  No tests; this is unlikely to revert.  (The problem with using == when one means equiv is likely to arise in other contexts, however.)'
3300,'','Resolves SI-8081, conversion of Array to Seq on unzip.\nAdded unzip and unzip3 methods to ArrayOps so that we get proper return\r\nvalues.  (No tests due to unfavorable effort/reward ratio for an ongoing\r\ntest of something so simple.)'
3299,'','fix Stream#flatten example\n```\r\nWelcome to Scala version 2.10.3 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_45).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n\r\nscala> val sov: Stream[Vector[Int]] = Vector(0) #:: Vector(0, 0) #:: sov.zip(sov.tail).map { n => n._1 ++ n._2 }\r\nsov: Stream[Vector[Int]] = Stream(Vector(0), ?)\r\n\r\nscala> sov flatten take 10 mkString ", "\r\n<console>:1: error: \';\' expected but integer literal found.\r\n       sov flatten take 10 mkString ", "\r\n                        ^\r\n\r\nscala> sov.flatten take 10 mkString ", "\r\nres0: String = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\r\n```'
3298,'','<uptodate> Ant-ics\nReview by @adriaanm'
3297,'','SI-7406 crasher with specialized lazy val\nThis reverts a tiny bit of f7d5f45aa7 where the crasher was introduced. The\nenclosed test case compiles and runs under 2.9, but prints the wrong answer.\nIt crashes in 2.10 and until this patch. Now it compiles and prints the right\nanswer.'
3296,'','Fix typo concurrect -> concurrent\n'
3295,'gkossakowski','SI-1448 Deprecate conversion of numeric values types by casts\n**Attention**: This is an alternative PR to #3294. Do **NOT** merge both.\r\n\r\nCasts of AnyVals had inconsitent behavior depending on whether they were boxed:\r\n\r\n    1L.asInstanceOf[Int]        // -> 1\r\n    (1L: Any).asInstanceOf[Int] // -> ClassCastException\r\n\r\nThis PR fixes this by deprecating casts for conversion. I.e. in future scala versions, both calls will fail (although the first at compile time).\r\n\r\nPR #3294 contains some discussion why this version might be desirable above the other.\r\n\r\nAfter checkfile update to accomodate deprecation warnings, all partests succeed. However, run/t7868 does now emit a deprecation warning due to the code generated by the pattern matcher (no difference in matching behaviour is observed). If we proceed with this option, this warning will have to be fixed in the pattern matcher.\r\n\r\n**UPDATE** This does not deprecate casts from `null` to a value type.'
3294,'gkossakowski','SI-1448 Unify casting behavior for AnyVals\n**Attention**: This is an alternative PR to #3295. Do **NOT** merge both.\r\n\r\nCasts of AnyVals had inconsitent behavior depending on whether they were boxed:\r\n\r\n    1L.asInstanceOf[Int]        // -> 1\r\n    (1L: Any).asInstanceOf[Int] // -> ClassCastException\r\n\r\nThis PR fixes this by adapting the unboxing helpers in `BoxesRunTime`. A couple of caveats:\r\n\r\n- Unboxing requires an additional instanceof check. (Reason: Casting of Character, which is not subtype of Number).\r\n- A wrong ClassCastException is raised on a failed cast to a primitive numeric value. It says "cannot cast to Number" instead of Integer etc.\r\n\r\nWhere the latter issue can easily be fixed by adding another `instanceof` check, the former is inherent to the fact that `java.lang.Character` does not extend `java.lang.Number` but conversion must be performed. It can only be fixed by integrating (part) of this behaviour in the compiler.\r\n\r\nMaybe we should reconsider changing the behaviour the other way around. It is easy to emit a deprecation warning in 2.11 for casts that convert (implemented in PR #3295) and put the behaviour behind a flag in 2.12.\r\n\r\nAll partests ~~except for the instrumentation tests~~ succeed on this PR.'
3293,'xeno-by','SI-7469 Remove misc. @deprecated elements\n'
3292,'retronym','duplicates arguments to macro typer APIs\nThis commit continues the tendency set by the parent commit to duplicate\r\nas much as possible in order to avoid potential confusion that users\r\nmight run into when compiler internals start leaking.\r\n\r\nHere we plumb another way that by-reference sharing of trees might bite\r\nunsuspecting macro writers. Previously we have duplicated macro expansions,\r\nmacro arguments, c.macroApplication, and now it’s arguments to typeCheck\r\nand resetAttrs.\r\n\r\nThere is still an unlikely situation when someone gets to c.enclosingXXX\r\nand then starts typechecking around, but that’s left for future work,\r\nas it’s yet unclear what to do with c.enclosingXXX APIs.'
3291,'',"NullPointerExceptions in RedBlackTree\nI have got the following Actor code:\r\n\r\n~~~ scala\r\ncase class Document(file: Path, info: Map[String, Any])\r\n\r\nobject Matcher {\r\n  case class Match(doc: Document)\r\n  case class Matches(doc: Document, value: Boolean)\r\n}\r\n\r\ntrait Index extends Actor {\r\n  import Index._\r\n\r\n  def ordering: Ordering[Document]\r\n\r\n  def matcher: ActorRef\r\n\r\n  var receive: Receive = indexed(SortedSet.empty(ordering))\r\n\r\n  def indexed(index: SortedSet[Document]): Receive = {\r\n    case Add(doc) =>\r\n      // match the document with the matcher\r\n      matcher ! Matcher.Match(doc)\r\n    case Matcher.Matches(doc, true) =>\r\n      context become indexed(index + doc) // <-- will throw an exception\r\n    case Get =>\r\n      sender ! Result(index)\r\n    case GetSortedBy(ordering) =>\r\n      sender ! Result(SortedSet.empty(ordering) | index)\r\n  }\r\n}\r\n~~~\r\n\r\nThis actor is used to create an index of documents by using `context become indexed(index + doc)`. But instead of getting an updated `SortedSet`/`TreeSet`, `NullPointerException`s are thrown.\r\n\r\n~~~\r\n[ERROR] [12/19/2013 12:36:55.091] [morph-akka.actor.default-dispatcher-5] [akka://morph/user/morph/$a] null\r\njava.lang.NullPointerException\r\n\tat scala.collection.immutable.RedBlackTree$.upd(RedBlackTree.scala:129)\r\n\tat scala.collection.immutable.RedBlackTree$.update(RedBlackTree.scala:47)\r\n\tat scala.collection.immutable.TreeSet.$plus(TreeSet.scala:115)\r\n\tat scala.collection.immutable.TreeSet.$plus(TreeSet.scala:51)\r\n\tat morph.Index$$anonfun$indexed$1.applyOrElse(Index.scala:53)\r\n\tat akka.actor.ActorCell.receiveMessage(ActorCell.scala:498)\r\n\tat akka.actor.ActorCell.invoke(ActorCell.scala:456)\r\n\tat akka.dispatch.Mailbox.processMailbox(Mailbox.scala:237)\r\n\tat akka.dispatch.Mailbox.run(Mailbox.scala:219)\r\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:386)\r\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\r\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\r\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\r\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\r\n~~~\r\n\r\nI can't find an error in my code, so I think it might be in the implementation of `RedBlackTree`.\r\n\r\nI am using Scala 2.10.3."
3290,'adriaanm','SI-7680 Update the ScalaDoc entry page of the Scala library\n'
3289,'',"SI-7492 Make scala.runtime.MethodCache private[scala]\nThese are internal implementation details which shouldn't be exposed\r\nto users (and might go away when support for invokedynamic is added)."
3288,'retronym','makes boxity of fast track macros configurable\nPreviously, all built-in macros were assumed to be whitebox, but that’s\r\nactually not the case. Just quasiquote macros have to be whitebox, while\r\nthe rest can be blackbox.\r\n\r\nThis also fixes SI-8091, because blackbox macros are typechecked differently\r\nand therefore the necessary implicit conversion kicks in. If f”...” were\r\nto remain a whitebox macro, then due to the changes introduced in commit\r\nhttps://github.com/scala/scala/commit/a3b33419b02cafb7e2c6fed6dd96151859fc7d77\r\nwe would have to explicitly ascribe its expansion as String to achieve the same effect.'
3287,'xeno-by','Presentation compiler friendliness for macros\n   - Retain macro expansion in the tree in the presentation compiler\r\n     under a new setting -Ymacro-expand:discard.\r\n   - Deprecate -Ymacro-no-expand, in favour of -Ymacro-expand:none\r\n   - Prevent range position validation errors in macro expansions (even\r\n     though the preceding change means they no longer impact the IDE.)\r\n\r\nI trialled the "discard-the-macro-expansion" approach recently in\r\nscala-async (it can actually all be driven from a suitably ambitious\r\nmacro), and the results in the IDE were pleasing: hyperlinking works\r\nas expected.\r\n\r\nFuture work: Add `-Ymacro-expand:discard-whitebox-only` to avoid expanding\r\nblackbox macros altogether. This would be handy when troubleshooting\r\nperformance problems in the IDE.'
3286,'','Emit correctly typed literal when initializing lazy val bitmaps\n`Constants.tag` and `Constants.tpe` relies on the held `Any` to have the\r\ndesired type. Explicitly match on `bitmapKind` to emit correctly typed\r\n`Literal(Constant(...))`'
3285,'adriaanm','SI-8015 Count lines by EOLs\nSource lines were counted by "line break chars", including FF.\r\nClients of `pos.line` seem to all expect the ordinary line num,\r\nso that is what they get.\r\n\r\nUnicode processing now precedes line ending processing.\r\n\r\nReview by @adriaanm who is going to come across it anyway in the final hours of clean-up before cutting a milestone\r\n'
3284,'','SI-7880 Fix infinite loop in ResizableArray#ensureSize\nThis issue was triggered for values greater than Int.MaxValue/2, which\r\ncaused the computation of the new array size to overflow and become\r\nnegative, leading to an infinite loop.'
3283,'adriaanm',"Dotless type application for infix operators.\nWhen you have an aesthetic expresion like\r\n```\r\n  def f(xs: Iterator[Int]) = (\r\n    xs takeWhile (_ < 1000)\r\n             map (_ * -1)\r\n          filter (_ % 2 == 0)\r\n         flatMap (x => List(x, x))\r\n    reduceOption (_ + _)\r\n           maxBy (_.toString)\r\n  )\r\n```\r\nAnd then for whatever reason you have to perform explicit\r\ntype application in the midst of that expression, it's\r\naggravating in the extreme that it has (had) to be rewritten\r\nin its entirety to accommodate that change.\r\n\r\nSo now you can perform type application in the middle of it.\r\n\r\nFor reasons not entirely clear to me postfix operators are\r\nexcluded. The discussion as well as the approval for the infix\r\nvariation of it can be found at:\r\n  https://groups.google.com/forum/#!msg/scala-language/eJl1wnkEz9M/hR984-lqC5EJ"
3282,'','SI-8085 Fix BrowserTraverser for package objects\nReview by @dotta'
3281,'retronym','(2.10.4) backports https://github.com/scala/scala/pull/3236\nEven though whitebox macros are supposed to be used to produce expansions\r\nthat refine advertised return types of their macro definitions, sometimes\r\nthose more precise types aren’t picked up by the typechecker.\r\n\r\nIt all started with Travis generating structural types with macros\r\nand noticing that typer needs an extra nudge in order to make generated\r\nmembers accessible to the outside world. I didn’t understand the mechanism\r\nof the phenomenon back then, and after some time I just gave up.\r\n\r\nAfterwards, when this issue had been brought up again in a different\r\nStackOverflow question, we discussed it at reflection meeting, figured out\r\nthat typedBlock provides some special treatment to anonymous classes,\r\nand it became clear that the first macro typecheck (the one that types\r\nthe expansion against the return type of the corresponding macro def)\r\nis at fault here.\r\n\r\nThe thing is that if we have a block that stands for a desugard anonymous\r\nclass instantiation, and we typecheck it with expected type different from\r\nWildcardType, then typer isn’t going to include decls of the anonymous class\r\nin the resulting structural type: https://github.com/scala/scala/blob/master/src/compiler/scala/tools/nsc/typechecker/Typers.scala#L2350.\r\nI tried to figure it out at https://groups.google.com/forum/#!topic/scala-internals/eXQt-BPm4i8,\r\nbut couldn’t dispel the mystery, so again I just gave up.\r\n\r\nBut today I had a profound WAT experience that finally tipped the scales.\r\nIt turns out that if we typecheck an if, providing a suitable pt, then\r\nthe resulting type of an if is going to be that pt, even though the lub\r\nof the branch types might be more precise. I’m sure that reasons for this\r\nbehavior are also beyond my understanding, so I decided to sidestep this problem.\r\n\r\nupd. Here’s Jason’s clarification: Doing thing differently would require\r\nus to believe that "\'Tis better to have lubbed and lost than never to have\r\nlubbed at all." But the desire for efficiency trumps such sentimentality.\r\n\r\nNow expansions of whitebox macros are first typechecked against pt,\r\nthe expected type that comes from the enclosing context, before being\r\ntypechecked against expectedTpe, the expected type that comes from the return\r\ntype of the macro def. This means that now pt provides the correct\r\nexpected type for the initial, most important typecheck, which makes\r\ntypes more precise.'
3280,'retronym','[nomaster] backports https://github.com/scala/scala/pull/3236\nEven though whitebox macros are supposed to be used to produce expansions\r\nthat refine advertised return types of their macro definitions, sometimes\r\nthose more precise types aren’t picked up by the typechecker.\r\n\r\nIt all started with Travis generating structural types with macros\r\nand noticing that typer needs an extra nudge in order to make generated\r\nmembers accessible to the outside world. I didn’t understand the mechanism\r\nof the phenomenon back then, and after some time I just gave up.\r\n\r\nAfterwards, when this issue had been brought up again in a different\r\nStackOverflow question, we discussed it at reflection meeting, figured out\r\nthat typedBlock provides some special treatment to anonymous classes,\r\nand it became clear that the first macro typecheck (the one that types\r\nthe expansion against the return type of the corresponding macro def)\r\nis at fault here.\r\n\r\nThe thing is that if we have a block that stands for a desugard anonymous\r\nclass instantiation, and we typecheck it with expected type different from\r\nWildcardType, then typer isn’t going to include decls of the anonymous class\r\nin the resulting structural type: https://github.com/scala/scala/blob/master/src/compiler/scala/tools/nsc/typechecker/Typers.scala#L2350.\r\nI tried to figure it out at https://groups.google.com/forum/#!topic/scala-internals/eXQt-BPm4i8,\r\nbut couldn’t dispel the mystery, so again I just gave up.\r\n\r\nBut today I had a profound WAT experience that finally tipped the scales.\r\nIt turns out that if we typecheck an if, providing a suitable pt, then\r\nthe resulting type of an if is going to be that pt, even though the lub\r\nof the branch types might be more precise. I’m sure that reasons for this\r\nbehavior are also beyond my understanding, so I decided to sidestep this problem.\r\n\r\nupd. Here’s Jason’s clarification: Doing thing differently would require\r\nus to believe that "\'Tis better to have lubbed and lost than never to have\r\nlubbed at all." But the desire for efficiency trumps such sentimentality.\r\n\r\nNow expansions of whitebox macros are first typechecked against pt,\r\nthe expected type that comes from the enclosing context, before being\r\ntypechecked against expectedTpe, the expected type that comes from the return\r\ntype of the macro def. This means that now pt provides the correct\r\nexpected type for the initial, most important typecheck, which makes\r\ntypes more precise.'
3279,'','cosmetic changes to liftables\nNamely:\r\n1) Moved definitions of Liftable and Unliftable into a separate file.\r\n2) Inlined internal names that were only used in StandardLiftables.'
3278,'gkossakowski','improvements to GenBCode\n- catching up with GenASM\r\n- two fixes (overly restrictive asserts) \r\n- readability\r\n\r\nReview by @gkossakowski'
3277,'gkossakowski','Scala dist maven\nreview by @gkossakowski\r\n\r\nThe idea is that a Scala distribution is a simple repackaging of artifacts already available on maven.\r\n\r\nWe already publish the following to maven: typical jars for the artifacts (classes, sources, scaladoc).\r\nThis PR adds: the bin/, doc/, and man/ directories, packaged up in scala-dist.\r\n\r\nTo simplify this, move the contents that should end up in the distribution\r\nfrom docs/ to doc/, create the man/ directory with the manpages,\r\nand include the scripts in bin/.\r\n\r\nThese directories are packaged in the scala-dist jar and published to maven,\r\nwith a dependency on scala-library-all and scala-compiler,\r\nfor the jars that should end up in the distribution.\r\n\r\nThis way, a scala dist can be built by resolving scala-dist,\r\nand moving all the class-file jars of its depencies to lib/\r\n(use api/ for scaladoc jars, and src/ for the source jars).'
3276,'',"SI-6120 Suppress extra warnings\nSensibility checks in refchecks were shown to be redundant.\r\n\r\nThis commit includes a mild refactor to reduce tabbage, and\r\nuses a local var to flag that a warning has already been emitted.\r\n\r\nThe flag is used at line 1020 to 1040.\r\n\r\nIt would be better to have the checks return true if warned,\r\nto facilitate `nonSensically || unrelatedly`, etc. But that's a lot\r\nof elses.\r\n\r\nReview by? @retronym ?  I bet @paulp would rise from the grave for this one.\r\n"
3275,'adriaanm','Improves name-based patmat.\nSome internal documentation and logic separation, and fixing the\r\nspecific-to-name-based-patmat bugs I know about.\r\n\r\nOver to you, @adriaanm.'
3274,'gkossakowski','SI-8017 Value class awareness for -Ydelamdafy:method\nThe delambdafy creates a bridge method which requires adaptation\nof the result type to the generic `Object`, which is the erased\nreturn type of FunctionN.\n\nThis bridge building reused some code from erasure, now refactored\ninto TypeAdaptingTransformer.\n\nBut, it was running into problems with:\n\n    class C(a: Int) extends AnyVal\n    (x: Any) => new C(0)\n\nIt created (forgive the pseudo quasiquote syntax):\n\n    class anonfun$ extends Function1[Any, C] {\n       def apply#1(a: Object): Int = 0\n       <bridge> def apply#2(a: Object): Object = {\n         val result: Int = apply#1(a)\n         ${adapt(Ident("result"), ObjectType)}\n       }\n    }\n\nThis resulted in primitive boxing, rather than value class boxing.\n\nInstead, we need the call to the main apply method to be typed\nas `ErasedValueClass(C, Int)`, which `adapt` takes as a trigger\nto perform value class boxing.\n\nFinally, we have to run the post-erasure transformer over the adapted\ntree to eliminate remnants of `ErasedValueClass` from the types of\ntrees.\n\nReview by @gkossakowski / @adriaanm'
3273,'',"Improvements to partest-ack, plus partest-paths.\nI noticed partest-ack was not finding all matching tests, and fixed that. Also\ncleaned up the ack options so they're understood by the latest version of ack.\n\nAlong the way I broke the canonicalization functionality out into its own\nscript so it can easily be used from other places."
3272,'',"Fix osgi bundle name for continuations.\nUgh. Fast tracking because this isn't exercised by CI anyway."
3271,'',"Deprecate maven deploy\nSet the scene for `src/build/maven-deploy.xml` aka `dists/maven/latest/build.xml`'s timely demise.\r\n\r\nFor a while now, you can just call `ant publish` to publish a build (or `ant build-opt publish` for an optimized build).\r\n\r\nFrom now on, `ant nightly` also publishes, so that our jenkins set up is vastly simplified.\r\n\r\n/cc @cunei as dbuild relies on this\r\n/cc @huitseeker / @skyluc for the impact on uber-build\r\n\r\nas soon as these two dependencies are removed, the duplicated maven-deploy.xml will be removed.\r\n\r\nreview by @soc please (See, I promised test.continuations.suite would be gone soon :-))"
3270,'','Fixup for #3265\n'
3269,'retronym','Issue/si 4287\nThis is a rework of https://github.com/scala/scala/pull/3210\r\n\r\nreview by @retronym, @densh'
3268,'',"Report error on code size overflow, log method name.\nWe used to silently skip class files that would exceed the JVM's size limits.\r\nWhile rare, this should still be an error.\r\n\r\nWhile I was at it, also included the name of the offending method.\r\n\r\nThis exercise has me convinced we must create scala-asm, a nice Scala wrapper of asm.\r\nsemicolons, null pointer exceptions, no type inference to speak of -- I CANNOT LIVE LIKE THIS\r\n\r\nreview by @retronym"
3267,'','SI-8071 Allow unification for prefixes of form ThisType(refinement)\nIn the enclosed test, we ended up relating the following types:\r\n\r\n    tp1 = AnyRef{type Mem <: AnyRef{def x: Int}; type Memory#3 = this.Mem}" // #1\r\n    tp2 = AnyRef{type Mem <: AnyRef{def x: Int @ann}; type Memory#4 = this.Mem}" // #2\r\n\r\nThe first was the result of `Use.field`, in which the `asSeenFrom`\r\nhad stripped the annotation. (`AsSeenFromMap` extends\r\n`KeepOnlyTypeConstraints`).\r\n\r\nThe second type was the declared return type of the accessor method.\r\n\r\nUsually, `=:=` and `<:<` are annotation agnostic, and unless a plugin\r\nsays otherwise, just compare the underlying types.\r\n\r\nBut, when refinements are thrown into the mix, one has to wade\r\nthrough `specializesSym`.\r\n\r\nOn the way, we get to:\r\n\r\n\ttp1 = Use.<refinement#1>.type\r\n    tp2 = Use.<refinement#2>.type\r\n    sym1 = type Memory#3\r\n\tsym2 = type Memory#4\r\n    tp2.memberType(sym2).substThis(tp2.typeSymbol, tp1) =:= tp1.memberType(sym1)\r\n\r\nAnd finally down to business in `equalSymsAndPrefixes`.\r\n\r\nHere, we allow loose matching, based on symbol names, if the prefixes\r\nare =:= and represent a refined type (or a singleton type or type\r\nvariable over a refined type.) But none of these cases covered what\r\nwe encounter here: a this type over a refinement class.\r\n\r\nThis commit adds that case to `isEligibleForPrefixUnification`.\r\n\r\nReview by @adriaanm'
3266,'adriaanm','SI-7546 Use likely monotonic clock source for durations\nSystem.currentTimeMillis is affected by wall-clock time, which means\r\nthings can appear to jump back in time.\r\nUse System.nanoTime which is more likely¹ to be monotonic instead.\r\n\r\n¹ See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6458294\r\n  "nanoTime affected by system clock change on Linux (RH9) or in\r\n   general lacks monotonicity".'
3265,'adriaanm','Merge 2.10.x to master\nReview by @adriaanm \r\n\r\nThe conflict resolution in dist.doc is the main spot to check.\r\n\r\n```\r\nexport MB=`git merge-base origin/2.10.x origin/master`\r\nmerge/2.10.x-to-master ~/code/scala4 git --no-pager  log $MB...origin/2.10.x --oneline --graph\r\n* 9cdbe28 Fixup #3248 missed a spot in pack.xml\r\n*   4aaee3b Merge pull request #3249 from retronym/ticket/7912\r\n|\\\r\n| * 006e2f2  Be defensive calling `toString` in `MatchError#getMessage`\r\n* |   0b77398 Merge pull request #3251 from retronym/ticket/8060\r\n|\\ \\\r\n| * | bb427a3  Avoid infinite loop with higher kinded type alias\r\n| |/\r\n* |   f405417 Merge pull request #3248 from adriaanm/dist-cleanup-licenses\r\n|\\ \\\r\n| |/\r\n|/|\r\n| * 27a3860 Update README, include doc/licenses in distro\r\n| * 139ba9d Add attribution for Typesafe.\r\n| * e555106 Remove docs/examples; they reside at scala/scala-dist\r\n| * dc6dd58 Remove unused android test and corresponding license.\r\n| * f8d8f7d Do not distribute partest and its dependencies.\r\n* |   0c92704 Merge pull request #3222 from skyluc/issue/completion-import-vals-210-7995\r\n|\\ \\\r\n| * | 5ed834e  completion imported vars and vals\r\n* | |   a444ed7 Merge pull request #3244 from rtyley/si-8019-swing-publisher-check-pf-defined\r\n|\\ \\ \\\r\n| |_|/\r\n|/| |\r\n| * | c955cf4  Make Publisher check PartialFunction is defined for Event\r\n|/ /\r\n* |   db19ddf Merge pull request #3229 from retronym/ticket/8029\r\n|\\ \\\r\n| * | fdcc262  Avoid multi-run cyclic error with companions, package object\r\n| |/\r\n* |   4d439dd Merge pull request #3230 from retronym/backport/7439\r\n|\\ \\\r\n| * | 8d74fa0 [backport]  Avoid NPE in `isMonomorphicType` with stub symbols.\r\n* | |   a774157 Merge pull request #3223 from retronym/ticket/8010-2.10.x\r\n|\\ \\ \\\r\n| * | | 9036f77  Fix regression in erasure double definition checks\r\n| | |/\r\n| |/|\r\n* | |   f6c6846 Merge pull request #3232 from xeno-by/topic/macro-error-messages-210x\r\n|\\ \\ \\\r\n| |_|/\r\n|/| |\r\n| * | 3faa2ee [nomaster] better error messages for various macro definition errors\r\n|/ /\r\n* | 7e996c1 Merge pull request #3209 from dotta/-on-2.10.x\r\n* |   7d74884 Merge pull request #3181 from heathermiller/issue/6913\r\n|\\ \\\r\n| |/\r\n|/|\r\n| * 7063439  Fixing semantics of Future fallbackTo to be according to docs\r\n|/\r\n* 7c1d114 Merge pull request #3208 from dotta/si-7548-on-2.10\r\n* 02308c9  Pres. compiler must not observe trees in silent mode\r\n* 652b3b4  Test to demonstrate residual exploratory typing bug\r\n* b7509c9  askTypeAt returns the same type whether the source was fully or targeted type-checked\r\n```'
3264,'','SI-7995 completion imported vars and vals\nImported member vals and vars were always marked inaccessible, even\r\nif referencing them at the location of the completion is valid in code.\r\nThe accessible flag is now set accordingly to the accessibility of the getter.\r\n\r\nThis is the 2.11 version of #3222. The changes are the same, with the .check files in the new output format.'
3263,'adriaanm','SI-6780 Better handling of cycles in in-scope implicit search\nImplicit searches in the body of implicit members with inferred\ntypes were leading to cycles. Before we used to resolve that\nby saying there were no implicits in scope at all; now we just\nskip the current context and still include the enclosing implicits.\nCare is taken not to cache results under these circumstances.'
3262,'','SI-8030 force symbols on presentation compiler initialization\nThis pull request forces a number of built-in symbols in presentation compiler to prevent them from being entered during parsing.\r\n\r\nThe property “parsing doesn’t enter new symbols” is tested on a rich source file that contains significant number of variations of Scala syntax.\r\n\r\nreview @retronym'
3261,'','Revert "SI-6426, importable _."\nThis reverts commit d2316df920ffa4804fe51e8f8780240c46efa982.\r\n\r\nWe can\'t make `_` an illegal identifier -- it\'s legal in Java,\r\nso we must be able to name these Java underscores.\r\n\r\nreview by @retronym'
3260,'retronym','SI-8035 Deprecate automatic () insertion in argument lists\nThis promotes the () insertion warning from -Ywarn-adapted-args to a\r\ndeprecation warning. -Xfuture tunrs it into a compiler error.\r\n\r\nAuto tupling remains unchanged for now.\r\n\r\nThe tests have been fixed the following way:\r\n- Warnings caused by general sloppiness (Try(), Future(), ...) have been\r\n  fixed.\r\n- Warnings which raise interesting questions (x == (), ...) received an\r\n  updated checkfile for now.'
3259,'retronym','(2.10.4) duplicates macro arguments before expansion\nAs discussed with Jason, this is an important dimension of defenses that\r\nwe can build to ensure robustness of the macro engine.\r\n\r\nThis commit is important in the context of the upcoming patch to the\r\npresentation compiler that will throw away expansions and keep original\r\nmacro applications (only when run in presentation compiler mode) so that\r\nhyperlinking in macro arguments starts working in the IDE.\r\n\r\nDuplication of macro arguments will make sure that macro arguments, which\r\nare going to become exposed to the IDE, can’t become corrupted by possibly\r\nmisbehaving or misguided macros.'
3258,'','fix typo in error messages\n'
3257,'retronym','(2.11.0-M8) duplicates macro arguments before expansion\nAs discussed with Jason, this is an important dimension of defenses that\r\nwe can build to ensure robustness of the macro engine.\r\n\r\nThis commit is important in the context of the upcoming patch to the\r\npresentation compiler that will throw away expansions and keep original\r\nmacro applications (only when run in presentation compiler mode) so that\r\nhyperlinking in macro arguments starts working in the IDE.\r\n\r\nDuplication of macro arguments will make sure that macro arguments, which\r\nare going to become exposed to the IDE, can’t become corrupted by possibly\r\nmisbehaving or misguided macros.'
3256,'retronym','(2.10.4) whitebox macros are now first typechecked against outerPt\nEven though whitebox macros are supposed to be used to produce expansions\r\nthat refine advertised return types of their macro definitions, sometimes\r\nthose more precise types aren’t picked up by the typechecker.\r\n\r\nIt all started with Travis generating structural types with macros\r\nand noticing that typer needs an extra nudge in order to make generated\r\nmembers accessible to the outside world. I didn’t understand the mechanism\r\nof the phenomenon back then, and after some time I just gave up.\r\n\r\nAfterwards, when this issue had been brought up again in a different\r\nStackOverflow question, we discussed it at reflection meeting, figured out\r\nthat typedBlock provides some special treatment to anonymous classes,\r\nand it became clear that the first macro typecheck (the one that types\r\nthe expansion against the return type of the corresponding macro def)\r\nis at fault here.\r\n\r\nThe thing is that if we have a block that stands for a desugard anonymous\r\nclass instantiation, and we typecheck it with expected type different from\r\nWildcardType, then typer isn’t going to include decls of the anonymous class\r\nin the resulting structural type: https://github.com/scala/scala/blob/master/src/compiler/scala/tools/nsc/typechecker/Typers.scala#L2350.\r\nI tried to figure it out at https://groups.google.com/forum/#!topic/scala-internals/eXQt-BPm4i8,\r\nbut couldn’t dispel the mystery, so again I just gave up.\r\n\r\nBut today I had a profound WAT experience that finally tipped the scales.\r\nIt turns out that if we typecheck an if, providing a suitable pt, then\r\nthe resulting type of an if is going to be that pt, even though the lub\r\nof the branch types might be more precise. I’m sure that reasons for this\r\nbehavior are also beyond my understanding, so I decided to sidestep this problem.\r\n\r\nupd. Here’s Jason’s clarification: Doing thing differently would require\r\nus to believe that "\'Tis better to have lubbed and lost than never to have\r\nlubbed at all." But the desire for efficiency trumps such sentimentality.\r\n\r\nNow expansions of whitebox macros are first typechecked against pt,\r\nthe expected type that comes from the enclosing context, before being\r\ntypechecked against expectedTpe, the expected type that comes from the return\r\ntype of the macro def. This means that now pt provides the correct\r\nexpected type for the initial, most important typecheck, which makes\r\ntypes more precise.'
3255,'','Introduce Unliftable for Quasiquotes (take #3)\nRebase of #3211\r\n\r\nreview @retronym '
3254,'retronym','typeCheck => typecheck\nThis method has always been slightly bothering me, so I was really glad\r\nwhen Denys asked me to rename it. Let’s see how it pans out.'
3253,'',"SI-8062 Fix inliner cycle with recursion, separate compilation\nICodeReaders, which decompiles JVM bytecode to ICode, was not\nsetting the `recursive` attribute of `IMethod`. This meant that\nthe inliner got into a cycle, repeatedly inlining the recursive\ncall.\n\nThe method name `filter` was needed to trigger this as the inliner\nheuristically treats that as a more attractive inlining candidate,\nbased on `isMonadicMethod`.\n\nThis commit:\n\n  - refactors the checking / setting of `virtual`\n  - adds this to ICodeReaders\n  - tests the case involving `invokevirtual`\n\nI'm not sure how to setup a test that fails without the other changes\nto `ICodeReader` (for invokestatic and invokespecial)."
3252,'retronym',"SI-8061 Do not mutate List in Types.scala\n  In src/reflect/scala/reflect/internal/Types.scala, change the\r\n  findMember method's algorithm to use the public List API.\r\n  Prior to this change, the method built a list of matching members\r\n  by appending matching symbols and mutating the tail.\r\n  This change builds up the maching list by prepending instead,\r\n  and reverses the result at the end."
3251,'',"SI-8060 Avoid infinite loop with higher kinded type alias\nThe `dealiasLocals` map was assuming that:\n\n    tp.isAliasType implies (tp.dealias ne tp)\n\nThis isn't true if `!typeParamsMatchArgs`.\n\nThis commit avoids the infinite loop by checking whether or not\ndealiasing progresses."
3250,'','SI-8059 Override immutable.Queue#{+:,:+} for performance\nWithout those overrides, all elements are unnecessarily copied.'
3249,'','SI-7912 Be defensive calling `toString` in `MatchError#getMessage`\nOtherwise, objects with exception-throwing `toString` lead to a\r\ncascading error far removed from the originally failed match.'
3248,'','Clean up Scala distribution a bit.\nPrompted by https://issues.scala-lang.org/browse/SI-4248, \r\nwhich pointed out we should include doc/licenses in the binary dist,\r\nI finally decided to clean up the dist a bit -- even for 2.10.x.\r\n\r\nNo more:\r\n- partest in the binary dist\r\n- redundant examples in scala/scala -- they actually come from scala/scala-dist\r\n- references to windows 95 in our readme\r\n- unused android test\r\n\r\nAlso added the Typesafe attribution that was agreed on earlier.\r\n\r\nReview by @retronym, /cc @heathermiller, @gkossakowski, @jsuereth'
3247,'adriaanm','SI-8058 Better support for enum trees\nReplace the approach of “detect some magic combination of flags to\r\ntrigger some action” by introducing an enum flag which makes the\r\nsemantics and the intentions of the code using it more explicit.\r\n\r\nThis basically involves wiring up the existing ACC_ENUM bit to a new\r\nmodifier flag and making sure it is set correctly when encountering\r\nenums.\r\n\r\nThe existing enum tests files/pos/t5165 and files/pos/t2764 keep\r\nworking, showing that this hasn\'t introduced any obvious regressions.\r\n\r\nTests for the changes in Namer which prevent scalac from messing with\r\nenum trees can\'t be added yet, because one currently can\'t define an\r\nenum in Scala without the help of the macro paradise.\r\nThe intention is to add the @enum macro as a full test suite as soon\r\nas one can depend on macro annotations.\r\n\r\nOne might wonder why we don\'t check for\r\n    clazz.superClass == JavaEnumClass (where clazz is the owning class)\r\nin isEnumConstant.\r\n\r\nThe reason is that this causes illegal cyclic reference error.\r\n\r\nExplanation by Eugene why this happens:\r\n\r\n(23:17:52) xeno_by: so here\'s what happens as far as I can understand at 11pm :)\r\n(23:18:09) xeno_by: scalac tries to complete the signature of the newly expanded class\r\n(23:18:11) xeno_by: to do that\r\n(23:18:40) xeno_by: to do that it needs three things\r\n(23:18:51) xeno_by: because the signature of a class is ClassInfoType which consists of three things\r\n(23:19:05) xeno_by: parents\r\n(23:19:08) xeno_by: decls\r\n(23:19:09) xeno_by: and symbol\r\n(23:19:20) xeno_by: symbol is easy - it\'s already there\r\n(23:19:30) xeno_by: parents are also easy\r\n(23:19:39) xeno_by: you just typecheck the things that come after "extends"\r\n(23:19:42) xeno_by: but decls are tricky\r\n(23:19:51) xeno_by: scalac goes through all the members of the class\r\n(23:20:03) xeno_by: and doesn\'t typecheck them... no, it doesn\'t\r\n(23:20:07) xeno_by: it just enters them\r\n(23:20:32) xeno_by: i.e. creates symbols for them and assigns lazy completers to those symbols so that if someone wants to know their signatures, they will go through the completers\r\n(23:20:34) xeno_by: and then\r\n(23:20:38) xeno_by: wait\r\n(23:20:40) xeno_by: there\'s one but\r\n(23:20:42) xeno_by: BUT\r\n(23:20:47) xeno_by: while we enter those symbols\r\n(23:20:53) xeno_by: our ClassInfoType is not ready yet\r\n(23:21:09) xeno_by: the class we\'re completing is still considered to be in the middle of being completing\r\n(23:21:12) xeno_by: so\r\n(23:21:24) xeno_by: when inside enterSym you try to ask that class for its super class\r\n(23:21:35) xeno_by: what happens is that check asks the class for its type signature\r\n(23:21:45) xeno_by: the ClassInfoType that consists of parents and decls\r\n(23:21:54) xeno_by: even though the parents are already calculated\r\n(23:22:01) xeno_by: the ClassInfoType as a whole is not\r\n(23:22:16) xeno_by: so scalac says that you\'re trying to complete something that\'s currently being completed\r\n(23:22:20) xeno_by: cyclic reference error\r\n(23:22:59) xeno_by: "cyclic" in English looks an awful lot like "суслик" in Russian (which means "gopher")'
3246,'retronym','streamlines refchecking undesired symbol properties\nUnifies `checkDeprecated`, `checkMigration` and `checkCompileTimeOnly`\r\ninto a single centralized point of reference that is now consistently\r\ncalled from `checkTypeRef`, `transformIdent` and `transformSelect`.'
3245,'retronym','SI-8047 change fresh name encoding in quasiquotes to avoid symbol owner corruption\nPreviously a following encoding was used to represent fresh names that should be created at runtime of the quasiquote:\r\n\r\n```\r\nbuild.withFreshTermName(prefix1) { name$1 =>\r\n  ...\r\n    build.withFreshTermName(prefixN) { name$N =>\r\n      tree\r\n    }\r\n  ...\r\n}\r\n```\r\n\r\nIt turned out that this encoding causes symbol corruption when tree defines symbols of its own. After being spliced into anonymous functions, the owner chain of those symbols will become corrupted.\r\n\r\nNow a simpler and probably better performing alternative is used instead:\r\n\r\n```\r\n{\r\n  val name$1 = build.freshTermName(prefix1)\r\n  ...\r\n  val name$N = build.freshTermName(prefixN)\r\n  tree\r\n}\r\n```\r\n\r\nHere owner stays the same and doesn’t need any adjustment.'
3244,'','SI-8019 Make Publisher check PartialFunction is defined for Event\n_re-submission of https://github.com/scala/scala/pull/3205 rebased against the 2.10.x branch - @adriaanm points out that post 2.10.x, swing has moved to https://github.com/scala/scala-swing_\r\n\r\nReactions are PartialFunctions, so if events come through indiscriminately that the listener is not defined for, errors occur. Eg:\r\n\r\n```\r\nException in thread "AWT-EventQueue-0" scala.MatchError: FocusGained(scala.swing wrapper scala.swing.TextField\r\n```\r\n\r\nA Coursera thread with people affected by this issue: https://class.coursera.org/reactive-001/forum/thread?thread_id=1315\r\n\r\n_I\'ve signed the Scala CLA._'
3243,'','SI 8019 swing publisher check pf defined (wrongly created against master)\nSee https://github.com/scala/scala/pull/3244'
3242,'adriaanm','SI-8046 BaseTypeSeq fixes with aliases\nPreview/Feedback by @adriaanm and build kitteh'
3241,'',"SI-8054 Fix regression in TypeRef rebind with val overriding object\nRegressed in 80767383fd / SI-7928\n\nThe condition added in that commit are necessary after refchecks but\npoisonous before.\n\nThis still seems rather fragile: I wonder if `eliminateModuleDefs`\nin `RefChecks` ought to flag the module symbol as `ARTIFACT` after\ncreating the accessor, so as to signal that it shouldn't be bound\nanymore?"
3240,'adriaanm','SI-7618 Remove octal number literals\nThis also fixes a spurious detection of octal literals in floating\r\npoint literals: Literals like 01.23 are neither deprecated nor planned\r\nfor removal.'
3239,'xeno-by',"SI-8052 Disallow `macro` as an identifier\nNote that the change could look a lot cleaner, at the cost of returning\r\nmore generic error messages. I decided that at least for 2.11 I'll keep\r\nscalac remembering that macro was a standard identifier name once, so\r\nthat we can point out more precisely what's wrong with users' code."
3238,'',"SI-8050 [Avian] Skip instrumented tests\nInstrumentation is (currently) not supported on Avian.\r\nThis causes\r\n- tests instrumented/InstrumentationTest.scala and\r\n- instrumented/inline-in-constructors\r\nto fail.\r\n\r\nLet's skip these tests on Avian."
3237,'retronym','deprecates macro def return type inference\nWith the new focus on quasiquotes in macro implementations, we now have\r\nto change the way how inference of macro def return types works.\r\n\r\nPreviously, if the return type of a macro def wasn’t specified, we looked into\r\nthe signature of its macro impl, took its return type (which could only\r\nbe c.Expr[T]) and then assigned T to be the return type of the macro def.\r\n\r\nWe also had a convenient special case which inferred Any in case when\r\nthe body of the macro impl wasn’t an expr. That avoided reporting spurious\r\nerrors if the macro impl had its body typed incorrectly (because in that\r\ncase we would report a def/impl signature mismatch anyway) and also provided\r\na convenience by letting macro impls end with `???`.\r\n\r\nHowever now we also allow macro impls to return c.Tree, which means that\r\nwe are no longer able to do any meaningful type inference, because c.Tree\r\ncould correspond to tree of any type.\r\n\r\nUnfortunately, when coupled with the type inference special case described\r\nabove, this means that the users who migrate from exprs to quasiquotes\r\nare going to face an unpleasant surprise. If they haven’t provided\r\nexplicit return types for their macro defs, those types are going to be\r\nsilently inferred as `Any`!\r\n\r\nThis commit plugs this loophole by prohibiting type inference from\r\nnon-expr return types of macro impls (not counting Nothing). Moreover,\r\nit also deprecates c.Expr[T] => T inference in order to avoid confusion\r\nwhen switching between exprs and quasiquotes.'
3236,'retronym','(2.11.0-M8) whitebox macros are now first typechecked against outerPt \nEven though whitebox macros are supposed to be used to produce expansions\r\nthat refine advertised return types of their macro definitions, sometimes\r\nthose more precise types aren’t picked up by the typechecker.\r\n\r\nIt all started with Travis generating structural types with macros\r\nand noticing that typer needs an extra nudge in order to make generated\r\nmembers accessible to the outside world. I didn’t understand the mechanism\r\nof the phenomenon back then, and after some time I just gave up.\r\n\r\nAfterwards, when this issue had been brought up again in a different\r\nStackOverflow question, we discussed it at reflection meeting, figured out\r\nthat typedBlock provides some special treatment to anonymous classes,\r\nand it became clear that the first macro typecheck (the one that types\r\nthe expansion against the return type of the corresponding macro def)\r\nis at fault here.\r\n\r\nThe thing is that if we have a block that stands for a desugard anonymous\r\nclass instantiation, and we typecheck it with expected type different from\r\nWildcardType, then typer isn’t going to include decls of the anonymous class\r\nin the resulting structural type: https://github.com/scala/scala/blob/master/src/compiler/scala/tools/nsc/typechecker/Typers.scala#L2350.\r\nI tried to figure it out at https://groups.google.com/forum/#!topic/scala-internals/eXQt-BPm4i8,\r\nbut couldn’t dispel the mystery, so again I just gave up.\r\n\r\nBut today I had a profound WAT experience that finally tipped the scales.\r\nIt turns out that if we typecheck an if, providing a suitable pt, then\r\nthe resulting type of an if is going to be that pt, even though the lub\r\nof the branch types might be more precise. I’m sure that reasons for this\r\nbehavior are also beyond my understanding, so I decided to sidestep this problem.\r\n\r\nupd. Here’s Jason’s clarification: Doing thing differently would require\r\nus to believe that "\'Tis better to have lubbed and lost than never to have\r\nlubbed at all." But the desire for efficiency trumps such sentimentality.\r\n\r\nNow expansions of whitebox macros are first typechecked against outerPt,\r\nthe expected type that comes from the enclosing context, before being\r\ntypechecked against innerPt, the expected type that comes from the return\r\ntype of the macro def. This means that now outerPt provides the correct\r\nexpected type for the initial, most important typecheck, which makes\r\ntypes more precise.'
3235,'retronym','new hooks in AnalyzerPlugins to enable macro experimentation\nThis pull requests introduces several new hooks in AnalyzerPlugins that would greatly assist me in experimenting with macros without hijacking namers and typers:\r\n1) `pluginsEnterSym`, `pluginsEnsureCompanionObject` and `pluginsEnterStats` are all that it takes to support macro annotations.\r\n2) `pluginsTypedMacroBody` and `pluginsMacroExpand` should be enough to play with Palladium without touching trunk.\r\n\r\nI already have [a macro paradise branch](https://github.com/scalamacros/paradise/commit/4bb01031bb3c2d17d689d0ddf0a9c7ac71d87e2b#diff-0) that is based on this pull request, and one can observe that it brings significant code shrinkage as well as reduces the amount of hackery down to zero, ensuring full compatibility with 2.11 and lack of unexpected side-effects in projects that use paradise.\r\n\r\nreview @retronym'
3234,'gkossakowski',"SI-5508 Fix crasher with private[this] in nested traits\nCurrently, this is done late in the game as the Mixin tree transformer\r\ntreats the trait.\r\n\r\n    // Mixin#addLateInterfaceMembers\r\n    val getter = member.getter(clazz)\r\n    if (getter == NoSymbol) addMember(clazz, newGetter(member))\r\n\r\n`addMember` mutates the type of the interface to add the getter.\r\n\r\nHowever, if an inner class or anonymous function of the trait\r\nhas been flattened to a spot where it precedes the trait in the\r\nenclosing packages info, this code hasn't had a chance to run,\r\nand the lookup of the getter crashes as mixins postTransform\r\nruns over a selection of the not-yet-materialized getter.\r\n\r\n    // Mixin#postTransform\r\n\tcase Select(qual, name) if sym.owner.isImplClass && !isStaticOnly(sym) =>\r\n\t  val iface  = toInterface(sym.owner.tpe).typeSymbol\r\n\t  val ifaceGetter = sym getter iface\r\n\r\nThis commit ensures that Flatten lifts inner classes to\r\na position *after* the enclosing class in the stats of the\r\nenclosing package.\r\n\r\nBonus fix: SI-7012 (the followup ticket to SI-6231 / SI-2897)"
3233,'','SI-8042 Use Serialization Proxy Pattern in List\nIn order for List to be truly Immutable, it must not mutate member\r\nvariables for deserialization.  The Serialization Proxy Pattern\r\nallows a proxy object to manage the serialization such that the\r\noriginal object can remain immutable.\r\n\r\nThis change modifies List to use a serialization proxy instead of\r\ndirectly mutating its own state, which one of its to member\r\nvalues to change from var to val immediately.  The other member,\r\ntl, is mutated by ListBuffer and in the reflection code and can\r\nnot yet become a val.'
3232,'retronym','[nomaster] better error messages for various macro definition errors\nbackport of 1d3ec4e708154ec05554f540d7d68ed55dc12426'
3231,'retronym','undeprecates c.parse\nWe never thought that c.parse is going to be completely subsumed by\r\nquasiquotes, but hoped that the use cases that are going to be lost\r\naren’t going to be noticed by anyone.\r\n\r\nUnfortunately, this isn’t the case, so I’m undeprecating c.parse until\r\nwe get a better story for those for whom quasiquotes are not enough.'
3230,'','[backport] SI-7439 Avoid NPE in `isMonomorphicType` with stub symbols.\n`originalInfo` can return null for stub symbols; deal with that\r\nas we used to before a regression in 016bc3db.\r\n\r\nAfter this change, we can once again delete A_1.class and still compile\r\ncode instantiating B_1. (A_1 is only referred to in a method signature\r\nof B_1 which is not called from our code.)\r\n\r\n\tscala> new B_1\r\n\twarning: Class A_1 not found - continuing with a stub.\r\n\tres0: B_1 = B_1@5284b8f9\r\n\r\nIn practice, this situation arises when someone uses a third\r\nparty class that was compiled against other libraries not avaialable\r\non the current compilation classpath.\r\n\r\n(cherry picked from commit a95432168204964e4f6c4571e781559c1640f2d8)'
3229,'adriaanm',"SI-8029 Avoid multi-run cyclic error with companions, package object\nThe bug report suggests this problem only became visible in the\nIDE *after* 2.10.3, but I tested an IDE with exactly 2.10.3 and\nsaw the same problem.\n\nIn fact, my test case fails as far back as 2.10.0. I suspect the\nproblem showed up after 816cecf9a9, which checks that pairs of\ncompanion symbols are codefined eagerly in Namers.\n\nThis commit modifies the check of `rawInfo ne NoType`\nin `isCoDefinedWith` to avoid triggering adaptation of types from\nthe previous run. I'm not sure of the precise intent of that check.\nI looked at c9861cd198 (genesis of isCoDefinedWith). Before that we\nget back to 3761cb4b3a1 (the dawn of Subversion.)\n\nReview by @adriaanm"
3228,'','Merge #3209 and 2.10.x to master\nReview by @dotta\n\nThis is a superset of #3227'
3227,'',"Merge 2.10.x to master\nSteps:\n\n\t% export MB=`git merge-base origin/2.10.x master`\n\t% git log --graph --oneline $MB...origin/2.10.x\n\t*   7d74884 Merge pull request #3181 from heathermiller/issue/6913\n\t|\\\n\t| * 7063439 SI-6913 Fixing semantics of Future fallbackTo to be according to docs\n\t|/\n\t*   7c1d114 Merge pull request #3208 from dotta/si-7548-on-2.10\n\t|\\\n\t| * 02308c9 SI-7458 Pres. compiler must not observe trees in silent mode\n\t| * 652b3b4 SI-7548 Test to demonstrate residual exploratory typing bug\n\t| * b7509c9 SI-7548 askTypeAt returns the same type whether the source was fully or targeted type-checked\n\t|/\n\t*   da73950 Merge pull request #3180 from xeno-by/topic/toolbox-rangepos\n\t|\\\n\t| * 0c963c9 [nomaster] teaches toolbox about -Yrangepos\n\t* 5d9be8f Merge pull request #3196 from retronym/topic/3190-fixup\n\n\t% git merge -s ours da73950\n\tMerge made by the 'ours' strategy.\n\n\t% git log --grep SI-7458 --oneline\n\n\t% git merge 7c1d114\n\tCONFLICT (modify/delete): src/compiler/scala/tools/nsc/interactive/Global.scala deleted in HEAD and modified in 7c1d114. Version 7c1d114 of src/compiler/scala/tools/nsc/interactive/Global.scala left in tree.\n\twarning: inexact rename detection was skipped due to too many files.\n\twarning: you may want to set your merge.renamelimit variable to at least 1503 and retry the command.\n\tAutomatic merge failed; fix conflicts and then commit the result.\n\n\t% git add .\n\n\t% git commit\n\t[merge-2.10.x-to-master 2c4ed0b] Merge commit '7c1d114' into merge-2.10.x-to-master\n\n\t% git merge 7d74884\n\n\tAuto-merging test/files/jvm/scala-concurrent-tck.scala\n\tCONFLICT (content): Merge conflict in test/files/jvm/scala-concurrent-tck.scala\n\tAuto-merging test/files/jvm/future-spec/PromiseTests.scala\n\tAuto-merging src/library/scala/concurrent/Future.scala\n\twarning: inexact rename detection was skipped due to too many files.\n\twarning: you may want to set your merge.renamelimit variable to at least 1503 and retry the command.\n\tAutomatic merge failed; fix conflicts and then commit the result.\n\n\t% git commit"
3226,'',"add method dequeueOption to immutable.Queue\nThis allows immutable.Queue to be used conveniently in functional code.\r\nMethod is in the spirit of `headOption` on seqs or `get` on maps. Also\r\nadds a unit test for immutable.Queue.\r\n\r\n\r\n-------------------\r\n\r\nSomehow I messed the old pull-request (I'm new to this, so sorry). I decided that it would be easiest to open a new one.\r\n\r\nNote that I changed the implementation of `dequeueOption` to use `dequeue`. It is a bit more overhead, but I thought this overhead is dwarfed by the object creations that will happen anyway. So I decided for less code duplication."
3225,'','SI-8013 Nowarn on macro str interpolation\nWhen warning about stray "foo $bar" under `-Xlint`,\r\nwhich may be missing an interpolator id, suppress\r\nthe warning if we\'re in the middle of a macro\r\nexpansion, since we have no useful heuristic to\r\napply to the expanded tree.\r\n\r\nThe test for whether the string is part of an\r\nexpanded tree is to check all open macros for\r\nan expanded tree that contains the literal tree\r\nunder scrutiny. (This is deemed more paranoid\r\nthan looking for a macro application that is an\r\nenclosing position.)\r\n\r\nReview by @retronym\r\n'
3224,'adriaanm','SI-7971 Handle static field initializers correctly\nBefore this fix, static fields where erroneuosly treated like instance\r\nfields and the initialization was moved into the constructor.\r\n\r\nWith this fix, the static initializer statements go into the static\r\ninitializer of the class (called “<STATIC> def init” in Scala,\r\n<clinit> in Java). The statements are added to an existing\r\nstatic initializer method or, if no such method exists, a new static\r\ninitializer method is created and added to the class.'
3223,'xeno-by','SI-8010 Fix regression in erasure double definition checks\nCalls to `Symbol#info` during scope iteration considered harmful.\r\n\r\nLooks like calling `info` during this Scope iteration is triggering\r\nthe ExplicitOuter info transformer, which "makes all super accessors\r\nand modules in traits non-private, mangling their names.". This name\r\nchange necessitates a rehashing of the owning scope, which I suspect\r\nis enough to corrupt the ScopeEntry-s being traversed in\r\n`checkNoDeclaredDoubleDefs`.\r\n\r\nThe upshot was that we encountered the same symbol twice, which was\r\nreported as being a double-definition.\r\n\r\nThis problem only showed up after 086702d8a74, which did nothing\r\nworse then change the order in which `{e, e1}.sym.info` were\r\nforced.\r\n\r\nI inspected SymbolPairs/OverridingPairs which *appear* to be immune\r\nas they only test flags during scope iteration; infos are not used\r\nuntil later, at which point we\'re iterating a temporary scope that\r\nisn\'t part of the type of the owner of the symbols.\r\n\r\nReview by @xeno-by\r\n'
3222,'JamesIry',"SI-7995 completion imported vars and vals\nImported member vals and vars were always marked inaccessible, even\r\nif referencing them at the location of the completion is valid in code.\r\nThe accessible flag is now set accordingly to the accessibility of the getter.\r\n\r\nI am working on an equivalent PR for 2.11. The changes are fairly different, as the code has been modularized, and the format of the oracle is different. I'll submit it after this PR is merged."
3221,'adriaanm',"Final library modularization for 2.11\nThe continuations plugin and library moved to https://github.com/scala/scala-continuations.\r\nThe Scala Swing library moved to https://github.com/scala/scala-swing.\r\n\r\nThey will still ship with 2.11 (albeit unsupported), but may disappear in 2.12.\r\n\r\nTODO: add deprecation to CPS plugin over at https://github.com/scala/scala-continuations.\r\n\r\nreview by @gkossakowski\r\n\r\nNOTE: I've moved the java7 patches over to scala/scala-swing as well, which means we're one step closer to building master on java 6 and 7 without modification. I noticed I missed a couple of changes to partest javaagent in the java7 branch. It would be good to port those over, and to see if we can get rid of the java7 branch all together in scala/scala."
3220,'JamesIry','Handle static fields correctly in Constructors\n'
3219,'',"Better support for enum trees\nReplace the approach of “detect some magic combination of flags to\r\ntrigger some action” by introducing an enum flag which makes the\r\nsemantics and the intentions of the code using it more explicit.\r\n\r\nThis basically involves wiring up the existing ACC_ENUM bit to a new\r\nmodifier flag and making sure it is set correctly when encountering\r\nenums.\r\n\r\nThe existing enum tests files/pos/t5165 and files/pos/t2764 keep\r\nworking, showing that this hasn't introduced any obvious regressions.\r\n\r\nTests for the changes in Namer which prevent scalac from messing with\r\nenum trees can't be added yet, because one currently can't define an\r\nenum in Scala without the help of the macro paradise.\r\nThe intention is to add the @enum macro as a full test suite as soon\r\nas one can depend on macro annotations."
3218,'','SI-8027 REPL double tab regression\nWhere did double tab go?  "The shadow knows."\r\n\r\nThe regression was introduced by the last flurry\r\nbefore we were left to wallow in whatever white\r\nspace remained.\r\n\r\nSome xs put other xs under erasure.\r\n\r\nIt\'s clear that somebody\'s daughter wandered into\r\nthe room and asked for a story, because, shockingly,\r\nthe case arrows don\'t line up.\r\n\r\nWe need a plug-in for Jenkins, or I guess Travis, to\r\nfail the build if arrows and equals don\'t align,\r\nbecause it clearly indicates a lapse of some kind.\r\n\r\nReview by @retronym who is the soul of discretion\r\nand who uses the REPL?'
3217,'adriaanm','SI-7788 Predef.conforms can circumvent implicit shadowing\n... together with small improvements to shadowing detection\nin implicit typechecking.\n\nReview by @adriaanm'
3216,'retronym','better error messages for various macro definition errors\n'
3215,'','SI-7373 Make the constructor of Vector non-public\nThe danger of:\r\n\r\n    new Vector(1, 2, 3).toString\r\n    java.lang.NullPointerException\r\n\r\nand the "should have been private all along" argument\r\ncall for a break in the source compatibility policy here.'
3214,'adriaanm','SI-8024 Fix inaccurate message on overloaded ambiguous ident\nMore details in the commit messages.\n\nReview by @adriaanm'
3213,'','Fixes SI-8014, regression in Vector ++ TraversableOnce.\nNow uses the cached copy instead of the exhausted iterator.  Adds a JUnit test for ++.'
3212,'','SI-8023 Fix symbol-completion-order bug of type var patterns\nRemoving the `isComplete` check altogether leads to cycles in,\r\nfor instance, F-bound type parameters:\r\n\r\n    trait LSO[+A, +Repr <: LSO[A, Repr]] // error: illegal cyclic reference involving type Repr\r\n\r\nBut, I believe that we can (and must) eagerly initialize the type\r\nparameter symbols if we are typechecking a pattern.\r\n\r\nWhile this appeared to regress in 2.11.x, but the problem was in fact\r\ndormant and was merely uncovered in the fix for , 3df1d77fc.'
3211,'','Introduce Unliftable for Quasiquotes\nResubmission of https://github.com/scala/scala/pull/3118 with additional bugfixes for SI-8008,  SI-8016, SI-8009, SI-6842, SI-7979, SI-7980, SI-7996, SI-7789 and SI-7154. Best viewed per-commit. \r\n\r\nreview by @retronym @xeno-by'
3210,'',"SI-4287 Corrected range positions for constructor's default arguments\n* First commit demonstrates the problem.\r\n* Second commit fixes it.\r\n\r\nreview by @retronym\r\n\r\nI would like this to be backported to 2.10.x. However, because this patch cannot be cleanly applied to 2.10.x, it would be convenient if we could first merge it in master, and then I'll take care of the backport."
3209,'retronym',"SI-7982 make askLoadedType unload arguments out of the PC by default,\nRe-opened https://github.com/scala/scala/pull/3158 to target 2.10.x\r\n\r\nreview by @adriaanm\r\n\r\nAs point out by @huitseeker in https://github.com/scala/scala/pull/3158#issuecomment-28900230, scala-refactoring failure is expected until https://github.com/scala-ide/scala-refactoring/pull/37 is merged. I'm not sure what's the best course of action here, but merging this PR will require some coordination with @misto, because the scala-refactoring PR should be merged at the same time.\r\n"
3208,'',"SI-7548 askTypeAt returns the same type for full/ targeted typecheck (2.10.x)\nRe-opened https://github.com/scala/scala/pull/3177 to target 2.10.x\r\n\r\nreview by @retronym\r\n\r\n~~P.S. This commit https://github.com/dotta/scala/commit/652b3b4b9dcbf990e7ace409e050cc4ba4e83b16 will fail the build because the commit is intended to show the issue. I expect this won't be a problem for merging the PR.~~ not true, see comment https://github.com/scala/scala/pull/3208#issuecomment-29605967"
3207,'','SI-8022 Backwards compatibility for Regex#unapplySeq\nThe change in ce1bbfe / SI-6406 introduced overloades of\n`unapplySeq` with wider static and dynmaic result types\nthan the now-deprecated alternative that accepted `Any`.\n\nThis is subtly source incompatible and the change was noticed\nin Specs2.\n\nThis commit uses `List` as the static and runtime type for\nthe new overloads.\n\nFor consistency, the same is done for the new method added\nin SI-7737 / 93e9623.\n\nReview by @som-snytt'
3206,'adriaanm','SI-7281 Add @scala.runtime.ValueType to value type classes\nInstead of preserving AnyVal as a superclass, which seems to be out of\r\nreach for the time being, add a marker annotation which gives runtimes\r\nan cheap and easy way to check whether a certain class is a value type\r\nwithout depending on a language-specific library.'
3205,'','SI-8019 Make Publisher check \'Reaction\' partial-function is defined for an Event\nReactions are PartialFunctions, so if events come through indiscriminately that the listener is not defined for, errors occur. Eg:\r\n\r\n```\r\nException in thread "AWT-EventQueue-0" scala.MatchError: FocusGained(scala.swing wrapper scala.swing.TextField\r\n```\r\n\r\nA Coursera thread with people affected by this issue: https://class.coursera.org/reactive-001/forum/thread?thread_id=1315\r\n\r\n_I\'ve signed the Scala CLA._'
3204,'xeno-by','Test case for recently improved unchecked warning\nPrior to https://github.com/scala/scala/pull/2848, the enclosed\ntest compiled without warning and printed:\n\n    true\n    false\n\nFeatures interacting:\n  - implicit class tags to enable type patterns on abstract types\n  - type tests on compound types.\n\nI think the unchecked warning is acceptable for now.'
3203,'','The text on docs.scala-lang.org is very faint\nExcuse me if this is not the right place to file this issue.\r\n\r\nI find the body text of the pages on the [docs site](http://docs.scala-lang.org/scala/) to be low contrast and difficult to read.\r\n\r\nThere are couple of problems as I see it. The font-face used (Lato with font-weight 300) is very thin. Secondly, the font size is specified in pixels which means it will look very small on high resolution displays. A better option is to not specify the size and thus respect the browsers font settings.\r\n\r\nTo top it all, the color of the text is not pure black but a dull gray color. Over a white background, it strains the eye while reading it.'
3202,'','Diminished Tuple Confusion\n - Better error message for ((a, b) => c): (Tuple2[A, B] => C)\r\n - Better error message for (((a, b)) => c)\r\n\r\nReview by @densh @soc'
3201,'','Remove unused android tests.\nreview by @retronym'
3200,'',"SI-5508 Fix crasher with private[this] in nested traits\nCurrently, this is done late in the game as the Mixin tree transformer\ntreats the trait.\n\n    // Mixin#addLateInterfaceMembers\n    val getter = member.getter(clazz)\n    if (getter == NoSymbol) addMember(clazz, newGetter(member))\n\n`addMember` mutates the type of the interface to add the getter.\n\nHowever, if an inner class or anonymous function of the trait\nhas been flattened to a spot where it precedes the trait in the\nenclosing packages info, this code hasn't had a chance to run,\nand the lookup of the getter crashes as mixins postTransform\nruns over a selection of the not-yet-materialized getter.\n\n    // Mixin#postTransform\n\tcase Select(qual, name) if sym.owner.isImplClass && !isStaticOnly(sym) =>\n\t  val iface  = toInterface(sym.owner.tpe).typeSymbol\n\t  val ifaceGetter = sym getter iface\n\nThis commit removes ensures that Flatten lifts inner classes to\na position *after* the enclosing class in the stats of the\nenclosing package."
3199,'','SI-5508 Eagerly create accessors for private[this] in traits\nCurrently, this is done late in the game as the Mixin tree transformer\ntreats the trait.\n\n    // Mixin#addLateInterfaceMembers\n    val getter = member.getter(clazz)\n    if (getter == NoSymbol) addMember(clazz, newGetter(member))\n\n`addMember` mutates the type of the interface to add the getter.\n\nHowever, if an inner class or anonymous function of the trait\nhas been flattened to a spot where it precedes the trait in the\nenclosing packages info, this code hasn\'t had a chance to run,\nand the lookup of the getter crashes as mixins postTransform\nruns over a selection of the not-yet-materialized getter.\n\n    // Mixin#postTransform\n\tcase Select(qual, name) if sym.owner.isImplClass && !isStaticOnly(sym) =>\n\t  val iface  = toInterface(sym.owner.tpe).typeSymbol\n\t  val ifaceGetter = sym getter iface\n\nThis commit removes the optimization to avoid creating accessors\nin Namers for private[this] if the owner is a trait.\n\nI can\'t spot a difference in the end result:\n\n\t% cat sandbox/test.scala\n\ttrait T {\n\t  private       val x: Int = 0\n\t  private[this] val y: Int = 0\n\t}\n\n\t% scalac-hash v2.10.3  sandbox/test.scala && javap -classpath . T\n\tCompiled from "test.scala"\n\tpublic interface T{\n\t    public abstract void T$_setter_$T$$x_$eq(int);\n\t    public abstract int T$$y();\n\t    public abstract void T$_setter_$T$$y_$eq(int);\n\t    public abstract int T$$x();\n\t}\n\n\t% qbin/scala  sandbox/test.scala && javap -classpath . T\n\tCompiled from "test.scala"\n\tpublic interface T{\n\t    public abstract void T$_setter_$T$$x_$eq(int);\n\t    public abstract int T$$y();\n\t    public abstract void T$_setter_$T$$y_$eq(int);\n\t    public abstract int T$$x();\n\t}\n\nBut we need to explore the history a little to figure out what\nthis change might break.'
3198,'','Use -Dupdate.versions to update versions.properties\nTo allow automating the release process (which involves bumping the versions in versions.properties),\r\nthis serializes the relevant ant properties (set on the command line by the release script) to versions.properties.\r\n\r\nSee build.sh in https://github.com/scala/scala-modules-build for the WIP on the release script.\r\n\r\nreview by @retronym '
3197,'',"Merge 2.10.x, and PR #3196, to master\nThe changes in #3196 don't merge trivially to master,\r\nso submitting a eager merge.\r\n\r\nThe first merge commit is `-Sours`, because both changes in 2.10.x\r\nwere backports already on master.\r\n\r\n\t% export MB=$(git merge-base origin/master origin/2.10.x)\r\n\r\n\t% git log --graph --oneline $MB...origin/2.10.x\r\n\t*   2ad9666 Merge pull request #3166 from skyluc/issue/completion-import-object-7280-210\r\n\t|\\\r\n\t| * 053a274 [nomaster]  Scope completion not returning members provided by imports\r\n\t| * eb9f0f7 [nomaster] Adds test cases for scope completion\r\n\t| * 3a8796d [nomaster] Test infrastructure for scope completion\r\n\t* 38fdd3d Merge pull request #3157 from dotta/backport/2.10.x/si-7915\r\n\t* 04df2e4  Corrected range positions created during default args expansion\r\n\r\n\t% git log master --grep   --oneline\r\n\t202cf2c Merge pull request #3136 from dotta/issue/si-7915\r\n\r\n\t% git merge -s ours origin/2.10.x\r\n\tMerge made by the 'ours' strategy.\r\n\r\n\t% git merge origin/pr/3196\r\n\tAuto-merging test/files/neg/applydynamic_sip.check\r\n\tCONFLICT (content): Merge conflict in test/files/neg/applydynamic_sip.check\r\n\tAuto-merging src/compiler/scala/tools/nsc/typechecker/Typers.scala\r\n\tCONFLICT (content): Merge conflict in src/compiler/scala/tools/nsc/typechecker/Typers.scala\r\n\twarning: inexact rename detection was skipped due to too many files.\r\n\twarning: you may want to set your merge.renamelimit variable to at least 1501 and retry the command.\r\n\tAutomatic merge failed; fix conflicts and then commit the result."
3196,'',"Corrects positions for Dynamic calls\nRebase of #3190 to make it work with 2.10.x\r\n\r\n - update `pointOrEnd` to work with both `Range`- and `OffsetPosition`s\r\n - update checkfiles for unrelated position differences between master and 2.10.x\r\n\r\nWe'll have to update the checkfiles when we merge to master. We can\r\nalso switch back to using `point`.\r\n\r\nReview by @sschaef"
3195,'','SI-8011 Test case for recently fixed value class bug\nThe improvements to symbol substitution in cb37548ef made this\none work.\n\nReview by @paulp'
3194,'','SI-8010 Fix regression in erasure double definition checks\nCalls to `Symbol#info` during scope iteration considered harmful.\r\n\r\nLooks like calling `info` during this Scope iteration is triggering\r\nthe ExplicitOuter info transformer, which "makes all super accessors\r\nand modules in traits non-private, mangling their names.". This name\r\nchange necessitates a rehashing of the owning scope, which I suspect\r\nis enough to corrupt the ScopeEntry-s being traversed in\r\n`checkNoDeclaredDoubleDefs`.\r\n\r\nThe upshot was that we encountered the same symbol twice, which was\r\nreported as being a double-definition.\r\n\r\nThis problem only showed up after 086702d8a74, which did nothing\r\nworse then change the order in which `{e, e1}.sym.info` were\r\nforced.\r\n\r\nI inspected SymbolPairs/OverridingPairs which *appear* to be immune\r\nas they only test flags during scope iteration; infos are not used\r\nuntil later, at which point we\'re iterating a temporary scope that\r\nisn\'t part of the type of the owner of the symbols.\r\n\r\nReview by @xeno-by '
3193,'','No longer support unreleased STARR.\n[Best viewed per-commit. The first commit just moves some xml around.]\r\n\r\nThe STARR ("stable reference") compiler is used to bootstrap the compiler.\r\nIt is now always resolved from maven, based on the `starr.version`\r\nproperty (stored in `versions.properties`).\r\n\r\nBefore, we used the `.desired.sha1` mechanism to pull a set of jars\r\nthat define the compiler used to build locker ("local reference"),\r\nwhich then builds quick.\r\n\r\nFrom now on, we only support officially released versions of STARR.\r\nMilestones are allowed of course, which means that, instead of\r\nbreaking change, STARR evolution must support old and new behavior\r\nfor at least one milestone cycle.\r\n\r\nFor local development, use the `replacestarr` target as before.\r\nIt builds quick (core only) and publishes it to your local maven repo\r\nwith a generated version number, which is saved as `starr.version`\r\nin `build.properties` for convenience (overriding `versions.properties`),\r\nso that your next build will use this version of the compiler for STARR.\r\n\r\nYou may now think of STARR as STAble Reference Release -- if you will.\r\n\r\nReview by @gkossakowski /cc @xeno-by, @paulp, @retronym, @jamesiry.\r\n'
3192,'','SI-4332 Plugs the gaps in views\nThese currently result in runtime errors:\n\n    scala> List(1).view.distinct.force\n    java.lang.UnsupportedOperationException: SeqView(...).newBuilder\n\n    scala> List(1).view.inits.toList\n    java.lang.UnsupportedOperationException: SeqView(...).newBuilder\n\nTwo tests are enclosed:\n\n  1. reflect on the views to make any method that returns\n     `Repr` is overriden in `*ViewLike`. This guards against\n     new additions to the collections API.\n  2. exercise the newly added overrides\n\nParallel collections views are not touched, as these are likely\nto be deprecated or removed shortly.\n\nBefore this change, the test reported the following.\nNot all of these methods were buggy. For instance, `sortBy`,\n`sortWith` are implemented in terms of `sorted` which\nwas implemented in `SeqViewLike`. Even in those cases, I have\nopted to override the methods in the `ViewLike` to guard\nagainst changes in the base class implementation and to\nsimplify the rules in the test.\n\n    ========================================\n    Checking scala.collection.TraversableView\n    ========================================\n\n    trait TraversableLike\n    ----------------------------------------\n    def inits: Iterator[Repr]\n    def tails: Iterator[Repr]\n    override def tail: Repr\n    def filterNot(p: A => Boolean): Repr\n\n    ========================================\n    Checking scala.collection.IterableView\n    ========================================\n\n    trait TraversableLike\n    ----------------------------------------\n    def inits: Iterator[Repr]\n    def tails: Iterator[Repr]\n    def filterNot(p: A => Boolean): Repr\n\n    trait IterableLike\n    ----------------------------------------\n    def dropRight(n: Int): Repr\n    def takeRight(n: Int): Repr\n    def sliding(size: Int): Iterator[Repr]\n\n    ========================================\n    Checking scala.collection.SeqView\n    ========================================\n\n    trait SeqLike\n    ----------------------------------------\n    def sortBy[B](f: A => B)(implicit ord: scala.math.Ordering[B]): Repr\n    def sortWith(lt: (A, A) => Boolean): Repr\n    def distinct: Repr\n    def combinations(n: Int): Iterator[Repr]\n    def permutations: Iterator[Repr]\n\n    trait TraversableLike\n    ----------------------------------------\n    def inits: Iterator[Repr]\n    def tails: Iterator[Repr]\n    def filterNot(p: A => Boolean): Repr\n    def repr: Repr\n\n    trait IterableLike\n    ----------------------------------------\n    def dropRight(n: Int): Repr\n    def takeRight(n: Int): Repr\n    def sliding(size: Int): Iterator[Repr]\n\n    ========================================\n    Checking scala.collection.immutable.StreamView\n    ========================================\n\n    trait SeqLike\n    ----------------------------------------\n    def sortBy[B](f: A => B)(implicit ord: scala.math.Ordering[B]): Repr\n    def sortWith(lt: (A, A) => Boolean): Repr\n    def distinct: Repr\n    def combinations(n: Int): Iterator[Repr]\n    def permutations: Iterator[Repr]\n\n    trait TraversableLike\n    ----------------------------------------\n    def inits: Iterator[Repr]\n    def tails: Iterator[Repr]\n    override def tail: Repr\n\n    trait IterableLike\n    ----------------------------------------\n    def dropRight(n: Int): Repr\n    def takeRight(n: Int): Repr\n    def sliding(size: Int): Iterator[Repr]'
3191,'','Remove parallel collection views and, with them, Gen*View\nThis removes one layer from a many-layered implementation.\r\nMaybe that will be enough to help us fix a bug or two.'
3190,'','correct dynamic pos 2.10.x\nFollow up from #3188'
3189,'','SI-8002 private access for local companions\nWe go through similar gymnastics to make companion implicits\nwork for local class/object pairings, so we ought to be consistent\nwhen it comes to access\n\nReview by @xeno-by @lrytz'
3188,'','correct dynamic pos\nReview by @retronym\r\n\r\n- I\'m unable to assign tickets to me, could someone please activate my account for this (username on Jira is antoras)?\r\n- I\'m not completely sure about what positions have to be transparent. For example, I didn\'t make the parameters of `applyDynamicNamed` transparent because they occur in sources (but the created tuples do not). Thus, I\'m not sure if this is correct.\r\n- I used "complicated" DirectTests because I found no other way to react on positive compilation+check output'
3187,'',"Test in quick mode for ant build\nAdd a target `test.suite.quick`.\r\n\r\nLet test.quick depend only on init and quick.done,\r\nand load the task using the quick path (with non-core deps).\r\n\r\nAs mentioned on the ML.  This would be more useful if\r\npartest task had a failed attribute to ask ant runner to run\r\nfailed tests.  We'll have to ask the partest guys for that.\r\n\r\nReview by @adriaanm in case it is useful."
3186,'','Revise paragraph (a revised #3164)\nRevise text further, following suggestions in #3164 and part of the suggestions by @som-snytt. But I\'ve kept "appear", since this paragraph documents the external behavior, not the implementation.\r\n\r\nReview by @heathermiller.'
3185,'adriaanm','Update Eclipse classpath files\nReview by @adriaanm'
3184,'adriaanm',"SI-2066 Plug a soundness hole higher order type params, overriding\nPolyType-s parameterized by higher order type parameters (HOTPs)\nshould only be relatable with <:< or =:= if the variances of their\ntype parameters line up. This is only enforced for HOTPs defined in\nmethod type arguments.\n\nReview by @adriaanm. I'm not sure if this is the right place to\nmake the fix, nor if the scope is quite right."
3183,'retronym','SI-8001 spurious "pure expression does nothing" warning\n`isPureExprForWarningPurposes` doesn’t warn on `()`, but `(): Unit`\r\nleaves it confused. This patch fixes the problem.\r\n\r\nThe fix is important in the context of the recent split between blackbox\r\nand whitebox macros. Macro engines wrap expansions of blackbox macros\r\nin type ascriptions, so a macro that expands into `()` would actually\r\nproduce `(): Unit`, which would trigger a spurious warning. Thanks\r\n@milessabin for spotting this problem!'
3182,'','SI-7999 s.u.c.NonFatal: StackOverflowError is fatal\nAs demonstrated in\r\nhttps://groups.google.com/d/topic/scala-language/eC9dqTTBYHg, SOEs\r\nshould be considered fatal, because all popular JVM implementations\r\nseem to run into inconsistent state (ignoring finally blocks leading\r\nto not running monitorExit, leading to locks not being unlocked, ...)\r\nif one just pushes them enough.'
3181,'','SI-6913 Reapplies a lost fix by @viktorklang\nhttps://issues.scala-lang.org/browse/SI-6913\r\n\r\nThis somehow got lost. Thanks to @rkuhn for pointing it out. \r\nhttps://groups.google.com/forum/#!topic/scala-internals/X1bgCpINb60'
3180,'retronym','teaches toolbox about -Yrangepos\nreview @retronym'
3179,'gkossakowski','Merge ChangeOwner{AndModuleClass}Traversers\nI found while implementing scala-async that I needed the\nequivalent functionality of `ChangeOwnerAndModuleClassTraverser`,\nwhich I found squirrelled away in part of the lazy vals\nimplementation.\n\nThis functionality was at briefly (starting in 981424b376)\nin the regular `ChangeOwnerTraverser` but was moved to a subclass\nin a15969a6963 in response to code review [1].\n\nBut that review was actually about exposing a boolean\nparameter "followModuleClass", rather than a criticism of\ncentralizing this pattern.\n\nThis commit speculates that "followModuleClass = true" is\n*always* what you want.\n\nReview by @gkossakowski\n\n[1] https://github.com/scala/scala/pull/1406#discussion_r1703370'
3178,'adriaanm','SI-7872 Plug a variance exploit in refinement types\nRefinement types are collapsed to a TypeTree with an original\nduring type checking; this was enough to evade variance validation\nin refchecks.\n\nThis commit:\n\n  - validates the original of `TypeTree`s in refchecks\n  - changes VarianceValidator to recurse into:\n    - the originals of `TypeTree`s\n    - `TypTree` (to cover, e.g. `CompoundTypeTree` / `SelectFromTypeTree`)'
3177,'',"SI-7548 askTypeAt returns the same type whether the file was fully type-checked or targeted type-checked\nWhen asking for targeted typecheck, the located tree may have overloaded types\r\nis the source isn't yet fully typechecked (e.g., a select tree for an\r\noverloaded method). This is problematic as it can lead to unknown 'hovers',\r\nbroken hyperlinking that suddenly starts working, unresolved ScalaDoc comments,\r\nand similar, in the Scala IDE.\r\n\r\nWith this commit we are hardening the contract of `askTypeAt` to return the\r\nsame type whether the file was fully type-checked or targeted type-checked.\r\nThis is done by preventing the typechecker to stop too early if the `located`\r\ntree has an overloaded type.\r\n\r\nUnfortunately, there is no easy way to provide a test together with this fix.\r\nThe faulty behavior is hard to consistently reproduce, as it depends on timing.\r\nHowever, I've manually tested this by inserting a `Thread.sleep` just before\r\ntypechecking in `Global.backgroundCompile`, and checked that an `askTypeAt` on\r\nan select tree for an overloaded method now does return a fully resolved symbol.\r\n\r\nreview by @dragos\r\n\r\nIs this too risky to backport?"
3176,'','deprecate scala.Responder\nAs [discussed earlier](https://groups.google.com/d/msg/scala-internals/AGkz9VE_mTk/fKEjfQpPz7YJ) it doesn’t really belong to the scala package.\r\n\r\nreview @adriaanm'
3175,'',"SI-6329 Graduation day for pending tests for tag materialization\nTwo kids in the class or '6329 had to repeat the senior year,\r\nbut with a little help from 76b92ef, they've finally graduated.\r\n\r\nHere's the class photo:\r\n\r\n\tcommit 3e855661136bb6c530ef1d3a24dc83800e7f1134\r\n\tAuthor: Eugene Burmako <xeno.by@gmail.com>\r\n\tDate:   Thu Sep 6 22:19:56 2012 +0200\r\n\r\n\t    test suite for \r\n\r\n\t test/files/run/t6329_repl.check          | 13 +++++++++++++\r\n\t test/files/run/t6329_repl.scala          |  8 ++++++++\r\n\t test/files/run/t6329_repl_bug.check      | 13 +++++++++++++\r\n\t test/files/run/t6329_repl_bug.pending    | 10 ++++++++++\r\n\t test/files/run/t6329_vanilla.check       |  2 ++\r\n\t test/files/run/t6329_vanilla.scala       |  4 ++++\r\n\t test/files/run/t6329_vanilla_bug.check   |  2 ++\r\n\t test/files/run/t6329_vanilla_bug.pending |  7 +++++++\r\n\t 8 files changed, 59 insertions(+)\r\n\r\nReview by @xeno-by"
3174,'','SI-7375 add a test case for implicit class tag of value class\nLooks like the bug has been already fixed long before me.\r\n\r\nreview @retronym'
3173,'','Handle TypeApply(fun, ...) for symbol-less funs\nSuch as class literals, as one could conjure in `classOf[Int][Int]`\n\nBefore, this would crash with a `NullPointerException`'
3172,'','SI-7987 Test case for "macro not expanded" error with implicits\nFixed, serendipitously, a handful of commits ago in 4a6882e772,\n"SI-7944 FOUND: stray undetermined type params in vicinity of\nimplicits".'
3171,'',"Bump starr to M7, along with module versions.\nAllow extra-repo to make it easier to test e.g.,\r\na staged scalacheck while releasing modules.\r\n\r\nTODO: replace desired.sha1's with jars for M7 starr so it's consistent\r\nalternatively, we could just remove them -- no intention of allowing unreleased starr again\r\n\r\nwhat say you, @gkossakowski, @retronym, @jamesiry et al?"
3170,'',"Prepare upgrade to scalacheck 1.11.\nOur scalacheck tests now compile against 1.10.1 and 1.11.0.\r\nThey pass on 1.10.1, but fail on 1.11.0.\r\n\r\nOnce (that)[https://github.com/rickynils/scalacheck/issues/79]'s fixed,\r\nand 1.11.1 released, we should be able to upgrade to it by simply\r\nchanging scalacheck.version.number in versions.properties.\r\n\r\nThe changes are mostly removing dead code (e.g., consolereporter business).\r\n\r\nOf interest: the type ascription for `oneOf`. I haven't quite investigated,\r\nbut something seems to have changed between 1.10.1 and 1.11.0 that caused\r\na different overload to be picked without the type ascription.\r\nProbably not a scalac bug, just a scalacheck api change.\r\n\r\nReview by @gkossakowski."
3169,'',"SI-4841 Plugins get a class path\nLet -Xplugin specify a class path (or multiple of them).\r\n\r\nEach entry can be a jar or dir, and the first entry to supply\r\na plugin descriptor defines the plugin to load.\r\n\r\nIn the proposed scheme, each plugin gets a class loader so that\r\nplugins are isolated from each other.\r\n\r\nPresumably, if compiler plugins were a rich ecosystem, this would\r\nhave become a requirement by now.\r\n\r\nPartest can't do multiple plugins yet, but this is what it looks like:\r\n\r\n```\r\nskalac -Xplugin:sample.jar:useful.jar:util,needful.jar:another.jar:util,needful.jar:util:exploded -Xplugin-require:sample,another,other foo.scala\r\n\r\nskalac -Xplugin:sample.jar:useful.jar:util,needful.jar:another.jar:util,needful.jar:util:exploded -Xplugin-require:sample,other -Xplugin-disable:another foo.scala\r\n\r\nskalac -Xplugin:sample.jar:useful.jar:util,sample.jar:useful.jar:util -Xplugin-require:sample foo.scala\r\n```\r\nThe manual test shows three plugins with various permutations of jars and dirs.\r\n\r\nThe manual test demonstrates that plugins only see classes on their class path:\r\n\r\n```\r\nInitializing test.plugins.SamplePlugin\r\nneedful.Needful? Failure(java.lang.ClassNotFoundException: needful.Needful)\r\nuseful.Useful? Success(class useful.Useful)\r\nInitializing more.plugins.AnotherPlugin\r\nneedful.Needful? Success(class needful.Needful)\r\nuseful.Useful? Failure(java.lang.ClassNotFoundException: useful.Useful)\r\nInitializing other.plugins.OtherPlugin\r\n```\r\n\r\nDisabling a plugin results in a message instead of silent suppression:\r\n\r\n```\r\nDisabling plugin another\r\n```\r\n\r\nThe duplicate plugin class test must still be honored:\r\n\r\n```\r\nIgnoring duplicate plugin sample (test.plugins.SamplePlugin)\r\nInitializing test.plugins.SamplePlugin\r\nneedful.Needful? Failure(java.lang.ClassNotFoundException: needful.Needful)\r\nuseful.Useful? Success(class useful.Useful)\r\n```\r\n\r\nIf the path is bad, then missing classes will report which plugin induced\r\nthe error:\r\n\r\n```\r\nError: class not found: util/Probe required by test.plugins.SamplePlugin\r\nError: class not found: util/Probe required by more.plugins.AnotherPlugin\r\nInitializing other.plugins.OtherPlugin\r\nneedful.Needful? Success(class needful.Needful)\r\nuseful.Useful? Failure(java.lang.ClassNotFoundException: useful.Useful)\r\nerror: Missing required plugin: sample\r\nerror: Missing required plugin: another\r\ntwo errors found\r\n```"
3168,'','For SyncVar, add nonblocking get, nonblocking take, put with timeout, an...\nI find myself having to use "get(1)" to get the current value (or lack thereof) of a SyncVar with minimal waiting. It\'d be simpler if I could skip the 1 millisecond wait.'
3167,'','SI-7280 Remove unneccesary method\nI noticed when preparing the backport of #3140 that it added an unused method.'
3166,'','Backport of SI-7280\nThe pretty print in the test support code is slightly different than in the 2.11 pull request (scala/scala#3140), so the text of the `.check` files is not the same. The elements are the same, but the representation is different.'
3165,'JamesIry','Unifying -Ydelambdafy:{inline, method}\nAvoid code duplication and use a common approach for\r\nsymbol substituion.\r\n\r\nI asked Martin "why did the apply method just reuse the parameter symbols\r\nof the lambda verbatim", to which he suggested at the time substitution\r\nwasn\'t up to scratch to risk anything more principled.\r\n\r\nTurns out it still isn\'t, but I\'ve taken steps to remedy that\r\nin this incarnation of the pull request.'
3164,'','Fixed two grammar mistakes.\nFirst was clearly just a typo, second was using e.g. ("exepli gratia" or "for example) when it should be using i.e. ("id est" or "that is")'
3163,'','Merge 2.10\nThe only commit no-op merged into master: ec89b59717\r\nThere was a conflict in the deleted starr.number.\r\n\r\nreview by @gkossakowski'
3162,'','SI-7985 Allow qualified type argument in patterns\nWe were considering the lower case `s` in `case _: Array[scala.Int]`\nas a sign that we were dealing with a type variable pattern.\n\nNow, we only do this if a lookahead confirms the absense of a the `.`\n\nReview by @densh'
3161,'','SI-7984 Issue unchecked warning for type aliases\nThe unchecked nature of the type test was already noticed,\r\nbut because the type alias tripped up in rendering a sensible\r\nmessage `CheckabilityChecker` chose to remain silent, other\r\nthan under `-Xdev.`\r\n\r\nThis commit:\r\n\r\n - Dealiases pattern types before launching the CheckabilityChecker\r\n - Sharpens the error messages to explain that the dealiased type\r\n   is the expansion of the alias.'
3160,'adriaanm','Fix implicit divergence regression\nWith a sprinkling of additional cleanup.\n\nReview by @adriaanm\n\n/cc @szeiger'
3159,'','Removes exception handler inlinining from -optimize\nException handler inlining is an optimization that’s hard to get right\r\n(and in fact has open bugs) but that has questionable benefits. This\r\ncommit removes -inlineHandlers from being included under -optimize. If\r\nthere are no serious repercussions then the optimization may be entirely\r\nremoved later.'
3158,'',"SI-7982 make askLoadedType unload arguments out of the PC by default,\n... after it's done with them. Previously loaded compilation units are left \r\nuntouched.\r\n\r\nreview by @dragos, @dotta"
3157,'JamesIry','Backport of SI-7915\n(cherry picked from commit 3009a525b58a4c7865ff524899b85518884ee5f7)'
3156,'adriaanm','Remove deprecated constructor from the migration annotation\nThe migration annotation had a deprecated 2 arg constructor that was\r\ndeprecated in 2.10.0. This commit removes that constructor. Because\r\nmigration is private to the scala package this change shouldn’t affect\r\nthe rest of the community.'
3155,'',"Makes askLoadedTyped unload arguments out of the PC by default ...\n... after it's done with them. Previously loaded compilation units are left \r\nuntouched.\r\n\r\nReview by @dragos"
3154,'',"SI-7221 Rewrites pollForWork non-recursively\nGetting back to the interrupted `WorkItem` after an interruptReq was done with a recursive call needlessly leaving cruft on the stack.\r\n\r\nI have a [personal branch](https://github.com/huitseeker/scala/tree/issue/SI-7221) at the tip of which is a [test](https://github.com/huitseeker/scala/commit/3dda4ba976f05964432a9adef7b1a01d2d8eb80b) hitting the interrupt request queue, which consistently fails-before, and succeeds-after this fix. I don't think it should be inserted in the suite because of its resource-intensive nature, though.\r\n\r\nFixes #1001407\r\n\r\nreview by @retronym, @dotta, possibly @odersky"
3153,'JamesIry','Fix a typo in the `scala` man page\n'
3152,'','Removing deprecated code.\nCode which has been deprecated since 2.10.0 and which allowed for\nstraightforward removal.'
3151,'','fix typo\n'
3150,'JamesIry','WIP: rebase of #3117\nWIP: rebase of #3117'
3149,'retronym',"SI-7974 Fix broken 'Symbol-handling code in CleanUp\nThe transformation did never happen because the pattern\r\nfailed to match. Why did the pattern fail to match? Because\r\nSymbol_apply turned into an overloaded Symbol after erasure."
3148,'',"Fixes broken 'Symbol-handling code in CleanUp\nLooks like the transformation did never happen because the pattern\r\nfailed to match. Why did the pattern fail to match? Because the\r\nSymbol.apply we see in the tree claims to be a method while\r\nSymbol_apply defined in Definitions wants to be a value.\r\n\r\nWhy this happens remains a mystery to me."
3147,'gkossakowski','SI-7969 REPL -C columnar output\nLet `ConsoleReaderHelper.printColumns` print in a vertical\r\norientation (similar to `ls -C`) instead of horizontally (`ls -x`).\r\n\r\nTo support the old behavior, add a property `-Dscala.repl.format=across`\r\nwhere "across" is the presumptive mnemonic for `-x`.\r\n\r\nExtend column formatting to make columns only as wide as\r\ntheir widest element. \r\n\r\nExample that really benefits, witness the skinny columns:\r\n\r\n```\r\nscala> math.\r\n\r\nBigDecimal                     PartiallyOrdered             cosh      rint\r\nBigInt                         Pi                           exp       round\r\nE                              ScalaNumber                  expm1     signum\r\nEquiv                          ScalaNumericAnyConversions   floor     sin\r\nFractional                     ScalaNumericConversions      hypot     sinh\r\nIEEEremainder                  abs                          log       sqrt\r\nIntegral                       acos                         log10     tan\r\nLowPriorityEquiv               asin                         log1p     tanh\r\nLowPriorityOrderingImplicits   atan                         max       toDegrees\r\nNumeric                        atan2                        min       toRadians\r\nOrdered                        cbrt                         package   ulp\r\nOrdering                       ceil                         pow\r\nPartialOrdering                cos                          random\r\n\r\n```'
3146,'',"add `dequeueOption` to immutable.Queue\nCurrently it's not possible to use `immutable.Queue` easily in a functional way, since the essential method `deque` throws an exception in a common situation (dequeue on an empty Queue). Of course you can convert the exception into an Option on the user-side, but this is awkward to code, and simply annoying.\r\n\r\nThis pull-request implements `dequeueOption` in the spirit of `headOption` for `Seq`, yielding `Option[(A,Queue[A])]`, with `None` in case of empty queue. \r\n\r\nA possible different type signature might have been `(Option[A],Queue[A])`, though this appears a bit strange, since `q.dequeueOption._2` would return `q` for the empty case and `q` with first element removed, else. "
3145,'','Added information on how to launch and debug scalac inside Eclipse\n'
3144,'JamesIry','fix IntMap#foreachValue and LongMap#foreachValue scaladoc\n'
3143,'','Revert "temporarily disables run/reflection-sync-subtypes"\nThis reverts commit 04e2dbb29830d0e511cdfa8c132a9fad91d657ed,\nby avoiding the ill-fated attempt to short-circuit the global\nreflection lock.\n\nI think we can do better performance wise, but lets at least\nget something correct to start with.\n\nReview by @xeno-by'
3142,'','Fixes markdown syntax\n'
3141,'','SI-7961 Fix false positive procedure warnings\nTwo issues are fixed in this commit:\r\n - `def foo: Unit` was detected as missing a return type\r\n - The warning was emitted for constructors, but\r\n   `def this(...): Unit = ...` is not valid Scala syntax'
3140,'retronym','SI-7280 Scope completion not returning members provided by imports\nScope completion was not returning members provided by import declared in the same block as the given position, if the position was inside an expression which could not be typed successfully, or outside any expression (2 normal use cases when triggering completion in an IDE).\r\n\r\nThe first commit is a port of retronym/scala@e7ebf3825b4bc63e60ea1e7fcb8c74d509f5a0c6 on the 2.11 code base, to add support to test scope completion in parttest. The second one contains some basic tests for code completion (inheritance, multilevel definition, ...). And the last commit contains the actual fix, with the associated test.\r\n\r\nreview by @retronym, @odersky'
3139,'','Updated Eclipse .classpath for partest and scaladoc projects\n'
3138,'retronym','Refactor out fresh name prefix extraction logic\nAs discussed in https://github.com/densh/scala/commit/0bcb907a25fd0688653c497e2d83a7c2c05e8f8e#diff-9b7190b44c5da63343ed67c2bfa6d043R194\r\n\r\n1. refactor out FreshNameExtractor out of Quasiquotes cake into SymbolTable (can’t put it outside due to the fact that names are path-dependent)\r\n\r\n2. add optional parameter to the fresh name creator to cover additional qq$ prefix needed for quasiquotes\r\n\r\n3. add unit tests\r\n\r\nreview by @retronym'
3137,'retronym','correctly fails implicit search for invalid implicit macros\nThere was a rare corner case when implicit search wouldn’t discard\r\nan invalid implicit macro (e.g. the one with mismatching macro impl or\r\nthe one with macro impl defined in the same compilation run) during\r\ntypechecking the corresponding candidate in typedImplicit1. This is now fixed.'
3136,'retronym',"SI-7915 Corrected range positions created during default args expansion\nThe tree created during expansion of default arguments contained trees with the\r\nwrong type of positions. In particular:\r\n\r\n* The synthetic $qual should have a transparent position.\r\n* The new Select tree should always have a range position, because `selected`\r\n  (i.e., the called method) is always visible in the source.\r\n* The Block that contains the expanded default arguments is transparent.\r\n\r\nThe only tricky part of the fix is the position assigned to the new Select\r\ntree, which needs to respect the range position's invariants. In the specific\r\ncase, we ought to make sure that range positions don't overlap. Therefore, the\r\nposition assigned to the new Select tree is computed by intersecting the\r\noriginal Select position (i.e., `baseFun`'s position) and the original\r\nqualifier's position (i.e., `qual`'s position). Furthermore, calling\r\n`withStart` would turn any position in a range position, which isn't\r\ndesiderable in general (and, even worse, this could lead to generation of\r\ninvalid - bad offsets - positions). Hence, the computation is only performed\r\nwhen both `baseFun` and `qual` positions are range positions. I expect this to\r\nbe always the case if the compiler is started with -Yrangepos. In fact, I\r\nwonder if I should add an assertion that validates this assumption."
3135,'JamesIry',"Revived tests that once depended on xml\nI was a bit overzealous in moving stuff over to scala-xml in 9c50dd5274\r\nThese were all compiler tests that accidentally touched on xml.\r\nI've tried to delicately decouple them so they can roam the\r\nscalac pastures as intended.\r\n\r\nI'm not sure the operation was completely successful, but close enough, I'd say.\r\n\r\nreview by @jamesiry"
3134,'retronym','more precise isMacroApplication check\nReplaces the `symbol.isMacro` check with `symbol.isTermMacro`.\r\nDoesn’t make any difference to trunk but helps a lot with macro annotations.'
3133,'','Merge 2.10\nIntermediate steps:\r\n\r\n```\r\ng merge -s ours e350bd2 2bfe0e7\r\ng merge 25bcba5\r\ng merge -s ours 50c8b39\r\ng merge 075f6f2 e09a8a2\r\ng merge 6045a05 # update check file for presentation/completion-implicit-chained\r\ng merge -s ours 2.10.x\r\n ```\r\n'
3132,'','Fix Java7 branch integration\nMy build refactorings broke it.'
3131,'','Deprecate Pair and Triple\nreview by @retronym \r\ndiscussion https://groups.google.com/forum/#!topic/scala-internals/UCQBU-XPCy0'
3130,'adriaanm','SI-7967 Account for type aliases in self-type checks\nThese eluded the check for "illegal inheritance; self-type does not\r\nconform" as AliasTypeRef doesn\'t forward `typeOfThis`.\r\n\r\nThis commit dealiases before calling `typeOfThis`. That seems to be\r\nthe most localised change.\r\n\r\nWithout the dealias, we had:\r\n\r\n    parent.tpe            = TypeRef(pre, sym = AliasTypeSymbol("CC"), Nil)\r\n    parent.tpe.typeOfThis = parent.tpe.transform(sym.typeOfThis) = CC\r\n\r\nAfter:\r\n\r\n    parent.tpe.dealias            = TypeRef(pre, sym = ClassSymbol("C"), Nil)\r\n    parent.tpe.dealias.typeOfThis = C with B\r\n\r\nReview by @adriaanm'
3129,'','[rebase] blackbox and whitebox macros\nrebase of #3001\r\n\r\nDocumentation: http://docs.scala-lang.org/overviews/macros/blackbox-whitebox.html\r\nDepends on: https://github.com/scala/scala/pull/2994. \r\nReview: @retronym @adriaanm'
3128,'JamesIry',"Upgrade pax-url-aether to 1.6.0.\nSince our jenkins uses mirrors with passwords,\r\nwe needed a fix for https://ops4j1.jira.com/browse/PAXURL-217\r\nin order to run osgi.test on jenkins, now that we use maven more.\r\nWe didn't hit this bug before because we were using a standard\r\nlocation for the maven local repository, but that causes problems\r\nwith concurrent jenkins jobs accessing it."
3127,'JamesIry','SI-7968 Use an intrinsic for the next power of two calculation.\nFixes issues raised in #3126.\r\nThe nextPowerOfTwo function is replaced by nextPositivePowerOfTwo which provides the following improvements:\r\n\r\n1) Uses the Integer.numberOfLeadingZeros intrinsic for the actual implementation.\r\n2) If the input is already a power of two it just returns the number instead of returning the next power of two.\r\n3) Works for negative numbers and zero as input. The output is 1 in both cases.'
3126,'','Improve the next power of two calculation for open hash map\nhttps://github.com/scala/scala/blob/master/src/library/scala/collection/mutable/OpenHashMap.scala\r\n\r\nThe current function is implemented as : \r\nprivate[mutable] def nextPowerOfTwo(i : Int) = highestOneBit(i) << 1\r\n\r\nThis implementation could use the following improvements:\r\n\r\n1) It does what it says, but if the input is already a power of two it should just return the number as is instead of finding the next power of two.\r\nFor eg: nextPowerOfTwo(16) = 32. It should really just remain 16 instead of making the backing array, one of size 32.\r\n\r\n2) It should use the Integer.numberofLeadingZeros function which is an intrinsic on most JVMs instead of depending on the highestOneBit function.\r\n\r\n3) Not a big deal but for a negative value of the input it results in a 0 which means the backing array is of size 0.  For eg: nextPowerOfTwo(-2) = 0.\r\n\r\n4) Again minor but for an input of 0 it results in 0. nextPowerOfTwo(0) = 0.\r\n\r\nBoth (3) and (4) should probably lead to 1 and not 0.\r\n\r\n'
3125,'JamesIry',"Better support for enum trees\nReplace the approach of “detect some magic combination of flags to\r\ntrigger some action” by introducing an enum flag which makes the\r\nsemantics and the intentions of the code using it more explicit.\r\n\r\nThis basically involves wiring up the existing ACC_ENUM bit to a new\r\nmodifier flag and making sure it is set correctly when encountering\r\nenums.\r\n\r\nThe existing enum tests files/pos/t5165 and files/pos/t2764 keep\r\nworking, showing that this hasn't introduced any obvious regressions.\r\n\r\nTests for the changes in Namer which prevent scalac from messing with\r\nenum trees can't be added yet, because one currently can't define an\r\nenum in Scala without the help of the macro paradise.\r\nThe intention is to add the @enum macro as a full test suite as soon\r\nas one can depend on macro annotations."
3124,'adriaanm'," Fix SI-7443 Range.sum ignoring Numeric argument and always assuming default 'plus' implementation\nhttps://issues.scala-lang.org/browse/SI-7443\r\nReview: @axel22"
3123,'','SI-7747 Support class based wrappers in REPL\nThis is @ScrapCodes proposal with simplifications.\r\n\r\nThe original commits are squashed and pass tests.\r\n\r\nThe simplification removes changes to the typical $read.$iw.$iw.value paths. The same name ($read or $iw) is used for both the type of the wrapper and the value term at each level of nesting. So the path looks the same for both templates.\r\n\r\nThe same command option (-Yrepl-class-based) is used to pick one of two Wrapper subtypes. Wrapper is just a CodeAssembler. The wrapper is also passed to the imports wrapping code.\r\n\r\nReview by @retronym\r\n'
3122,'','2.11 is at M5 now (was M4)\n'
3121,'',"SI-7568 Adding Serializable to ResizableArrayAccess inner class\nSerialization troubles were caused by an inner class not being Serializable. \r\n\r\nI'd like to include a test for this, some guidance would be appreciated."
3120,'','SI-7747 Support class based wrappers in REPL\nThis is @ScrapCodes proposal with simplifications.\r\n\r\nThe original commits are squashed and pass tests.\r\n\r\nThe simplification removes changes to the typical `$read.$iw.$iw.value` paths.  The same name (`$read` or `$iw`) is used for both the type of the wrapper and the value term at each level of nesting.  So the path looks the same for both templates.\r\n\r\nThe same command option (`-Yrepl-class-based`) is used to pick one of two `Wrapper` subtypes.  `Wrapper` is just a `CodeAssembler`.  The wrapper is also passed to the imports wrapping code.\r\n\r\nReview by @retronym who looked at the previous PR.\r\n'
3119,'JamesIry',"New mutable hash map with Long keys: partially solves SI-5263 and is relevant to SI-6825.\n\r\nThis implements a new hash map, mutable.LongMap, based on an open addressing scheme that provides\r\ndramatically faster (mostly due to specialization) get and contains\r\noperations than either the standard Java HashMap or any of the existing\r\nScala hash maps.  It doesn't work well above 500,000,000 elements as\r\nthe arrays cannot scale past 2^30 elements.  Maps are not faster in\r\ngeneral due to the lack of specialization of Function1[Long, V]."
3118,'','Introduce Unliftable for Quasiquotes\nThis pr introduces a new `Unliftable` type class used by quasiquotes to extract custom data types out of trees:\r\n\r\n```\r\n  trait Unliftable[T] {\r\n    def unapply(tree: Tree): Option[T]\r\n  }\r\n```\r\n\r\nWhen an implicit value of Unliftable[T] is provided this means that user can extract value of T inside of the quasiquote pattern:\r\n```\r\n  case q"${x: T}" => \r\n    // body\r\n```\r\nWhere this code is semantically equivalent to:\r\n```\r\n  case q"$x0" if implicitly[Unliftable[T]].unapply(x0).nonEmpty => \r\n    val x: T = implicitly[Unliftable[T]].unapply(x0).get\r\n    // body\r\n```\r\nThe major use-case for introduction of `Unliftable` is vast simplification of extraction of leaf values from the trees:\r\n```\r\n     val q"${x: Int} + ${y: Int}" = q"1 + 2"\r\n```\r\nPreviously users had to resort to nesting manual tree subpatterns to extract such values:\r\n```\r\n     val q"${Literal(Constant(x: Int))} + ${Literal(Constant(y: Int))}" = q"1 + 2"\r\n```\r\n\r\nreview by @retronym and @xeno-by'
3117,'JamesIry','WIP uncurry tiding\n/cc @JamesIry'
3116,'paulp','Add buildcharacter.properties to .gitignore.\n(cherry picked from commit 693e55e1cb75055bb243ffca2e18b8e44e80bb8c)\n\nReview by @paulp'
3115,'','Add buildcharacter.properties to .gitignore.\n'
3114,'','M6 modules, partest depends on scala as provided.\nThe new partest now marks its scala dependencies as provided.\r\nThis is much more robust than before, and it breaks ugly cycles.\r\n\r\nUpdated the build for partest-extras to provide the required\r\nscala-compiler dependency.\r\n\r\nreview by @gkossakowski\r\n\r\n/cc @xeno-by: rebasing #3001 on this PR should fix it'
3113,'adriaanm','Make parameters to implicit value classes private\nRebase of #3046, first bumping starr to M6\r\n(Left other versions as-is, as something seems wrong with partest.\r\nLooking into that now.)\r\n\r\nOld description:\r\nSo that they aren\'t offered as an autocomplete suggestion:\r\n\r\n    implicit class Shouty(string: String) extends AnyVal {\r\n     def SHOUT_! = string.toUpperCase + "!"\r\n    }\r\n    "". // autocompletion offers `.string` here.\r\n\r\nThe original incarnation of value classes didn\'t allow this sort of\r\nencapsulation, so we either invented goofy names like\r\n`__thingToAdd` or just picked `x` or `self`. But  has delivered us the\r\nfreedom to keep the accessor private.\r\n\r\nShould we keep any of these accessors around in a deprecated form?\r\n\r\nThe implicit classes in Predef were added in 2.11.0-M2\r\n(c26a8db067e4f), so they are okay.\r\n\r\nI think we can make reason that these APIs were both accidental and unlikely\r\nto be interpreted as public, so we can break them immediately.\r\n\r\n    scala> Left(1).x\r\n    res0: scala.util.Either[Int,Int] = Left(1)\r\n    \r\n    scala> import concurrent.duration._\r\n    import concurrent.duration._\r\n    \r\n    scala> 1.n\r\n    res1: Int = 1'
3112,'',"Modularize scaladoc... almost\nWe postponed the actual modularization to 2.12, because dealing with the fall out of this refactoring would take too much time away from 2.11's stabilisation phase."
3111,'JamesIry','SI-7958 Deprecate methods `future` and `promise` in the `scala.concurren...\n...t` package object\r\n\r\nThe corresponding `apply` methods in the `Future` and `Promise` objects\r\nshould be used instead.'
3110,'retronym','[backport] SI-7776 post-erasure signature clashes are now macro-aware\n"double definition: macro this and method that have same type after erasure"\r\nThis error doesn\'t make sense when macros are involved, because macros\r\nexpand at compile-time, where we\'re not affected by erasure. Moreover,\r\nmacros produce no bytecode, which means that we\'re safe from VerifyErrors.'
3109,'JamesIry',"Faster build 2.10\nBackport of #3108 -- provide hooks for jenkins jobs to specify which repository to publish to.\r\nAlso, publish only what's needed during PR validation to save time.\r\nFinally, we're standardizing on putting all our java properties in versions.properties and passing that around between the jenkins pr validation jobs, having them consumed by the scripts and dbuild. This way we can keep all module versions in synch and don't need to change infrastructure (much) when new properties are needed."
3108,'JamesIry',"Faster PR validation\nThis reworks the build so we can speed up PR validation, publishing Scala to maven once, and consuming that downstream in the other jobs (by maven/sbt/dbuild)\r\n\r\nWe're standardizing on putting all our java properties in versions.properties and passing that around between the jenkins pr validation jobs, having them consumed by the scripts and dbuild. This way we can keep all module versions in synch and don't need to change infrastructure (much) when new properties are needed."
3107,'','Extend named tuple aliases up to 22.\nSee https://groups.google.com/forum/#!topic/scala-internals/UCQBU-XPCy0\r\nfor a discussion about this exciting feature.\r\n\r\nReview by @paulp (obviously).'
3106,'','Faster build\n'
3105,'scala-jenkins','Fix completion after application with implicit arguments\n`List(1, 2, 3).map(f).<ctrl-space>` now works; before\nthe tree had the type `(bf: CanBuildFrom[...]):...` and\ndid not contribute completions from the result type.\n\nThis commit checks if the tree has an implicit method\ntype, and typechecks it as a qualifier. That is enough\nto get to `adaptToImplicitMethod` in the type checker,\ninfer the implicit arguments, and compute the final result\ntype accordingly.'
3104,'adriaanm','Update eclipse setup instructions\nThanks to @gkossakowski for helping on setting up my Eclipse environment for Scala development.\r\n\r\nreview by @gkossakowski\r\n\r\nLet me know if you guys want me to squash any of the below commits.'
3103,'','Topic/tidy collections\nThis set of commits significantly cleans up the interface of the collections library.  In particular, it deprecates collections that are either broken or will continually break due to needing too much manual attention to keep them consistent: SynchronizedColl, CollProxy, CollForwarder, and ImmutableCollAdaptor.  It also attempts to deprecate inheritance and/or overriding where these things do not make sense so that there is more flexibility to alter internal representations and/or less danger of inadvertently introducing inconsistent behavior.  In particular, many immutable classes that implement nontrivial collections have deprecated inheritance (in many cases they should become sealed not final); certain methods have deprecated overriding (including CollLike toColl almost always returning self, += forwarding to put or add in maps).  Finally, a few scarcely-used classes or traits and/or those with idiosyncratic APIs have been deprecated, including all of collection.script and all the low-level mutable buffers (LinkedListLike and friends).\r\n\r\n'
3102,'JamesIry','SI-4012 Mixin and specialization work well\nThe bug was fixed along with SI-7638 in 504b5f3.\r\n\r\nReview by @axel22.'
3101,'retronym','SI-7776 post-erasure signature clashes are now macro-aware\n"double definition: macro this and method that have same type after erasure"\r\nThis error doesn\'t make sense when macros are involved, because macros\r\nexpand at compile-time, where we\'re not affected by erasure. Moreover,\r\nmacros produce no bytecode, which means that we\'re safe from VerifyErrors.'
3100,'retronym','Paulper stack reduction\nRewrites the parser stack reduction logic, rebased.\r\n\r\nReview by @densh or @retronym \r\n'
3099,'','from Issue #3098\nfrom Issue #3098, some typos.'
3098,'',"typos in docs\nI think there are some typos in \r\n\r\nhttps://github.com/scala/scala/blob/master/src/library/scala/collection/parallel/ParIterableLike.scala\r\n\r\nat line 418-421.\r\n\r\nthe 'list' below should be 'set'.\r\n\r\nFor example, one might want to process some elements and then produce a `Set`. In this case, `seqop` would process an element and append it to the **list**, while `combop` would concatenate two **lists** from different partitions together. The initial value  `z` would be an empty set."
3097,'JamesIry',"SI-6546 InnerClasses attribute refers to absent class\nAt issue is that the optimizer would eliminate closure classes\r\ncompletely, then neglect to eliminate those classes from the\r\ncontainer's InnerClasses attribute. This breaks tooling which\r\nexpects those entries to correspond to real classes.\r\n\r\nThe code change is essentially mgarcia's - I minimized it and\r\nput the caches in perRunCaches, and added the test case which\r\nverifies that after being compiled under -optimise, there are\r\nno inner classes. Before/after:\r\n```diff\r\n  7,8d6\r\n  <   InnerClasses:\r\n  <        public final #22; //class A_1$$anonfun$f$1\r\n  37,45c35,40\r\n  <   #21 = Utf8               A_1$$anonfun$f$1\r\n  <   #22 = Class              #21            //  A_1$$anonfun$f$1\r\n  <   #23 = Utf8               Code\r\n  ---\r\n  >   #21 = Utf8               Code\r\n```"
3096,'','Odd build issue in BytePickle.scala on Fedora buildsystem \nOn the Fedora build system I get sometimes the following error messages when I try to build scala:\r\n\r\n[quick.library]         case Ref() => Array.concat(s, Array[Byte](0))\r\n[quick.library]                                                   ^\r\n[quick.library] /builddir/build/BUILD/scala-2.10.3/src/library/scala/io/BytePickle.scala:67: error: type mismatch;\r\n[quick.library]  found   : Int(1)\r\n[quick.library]  required: Byte\r\n[quick.library]         case Def() => Array.concat(s, Array[Byte](1))\r\n[quick.library]                                                   ^\r\n[quick.library] /builddir/build/BUILD/scala-2.10.3/src/library/scala/io/BytePickle.scala:70: error: type mismatch;\r\n[quick.library]  found   : Int(0)\r\n[quick.library]  required: Byte\r\n[quick.library]       if (s(0) == (0: Byte)) (Ref(), s.slice(1, s.length))\r\n[quick.library]                    ^\r\n[quick.library] /builddir/build/BUILD/scala-2.10.3/src/library/scala/io/UTF8Codec.scala:19: error: type mismatch;\r\n[quick.library]  found   : Int(-17)\r\n[quick.library]  required: Byte\r\n[quick.library]   final val UNI_REPLACEMENT_BYTES = Array[Byte](-17, -65, -67)\r\n[quick.library]                                                  ^\r\n[quick.library] /builddir/build/BUILD/scala-2.10.3/src/library/scala/io/UTF8Codec.scala:19: error: type mismatch;\r\n[quick.library]  found   : Int(-65)\r\n[quick.library]  required: Byte\r\n[quick.library]   final val UNI_REPLACEMENT_BYTES = Array[Byte](-17, -65, -67)\r\n[quick.library]                                                       ^\r\n[quick.library] /builddir/build/BUILD/scala-2.10.3/src/library/scala/io/UTF8Codec.scala:19: error: type mismatch;\r\n[quick.library]  found   : Int(-67)\r\n[quick.library]  required: Byte\r\n[quick.library]   final val UNI_REPLACEMENT_BYTES = Array[Byte](-17, -65, -67)\r\n[quick.library]                                                            ^\r\n[quick.library] 6 errors found\r\nBUILD FAILED\r\n/builddir/build/BUILD/scala-2.10.3/build.xml:1108: The following error occurred while executing this line:\r\n/builddir/build/BUILD/scala-2.10.3/build.xml:918: The following error occurred while executing this line:\r\n/builddir/build/BUILD/scala-2.10.3/build.xml:924: The following error occurred while executing this line:\r\n/builddir/build/BUILD/scala-2.10.3/build.xml:882: Compilation failed because of an internal compiler error; see the error output for details.\r\nTotal time: 126 minutes 22 seconds\r\n+ exit 1\r\nRPM build errors:\r\nerror: Bad exit status from /var/tmp/rpm-tmp.pTkm7q (%build)\r\n    Bad exit status from /var/tmp/rpm-tmp.pTkm7q (%build)\r\nChild return code was: 1\r\nEXCEPTION: Command failed. See logs for output.\r\n # [\'bash\', \'--login\', \'-c\', \'rpmbuild -bb --target noarch --nodeps builddir/build/SPECS/scala.spec\']\r\nTraceback (most recent call last):\r\n  File "/usr/lib/python2.7/site-packages/mockbuild/trace_decorator.py", line 70, in trace\r\n    result = func(*args, **kw)\r\n  File "/usr/lib/python2.7/site-packages/mockbuild/util.py", line 361, in do\r\n    raise mockbuild.exception.Error, ("Command failed. See logs for output.\\n # %s" % (command,), child.returncode)\r\nError: Command failed. See logs for output.\r\n # [\'bash\', \'--login\', \'-c\', \'rpmbuild -bb --target noarch --nodeps builddir/build/SPECS/scala.spec\']\r\nLEAVE do --> EXCEPTION RAISED\r\n\r\nThe whole build can be foind at\r\n\r\nhttp://koji.fedoraproject.org/koji/buildinfo?buildID=475595\r\n\r\nThis happens not allways, so I can\'t give you any additional information.'
3095,'gkossakowski','Don\'t use runtime reflection from the batch compiler.\nNot only does this save a big chunk of time on startup by avoiding\nclassloading and symbol table population, but it also seems to\nimprove steady state performance of the compiler.\n\nTheory: JIT can optimize more aggressively without the\nSynchronizedXxx decorators and the like being in the classloader.\nSee "Class Heirarchy Analyis" in [1]\n\nThis commit does this by:\n\n  - Avoiding use of FromString in pattern matcher, instead\n    using an established mechanism to parse system properties.\n  - Changes FromString back to use OptManifest. AFAICT, this\n    is now only a dependency of scala.tools.cmd.gen.Codegen,\n    so this is just a defensive measure.\n\nThe REPL still uses runtime reflection, so will pay a little\nperformance tax.\n\nBenchmark:\n\n    avg shortest 10 times 744ms  # before\n    avg shortest 10 times 675ms  # after\n\n[1] https://wikis.oracle.com/display/HotSpotInternals/PerformanceTechniques'
3094,'adriaanm','Avoid needless TypeRef allocation during erasure.\nAvoid needless TypeRef allocation during erasure.\r\n\r\n  - ThisType(some.package) need not be erased, we can let\r\n    that prefix through unchanged and avoid churning through\r\n    allocations.\r\n  - Sharpen the condition in `rebindInnerClass`. The answer\r\n    to the deleted comment in the code, is "anonymous and\r\n    local classes", which are specifically excluded in the\r\n    new formulation.\r\n  - Finally, detect if erasure of the TypeRef is an identity and reuse\r\n    the original.\r\n\r\nWaste not, want not.\r\n\r\nTo expand on the first point, here is what used to happen during\r\nerasure:\r\n\r\n    scala> val scalaPack = typeOf[Predef.type].prefix\r\n    scalaPack: $r.intp.global.Type = scala.type\r\n\r\n    scala> typeDeconstruct.show(scalaPack)\r\n    res19: String = ThisType(package scala)\r\n\r\n    scala> typeDeconstruct.show(erasure.scalaErasure(scalaPack))\r\n    res20: String = TypeRef(TypeSymbol(final class scala extends ))\r\n\r\nShowing one step of the erasure type map:\r\n\r\n    scala> typeDeconstruct.show(scalaPack.asInstanceOf[SubType].underlying.typeOfThis)\r\n    res21: String = SingleType(pre = ThisType(package <root>), package scala)\r\n'
3093,'',"SI-6546 InnerClasses attribute refers to absent class\nAt issue is that the optimizer would eliminate closure classes\r\ncompletely, then neglect to eliminate those classes from the\r\ncontainer's InnerClasses attribute. This breaks tooling which\r\nexpects those entries to correspond to real classes.\r\n\r\nThe code changes are by mgarcia - I only added the test case,\r\nwhich verifies that after being compiled under -optimise, there\r\nare no inner classes. Before/after:\r\n```diff\r\n  7,8d6\r\n  <   InnerClasses:\r\n  <        public final #22; //class A_1$$anonfun$f$1\r\n  37,45c35,40\r\n  <   #21 = Utf8               A_1$$anonfun$f$1\r\n  <   #22 = Class              #21            //  A_1$$anonfun$f$1\r\n  <   #23 = Utf8               Code\r\n  ---\r\n  >   #21 = Utf8               Code\r\n```"
3092,'gkossakowski','Small implicit optimizations, and SI-7678 RunDefinitions\nThe first two commits should be pretty uncontroversial. They speed up\r\nimplicit search a little.\r\n\r\nI then tried to cache per-run some member symbols that were being\r\nlooked up and stuffed into a map per-implicit search. This led to the \r\nintroduction of RunDefinitions, which in turn let me address SI-7678,\r\nin which the presentation compiler shows up places where we incorrectly\r\nwere caching member symbols per-global, rather than per-run.\r\n\r\n'
3091,'',"Implicit search optimizations\nI'm trying to submit a few of the (hopefully) uncontroversial\r\npatches from my attempts to optimize the compiler. This pull\r\nrequest focusses on implicit search.\r\n\r\n - avoid repeated member lookup and creation of sets of symbols by\r\n   introducing a per-run analog of Definitions. There is more\r\n   work to be done in the name of correctness there under the\r\n   banner of .\r\n - implicit class symbols were never meant to be in an ImplicitInfo,\r\n   only the factory method should be in there.\r\n - cache 'isErroneousOrCyclic' in ImplicitInfo (which itself is\r\n   cached per-run in Contexts (for in-scope implicits) and in\r\n   Implicits (for companion object implicits.)\r\n\r\nReview by @gkossakowski @adriaanm. /cc @xeno-by "
3090,'retronym','Add support for For loops to quasiquotes \nreview by @retronym @xeno-by'
3089,'',"Collections: remove redundant calls to .seq\nStudents of Scala's history might recall that at introduction of\r\nparallel collections, GenIterable et al were *not* added; instead\r\nthe parallel collections inherited from the existing interfaces.\r\n\r\nThis of course was an invitation to widespread disaster as any\r\nexisting code that foreach-ed over a collection might now experience\r\nunwanted concurrency.\r\n\r\nThe first attempt to fix this was to add the `.seq` method to\r\nconvert a parallel colleciton to a sequential one. This was added\r\nin e579152f732, and call sites in the standard library with\r\nside-effecting foreach calls were changed to use that.\r\n\r\nBut this was (rightly) deemed inadequate, as we could hardly expect\r\npeople to change existing code or remember to do this in new code.\r\n\r\nSo later, in 3de96153e5b, GenIterable was sprouted, and parallel\r\ncollections were re-parented.\r\n\r\nThis commit removes residual needless calls to .seq when the static\r\ntype of the receiver is already a plain Iterable, which are no-ops.\r\n\r\nReview by @axel22"
3088,'adriaanm',"SI-7944 FOUND: stray undetermined type params in vicinity of implicits\nImplicit search created a nested Context into which the results of\nits typechecking, namely, errors and undetermined type parameters\n(roughly: those inferred as Nothing) are stashed.\n\nThe code the drives the process was checking for errors, but\ndiscarded those undetermined type parameters.\n\nThis commit copies them from the child context to the parent,\nwhich lets `Typer#adapt` to get to:\n\n    else if (hasUndetsInMonoMode) { // (9)\n      assert(!context.inTypeConstructorAllowed, context) //@M\n      instantiatePossiblyExpectingUnit(tree, mode, pt)\n    }\n\nOur lost TypeVar has found its way home! The reward for which\nis being instantiated, based on another type inference session\nadapting the expression's type to the expected type."
3087,'','WIP: compiler modules\nEnforce consistency of pack, docs, osgi, maven tasks.\r\n\r\nInstead of scattering properties all over invocations of\r\nstaged-docs, staged-pack, make-bundle, copy-bundle and mvn-package,\r\nthese are now all fully determined by the project they act on.\r\n\r\nThe varying arguments to these macros are all centralized.\r\nThey are named like `project.prop`, where `prop` is one of:\r\ndescription, package, dir, name, namesuffix, version,\r\ntargetdir, targetjar, jar, docroot, skipPackage, srcdir, src, srcjar.\r\n\r\nThe defaults for these properties are computed using `init-project-prop`.'
3086,'','SI-7938 - parallel collections should use default ExecutionContext\nParallel collections now use `scala.concurrent.ExecutionContext`\r\nby default.\r\n\r\nThe `ExecutionContextTaskSupport` is optimized to use the\r\n`ForkJoinPool` underlying the `ExecutionContext` if possible.\r\nOtherwise, a fallback `TaskSupport` that creates a reduction tree and\r\nexecute an operation through `Future`s is used.\r\n\r\nThis is a follow-up to: https://github.com/scala/scala/pull/3085\r\n\r\nReview by @phaller @retronym.'
3085,'','SI-7938 - parallel collections should use default ExecutionContext\nParallel collections now use scala.concurrent ExecutionContext\r\nby default.\r\n\r\nReview by @retronym @phaller.'
3084,'gkossakowski','Microoptimization in implicit search\nAvoid creating a throwaway list of parameter types.\r\n\r\nReview by @gkossakowski '
3083,'','Cleanup tools/*\nDetails in the commit comments.\r\n\r\nReview / stay of execution by @paulp'
3082,'gkossakowski','SI-6385 Avoid bridges to identical signatures over value classes\nAs Paul noted in the comments to SI-6260 (from which I mined some\ntest cases) "there is no possible basis for conflict here":\n\n    scala> class C[A](val a: Any) extends AnyVal\n    defined class C\n\n    scala> class B { def x[A](ca: C[A]) = () }\n    defined class B\n\n    scala> class D extends B { override def x[A](ca: C[A]) = () }\n    <console>:8: error: bridge generated for member method x: [A](ca: C[A])Unit in class D\n    which overrides method x: [A](ca: C[A])Unit in class B\n    clashes with definition of the member itself;\n    both have erased type (ca: Object)Unit\n           class D extends B { override def x[A](ca: C[A]) = () }\n                                            ^\nWhat was happening?\n\nBridge computation compares `B#x` and `D#x` exitingErasure, which\nresults in comparing:\n\n    ErasedValueType(C[A(in B#x)]) =:= ErasedValueType(C[A(in D#x)])\n\nThese types were considered distinct (on the grounds of the unique\ntype hash consing), even though they have the same erasure and\ninvolve the same value class.\n\nThat triggered creation of an bridge. After post-erasure eliminates\nthe `ErasedValuedType`s, we find that this marvel of enginineering is\nbridges `(Object)Unit` right back onto itself. The previous\nresolution of SI-6385 (d435f72e5fb7fe) was a test case that confirmed\nthat we detected the zero-length bridge and reported it nicely, which\nhappened after related work in SI-6260. But we can simply avoid\ncreating in it in the first place.\n\nThat\'s what this commit does. It does so by reducing the amount\nof information carried in `ErasedValueType` to the bare minimum needed\nduring the erasure -> posterasure transition.\n\nWe need to know:\n\n  1. which value class wraps the value, so we can box and unbox\n     as needed\n  2. the erasure of the underlying value, which will replace this\n     type in post-erasure.\n\nThis construction means that the bridge above computation now\ncompares:\n\n   ErasedValueType(C, Any) =:= ErasedValueType(C, Any])\n\nI have included a test to show that:\n\n  - we don\'t incur any linkage or other runtime errors in the\n    reported case (run/t6385.scala)\n  - a similar case compiles when the signatures align\n    (pos/t6260a.scala), but does *not* compile when the just\n    erasures align (neg/t6260c.scala)\n  - polymorphic value classes continue to erase to the instantiated\n    type of the unbox: (run/t6260b.scala)\n  - other cases in SI-6260 remains unsolved and indeed unsolvable\n    without an overhaul of value classes: (neg/t6260b.scala)\n\nIn my travels I spotted a bug in corner case of null, asInstanceOf\nand value classes, which I have described in a pending test.'
3081,'adriaanm','Delay delambdafication and put the lambda\'s body into the containing class\nThis is an experimental work in progress PR to bring us closer to using method handles. It will be entirely protected by a flag until it is as solid as the current mechanism.\r\n\r\nWith the flag enabled the compiler will defer final translation from lambda to class until very late in the pipeline, and it will put the body of the lambda in a method in the original class.\r\n\r\nThis PR leaves two key things undone\r\n\r\n1) Specialization still needs to be handled.\r\n2) Logic that partially prevents the use of \'this\' in a super constructor call is bypassed. That logic needs to be redone in order to have fewer holes and be less brittle.\r\n\r\nTo enable on a one off basis use -Ydelambdafy:method. For extensive testing modify ScalaSettings to make "method" the default and recompile.\r\n\r\nResubmission of #2887'
3080,'JamesIry','Check file maintainence\nRemoving the empty and orphaned.'
3079,'','More clear implicitNotFound error for ExecutionContext\n'
3078,'gkossakowski','SI-7598 Make erasure of isInstanceOf[X.type] $outer-aware\nType tests against Singleton-, This- and, Super- types are translated\r\ninto reference equality checks in erasure.\r\n\r\nFor instance:\r\n\r\n    class C { object X; X.isInstanceOf[X.type] }\r\n\r\nResults in:\r\n\r\n    class C { object X; X eq X }\r\n\r\nBut, the term tree created to refer to the object behind the\r\nSingleType was constructed without being explicit about outer\r\npointers.\r\n\r\nAfter typer:\r\n\r\n    class C { object X; class Inner { X.isInstanceOf[X.type] } }\r\n\r\nAfter explicitouter:\r\n\r\n    class C { object X; class Inner($outer: C) { $outer().X().isInstanceOf[X.type] } }\r\n\r\nAfter erasure:\r\n\r\n    class C { object X; class Inner($outer: C) { $outer().X() eq Outer.this.X() } }\r\n\r\nThat leads to a crash in icode.\r\n\r\nThis commit changes the explicit outer tree transformer to transform\r\nthe types of TypeTrees:\r\n\r\nAfter exlicitouter:\r\n\r\n    Inner.this.$outer().X().isInstanceOf[Inner.this.$outer.X.type](\r\n\r\nDo to this, we need versions of outerValue, outerSelect, and outerPath\r\nthat operate on types. I also refactored the term-level versions of\r\nthese to help emphasise the similarities and differences with the new\r\nversions.\r\n\r\nSome robustness is needed in the face of ill-scoped references left\r\nin the trees after extension methods and tail call elimination have\r\nleft a mess in pos/t6891.scala.\r\n\r\n\r\nThis is a resubmission of #3066 that addresses the problem at the source\r\n(explicitouter) rather than in erasure.\r\n\r\nReview by @gkossakowski / @odersky . '
3077,'adriaanm','Update description of explicitouter phase.\nPatern translation now happens earlier.'
3076,'adriaanm','SI-7605 Deprecate procedure syntax\nThis commit covers three cases:\r\n- constructor definitions      (def this {...})\r\n- concrete method definitions  (def foo {...})\r\n- abstract method declarations (def foo)\r\n\r\nThe deprecation is currently hidden behind -Xfuture pending IDE support\r\nfor migrating users from procedures to methods.'
3075,'','WIP\nusing PR validation to test integration with IDE'
3074,'',"Prevent useless filter operation in docs\nHi,\r\nthis deals with the scala doc JS.\r\n\r\n(See first attempt: #3055, hope this time everything is OK)\r\n\r\nCurrently if you type a key inside the input field top left, the list below will be recalculated. This happens even if the input doesn't change (e.g. pressing shift or moving with arrow keys). Since the list could be very long this action takes some time and is a little bit annoying.\r\n\r\nI added some lines (3) inside the JS of the scala doc generator to prevent that the filter operation if the field stays unchanged.\r\n\r\nAlso under: https://groups.google.com/forum/#!topic/scala-internals/Y1MdwOxhjZo\r\nI hope you like this very minor change."
3073,'adriaanm','SI-7928 Favour module accessors symbols in rebind\nThe Refchecks tree transformer transforms a nested modules that overrides a\nmethod into a pair of symbols: the module itself, and an module accessor that\nmatches the overridden symbol.\n\n    [[syntax trees at end of                     typer]] // test1.scala\n    package <empty> {\n      abstract trait C2 extends scala.AnyRef {\n        def O1: Any\n      };\n      class C1 extends AnyRef with C2 {\n        object O1 extends scala.AnyRef\n      }\n    }\n\n    [[syntax trees at end of                 refchecks]] // test1.scala\n    package <empty> {\n      abstract trait C2 extends scala.AnyRef {\n        def O1: Any\n      };\n      class C1 extends AnyRef with C2 {\n        object O1 extends scala.AnyRef\n        @volatile <synthetic> private[this] var O1$module: C1.this.O1.type = _;\n        <stable> def O1: C1.this.O1.type = {\n          C1.this.O1$module = new C1.this.O1.type();\n          C1.this.O1$module\n        }\n      }\n    }\n\nWhen constructing a TypeRef or SingleType with a prefix and and a symbol, the\nfactory methods internally use `rebind` to see if the provided symbol should\nbe replaced with an overriding symbol that is available in that prefix.\n\nTrying this out in the REPL is a bit misleading, because even if you change \nphase to `refchecks`, you won\'t get the desired results because the transform \nis not done in an InfoTransformer.\n\n    scala> val O1 = typeOf[C1].decl(TermName("O1"))\n    O1: $r.intp.global.Symbol = object O1\n\n    scala> typeRef(typeOf[C2], O1, Nil)\n    res13: $r.intp.global.Type = C2#O1\n\n    scala> res13.asInstanceOf[TypeRef].sym.owner\n    res14: $r.intp.global.Symbol = class C1\n\nBut debugging the test case, we get into `rebind` during an AsSeenFrom which\nis where we crashed when `suchThat` encountered the overloaded module and\nmodule accessor symbols:\n\n    typeOf[OuterObject.Inner.type].memberType(symbolOf[InnerTrait.Collection])\n    ...\n     singleTypeAsSeen(OuterTrait.this.Inner.type)\n       val SingleType(pre, sym) = tp\n       // pre = OuterTrait.this.type\n       // sym = OuterTrait.Inner\n\n        val pre1 = this(pre) // OuterObject.type\n\n        singleType(pre1, sym)\n         rebind(pre1, sym)  // was crashing, now OuterObject.Inner\n\nThis commit excludes the module symbol from symbol lookup in the prefix in\nrebind.'
3072,'adriaanm','[nomaster] SI-7519 Less brutal attribute resetting in adapt fallback\nPrefers `resetLocalAttrs` over `resetAllAttrs`. The latter loses track of\nwhich enclosing class of the given name is referenced by a `This` node which\nprefixes the an applied implicit view.\n\nThe code that `resetAllAttrs` originally landed in:\nhttps://github.com/scala/scala/commit/d4c63b#L6R804\n\nCherry picked from 433880e91cba9e1e926e9fcbf04ecd4aeb1d73eb\n\nConflicts:\nsrc/compiler/scala/tools/nsc/typechecker/Typers.scala'
3071,'',"temporarily disables run/reflection-sync-subtypes\nThis test has been a source of spurious failures as in, for example\r\nhttps://github.com/scala/scala/pull/3029#issuecomment-26811129,\r\nso I'm disabling it for the time being while I investigate the issue."
3070,'retronym',"better macro impl shape errors\nWith the advent of quasiquotes, we allowed both arguments and return types\r\nof macro impls to be c.Tree's (as opposed to traditional c.Expr[T]'s).\r\n\r\nThis warrants an update of macro def <-> macro impl signature mismatch\r\nerrors that include a printout of suggested macro impl signatures. Now\r\nalong with a signature that contains exprs, we suggest another signature\r\nthat has all exprs replaced by trees"
3069,'cunei',"Rework build to allow publishing core to maven\n`ant publish-core-signed-opt-nodocs` creates and publishes the smallest\r\npossible set of jars (library/reflect/compiler) we can send to maven.\r\nIt uploads jars with class files and sources, but no docs\r\n(so that we don't need to build scaladoc or any other modules).\r\n\r\n`ant publish-core-signed-opt` is similar, but also publishes docs.\r\n\r\nFor local experimentation: `ant publish-core-local-nodocs`.\r\nWith a little bit more work, this can be used instead of `replacestarr`.\r\n\r\nThis should allow breaking cycles in a principled way in dbuild:\r\n1. build the Scala core (library/reflect/compiler), publish locally\r\nBuilding the core doesn't have any dependencies on the new modules (it's similar to locker.done).\r\n(Don't test --> no need for partest, skip docs -> ignore soon-to-be-module scaladoc.)\r\n2. Use this Scala core to build all modules (especially partest and scaladoc and all its dependencies)\r\n3. Use partest and scaladoc from step 2. to test and document the core and all modules\r\n4. Publish tested, documented Scala core and modules to maven.\r\n\r\nThe next step is to build and publish a modularized scaladoc in this build,\r\nand support using a maven-resolved scaladoc to generate docs.\r\n\r\nReview by everyone: @gkossakowski, @retronym, @cunei, @jsuereth, @xeno-by, @paulp."
3068,'',"SI-7020 Deterministic warnings for pattern matcher, take 2\nThe previous swing at determinism, ebb01e05cbe4, made decent contact but\napparently didn't hit it out of the park. The test wavered every hundred or so\nruns, as witnessed occasionally in nightly builds or pull request validation.\n\nI setup a test to run neg/7020.scala a few hundred times, and could trigger\nthe failure reliably.\n\nI then swept through the pattern matcher in search of HashMap and HashSet\ncreation, and changed them all to the Linked variety. The results of that are\npublished in retronym#ticket/7020-3 [1].\n\nThis commit represents the careful whittling down of that patch to the minimal\nchange required to exhibit determinism.\n\n[1] https://github.com/retronym/scala/compare/ticket/7020-3"
3067,'','Moving disabled tests to their rightful home.\ntest/disabled, not test/files/disabled.'
3066,'','SI-7598 Make erasure of isInstanceOf[X.type] $outer-aware\nType tests against Singleton-, This- and, Super- types are translated\r\ninto reference equality checks in erasure.\r\n\r\nFor instance:\r\n\r\n    class C { object X; X.isInstanceOf[X.type] }\r\n\r\nResults in:\r\n\r\n    class C { object X; X eq X }\r\n\r\nBut, the term tree created to refer to the object behind the\r\nSingleType was constructed without being explicit about outer\r\npointers.\r\n\r\nAfter typer:\r\n\r\n    class C { object X; class Inner { X.isInstanceOf[X.type] } }\r\n\r\nAfter explicitouter:\r\n\r\n    class C { object X; class Inner($outer: C) { $outer().X().isInstanceOf[X.type] } }\r\n\r\nAfter erasure:\r\n\r\n    class C { object X; class Inner($outer: C) { $outer().X() eq Outer.this.X() } }\r\n\r\nThat leads to a crash in `icode`.\r\n\r\nThis commit runs the explicit outer tree transformer over the argument\r\nto `eq`.\r\n\r\nReview by @gkossakowski or @JamesIry '
3065,'','SI-7295 Fix windows batch file with args containing parentheses\nIn command scripts, substitution of `FOO` in `if cond ( %FOO% )` happens\r\n*before* the condition is evaluated. One can use delayed expansion with\r\n`if cond (!FOO!)` to get a saner behaviour. Or, as I ended up doing here, use\r\na goto in the body of the if rather than referring directly to variables \r\nthere.\r\n\r\nHere\'s a cut down version to demonstrate the old problem:\r\n\r\n    C:\\Users\\IEUser>type test.cmd\r\n    @echo off\r\n\r\n    setlocal enableextensions enabledelayedexpansion\r\n\r\n    if [%~1]==[-toolcp] (\r\n     set CP=%~2\r\n     shift\r\n     shift\r\n    )\r\n    echo -toolcp %CP%\r\n    echo %~1 %~2\r\n\r\n    C:\\Users\\IEUser>test.cmd a b\r\n    -toolcp\r\n    a b\r\n\r\n    C:\\Users\\IEUser>test.cmd -toolcp "c:\\program files" a b\r\n    -toolcp c:\\program files\r\n    a b\r\n\r\n    C:\\Users\\IEUser>test.cmd -toolcp "c:\\program files" "a()b" "c()d"\r\n    -toolcp c:\\program files\r\n    a()b c()d\r\n\r\n    C:\\Users\\IEUser>test.cmd "a()b" "c()d"\r\n    d was unexpected at this time.\r\n\r\nI don\'t understand exactly why the parentheses only mess things up in this\r\nsituation. But regardless, lets find another way.\r\n\r\nMy first attempt to fix this was based on the suggestion in the ticket. But,\r\nas shown below, this fails to capture the -toolcp.\r\n\r\n    C:\\Users\\IEUser>type test.cmd\r\n    @echo off\r\n\r\n    setlocal enableextensions enabledelayedexpansion\r\n\r\n    if [%~1]==[-toolcp] (\r\n      set CP=!2!\r\n      shift\r\n      shift\r\n    )\r\n    echo -toolcp %CP%\r\n    echo %~1 %~2\r\n    C:\\Users\\IEUser>test.cmd "a()b" "c()d"\r\n    -toolcp\r\n    a()b c()d\r\n\r\n    C:\\Users\\IEUser>test.cmd -toolcp "c:\\program files" "a()b" "c()d"\r\n    -toolcp\r\n    a()b c()d\r\n\r\nLast stop was the goto you\'ll find in this patch.\r\n\r\nWith this patch applied, I tested on Windows 8 with the following:\r\n\r\n    C:\\Users\\IEUser>type Desktop\\temp.cmd\r\n    ::#!\r\n    @echo off\r\n    call scala %0 %*\r\n    goto :eof\r\n    ::!#\r\n    println("hello, world")\r\n    println(argv.toList)\r\n\r\n    C:\\Users\\IEUser>scala Desktop\\temp.cmd "foo(bar)baz"\r\n    "java" -Xmx256M -Xms32M -Dscala.home="C:\\PROGRA~3\\scala\\bin\\.."\r\n    -Denv.emacs="" -Dscala.usejavacp=true  -cp "..."\r\n    scala.tools.nsc.MainGenericRunner Desktop\\temp.cmd "foo(bar)baz"\r\n\r\n    hello, world\r\n    List(foo(bar)baz)\r\n\r\n    C:\\Users\\IEUser>scala -toolcp "c:\\program files" Desktop\\temp.cmd "foo(bar)baz"\r\n    "java" -Xmx256M -Xms32M -Dscala.home="C:\\PROGRA~3\\scala\\bin\\.."\r\n    -Denv.emacs="" -Dscala.usejavacp=true  -cp "...;c:\\program files"\r\n    scala.tools.nsc.MainGenericRunner  -toolcp "c:\\program files" Desktop\\temp.cmd "foo(bar)baz"\r\n\r\n    hello, world\r\n    List(foo(bar)baz)'
3064,'','Platform independence for SI-6240 test case\nFile.pathSeparator, rather than ":"\n\nReview by @xeno-by'
3063,'','swing support for JDK7\n'
3062,'retronym','hotfix for reflection tests on Windows\nRemoves the Unix-specific command-line sanity check put in place in recently\r\ncommitted reflection tests.\r\n\r\nOn Windows, something like `C:\\Java\\jdk1.6.0_24-x64\\jre\\bin\\java` might\r\nbe a valid command (pointing to `java.exe` or `java.bat`) even if\r\nthe eponymous file does not exist.'
3061,'adriaanm','Fix problem assembling sources and docs of modules.\nA recent commit added \'overwrite=true\' to all usages of the Ant copy task.\r\n\r\nThis was enough to show up a bug in our dist.src and dist.docs tasks, as was\r\nseen on the Windows build:\r\n\r\n    Failed to copy:\r\n     \r\nC:\\Users\\scala\\.m2\\repository\\org\\scala-lang\\modules\\scala-xml_2.11.0-M5\\1.0-RC4\\scala-xml_2.11.0-M5-1.0-RC4-javadoc.jar\r\nto\r\n     \r\nH:\\jenkins\\workspace\\scala-nightly-windows\\dists\\scala-2.11.0-20131019-064627-8848f24161\\doc\\scala-devel-docs\\C:\\Users\\scala\\.m2\\repository\\org\\scala-lang\\modules\\scala-xml_2.11.0-M5\\1.0-RC4\\scala-xml_2.11.0-M5-1.0-RC4-javadoc.jar\r\n...\r\n\r\nThis commit uses a "flattening" copy to put the JARs directly into \r\nscala-devel-docs.\r\n\r\nThe Ant docs note [1] this gotcha:\r\n\r\n> Note that some resources (for example the file resource) return\r\n> absolute paths as names and the result of using them without\r\n> using a nested mapper (or the flatten attribute) may not be what\r\n> you expect.\r\n\r\nThese appear to be the only places we fell into the trap:\r\n\r\n    % ack \'<file\\b\' --xml\r\n    build.xml\r\n    1948:      <file file="${scala-xml-javadoc}"/>\r\n    1949:      <file file="${scala-parser-combinators-javadoc}"/>\r\n    1992:        <file-sets/>\r\n    2007:      <file file="${scala-xml-sources}"/>\r\n    2008:      <file file="${scala-parser-combinators-sources}"/>\r\n\r\n[1] http://ant.apache.org/manual/Tasks/copy.html'
3060,'','SI-7519: Additional test case covering sbt/sbt#914\nCommit 32b5d50d6635320f448c92c27bc6df3acbb04451, associated with [SI-7519](https://issues.scala-lang.org/browse/SI-7519) and included in 2.11.0-M4, fixes sbt issue https://github.com/sbt/sbt/issues/914. This is a partest test covering the sbt issue.\r\n\r\nReview by @retronym.'
3059,'','SI-6840 fixes weird typing of quasiquote arguments\nPreviously quasiquote arguments were type checked against Any\r\nwhich caused weird inference that made splicing of complex expressions\r\nunusable:\r\n```scala\r\n   val l1 = List(q"foo")\r\n   val l2 = List(q"bar")\r\n   q"f(..${l1 ++ l2})" // argument type checked as Any instead of List[Tree]\r\n```\r\nThis is fixed by forcing compiler to type check against type\r\nvariable which itself isn\'t used in any other way.\r\n\r\nreview by @retronym '
3058,'JamesIry','SI-7918 Use scala.util.DynamicVariable instead of ad hoc implementations\nhttps://issues.scala-lang.org/browse/SI-7918'
3057,'retronym',"fixes handling of fancy nested classes in runtime reflection\nReplaces the `jclazz.isMemberClass` check for whether we have an\r\ninner/nested class with `jclazz.getEnclosingClass != null`, because there\r\nexist classes produced by javac (see the attached jar file and the test log)\r\nwhich have the following properties:\r\n  * They are nested within a parent class\r\n  * getEnclosingClass returns a non-null value\r\n  * isMemberClass returns false\r\n\r\nPreviously such classes were incorrectly treated as non-nested, were\r\nincorrectly put into an enclosing package rather than an enclosing class,\r\nand had their names trimmed in the process, leading to situations when\r\na package has multiple declarations with the same name. This is now fixed.\r\n\r\nWhen changing the check, we need to be careful with interpretation of\r\nwhat Class.getEnclosingXXX methods return. If getEnclosingClass produces\r\na non-null result, this doesn't mean that the class is inner or nested,\r\nbecause getEnclosingClass is also not null for local classes (the ones\r\nwith getEnclosingMethod != null || getEnclosingConstructor != null).\r\nThis is expressed in the order of pattern match clauses in `sOwner`.\r\n\r\nNow when the bug is fixed, I also revert b18a2f8798b2, restoring a very\r\nimportant integrity check in runtime reflection, which I had to disable\r\na couple hours ago to fix a master breakage. More details at scala-internals:\r\nhttps://groups.google.com/forum/#!topic/scala-internals/hcnUFk75MgQ"
3056,'paulp','hotfix for runtime reflection on java7\n'
3055,'',"Prevent useless filter refresh in docs\nHi,\r\nthis deals with the scala doc JS.\r\n\r\nCurrently if you type a key inside the input field top left, the list below will be recalculated. This happens even if the input doesn't change (e.g. pressing shift or moving with arrow keys). Since the list could be very long this action takes some time and is a little bit annoying.\r\n\r\nI added some lines (3) inside the JS of the scala doc generator to prevent that the filter operation if the field stays unchanged.\r\n\r\nAlso under: https://groups.google.com/forum/#!topic/scala-internals/Y1MdwOxhjZo\r\nI hope you like this very minor change."
3054,'retronym','macro constructors\nreview @retronym'
3053,'','[nomaster] SI-6026 backport getResource bug fix\nSubmitted to master under SI-4936, this fix allows :javap\r\nto work when tools.jar is discovered by REPL.'
3052,'','SI-6026 REPL checks for javap before tools.jar\nIf javap is already available, don\'t go hunting for tools.jar\r\n\r\nThis avoids the getResource bug in AbstractFileClassLoader.\r\n\r\nHowever, javap or tools.jar must still be provided for the workaround to work around.\r\n\r\nManual test:\r\n\r\n```\r\napm@mara:~$ edge6 -toolcp /usr/lib/jvm/java-6-openjdk-amd64/lib/tools.jar\r\nWelcome to Scala version 2.10.4-20131017-101001-371bad2fe6 (OpenJDK 64-Bit Server VM, Java 1.6.0_27).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n\r\nscala> class Foo\r\ndefined class Foo\r\n\r\nscala> :javap Foo\r\nCompiled from "<console>"\r\npublic class Foo extends java.lang.Object{\r\n    public Foo();\r\n}\r\n```\r\n\r\n\r\n\r\n'
3051,'','Merge 2.10.x to master (again)\nMerging eagerly to disable flaky tests.'
3050,'adriaanm','Ant labour: osgi uptodate checking and better doc skipping \n'
3049,'','Bug with circular implicit resolution\nLooks like I can get the compiler to implicitly resolve a null:\r\n\r\n```scala\r\nscala> case class Foo(l: Long)\r\ndefined class Foo\r\n \r\nscala> object Bar {\r\n     |   implicit val x: Foo = implicitly[Foo]\r\n     | }\r\ndefined module Bar\r\n \r\nscala> Bar.x\r\nres3: Foo = null\r\n```\r\n\r\nIf I use `lazy val` or `def` instead of `val`, this results in an infinite loop.'
3048,'',"Test cases for SAM restrictions.\nOnly one seems to indicate something new:\r\n\r\n  ((x: Int) => 0): NonClassType\r\n\r\nI believe that we shouldn't pursue SAM translation for that case,\r\nand fallthrough to Function1. That would allow for an implicit view\r\nto finish the job.\r\n\r\n(This closes https://github.com/adriaanm/scala/pull/9)"
3047,'','deprecates raw tree manipulation facilities in macros.Context\nreview @retronym'
3046,'gkossakowski','Make parameters to implicit value classes private\nSo that they aren\'t offered as an autocomplete suggestion:\r\n\r\n    implicit class Shouty(string: String) extends AnyVal {\r\n     def SHOUT_! = string.toUpperCase + "!"\r\n    }\r\n    "". // autocompletion offers `.string` here.\r\n\r\nThe original incarnation of value classes didn\'t allow this sort of\r\nencapsulation, so we either invented goofy names like\r\n`__thingToAdd` or just picked `x` or `self`. But SI-7859 has delivered us the\r\nfreedom to keep the accessor private.\r\n\r\nShould we keep any of these accessors around in a deprecated form?\r\n\r\nThe implicit classes in Predef were added in 2.11.0-M2\r\n(c26a8db067e4f), so they are okay.\r\n\r\nI think we can make reason that these APIs were both accidental and unlikely\r\nto be interpreted as public, so we can break them immediately.\r\n\r\n    scala> Left(1).x\r\n    res0: scala.util.Either[Int,Int] = Left(1)\r\n    \r\n    scala> import concurrent.duration._\r\n    import concurrent.duration._\r\n    \r\n    scala> 1.n\r\n    res1: Int = 1'
3045,'','SI-7688 Fix AsSeenFrom of ThisType from TypeVar prefix\nRestores behaviour for the AsSeenFrom before the refactoring in b457b6c477.\r\n\r\nThis commit uniformly considered that a `TypeVar` prefix should not\r\n`matchesPrefixAndClass`; a condition that formerly was only applied if the\r\ntype being viewed was a `TypeRef`. This condition was originally added in\r\ncc9e8eda3364d as a backstop for pos/t2797.scala.\r\n\r\nThis commit leaves that backstop in place where it was, although it expresses\r\nit more directly by checking if `pre baseType clazz` is\r\n`NoType`, which was the case that cropped up in :\r\n\r\n    scala> type T = bc._1.type forSome { val bc: (AnyRef, AnyRef) }\r\n    warning: there were 1 feature warning(s); re-run with -feature for details\r\n    defined type alias T\r\n    scala> val et = typeOf[T].dealias.asInstanceOf[ExistentialType]\r\n    et: $r.intp.global.ExistentialType = bc._1.type forSome { val bc: (AnyRef, AnyRef) }\r\n    \r\n    scala> et.withTypeVars( { x =>\r\n    |   println(x.prefix.typeSymbol)\r\n    |   println(x.prefix.typeSymbol.isSubClass(typeOf[Tuple2[_,_]].typeSymbol))\r\n    |   println(x.prefix.baseType(typeOf[Tuple2[_, _]].typeSymbol))\r\n    |   true\r\n    | } , reflect.internal.Depth(0))\r\n     type bc.type\r\n     true\r\n     <notype>\r\n     res98: Boolean = true'
3044,'','master\n'
3043,'',"Disable flaky tests\n  - Reopens SI-7020 (non-determinism in virpatmat)\r\n  - presentation/doc awaits @huitseeker's Eureka! moment"
3042,'retronym','SI-7634 resurrect the REPL\'s :sh command\nProcessResult had a companion object in 2.10 that somehow disappeared in\r\n2.11. It only called "new ProcessResult(...)", so the REPL might just as\r\nwell do that.\r\n\r\n---\r\nThis regression happened because `:sh` isn\'t tested; but then, I am not sure how to write a test for this that isn\'t platform-dependent.\r\n\r\nReview by @som-snytt'
3041,'','Merge 2.10.x into master\nThe merge started to fail mainly due to 2.10.3 release which modified `build.number`. Other than that, the merge was trivial.'
3040,'','SI-7340 no longer allows to convert vampires to zombies\nAs eloquently elaborated and cleverly named by Travis Brown, macros\r\ndefined in structural types are useful:\r\nhttp://meta.plasm.us/posts/2013/07/12/vampire-methods-for-structural-types/.\r\n\r\nHowever, since such macros are on the intersection of a number of language\r\nfeatures, as usual, there are bugs.\r\n\r\nBefore this commit, subtyping checks between structural types didn\'t\r\ndistinguish regular methods structural types (zombies, as per Travis\'\r\nclassification) and macros (vampires, again as per the same bestiary).\r\n\r\nThere\'s one detail though. Since implicit conversions are looked up using\r\nstructural types, that look like: "? { def foo: ? }", where question marks\r\nstand for WildcardType, we need to allow such structural types to match\r\nsituations when the target member is a macro.\r\n\r\nUnlike the original subtyping rule, this one is not a soundness hole,\r\nbecause: 1) the way the compiler uses such types is guaranteed to be sound,\r\nbecause they aren\'t assigned to any term and are discarded right away\r\nafter implicit search, 2) users can\'t actually write such types, so they\r\ncan\'t exploit the situations that lead to unsoundness.'
3039,'',"Filter JVM debug output for custom options in partest\nThe Picked up `_JAVA_OPTIONS` line occurs on Sun's JDK as a debug output when\r\nyou use that variable to set up custom VM options\r\n\r\nreview by @phaller, @som-snytt"
3038,'',"SI-7899 Allow by-name inference under -Yinfer-by-name\n(Reworks #3034)\r\n\r\nAs usual, the hole has been exploited in the wild. While you can't abstract\r\nover by-name-ness without running into the ClassCastException or an un-applied\r\nFunction0, there are cases like the enclosed test where you can tiptoe around\r\nthose cases.\r\n\r\nI've proposed a small change to Scalaz to avoid tripping over this problem:\r\n\r\n   https://github.com/scalaz/scalaz/pull/562\r\n\r\nBut this commit I've also added a transitional flag, -Yinfer-by-name, that\r\nthey could use to back-publish older versions without code changes. It is also\r\nan insurance policy for other projects that might be exploiting the same hole."
3037,'retronym',"[resubmit] Experimental Single Abstract Method support (sammy meets world)\n_This is resubmission of #3018 after merge conflict has been resolved._\r\n\r\nUnder `-Xexperimental`, `typedFunction` invokes `synthesizeSAMFunction` when the expected type for the function literal (`pt`) is not the built-in `FunctionN` type of the expected arity, but `pt` does have a SAM with the expected number of arguments.\r\n\r\n`synthesizeSAMFunction` expands the following tree:\r\n\r\n```\r\n{ (p1: T1, ..., pN: TN) => body } : S\r\n```\r\n\r\nto:\r\n\r\n```\r\n{\r\n def apply$body(p1: T1, ..., pN: TN): T = body\r\n\r\n new S { def apply(p1: T1, ..., pN: TN): T = apply$body(p1,..., pN) }\r\n}\r\n```\r\n\r\nThe expansion assumes `S` (the expected type) defines a single abstract method (let's call that method `apply` for simplicity).\r\n\r\n1. If `T` is not fully defined, it is inferred by type checking `def apply$body` without a result type before type checking the block. The method's inferred result type is used instead of `T`. [See test case](https://github.com/adriaanm/scala/blob/67062db57c1abef88e0049dac5d82d4f13375a48/test/files/pos/sammy_poly.scala)\r\n\r\n2. To more easily enforce that `S`'s members are not in scope in `body`, that tree goes to the `apply$body` method that's outside the anonymous subclass of S. (The separate `apply$body` method simplifies the implementation of 1&2.) [See test case](https://github.com/adriaanm/scala/blob/67062db57c1abef88e0049dac5d82d4f13375a48/test/files/pos/sammy_scope.scala)\r\n\r\n3. The following [restrictions](https://github.com/adriaanm/scala/commit/657e85fe2412cdadc5ee9dc348159b32dcdfcba7#diff-2b1bf15b53df94495f7155a69f822adeR727) apply to `S`:\r\n  1. Its primary constructor (if any) must be public, no-args, not overloaded.\r\n  2. S must have exactly one abstract member, its SAM\r\n  3. SAM must take exactly one argument list\r\n  4. SAM must be monomorphic\r\n\r\nWe may later relax these requirements to allow an implicit argument list, both on the constructor and the SAM. Could also let the SAM be polymorphic.\r\n\r\nPS: We'll require `import language.sam` instead of `-Xexperimental`, as soon as the SIP is ready and there are more tests."
3036,'',"Improvement in code aesthetics.\nWe're not savages. Review by @xeno-by."
3035,'JamesIry','Rewrites the parser stack reduction logic.\nReview by @densh.\r\n'
3034,'',"SI-7899 Allow by-name inference outside of -Xstrict-inference\nAs usual, the hole has been exploited in the wild. While you can't abstract\nover by-name-ness without running into the ClassCastException or an un-applied\nFunction0, there are cases like the enclosed test where you can tiptoe around\nthose cases.\n\nI'll try to change Scalaz to avoid using this (it's only used in one file) but\nuntil then this commit conditionally moves the sound inference behind the\nrecently added -Xstrict-inference."
3033,'','Traverser and Pickler improvements.\nThis is an improvement on #3019 which implements pickling and unpickling of Trees with Traversers rather than only describing the possibility.'
3032,'','SI-7239 A bonus test case from [scala-user]\nThanks to Ilya Denisov for another sample [1] that progressed with the fix for\nSI-7239, 174334b.\n\n  [1] https://groups.google.com/forum/#!topic/scala-user/8rZeCeiTYDo'
3031,'',"An ant property to skip building docs\nIt can be situationally useful to run:\n\n    ant -Dskip.docs=1 dist-maven\n\nWhen troubleshooting problems that require creation of a distribution, such as\npr-integrate-partest.\n\nScaladoc isn't incremental, so you burn a few minutes for a single file change\nto the compiler or library."
3030,'adriaanm',"SI-3346 implicit parameters can now guide implicit view inference\nThis simple patch makes it possible for implicit views to benefit from\r\nfundep-guided type inference, eliminating a nasty special case in\r\nimplicit inference.\r\n\r\nHere are the changes that I had to apply to the tests (they exposed\r\nquite a number of interesting questions that I was happy to answer):\r\n\r\n1) neg/t5845.scala now works, so I moved it to pos. That easily makes sense,\r\nbecause the test was just a canary to track previous state of things.\r\n\r\n2) neg/divergent_implicit.scala, neg/t5578.scala and neg/t7519.scala\r\nchanged their messages to less informative ones, because inapplicable\r\nimplicit views now get disqualified early and therefore don't display\r\ntheir error messages to the user. This is an unfortunate but necessary\r\nbyproduct of this change, and one can argue that the behavior is now\r\ncompletely consistent with implicit vals (that also don't explain why\r\nthis or that implicit val got disqualified, but rather display a generic\r\nimplicit value not found message).\r\n\r\n3) scaladoc/implicits-chaining.scala and scaladoc/implicits-base.scala.\r\nImmediate culling of apriori inapplicable implicit views messes things up\r\nfor Scaladoc, because it's interested in potentially applicable views,\r\nhaving infrastructure to track various constraints (type bounds, requirements\r\nfor implicit parameters, etc) that guide applicability of views and then\r\npresent it to the user. Therefore, when scaladoc is detected, implicit search\r\nreverts to the old behavior.\r\n\r\n4) We still cannot have Jason's workaround to type constructor inference\r\nmentioned in comments to SI-3346, because it's not really about implicit\r\nparameters of implicit views, but about type inference flowing from the\r\nimplicit parameter list to a preceding parameter list in order to affect\r\ninference of an implicit view. This is something that's still too ambitious."
3029,'retronym','reflection sync\nreview @retronym @adriaanm\r\n\r\nalso see https://docs.google.com/document/d/1GmHRmqahh1tTH_GOPsRlnGVRAFPe-x0iCu3BNMNXjf0/edit'
3028,'','Create sree\nNodeOS Int.'
3027,'','IterableLike grouped : fix documentation\n```scala\r\nscala> Seq(1,2,3).grouped(2).toList\r\nres1: List[Seq[Int]] = List(List(1, 2), List(3))\r\n```'
3026,'',"SI-3871 Tests for protected access\nc39f26382dddaa7 fixed the bug but didn't commit a test case.\r\n\r\nWhile I was looking at this, I added a test to exercise protected more thoroughly.\r\n\r\nReview by @gkossakowski"
3025,'adriaanm',"SI-7902 Fix spurious kind error due to an unitialized symbol\nTracked down this error:\r\n\r\n    <none> is invariant, but type Y2 is declared covariant\r\n    <none>'s bounds<notype> are stricter than type X2's declared bounds >:\r\n    Nothing <: Any, <none>'s bounds<notype> are stricter than type Y2's declared\r\n    bounds >: Nothing <: Any\r\n\r\nto `Symbol#typeParams` returning `List(NoSymbol)` if the symbol was not\r\ninitialized.\r\n\r\nThis happends in the enclosed test for:\r\n\r\n    // checkKindBoundsHK()\r\n    hkArgs   = List(type M3)\r\n    hkParams = List(type M2)\r\n\r\nThis commit forces the symbol of the higher-kinded type argument before\r\nchecking kind conformance.\r\n\r\nA little backstory:\r\n\r\nThe `List(NoSymbol)` arises from:\r\n\r\n    class PolyTypeCompleter... {\r\n    // @M. If `owner` is an abstract type member, `typeParams` are all NoSymbol (see comment in `completerOf`),\r\n    // otherwise, the non-skolemized (external) type parameter symbols\r\n    override val typeParams = tparams map (_.symbol)\r\n\r\nThe variation that triggers this problem gets into the kind conformance checks\r\nquite early on, during naming of:\r\n\r\n    private[this] val x = ofType[InSeq]\r\n\r\nThe inferred type of which is forced during:\r\n\r\n    def addDerivedTrees(typer: Typer, stat: Tree): List[Tree] = stat match {\r\n     case vd @ ValDef(mods, name, tpt, rhs) if !noFinishGetterSetter(vd) =>\r\n       // If we don't save the annotations, they seem to wander off.\r\n       val annotations = stat.symbol.initialize.annotations\r\n\r\nReview by @adriaanm "
3024,'paulp','SI-7895 Error reporting: avoid cascading, truncation\n - Enter error symbols for pattern binders in erroneous constructor patterns.\r\n - issue all errors, rather than just the first, when coming out of the Cone of Silence (aka `Typer#silent`)\r\n - typecheck args with `pt = ErrorType` even if the function is erroneous\r\n - avoid cascading errors in `(x => 0): ErrorType`.\r\n\r\nIn total:\r\n\r\n```\r\n% scalac-hash v2.11.0-M5 sandbox/test.scala\r\n[info] v2.11.0-M5 => /Users/jason/usr/scala-v2.11.0-M5-0-gd6fe890\r\nsandbox/test.scala:2: error: not found: value bong\r\n  def booboo = bong + booble + bippity\r\n               ^\r\nsandbox/test.scala:3: error: not found: value Tuple\r\n  Tuple(wizzle, (x, y) => (x, wozzle))\r\n  ^\r\nsandbox/test.scala:5: error: not found: value Shmist\r\n    case Shmist(a, b) => a :: b :: Nil\r\n         ^\r\nsandbox/test.scala:5: error: not found: value a\r\n    case Shmist(a, b) => a :: b :: Nil\r\n                         ^\r\nsandbox/test.scala:5: error: not found: value b\r\n    case Shmist(a, b) => a :: b :: Nil\r\n                              ^\r\nsandbox/test.scala:6: error: not found: value Goop\r\n    case Goop(a)   => s"$a $b"\r\n         ^\r\nsandbox/test.scala:6: error: not found: value a\r\n    case Goop(a)   => s"$a $b"\r\n                         ^\r\n7 errors found\r\n\r\n% qbin/scalac sandbox/test.scala\r\nsandbox/test.scala:2: error: not found: value bong\r\n  def booboo = bong + booble + bippity\r\n               ^\r\nsandbox/test.scala:2: error: not found: value booble\r\n  def booboo = bong + booble + bippity\r\n                      ^\r\nsandbox/test.scala:2: error: not found: value bippity\r\n  def booboo = bong + booble + bippity\r\n                               ^\r\nsandbox/test.scala:3: error: not found: value Tuple\r\n  Tuple(wizzle, (x, y) => (x, wozzle))\r\n  ^\r\nsandbox/test.scala:3: error: not found: value wizzle\r\n  Tuple(wizzle, (x, y) => (x, wozzle))\r\n        ^\r\nsandbox/test.scala:3: error: not found: value wozzle\r\n  Tuple(wizzle, (x, y) => (x, wozzle))\r\n                              ^\r\nsandbox/test.scala:5: error: not found: value Shmist\r\n    case Shmist(a, b) => a :: b :: Nil\r\n         ^\r\nsandbox/test.scala:6: error: not found: value Goop\r\n    case Goop(a)   => s"$a $b"\r\n         ^\r\nsandbox/test.scala:6: error: not found: value b\r\n    case Goop(a)   => s"$a $b"\r\n                            ^\r\n9 errors found\r\n```\r\n\r\nReview by @paulp'
3023,'adriaanm',"SI-7901 Bump module versions.\nUpgrade to the latest releases of modules. This fixes OSGi\r\nclients, since previous module releases don't have correct\r\nMANIFEST files.\r\n\r\nFor consistency, I bumped the partest version as well."
3022,'adriaanm',"SI-7899 Don't infer by-name types during, e.g. eta-expansion\nGiven:\r\n\r\n    def id[A](a: A): A = a\r\n    def foo(f: (=> Int) => Int) = ()\r\n    foo(id)\r\n\r\nWe eta-expanded `id` and inferred `A` to be `=> Int` to satisfy the\r\nexpected type set forth by the formal parameter `f`.\r\n\r\nWe really shouldn't go about inferring types that we can't *write*.\r\nOur attempt to do so led promptly into a `ClassCastException` in the\r\nenclosed test.\r\n\r\nThis commit:\r\n\r\n  - drops by-name-ness during `inferExprInstance`\r\n  - tests that this results in a type error for the reported bug\r\n    (neg/t7899)\r\n  - tests that a method with a by-name parameter can still be\r\n    eta expanded to match function with a corresponding by-name\r\n    parameter (run/t7899)\r\n  - discovers the same latent CCE in pos/t7584\r\n     - now that would be a type error\r\n     - so we compensate by using placeholder functions rather than\r\n       eta-expansion.\r\n     - and move that that test to `run` for good measure.\r\n\r\nReview by @adriaanm.\r\n\r\n  - what about other uses of `inferExprInstance`\r\n  - can you suggest a test case to exercise `adjustTypeArgs(tparams, tvars, targsStrict)`, which isn't covered."
3021,'',"Extract isStable and isVolatile from Type.\nAs with finalResultType, this is easier to control\r\nand WAY easier to understand. Look, all the relevant\r\ncode fits on half a screenful rather than being\r\nspread out over 5000 lines and you have to be\r\nconstantly conscious of what is overriding what.\r\n\r\nTruly it would be hard to damn the indiscriminate\r\nuse of subtype polymorphism any more soundly than\r\ndoes this, by way of contrast:\r\n```\r\n  def isStable(tp: Type): Boolean = tp match {\r\n    case _: SingletonType                             => true\r\n    case NoPrefix                                     => true\r\n    case TypeRef(_, NothingClass | SingletonClass, _) => true\r\n    case TypeRef(_, sym, _) if sym.isAbstractType     => tp.bounds.hi.typeSymbol isSubClass SingletonClass\r\n    case TypeRef(pre, sym, _) if sym.isModuleClass    => isStable(pre)\r\n    case TypeRef(_, _, _) if tp ne tp.dealias         => isStable(tp.dealias)\r\n    case TypeVar(origin, _)                           => isStable(origin)\r\n    case AnnotatedType(_, atp, _)                     => isStable(atp)    // Really?\r\n    case _: SimpleTypeProxy                           => isStable(tp.underlying)\r\n    case _                                            => false\r\n  }\r\n```\r\nThat's all of it! If there are bugs in it (of course there are)\r\nsome might even be found now."
3020,'','Generalize OverridingPairs to SymbolPairs.\nIncreases your chance of knowing what is going on in\r\nOverridingPairs. Introduces some new abstractions which I\r\nhope for your own sakes you will put to use in some way:\r\n```\r\n  RelativeTo: operations relative to a prefix\r\n  SymbolPair: two symbols being compared for something, and\r\n    the enclosing class where the comparison is being performed\r\n```\r\nFixed a minor bug with access by accident by way of more\r\nprincipled pair analysis. See run/private-override.scala.\r\n\r\nUpgraded the error message issued on certain conflicts\r\nto give the line numbers of both conflicting methods, as\r\nopposed to just one and you go hunting.'
3019,'',"Make tree traversal uniform.\nThere's a huge amount of tree traversal related duplication\r\nwhich is hard to eliminate only because trees aren't properly\r\ntraversed. Key not-quite-tree bits of key trees are ignored\r\nduring traversals, making it impossible to write e.g. a\r\npretty printer without duplicating almost the entire traversal\r\nlogic (as indeed is done for printing purposes in more than one\r\nplace.) And almost the entire pickler logic is redundant with\r\nTraverser, except since it's all duplicated of course it diverged.\r\n\r\nThe not-quite-trees not quite being traversed were Modifiers and Name.\r\nThis commit contains two key contributions, one to traversal and one\r\nto pickling:\r\n\r\n - traverse every case field of every tree\r\n - do all pickling in an order consistent with tree traversal\r\n\r\nThere had been ad hoc adjustments to the pickling scheme here and\r\nthere, probably in pursuit of tiny performance improvements.\r\nFor instance, a Block was pickled expr/stats instead of stats/expr,\r\na TypeDef was pickled rhs/tparams instead of tparams/rhs.\r\nThe benefits derived are invisible compared to the cost of having\r\nseveral hundred lines of tree traversal code duplicated in half a\r\ndozen or more places.\r\n\r\nIt's now possible to eliminate all the pickler tree traversal\r\ncode and use regular traversers (but unfortunately that step does\r\nnot accompany this commit.) For illustration, here's what DefDef\r\nlooks like in Pickler now:\r\n```\r\n  case DefDef(mods, name, tparams, vparamss, tpt, rhs) =>\r\n    putMods(mods)\r\n    putEntry(name)\r\n    putTrees(tparams)\r\n    putTreess(vparamss)\r\n    putTree(tpt)\r\n    putTree(rhs)\r\n```\r\nHere's what it looks like in Trees#itraverse:\r\n```\r\n  case DefDef(mods, name, tparams, vparamss, tpt, rhs) =>\r\n    atOwner(tree.symbol) {\r\n      traverseModifiers(mods)\r\n      traverseName(name)\r\n      traverseTrees(tparams)\r\n      traverseTreess(vparamss)\r\n      traverse(tpt)\r\n      traverse(rhs)\r\n    }\r\n```\r\nI leave the details of how one might use the tree traverser\r\nto eliminate this redundancy as an exercise for Dear Reviewer.\r\nIt is ALSO now possible to write a vastly cleaner tree printer\r\nthan the ones presently in trunk, but this too is an exercise\r\nfor Dear Reviewer."
3018,'',"Experimental Single Abstract Method support (sammy meets world)\nUnder `-Xexperimental`, `typedFunction` invokes `synthesizeSAMFunction` when the expected type for the function literal (`pt`) is not the built-in `FunctionN` type of the expected arity, but `pt` does have a SAM with the expected number of arguments.\r\n\r\n`synthesizeSAMFunction` expands the following tree:\r\n\r\n```\r\n{ (p1: T1, ..., pN: TN) => body } : S\r\n```\r\n\r\nto:\r\n\r\n```\r\n{\r\n def apply$body(p1: T1, ..., pN: TN): T = body\r\n\r\n new S { def apply(p1: T1, ..., pN: TN): T = apply$body(p1,..., pN) }\r\n}\r\n```\r\n\r\nThe expansion assumes `S` (the expected type) defines a single abstract method (let's call that method `apply` for simplicity).\r\n\r\n1. If `T` is not fully defined, it is inferred by type checking `def apply$body` without a result type before type checking the block. The method's inferred result type is used instead of `T`. [See test case](https://github.com/adriaanm/scala/blob/67062db57c1abef88e0049dac5d82d4f13375a48/test/files/pos/sammy_poly.scala)\r\n\r\n2. To more easily enforce that `S`'s members are not in scope in `body`, that tree goes to the `apply$body` method that's outside the anonymous subclass of S. (The separate `apply$body` method simplifies the implementation of 1&2.) [See test case](https://github.com/adriaanm/scala/blob/67062db57c1abef88e0049dac5d82d4f13375a48/test/files/pos/sammy_scope.scala)\r\n\r\n3. The following [restrictions](https://github.com/adriaanm/scala/commit/657e85fe2412cdadc5ee9dc348159b32dcdfcba7#diff-2b1bf15b53df94495f7155a69f822adeR727) apply to `S`:\r\n  1. Its primary constructor (if any) must be public, no-args, not overloaded.\r\n  2. S must have exactly one abstract member, its SAM\r\n  3. SAM must take exactly one argument list\r\n  4. SAM must be monomorphic\r\n\r\nWe may later relax these requirements to allow an implicit argument list, both on the constructor and the SAM. Could also let the SAM be polymorphic.\r\n\r\nPS: We'll require `import language.sam` instead of `-Xexperimental`, as soon as the SIP is ready and there are more tests."
3017,'','Stack overflow with JavaTokenParsers.stringLiteral\nBe careful of the limitations of the quotation parser in JavaTokenParsers.  A string of length 2500 doesn\'t seem at all unreasonable.  This might warrant some additional documentation.\r\n\r\nhttps://github.com/scala/scala/blob/v2.10.2/src/library/scala/util/parsing/combinator/JavaTokenParsers.scala#L50\r\n\r\n```\r\nscala> val r = ("\\"" + "(?:[^\\"\\\\p{Cntrl}\\\\\\\\]|\\\\\\\\[\\\\\\\\\'\\"bfnrt]|\\\\\\\\u[a-fA-F0-9]{4})*" + "\\"").r\r\nr: scala.util.matching.Regex = "(?:[^"\\p{Cntrl}\\\\]|\\\\[\\\\\'"bfnrt]|\\\\u[a-fA-F0-9]{4})*"\r\n\r\nscala> r.pattern.matcher("\\"" + "s" * 2500 + "\\"").lookingAt\r\njava.lang.StackOverflowError\r\n\tat java.util.regex.Pattern$GroupTail.match(Pattern.java:4606)\r\n\tat java.util.regex.Pattern$BranchConn.match(Pattern.java:4466)\r\n\tat java.util.regex.Pattern$CharProperty.match(Pattern.java:3694)\r\n\tat java.util.regex.Pattern$Branch.match(Pattern.java:4502)\r\n\tat java.util.regex.Pattern$GroupHead.match(Pattern.java:4556)\r\n\tat java.util.regex.Pattern$Loop.match(Pattern.java:4683)\r\n\tat java.util.regex.Pattern$GroupTail.match(Pattern.java:4615)\r\n\tat java.util.regex.Pattern$BranchConn.match(Pattern.java:4466)\r\n```\r\n'
3016,'','[master] assorted fixes for vampire macros\nsupersedes https://github.com/scala/scala/pull/2993\r\n\r\nreview @adriaanm @retronym @paulp'
3015,'','Correct build command for scala-ide\n'
3014,'','Describe type parameter interpolation in @implicitNotFound documentation\nUsing this feature is necessary for helpful error messages, so it should be documented.'
3013,'','Rework cff8b569 to heal the windows build.\n - change newTermName to fix negative length names\r\n   rather than reject them\r\n - restore the old logic in unspecializedName for names that\r\n   result from AnyRef specialized type parameters.\r\n\r\nWhy does fix the windows build? I remain none the wiser.'
3012,'','Included vim config causes vim to freeze when saving .scala files.  \nWhenever I save a scala file it freezes vim.  There\'s a java process that is called in the background that doesn\'t return.\r\n\r\n    scalauser       14618   0.0  0.4  2949616  33280   ??  S    10:32PM   0:00.31 /usr/bin/java -Xmx256M -Xms32M -Xbootclasspath/a:/usr/local/Cellar/scala/2.10.3/libexec/lib/akka-actors.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/diffutils.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/jline.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/scala-actors-migration.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/scala-actors.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/scala-compiler.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/scala-library.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/scala-partest.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/scala-reflect.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/scala-swing.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/scalap.jar:/usr/local/Cellar/scala/2.10.3/libexec/lib/typesafe-config.jar -classpath "" -Dscala.home=/usr/local/Cellar/scala/2.10.3/libexec -Dscala.usejavacp=true scala.tools.nsc.CompileClient -Ystop-after:parser /Users/scalauser/projects/scala/hw.scala'
3011,'','Merge/master to java7 2\nTrivial whitespace merge.\r\n\r\nReview by @gkossakowski'
3010,'','Merge master to java7\n'
3009,'','Bump version to 2.10.4 for nightlies\n/cc @jsuereth, @retronym'
3008,'',"Platform independence for a test-case.\nI'm still not sure *why* this only started breaking the windows\r\nbuild after cff8b569c39fb2ce57157fa6adf4ab9289721033.\r\n\r\nBut in the interests of a working windows nightly, this commit\r\navoids assuming '\\n' as a separator when parsing compiler output."
3007,'','Add support for packages into quasiquotes and toolbox, improve handling of fresh names, unhardcode quasiquote expansion logic\nFixes:\r\n\r\n- SI-6841 & SI-6657 by adding support for packages into quasiquotes and toolbox\r\n- handling of fresh names that could have been generated by parser in quasiquotes\r\n- unfortunate `isCaseDefStart` method name\r\n- unhardcodes quasiquote expansion logic\r\n- typos and various inconsistencies\r\n\r\nReview by @retronym '
3006,'JamesIry',"SI-7883 - don't iterate over all keys in MapWrapper.containsKey()\nThis commit fixes SI-7883. I've checked that the new test fails without the changes in Wrappers.scala and passes with them."
3005,'','SI-7886 unsoundness in pattern matcher.\nI tracked down what was behind the issue described here:\r\n```\r\n  // TODO: fix the illegal type bound in pos/t602 -- type inference\r\n  // messes up before we get here:\r\n  /*override def equals(x$1: Any): Boolean = ...\r\n         // Span[Any] --> Any is not a legal type argument for Span!\r\n         val o5: Option[com.mosol.sl.Span[Any]] =\r\n  */\r\n```\r\n...which led straight to the unsoundness seen in neg/t7886.\r\nIt is dangerous to have an expected type of "Any" because\r\nthe type system will blithely ignore kind errors, since "Any"\r\ncan absorb anything. The consequence in this instance was\r\nthat inferring the case constructor for a type like\r\n\r\n  ```Foo[T <: Bound]```\r\n\r\nif done with expected type Any, this would come up with Foo[Any].\r\nI altered it to use expected type Foo[T], which lets the dummy\r\ntype parameter survive to carry the bound forward and restores\r\nsense to the inference. The before/after output for -Xprint:patmat\r\non pos/t602.scala is:\r\n```diff\r\n15c15\r\n<         if (x1.isInstanceOf[com.mosol.sl.Span[Any]])\r\n---\r\n>         if (x1.isInstanceOf[com.mosol.sl.Span[K]])\r\n17c17\r\n<             <synthetic> val x2: com.mosol.sl.Span[Any] = \\\r\n  (x1.asInstanceOf[com.mosol.sl.Span[Any]]: com.mosol.sl.Span[Any]);\r\n---\r\n>             <synthetic> val x2: com.mosol.sl.Span[K] = \\\r\n  (x1.asInstanceOf[com.mosol.sl.Span[K]]: com.mosol.sl.Span[K]);\r\n19,20c19,20\r\n<               val low$0: Option[Any] = x2.low;\r\n<               val high$0: Option[Any] = x2.high;\r\n---\r\n>               val low$0: Option[K] = x2.low;\r\n>               val high$0: Option[K] = x2.high;\r\n```\r\nA file in the library depended (needlessly) on the unsoundness.\r\nIt was easy to fix but reminds us this may affect existing code.'
3004,'','Remove unused code.\nThis almost certainly removes some code which should be deprecated instead. My motivations in sending a PR are part that I want to see what breaks and part that I just want to throw it out there and see what happens, because the alternative is most likely that it dies in the womb.'
3003,'','Updating Position call sites.\nCalling position factories rather than instantiating these\r\nparticular classes. Not calling deprecated methods. Added a few\r\nposition combinator methods.'
3002,'','Check backwards binary compatibility against STARR (M5).\nFor modularization not be too painful, we must guarantee\r\nbackwards binary compatibility between milestone releases.\r\n\r\nExceptions are allowed for methods not currently used by any modules.\r\nTODO: automate detecting these dependencies, so that we can actually be\r\nconfident when allowing exceptions (without having to wait until builds break)\r\n\r\nThe whitelist is mostly FYI at this point...'
3001,'adriaanm','blackbox and whitebox macros\nDocumentation: http://docs.scala-lang.org/overviews/macros/blackbox-whitebox.html\r\nDepends on: https://github.com/scala/scala/pull/2994. \r\nReview: @retronym @adriaanm'
3000,'','Some refinement of -Xlint interpolation warning.\nI had covered a few more cases working on this recently.\r\nThe warnings in several more cases involving polymorphism,\r\ncurrying, and selects vs. idents receive more refined\r\nhandling.'
2999,'',"A .mailmap entry for @huitseeker\nWithout this, the release notes generator considers him\r\nas two distinct beings:\r\n\r\n    List(F, r, a, n, c, ̧, o, i, s,  , G, a, r, i, l, l, o, t)\r\n    List(F, r, a, n, ç, o, i, s,  , G, a, r, i, l, l, o, t)\r\n\r\nReview by, oh I don't know, @huitseeker!"
2998,'','SI-6120 multiple warnings at same position.\nAn error suppresses all further warnings at the same\nposition, but multiple warnings can be heard.'
2997,'adriaanm',"Merge 2.10.x to master\nThe conflicts were trivial.\r\n\r\nI manually reverted the `[nomaster] SI-7862: MANIFEST.MF file for Scala sources` during conflict resolution in build.xml (it was a backport), rather than merging in steps with `-Sours` as I usually do.\r\n\r\nSimilarly, `cb4b8eb update typesafe.artifactory-online.com to private-repo` was a trivial backport and git handled the merge as a no-op.\r\n\r\nReview by @adriaanm\r\n\r\n```\r\n% export MB=`git merge-base origin/2.10.x master`\r\n\r\n% git log --graph --oneline $MB...origin/2.10.x\r\n*   9f62900 Merge pull request #2983 from retronym/merge/2.10.3-to-2.10.x\r\n|\\\r\n| *   96a70e3 Merge remote-tracking branch 'origin/2.10.3' into merge/2.10.3-to-2.10.x\r\n| |\\\r\n|/ /\r\n| *   e2fec6b Merge pull request #2976 from retronym/backport/7862\r\n| |\\\r\n| | * 8e11dcb [nomaster] SI-7862: MANIFEST.MF file for Scala sources\r\n| |/\r\n| *   892aa93 Merge pull request #2969 from retronym/ticket/7861\r\n| |\\\r\n| | * 7f4b44b SI-7861 Don't execute internal callbacks on the user Executor\r\n| |/\r\n| *   e176a10 Merge pull request #2906 from retronym/merge/2.10.x-to-2.10.3\r\n| |\\\r\n| | *   d5ce3de Merge remote-tracking branch 'origin/2.10.x' into merge/2.10.x-to-2.10.\r\n| | |\\\r\n| | * | f4ccefe Merge remote-tracking branch 'origin/2.10.x' into merge/2.10.x-to-2.10.\r\n| |/ /\r\n| * | 502b9f0 Merge pull request #2878 from JamesIry/2.10.3\r\n| * | 682cf97 Merge branch '2.10.2' into 2.10.3\r\n|  /\r\n* |   f0ca5ae Merge pull request #2919 from retronym/ticket/7815\r\n|\\ \\\r\n| |/\r\n|/|\r\n| * 733b322 SI-7815 Dealias before deeming method type as dependent\r\n*   43dcfd0 Merge pull request #2893 from adriaanm/backport-2880-2.10.x\r\n|\\\r\n| * cb4b8eb update typesafe.artifactory-online.com to private-repo\r\n*   d3c8c4b Merge pull request #2882 from adriaanm/license-cleanup-2.10.x\r\n|\\\r\n| * bf93057 Change Scala license to unmodified 3-clause BSD.\r\n* c711828 Merge pull request #2923 from retronym/ticket/7825\r\n* a1796aa SI-7398 Enable test for Java 8 source parser under Java 8\r\n* bf0f9da SI-7825 Consider DEFAULTMETHOD when refchecking concreteness\r\n\r\n% git merge origin/2.10.x\r\nAuto-merging src/reflect/scala/reflect/internal/Types.scala\r\nCONFLICT (content): Merge conflict in src/reflect/scala/reflect/internal/Types.scala\r\nAuto-merging src/reflect/scala/reflect/internal/HasFlags.scala\r\nAuto-merging src/library/scala/concurrent/Future.scala\r\nCONFLICT (content): Merge conflict in src/library/scala/concurrent/Future.scala\r\nAuto-merging src/compiler/scala/tools/nsc/typechecker/RefChecks.scala\r\nCONFLICT (content): Merge conflict in src/compiler/scala/tools/nsc/typechecker/RefChecks.scala\r\nAuto-merging build.xml\r\nCONFLICT (content): Merge conflict in build.xml\r\nCONFLICT (modify/delete): bincompat-forward.whitelist.conf deleted in HEAD and modified in origin/2.10.x. Version origin/2.10.x of bincompat-forward.whitelist.conf left in tree.\r\nCONFLICT (modify/delete): bincompat-backward.whitelist.conf deleted in HEAD and modified in origin/2.10.x. Version origin/2.10.x of bincompat-backward.whitelist.conf left in tree.\r\nwarning: inexact rename detection was skipped due to too many files.\r\nwarning: you may want to set your merge.renamelimit variable to at least 1476 and retry the command.\r\nAutomatic merge failed; fix conflicts and then commit the result.\r\n```"
2996,'','SI-3971 error message carat mispoints at curried methods.\nI found it to be a general palliative to unwrap applies when reporting errors.\nPoint at the thing being applied, not at the opening paren of a possibly\ndistant argument list. This might be slightly less accurate in a few cases,\nbut it is vastly less inaccurate in most cases, so I think it is an easy\nvictory for the forces of clarity.\n\nThanks to retronym for figuring out why issuing a better error message broke\nthe compiler on non-erroneous compile runs. The changes to "treesInResult" are\nthe consequence.'
2995,'','Fix up DEFAULTPARAM semantics.\nI foolishly believed the deprecation message on "hasDefaultFlag" which\r\nsuggested I use "hasDefault" instead. After lots of head scratching, I\r\nhardened the semantics so it\'s like this:\r\n```\r\n - A method parameter with a default value is PARAM | DEFAULTPARAM\r\n - A default getter for such a parameter is METHOD | DEFAULTPARAM\r\n - And "hasDefault" is has(DEFAULTPARAM) && has(PARAM | METHOD)\r\n```\r\nWhy all the bonus logic, why not just hasFlag(DEFAULTPARAM)? For some reason\r\nwe have a handful of overloaded flags spanning uses which someone apparently\r\nthinks can never intersect but I have not been so lucky overall. So since\r\nDEFAULTPARAM is overloaded with TRAIT, unless we think it\'s fine that default\r\ngetters and method parameters with defaults will pose as traits all the time,\r\nthere has to be an anchor bit alongside it.'
2994,'',"assorted fixes for bundles\nThis commit clearly establishes what bundles are. Previously it was\r\nenough to just extend scala.reflect.macros.Macro, which created some\r\nloopholes, but now scalac enforces that bundles:\r\n  1) Are static (not necessarily top-level, but just static)\r\n  2) Are traits (objects shouldn't be bundles anyway, and classes bring\r\n     complications with their ctors which require special treatment in\r\n     generated classes, so why support them if they don't bring anything\r\n     new to the table?)\r\n  3) Are monomorphic (again, this brings unnecessary complications wrt\r\n     auxiliary code generation, so I don't see merit in supporting\r\n     polymorphic bundles, whatever that a polymorphic bundle could mean)\r\n  4) Don't provide concrete implementation for Macro.c (if they do then\r\n     what is the point?)\r\n\r\nAlso fixes a couple issues. Firstly, bundles can now be nested as long\r\nas they are static (which means that we can finally use bundles in REPL!).\r\nSecondly, auxiliary code that's generated by the compiler alongside bundles\r\nis now put into virtual compilation units with stable names, which solves\r\nthe infinite compilation problem in SBT 0.13."
2993,'retronym','[master] assorted fixes for vampire macros\nRebased version of https://github.com/scala/scala/pull/2902'
2992,'','SI-7877 Only look for unapplies in term trees\nSince Scala 2.10.2, the enclosed test case has crashed\r\nin the backend. Before, we correctly rejected this pattern match.\r\n\r\nMy bisection landed at a merge commit f16f4ab157, although both\r\nparents were good. So I don\'t quite trust that.\r\n\r\nI do think the regression stems from the changes to allow:\r\n\r\n    case rx"AB(.+)" =>\r\n\r\nExamples of this are in run/t7715.scala.\r\n\r\nThis commit limits the search for extractors to cases where the\r\nfunction within the Apply is a term tree.\r\n\r\nReview by @xeno-by'
2991,'retronym',"transformers no longer ignore UnApply.fun\nSecond time's the charm. I remember trying to do exactly the same somewhen\r\naround 2.10.0-M4, but then some continuations tests were failing.\r\nLuckily, today everything went smoothly.\r\n\r\nPlease note that this fix changes the way that SI-5465 manifests itself.\r\nPreviously it produced type errors, now it simply crashes the compiler.\r\nTherefore I had to attach the try/catch FatalError clause to invocations\r\nof toolbox methods, so that compiler crashes get caught and translated to\r\nToolBoxErrors.\r\n\r\nAlso fixes SI-7871, and that clears the way for implementing quasiquotes\r\nwith conventional macros rather than relying on a special case in typer."
2990,'',"Scaladoc regression with Function / Tuple type constructors\nAnd less dealiasing in Scaladoc's type printer.\r\n\r\nReview by @adriaanm / @vladureche\r\n"
2989,'','SI-1945 REPL accretes lines to fix syntax\nOn a syntax error, if the last line compiled without\r\nerror, REPL will concatenate the two lines and try to\r\ncompile the result.\r\n\r\nThe use case is splitting an if/else over two lines\r\nof input.\r\n\r\nREPL will not retry on typer errors: that feature\r\nwould allow the use case currently handled by looking\r\nfor leading dot. For example, "abc"\\nlength would work\r\nas postfix invocation.\r\n\r\nIt does assist dot-completion in the case of extra\r\nwhitespace: "abc"\\n .length works by accretion.'
2988,'','Remove octal escape literals from the codebase\nOctal escape literals are deprecated and will be removed in the\r\nnext Scala version.\r\n\r\nReview by @adriaanm or @retronym'
2987,'',"SI-6762 rename emptyValDef to emptySelfType.\nLooks like emptyValDef.isEmpty was already changed to return\nfalse, so now all that's left is a name which means something."
2986,'adriaanm',"SI-6493 Fix existential type used to hide local classes\nIn:\r\n\r\n    def foo = { object O { class C }; new O.C }\r\n\r\nThe inferred return type of can't refer to the local\r\nsymbols; they must not leak out of the compilation unit.\r\n\r\nInstead, `packSymbols` is used to choose a less precise\r\nexistential type, `(AnyRef { type C <: AnyRef })#C)`.\r\n\r\nThis is implemented as a `TypeMap`, which is supposed to\r\ntakes care of rebinding `C` to something valid in the new\r\nprefix (`(AnyRef { type C <: AnyRef })`).\r\n\r\nIf `C` was orginally a type alias, and the original\r\nprefix was a refinement type, this was handled in\r\n`AliasTypeRef#coevolveSym`, which looks for a type\r\nin the new prefix with the name `C`. But for other\r\ntype refs (e.g. a class type ref, as in this case),\r\na no-op `coevolveSym` was used, deferring the rebinding\r\nof abstract classes until `typeRef`.\r\n\r\nBut our case falls between the cracks, and we end up\r\npropagating a type ref in which the prefix does not\r\ncontain the member.\r\n\r\nWith the help of `-uniqid`, this is clear:\r\n\r\n    <method> def foo#7445(): scala#21.this.AnyRef#2222{type Bar#12153 <: scala#21.this.AnyRef#2222}#Bar#12125\r\n\r\nNotice the reference to symbol `#12125`, rather than `#12153`.\r\n\r\nThis commit moves the `coevolveSym` logic up to `TypeRef`,\r\ngeneralizing it to work for any `pre1`. This example answered\r\nthe question in that code:\r\n\r\n> // TODO: is there another way a typeref's symbol can refer to a symbol defined in its pre?\r\n\r\nReview by @adriaanm. Found this patch in a dusty corner."
2985,'adriaanm',"SI-7783 Don't issue deprecation warnings for inferred TypeTrees\nDeprecation checks in RefChecks were looking into all TypeTrees\r\nto find references to deprecated type aliases. However, when the\r\ncompiler infers a type argument or type of a member it creates\r\na TypeTree (with a null original) that was also leading to warnings.\r\n\r\nI ran into this problem often when upgrading a build from SBT 0.12\r\nto 0.13: a plugin I was using used the deprecated type alias, and I\r\nsuffered transitively when I used methods from its API.\r\n\r\nThis commit disables the checks for inferred TypeTree-s.\r\n\r\nDiscussion: https://groups.google.com/d/msg/scala-internals/3nf9-X6Yfe4/yNiPl1foK6sJ\r\n"
2984,'','SI-7747 Support class based wrappers as alternative through a switch.\nThis is a re-implementation after feedback on #2788. \r\n\r\nMotivation: \r\nWe at spark, have to customize scala repl to support our way of "code wrapping" for input code. The reason we want it that way is spark needs code serializable so that it can be executed on a remote worker.\r\n\r\n I wish it was possible to configure rather than port scala repl code for every scala release migration. This pull request may *only* present my intention which is, we may not need a complete overhauling of scala REPL to support it and thus there should be a simpler solution to it.  It also has a sample customization which uses `class` instead of `object` for wrapping code to be executed. The sample customization is exactly what we would need for spark i.e. serializable. Actually there is more space for making things in the repl customizable, but then this is just a beginning. This has been done in this particular way only to achieve the goal in minimal code change at expense of elegance. Of course suggestions and reviews comments are welcomed for me being on lurker side trying to step into space that might not be welcoming for its technical depth. \r\n\r\nFor Example\r\n\r\n```scala\r\n\r\nscala> val a = 10\r\na: Int = 10\r\n\r\nscala> val b = a * 2 // show\r\nclass $read extends Serializable {\r\n  def <init>() = {\r\n    super.<init>;\r\n    ()\r\n  };\r\n  class $iwC extends Serializable {\r\n    def <init>() = {\r\n      super.<init>;\r\n      ()\r\n    };\r\n    val $VAL1 = $line3.$read.INSTANCE;\r\n    import $VAL1.$iw.$iw.a;\r\n    class $iwC extends Serializable {\r\n      def <init>() = {\r\n        super.<init>;\r\n        ()\r\n      };\r\n      val b = a * 2\r\n    };\r\n    val $iw = new $iwC.<init>\r\n  };\r\n  val $iw = new $iwC.<init>\r\n}\r\nobject $read extends scala.AnyRef {\r\n  def <init>() = {\r\n    super.<init>;\r\n    ()\r\n  };\r\n  val INSTANCE = new $read.<init>\r\n}\r\nb: Int = 20\r\n\r\nscala> \r\n\r\n```'
2983,'','Merge/2.10.3 to 2.10.x\nReview by @adriaanm'
2982,'adriaanm','SI-4742 Make -Xcheckinit aware of constants.\nMembers defined as `final val x = <literal>` are given\r\na ConstantType. The constant is folded into the accessor\r\nmethod `x`, and the field itself is never initialized.\r\n(Related discussion: SI-4605)\r\n\r\nAs such, -Xcheckinit spuriously warns when calling that\r\naccessor.\r\n\r\nThis commit disables the checks for constants.\r\n\r\nThis will also fix the checkinit build (failure tracked as SI-7839),\r\nwhich is the victim of this a spurious scolding.\r\n\r\nReview by @adriaanm'
2981,'','Address a regression in ValDef positions.\n884e1ce76 took a step along the path to sharper positions.\r\nBut that step left positions for ValDefs wanting: they no\r\nlonger extended to include the `var` or `val` token.\r\n\r\nThis messed with scala-refactoring, which uses the positions\r\nto locate the smallest enclosing tree around a comment marker\r\nin test source files.\r\n\r\nThe difficulty in this area of code comes from the desugaring\r\nsteps needed for patterns and multiple assignments.\r\n\r\nThis commit steps in right at the end and stretches the position of\r\nthe first ValDef to meet include the start of the token.\r\n\r\nReview by the build kitteh, /cc @huitseeker'
2980,'','Revert #2957\n'
2979,'','SI-7870 Detect default getter clashes in constructors\nDefault getters for constructors live in the companion module.\r\nThese eluded the check for clashes in default getter names due\r\nto overloading, which aims to give a more user friendly error\r\nthan "double definition: meth$default$1".\r\n\r\nThis commit checks for default getters in the companion module,\r\nin addition to those in the template itself.\r\n\r\nReview by @lrytz'
2978,'','SI-7848 Xlint no warn on $sym with params\nThis idea brought to you by retronym.\r\n\r\nAlso improve implicitNotFound detection at typer;\r\nand avoid checking the standard interpolation\r\nexpression for cases like s"some $$x".\r\n\r\nSome minor refactorings of implicitNotFound strings.\r\n\r\nThe intersobralator allows extra spaces, i.e., trims.\r\n\r\n(This merge faked me out somehow.  Here\'s to workflow. Looks like the earlier\r\ncommits were unchanged.)'
2977,'',"Don't avoid to load trait impl .class without inliner.\nThis follows from the discussion in #2963, remove the logic that avoids to load `$class.class` files when the inliner is off.\r\n\r\nAn alternative could be never to load `$class.class` files (instead of always load them). @gkossakowski said in #2963 that inlining does not work anyway for methods of traits.\r\nHowever I think this is less regular, and it would definitely take one step *behind* of fixing that issue.\r\nAfter all, we do load `.class` files for inner classes, which is also pointless in the absence of inlining. So if we really want to do this, we should also avoid loading all the `.class` files not corresponding to a top-level symbol.\r\n\r\nSee also:\r\nhttps://issues.scala-lang.org/browse/SI-4767 Methods defined in traits are not inlined"
2976,'','[nomaster] SI-7862: MANIFEST.MF file for Scala sources\nIn order to be able to use published Scala jars as OSGi bundles in the\r\nEclipse build, Eclipse needs to match sources and binaries. That is\r\ndone by making source jars *source bundles*. This PR adds the required\r\nmanifest entries. Nothing else should be affected (file names remain\r\nthe same).\r\n\r\nCherry picked from 655b7d2601d7db9e98bb405da0a67c9068c98626\r\n\r\nConflicts:\r\n\tbuild.xml\r\n\r\nAfter this commit:\r\n\r\n```\r\n% ant -q dist.src\r\n% for f in dists/scala-2.10.3-20130921-144112-892aa93cf7/src/*.jar; do \\\r\n    echo $f                                                            \\\r\n    unzip -p $f META-INF/MANIFEST.MF                                   \\\r\n  done\r\n\r\ndists/scala-2.10.3-20130921-144112-892aa93cf7/src/fjbg-src.jar\r\nManifest-Version: 1.0\r\nAnt-Version: Apache Ant 1.8.4\r\nCreated-By: 1.6.0_37-b06-434-11M4509 (Apple Inc.)\r\n\r\ndists/scala-2.10.3-20130921-144112-892aa93cf7/src/msil-src.jar\r\nManifest-Version: 1.0\r\nAnt-Version: Apache Ant 1.8.4\r\nCreated-By: 1.6.0_37-b06-434-11M4509 (Apple Inc.)\r\n\r\ndists/scala-2.10.3-20130921-144112-892aa93cf7/src/scala-actors-src.jar\r\nManifest-Version: 1.0\r\nAnt-Version: Apache Ant 1.8.4\r\nCreated-By: 1.6.0_37-b06-434-11M4509 (Apple Inc.)\r\nBundle-Name: Scala Actors Sources\r\nBundle-SymbolicName: org.scala-lang.scala-actors.source\r\nBundle-Version: 2.10.3.v20130921-144112-892aa93cf7\r\nEclipse-SourceBundle: org.scala-lang.scala-actors;version="2.10.3.v201\r\n 30921-144112-892aa93cf7";roots:="."\r\n\r\ndists/scala-2.10.3-20130921-144112-892aa93cf7/src/scala-compiler-src.jar\r\nManifest-Version: 1.0\r\nAnt-Version: Apache Ant 1.8.4\r\nCreated-By: 1.6.0_37-b06-434-11M4509 (Apple Inc.)\r\nBundle-Name: Scala Compiler Sources\r\nBundle-SymbolicName: org.scala-lang.scala-compiler.source\r\nBundle-Version: 2.10.3.v20130921-144112-892aa93cf7\r\nEclipse-SourceBundle: org.scala-lang.scala-compiler;version="2.10.3.v2\r\n 0130921-144112-892aa93cf7";roots:="."\r\n\r\ndists/scala-2.10.3-20130921-144112-892aa93cf7/src/scala-library-src.jar\r\nManifest-Version: 1.0\r\nAnt-Version: Apache Ant 1.8.4\r\nCreated-By: 1.6.0_37-b06-434-11M4509 (Apple Inc.)\r\nBundle-Name: Scala Library Sources\r\nBundle-SymbolicName: org.scala-lang.scala-library.source\r\nBundle-Version: 2.10.3.v20130921-144112-892aa93cf7\r\nEclipse-SourceBundle: org.scala-lang.scala-library;version="2.10.3.v20\r\n 130921-144112-892aa93cf7";roots:="."\r\n\r\ndists/scala-2.10.3-20130921-144112-892aa93cf7/src/scala-partest-src.jar\r\nManifest-Version: 1.0\r\nAnt-Version: Apache Ant 1.8.4\r\nCreated-By: 1.6.0_37-b06-434-11M4509 (Apple Inc.)\r\n\r\ndists/scala-2.10.3-20130921-144112-892aa93cf7/src/scala-reflect-src.jar\r\nManifest-Version: 1.0\r\nAnt-Version: Apache Ant 1.8.4\r\nCreated-By: 1.6.0_37-b06-434-11M4509 (Apple Inc.)\r\nBundle-Name: Scala Reflect Sources\r\nBundle-SymbolicName: org.scala-lang.scala-reflect.source\r\nBundle-Version: 2.10.3.v20130921-144112-892aa93cf7\r\nEclipse-SourceBundle: org.scala-lang.scala-reflect;version="2.10.3.v20\r\n 130921-144112-892aa93cf7";roots:="."\r\n\r\ndists/scala-2.10.3-20130921-144112-892aa93cf7/src/scala-swing-src.jar\r\nManifest-Version: 1.0\r\nAnt-Version: Apache Ant 1.8.4\r\nCreated-By: 1.6.0_37-b06-434-11M4509 (Apple Inc.)\r\nBundle-Name: Scala Swing Sources\r\nBundle-SymbolicName: org.scala-lang.scala-swing.source\r\nBundle-Version: 2.10.3.v20130921-144112-892aa93cf7\r\nEclipse-SourceBundle: org.scala-lang.scala-swing;version="2.10.3.v2013\r\n 0921-144112-892aa93cf7";roots:="."\r\n\r\ndists/scala-2.10.3-20130921-144112-892aa93cf7/src/scalap-src.jar\r\nManifest-Version: 1.0\r\nAnt-Version: Apache Ant 1.8.4\r\nCreated-By: 1.6.0_37-b06-434-11M4509 (Apple Inc.)\r\n```\r\n\r\nTargetting 2.10.3-RC3\r\n\r\nReview by @dragos'
2975,'adriaanm','SI-7868 Account for numeric widening in match translation\nPattern match translation was unprepared for trees of the shape:\r\n\r\n    (0: Short) match {\r\n      case A.unapply(<unapply-selector>.toInt) <unapply> (_) => ()\r\n      case _ => ()\r\n    }\r\n\r\nWhile a scrutinee is inelibigle for implicit views in order to\r\nconform to the type of the extractor call, it is allowed to\r\nweakly conform. In this case, the typechecker will add the\r\nnumeric widening with a `toInt` call.\r\n\r\nThis commit:\r\n\r\n - Changes treeInfo.Unapplied to recognize this tree shape\r\n - Changes spliceApply to recognize and preserve the widening\r\n   when substituting the unapply selector with the binder\r\n - Tests reification of such pattern matches, which also depends\r\n   on treeInfo.Unapplied.\r\n\r\nReview by @adriaanm'
2974,'paulp','SI-7864 Harden "looks like an interpolated String" warning\nWe can\'t rely on the qualifier of an `Apply` having a non-null\r\nsymbol in general.\r\n\r\nReview by @paulp'
2973,'','Update of Eclipse project files\n- Update of project dependencies\r\n- Deletion of scala-xml project\r\n- Deletion of scala-parser-combinators project\r\n- Update of .gitignore to match nested .cache files\r\n\r\nReview by @adriaanm'
2972,'','Upgrade: starr=M5, partest=RC5, xml=RC4, parsers=RC2.\nBump starr, binary version for dependencies to M5.\r\nUpgrade to corresponding versions of modules: partest (1.0-RC5), xml (1.0-RC4), parsers (1.0-RC2).\r\n\r\nreview by @gkossakowski'
2971,'','[backport] Fix SI-7862: MANIFEST.MF file for Scala sources\nThis is a backport of PR #2970. In order to move the build to Scala OSGi bundles, we need to be able to build both on 2.10 and 2.11.\r\n\r\nIn order to be able to use published Scala jars as OSGi bundles in the\r\nEclipse build, Eclipse needs to match sources and binaries. That is\r\ndone by making source jars *source bundles*. This PR adds the required\r\nmanifest entries. Nothing else should be affected (file names remain\r\nthe same).'
2970,'','Fix SI-7862: MANIFEST.MF file for Scala sources\nIn order to be able to use published Scala jars as OSGi bundles in the\r\nEclipse build, Eclipse needs to match sources and binaries. That is\r\ndone by making source jars *source bundles*. This PR adds the required\r\nmanifest entries. Nothing else should be affected (file names remain\r\nthe same).'
2969,'',"SI-7861 Don't execute internal callbacks on the user Executor\nCallbacks internal to the implementation of Futures should be\r\nexecuted with the `InternalCallbackExecutor`, rather than the\r\nuser supplied `Executor`.\r\n\r\nIn a refactoring da54f34a6, `recoverWith` and `flatMap` no longer\r\nplayed by these rules. This was noticed by a persnickety test in\r\nPlay.\r\n\r\nBefore this patch, the enclosed test outputs:\r\n\r\n    % scala-hash v2.10.3-RC2 test/files/run/future-flatmap-exec-count.scala\r\n    mapping\r\n    execute()\r\n    flatmapping\r\n    execute()\r\n    execute()\r\n    recovering\r\n    execute()\r\n    execute()\r\n\r\nReview by @viktorklang. I'm being conservative here and marking this as a blocker for 2.10.3, but I'm open to other opinions."
2968,'','Follow good interrupt discipline in Response\nRestores the interrupted status of the waiting thread after catching an\r\nInterruptException.\r\n\r\nreview by @dotta'
2967,'',"Add test case for SI-6719\nThe bug itself was fixed earlier in 95fe19545d60ae9aa79d2c8d5665c7f3b0cbdb1a\r\n\r\nIt was caused by improper wrapping of blocks in the toolbox's parse method.\r\n\r\nReview by @retronym "
2966,'retronym','Remove partiality of `+` method from SortedMap\n`SortedMap#+` threw an `AbstractMethodError` if it was not overridden. It should instead be a compile error.'
2965,'gkossakowski',"SI-7859 Value classes may wrap a non-public member\nWe allow value class constructors to be non-public, so to be regular,\r\nwe should also allow the same for the param accessor.\r\n\r\nThis commit uses the 'makeNotPrivate' machinery to ensure that\r\nthe backend can generate the requisite unboxing calls.\r\n\r\nThis commit:\r\n\r\n  - refactors the code that enforced the restrictions, improving\r\n    a few error messages and positions. The remaining restrictions\r\n    needed some rewording in light of this change.\r\n  - allows value classes to have non-public, val parameters.\r\n    private[this] / protected[this] are still disallowed as value\r\n    classes don't have a concept of `this`, and because trying to\r\n    accomdate then would complicate the implementation.\r\n\r\n    This means that `class C(x: Int) extends AnyVal` is not allowed,\r\n    the user still must write `private val x: Int` or `val x: Int`.\r\n  - Outlaw `class C()()(val x: Int) extends AnyVal` to curtail any\r\n    bugs that might lurk in such a formulation.\r\n\r\nThe tests:\r\n\r\n  - Show that the privacy is respected in the typer phase, under\r\n    joint and separate compilation. We don't want a repeat performance\r\n    of SI-6601.\r\n  - Show that code that needs compiler-generated unboxes works under\r\n    both compilation scenarios\r\n  - Checks that the remaining restrictions are enforced and well\r\n    communicated.\r\n\r\nReview by @gkossakowski"
2964,'','Require Ant >= 1.8.2\nReportedly our build fails with earlier incarnations. Time to raise the\r\nbar.\r\n\r\nTested by temporarily setting the requirement to 1.8.5 and observing:\r\n\r\n    % ant init\r\n    Buildfile: /Users/jason/code/scala/build.xml\r\n\r\n    desired.jars.uptodate:\r\n\r\n    boot:\r\n\r\n    init:\r\n\r\n    BUILD FAILED\r\n    /Users/jason/code/scala/build.xml:216: Ant version 1.8.5 is required. You are running Apache Ant(TM) version 1.8.4 compiled on May 22 2012\r\n\r\nReview by @gkossakowski'
2963,'gkossakowski',"Small refactorings giving hooks for Scala.js\nI have reviewed the ugliest parts of Scala.js, where I need to circumvent the lack of appropriate hooks in scalac, and I came up with these three small refactorings.\r\n\r\nEach one of these has its corresponding simplifying commit in Scala.js, in the following comparison:\r\nhttps://github.com/sjrd/scala-js/compare/scala-2.11...topic/what-if-scalac-was-nicer-to-us\r\n(in the same order).\r\n\r\nThere is no test accompanying this pull request, because there is absolutely no functionality change (it's only refactoring) and I don't quite see how to test that with partest. I'll be glad to add tests if someone can hint at me how.\r\n\r\n(In case you care:) Incidentally, these hooks are the only ones on which Scala.js relies, in addition to being able to manipulate the phase set. Which means that *if* they were (experimentally) overridable by plugins, then Scala.js could be implemented as a plugin, which would bring lots of advantages in terms of integration with our various tools (sbt and IDE mainly).\r\n\r\n(There are still two files with a non-negligible amount of code duplication in Scala.js, [JSSymbolLoaders.scala](https://github.com/sjrd/scala-js/blob/topic/what-if-scalac-was-nicer-to-us/compiler/src/main/scala/scala/tools/nsc/scalajs/JSSymbolLoaders.scala) and [JSTypefileParser.scala](https://github.com/sjrd/scala-js/blob/topic/what-if-scalac-was-nicer-to-us/compiler/src/main/scala/scala/tools/nsc/scalajs/JSTypefileParser.scala), but a proper fix to these two would require much bigger refactorings in scalac; and I don't care so much about these because they are not specifically the hooks I am relying on.)"
2962,'','Quasiquotes: add syntactic extractor for assignment-like trees\nThere are three kinds of assign-like trees:\r\n```\r\n1. Assign(lhs, rhs)                          // $lhs = $rhs\r\n3. AssignOrNamedArg(lhs, rhs)                // $lhs = $rhs\r\n2. Apply(Select(f, nme.update), args :+ rhs) // $f(..$args) = $rhs\r\n```\r\nNew syntactic combinator unifies all of them and lets users not to think\r\nabout these implementation details.'
2961,'','Cull extraneous whitespace.\nOne last flurry with the broom before I leave you slobs to code\r\nin your own filth. Eliminated all the trailing whitespace I\r\ncould manage, with special prejudice reserved for the test cases\r\nwhich depended on the preservation of trailing whitespace.\r\n\r\nWas reminded I cannot figure out how to eliminate the trailing\r\nspace on the "scala> " prompt in repl transcripts. At least\r\nreduced the number of such empty prompts by trimming transcript\r\ncode on the way in.\r\n\r\nRouted ConsoleReporter\'s "printMessage" through a trailing\r\nwhitespace stripping method which might help futureproof\r\nagainst the future of whitespace diseases. Deleted the up-to-40\r\nlines of trailing whitespace found in various library files.\r\n\r\nIt seems like only yesterday we performed whitespace surgery\r\non the whole repo. Clearly it doesn\'t stick very well. I suggest\r\nit would work better to enforce a few requirements on the way in.'
2960,'',"Silence pos/t3960's -Ycheck output.\nSomeday someone will have to straighten out where output goes.\r\nClearly under current conditions, Console.err is not a good place.\r\nI rerouted through unit.warning so the output will be swallowed\r\nlike all the other warnings."
2959,'','Type housekeeping.\nMoved ListOfNil somewhere more generally accessible. No\r\nreason the compiler should hoard it for itself. Flitted\r\nto a few locations with constructs like ".head.head" and\r\n".tail.head" looking for code which could be rewritten. Found\r\nsome, admittedly not always making use of ListOfNil.\r\n\r\nMade overdue moves of ConstantType(Constant(true|false|null))\r\nto vals in Definitions.'
2958,'',"Longer timeout for repl test.\n15 seconds is crazy aggressive. I have fast hardware and it's still\r\nreally easy for a test to take to fifteen seconds under load."
2957,'','Parser and position improvements.\n'
2956,'','SI-7848 Xlint says what looks interpolated\nThe motivating use case was an Expecty debug string\r\ngetting flagged for `$eq`.\r\n\r\nThe test case demonstrates a different bug, in which\r\nthe position of the literal tree is changed when typer\r\ngets rid of the unused local, so that when the tree is\r\nre-typed in erasure, a second, spurious warning is\r\nemitted at the start of the method. Specifically, the\r\nsecond warning is not suppressed because of the\r\ndifferent position.'
2955,'',"SI-7853 Regression in explicit outer\nThe attempt to placate pos/t4970.scala in 55c6fd4 roused another\r\ndragon.\r\n\r\nWe've got two levers here: the type of the symbol of the outer\r\naccessor, and the type of its DefDef.\r\n\r\nThey have been historically out of sync due to the vaguaries of\r\nfinalResultType (which is far less vague since 671e6e03c7), but\r\nthe finicky operation of ExplicitOuter now has a hard time when\r\nwe try to bring them into line.\r\n\r\nThis stuff is notoriously difficult to understand because the\r\ntrees you see from `-Xprint` show a tpt derived from the method\r\nsymbol's info, and discards the actual tpt in the tree.\r\n\r\nRather than letting `DefDef(acc)` call `TypeTree(sym)` and use\r\n`sym.tpe_*.finalResultType`, this commit computes the member type\r\nof the accessor from the current class and explicitly uses that as\r\nthe return type of the outer accessor def.\r\n\r\nWe should try to push this a little deeper. I tried to put it into\r\n`def TypeTree`, but that broke, among others,\r\nrun/concurrent-stream.scala. Maybe `def DefDef` and `def ValDef`?\r\n\r\nBut a localised fix is the right start as it addresses the regress\r\nin a minimal fashion to get the IDE building again.\r\n\r\n======\r\n\r\nA less ad-hoc place to call memberType\r\n\r\nRather than localizing the fix to the outerAccessor, this\r\ncommit pushed the call to `memberType` into *all* usages of\r\n`newValDef` and `newDefDef`."
2954,'gkossakowski','Avoid null checks when emitting "".== and SomeModule.==\nAlthough the same the code would be later optimized by -Yconst-opt,\r\nwe can offer the same lean byte code to those compiling without that\r\noption by being more discerning when translating ==.\r\n\r\nThis helps people using bytecode based code coverage tools\r\nsuch as jacoco that would emit "branch not covered" warnings\r\nfor the impossible null check.\r\n\r\nBefore:\r\n```\r\nscala> class C { (null: Any) match { case Nil => case "" => case _ => } }\r\ndefined class C\r\n\r\nscala> :javap C\r\n\r\npublic C();\r\n  Code:\r\n   Stack=2, Locals=5, Args_size=1\r\n   0:\taload_0\r\n   1:\tinvokespecial\t#9; //Method java/lang/Object."<init>":()V\r\n   4:\taconst_null\r\n   5:\tastore_1\r\n   6:\tgetstatic\t#15; //Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;\r\n   9:\taload_1\r\n   10:\tastore_2\r\n   11:\tdup\r\n   12:\tifnonnull\t23\r\n   15:\tpop\r\n   16:\taload_2\r\n   17:\tifnull\t30\r\n   20:\tgoto\t37\r\n   23:\taload_2\r\n   24:\tinvokevirtual\t#19; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z\r\n   27:\tifeq\t37\r\n   30:\tgetstatic\t#25; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;\r\n   33:\tastore_3\r\n   34:\tgoto\t74\r\n   37:\tldc\t#27; //String\r\n   39:\taload_1\r\n   40:\tastore\t4\r\n   42:\tdup\r\n   43:\tifnonnull\t55\r\n   46:\tpop\r\n   47:\taload\t4\r\n   49:\tifnull\t63\r\n   52:\tgoto\t70\r\n   55:\taload\t4\r\n   57:\tinvokevirtual\t#19; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z\r\n   60:\tifeq\t70\r\n   63:\tgetstatic\t#25; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;\r\n   66:\tastore_3\r\n   67:\tgoto\t74\r\n   70:\tgetstatic\t#25; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;\r\n   73:\tastore_3\r\n   74:\treturn\r\n  LocalVariableTable:\r\n   Start  Length  Slot  Name   Signature\r\n```\r\n\r\nAfter:\r\n```\r\npublic C();\r\n  Code:\r\n   Stack=2, Locals=3, Args_size=1\r\n   0:\taload_0\r\n   1:\tinvokespecial\t#9; //Method java/lang/Object."<init>":()V\r\n   4:\taconst_null\r\n   5:\tastore_1\r\n   6:\tgetstatic\t#15; //Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;\r\n   9:\taload_1\r\n   10:\tinvokevirtual\t#19; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z\r\n   13:\tifeq\t23\r\n   16:\tgetstatic\t#25; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;\r\n   19:\tastore_2\r\n   20:\tgoto\t43\r\n   23:\tldc\t#27; //String\r\n   25:\taload_1\r\n   26:\tinvokevirtual\t#19; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z\r\n   29:\tifeq\t39\r\n   32:\tgetstatic\t#25; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;\r\n   35:\tastore_2\r\n   36:\tgoto\t43\r\n   39:\tgetstatic\t#25; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;\r\n   42:\tastore_2\r\n   43:\treturn\r\n```\r\n\r\nReview by @gkossakowski or @JamesIry, /cc @dragos'
2953,'','Fix typo in documentation.\n'
2952,'',"SI-7804 Build partest.task with pack\nCurrently, you can build the `partest.task` target explicitly;\r\notherwise, it's a dependency for the test suite. But if I'm\r\ntweaking some code, I'm not running test suite.\r\n\r\nThis commit makes pack freshen partest.task, which is not\r\nburdensome."
2951,'gkossakowski',"SI-7847 Static forwarders for case apply/unapply\nThese were excluded in f901816b3f because at the time they\r\nwere compiler fiction and translated to calls to the case\r\nclass constructor or accessors.\r\n\r\nBut since they are now bona-fide methods (albeit still occasionally\r\nbypassed as an optimization), we can expose them conveniently to our\r\nJava brethren.\r\n\r\nThe cut-and-pastiness of GenBCode starts to hinder maintenance.\r\nHere's a report of further duplication that we have to fix up\r\npost haste: https://gist.github.com/retronym/6334389\r\n\r\nReview by @gkossakowski"
2950,'gkossakowski','Damage control related to AnyRef specialization\n - Remove its use from `AbstractPartialFunction`\r\n - Reject `Name`-s with negative length or offset.\r\n - Harden and test `unspecializedName` / `splitSpecializedName`\r\n\r\nI stop short of removing this facility altogether. When we do, we should remember to touch the group `Specialized.All`.\r\n\r\nReview by @gkossakowski '
2949,'','Convenience methods from Try[T] => {Future, Promise}[T]\nMotivation: https://github.com/retronym/http-json-example/blob/master/src/main/scala/Test.scala\r\n\r\nReview by @viktorklang\r\n'
2948,'','SI-7845 Disable test for JSR 233\nFor Paul, it steals focus when it runs.\r\n\r\nFor me, it fails with some platform specific extra output:\r\n\r\n-ScriptEngineManager providers.next(): javax.script.ScriptEngineFactory: Provider apple.applescript.AppleScriptEngineFactory could not be instantiated: java.lang.UnsatisfiedLinkError: no AppleScriptEngine in java.library.path\r\n n: Object = 10\r\n 12345678910\r\n\r\nSo off to the holding pen for now.\r\n\r\nFixing the build, no review, just /cc @paulp and @som-snytt'
2947,'',"[SI-6502] fixed :cp command\nby recreating interpreter for :cp command instead of merely resetting\r\n\r\nCould not figure out how to the reset so that the compiler classpath is updated properly too.\r\nSimply recreating (as was done before) does the job too though and all tests pass ... except the one for this commit that is ...\r\n\r\n**NOT READY TO MERGE**\r\n\r\nThe test succeeds when I run `./test/partest test/files/run/cp-cmd/cp-cmd.scala` but fails with `./test/partest test/files/run/cp-cmd` which is what happens when the overall test suite is run, though. **Any ideas why that is?** The output is definitely correct (no difference between the run log and the check file).\r\n\r\n**PathSetting**\r\n\r\nPathSetting's `append` did not work correctly. Had to fix that to make the test pass as well.\r\nThe way it was implemented the `MutableSettings.SettingValue#postSetHook` was not triggered anyway which is unexpected behaviour IMO."
2946,'','SI-7844 Intellij setup.sh is not working for Ubuntu 12.04\nI looked into the problem. It is not related to the system.\r\n\r\nIt is because when there is no file can be removed, "rm" will return error, but the bash script is using "set -e".'
2945,'','SI-7843 Restore JSR 223 service entry\nThe 2.10 fix to remove the ScriptEngine service entry\r\nwas inadvertently forwarded to 2.11.\r\n\r\nThis commit reverts and adds a test.\r\n\r\nThis situation was entirely foreseen by retronym,\r\nproving beyond doubt that he is in fact a time traveler,\r\nas hinted by his name. He brings bugs forward into the\r\nfuture and returns into the past with fixes and other\r\nalien technology like scalaz.\r\n\r\nTest due to https://gist.github.com/takawitter/5479445\r\n\r\n'
2944,'',"Merge all the things\nJust in case someone wants to have some pity on me and merge SOMETHING, maybe you'd like to swing for the fences! This merges all three of my open pull requests and ties a little bow on it."
2943,'',"SI-7839 Final val breaks checkinit build\nScalac does not care to initialize the unused field it emits\r\nfor a `final val`.  Users of the accessor method, which supplies\r\nthe constant definition inline, will find that -Xcheckinit will\r\nthrow.\r\n\r\nTherefore, we don't use `final` for the `val phaseName`."
2942,'','Remove build.number.maven\nI can\'t find any justification for having this information\r\nin both build.number and build.number.maven.\r\n\r\nThey have drifted apart on the 2.10.x branch, although that\r\ndoesn\'t matter because build.number is correct, and loaded first,\r\nand Ant properties are write-once.\r\n\r\nI\'m assuming that the Ant tasks in src/build/pack.xml are only\r\ninvoked through the <antcall>-s in ./build.xml.\r\n\r\nHere\'s a test of that from the 2.10.x branch:\r\n\r\n\t% cat build.number\r\n\t#Tue Sep 11 19:21:09 CEST 2007\r\n\tversion.major=2\r\n\tversion.minor=10\r\n\tversion.patch=3\r\n\t# This is the -N part of a version.  if it\'s 0, it\'s dropped from maven versions.\r\n\tversion.bnum=0\r\n\r\n\t# Note: To build a release run ant with -Dbuild.release=true\r\n\t# To build an RC, run ant with -Dmaven.version.suffix=-RCN\r\n\r\n\t% cat build.number.maven\r\n\tversion.major=2\r\n\tversion.minor=10\r\n\tversion.patch=0\r\n\r\n\t% git diff\r\n\tdiff --git a/build.xml b/build.xml\r\n\tindex 3a83aa4..5cb952c 100644\r\n\t--- a/build.xml\r\n\t+++ b/build.xml\r\n\t@@ -62,6 +62,9 @@ TODO:\r\n\t   <target name="distpack" depends="dist.done, docs.done">\r\n\t     <ant antfile="${src.dir}/build/pack.xml" target="pack-all.done" inheritall="yes" inh\r\n\r\n\t+  <target name="distpack.maven.info">\r\n\t+    <ant antfile="${src.dir}/build/pack.xml" target="pack-maven.info" inheritall="yes" i\r\n\t+\r\n\t   <target name="distpack-maven" depends="dist.done, docs.done">\r\n\t     <ant antfile="${src.dir}/build/pack.xml" target="pack-maven.done" inheritall="yes" i\r\n\r\n\tdiff --git a/src/build/pack.xml b/src/build/pack.xml\r\n\tindex 20c4034..56863ff 100644\r\n\t--- a/src/build/pack.xml\r\n\t+++ b/src/build/pack.xml\r\n\t@@ -133,6 +133,10 @@ MAIN DISTRIBUTION PACKAGING\r\n\t     <mkdir dir="${dists.dir}/maven/${version.number}"/>\r\n\t   </target>\r\n\r\n\t+  <target name="pack-maven.info">\r\n\t+    <echo message="version.patch = ${version.patch}"/>\r\n\t+  </target>\r\n\t+\r\n\t   <target name="pack-maven.libs" depends="pack-maven.start">\r\n\t     <macrodef name="mvn-copy-lib">\r\n\t       <attribute name="mvn.artifact.name"/>\r\n\r\n\t% ant distpack.maven.info\r\n\tBuildfile: /Users/jason/code/scala2/build.xml\r\n\r\n\tdistpack.maven.info:\r\n\r\n\tpack-maven.info:\r\n\t     [echo] version.patch = 3\r\n\r\nNotice how the stale `version.patch=0` in build.number.maven is\r\nignored.\r\n\r\nReview by @lrytz @jsuereth @gkossakowski'
2941,'',"Cautiously give PC more control over docComments table\nThis is needed after https://github.com/scala/scala/pull/2208 changed the role of `DocComments` 's `docComments` table, by removing `DocDef`s from the AST after even the `ScaladocAnalyzer`'s runs, making the PC utterly dependent on said table.\r\n\r\nThis gives the necessary trait to relax its cleaning policy in new `Typer` runs.\r\n\r\nReview by @dragos, @retronym."
2940,'','Quasiquotes: add syntactic extractor for assignment/update trees\nEven though updates and assignments look the same syntactically they\r\nare represented differently on the AST level. We need to abstract over\r\nthat.\r\n\r\nreview by @retronym '
2939,'gkossakowski',"Deprecate -Yinfer-debug\nSince 4d6be05c2 it has been ignored, being subsumed by -Ytyper-debug.\r\n\r\nThis commit makes it an deprecated alias for -Ytyper-debug.\r\n\r\nWe'd be within our rights to remove it outright, but we've got\r\na nice deprecation mechanism for settings, so let's use that for\r\na release.\r\n\r\nReview by @gkossakowski"
2938,'','SI-7725 - Vector concatenation is unreasonably slow\nRewrote ++ to use append or prepend when adding small collections to the end\r\nor beginning of vectors.  This solves the extra-O(n) problem for addition of\r\nsingle elements reported in SI_7725.'
2937,'',"SI-7834 Type equivalence of C.this and C.super.\nFoo.this.x and Foo.super.x were roughly unrelated in the eyes\r\nof isSubType. I implemented conformance as described in the comment:\r\n```\r\n  This is looking for situations such as B.this.x.type <:< B.super.x.type.\r\n  If it's a ThisType on the lhs and a SuperType on the right, and they originate\r\n  in the same class, and the 'x' in the ThisType has in its override chain\r\n  the 'x' in the SuperType, then the types conform.\r\n```\r\nI think this is overly conservative but it's way ahead of\r\nwhere it was."
2936,'','Consolidate Position classes.\nHaving now been burned several times thinking I had a chunk\r\nof positions under my belt only to find my pants had vanished\r\nwhen I forged ahead, I am carving out some intermediate stages\r\nfor positions.\r\n\r\nThis one only reshuffles the internals. It consolidates almost\r\nall the behavior into one class, leaving little stub subclasses\r\nto mimic the classes which came before - since nothing is final\r\nor has access anything less than public, there\'s no way to touch\r\nany constructor without breakage, so they all have to stay.\r\n\r\nI removed redundant/incorrect documentation and rewrote the\r\nrest of it, although I don\'t expect the lifespan of any of it\r\nto be enormous.\r\n\r\nThe overall thinking behind the existing design was a bit elusive.\r\nConcrete exception-throwing implementations were provided in the base\r\nclass for every method, with less exceptional overrides defined\r\nin selected subclasses. If you\'re going to define every method\r\nin the base class, concretely no less, then there is little\r\nadvantage and lots of disadvantage to spreading out over a bunch\r\nof subclasses.\r\n\r\nNote that now Position contains no state and has no constructor,\r\ncharacteristics which behoove its possibly distant ambition\r\ntoward AnyValhood. Though that does ignore the "api" class it\r\ninherits which brims with implementation detail, api.Position.\r\nIt is a burden which will likely prove heavy.'
2935,'','SI-6701, SI-7304, SI-6489, variable arity definitions refactoring\nreview by @retronym'
2934,'',"Override finalResultType in SingleType.\nOtherwise we get unintended widening if a method's result is\r\na singleton type."
2933,'',"Fix encoding problems in output of scaladoc -help\nFrom the output of `scaladoc -help`:\r\n\r\n```\r\n  -doc-source-url <url>                       A URL pattern used to\r\n  build links to template sources; use variables, for example:\r\n  ?{TPL_NAME} ('Seq'), ?{TPL_OWNER} ('scala.collection'),\r\n  ?{FILE_PATH} ('scala/collection/Seq')\r\n```\r\n\r\nThe ? should be €. Fix that in the source, using the correct encoding (which is already UTF-8).\r\n\r\nThe encoding problem was introduced in 2011 by commit 2621ee63285808785159a3c24c9e5a5a723b8b9c, and seems to not have been reported till now.\r\n\r\n----\r\nTo make the above work, the output should also be encoded correctly.\r\nOn my system, this requires the *default JVM encoding* to be UTF-8 when the script is run, that is, passing `-Dfile.encoding=UTF-8`.\r\n\r\nSo, after this commit, the euro sign is garbled in the output of `./qbin/scaladoc -help` and correctly displayed in the output of `./qbin/scaladoc -Dfile.encoding=UTF-8 -help`.\r\n\r\nThat change might be necessary:\r\n1. in general, or\r\n2. only on systems with UTF-8 terminals and non-UTF-8 default encoding.\r\n\r\nFor option 1, I attach a commit making that option the default, and with bigger potential for bugs, so probably this should not go in 2.10.3.\r\nFor option 2, the first commit is enough, and it's trivial enough for 2.10.3.\r\n\r\nWhat do you think?"
2932,'',"Revert a tiny recent refactoring in SelectiveCPSTransform\nThe refactoring in 7e6c723df means that we can't build the CPS\r\nplugin if we skip locker in development mode.\r\n\r\nThis commit backs out the refactoring and leaves a TODO comment\r\nto perform it at a later date.\r\n\r\nReview by @gkossakowski"
2931,'',"Reducing variation of tree creation methods.\nTreeDSL has no future - it was always a temporary measure\r\nwaiting for something like quasiquotes to come along. In this\r\ncommit I cull as much of it as I can, especially the delicate\r\nmatter of creating new DefDefs and ValDefs, which I completely\r\nturn over to the old style creators.\r\n\r\nI unified all the symbol-based DefDef and ValDef creators under\r\na single method, since it was yet another place where ctrl-C and\r\nctrl-V were being punched with glee. Added copyTypeDef creation\r\nmethod to accompany the others.\r\n\r\nEliminated as many redundant positioning calls as I could find.\r\nIf you are creating a DefTree tree based on a symbol, it will\r\nalways have an atPos(sym.pos) { ... } wrapped around it. You\r\ndon't need another one.\r\n\r\nAll of this is motivated by positions work: positions are\r\nassigned in so many places and in such an ad hoc fashion that\r\nit is impossible to bring consistency to that without first\r\nbringing some consistency to tree creation."
2930,'','Topic/patmat inference prep\nThe first three commits of #2894 which are ready to merge.'
2929,'','SI-7356 - Source.mkString performs painfully slow (...)\n1. Wrote a custom mkString for BufferedSource.\r\n\r\n2. Moved the logic for rescuing the iterator-buffered char out of\r\nBufferedLineIterator and into a private method in BufferedSource.\r\n\r\nSpeed test based on the one in the issue tracker (but written correctly)\r\nindicates that performance is equal or better to getLines.  This resolves\r\nSI-7356 in a minimal fashion.'
2928,'gkossakowski',"merge 2.10.x to master\n... and a bonus commit: improve to the way partest-extras is built.\r\n\r\nOnly one conflict, which was in `ExtensionMethods` and was trivial to resolve.\r\n\r\n```\r\n% git log --graph --oneline `git merge-base master origin/2.10.x`...origin/2.10.x\r\n*   1015d12 Merge pull request #2916 from retronym/ticket/7818\r\n|\\\r\n| * cb028ba SI-7818 Cast our way out of extended existential angst\r\n*   7ecffb0 Merge pull request #2922 from huitseeker/issue/7767\r\n|\\\r\n| *   aa1bff8 Merge pull request #1 from retronym/ticket/7767-test\r\n| |\\\r\n| | * 2391887 SI-7767 Test case for Scaladoc on early initializers\r\n| |/\r\n| * 48283ca SI-7767 avoid rejecting Scaladoc comments in early initializers\r\n* |   6c431e6 Merge pull request #2866 from retronym/ticket/7269\r\n|\\ \\\r\n| * | fe9a3e9 SI-7269 Rework MapLike#retains to account for desugaring change\r\n|  /\r\n* |   d1cff20 Merge pull request #2911 from retronym/ticket/7814\r\n|\\ \\\r\n| |/\r\n|/|\r\n| * a19babc SI-7814 Updates the instrumented version of ScalaRuntime.\r\n| * fb43ec8 SI-7814 Avoid init cycle between Predef, `package`, ScalaRuntime\r\n* 7fa0e60 Merge pull request #2895 from som-snytt/issue/7652-tools-jar-backport\r\n* 7804cec [nomaster] SI-7652 REPL extended quest for tools\r\n* 8b10daf [nomaster] SI-7652 Bad tools fails loudly\r\n\r\n% /code/scala git merge -s ours 7fa0e60 --edit\r\nMerge made by the 'ours' strategy.\r\n\r\n% git merge origin/2.10.x\r\n```\r\n\r\nReview by @gkossakowski"
2927,'','SI-7708 - Improve Bitset foreach performance\n1. Switched inner for loop for a while loop to enable early exit when bitset\r\nis sparse.\r\n\r\n2. Switched outer for loop for while loop for performance.\r\n\r\n3. Changed WordLength and friends to final for performance.\r\n\r\nNew version runs in 60% of time of old on dense bitsets, faster if highly\r\nsparse.  No tests committed (requires performance testing framework).'
2926,'',"Noise reduction + minor enhance in TreeCheckers.\nMisc irrelevant work, which I can only offer as-is. It lowers\r\nthe noise in -Ycheck:* output and performs some common sense\r\nchillaxes like not screaming ERROR IN INTERNAL CHECKING! WE'RE\r\nALL GOING TO DIE! when a tree doesn't hit all nine points at\r\nthe Jiffy Tree.\r\n\r\nYou can see some reasonably well reduced symbol flailing if you run the included pending tests:\r\n```test/partest --show-diff test/pending/pos/treecheckers```\r\n\r\n```text\r\nOut of scope symbol reference {\r\n      tree  TypeTree             Factory[Traversable]\r\n  position  OffsetPosition       test/pending/pos/treecheckers/c5.scala:3\r\n  with sym  ClassSymbol          Factory: Factory[CC]\r\n   and tpe  ClassArgsTypeRef     Factory[Traversable]\r\n   encl(1)  ModuleSymbol         object Test5\r\n    ref to  AbstractTypeSymbol   X (<deferred> <param>)\r\n}\r\n```"
2925,'paulp',"Avoid needless Type stringification when logging is disabled.\nSince 4d6be05c28, we've been a tad wasteful in implicit searches.\r\n\r\nThis adds a by-name parameter to the local logging method to\r\navoid that.\r\n\r\nReview by @paulp"
2924,'',"Update scaladoc's .classpath to new name of partest project\n(see github.com/scala/scala-partest ) review by @dragos"
2923,'gkossakowski',"SI-7825 Consider DEFAULTMETHOD when refchecking concreteness\nA class should not be required to implement a Java default method.\r\n\r\nThis commit uses `isDeferredNotDefault` in place of `isDeferred`\r\nwhen finding unimplemented methods.\r\n\r\nThe test itself does not depend on Java 8 as we use scalac's\r\nJava source parser to set things up.\r\n\r\nReview by @gkossakowski"
2922,'','SI-7767 avoid rejecting Scaladoc comments in early initializers\nreview by @retronym'
2921,'','Fix java7 branch\nI noticed that one of our Java7-specific jobs started to fail recently with merge conflict: https://scala-webapps.epfl.ch/jenkins/job/scala-nightly-auxjvm/jdk=jdk7,label=auxjvm/1864/console\r\n\r\nMerging latest master into java7 branch should fix that.\r\n\r\nReview by @retronym (I wanted to say @adriaanm but he is busy traveling and I want this to go through fast)'
2920,'',"Add Testing section to CONTRIBUTING.md file\nI realized that we don't have much information in `CONTRIBUTING.md` file about testing so I added some basic stuff.\r\n\r\nReview by @retronym.\r\n"
2919,'adriaanm',"SI-7815 Dealias before deeming method type as dependent\nTo enable eta-expansion of method types seen from a prefix that\r\nrenders the result type as independent from the parameter symbols.\r\n\r\nThe enclosed test shows that we dealias types before checking\r\ndependence, and that we do this deeply (e.g. type arguments are\r\nalso dealised.)\r\n\r\nAn existing test, neg/error_dependentMethodTpeConversionToFunction,\r\nconfirms that bona-fide dependent methods are still prohibited from\r\neta expansion.\r\n\r\nReview by @adriaanm. I think this is sufficiently localised and easy enough for us to reason about to consider inclusion in 2.10.4, but if you prefer I'll retarget at master."
2918,'adriaanm',"SI-7815 Dealias before deeming method type as dependent\nTo enable eta-expansion of method types seen from a prefix that\r\nrenders the result type as independent from the parameter symbols.\r\n\r\nThe enclosed test shows that we dealias types before checking\r\ndependence, and that we do this deeply (e.g. type arguments are\r\nalso dealised.)\r\n\r\nAn existing test, neg/error_dependentMethodTpeConversionToFunction,\r\nconfirms that bona-fide dependent methods are still prohibited from\r\neta expansion.\r\n\r\nReview by @adriaanm. I think this is sufficiently localised and easy enough for us to reason about to consider inclusion in 2.10.4, but if you prefer I'll retarget at master."
2917,'','SI-7805 REPL -i startup\nTested with a ReplTest that loads an include script.\r\n\r\nReplTests can choose to be `Welcoming` and keep a\r\nnormalized welcome message in their check transcript.\r\n\r\nReview by @retronym \r\n'
2916,'adriaanm','SI-7818 Cast our way out of extended existential angst\n`substituteSymbols` is not sophisticated enough to\r\noperate on `TypeSkolem`-s which are based on one of the\r\n"from" symbols.\r\n\r\nThe pertinant usage of `substituteSymbols` for this bug in\r\nin `Extender`. Recapping on that transform:\r\n\r\n    // orig\r\n    class C[T](...) extends AnyVal { def foo[U] = <rhs> }\r\n\r\n    // transform\r\n    class C[T] extends AnyVal { ... }\r\n    object C  { def foo$extension[T\', U\'] = <rhs\'> }\r\n\r\nWhere `<rhs\'>` has been subtituted with, among other things,\r\n`[T, U] ~> [T\', U\']`.\r\n\r\nIn this case our expected type contains a new type parameter\r\n(of the extension method), whereas the type of the RHS contains\r\nan existential skolem still pinned to the corresponding class type\r\nparameter.\r\n\r\n    tree.tpe         = Observable1#7037[_$1#12344]\r\n    <_$1#12344>.info =  <: T#7040\r\n    pt               = Observable1#7037[T#15644]\r\n\r\nThe limitation of substution is lamented in the comments\r\nof `adaptMismatchedSkolems`, which faces the harder version of\r\nthe issue where the skolems are in the expected type.\r\n\r\nBut, we\'re in the "easy" case with the skolems in the tree\'s type;\r\nwe can cast our way out of the problem.\r\n\r\nReview by @adriaanm, /cc @odersky'
2915,'',"SI-7817 Fix regression in structural types \nCalls to structural types are converted to reflective calls\r\nin the `cleanup` phase, which, along with `mixin`, does its work\r\nafter `flatten`.\r\n\r\n`Symbol#owner` behaves in a phase dependent manner; after flatten\r\nthe owner of lifted class is given as the enclosing package.\r\n\r\nExcept when they're not.\r\n\r\n`ModuleSymbol`s representing an object nested inside a class\r\nare viewed dually as modules *and* methods (see the comments on\r\n`isModuleNotMethod` for some background). When it comes time to\r\nflatten, we're presented with a quandary: the method must clearly\r\nstay owned by the enclosing class, but surely the lifted module\r\nshould be owned by the enclosing package, to have the same owner\r\nas its associated module class.\r\n\r\nThe `method` nature of this symbol seems to win:\r\n\r\n    override def owner = {\r\n      if (Statistics.hotEnabled) Statistics.incCounter(ownerCount)\r\n      if (!isMethod && needsFlatClasses) rawowner.owner\r\n      else rawowner\r\n\r\nThis wrinkle leads to a wrong turn in `TreeGen#mkAttributedRef`,\r\nwhich incorrectly rewrites `REF(O)` to `p1.`package`.O`. It seems\r\nthis problem has gone unnoticed because the tree emitted referred\r\nto a static symbol (the reflection cache for structural types),\r\nand the backend simply elided the qualifier `p1.package`.\r\n\r\nA recent change to the backend makes it more conservative about\r\ndropping qualifiers on the floor, and it started emitting a reference\r\nto a package object that doesn't exist.\r\n\r\nThis commit despairingly checks `isDefinedInPackage` of both the\r\nmodule *and* the module class. The test cases from the previous\r\ncommit illustrated the status quo, and this commit updates the\r\njoint compilation test with the bug fix. A new test is to show that\r\nthe symptom (structural type crash) is now fixed.\r\n\r\nReview by @paulp. I'd like to iterate to a better spot for the solution, but I feel we're a bit constrained by the schizophrenic symbol representation.\r\n\r\n/cc @gkossakowski we probably should get this into M5, I'm sure ScalaTest won't be the only codebase that feels it."
2914,'','Merge 2.10.x into master\nLast merge of 2.10.x branch before 2.11.0-M5 release.\r\n\r\nReview by @retronym who contributed majority of commits being merged here.'
2913,'','SI-7767 avoid rejecting Scaladoc in early initializers\nreview by @retronym'
2912,'adriaanm','SI-7643 Enable newPatternMatching in interactive.\nWithout it, the enclosed test fails with:\r\n\r\n    ArrayBuffer(Problem(RangePosition(partial-fun/src/PartialFun.scala, 62, 62, 77),type mismatch;\r\n     found   : Int => Int\r\n     required: PartialFunction[Int,Int],2))\r\n\r\nAnd with that, we can remove this option altogether.\r\n\r\nReview by @adriaanm'
2911,'paulp',"SI-7814 Avoid init cycle between Predef, `package`, ScalaRuntime\nNot every application will force these in a single thread; we\r\nhave to do our best to avoid cycles between them.\r\n\r\nThe enclosed test was failing every time before the change.\r\n\r\nThis commit breaks the cycle by avoiding computing `tupleNames`\r\nin the constructor of `ScalaRuntime`. The new version has the\r\nadded benefit of including specialized tuple subclasses, which\r\nis verified with a unit test for `isTuple`.\r\n\r\nAre there more of these lurking? It seems likely. I'm more than\r\na little concerned about the way the `ControlThrowable` fires up\r\n`scala.SystemProperties` to check whether or not to suppress\r\nstack traces; there is already an ugly hack in place:\r\n\r\n    object NoStackTrace {\r\n      final def noSuppression = _noSuppression\r\n\r\n      // two-stage init to make checkinit happy,\r\n      // since sys.SystemProperties.noTraceSupression.value\r\n      // calls back into NoStackTrace.noSuppression\r\n      final private var _noSuppression = false\r\n      _noSuppression = sys.SystemProperties.noTraceSupression.value\r\n    }\r\n\r\nReview by @paulp"
2910,'retronym',"Various bugfixes and improvements for the quasiquotes\nFixes the following bugs:\r\n\r\n* [SI-7196 type quasiquotes don't [fully] support type refinement inclusion](https://issues.scala-lang.org/browse/SI-7196)\r\n* [SI-7803 matching function literals with quasiquotes doesn't work](https://issues.scala-lang.org/browse/SI-7803)\r\n* [SI-7723 [..$tparams] in an anonymous class pattern doesn't match an anonymous class](https://issues.scala-lang.org/browse/SI-7723)\r\n\r\nImproves handling of the following language constructs:\r\n\r\n* new expressions \r\n* special handling of early definitions for classes, traits and objects\r\n* automatic setting of the flags appropriate for function and class parameters\r\n* better handling of class/case class/trait parents\r\n* valdefs and vardefs\r\n* type refinement\r\n* better support for handling of annotations \r\n* function types and literals\r\n* changes semantics of blocks, applied and typeapplied splicing and extraction\r\n\r\nAnd lastly:\r\n* makes the annoying postfixOps warning go away\r\n\r\nReview by @retronym \r\n\r\n[Some discussion on the previous version of the pr.](https://github.com/scala/scala/pull/2898)"
2909,'','SI-7629 Deprecate view bounds\nThis introduces a warning(/error with -Xfuture) with a general\r\nmigration advice. The IDE can use the warning to offer a quick fix\r\nwith the specific refactoring necessary.'
2908,'','(3 of 2) of the rest of the new bytecode emitter (yes, this PR is Part 3 of 2)\nSupersedes https://github.com/scala/scala/pull/2889 and incorporates feedback from there.\r\n\r\nThis PR completes the new bytecode emitter, including building and writing class files in parallel, by building upon #2863\r\n\r\nBefore writing class files, a modicum of code tightening transformations are necessary: unreachable code elimination, which in turn calls for cleanup of labels and exception entries made redundant by unreachable code elimination.\r\n\r\nIn this PR, each such transformation is introduced in a commit with tests for the transformation in isolation. Another commit also in this PR tests each such transformation in connection with the bytecode emitter.'
2907,'','Eliminate TypeTrees with null original.\nThis is a retry of #2801 after figuring out the range position\r\nerror. Should there be anyone out there who compiles with -Xdev,\r\nknow that this commit eliminates the 1406 errors one presently\r\nincurs compiling src/library.\r\n\r\nA val declared in source code receives only one tree from the\r\nparser, but two are needed - one for the field and one for the\r\ngetter. I discovered long ago that if the val had an existential\r\ntype, this was creating issues with incompatible existentials\r\nbetween the field and the getter. However the remedy for that\r\ndid not take into account the whole of the wide range of super\r\nsubtle issues which accompany tree duplication.\r\n\r\nIn particular, the duplicated tree must be given not only a\r\nfresh TypeTree(), but that TypeTree cannot share the same\r\noriginal without running afoul of range position invariants.\r\nThat\'s because typedTypeTree resurrects the original tree with\r\nwhatever position it has - so the "original" needs to be a\r\nduplicate of the original with a focused position.\r\n\r\nShould the call to TypeTree.duplicate also duplicate the original?\r\nI think so, but I bequeath this question to others.\r\n\r\nThis commit also eliminated some duplicate error messages, because\r\nduplicate suppression depends on the errors having the same position.\r\n\r\nSee c478eb770d, 7a6fa80937 for previous related work.'
2906,'','Merge/2.10.x to 2.10.3\n`git merge origin/2.10.x`\r\n\r\nReview by @JamesIry, /cc @gkossakowski, @adriaanm'
2905,'',"SI-7801 Fix a nightmarish bug in Symbols#adaptInfos\nThe compiler-in-residence has always been a sketchy affair;\r\nFSC and REPL offers a bounty of bugs that exploit the menagerie\r\nof time-travel mechanisms in play for symbols' metadata (type, flags,\r\nname and owner.) but are often cleverly masked by optimizations in\r\nthe compiler based on reference equality.\r\n\r\nThe latest: an innocuous change in Erasure:\r\n\r\n  https://github.com/scala/scala/commit/d8b96bb8#commitcomment-3995163\r\n\r\nmeans that some `ErasureMap`-s over `MethodType`-s are now true\r\nidentities (as `UnitTpe` is always the same object, whereas\r\n`erasedTypeRef(UnitClass)` returns an different `TypeRef` each\r\ntime.)\r\n\r\nThis, in turn, enables `TypeMap#mapOver` to reuse\r\nthe existing enclosing type, and so on. On such subtleties hinge\r\nfurther optimizations, such as whether or not a given phase's\r\n`InfoTransformer` needs to add an entry in a symbols type history.\r\n\r\nWhen the REPL (or FSC / Presentation Compiler) creates a new\r\n`Run`, `Symbol#rawInfo` tries to adapt the entries in the type\r\nhistory for the new run. For packages, this was taken to be a\r\nno-op; each entry is marked as being valid in the new run and\r\nno further action is taken. This logic lurks in `adaptInfos`.\r\n\r\nBut, when the namer enters a new symbol in a package, it\r\n*mutates* the Scope of that package classes info `enteringTyper`.\r\nSo the later entries in the type history *must* be invalidated\r\nand recomputed.\r\n\r\nWe have two choices for a fix:\r\n\r\n 1) modify `Namers#enterInScope` to blow away the subsequent\r\n    type history for the owning symbol after inserting the\r\n    new member. Something like `owner.setInfo(owner.info)` would\r\n    have the desired effect.\r\n 2) Change `adaptInfos` to be more conservative when it comes\r\n    to package classes, and retain only the oldest entry in the\r\n    type history.\r\n\r\nThis commit goes for option 2.\r\n\r\nReview by @odersky"
2904,'','SI-7810 Reflect private constructor\n`JavaMirror.constructorToJava` uses `getDeclaredConstructor` now\r\ninstead of `getConstructor`. This enables reflecting a private ctor.'
2903,'','SI-4015 Mixin and specialization work well\nThe bug was fixed along with SI-7638 in 504b5f3.\r\n\r\nReview by @axel22.'
2902,'','[2.10.x] assorted fixes for vampire macros\nAs eloquently elaborated and cleverly named by Travis Brown, macros\r\ndefined in structural types are useful:\r\nhttp://meta.plasm.us/posts/2013/07/12/vampire-methods-for-structural-types/.\r\n\r\nHowever, since such macros are on the intersection of a number of language\r\nfeatures, as usual, there are bugs. This pull requests fixes a couple of them.'
2901,'','Backport #2605 to 2.10.x: SI-7149 Use a WeakHashSet for type uniqueness\nThis is backport of #2605.\r\n\r\nThe issue of uniques accumulating types during the whole compilation run turned out to be especially bad for ScalaTest tests. Scala 2.10.2 requires at least 6GB to compile Scalatest tests. With this patch, 800MB is enough.\r\n\r\nSuch a dramatic difference in memory consumption and low-risk of this patch makes it appealing to backport it to 2.10.x.\r\n\r\nReview by @JamesIry.\r\n'
2900,'','Correcting scaladoc for all classes defining withDefaultValue method.\nThe description of the single parameter seems to be a copy and paste mistake from withDefault method.'
2899,'',"SI-4760 Parser handles block-ending import\nDon't molest the RBRACE."
2898,'','Quasiquotes WIP\nThis is WIP pull request to test that history-rewritten commits are building fine before the actual pull request.'
2897,'paulp','[backport] Commit .gitignore directly\nRather than relying on the cloner to copy the\r\nprovided gitignore.SAMPLE files.\r\n\r\nThis finishes the job started in c48509598, mostly\r\nby reverting that commit and moving the two existing\r\nSAMPLE files to the final destinations.\r\n\r\nUse `.git/info/exclude` to augment the list of patterns\r\nwith entries specific to your workflow.\r\n(cherry picked from commit b51cb581270da7021b2ea122dc059847101d56a7)\r\n\r\n==============================================\r\nParing back the scope of our shared .gitignore\r\n\r\nImportantly, limit the exclusion of build.properties\r\nto the file in the root directory, paving the way for\r\nthe return of an SBT build.\r\n\r\n  - Unignores .bak, .jar, and ~\r\n  - limit ignorance of qbin to the root directory\r\n\r\n.log files, generated by partest, are still ignored.\r\n\r\nTo see ignored files in your workspace, try:\r\n\r\n    git ls-files --others --ignored --exclude-standard -- test | grep log\r\n    git status --ignored -- test\r\n(cherry picked from commit f0bbd2ca32acb40be37dc382c1f95081deca3f22)'
2896,'',"SI-7652 REPL tools on 2.9.x\nBackports the tools quest to 2.9.\r\n\r\nNot sure if it's desirable to muck with the non-critical ancient past, but just offering since it was easy to do.\r\n"
2895,'',"SI-7652 REPL tools jar backport\nREPL will try harder and fail louder if tools.jar isn't where it's supposed to be.\r\n"
2894,'adriaanm','Superior type inference\nThere are some long commit messages - I refer you to those. Review by @retronym, @adriaanm.'
2893,'','update typesafe.artifactory-online.com to private-repo\nbackport of #2880'
2892,'JamesIry',"SI-7779 Account for class name compactification in reflection\nWe have to assume that the classes we are reflecting on were\r\ncompiled with the default value for -Xmax-classfile-name (255).\r\n\r\nWith this assumption, we can apply the same name compactification\r\nas done in the regular compiler.\r\n\r\nThe REPL is particularly prone to generating long class names\r\nwith the '$iw' prefixes, so this is an important fix for runtime\r\nreflection.\r\n\r\nAlso adds support for getting the runtime class of `O.type` if\r\n`O` is a module.\r\n\r\n(cherry picked from commit 5dbc37dfbe0e9a039da6744e45012abc3034cdf5)\r\n[backport from 2.10.x to 2.10.3]\r\n\r\nReview by @JamesIry"
2891,'','SI-7790 No ScriptEngine in 2.10 build\nThe service entry was inadvertendly added in\r\n`e3b5e0ba40447970d621cfeed5cc1770df69884f`,\r\n"Sanity for build.xml: exscriptus&positus delendus est,"\r\nwhich is ant latin for: "Reduced copy/pasting to the best\r\nof my antabilities."\r\n\r\nWith that degree of hubris, it was inevitable that the\r\ncommit introduced a copy/paste bug.  What is the Attic\r\nGreek for copy/paste?\r\n\r\nI\'m pretty sure that in fifth century Athens they would\r\njust pound one inscription to rubble using a bigger\r\ninscription. They had slaves for that kind of work.\r\nYou never hear about Socrates tweaking the build script.\r\nThat\'s the reason he never wrote anything down.\r\n\r\nReview by @adriaanm '
2890,'paulp','Paring back the scope of our shared .gitignore\nImportantly, limit the exclusion of build.properties\r\nto the file in the root directory, paving the way for\r\nthe return of an SBT build.\r\n\r\n  - Unignores .bak, .jar, and ~\r\n  - limit ignorance of qbin to the root directory\r\n\r\n.log files, generated by partest, are still ignored.\r\n\r\nTo see ignored files in your workspace, try:\r\n\r\n    git ls-files --others --ignored --exclude-standard -- test | grep log\r\n    git status --ignored -- test\r\n\r\nReview by @paulp'
2889,'gkossakowski',"(2 of 2) of the rest of the new bytecode emitter\nThis PR completes the new bytecode emitter, including building and writing class files in parallel, by building upon https://github.com/scala/scala/pull/2863\r\n\r\nBefore writing class files, a modicum of code tightening transformations are necessary: unreachable code elimination, which in turn calls for cleanup of labels and exception entries made redundant by unreachable code elimination.\r\n\r\nIn this PR, each such transformation is introduced in a commit with tests for the transformation in isolation. Another commit also in this PR tests each such transformation in connection with the bytecode emitter.\r\n\r\nI'll suggest a reviewer once tests pass, comments and reviews welcome."
2888,'','typedAnnotated no longer emits nulls\nAdds a null-check in original synthesis for the result of typedAnnotated.\r\nPreviously it was possible for the aforementioned result to look like\r\nTypeTree(<tpe>) setOriginal Annotated(..., null). Not anymore.'
2887,'',"Delay delambadficaion and put the lambda's body into the containing class\nThis is an experimental work in progress PR to bring us closer to using method handles. It will be entirely protected by a flag until it is as solid as the current mechanism.\r\n\r\nWith the flag enabled the compiler will defer final translation from lambda to class until very late in the pipeline, and it will put the body of the lambda in a method in the original class.\r\n\r\nThis PR leaves two key things undone\r\n\r\n1) Specialization still needs to be handled.\r\n2) Logic that partially prevents the use of 'this' in a super constructor call is bypassed. That logic needs to be redone in order to have fewer holes and be less brittle.\r\n"
2886,'',"Merge 2.10.x into master\nAfter the merge, the test/run/t7733 started to fail on Jenkins.\r\nI tried to reproduce it locally but I couldn't so I think it's\r\nsystem dependent failure. Per @retronym's suggestion I moved it to pending\r\nto not block the whole merge.\r\n\r\nConflicts:\r\n\tbincompat-backward.whitelist.conf\r\n\tbincompat-forward.whitelist.conf\r\n\tsrc/compiler/scala/tools/nsc/symtab/classfile/ClassfileParser.scala\r\n\tsrc/compiler/scala/tools/nsc/typechecker/ContextErrors.scala\r\n\tsrc/compiler/scala/tools/nsc/typechecker/Macros.scala\r\n\tsrc/compiler/scala/tools/nsc/typechecker/Namers.scala\r\n\tsrc/compiler/scala/tools/nsc/typechecker/NamesDefaults.scala\r\n\tsrc/compiler/scala/tools/nsc/typechecker/RefChecks.scala\r\n\tsrc/compiler/scala/tools/nsc/util/MsilClassPath.scala\r\n\tsrc/compiler/scala/tools/reflect/ToolBoxFactory.scala\r\n\tsrc/reflect/scala/reflect/internal/ClassfileConstants.scala\r\n\tsrc/reflect/scala/reflect/internal/Importers.scala\r\n\tsrc/reflect/scala/reflect/internal/Trees.scala\r\n\tsrc/reflect/scala/reflect/runtime/JavaMirrors.scala\r\n\ttest/files/run/macro-duplicate/Impls_Macros_1.scala\r\n\ttest/files/run/t6392b.check\r\n\ttest/files/run/t7331c.check\r\n\r\nReview by @retronym"
2885,'retronym','SI-7791 Line number table reflects underlying file\nSince positions ultimately know their ultimate\r\npositions in their ultimate source, use that line\r\nnumber, ultimately, when emitting line number\r\ntable entries.\r\n\r\nIt is possible, but possibly not useful, to emit\r\nboth the actual (ultimate) line number and the\r\nnominal one.\r\n\r\nThe `int`-valued line number of the `StackTraceElement`\r\nis "derived" from the attribute.\r\n\r\nnote: working on clever way to test it.  Since REPL and scripter do the same thing, i.e., wrap some code, it ought to be easy to test them the same way.  The wrapping mechanism is quite different, but maybe this is an opportunity to reconsider that, under the aegis of replating.\r\n\r\nI did see extempore\'s screed from 11/21/11, which you kind of wish had been backdated to 11/11/11:\r\n```\r\nThis is a fresh start for script tests.\r\n```\r\n'
2884,'JamesIry',"SI-1909 SI-3832 SI-7007 SI-7223 Improved handling of larval objects\nReclaims some ground lost in the first swing at SI-6666, and solves a few more issues to boot.\r\n\r\nI'm hopeful that I'll be able to knock off the residuals of SI-6666 too, so I might push one or two more commits.\r\n\r\nReview by @JamesIry"
2883,'',"A better diagnostic error for corrupt or missing JARs.\nAugment the IOException with the name of the file we're trying\r\nto open.\r\n\r\nMotivated by a troubleshooting session with partial downloads\r\nof JARs from Maven central breaking the Scala build on Martin's\r\nlaptop.\r\n\r\nThe test case only tests our part of the error message, so as not\r\nto be platform / JDK specific. Otherwise, it would check that the\r\ncorrect cause exception was present and accounted for.\r\n\r\nReview by @gkossakowski"
2882,'','Change Scala license to unmodified 3-clause BSD.\nNo longer using the slightly reworded 3-clause BSD license.\r\nThis does not change the meaning of the license,\r\njust aligns it with the standard wording.\r\n'
2881,'','Change Scala license to unmodified 3-clause BSD.\nNo longer using the slightly reworded 3-clause BSD license.\r\nThis does not change the meaning of the license,\r\njust aligns it with the standard wording.\r\n'
2880,'','update typesafe.artifactory-online.com to private-repo.typesafe.com\n'
2879,'adriaanm',"SI-7785 Preserve TypeVar suspension through TypeMaps\nDuring `findMember`, TypeVars in `this` are placed into suspended\r\nanimation. This is to avoid running into recursive types when\r\nmatching members to those in base classes.\r\n\r\nHowever, the mechanism used to do this is superficial, and doesn't\r\nwork when TypeVars are copied by TypeMaps. This seems to crop up\r\nwhen using `AppliedTypeVar` with higher-kinded type vars.\r\n\r\nIn the enclosed test case, the cyclic type led to a SOE in\r\nCommonOwnerMap.\r\n\r\nThis commit allows a TypeVar to delegate its `suspended` attribute\r\nto the TypeVar from which it was copied. This is done in\r\n`TypeVar#applyArgs`, which is called by:\r\n\r\n    // TypeMap#mapOver\r\n    case tv@TypeVar(_, constr) =>\r\n      if (constr.instValid) this(constr.inst)\r\n      else tv.applyArgs(mapOverArgs(tv.typeArgs, tv.params))\r\n\r\nWe should review the other places this is called to make sure\r\nthat it make sense to link in this way:\r\n\r\n    Types#appliedType\r\n    TypeVar#normalize\r\n\r\nReview by @adriaanm.\r\n\r\nEven though this was a regression in 2.10.1, I'm submitting this to 2.11 as the change isn't without risk, and the only reason this worked in 2.10.0 was because of another bug (`TypeVar` had a structural equals.)"
2878,'retronym',"Merge 2.10.2 into 2.10.3\nMerge branch '2.10.2' into 2.10.3\r\n\r\nConflicts:\r\n\tsrc/compiler/scala/tools/nsc/typechecker/NamesDefaults.scala\r\n\r\nThis is the merge that was missed before cutting 2.10.3-RC1\r\n\r\nreview by @retronym "
2877,'retronym','SI-7781 REPL stack trunc shows cause\n    \r\n   \r\nThe handy stack trace truncation in REPL doesn\'t show cause like a regular trace.\r\n    \r\nThis commit fixes that and also adds the usual indicator for truncation, viz, "... 33 more".\r\n    \r\nThe example from the ticket produces:\r\n    \r\n```\r\n    scala> rewrapperer\r\n    java.lang.RuntimeException: java.lang.RuntimeException: java.lang.RuntimeException: Point of failure\r\n      at .rewrapper(<console>:9)\r\n      at .rewrapperer(<console>:10)\r\n      ... 32 elided\r\n    Caused by: java.lang.RuntimeException: java.lang.RuntimeException: Point of failure\r\n      at .wrapper(<console>:8)\r\n      ... 34 more\r\n    Caused by: java.lang.RuntimeException: Point of failure\r\n      at .sample(<console>:7)\r\n      ... 35 more\r\n```\r\n    \r\nSuppressed exceptions on Java 7 are handled reflectively.\r\n    \r\n```\r\n    java.lang.RuntimeException: My problem\r\n      at scala.tools.nsc.util.StackTraceTest.repressed(StackTraceTest.scala:56)\r\n      ... 27 elided\r\n      Suppressed: java.lang.RuntimeException: Point of failure\r\n        at scala.tools.nsc.util.StackTraceTest.sample(StackTraceTest.scala:29)\r\n        at scala.tools.nsc.util.StackTraceTest.repressed(StackTraceTest.scala:54)\r\n        ... 27 more\r\n```\r\n\r\nReview by @qerub\r\n'
2876,'adriaanm','SI-7782 Derive type skolems at the ground level\nRather than at the current value of `skolemizationLevel`,\r\nwhich could be influenced by an in-flight existential\r\nsubtype computation.\r\n\r\nThis method is called in `PolyTypeCompleter`, which\r\ncould be constructed by the lazy type completer of the\r\nenclosing class. So currently it is closing over a mutable\r\nvariable; hence the Heisenbug.\r\n\r\nThis issue was exposed by the changes in b74c33e,\r\nwhich was introduced in Scala 2.10.1.\r\n\r\nReview by @adriaanm, /cc @lrytz'
2875,'xeno-by','Documentation 404 (macros guide)\nhttp://www.scala-lang.org/api/current/index.html#scala.reflect.macros.package\r\nrefers to Macros Guide: http://docs.scala-lang.org/overviews/macros.html, but that gives a 404'
2874,'',"Value class Depth.\n\r\nIt's the obvious translation from a raw Int into a value class.\r\n\r\nIt wasn't that long ago one could find a signature like this:\r\n```\r\n  def merge(tps: List[Type], variance: Int, depth: Int): Type\r\n```\r\nDo you feel lucky, method caller? Well, do ya?\r\n\r\nAnyway, now it is:\r\n```\r\n  def merge(tps: List[Type], variance: Variance, depth: Depth): Type\r\n```\r\nForget for a moment the fact that you'd probably rather not pass variance\r\nfor depth and depth for variance and look at the type signatures:\r\n```\r\n  (List[Type], Variance, Depth) => Type\r\n  (List[Type], Int, Int) => Type\r\n```"
2873,'',"Overhaul of partest-ack.\nSeems like many/most options to partest are broken. Working\r\naround as much as I can to make this thing useful again, plus\r\nlots of improvements in robustness. Spaces and such are\r\npreserved properly now, and I added a new way of selecting\r\ntests based on time.\r\n```\r\n  tools/partest-ack -s 1.week.ago\r\n  % tests modified since time       ...  66\r\n\r\n  tools/partest-ack 'case object (Foo|Bar)'\r\n  % tests with matching paths       ...  0\r\n  % tests with matching code        ...  7\r\n```\r\nFile paths and file contents are uniformly acked now, so\r\nfor instance this works as expected.\r\n```\r\n  tools/partest-ack -i VIRTPAT\r\n  % tests with matching paths       ...  41\r\n  % tests with matching code        ...  11\r\n  # 43 tests to run.\r\n```"
2872,'',"add scaladoc canonical name\nOne of the challenges I've had learning and using Scala is the use of symbol methods like `++:` because they lack a name.  Without a name symbols are hard to comprehend, search for, and talk about.  I find it is hard to mentally parse code that uses symbols that I don't have a name for.  Also, trying to search StackOverflow or DuckDuckGo for symbols is usually impossible or difficult.  An attempt was made to use a `Google Tag for Scala` (gt4s) that would provide a searchable name for symbols.  However this doesn't seem to have caught on possibly because the tag names were derived (lacking meaning) and because the ScalaDoc UI didn't plainly expose them.\r\n\r\nThis pull request tries a different approach by adding a new ScalaDoc tag, `@canonical` which allows symbol authors to provide a canonical name for a symbol.  That name is then displayed in the ScalaDoc signature:\r\n![scaladoc-canonical](https://f.cloud.github.com/assets/65043/1020999/b4bc4b66-0cd7-11e3-97fe-df611a5ced3b.png)\r\n\r\nThis pull request includes two symbol names in `GenTraversableLike.scala` which are likely the wrong names but included as examples."
2871,'xeno-by',"SI-7779 Account for class name compactification in reflection\nWe have to assume that the classes we are reflecting on were\r\ncompiled with the default value for -Xmax-classfile-name (255).\r\n\r\nWith this assumption, we can apply the same name compactification\r\nas done in the regular compiler.\r\n\r\nThe REPL is particularly prone to generating long class names\r\nwith the '$iw' prefixes, so this is an important fix for runtime\r\nreflection.\r\n\r\nAlso adds support for getting the runtime class of `O.type` if\r\n`O` is a module.\r\n\r\nReview by @xeno-by"
2870,'',"SI-942 A test case, five years adrift.\nI'm looking at the changes made in 47f35b587, which\r\nprevented cyclic errors in class file parsing. That fix\r\nis insufficient for, or otherwise complicit in, SI-7778, for\r\nwhich I've enclosed a pending test.\r\n\r\nReview by @adriaanm"
2869,'',"SI-7775 Avoid iterating over System.getProperties \nI don't know why it didn't use my commit message... This is for visibility in case it's useful. It was fun just reading the code. Oh, and helpfully I held off on a test until someone said this was what they wanted.\r\n\r\n    Just when you want to iterate over system properties in search\r\n    of a setting, someone else wants to configure their module by\r\n    setting a property.\r\n    \r\n    Avoid ConcurrentModificationExceptions by iterating over property\r\n    names only, which are not backed by the underlying map.\r\n"
2868,'',"SI-7775 Harden against the shifting sands of System.getProperties\nIf another thread writes a new system property (which can happen\r\nin pretty innocuous code such as `new Date`!), the compiler startup\r\ncould fail with a `ConcurrentModificationException` as it iterated\r\nall bindings in the properties map in search of a boot classpath\r\nproperty for esoteric JVMs.\r\n\r\nThis commit uses `Properties#getStringProperties` to get a snapshot\r\nof the keys that isn't backed by the live map, and iterates these\r\ninstead. That method will also limit us to bindings with String\r\nvalues, which is all that we expect.\r\n\r\nReview by @paulp, hat tip to @som-snytt"
2867,'','Fix typo in sample code in scaladoc for package scala.sys.process\n'
2866,'JamesIry',"SI-7269 Rework MapLike#retains to account for desugaring change\nSI-7269 Rework MapLike#retains to account for desugaring change\r\n\r\n`MapLike#retains` contains a for-comprehension that relied on the strict\r\n`filter` by its generator. You can't, in general, iterate a mutable map\r\nand remove items in the same pass.\r\n\r\nHere's the history of the desugaring of:\r\n\r\n    def retain[A, B](thiz: mutable.Map[A, B])(p: (A, B) => Boolean): thiz.type = {\r\n      thiz.foreach {\r\n        case (k, v) =>\r\n          if (p(k, v)) thiz -= k\r\n      }\r\n\r\nBefore regression (c82ecabad6~1):\r\n\r\n    thiz.filter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {\r\n       case scala.Tuple2((k @ _), (v @ _)) => true\r\n       case _ => false\r\n    })).withFilter(((x$1) => x$1: @scala.unchecked match {\r\n       case scala.Tuple2((k @ _), (v @ _)) => p(k, v).unary_$bang\r\n    })).foreach(((x$2) => x$2: @scala.unchecked match {\r\n       case scala.Tuple2((k @ _), (v @ _)) => thiz.$minus$eq(k)\r\n    }));\r\n\r\nAfter regression (c82ecabad6, which incorrectly assumed in the parser that\r\nno filter is required for isInstanceOf[Tuple2])\r\n\r\n    thiz.withFilter(((x$1) => x$1: @scala.unchecked match {\r\n       case scala.Tuple2((k @ _), (v @ _)) => p(k, v).unary_$bang\r\n    })).foreach(((x$2) => x$2: @scala.unchecked match {\r\n      case scala.Tuple2((k @ _), (v @ _)) => thiz.$minus$eq(k)\r\n    }));\r\n\r\nAfter the reversion of c82ecabad6, v2.10.2\r\nThis is also after 365bb2b4e, which uses `withFilter` rather than `filter`.\r\n\r\n    thiz.withFilter(((check$q$1) => check$ifrefutable$1: @scala.unchecked match {\r\n       case scala.Tuple2((k @ _), (v @ _)) => true\r\n       case _ => false\r\n    })).withFilter(((x$1) => x$1: @scala.unchecked match {\r\n       case scala.Tuple2((k @ _), (v @ _)) => p(k, v).unary_$bang\r\n    })).foreach(((x$2) => x$2: @scala.unchecked match {\r\n      case scala.Tuple2((k @ _), (v @ _)) => thiz.$minus$eq(k)\r\n    }));\r\n\r\nThis commit does the same as `SetLike#retains`, and converts the map to\r\nan immutable list before the rest of the operation.\r\n\r\nReview by @JamesIry. /cc @paulp"
2865,'','Alter TailRec to have map and flatMap\nI did not get any replies on the [mailing list](https://groups.google.com/forum/#!topic/scala-internals/2Thm0YE_7zY). A PR probably has better chances to be noticed.\r\nHere is an implementation of `map` and `flatMap` for `TailRec`, using technique, described by @runarorama (http://apocalisp.wordpress.com/2011/10/26/tail-call-elimination-in-scala-monads/).\r\n\r\nReview by @phaller and @axel22 please (as per [policy](http://docs.scala-lang.org/scala/pull-request-policy.html)).\r\nAlso ping @odersky, as it is his code being updated.'
2864,'gkossakowski',"SI-6240 Synchronizes Names \nPreviously we didn't have all possible name creation facilities covered\r\nwith locks, so some of them silently misbehaved and caused much grief:\r\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/ec1d3e2c4bcb000a.\r\n\r\nThis patch gets all the name factories under control.\r\n\r\nRather than relying on subclasses to override mutating methods\r\nand add synchronization, they should instead override `synchronizeNames`\r\nto return true and leave the placement of the locks up to\r\n`reflect.internal.Names`.\r\n\r\nThese locks are placed around sections that mutate `typeHashtable`\r\nand `termHashtable`.\r\n\r\nThis is done in the reflection universe, and in the interactive\r\ncompiler. The latter change will obviate an incomplete attempt\r\ndo to the same in `ScalaPresentationCompiler` in the scala-ide\r\nproject.\r\n\r\nReview by @xeno-by @gkossakowski"
2863,'gkossakowski','(1 of 2) of the rest of the new bytecode emitter + feedback\nSupersedes https://github.com/scala/scala/pull/2857 by incorporating feedback, in the form of more descriptive commit messages and code style changes (see diff below)\r\n\r\nreview by @gkossakowski'
2862,'',"Use scala-partest 1.0-RC4\nRC3 had a binary incompatibility that led to a crash in parsing options,\r\ndue to:\r\n- https://github.com/scala/scala-partest/commit/9ff138ab4b\r\n- https://github.com/scala/scala/commit/2b1563fa74\r\n\r\nAlso added sonatype as a repo for resolving partest,\r\nso we don't have to wait for artifacts to synch to maven central."
2861,'','Deprecate early type defs\nThis is rehash of #2856 \r\n\r\nReview by @adriaanm '
2860,'','Merge/2.10.2 to 2.10.x\nReview by @JamesIry'
2859,'','SI-7622 Clean Up Phase Assembly\nAllow phases (internal or external) to opt-out of assembly. In particular, plug-ins and optimizer phases that are not enabled will not be plugged in.\r\n\r\nOtherwise, this PR is not a clean up so much as a hosing down the sidewalk. "Phase assembly" itself deserves closer inspection.\r\n\r\nI think this is still useful, maybe someone agrees.  The fun part is mostly the -Xshow-phases, to see what\'s enabled or not.\r\n\r\nThis yet-another-rebase supersedes https://github.com/scala/scala/pull/2790.\r\n'
2858,'','ProcessBuilder.lines(log) *does* throw an exception.\nFixes a docstring which states the opposite.'
2857,'',"(1 of 2) of the rest of the new bytecode emitter\nAfter the discussion in https://github.com/scala/scala/pull/2802 about breaking up that PR into two parts, here's the first part, comprising the first four commits (for which no pending issues were identified during review).\r\n\r\nAs to the 2nd part, I'll submit a new PR incorporating review feedback, that will build upon the commits in this PR.\r\n\r\nreview by @gkossakowski\r\n\r\n"
2856,'','Weed out remnants of early type defs\nThis commit removes the dead code that was originally intended for\r\nimplementation of early type definitions.\r\n\r\n[Discussion on the scala-internals](https://groups.google.com/d/msg/scala-internals/k4DzIge9MJU/XecXvqkQDdYJ).\r\n\r\nReview @adriaanm '
2855,'gkossakowski',"Modularize: xml & parser-combinators\n[This PR depends on #2851]\r\n\r\nThese modules move to their own repositories:\r\n  - https://github.com/scala/scala-xml\r\n  - https://github.com/scala/scala-parser-combinators\r\n\r\nThe modularization depends on the new partest, as the old one's\r\nclasspath handling did not support a modularized scala.\r\n\r\nThe osgi tests take xml and parsers jars from the scaladoc dependencies,\r\nand osgi-fy them, as they are no longer built locally.\r\n"
2854,'',"SI-7729 Fix broken windows build\nFixing #ifdiff uncovered a latent bug in partest when it detects\r\npaths to normalize in test log output.  It would not normalize\r\nfile separators for test names with non-word characters.\r\n\r\nThis commit normalizes the test name to the ticket number as a\r\nworkaround until the next partest version is picked up.\r\n\r\nIt also fixes partest in this repo in case we've not yet switched\r\nover to the new repo.  A separate PR will be submitted to the new\r\nrepo as necessary."
2853,'','SI-6797 Test case for already-fixed DelayedInit bug\nProgressed in b4fbb7be0e2, "translation for DelayedInit keeps\r\nmore code in original class."\r\n\r\nReview by @JamesIry'
2852,'JamesIry','SI-1980 A lint warning for by-name parameters in right assoc methods\nThe desugaring of right associative calls happens in the parser. This\r\neagerly evaluates the arguments (to preserve left-to-right evaluation\r\norder the arguments are evaluated before the qualifier).\r\n\r\nThis is pretty surprising if the method being called has a by-name\r\nparameter in the first parameter section.\r\n\r\nThis commit adds a warning under -Xlint when defining such a method.\r\n\r\nThe relevent spec snippets:\r\n\r\n> SLS 4.6.1 says that call-by-name argument "is not evaluated at the point of function application, but instead is evaluated at each use within the function".\r\n>\r\n> But 6.12.3 offers:\r\n> "If op is right- associative, the same operation is interpreted as { val x=e1; e2.op(x ) }, where x is a fresh name."\r\n\r\nReview by @JamesIry'
2851,'','Modularize partest\npartest moves to https://github.com/scala/scala-partest\r\n\r\nAs partest is now resolved from maven, `test/partest` uses `ant test.suite.init`\r\nto determine the classpath (serialized to build/pack/partest.properties)\r\nthat\'s necessary to run `scala.tools.partest.nest.ConsoleRunner`.\r\n\r\nThus, partest gets exactly the same classpath, whether run from\r\nthe command line through `test/partest` or via `ant test`.\r\n\r\nThe version of partest we\'re using is specified by\r\nproperties defined in versions.properties (formerly `starr.number`).\r\n\r\nCurrently, we\'re using:\r\n\r\n```\r\nscala.binary.version=2.11.0-M4\r\npartest.version.number=1.0-RC3\r\n```\r\n\r\nNOTES:\r\n  - The version of Scala being tested must be backwards binary compatible with\r\n    the version of Scala that was used to compile partest.\r\n  - Once 2.11 goes final, `scala.binary.version=2.11`, and `starr.version=2.11.0`.\r\n  - Need scalacheck on classpath for test/partest scalacheck tests.\r\n  - Removed atrophied ant tests (haven\'t been run/changed for at least two years\r\n    I checked 81d6591 as a "random" sample).\r\n  - Removed scalacheck. It\'s resolved as a partest dependency.\r\n  - For now, use a locally built scalap\r\n  - Kept the trace macro in the main repo (partest-extras)\r\n  - New targets for faster pr validation: test-core-opt, test-stab-opt\r\n\r\nTODO:\r\n  - Use maven provided dependencies. I\'ll improve this in a coming version. Need to figure out how to do this in SBT.  This PR represents a significant amount of work and we\'re running out of time. This can be done independently when publishing partest.'
2850,'',"SI-6507 completely sidestep handlers in REPL when :silent in on\nThis is a cleanup of 6db8a52, the original fix for SI-6507.\r\n\r\nWhen the REPL is :silent, all handlers are ignored when it comes to\r\ngenerating the printed result. The result extraction code (`lazy val\r\nresN = ...`) is still generated, but now it isn't called until the\r\nuser calls it.\r\n\r\n---\r\nReview by @som-snytt. The diff for the whole fix, both commits together (much more readable) [is here](https://github.com/gourlaysama/scala/compare/scala:b8d71c590e9f64345bab86e6dd304a92145f52ea...wip/t6507-2)."
2849,'paulp',"SI-7763 Avoid dropping casts in erasure\n466b7d29f avoided quadratic complexity in Erasure's treatment\r\nof chained `asInstanceOf` calls. It did so by using the typechecked\r\nqualifier, rather than discarding it.\r\n\r\nHowever, that also dropped the cast altogether! In many cases this\r\nwas masked by later inclusion of a cast to the expected type\r\nby `adaptToType`:\r\n\r\n\t  at scala.tools.nsc.transform.Erasure$Eraser.cast(Erasure.scala:636)\r\n\t  at scala.tools.nsc.transform.Erasure$Eraser.scala$tools$nsc$transform$Erasure$Eraser$$adaptToType(Erasure.scala:665)\r\n\t  at scala.tools.nsc.transform.Erasure$Eraser.adapt(Erasure.scala:766)\r\n\t  at scala.tools.nsc.typechecker.Typers$Typer.runTyper$1(Typers.scala:5352)\r\n\r\nThis commit re-wraps the typechecked `qual` in its original\r\n`<qual>.asInstanceOf[T]` to preserve semantics while avoiding\r\nthe big-O blowup.\r\n\r\nReview by @paulp, @magarcia"
2848,'','Pattern matcher: extractors become name-based.\nAn extractor is no longer required to return Option[T], and\r\ncan instead return anything which directly contains methods\r\nwith these signatures:\r\n```\r\n  def isEmpty: Boolean\r\n  def get: T\r\n```\r\nIf the type of get contains methods with the names of\r\nproduct selectors (_1, _2, etc.) then the type and arity\r\nof the extraction is inferred from the type of get. If\r\nit does not contain _1, then it is a single value\r\nextractor analogous like Option[T].\r\n\r\nThis has significant benefits and opens new territory:\r\n\r\n  - an AnyVal based Option-like class can be used which\r\n    leverages null as None, and no allocations are necessary\r\n  - for primitive types the benefit is squared (see below)\r\n  - the performance difference between case classes and\r\n    extractors should now be largely eliminated\r\n  - this in turn allows us to recapture great swaths of\r\n    memory which are currently squandered (e.g. every\r\n    TypeRef has fields for pre and args, even though these\r\n    are more than half the time NoPrefix and Nil)\r\n\r\nHere is a primitive example:\r\n```\r\n  final class OptInt(val x: Int) extends AnyVal {\r\n    def get: Int = x\r\n    def isEmpty = x == Int.MinValue // or whatever is appropriate\r\n  }\r\n  // This boxes TWICE: Int => Integer => Some(Integer)\r\n  def unapply(x: Int): Option[Int]\r\n  // This boxes NONCE\r\n  def unapply(x: Int): OptInt\r\n```\r\nAs a multi-value example, after I contribute some methods to TypeRef:\r\n```\r\n  def isEmpty = false\r\n  def get     = this\r\n  def _1      = pre\r\n  def _2      = sym\r\n  def _3      = args\r\n```\r\nThen its extractor becomes\r\n```\r\n  def unapply(x: TypeRef) = x\r\n```\r\nWhich, it need hardly be said, involves no allocations.'
2847,'gkossakowski','SI-7501 Pickler: owner adjustment for param syms in annotation args\nPickling of trees within annotation arguments led to an unfortunate\r\nsituation: the MethodType of a symbol contained a value parameter\r\nsymbol that was pickled as though it were owned by the enclosing\r\nclass (the root symbol of the pickle.)\r\n\r\nUnder separate compilation, this would appear as a member of that\r\nclass.\r\n\r\nAnyone using `@deprecatedName(\'oldName)` was exposed to this problem,\r\nas the argument expands to `Symbol.apply("oldName")`.\r\n\r\nThis commit extends some similar treatment of local type parameters\r\nto also consider value parameters.\r\n\r\nReview by @gkossakowski'
2846,'',"hooks for plugins to override Global.analyzer\nAs discussed a couple weeks ago, submitting this to formalize the hacks\r\nthat I used in macro paradise for 2.10, so that it continues working\r\nafter possible refactorings in 2.11.\r\n\r\nOne of the strategies to implement this would be to make a list of\r\nfunctions overridden by the plugin and then to reuse the analyzer\r\nplugins architecture to introduce them as hooks. However:\r\n1) The list is quite big and disparate (Namers.enterSym,\r\nNamers.ensureCompanionObject, Typers.reallyExists, Typers.typed1,\r\nTypers.typedTemplate, Typers.typedBlock, Typers.typedClassDef).\r\n2) The list doesn't correspond to the spirit of analyzer plugins that\r\nmodify return types of namer/typer functions rather than override them.\r\n3) There's no guarantee that later on paradise won't need to override\r\nadditional functionality of namer/typer, requiring new hacks.\r\n\r\nAnother strategy lets plugins suggest their own analyzers to the compiler.\r\nIt enables augmenting namer/typer with arbitrary functionality, providing\r\nultimate flexibility. Shortcomings:\r\n1) If multiple plugins want to install their own analyzers, it won't work\r\n(but such situations can be detected and meaningful errors can be reported).\r\nOne can argue though, that even if we provided finer-grained API for\r\nsuch plugins, it wouldn't work anyway, because e.g. it's hard to imagine\r\nseveral plugins robustly applying their modifications to Namers.enterSym.\r\n\r\nNone of the outlined two strategies is ideal, however, the second one\r\nmakes more sense to me, because shortcoming #3 of the first one seems to\r\ndefeat the idea of introducing the hooks into the compiler in the first place.\r\nTherefore this patch implements the second strategy."
2845,'',"SI-7704 Fix partest's test category selection (again)\nLooks like multiple, different fixes for this issue managed to break it\r\nagain."
2844,'',"Merge 2.10.x into master\nMerge remote-tracking branch 'scala/2.10.x' into master\r\nConflicts:\r\n\tbincompat-backward.whitelist.conf\r\n\tbincompat-forward.whitelist.conf\r\n\tsrc/compiler/scala/tools/nsc/symtab/classfile/ClassfileParser.scala\r\n\tsrc/compiler/scala/tools/nsc/typechecker/ContextErrors.scala\r\n\tsrc/compiler/scala/tools/nsc/typechecker/NamesDefaults.scala\r\n\tsrc/compiler/scala/tools/nsc/util/MsilClassPath.scala\r\n\tsrc/compiler/scala/tools/reflect/ToolBoxFactory.scala\r\n\tsrc/reflect/scala/reflect/internal/Importers.scala\r\n\tsrc/reflect/scala/reflect/runtime/JavaMirrors.scala\r\n\ttest/files/run/t6392b.check\r\n\r\nThis merge was rather involved.\r\nReview resolution of merge conflicts in `Importers.scala` and `JavaMirrors.scala` by @xeno-by\r\nThe rest review by @retronym"
2843,'',"kills introduceTopLevel\nAs we've figured out from the practice, introduceTopLevel is seductively\r\nuseful but unfortunately not robust, potentially bringing compilation\r\norder problems.\r\n\r\nTherefore, as discussed, I'm removing it from the public macro API.\r\nAlternatives are either: 1) delving into internals, or\r\n2) using macro paradise and experimenting with macro annotations:\r\nhttp://docs.scala-lang.org/overviews/macros/annotations.html."
2842,'JamesIry',"SI-7603 Fix thread safety of FlagTranslation \nThis is outside of the Global cake, so we can't assume single\r\nthreaded access. A var was introduced in af3daf6 that can lead\r\nto incorrect flag interpretation. The reported bug was triggered\r\nin a multi-project SBT build. Java Annotations read from classfiles\r\nwere occasionally conferred the TRAIT|INFERFACE|ABSTRACT flag set,\r\nleading to `@Foo is abstract, cannot be instatiated` later down the\r\nline.\r\n\r\nReview by @JamesIry. I could add a test to prod those functions for thread-safety, but I don't think an isolated test like that adds much value to our test suite.\r\n\r\n(This one will fix Typesafe tickets 2209 and 2323. I just got access to a build today that allowed the diagnosis, hence the eleventh hour submission for 2.10.3)\r\n"
2841,'',"SI-6507 do not call .toString on REPL results when :silent is on.\nMember handlers used to always call .toString on REPL results, even when\r\n:silent was on, which could force evaluation or cause unwanted side\r\neffects.\r\n\r\nThis forwards the current value of `printResults` to the member\r\nhandlers (through Request) for them to decide what to do when the\r\nresults must not be printed.\r\n\r\n2 handlers now do not return any extraction code when silent:\r\n - ValHandler, so that it doesn't call toString on the val\r\n - Assign, so that it doesn't call toString on the right-hand side\r\n   of the assignement.\r\n\r\n---\r\nReview by @som-snytt, please :)"
2840,'adriaanm','SI-7756 Uncripple refchecks in case bodies\nIn 65340ed4ad2e, parts of RefChecks were disabled when\r\nwe traversed into the results of the new pattern matcher.\r\nSimilar logic existed for the old pattern matcher, but in\r\nthat case the Match / CaseDef nodes still existed in the tree.\r\n\r\nThe new approach was too broad: important checks no longer\r\nscrutinized the body of cases.\r\n\r\nThis commit turns the checks back on when it finds the remnants\r\nof a case body, which appears as an application to a label def.\r\n\r\nReview by @adriaanm'
2839,'','SI-7757 disallow constructor annotations on traits\nPreviously it was possible to define constructor annotations on traits\r\nwith really weird side-effects (parser lost the body of the trait). Now\r\nconstructor annotations on traits will cause appropriate syntax errors.'
2838,'adriaanm',"SI-7716 Exclude patmat synthetics from bounds checking\nConsider this pattern match translation, that occurs *before* refchecks:\r\n\r\n    scala> val e: java.lang.Enum[_] = java.util.concurrent.TimeUnit.SECONDS\r\n\r\n    scala> e match { case x => x }\r\n    <console>:9: error: type arguments [_$1] do not conform to class Enum's type parameter bounds [E <: Enum[E]]\r\n                  e match { case x => x }\r\n                  ^\r\n    [[syntax trees at end of                 refchecks]] // <console>\r\n    package $line5 {\r\n              case <synthetic> val x1: Enum[_$1] = $line3.$read.$iw.$iw.e;\r\n              case4(){\r\n                matchEnd3(x1)\r\n              };\r\n              matchEnd3(x: Enum[_$1]){\r\n                x\r\n              }\r\n\r\nRefChecks turns a blind eye to the non-conformant type `Enum[_$1]` in\r\nthe label defs because of 65340ed4ad2. (Incidentally, that is far\r\ntoo broad, as I've noted in SI-7756.)\r\n\r\nThis commit extends this exception to cover the synthetic ValDef `x1`.\r\n\r\nCommit log watchers might notice the similarities to SI-7694.\r\n\r\nReview by @adriaanm / @JamesIry. I think this one makes sense for 2.10.3. It was a regression from 2.9.x."
2837,'',"SI-7630 [Avian] Skip test run/repl-javap-outdir-funs on Avian\nThe test fails, because the REPL command reports that no anonfuns were\r\nfound. I have spent a considerable amount of time to figure out what's\r\nthe issue here with no success.\r\n\r\nSkip it for now, so that we don't lose sight of the big picture."
2836,'','SI-7564 [Avian] Whitespace fixes to run/tailcalls.check\nLooks like the differences in the whitespace caused the test to fail\r\non Avian.'
2835,'','Pattern matcher: extractors become name-based.\nAn extractor is no longer required to return Option[T], and\r\ncan instead return anything which directly contains methods\r\nwith these signatures:\r\n```\r\n  def isEmpty: Boolean\r\n  def get: T\r\n```\r\nIf the type of get contains methods with the names of\r\nproduct selectors (_1, _2, etc.) then the type and arity\r\nof the extraction is inferred from the type of get. If\r\nit does not contain _1, then it is a single value\r\nextractor analogous like Option[T].\r\n\r\nThis has significant benefits and opens new territory:\r\n\r\n  - an AnyVal based Option-like class can be used which\r\n    leverages null as None, and no allocations are necessary\r\n  - for primitive types the benefit is squared (see below)\r\n  - the performance difference between case classes and\r\n    extractors should now be largely eliminated\r\n  - this in turn allows us to recapture great swaths of\r\n    memory which are currently squandered (e.g. every\r\n    TypeRef has fields for pre and args, even though these\r\n    are more than half the time NoPrefix and Nil)\r\n\r\nHere is a primitive example:\r\n```\r\n  final class OptInt(val x: Int) extends AnyVal {\r\n    def get: Int = x\r\n    def isEmpty = x == Int.MinValue // or whatever is appropriate\r\n  }\r\n  // This boxes TWICE: Int => Integer => Some(Integer)\r\n  def unapply(x: Int): Option[Int]\r\n  // This boxes NONCE\r\n  def unapply(x: Int): OptInt\r\n```\r\nAs a multi-value example, after I contribute some methods to TypeRef:\r\n```\r\n  def isEmpty = false\r\n  def get     = this\r\n  def _1      = pre\r\n  def _2      = sym\r\n  def _3      = args\r\n```\r\nThen its extractor becomes\r\n```\r\n  def unapply(x: TypeRef) = x\r\n```\r\nWhich, it need hardly be said, involves no allocations.'
2834,'','SI-7752 Don\'t disambiguate type parameters of overloaded alts\nThese are passed through from `InferencerContextErrors#applyErrorMsg`\r\nto `withDisambiguation` as the `locals` parameter, which is promptly\r\nignored. This looks to be an unintended change in 39938bcc299.\r\n\r\nWithout this patch, the enclosed test case enters a pathalogical\r\ndisambiguation session, that not only flirts with unpleasant big-O\r\ncomplexities, but also flails about appending "(in method foo)"\r\nonly to find that *all* occurences of the same-named type parameter\r\ncome from some method named "foo".\r\n\r\n    [snipping error message 40 seconds in the making]\r\n    method foo), O(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo), P(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo), Q(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo), R(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo), S(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo), T, U(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo)(in method foo), V)\r\n     cannot be applied to (Int)\r\n      foo((1))\r\n\r\nReview by @paulp'
2833,'',"Check backwards binary compatibility against 2.11.0-M4.\nWe're going to start testing (and partially enforcing) backwards binary compatibility of subsequent 2.11 milestones. This is necessary to allow modules built with, say 2.11.0-M4 to be used in an M5 context. Once this PR is merged, `ant test.bc` will be run during PR validation. Please make sure to run it before submitting (it's pretty quick, assuming you already have a build of your PR).\r\n\r\nConcretely, scala-xml, scala-parser-combinators and scala-partest (which depends on scalacheck) will soon only be rebuilt for every milestone, published, and then used for the next milestone cycle (scala-actors will get the same treatment, and a lot of this also holds for e.g. SBT and the Eclipse plugin). \r\n\r\nWe do not want to break any of these modules. We'll go through a quick deprecation cycle. Module authors must fix deprecation warnings (detected via nightly builds that run with -deprecation -Xfatal-warnings) at the latest by the next milestone, after which we can safely break binary compatibility for these (now) unused methods/classes.\r\n\r\nOn the Scala end, we'll be using mima (mostly preventatively) to detect incompatibilities during PR validation, so that we're at least aware of where we're breaking compatibility. We'll initially be pretty liberal about additions to bincompat-backward.whitelist.conf, but will tighten as the end of the 2.11 release cycle approaches. Additionally, we'll soon use dbuild to build these modules as an additional early warning mechanism.\r\n\r\nThink of this as a feasibility study of full (backwards) binary compatibility across major Scala releases. We're not ready to commit to this yet, but we're working towards this goal (e.g. via modularization to reduce the core that must be stable.)\r\n\r\nreview by everyone (@gkossakowski, @retronym -- cc @huitseeker)"
2832,'',"Fake pull request to trick jenkins into running\nAdriaan says there's no other way to get checkin-per-commit to run. This is a pile of mostly trivial commits related to name-based pattern matching, and I'd like to know that/if they pass individually."
2831,'','SI-7624 Fix -feature and some -Xlint warnings\n'
2830,'','updated SI-7331, SI-6843, SI-7731, parser entry point refactoring, assertThrows utility function\nThis is a rehash of #2808 that addresses feedback from @gkossakowski and @retronym'
2829,'',"SI-7014 Annot arg may refer to annotated class's member\nThis only reduces the crasher to a warning.\r\n\r\nreview by @JamesIry"
2828,'',"[Rebase #2771] SI-7694 @uncheckedBounds, an opt-out from type bounds checking\n[Rebase of #2771]\r\n\r\nSynthetic defs introduced by transforms like named/default arguments,\r\nANF (in scala-async) often introduce a type tree (the tpt of the temporary)\r\nthat are based on the types of expressions. These types are scrutinized in\r\nRefChecks to check that type parameter bounds are satisfied.\r\n\r\nHowever, the type of the expression might be based on slack a LUB that\r\nfails to capture constraints between type parameters.\r\n\r\nThis slackness is noted in `mergePrefixAndArgs`:\r\n\r\n\t// Martin: I removed this, because incomplete. Not sure there is a\r\n\t// good way to fix it. For the moment we just err on the conservative\r\n\t// side, i.e. with a bound that is too high.\r\n\r\nThe synthesizer can now opt out of bounds by annotating the type as follows:\r\n\r\n   val temp: (<expr.tpe> @uncheckedBounds) = expr\r\n\r\nThis facility is now used in named/default arguments for the temporaries\r\nused for the reciever and arguments.\r\n\r\nThe annotation is hidden under scala.reflect.internal, rather than in\r\nthe more prominent scala.annotation.unchecked, to reflect the intention\r\nthat it should only be used in tree transformers.\r\n\r\nTargetting 2.10.3 as this fix is needed by a customer.\r\n\r\n**UPDATE** \r\n\r\nIt occurred to me that we should be robust against running the 2.10.3 compiler with the 2.10.2 library, so I've split this PR into two commits. More details in their comments."
2827,'','Ticket/7746\n'
2826,'adriaanm','SI-7020 Determinism for pattern matcher warnings\nUse LinkedHashSet for the DPLL algorithm for determistic\r\ncounter example generation.\r\n\r\nBefore, the test compiled with:\r\n\r\n    [info] v2.10.2 => /Users/jason/usr/scala-v2.10.2-0-g60d462e\r\n    test/files/neg/t7020.scala:3: warning: match may not be exhaustive.\r\n    It would fail on the following inputs: List((x: Int forSome x not in (1, 2, 4, 5, 6, 7))), List(_, _)\r\n      List(5) match {\r\n          ^\r\n    test/files/neg/t7020.scala:10: warning: match may not be exhaustive.\r\n    It would fail on the following inputs: List((x: Int forSome x not in (1, 2, 4, 5, 6, 7))), List(_, _)\r\n      List(5) match {\r\n          ^\r\n    test/files/neg/t7020.scala:17: warning: match may not be exhaustive.\r\n    It would fail on the following inputs: List((x: Int forSome x not in (1, 2, 4, 6, 7)), _), List(1, _), List(2, _), List(4, _), List(5, _), List(6, _), List(7, _), List(??, _)\r\n      List(5) match {\r\n          ^\r\n    test/files/neg/t7020.scala:24: warning: match may not be exhaustive.\r\n    It would fail on the following input: List(_, _)\r\n      List(5) match {\r\n          ^\r\n\r\nReview by @adriaanm, /cc @gbasler'
2825,'',"SI-7733 reflective packages now more consistent with scalac\nPreviously PackageScopes from scala.reflect ignored all classes that\r\nhad $'s in non-rightmost positions in their names.\r\n\r\nUnfortunately this behaviour is inconsistent with how scalac does things,\r\nand I reconciled this as usual, by pulling corresponding logic into\r\nscala-reflect.jar and sharing it between runtime reflection and compiler.\r\n\r\nThis change has seprate pull requests for 2.10.x and 2.11.0. The latter\r\n(which you're looking at right now) deprecates\r\n`scala.tools.nsc.util.ClassPath.isTraitImplementation`, whereas the former\r\ndoes not, because we can't deprecated members in minor releases."
2824,'','SI-7740 Trim stack trace before printing in REPL\nreview @paulp'
2823,'','SI-7715 String inpatternation s"$_" for s"${_}"\nIn a pattern,\r\n\r\n```\r\nscala> implicit class RX(val sc: StringContext) {\r\n     | def rx = sc.parts.mkString("(.+)").r }\r\ndefined class RX\r\n\r\nscala> "2 by 4" match { case rx"$a by $_" => a }\r\nres0: String = 2\r\n\r\nscala> val rx"$_ by $b" = "2 by 4"\r\nb: String = 4\r\n```'
2822,'adriaanm',"SI-3346 implicit parameters can now guide implicit view inference\nThis simple patch makes it possible for implicit views to benefit from\r\nfundep-guided type inference, eliminating a nasty special case in\r\nimplicit inference.\r\n\r\nHere are the changes that I had to apply to the tests (they exposed\r\nquite a number of interesting questions that I was happy to answer):\r\n\r\n1) neg/t5845.scala now works, so I moved it to pos. That easily makes sense,\r\nbecause the test was just a canary to track previous state of things.\r\n\r\n2) neg/divergent_implicit.scala and neg/t5578.scala changed their messages\r\nto less informative ones, because inapplicable implicit views now get\r\ndisqualified early and therefore don't display their error messages\r\nto the user. This is an unfortunate but necessary byproduct of this\r\nchange, and one can argue that the behavior is now completely consistent\r\nwith implicit vals (that also don't explain why this or that implicit val\r\ngot disqualified, but rather display a generic implicit value not found\r\nmessage).\r\n\r\n3) scaladoc/implicits-chaining.scala and scaladoc/implicits-base.scala.\r\nImmediate culling of apriori inapplicable implicit views messes things up\r\nfor Scaladoc, because it's interested in potentially applicable views,\r\nhaving infrastructure to track various constraints (type bounds, requirements\r\nfor implicit parameters, etc) that guide applicability of views and then\r\npresent it to the user. Therefore, when scaladoc is detected, implicit search\r\nreverts to the old behavior.\r\n\r\n4) We still cannot have Jason's workaround to type constructor inference\r\nmentioned in comments to SI-3346, because it's not really about implicit \r\nparameters of implicit views, but about type inference flowing from the \r\nimplicit parameter list to a preceding parameter list in order to affect \r\ninference of an implicit view. This is something that's still too ambitious.\r\n"
2821,'adriaanm',"SI-7470 implements fundep materialization\nThis fix provides implicit macros with an ability to affect type inference\r\nin a more or less sane manner. That's crucial for materialization of\r\nmulti-parametric type class instances (e.g. Iso's from shapeless).\r\nDetails of the technique can be found in comments."
2820,'','Ignore inner class scanning in the compiler to support dynamic languages like groovy [SI-7741]\nrelated to https://issues.scala-lang.org/browse/SI-7741'
2819,'','SI-7737 Regex matches Char\nEnables Char extraction by regex.\r\n\r\n```\r\nval r = """(\\p{Lower})""".r\r\n"cat"(0) match { case r(x) => true }\r\nval nc = """\\p{Lower}""".r\r\n"cat"(0) match { case nc() => true }\r\n```'
2818,'',"[nomaster] macro errors now always have positions\nBack then when I implemented macros for inclusion in trunk (Spring 2012),\r\npartest didn't support the _1, _2, ... convention for neg tests, so I had\r\nto use toolboxes to test macro-generated exceptions.\r\n\r\nUnfortunately toolboxes aren't very good with positions (mostly because\r\ntheir inputs are almost always constructed without corresponding sources)\r\nso I didn't notice that errors signalizing about macro-generated\r\nexceptions actually don't carry positions with them because of a typo.\r\n\r\nThis patch fixes the oversight, but it doesn't need to be ported to master,\r\nbecause over there everything's already fixed by one of the backports\r\nfrom macro paradise."
2817,'','currentRun.compiles now correctly works in toolboxes\nAnother random bug uncovered and extinguished when hacking macro annots.'
2816,'retronym',"SI-3772 local companion objects no longer produce errors\nThe bug is caused by Namers.inCurrentScope preventing the namer from\r\noverwriting synthetic companion modules (created for case classes and\r\nclasses with default arguments) with companions explicitly declared by\r\nthe programmer, in case when these companions are written after their\r\ncorresponding classes.\r\n\r\nI tried to understand what the Namers.inCurrentScope method does, but\r\nthis wasn't particularly successful. Then I noticed that this method\r\nis used only when entering modules, so I simply removed it and ran\r\nthe test suite. Amazingly enough, nothing broke, and the test got fixed."
2815,'',"mkTypeCompleter looks definitely like FlagAgnosticCompleter\nNamers.mkTypeCompleter produces a completer that doesn't modify the flags\r\nof the underlying symbol, hence it should inherit from FlagAgnosticCompleter.\r\n\r\nIn order to avoid future confusion on this matter, I've also renamed\r\nmkTypeCompleter to mkFlagAgnosticCompleter."
2814,'retronym',"[nomaster] macro expansions are now auto-duplicated\nThe fix still requires macro developers to be careful about sharing trees\r\nby references, because attributed DefTrees will still bring trouble.\r\n\r\nHowever this is an improvement, because it doesn't make matters worse\r\nand automatically fixes situations similar to one in the test.\r\n\r\nA much more thorough discussion with a number of open questions left:\r\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/492560d941b315cc\r\n\r\nWas fixed ages ago in master in one of the paradise backports.\r\nNever got to 2.10.x, but it's very useful, so I'm backporting it now."
2813,'','showRaw now prints symbols of def trees\nA very useful addition that came in handy when hacking macro annotations'
2812,'',"DefDef.name is now TermName again\nNow when there's no hope left for type macros, it's reasonable to provide\r\na more specific type for DefDef.name."
2811,'',"kills introduceTopLevel\nAs we've figured out from the practice, introduceTopLevel is seductively\r\nuseful but unfortunately not robust, potentially bringing compilation\r\norder problems.\r\n\r\nTherefore, as discussed, I'm removing it from the public macro API.\r\nAlternatives are either: 1) cast to Global and invoke compileLate,\r\n2) use macro paradise and experiment with macro annotations:\r\nhttp://docs.scala-lang.org/overviews/macros/annotations.html."
2810,'adriaanm','@compileTimeOnly: moved to scala-library.jar, got some fixes\nreview @retronym'
2809,'',"SI-7733 reflective packages now more consistent with scalac \nPreviously PackageScopes from scala.reflect ignored all classes that\r\nhad $'s in non-rightmost positions in their names.\r\n\r\nUnfortunately this behaviour is inconsistent with how scalac does things,\r\nand I reconciled this as usual, by pulling corresponding logic into\r\nscala-reflect.jar and sharing it between runtime reflection and compiler."
2808,'','SI-7331, SI-6843, SI-7731, parser entry point refactoring\nThis commits fixes following bugs:\r\n\r\n* SI-7331 tb.parse returns unpositioned trees\r\n* SI-6843 better error reporting for quasiquotes\r\n* SI-7731 CannotHaveAttrs has inconsistent handling of setPos and setType\r\n\r\nAnd additionaly refactors parser entry points to make parsing stats consistent across repl, toolbox, script runner and quasiquotes.\r\n'
2807,'',"SI-7729 Does Par-Test work?  Absolutely!\nAbsolutize paths where possible; cherry-pick the fix for #ifdiff check files; and zap the log file before starting a run.\r\n\r\nIt also touches the partest script with the new voudou and to cd -P > /dev/null, to ignore the extra echo if CDPATH matches.\r\n\r\nWhy isn't this a problem with scalac? Presumably I never run it from that location.\r\n\r\nIn fact,\r\n```\r\napm@mara:~/projects/snytt$ build/pack/bin/scala\r\nError: Could not find or load main class .home.apm.projects.snytt.build.pack.lib.diffutils.jar\r\n```\r\nHa, I don't even know what that means.\r\n\r\nMy usual aliases have absolute paths.\r\n\r\nAlmost forgot:\r\n\r\nReview by @paulp "
2806,'','SI-5353 Fix Array unsoundness [Rebase of #2703]\n[Rebase of #2703]'
2805,'JamesIry','Constructors refactoring [Rebase of #2715]\n[Rebase of #2715]\r\n\r\nReview by @JamesIry before 2.11.0-M5 window closes. I consider merging this PR a blocker.\r\n\r\nThe `constructors` phase has grown over time, with sub-transformations being added to the all-encompassing `transformClassTemplate()` on an as-needed basis.\r\n\r\nThis PR breaks that method apart, encapsulating each sub-transformation in a trait dedicated to it. Documentation has been thrown in, too.\r\n\r\nThis PR essentially plays again the commits of https://github.com/scala/scala/pull/2599\r\nadapted to `Constructors.scala` in its current form.\r\n\r\nThose commits were once merged into master, but had an ephemeral existence:\r\nthey were inadvertently *overwritten* by the merge of 2.10.2 into master,\r\nsee commit 767a25fe2178b00f494d55bdaae53535cd7fb57d \r\n\r\nThis PR is a pre-requisite for an upcoming re-submission of https://github.com/scala/scala/pull/2665 ,\r\nto make anon-closures retain fewer heap objects (currently, in some cases, more objects are retained via outer-refs than really needed).\r\n\r\nPlease merge this PR before Constructors.scala drifts again.\r\n'
2804,'',"SI-7690 ghost error message fails compile [Rebase of #2763]\n[Rebase of #2763]\r\n\r\nI won't even try to explain the error reporting code, because\r\nit would have no basis in reality. However this change appears\r\nto fix the symptom reported.\r\n\r\n"
2803,'','Rebase #2728 (SI-7658 Prevent StackOverflowError in ScalaRunTime.stringOf)\nRebase #2728'
2802,'','Rebase of #2711 (the rest of the new bytecode emitter)\nRebase of #2711'
2801,'','Eliminated no-type/no-original TypeTrees.\nNoticed many calls reaching a spot which they should not.\r\nAdded a devWarning so the next guy might find it more quickly.'
2800,'',"SI-7331 tb.parse returns unpositioned trees\nThis pull request gets rid off code wrapping that was previously used by toolbox to get into correct parsing mode. Instead combination of templateStats/accept(EOF) is used. This is the same solution as the one used in repl and built-in scriptRunner\r\n\r\nThis pull request doesn't attempt to generalize this approach in any way and re-use it all over the place due to the caution of accidental compatibility breakage. I plan to do it separately against master.\r\n\r\nAdditionally there are a few more changes that make importers be aware of positions and a test for that (via @jedesah).\r\n"
2799,'gkossakowski','Rebase #2727\nRebased #2727. Should be good to go, @gkossakowski.'
2798,'','SI-7544 Interpolation message for %% literal \nThe new error text: "conversions must follow a splice; use %% for\r\nliteral %, %n for newline".\r\n\r\nReview by @adriaanm '
2797,'','Fix N^2 spot in erasure.\nAn expression containing nested casts would type the same tree 2^N times where\r\nN is the number of nested casts. This was particularly visible in Vector.scala\r\nwhere one can find a six-cast expression. It\'s currently line "why was six\r\nafraid of seven", aka line 789.\r\n```text\r\n  display5((index >> 25) & 31)\r\n   .asInstanceOf[Array[AnyRef]]((index >> 20) & 31)\r\n   .asInstanceOf[Array[AnyRef]]((index >> 15) & 31)\r\n   .asInstanceOf[Array[AnyRef]]((index >> 10) & 31)\r\n   .asInstanceOf[Array[AnyRef]]((index >> 5) & 31)\r\n   .asInstanceOf[Array[AnyRef]](index & 31)\r\n   .asInstanceOf[T]\r\n```\r\nCompiling Vector.scala, before/after.\r\n```diff\r\n < #unique types                 : 10805\r\n > #unique types                 : 9722\r\n < #created tree nodes           : 26716\r\n > #created tree nodes           : 25647\r\n```\r\nI found a similar bug about a year ago in 39f01d4f48. It\'s interesting to\r\nconsider how little defense we have against bugs of this nature - visually\r\nnon-obvious differences in tree traversal can have spectacular impact on\r\ncomplexity.'
2796,'JamesIry',"SI-6582 Use Tseitin's algorithm for CNF conversion in pattern matching analysis.\nThis chops #2724 into smaller commits.\r\n\r\nI made Lit into a value class and encapsulated a bit more.\r\nPlease double check my refactorings were correctness-preserving.\r\n\r\nreview by @gbasler"
2795,'JamesIry',"SI-4829 the :load command now fails if the command ends with a space (Pre-port)\nThe :load command now tries to be smart by detecting the presence of trailing spaces that might be insignificant.\r\n\r\nOn certain file systems, files with trailing whitespaces are permitted which is why we don't naively trim the argument.\r\n\r\nPlease review @adriaanm"
2794,'','SI-7331 importers now import tree positions\nThere was also an issue where because of the wrapper code that the toolbox adds in order to support a wider range of string inputs than the vanilla compiler, it was necessary to adjust the positions associated with the trees generated by the compiler in order to provide a coherent interface to client code.\r\n\r\nFurthermore, an assert was removed from emptyValDef in favour of a more lenient implementation that avoids needless guards against emptyValDef in client code.'
2793,'','SI-7715 Etapolator s"$_"\nAllows `vs map s"How many? $_"`.\r\n    \r\nOr `vs zip vs map s"How many? $_ by $_".tupled`.\r\n    \r\nAnd `s"How many? $_ by $_ by $_"("one","two","three")`.\r\n    \r\nIn a pattern,\r\n    \r\n ```\r\n    scala> val rx"$_ by ${I(b)}" = "2 by 4"\r\n    b: Int = 4\r\n ```\r\n'
2792,'','Bug fix ! , if $color_opts is unset partest script does not work.\nMinor fix! to partest script. '
2791,'','SI-7265 javaSpecVersion, adjust isJava... tests for 2.11\nMake this and related properties public, because they\r\nare useful.\r\n\r\nThis change ought to have been committed at 2.11 and then\r\nbackported with restrictions, rather than vice-versa.\r\n\r\nNote that they are defined in the order, version, vendor\r\nand name, which is the order from the underlying javadoc.\r\n\r\nIt would be a neat feature of the PR validator, as previously\r\nimagined, to run a "pending" test and then, on success and\r\nmerge, to move it automatically to the canonical suite.\r\n\r\nReview by @retronym who asked for it and who may have it on his radar, because who *doesn\'t* want to know what version of the java spec you\'re compiling against?\r\n'
2790,'','SI-7622 Clean Up Phase Assembly\nAllow phases (internal or external) to opt-out of assembly. In particular, plug-ins and optimizer phases that are not enabled will not be plugged in.\r\n\r\nOtherwise, this PR is not a clean up so much as a hosing down the sidewalk.  "Phase assembly" itself deserves closer inspection.\r\n\r\nReview by @gkossakowski '
2789,'','SI-4695 Fix separate compilation of package objects\n'
2788,'adriaanm','SI-7747 Making scala repl\'s class generation customizable\nWe at spark, have to customize scala repl to support our way of "code wrapping" for input code. The reason we want it that way is spark needs code serializable so that it can be executed on a remote worker.\r\n\r\n I wish it was possible to configure rather than port scala repl code for every scala release migration. This pull request may *only* present my intention which is, we may not need a complete overhauling of scala REPL to support it and thus there should be a simpler solution to it.  It also has a sample customization which uses `class` instead of `object` for wrapping code to be executed. The sample customization is exactly what we would need for spark i.e. serializable. Actually there is more space for making things in the repl customizable, but then this is just a beginning. This has been done in this particular way only to achieve the goal in minimal code change at expense of elegance. Of course suggestions and reviews comments are welcomed for me being on lurker side trying to step into space that might not be welcoming for its technical depth. \r\n\r\nFor Example\r\n\r\n```scala\r\n\r\nscala> val a = 10\r\na: Int = 10\r\n\r\nscala> val b = a * 2 // show\r\nclass $read extends Serializable {\r\n  def <init>() = {\r\n    super.<init>;\r\n    ()\r\n  };\r\n  class $iwC extends Serializable {\r\n    def <init>() = {\r\n      super.<init>;\r\n      ()\r\n    };\r\n    val $VAL1 = $line3.$read.INSTANCE;\r\n    import $VAL1.$iw.$iw.a;\r\n    class $iwC extends Serializable {\r\n      def <init>() = {\r\n        super.<init>;\r\n        ()\r\n      };\r\n      val b = a * 2\r\n    };\r\n    val $iw = new $iwC.<init>\r\n  };\r\n  val $iw = new $iwC.<init>\r\n}\r\nobject $read extends scala.AnyRef {\r\n  def <init>() = {\r\n    super.<init>;\r\n    ()\r\n  };\r\n  val INSTANCE = new $read.<init>\r\n}\r\nb: Int = 20\r\n\r\nscala> \r\n\r\n```'
2787,'','import scala.tools.nsc.interpreter.IMain needless\n'
2786,'adriaanm',"New website has some links to files that get a 403 Forbidden message\nthe Older Documentation section at http://www.scala-lang.org/documentation/ has some 403 links:\r\ne.g. \r\nhttp://www.scala-lang.org/docu/files/ScalaTutorial.pdf\r\n\r\nwhich gets this message:\r\n\r\n> Forbidden\r\n\r\n> You don't have permission to access /old/website/doc/ScalaTutorial.pdf on this server.\r\n\r\n> Additionally, a 403 Forbidden error was encountered while trying to use an ErrorDocument to handle the request.\r\n\r\nOther docs that gets this message are:\r\n\r\nhttp://www.scala-lang.org/docu/files/ScalaByExample.pdf"
2785,'',"SI-7704 Fix partest's test category selection\nMy recent changes to command line parsing in 609070953c broke partest's\r\nfunctionality of picking test categories (e. g. --pos or --run).\r\n\r\nThe breakage was caused because scala.tools.cmd._ stored the command\r\nline options with the `--` prefix, but TestKinds.standardKinds did not."
2784,'','Improve type printing (crashes)\nCrashes now unroll more like this:\r\n\r\n// SI-7406\r\nclass Arne[@specialized(Int) T](x: T) { lazy val y = x }\r\n\r\n% scalac a.scala\r\nerror: assertion failed: Arne$mcI$sp.this.$asInstanceOf[Int.type]().unbox\r\n\r\n  at scala.tools.nsc.ast.TreeGen.mkCast(TreeGen.scala:146)\r\n  at scala.tools.nsc.Global$gen$.mkAttributedCast(Global.scala:106)\r\n  at scala.tools.nsc.transform.Erasure$Eraser.cast(Erasure.scala:636)\r\n  at scala.tools.nsc.transform.Erasure$Eraser.scala$tools$nsc$transform$Erasure$Eraser$$adaptToType(Erasure.scala:665)\r\n  at scala.tools.nsc.transform.Erasure$Eraser.adapt(Erasure.scala:765)\r\n  at scala.tools.nsc.typechecker.Typers$Typer.runTyper$1(Typers.scala:5345)\r\n  at scala.tools.nsc.typechecker.Typers$Typer.scala$tools$nsc$typechecker$Typers$Typer$$typedInternal(Typers.scala:5358)\r\n  at scala.tools.nsc.typechecker.Typers$Typer.body$3(Typers.scala:5305)\r\n  at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5310)\r\n  at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$60.apply(Typers.scala:3021)\r\n\r\n     while compiling: a.scala\r\n        during phase: mixin\r\n     library version: version 2.11.0-20130608-020907-869ebd8bf2\r\n    compiler version: version 2.11.0-20130608-041104-feb660ccd7\r\n\r\none error found'
2783,'','Merge 2.10.x into master\nAnother attempt at merging 2.10.x.\r\n\r\nRecent merge of #2746 made this PR a little bit more difficult so I split the merge into two commits. The first commit resolves merge conflicts the same way as #2781 except for tests failures.\r\n\r\nHopefully this time all tests will pass.\r\n\r\nReview by @retronym.'
2782,'','Rename t7636-neg.check to the standard t7636.check.\nNot sure which partest bug allowed this, but the old name was wrong.\r\n\r\nThis should unbreak #2781 -- review by @gkossakowski'
2781,'retronym','Merge 2.10.x into master\nMerge difficulty: moderate.\r\n\r\nThe biggest trouble was caused by 55decf733eb361c235ef1bd9039e5c6226202a96 because it overlaps with 30e2e3a78f9061ea93352427cb0ca205203041f0 Please refrain from introducing any non-mandatory changes to 2.10.x branch.\r\n\r\nReview by @retronym'
2780,'','Add deprecation warning to scala.concurrent.Lock class\n@retronym Here is that deprecation of the Lock class.'
2779,'','fix typo. s/Universes/Universe\nreview by @xeno-by'
2778,'','fix Promise scaladoc\nreview by @phaller or @viktorklang\r\n\r\n44a46f8312e7a8352dcc4'
2777,'','S-7681 Remove DaemonThreadFactory, clean up IMain\n'
2776,'',"Refactor the cake so SymbolTable does not depend on Global\n_The description of PR is copied from 364fcd9. All other commits are mostly supporting that big change._\r\n\r\nThis is rather large commit so I'll first explain the motivation behind it and then go through all changes in detail explaining the choices I made.\r\n\r\nThe motivation behind this refactoring was to make SymbolTable unit testable. I wanted a lightweight way of initializing SymbolTable and then writing unit tests for subtyping algorithm, various functionality related to Symbols, etc. All of that should be possible by precisely controlling what we test, e.g., create types and symbols by hand and not have them defined in source code as we normally do in partest (functional) tests.\r\n\r\nThe other motivation was to reduce and clarify dependencies we have in the compiler. Explicit dependencies lead to cleaner design. Also, explicit and reduced dependencies help incremental compilation which is a big problem for us in compiler's code base at the moment.\r\n\r\nOne of the challenges I faced during that refactoring was cyclic dependency between Platform and SymbolLoaders.\r\n\r\nPlatform depended on `SymbolLoaders.SymbolLoader` because it would define a root loader. SymbolLoaders depended on Platform for numerous reasons like deferring decision how to load a given symbol based on some Platform-specific hooks.\r\n\r\nI decided to break that cycle by removing methods related to symbol loading from Platform interface. One could argue, that better fix would be to make SymbolLoaders to not depend on Platform (backend) concept but that would be much bigger refactoring. Also, we have a new concept for dealing with symbol loading: Mirrors.\r\n\r\nFor those reasons both `newClassLoader` and `rootLoader` were dropped from Platform interface.\r\n\r\nNote that JavaPlatform still depends on Global so it can access phases defined in Global to implement `platformPhases` method.\r\n\r\nBoth GenICode and BCodeBodyBuilder have some Platform specific logic that requires casting because pattern matcher doesn't narrow types to give them a proper refinement. Check the changes for details.\r\n\r\nSome logging utilities has been moved from Global to SymbolTable because they are accessed by SymbolTable. Since Global inherits from SymbolTable this should be a source compatible change.\r\n\r\nThe SymbolLoaders has dependency on `compileLate` method defined in Global. The purpose behind `compileLate` is not clear to me but the dependency looks a little bit dubious. At least we made that dependency explicit.\r\n\r\nScaladocGlobal and Global defined in interactive has been adapted in a way that makes them compile both with quick.comp and 2.11.0-M4 so my refactorings are not blocking the modularization effort.\r\n"
2775,'adriaanm',"No longer crash on NoSymbol.owner.\nHistorically calling NoSymbol.owner has crashed the compiler.\r\nWith this commit, NoSymbol owns itself. This is consistent with\r\nthe way ownership chains are handled elsewhere in the compiler\r\n(e.g. NoContext.owner is NoContext, NoSymbol.enclClass is\r\nNoSymbol, and so on) and frees every call site which handles\r\nsymbols from having to perform precondition tests against\r\nNoSymbol.\r\n\r\nSince calling NoSymbol.owner sometimes (not always) indicates\r\na bug which we'd like to catch sooner than later, I have\r\nintroduced a couple more methods for selected call sites.\r\n```\r\n  def owner: Symbol       // NoSymbol.owner is self, log if -Xdev\r\n  def safeOwner: Symbol   // NoSymbol.owner is self, ignore\r\n  def assertOwner: Symbol // NoSymbol.owner is fatal\r\n```\r\nThe idea is that everyone can call sym.owner without undue anxiety\r\nor paranoid null-like tests. When compiling under -Xdev calls to\r\n`owner` are logged with a stack trace, so any call sites for which\r\nthat is an expected occurrence should call safeOwner instead to\r\ncommunicate the intention and stay out of the log. Conversely, any\r\ncall site where crashing on the owner call was a desirable behavior\r\ncan opt into calling assertOwner.\r\n\r\nThis commit also includes all the safeOwner calls necessary to\r\ngive us a silent log when compiling scala."
2774,'','Move partest out to its own repo: scala/scala-partest.\nAs partest is now resolved from maven, `test/partest` uses `ant test.suite.init`\r\nto determine the classpath (serialized to build/pack/partest.properties)\r\nthat\'s necessary to run `scala.tools.partest.nest.ConsoleRunner`.\r\n\r\nThus, partest gets exactly the same classpath, whether run from\r\nthe command line through `test/partest` or via `ant test`.\r\n\r\nThe version of partest we\'re using is specified by\r\nproperties defined in `starr.number`. Currently:\r\n\r\n```\r\nscala.binary.version=2.11.0-M4\r\npartest.version.number=1.0-RC1\r\n```\r\n\r\nNOTES:\r\n  - The version of Scala being tested must be backwards binary compatible with\r\n    the version of Scala that was used to compile partest.\r\n  - Need scalacheck on classpath for test/partest scalacheck tests.\r\n  - Remove atrophied ant tests (haven\'t been run/changed for at least two years\r\n    I checked 81d659141a as a "random" sample).\r\n\r\nreview by everyone (@gkossakowski, @jamesiry, @jsuereth, @lrytz, @paulp, @retronym, @soc)'
2773,'','Cleanup of scalap.\nThese things seem not to be used anywhere. People who need monads/applicatives/functors use scalaz nowadays. What is the reason for having them in scalap?'
2772,'',"SI-7695 Macro debug output on -explaintypes\nIt looks like checkConforms should wait for error before\r\nusing explainTypes, rather than turning on macro debug\r\ntrace if explaintypes is set.\r\n\r\nIn particular, macro debug output is Console.println\r\ninstead of reporter.echo or similar, so partest can't\r\ntest it."
2771,'adriaanm',"SI-7694 @uncheckedBounds, an opt-out from type bounds checking\nSynthetic defs introduced by transforms like named/default arguments,\r\nANF (in scala-async) often introduce a type tree (the tpt of the temporary)\r\nthat are based on the types of expressions. These types are scrutinized in\r\nRefChecks to check that type parameter bounds are satisfied.\r\n\r\nHowever, the type of the expression might be based on slack a LUB that\r\nfails to capture constraints between type parameters.\r\n\r\nThis slackness is noted in `mergePrefixAndArgs`:\r\n\r\n\t// Martin: I removed this, because incomplete. Not sure there is a\r\n\t// good way to fix it. For the moment we just err on the conservative\r\n\t// side, i.e. with a bound that is too high.\r\n\r\nThe synthesizer can now opt out of bounds by annotating the type as follows:\r\n\r\n   val temp: (<expr.tpe> @uncheckedBounds) = expr\r\n\r\nThis facility is now used in named/default arguments for the temporaries\r\nused for the reciever and arguments.\r\n\r\nThe annotation is hidden under scala.reflect.internal, rather than in\r\nthe more prominent scala.annotation.unchecked, to reflect the intention\r\nthat it should only be used in tree transformers.\r\n\r\nTargetting 2.10.3 as this fix is needed by a customer.\r\n\r\n**UPDATE** \r\n\r\nIt occurred to me that we should be robust against running the 2.10.3 compiler with the 2.10.2 library, so I've split this PR into two commits. More details in their comments."
2770,'','Move to java.util.concurrent.locks.Lock (Was: Add concurrent.Lock#doWith)\nA method I have used on a few occasions to eliminate the boilerplate acquire/release when executing simple statements in a locked environment.\r\n\r\nReview by @phaller please!'
2769,'','SI-7569 Fix end position in PostfixSelect tree\nintroduced in 5b54681: the end position of Postfix operators should\r\ntake the operator length into account.\r\n\r\nreview by @som-snytt'
2768,'','SI-7622 Clean Up Phase Assembly\nAsking kitteh for sanity check.\r\n\r\n"Clean" here means that a component can declare cleanly if it is "enabled",\r\nwhether it is an "initial" or "terminal" phase, and the user can tell from\r\n-Xshow-phases what phases are configured, and by adding -Ydebug, what\r\ncomponents are available but not turned on.\r\n\r\nDisabled components are listed with an icon instead of a phase number:\r\nxx for phases that are not enabled (such as by a compiler option),\r\nand oo for phases that disabled by -Yskip.\r\n\r\nCompiler options that take phases as settings ("PhasesSettings") are now\r\nsanity-checked at phase assembly.\r\n\r\nAs usual, phases can be specified as name prefixes or ranges of ids.\r\n\r\nThe few options that exclude a phase from the run (-Yskip and -Ystop) are\r\nrequired to name the phase. (A future improvement may be to permit\r\n-optimise -Yskip:23-27, i.e., turn on the flag but skip the phases without\r\nwriting -Yskip:inline,inlinehandlers,etc.)\r\n\r\nGenerating the .dot file is an "info" option like -Xshow-phases. If "phase assembly"\r\nhits an error, it will dump the .dot file instead of asking you to re-run.  That\'s\r\nbecause if a phase assembly caused the problem it might not be easy to\r\nreproduce.\r\n\r\nThe current "phase assembly" code works a lot better when the object you\r\nput into hash tables actually have meaningful hash codes.  The unstable\r\ntest of detecting cycles is moved out of pending.'
2767,'','SI-4907 SI-4615 scala.bat now honors -J and -D options.\nThis makes scala.bat parse and use -J and -D arguments.\r\n\r\nSpecifically:\r\n - Parameters starting with -J are stripped of the prefix, unquoted if\r\n   necessary and appended to `%JAVA_OPTS%` or default values.\r\n - Parameters starting with -D are unquoted if necessary and then\r\n   appended to the others. The right-hand side of a property can be\r\n   quoted or not.\r\n - All of those are given to `java` before any other parameters.\r\n - The above only happens on parameter preceding the first parameter\r\n   that does not start with "-" (usually a class name).\r\n - The exact arguments passed to scala.bat are also given as-is to\r\n   the scala launcher (including -J and -D arguments).\r\n\r\n   ```bat\r\n   set JAVA_OPTS=-Xmx512m\r\n   scala -J-Xmx128m -Dprop1=42 -Dprop2="hello world" "-Dprop3=bar"\r\n"-J-Xms64m" Test foo\r\n   ```\r\n   will result in\r\n\r\n   ```bat\r\n   java -Xmx512m -Xmx128m -Dprop1=42 -Dprop2="hello world" -Dprop3=bar\r\n-Xms64m [cp, scala main] -J-Xmx128m -Dprop1=42 -Dprop2="hello world"\r\n"-Dprop3=bar" "-J-Xms64m" Test foo\r\n   ```'
2766,'','MergeableEither extends AnyVal\n'
2765,'','SI-7689 Fix typing regression with default arguments\nRegressed in e28c3edda4. That commit encoded upper/lower bounds\r\nof Any/Nothing as EmptyTree, which were triggering the .isEmpty\r\ncheck in Namers#TypeTreeSubstitutor and resulting in the default\r\ngetter having TypeTree() as the return type. This resulted in a\r\n"missing parmameter type" error.\r\n\r\nThis commit tightens up that condition to only consider empty\r\nTypeTrees (those wrapping null or NoType.)\r\n\r\nReview by @paulp'
2764,'','Making map2Conserve occupy constant stack space in spirit of SI-2411.\nI recently discovered a StackOverflowError, caused by this function: https://gist.github.com/folone/7b2f2e2a16314ab28109\r\nThe circumstances are pretty extreme, still having a tail-recursive function seems to be a good idea.\r\nThe function behaves the same way old function did (supported by tests), which is not really how map2 behaves. I did not change this behavior to not introduce any regression. I actually tried to make it behave like map2, and it does introduce regression.\r\nI also think, I found a better home for this function.'
2763,'',"SI-7690 ghost error message fails compile\nI won't even try to explain the error reporting code, because\r\nit would have no basis in reality. However this change appears\r\nto fix the symptom reported."
2762,'',"SI-7687 Handle spaces in %COMSPEC% path in scala.bat.\nDouble quoted %COMSPEC% to allow for spaces in the path to the\r\ndefault interpreter (cmd.exe or equivalent).\r\n\r\n----\r\nI manually tested before/after on Windows 7.\r\nI also signed the CLA some time ago (this is my first contribution).\r\n\r\nReview by... @retronym? (The pull request policy doesn't list anyone for that kind of things, so I don't know... :) )"
2761,'','Assorted toolbox fixes\nreview @retronym'
2760,'','SI-4695 Fix separate compilation of package objects\n'
2759,'',"Add explanations about new REPL commands to feature list of 2.11\nI used normal markdown syntax. I hope it is rendered correctly. Didn't know how to render it by myself, thus couldn't test how it looks on docs.scala-lang.org. Is there an easy way to render it by myself?\r\n\r\nReview by @som-snytt"
2758,'','SI-7681 Remove Phases, clean up TableDef\n'
2757,'','SI-7681 Remove s.t.n.d.Changes (dead code)\n'
2756,'','SI-7681 Remove dead code in s.t.n.s.AbsScalaSettings\n'
2755,'','SI-7681 Remove dead code in s.t.n.s.AbsScalaSettings\n'
2754,'','SI-7679 Remove deprecated StandardScalaSettings#make\n'
2753,'gkossakowski','Change += to + in example for aggregate method\nSince Set used as accumulator is immutable, it does not have += method.'
2752,'','SI-6811 Remove Phases, clean up TableDef\n'
2751,'',"SI-7592 Deprecate s.c.m.DefaultMapModel\n“This class is used internally.” — No, it isn't.\r\nIt isn't used anywhere else either and it doesn't add much benefit,\r\nconsidering that it lacks documentation and has no tests at all."
2750,'paulp','SI-7455 Drop dummy param for synthetic access constructor\nJava synthesizes public constructors in private classes to\r\nallow access from inner classes. The signature of\r\nthat synthetic constructor (known as a "access constructor")\r\nhas a dummy parameter appended to avoid overloading clashes.\r\njavac chooses the type "Enclosing$1" for the dummy parameter\r\n(called the "access constructor tag") which is either an\r\nexisting anonymous class or a synthesized class for this purpose.\r\n\r\nIn OpenJDK, this transformation is performed in:\r\n\r\n  langtools/src/share/classes/com/sun/tools/javac/comp/Lower.java\r\n\r\n(Incidentally, scalac would just emits a byte-code public\r\nconstructor in this situation, rather than a private constructor /\r\naccess constructor pair.)\r\n\r\nScala parses the signature of the access contructor, and drops\r\nthe $outer parameter, but retains the dummy parameter. This causes\r\nhavoc when it tries to parse the bytecode for that anonymous class;\r\nthe class file parser doesn\'t have the enclosing type parameters\r\nof Vector in scope and crash ensues.\r\n\r\nIn any case, we shouldn\'t allow user code to see that constructor;\r\nit should only be called from within its own compilation unit.\r\n\r\nThis commit drops the dummy parameter from access constructor\r\nsignatures in class file parsing.\r\n\r\n\r\nReview by @paulp\r\n\r\nTargetting 2.10.x. I think this is high reward and relatively low risk.\r\n\r\nThis bug is often reported by Java 7 Swing users but is unrelated to scala-swing, raw types, or newly-generified Java standard library classes. It could pop up anytime. It is also usually only seen within SBT when its custom compiler phase captures API snapshots.\r\n'
2749,'','Add PolyTypeCarryingSymbol\nCreated method for calculating type parameter arity.\r\n\r\nClassfileParser#signatureToArity takes a generic signature\r\nand returns the number of class type parameters.\r\n\r\nAdd isOriginallyMonomorphic to TypeHistory.'
2748,'','SI-6991 Emit warning about ClassfileAnnotation ...\n... not being visible at run-time only under -Xdev.\r\n\r\nIt is now explicitly mentioned in the ScalaDoc documentation, too.'
2747,'','Fixing exhaustiveness warnings.\nClassfileAnnotArg becoming sealed brought tidings of not being\r\nexhaustive.'
2746,'','Improve type printing (toString/debugging)\n'
2745,'','Replace JSR-166 by JSR-223\n'
2744,'','STARR: use 2.11.0-M4, built with 2.11.0-M3\nReplaced starr jars with 2.11.0-M4, built with Scala 2.11.0-M3.\r\n\r\nI used `ant replacestarr-opt -Dstarr.use.released=1`, with `starr.number`:\r\n\r\n```\r\nstarr.version=2.11.0-M3\r\n```\r\n\r\nThen pushed the jars to artifactory after moving `lib/jline.jar` out of the way,\r\nas it\'s no longer "desired" (i.e., not pulled from artifactory). Its presence\r\nseemed to break `./push-binary-libs.sh $ARTIFACTORY_USER $ARTIFACTORY_PASS`.\r\n\r\nYou can by-pass the custom starr artifact download and use a (released) version\r\nof Scala by changing your `build.properties` to include\r\n\r\n```\r\nstarr.use.released=1\r\n```\r\n\r\nYou may optionally change `starr.version` in `starr.number` to whichever version\r\nthat maven can resolve for you.\r\n\r\nreview by @retronym'
2743,'adriaanm','Commit .gitignore directly\nRather than relying on the cloner to copy the\r\nprovided gitignore.SAMPLE files.\r\n\r\nThis finishes the job started in c48509598, mostly\r\nby reverting that commit and moving the two existing\r\nSAMPLE files to the final destinations.\r\n\r\nUse `.git/info/exclude` to augment the list of patterns\r\nwith entries specific to your workflow.\r\n\r\nReview by @adriaanm'
2742,'adriaanm','SI-7655 Enforce stable id patterns conform to scrutinee type\nThis was only being done if the stable id pattern was a direct\r\nreference to a module.\r\n\r\nThis commit distinguishes stable ID patterns with the recently\r\nadded facility in TreeInfo. (Actually, this might be overkill\r\nin adapt and we could probably get away with just checking for\r\n`_: Ident | _: Select`.)\r\n\r\nReview by @adriaanm.\r\n\r\nOpinions on the particular way to check for the stable ID pattern are welcome.'
2741,'adriaanm','Scrubbing up the IntelliJ Config\n\r\n- Add recently sprouted modules (xml and parser-combinators)\r\n - Replace some of the documentation with a setup script\r\n - Update Ant build to copy Maven sourced JARs to ./build/deps.\r\n   These are included in the IntelliJ classpath.\r\n - Define the library for Ant at the project level based on\r\n   ./lib, rather than asking the user to define global library.\r\n - Disable Type Aware Highlighting by default.\r\n\r\nIntelliJ now can build everything within the IDE with CTRL-F9.'
2740,'','SI-7650 No bang expansions in REPL jline\nDisable expandEvents at the earliest opportunity.\r\n\r\nA SessionTest succeeds trivially, presumably because input is not a tty.\r\n'
2739,'adriaanm','SI-7668 Better return type inheritance for dep. method types\nReturn type inheritance already handles substitution of\r\ntype parameters of the overriding method for those of the\r\noverriding.\r\n\r\nThis commit extends this to do the same for parameter symbols.\r\n\r\nReview by @adriaanm'
2738,'','SI-7636 Fix a NPE in typing class constructors\nIf we encountered an erroneous super call due to a\r\nfailure in parent type argument inference, we must\r\navoid inspecting the untyped children of erroneous\r\ntrees.\r\n\r\nSlight modification of #2731\r\n\r\nReview by @cvogt'
2737,'adriaanm',"SI-7669 Fix exhaustivity warnings for recursive ADTs.\nThe pattern matcher's analysis was correctly finding\r\nmodels under which the match in the enclosed test\r\ncould fail. But, when trying to render that model\r\nas a counter example, it ran into an internal inconsistency\r\nand gave up.\r\n\r\nThat inconsistency arose from VariableAssignment, which:\r\n\r\n> turn the variable assignments into a tree\r\n> the root is the scrutinee (x1), edges are labelled\r\n> by the fields that are assigned a node is a variable\r\n> example (which is later turned into a counter example)\r\n\r\nIn the process, it notes the unreachable case `V2 = NotHandled`,\r\nwhich can only arise if `V1 = Op`, ie the scrutinee is `Op(NotHandled())`.\r\nV2 is assosicated with the path `x1.arg`. The code then looked for\r\nany variable assosicated with the prefix `x1` and registered that its\r\nfield `arg` was assosicated with this variable assignment.\r\n\r\nHowever, the assignment for `V1 = NotHandled` (another missing case)\r\nis also associated with the path `x1`. Registering this field makes\r\nno sense here; we should only do that for `Op`.\r\n\r\nThis commit conditioanlly registers the fields based on the class\r\nof `VariableAssignment#cls`. We no longer hit the inconsistency in\r\n`VariableAssignment#allFieldAssignmentsLegal`.\r\n\r\nThis changes the results of an existing test, in what seems to be\r\na positive way.\r\n\r\nReview by @adriaanm"
2736,'',"SI-7488 REPL javap finds new style delayedEndpoint\nThe REPL :java -app command is a convenience to locate\r\nthe body of DelayedInit code.  Now it will look for\r\nnew style delayedEndpoints on the class before it\r\nfalls back to showing the apply method of the\r\ndelayedInit$body closure.\r\n\r\n```\r\napm@mara:~/tmp$ skala\r\nWelcome to Scala version 2.11.0-20130711-153246-eb1c3137f5 (OpenJDK 64-Bit Server VM, Java 1.7.0_21).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n\r\nscala> :javap -pv -app delayed.C\r\n  public final void delayedEndpoint$delayed$C$1();\r\n    flags: ACC_PUBLIC, ACC_FINAL\r\n    Code:\r\n      stack=2, locals=1, args_size=1\r\n         0: getstatic     #29                 // Field scala/Predef$.MODULE$:Lscala/Predef$;\r\n         3: ldc           #31                 // String this is the initialization code of C\r\n         5: invokevirtual #35                 // Method scala/Predef$.println:(Ljava/lang/Object;)V\r\n         8: return\r\n      LocalVariableTable:\r\n        Start  Length  Slot  Name   Signature\r\n               0       9     0  this   Ldelayed/C;\r\n      LineNumberTable:\r\n        line 11: 0\r\n\r\nscala> :q\r\napm@mara:~/tmp$ rm delayed/*.class\r\napm@mara:~/tmp$ scalac delayed.scala\r\napm@mara:~/tmp$ skala\r\nWelcome to Scala version 2.11.0-20130711-153246-eb1c3137f5 (OpenJDK 64-Bit Server VM, Java 1.7.0_21).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n\r\nscala> :javap -pv -app delayed.C\r\n  public final java.lang.Object apply();\r\n    flags: ACC_PUBLIC, ACC_FINAL\r\n    Code:\r\n      stack=2, locals=1, args_size=1\r\n         0: getstatic     #13                 // Field scala/Predef$.MODULE$:Lscala/Predef$;\r\n         3: ldc           #15                 // String this is the initialization code of C\r\n         5: invokevirtual #19                 // Method scala/Predef$.println:(Ljava/lang/Object;)V\r\n         8: getstatic     #25                 // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;\r\n        11: areturn\r\n      LocalVariableTable:\r\n        Start  Length  Slot  Name   Signature\r\n               0      12     0  this   Ldelayed/C$delayedInit$body;\r\n      LineNumberTable:\r\n        line 11: 0\r\n        line 10: 8\r\n```\r\n\r\nReview by @paulp because he has that app on his phone for approving and merging repl changes.  Also, because I use PartialFunction.cond.  Remember that recent not-a-bug where someone didn't know where their DelayedInit code went?  The people need this."
2735,'','Revert "Updates .gitignore files."\nThis reverts commit c485095984fa675dfec1b4e749ab77bc1f8e7506.\r\n\r\nConflicts:\r\n\t.gitignore\r\n\r\nOur root .gitignore file is not directly checked in;\r\ninstead one should `cp gitignore.SAMPLE .gitignore` after\r\ncloning the repository.\r\n\r\nThis allows it to be customised locally. I\'m not sure why\r\nwe don\'t use `.git/info/exclude` for local customizations\r\ninstead.\r\n\r\nReview by @paulp @adriaanm'
2734,'','File Says It All\nBrand New File of Interest'
2733,'','SI-6811 Deprecate scala.text\n'
2732,'',"Datatype like StandardML\nHi!\r\n\r\nI want to use datatype syntax like StandardML.\r\nSo I've added it.\r\n\r\nInternally, the datatype declaration converts  to case class declarations."
2731,'','fixes SI-7636 NPE in typer\nNot sure what lead to fn.tpe being null and if avoiding this "case" is the right solution, but it fixes the issue and all tests pass, except files/run/macro-typemacros-fifth-proto which did not pass before the change. \r\n\r\n\r\n**files/run/macro-typemacros-fifth-proto-run.log:**\r\n<pre>\r\nImpls_Macros_2.scala:71: error: `=\', `&gt;:\', or `&lt;:\' expected\r\n  type H2Db(url: String) = macro impl\r\n           ^\r\none error found\r\n</pre>'
2730,'','SI-7657 clarifies the "macro overrides method" rule\nCurrently we allow macros to override non-abstract methods (in order\r\nto provide performance enhancements such as foreach for collections),\r\nand we also disallow macros to override abstract methods (otherwise\r\ndowncasting might lead to AbstractMethodErrors).\r\n\r\nThis patch fixes an oversight in the disallowing rule that prohibited\r\nmacros from overriding a concrete method if that concrete method itself\r\noverrides an abstract method. RefCheck entertains all overriding pairs,\r\nnot only the immediate ones, so the disallowing rule was triggered.\r\n\r\nNow macros can override abstract methods if and only if either the base\r\ntype or the self type contain a matching non-abstract method.'
2729,'','Fix typo in Documentation\n'
2728,'','SI-7658 Prevent StackOverflowError in ScalaRunTime.stringOf\n'
2727,'','SI-7624 Fix -feature and some -Xlint warnings\nChanges build.xml to build Scala with `-feature` enabled.'
2726,'','SI-7654 Adds scala-xml to maven deployment jars\n'
2725,'','SI-4684 Repl supports whole-file paste (rebased)\nRe-rebased #2719: Rebased #2696 \r\n\r\nThe first test repl-paste4 was failing for an unknown reason, with no diff in the build output.\r\n\r\nThis version makes that test a SessionTest with no check file.  The research question is whether that changes how line endings are handled.\r\n\r\nThe second test was already a SessionTest but used a private version, but now it can use the class in partest.\r\n'
2724,'adriaanm',"SI-6582 Use Tseitin transformation to convert propositional formulae into CNF.\nThis resolves the `AnalysisBudgetException` problem for big pattern matches.\r\n\r\nInitial experiments indicate that the problem is even simpler than initially thought: all formulae I got from the exhaustiveness check could be transformed directly into CNF by formula simplification, neither expansion not Tseitin transformation where needed.\r\nThus the framework introduced here might be overkill and a much simpler implementation could work as well.\r\n\r\nFor Scala 2.11 I'd suggest to replace the DPLL procedure with Sat4j. See separate branch.\r\n\r\nReview by @adriaanm "
2723,'',"Fix repl-save test\nRunning by the validator; I'll have to reboot to test in Windows -- I'll do that in a bit.  But it seems like it might work.\r\n\r\nMake the test a SessionTest, where the file name appears just\r\nonce, in the transcript, and is trivially compared against itself.\r\n\r\nThe contents of the saved file are still output and compared with\r\nthe check file."
2722,'',"Fixes checkinit build failure caused by quasiquotes pull request\nThe failure was caused by recent refactoring that moved fields that are expected by reflection Reifier from early init block to the body of the class. According to checkinit this may cause initialization issues although they do not really happen in real life as most of these fields aren't used during quasiquotes' reification."
2721,'','SI-7649 Fix positions for reshaped tag materializers\nCalls to `materializeClassTag[T]` are replaced during reification with\r\n`implicitly[ClassTag[T]]` in the `reify` macro. This is done to avoid\r\nreferring to symbols in scala-compiler.jar. Class- and Type-Tag\r\nmaterialization is treated in the same way.\r\n\r\nThis change positions the replacement trees to avoid triggering\r\nassertions under -Yrangepos.\r\n\r\nReview by @xeno-by.\r\n\r\nAre we in a better shape to address this problem properly in master?\r\n\r\n```scala\r\n// when implicit macros are fixed, these sneaky macros will move to corresponding companion objects\r\n// of, say, ClassTag or TypeTag\r\n```'
2720,'','SI-7487 Revert "Removed -Ymacro-no-expand."\nThis reverts commit 71fb0b83a, which itself reverted the fix for SI-6812.\r\n\r\n/cc @harrah, sorry it took so long! Hope this still works...'
2719,'','Rebased #2696\nsupersedes #2696'
2718,'','SI-7592 Remove scala.tools.nsc.util.MultiHashMap\n'
2717,'','SI-6574 Support @tailrec for extension methods.\nCurrently, when the body of an extension method is transplanted\r\nto the companion object, recursive calls point back to the original\r\ninstance method. That changes during erasure, but this is too late\r\nfor tail call analysis/elimination.\r\n\r\nThis commit eagerly updates the recursive calls to point to the\r\nextension method in the companion. It also removes the @tailrec\r\nannotation from the original method.\r\n\r\nReview by @adriaanm'
2716,'',"fix typo in BigInt/BigDecimal deprecation messages\ndisaster averted! just imagine if 2.10.3 had shipped with this.\r\n\r\nI've signed the CLA, I promise."
2715,'','constructors phase refactoring (2nd attempt)\n\r\nThe `constructors` phase has grown over time, with sub-transformations being added to the all-encompassing `transformClassTemplate()` on an as-needed basis.\r\n\r\nThis PR breaks that method apart, encapsulating each sub-transformation in a trait dedicated to it. Documentation has been thrown in, too.\r\n\r\nThis PR essentially plays again the commits of https://github.com/scala/scala/pull/2599\r\nadapted to `Constructors.scala` in its current form.\r\n\r\nThose commits were once merged into master, but had an ephemeral existence:\r\nthey were inadvertently *overwritten* by the merge of 2.10.2 into master,\r\nsee commit 767a25fe2178b00f494d55bdaae53535cd7fb57d \r\n\r\nThis PR is a pre-requisite for an upcoming re-submission of https://github.com/scala/scala/pull/2665 ,\r\nto make anon-closures retain fewer heap objects (currently, in some cases, more objects are retained via outer-refs than really needed).\r\n\r\nPlease merge this PR before Constructors.scala drifts again.\r\n\r\n\r\nreview by @JamesIry\r\n'
2714,'','Quasiquotes\nSupersedes https://github.com/scala/scala/pull/2691'
2713,'','SI-7638 Superaccessor lookup after specialization\nThe crash was caused by a symbol lookup to rewire the super calls,\r\ndone after pickler, but specialization added new traits and new\r\nmembers, thus making the super rewiring impossible. To avoid such\r\nproblems, this patch moves symbol lookup after specialization,\r\nso the changes done by specialization (and miniboxing) become\r\nvisible to mixin.\r\n\r\nReview by @adriaanm or @retronym.'
2712,'','SI-7638 Superaccessor lookup after specialization\nThe crash was caused by a symbol lookup to rewire the super calls,\r\ndone after pickler, but specialization added new traits and new\r\nmembers, thus making the super rewiring impossible. To avoid such\r\nproblems, this patch moves symbol lookup after specialization,\r\nso the changes done by specialization (and miniboxing) become\r\nvisible to mixin.\r\n\r\nNOTE: This patch will be followed by a similar patch to master.\r\n\r\nReview by @adriaanm or @retronym.'
2711,'',"the rest of the new bytecode emitter\nBuilding upon the barebones bytecode emitter of https://github.com/scala/scala/pull/2620 , this PR adds features that GenASM supports and were missing so far in GenBCode, as well as net improvements over GenASM. In detail:\r\n- only the main thread talks to typer, ASM-only operations are off-loaded to worker threads\r\n- dead-code elimination and jump-chains collapsing are performed (btw, these rewritings are examples of ASM-level-only rewritings and don't require typer).\r\n\r\nWith the above, the capability gap with GenASM is closed. As a bonus, GenBCode doesn't exhibit bugs that GenASM still suffers from (see included tests for details).\r\n\r\nreview by @gkossakowski"
2710,'',"SI-4829 the :load command now fails if the command ends with a space\nThe :load command now tries to be smart by detecting the presence of trailing spaces that might be insignificant.\r\n\r\nOn certain file systems, files with trailing whitespaces are permitted which is why we don't naievely trim the argument."
2709,'','Fix docs inconsistent (cmp -> ord).\nThe parameter name is `ord`, but mentioned in docs with `cmp`.'
2708,'','SI-7174 Fix initialization issues\nWithout constant inlining, the compiler would not even bootstrap\r\nbecause it depends on constant inlining hiding initialization issues\r\nwhich would cause a NPE otherwise.'
2707,'','Fix typo in documentation\n'
2706,'','SI-7637 Repl edit command\nThis PR still has usability issues for console editors, in that you can\'t use them, but gedit WFM.  Also working on a unit test, since jline is turned off for tests; it might entail fattening the "common history interface" just to enable testing; otherwise, the history support is jline-specific.  Comments welcome; assume there is a generous latency period before this will receive attention.\r\n\r\nOpen an editor with historical text.\r\n\r\n:edit id will use the complete text of the defining line, including\r\na multiline expression or template definition.  The id must be a term\r\nor type in scope, in particular, defined in the current session.\r\n\r\n:edit line will use the specified line(s) from history, as a line\r\nnumber (123), range (123-130), offset (123+7), remaining (123-) or\r\nprevious (-10 for last ten lines).\r\n\r\nThe env var EDITOR is used to specify an editor to invoke.\r\n\r\nIf EDITOR is not set or if :line command is used, the selected text\r\nis added to the end of history.\r\n\r\nText is still added to history one line at a time (cf SI-1067).'
2705,'','SI-7624 Fix -feature and some -Xlint warnings\nChanges build.xml to build Scala with `-feature` enabled.'
2704,'gkossakowski','Separate jars for XML, Parser Combinators. Use released JLine.\nThe actual refactoring had already been done.\r\nThis changes the source directory layout and the produced jars.\r\n\r\nReview by @gkossakowski\r\n\r\n/cc @huitseeker, @harrah, @jsuereth'
2703,'','SI-5353 Fix Array unsoundness\n'
2702,'','SI-7633 Remove fsc\n'
2701,'','SI-4594 Repl settings command\nMake it possible to turn settings on and off in repl.\r\n\r\nTo that end, also fixes minor crash:\r\n```\r\napm@mara:~/tmp$ scalac -Ylog:-1-2 source.scala\r\n[snip]\r\nCaused by: java.lang.NumberFormatException: For input string: "1-2"\r\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\r\n\tat java.lang.Integer.parseInt(Integer.java:492)\r\n\tat java.lang.Integer.parseInt(Integer.java:527)\r\n\tat scala.collection.immutable.StringLike$class.toInt(StringLike.scala:229)\r\n\tat scala.collection.immutable.StringOps.toInt(StringOps.scala:31)\r\n\tat scala.tools.nsc.settings.MutableSettings$PhasesSetting$$anonfun$scala$tools$nsc$settings$MutableSettings$PhasesSetting$$stringToPhaseIdTest$2.apply$mcZI$sp(MutableSettings.scala:639)\r\n\tat scala.tools.nsc.settings.MutableSettings$PhasesSetting.containsId(MutableSettings.scala:664)\r\n\tat scala.tools.nsc.settings.MutableSettings$PhasesSetting.containsPhase(MutableSettings.scala:665)\r\n\tat scala.tools.nsc.Global.shouldLogAtThisPhase(Global.scala:282)\r\n\tat scala.tools.selectivecps.SelectiveCPSPlugin.<init>(SelectiveCPSPlugin.scala:38)\r\n```\r\n\r\nSample:\r\n```\r\nscala> :settings +deprecation\r\n\r\nscala> new BigInt(java.math.BigInteger.TEN) { }\r\n<console>:8: warning: inheritance from class BigInt in package math is deprecated: This class will me made final.\r\n              new BigInt(java.math.BigInteger.TEN) { }\r\n                  ^\r\nres0: BigInt = 10\r\n\r\nscala> :settings -deprecation\r\n```\r\nReview by @soc who is busy but may be interested\r\n'
2700,'','SI-7592 Remove scala.tools.nsc.util.MultiHashMap\n'
2699,'',"Use forward slash in #2637's test on windows\nDon't use toString to output file names in tests, its output is platform dependent -- use `testIdent` instead.\r\n\r\nThis makes #2637 Windows-friendly.\r\n\r\nreview by @retronym"
2698,'','Remove no-longer necessary workaround for SI-5731.\nAnd avoid deprecated 0-arg abort and deprecated runtime classes.'
2697,'','SI-6419 Repl save session command\nA simple save command to write out the current replay stack.\r\n\r\nOne can imagine a distinct "store session" command that saves state. (`:store` and `:restore`)\r\n\r\n```\r\nscala> val i = 7\r\ni: Int = 7\r\n\r\nscala> val j=  8\r\nj: Int = 8\r\n\r\nscala> i * j\r\nres0: Int = 56\r\n\r\nscala> :save multy.script\r\n\r\nscala> :q\r\napm@mara:~/tmp$ cat multy.script\r\nval i = 7\r\nval j=  8\r\ni * j\r\napm@mara:~/tmp$ skala\r\nWelcome to Scala version 2.11.0-20130626-204845-a83ca5bdf7 (OpenJDK 64-Bit Server VM, Java 1.7.0_21).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n\r\nscala> :load multy.script\r\nLoading multy.script...\r\ni: Int = 7\r\nj: Int = 8\r\nres0: Int = 56\r\n\r\nscala> :load multy.script\r\nLoading multy.script...\r\ni: Int = 7\r\nj: Int = 8\r\nres1: Int = 56\r\n```\r\n\r\nThe commit omits to cite:\r\n```\r\nscala> :save foo\r\nNo replay commands in session\r\n\r\nscala> :save\r\nFile name is required.\r\n```\r\nReview by @retronym who might give me a two-fer favor for paste -raw.'
2696,'','SI-4684 Repl supports whole-file paste\nAdd a file argument to the :paste command which loads the\r\nfile\'s contents as though entered in :paste mode.\r\n\r\nThe :paste command is replayable.\r\n\r\nSamples, including companions defined together:\r\n\r\n```\r\nscala> :paste junk.scala\r\nFile contains no code: junk.scala\r\n\r\nscala> :paste no-file.scala\r\nThat file does not exist\r\n\r\nscala> :paste obj-repl.scala\r\nPasting file obj-repl.scala...\r\n<console>:2: error: expected start of definition\r\n         private foo = 7\r\n                 ^\r\n\r\nscala> :paste hw-repl.scala\r\nPasting file hw-repl.scala...\r\nThe pasted code is incomplete!\r\n\r\n<pastie>:5: error: illegal start of simple expression\r\n}\r\n^\r\n\r\nscala> :replay\r\nReplaying: :paste junk.scala\r\nFile contains no code: junk.scala\r\n\r\nReplaying: :paste obj-repl.scala\r\nPasting file obj-repl.scala...\r\ndefined trait Foo\r\ndefined object Foo\r\n\r\nReplaying: Foo(new Foo{})\r\nres0: Int = 7\r\n```\r\n\r\nReview by @retronym for whom I\'ll throw in `:paste -raw` if it otherwise looks good to him.\r\n\r\n`-raw` is repl speak for "without wrapping", hence top-level.\r\n'
2695,'','fix typo\n'
2694,'','Merge 2.10.x into master\nReview by @gkossakowski'
2693,'','Lint-like fixes found by Semmle\n'
2692,'','SI-7591 Migrate command-line parsing to s.t.cmd\n'
2691,'','Add quasiquotes to reflection api\nThe implementation consits of following parts:\r\n\r\n- Additions to reflection api:\r\n\r\n  - Quasiquotes implicit class that defines `q`, `tq`, `pq` and `cq` interpolators that now become a part of the `scala.reflect.api.Universe`. The implementation of given interpolators is macro-based and is hardwired to actual macro through `FastTrack`.\r\n\r\n  - `Liftable` class and `StandardLiftables` slice of the cake which are parts of typeclass-like mechanism that allows to splice custom user-defined types into quasiquotes\r\n\r\n  - Additional methods in `BuildUtils` which are used by quasiquotes macro to generate trees, notably:\r\n\r\n    - `SyntacticClassDef`. An extractor/constructor that allows to construct and deconstruct classes using arguments that mirror syntactic form of ClassDefs (e.g. constructor outside of the body)\r\n\r\n    - `TupleN`, `TupleTypeN`. Extractor/constructor for easy construction of ast that represents a tuple term or type with given amount of elements.\r\n\r\n- Actual implementation of quasiquotes in `scala.tools.reflect.quasiquotes.package` which is organized into a cake called `Quasiquotes` with slices:\r\n\r\n  - `Macros`. Core macro expansion logic with `dispatch` entry-point.\r\n\r\n  - `Parsers`. Customized parser that contains modifications to support various types of extensions to the Scala language that are needed for quasiquotes. Due to the fact that code snippets need to be parsed differently depending on the quasiquote flavor that is being used at the moment (`q`, `tq` etc) there a few sub-Parsers with different code wrapping logic.\r\n\r\n  - `Reifiers`. Customized reifiers that combines reification and substitution of trees that represent holes in a quote (placeholders) with corresponding spliced values. There are two main different reification strategies: `ApplyReifier` and `UnapplyReifier` that are used correspondingly for construction and deconstruction quasiquotes.\r\n\r\n- Extremely minor patch to the typer that special-cases expansion of unapply quasiquotes so that they can expand directly into inline patterns\r\n\r\n- A few minor changes to the parser that simplify implementation of customized parser for quasiquotes\r\n\r\n- Scalacheck-based tests'
2690,'','SI-7620 Remove floating-point-literals-without-digit-after-dot\n'
2689,'',' SI-7617 typedAssign no longer expands lhs\nreview @retronym'
2688,'',"SI-7614 Minimize the times of evaluation f in TraversableOnce.maxBy/minBy\nIn the previous implementation, maxBy/minBy will evaluate most of its elements\r\nwith f twice to get the ordering. That results (2n - 2) evaluations of f.\r\n\r\nI save both the element and result of evaluation to a tuple so that it doesn't\r\nneed to re-evaluate f on next comparison. Thus only n evaluations of f, that is\r\nthe optimal."
2687,'',"Move some code from s.t.n.io to s.t.n.interactive\nThe only usages of scala.tools.nsc.io.{Lexer,Pickler,PrettyWriter,\r\nReplayer} can be found in scala.tools.nsc.interactive.\r\n\r\nLet's move those files closer to their dependencies."
2686,'adriaanm','Less noise on a partest failure.\nThrowing a BuildException is the polite way to fail the Ant build.\r\n\r\nBefore:\r\n\r\n\tBUILD FAILED\r\n\t/Users/jason/code/scala2/build.xml:1522: java.lang.RuntimeException: Test suite finished with 1 case failing:\r\n\t/Users/jason/code/scala2/test/files/pos/lub-dealias-widen.scala [FAILED]\r\n\t        at scala.sys.package$.error(package.scala:27)\r\n\t        [20 lines elided]\r\n\t        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\r\n\r\n\tTotal time: 2 minutes 35 seconds\r\n\r\nAfter:\r\n\r\n\tBUILD FAILED\r\n\t/Users/jason/code/scala2/build.xml:1522: Test suite finished with 1 case failing:\r\n\t/Users/jason/code/scala2/test/files/pos/lub-dealias-widen.scala [FAILED]\r\n\r\n\tTotal time: 2 minutes 34 seconds\r\n\r\nReview by @adriaanm'
2685,'adriaanm',"SI-7612 Fix SOE regression in lubs\nThe enclosed test case (whittled down lovingly from lift-mapper)\r\ntriggers the cycle in `elimSub`.\r\n\r\nRegressed in a06d31f6a. The change was dicussed\r\n<https://github.com/scala/scala/pull/2022#discussion_r2832997>.\r\n\r\nThis patch reverts to using `.underlying`.\r\n\r\nBelow, I've shown the different paths that are taken through\r\nthat method with before and after this patch. The key divergence\r\nis when `<refinement>.this.M.dealias` reveals a captured existential\r\ntype symbol.\r\n\r\nA more detailed look at how that happens:\r\n   <https://gist.github.com/retronym/5874775>\r\n\r\nReview by @adriaanm.\r\n\r\nTargetting 2.10.x on grounds of locality of the fix and regression from 2.10.0 -> 2.10.1.\r\n\r\n"
2684,'','SI-7616 Avoid ClassCastException in scala.concurrent.impl.ExecutionConte...\n...xtImpl\r\n\r\nAdds test to scala-concurrent-tck'
2683,'','SI-7344 Specialize methods in private scopes\nThis performs method specialization inside a scope other than a {class,\r\ntrait, object}: could be another method or a value. This specialization\r\nis much simpler, since there is no need to record the new members in\r\nthe class signature, their signatures are only visible locally.\r\nIt works according to the usual logic:\r\n - we use normalizeMember to create the specialized symbols\r\n - we leave DefDef stubs in the tree that are later filled in by tree\r\nduplication and adaptation\r\n\r\nThe solution is limited by SI-7579: since the duplicator loses the sym\r\nannotations when duplicating, this expansion and rewiring can only take\r\nplace in code that has not been subject to duplication. You can see the\r\ntest case for an example.\r\n\r\nReview by @dragos, @paulp or @axel22.\r\n\r\nConflicts:\r\n\r\n\tsrc/compiler/scala/tools/nsc/transform/SpecializeTypes.scala'
2682,'paulp','SI-7209 Another test for a fixed bug with Java generics\nErased types were being treated as raw types and incorrectly\r\nbeing cooked, this is visible in the REPL which reuses the symbol\r\ntable.\r\n\r\nThe fix for this came earlier in SI-7482.\r\n\r\nReview by @paulp'
2681,'','SI-7590 TreeSet should fail fast if Ordering is null\nWhile migrating scala.tools.nsc.util.TreeSet to\r\nscala.collection.mutable.TreeSet, I messed up initialization order\r\nand realized that TreeSet accepts null as an Ordering and only fails\r\nmuch later.\r\n\r\nThis change makes mutable.TreeSet and immutable.TreeSet fail\r\nimmediately.'
2680,'','SI-7603 Speculative fix for annotation binding error\nReports of:\r\n\r\n    error: trait Test is abstract; cannot be instantiated\r\n    11:09:50 [ant:scalac] @Test def testClientRequestNum = {\r\n    11:09:50 [ant:scalac] ^\r\n\r\nSuggest that the deferred processing of a LazyAnnotationInfo is binding\r\nthe identifier `Test` to the wrong symbol. Inspection of the code shows\r\nthat the closure also defers capture of the (mutable) field\r\n`Namer#typer.context`.\r\n\r\nThis commit captures the context eagerly, and adds logging to let us\r\nknow if that eagerly captured context ever differs from the its value\r\nat the point when the annotation info is forced.\r\n\r\nI spent a few hours trying to craft a test to back this up, but to no\r\navail. Here\'s what the log output will look like:\r\n\r\n    [log typer] The var `typer.context` in scala.tools.nsc.typechecker.Namers$NormalNamer@1f5ebb08 was mutated before the annotation new a() was forced.\r\n\r\n    current value  = Context(C@Import unit=<console> scope=123861466 errors=false, reportErrors=true, throwErrors=false)\r\n    original value = Context(C@Import unit=<console> scope=123861466 errors=false, reportErrors=true, throwErrors=false)\r\n\r\n    This confirms the hypothesis for the cause of SI-7603. If you see this message, please comment on that ticket.\r\n\r\nCheck out the ticket for a bit more context.\r\n\r\nNote that we\'ve seen this error once on `t294.scala`, which has been benched for a while for non-determinism. In addition, the customer who reported the problem might well have had the CPS plugin enabled, which might affect the order that annotations are forced.\r\n\r\nReview by the "Namer Whisperer", @lrytz. Does this hypothesis hold water? How might I provoke the error?\r\n'
2679,'','Get rid of raw types which cause unnecessary warnings\n'
2678,'',"SI-7600 [Avian] Skip tests r/stream_length and r/t4294\nThe issue is that Avian's GC is currently not precise enough to\r\ndetermine the exact lifetime of each local/stack reference, and\r\ntherefore considers the this reference to be reachable in situations\r\nwhere it could have been collected.\r\n\r\nThis can cause issues (as seen in run/stream_length and run/t4294:\r\n`java.lang.OutOfMemoryError`) if code relies on the garbage collection\r\nof these values to keep memory consumption constant.\r\n\r\nThis commit simply skips these two tests on Avian until the GC\r\nimplementation is fixed."
2677,'','SI-3936 - add test case to show that SI-3936 is already fixed\nThese are exactly the examples given by Lukas Rytz in SI-3936.\r\nThey fail with 2.10.1 and compile with 2.10.2 as well as current master.\r\n\r\n(And many thanks for fixing this bug and all the other great work the contributors are doing!)'
2676,'','SI-7511 Remove indirection of numeric methods\nMethods on `Rich<AnyVal>`s like `abs`, `doubleValue`, `floatValue`,\r\n`longValue`, `intValue`, `byteValue`, `shortValue`, `min`, `max`,\r\n`signum` are slow because they go through multiple indirections\r\nincluding typeclasses and boxing.\r\n\r\nFor instance, take `1L.abs`:\r\n\r\nInstead of just computing and returning the result (like it is done in\r\n`RichInt`), this is what happens:\r\n\r\n- `RichLong` inherits `abs` by extending `ScalaNumberProxy[T]`\r\n- `ScalaNumberProxy[T]` has an abstract\r\n  `protected implicit def num: Numeric[T]`\r\n- This method is implemented in `RichLong` and points to\r\n  `scala.math.Numeric.LongIsIntegral`\r\n- The actual method `abs` now calls `num.abs(self)`'
2675,'','SI-7599 Modify methods to be non-tail-callable ...\n... to prevent Avian from eliding the stack frames we want to inspect.'
2674,'','SI-7336 Link flatMapped promises to avoid memory leaks\nThis patch addresses a bug (or missing optimisation) in Future.flatMap which can lead to memory leaks. We [see these leaks in Play](https://github.com/playframework/Play20/issues/1084) because Play iteratees use futures extensively.\r\n\r\nBackward binary compatibility is preserved by this patch. Several new methods are introduced to DefaultPromise (theoretically a "private" class) to allow linking promises together. These new methods have been whitelisted for forward binary compatibility. Strictly speaking, only a single method new method to link promises is really needed. But if we\'re going to introduce one new method, we may as well introduce three, right? :wink:\r\n\r\nThe patch is split into two changes. The first change can be cherry-picked into master. The second change has changes to preserve backward binary compatibility and whitelist forward binary compatibility.\r\n\r\nThis fix is based is based on the [Twitter promise implementation](https://github.com/twitter/util/blob/master/util-core/src/main/scala/com/twitter/util/Promise.scala#L421). The current Scala implementation uses onComplete handlers to propagate the ultimate value of a flatMap operation to its promise. Recursive calls to flatMap build a chain of onComplete handlers and promises. Unfortunately none of the handlers or promises in the chain can be collected until the the handlers are called and detached, which only happens when the final flatMap future is completed. (In some situations, such as an infinite stream, this may never actually happen.) Because of the fact that the promise implementation internally creates references between promises, and these references are invisible to user code, it is too easy for user code to accidentally build a large chain of promises and leak memory. See the included test which quickly exhausts JVM memory with a simple recursive loop—but not once this patch is applied. Even knowing about the internal problem, it is difficult to avoid this kind of leak without avoiding flatMap entirely.\r\n\r\nBoth the Twitter implementation and this patch solve the problem of leaks by automatically breaking these chains of promises, so that promises don\'t refer to each other in a long chain. This allows each promise to be individually collected. The idea is to "flatten" the chain of promises, so that instead of each promise pointing to its neighbour, they instead point directly the promise at the root of the chain. This means that only the root promise is referenced, and all the other promises are available for garbage collection if they\'re not referenced by user code.\r\n\r\nTo make the chains flattenable, the concept of linking promises together becomes an explicit feature in the promise implementation. This allows the implementation to navigate and rewire links as needed. A DefaultPromise gets a new state: being linked to another DefaultPromise. See the scaladoc for more details.\r\n\r\nIn practice, flattening the chain cannot always be done perfectly. When a promise is added to the end of the chain, it scans the chain and links directly to the root ("canonical") promise. But the root promise for a chain can change, which will leave all previously-linked promise pointing at a the old, now non-root, promise, rather than the new root promise. To mitigate the problem of the root promise changing, whenever any linked promise\'s methods are called, and it needs a reference to its root promise, it re-scans the promise chain and relinks itself directly to whatever the current root promise is, even if that promise has changed. Basically, rescanning and relinking occur at every possible opportunity. Unfortunately, even this eager relinking doesn\'t absolutely guarantee that the chain will be flattened and that leaks cannot occur. However it does greatly reduces the chance that they will occur.\r\n\r\nTo *guarantee* no leaks we\'d probably need to retain backwards references when the root promise changed, and update all the promises pointing to the old root promise. These backward references would need to be weak references to prevent leaks. Changing the root promise would become a very expensive operation, which would be unfortunate, as most of the updated promises would be garbage anyway and updating them would be wasted work. Personally, I think mainting backwards weak references is too expensive to justify. So we are left with a fast and cheap implementation that does a pretty good, but not perfect, job of flattening promise chains.\r\n\r\nThe re-scanning and relinking code in this patch actually differs from the code in the Twitter implementation. The Twitter implementation [relinks *all* promises](https://github.com/twitter/util/blob/master/util-core/src/main/scala/com/twitter/util/Promise.scala#L542) it encounters as it scans for the root promise, whereas this patch only relinks a *single* promise. The reason for this is that the Twitter implementation uses the stack to store promises as it updates them, and so risks a stack overflow. In other words, the Twitter code is slightly more aggressive about flattening the promise chain, but runs the (admittedly small) risk of a overflowing the stack. The code in this patch does less flattening—so might leak memory in more cases—but cannot overflow the stack. There is a trade off with no clear best answer. I\'d be interested to hear other opinions.'
2673,'','Fix typo in Scaladoc\n'
2672,'',"SI-6855: REPL emits error on partial pastie\nIf pasted code is interpreted with an incomplete result,\r\nattempt to compile it to display an error.\r\n\r\nUnfancily, the code is wrapped in an object for compilation.\r\n\r\n```\r\nscala> :pa\r\n// Entering paste mode (ctrl-D to finish)\r\n\r\ndef f(\r\n\r\n// Exiting paste mode, now interpreting.\r\n\r\nThe pasted code is incomplete!\r\n\r\n<pastie>:3: error: identifier expected but '}' found.\r\n}\r\n^\r\n\r\nscala> :pa\r\n// Entering paste mode (ctrl-D to finish)\r\n\r\nclass Bar {\r\n\r\n// Exiting paste mode, now interpreting.\r\n\r\nThe pasted code is incomplete!\r\n\r\n<pastie>:2: error: Missing closing brace `}' assumed here\r\nclass Bar {\r\n^\r\n\r\nscala> :pa\r\n// Entering paste mode (ctrl-D to finish)\r\n\r\ndef f[A\r\n\r\n// Exiting paste mode, now interpreting.\r\n\r\nThe pasted code is incomplete!\r\n\r\n<pastie>:3: error: ']' expected but '}' found.\r\n}\r\n^\r\n\r\nscala> :q\r\n\r\n```"
2671,'','SI-7569 Fix end position in PostfixSelect tree\nintroduced in 5b54681: the end position of Postfix operators should take the\noperator length into account.\n\nreview by @som-snytt'
2670,'','Fix end position in PostfixSelect tree\nFixes #7569 (introduced in 5b54681) : the end position of a postfix tree should take the operator into account.'
2669,'','Modularize parsing\n'
2668,'',"SI-7292 Fixes test failures by updating *.check files\nLooks like partest's confusion about / vs. \\ was fixed between\r\nthe original Jenkins run of the fix for SI-7292 and its merge."
2667,'',"Spin off xml library as scala-library-xml.\n1. wean core sources (those built by locker: library/reflect/compiler) off xml\r\n2. make compiler flexible: \r\n    - don't require scala.xml unless xml literals were parsed\r\n    - when Predef.$scope does not exist, but scala.xml.TopScope does, alias the latter to $scope (our old xml library assumes $scope is always in scope)\r\n3. spin off scala.xml.* to src/library-xml and scala-library-xml.jar, and remove Predef.$scope (the last dependency of core sources on xml)\r\n\r\nreview by @retronym, @paulp, and anyone else who'd like to dance on scala.xml's shallow grave."
2666,'','SI-7265 General test for spec version\n    The test for isJavaAtLeast uses the specification.version.\r\n    \r\n    The method argument must have the form "major.minor".\r\n    \r\n    The scaladoc is updated to reflect the new reality and a\r\n    test is added under junit.\r\n    \r\n    Note that this implementation aims to be a simple\r\n    compromise between the functional and imperative camps,\r\n    that is, to be free of both closures and while loops.\r\n    And to elicit no cruft like regexes and wrappers for strings.\r\n    No doubt even more could be done in this department, but we\r\n    don\'t wish to spoil the fun on codegolf.stackexchange.com.\r\n    However, we might decide to sponsor a new site:\r\n    codereviewpingpong.com\r\n    \r\n    For 2.10.x, javaSpecVersion is provided as a private member.\r\n    The active test is under `run` and the `junit` test must\r\n    bide its time in `pending`.\r\n    \r\n    For 2.11, the private members can be public and the app test\r\n    replaced with the unit test.\r\n\r\nReview by @soc and @adriaanm '
2665,'','taming outer refs: anon-closures that retain fewer heap objects (3rd attempt)\n\r\nThis PR supersedes #2634\r\n\r\nOriginal discussion at https://groups.google.com/forum/#!topic/scala-internals/jQiRINTvhZQ\r\n\r\nLooking into the future, after fixing https://issues.scala-lang.org/browse/SI-4440\r\nthe constructors phase should be kept in synch with that fix. Thus this "note to the future".\r\nIn particular, with that fix in place, while the `$outer` field and its accessor won\'t be elided as often as now,\r\nthey will still be elided for anon-closure-classes (provided the `$outer` in question sees no use).\r\nFor similar reasons, the optimization in this PR will still be useful (not for inner classes fulfilling some conditions\r\nbut for anon-closure classes fulfilling some conditions). Two comments in the previous PR go into more detail: https://github.com/scala/scala/pull/2634#issuecomment-19173210 and \r\nhttps://github.com/scala/scala/pull/2634#issuecomment-19259239\r\n\r\nreview by @JamesIry '
2664,'gkossakowski',"SI-7596 Curtail overloaded symbols during unpickling\nIn code like:\r\n\r\n    object O { val x = A; def x(a: Any) = ... }\r\n    object P extends O.x.A\r\n\r\nThe unpickler was using an overloaded symbol for `x` in the\r\nparent type of `P`. This led to compilation failures under\r\nseparate compilation.\r\n\r\nThe code that leads to this is in `Unpicklers`:\r\n\r\n    def fromName(name: Name) = name.toTermName match {\r\n      case nme.ROOT     => loadingMirror.RootClass\r\n      case nme.ROOTPKG  => loadingMirror.RootPackage\r\n      case _            => adjust(owner.info.decl(name))\r\n    }\r\n\r\nThis commit filters the overloaded symbol based on the\r\nparameter list size when unpickling a singleton type.\r\nThat seemed a slightly safer place than in `fromName`.\r\n\r\nReview by @gkossakowski\r\n\r\nPoints for review:\r\n - where do you think the right place is to filter the symbol? \r\n - I chose `filter` over `suchThat` to defer errors in the case that the val no longer exists. But I didn't test that case, and don't really think the precise error mode is too important; things will blow up quickly either way.\r\n - is there a cleaner, flag-driven alternative to `paramss.isEmpty`?"
2663,'','SI-7592 Replace s.t.n.u.TreeSet with s.c.m.TreeSet\nThis means\r\n- migrating usages from the compiler-specific implementation to the\r\n  one in the standard library\r\n- removing the now unused compiler-specific implementation'
2662,'','SI-7570 top-level codegen for toolboxes\nProvides a way to inject top-level classes, traits and modules into\r\ntoolbox universes.\r\n\r\nPreviously that was impossible, because compile and eval both wrap their\r\narguments into an enclosing method of a synthetic module, which makes it\r\nimpossible to later on refer to any definitions from the outside.'
2661,'','SI-6811 Split scala.util.parsing and move it to its own jar\n'
2660,'JamesIry','SI-7582 Only inline accessible calls to package-private Java code\nThe inliner was using `isPrivate` / `isProtected` to determine access.\r\nThe fallthrough considered things to be (bytecode) public. This is okay\r\nin practice for Scala code, which never emits package private code.\r\n\r\nThis commit turns the logic around to use `!isPublic && !isProtected` to\r\nequate to "don\'t inline". This alone is enough to pass `run/t7582`.\r\n\r\nSecondly, we must check accessibility of the called symbol *and* its\r\nowner.\r\n\r\nReview by @JamesIry\r\n\r\nThe change to `ClassFileParser` was reviewed in person by @odersky'
2659,'adriaanm','SI-7584 Fix typer regression with by-name parameter types\nIt regressed in https://github.com/scala/scala/commit/fada1ef#L4L614. Partially reverting just\r\nthis change restores the correct behaviour:\r\n\r\n```patch\r\n-        if (sym.isStable && pre.isStable && !isByNameParamType(tree.tpe) &&\r\n+        if (treeInfo.admitsTypeSelection(tree) &&\r\n```\r\n\r\nThis patch embeds the check for by-name parameter types into\r\n`TreeInfo.isStableIdentifier`. That code already checks for\r\n`Symbol#isStable`, which exludes direct references to by-name\r\nparameters. But the additional check is required to deal with\r\nby-name parameters in function types, e.g `(=> Int) => Any`.\r\n\r\nOpen question: should we go further and embed this check in `isStable`?\r\n\r\nCurrently:\r\n\r\n    final def isStable        = isTerm && !isMutable && !(hasFlag(BYNAMEPARAM)) && (!isMethod || hasStableFlag)\r\n\r\nReview by @adriaanm'
2658,'','Use released STARR and skip locker by default.\nreview by @retronym, please'
2657,'','Merge JUnit support into master\nThis is follow up on #2656.\r\n\r\nThis PR merges commits from #2656 and moves WeakHashSet tests to junit (173e709) category.\r\n\r\nNote: there are two more commits in this PR which are just artifacts of merging 2.10.x into master.'
2656,'',"Add JUnit support\nAs discussed on [scala-internals](https://groups.google.com/d/msg/scala-internals/qPbD5d15kvA/p0Nn2-YKvtkJ) adding JUnit support is probably a good idea. We write unit tests in partest which wasn't designed for that.\r\n\r\nThis PR adds a basic infrastructure for running JUnit tests:\r\n\r\n  * an Ant task `test.junit` that runs all JUnit tests defined in `test/junit` directory\r\n  * an Eclipse project definitions that allows us one to import all the tests to Eclipse\r\n\r\nThere will be a follow up PR for master which merges this PR and migrates WeakHashMap test to be a junit test."
2655,'',' SI-7344 Specialize methods in private scopes\nThis performs method specialization inside a scope other than a {class, trait, object}: could be another method or a value. This specialization is much simpler, since there is no need to record the new members in the class signature, their signatures are only visible locally. It works according to the usual logic:\r\n - we use normalizeMember to create the specialized symbols\r\n - we leave DefDef stubs in the tree that are later filled in by tree duplication and adaptation\r\n\r\nThe solution is limited by [SI-7579](https://issues.scala-lang.org/browse/SI-7579): since the duplicator loses the sym annotations when duplicating, this expansion and rewiring can only take place in code that has not been subject to duplication. You can see the test case for an example.\r\n\r\nReview by @dragos, @paulp or @axel22.\r\n\r\nThis pull request is based on PR #2651, thus the two extra commits. Any help fixing [SI-7579](https://issues.scala-lang.org/browse/SI-7579) is welcome, I have no good solution for it yet.'
2654,'','SI-6622 Emit EnclosingMethod attribute for val-nested classes\nOtherwise, Java reflection reports them as member classes. This\r\nin turn causes Scala reflection to fail to conjure a class symbol\r\nfor them.\r\n\r\nWe use the corresponding getter method as the enclosing method.\r\n\r\nReview by @JamesIry, @xeno-by'
2653,'gkossakowski','SI-7433 Fix spurious warning about catching control throwable\nIn the same vein as SI-6994, such warnings should only be run\r\nin the typer phase, and not in later typechecking (usually in\r\nerasure.)\r\n\r\nWhy? After translation of pattern matching, we end up with:\r\n\r\n    case (ex8 @ _) => {\r\n    <synthetic> val x5: Throwable = ex8;\r\n    case11(){\r\n      if ({\r\n        case14(){\r\n          if (x5.$isInstanceOf[NullPointerException]())\r\n            matchEnd13(true)\r\n          else\r\n            case15()\r\n        };\r\n        case15(){\r\n          if (x5.$isInstanceOf[RuntimeException]())\r\n            matchEnd13(true)\r\n          else\r\n            case16()\r\n        };\r\n        case16(){\r\n          matchEnd13(false)\r\n        };\r\n        matchEnd13(x: Boolean){\r\n          x\r\n        }\r\n      })\r\n\r\nReview by @gkossakowski'
2652,'',"Removed sbt build.\nDifficult though it may be to accept, it must go. We couldn't keep it working\nwith active maintenance; after eight months of neglect there is no chance.\nNobody is working on it or using it. The code will remain in the history if\nanyone wants it.\n\nOne of the most annoying experiences one can have when building a new project\nis finding out one has been fiddling with an abandoned build system which\nisn't even expected to work. Sometimes I check out a scala project and there\nis a build.xml, a pom.xml, and a project directory. We should not be among\nthose who sow such build confusion."
2651,'',"SI-7343 Fixed phase ordering in specialization\nSpecialization rewires class parents during info transformation, and\r\nthe new info then guides the tree changes. But if a symbol is created\r\nduring duplication, which runs after specialization, its info is not\r\nvisited and thus the corresponding tree is not specialized.\r\n\r\nOne manifestation is the following:\r\n```\r\nobject Test {\r\n\r\n  class Parent[@specialized(Int) T]\r\n\r\n  def spec_method[@specialized(Int) T](t: T, expectedXSuper: String) = {\r\n     class X extends Parent[T]() \r\n     // even in the specialized variant, the local X class\r\n     // doesn't extend Parent$mcI$sp, since its symbol has\r\n     // been created after specialization and was not seen\r\n     // by specialzation's info transformer.\r\n     ...\r\n  }\r\n}\r\n```\r\nWe can fix this by forcing duplication to take place before specialization.\r\n\r\nReview by @dragos, @paulp or @axel22."
2650,'','SI-6221 inference with Function1 subtypes.\nThere appears to be no upper bound on the number of places we have to remove\ncalls to typeSymbol and introduce calls to baseType. This one was type\ninference for function parameter types: worked when expected type was A => B,\nbut not if there was an implicit conversion from A => B to the expected type.'
2649,'','revert ace7a61e663e8369cc50e527c990ee4c3751cb89\nThis change causes head/tail inconsistency as demonstrated in SI-7445.'
2648,'gkossakowski',"SI-7571 Allow nesting of anonymous classes in value classes\n5d9cde105e added deep prohibition of nested classes within\r\na value class. This has the undesirable side effect of\r\nprohibiting partial functions literals in method bodies\r\nof a value class.\r\n\r\nThe intention of that prohibition was to avoid problems\r\nin code using Type Tests, such as:\r\n\r\n    class C(val inner: A) extends AnyVal {\r\n      class D\r\n    }\r\n    def foo(a: Any, other: C) = a match { case _ : other.D }\r\n\r\nHere, the pattern usually checks that `a.$outer == other`.\r\nBut that is incongruent with the way that `other` is erased\r\nto `A`.\r\n\r\nHowever, not all nested classes could lead us into this trap.\r\nThis commit slightly relaxes the restriction to allow anonymou\r\nclasses, which can't appear in a type test.\r\nThe test shows that the translation generates working code.\r\n\r\nReview by @gkossakowski"
2647,'','merge 2.10.x to master\nReview by @gkossakowski'
2646,'','[backport] relax time constraint in duration-tck.scala (for Windows VMs)\n(cherry picked from commit 3e0fbc0193f0b6f58dc16dae3824677e9902dc7b)\r\n\r\nTo bring stability to https://scala-webapps.epfl.ch/jenkins/job/scala-nightly-windows-2.10.x/'
2645,'','SI-6747 Deprecate Range#{numRange,last,terminal}Element{s,}\nThere are already better replacements which expose less surprising behaviour.'
2644,'','[backport] SI-7498 ParTrieMap.foreach no longer crashes\nPreviously, the `split` method of the `ParTrieMap` iterator threw\r\nan exception when splitting a splitter that iterated over nodes\r\nwhose hash codes collide.\r\nThis was due to reusing the iterator of the list of colliding keys\r\nrather than creating a new splitter.\r\n\r\nThis commit changes the `subdivide` method to create a new\r\niterator using the factory method of the current trie map\r\niterator rather than returning a `LinearSeqLike` iterator.'
2643,'','Correct a typo.\nInspired by this bug report from Debian:\r\n\r\nhttps://rt.cpan.org/Ticket/Display.html?id=85962 .'
2642,'','SI-7564 Fix detection of reflective calls on Avian\nBase_1.scala checks whether reflection was used by inspecting\r\nthe stacktrace and looking for “java.lang.reflect.”.\r\n\r\nThe stacktrace looks differently on Avian and therefore the\r\ntest fails.\r\n\r\nThis change looks for “sun.reflect.” instead, which seems to\r\nwork on OpenJDK and Avian.'
2641,'','SI-6811 Remove scala.annotation.cloneable\n'
2640,'','Document exceptions thrown in some conversion methods of String\nIt is very frustrating when public facing methods in the Scala Standard library do not document the exceptions that they throw. So instead of bitterly complaining, I will put actions behind my words.'
2639,'paulp','SI-2464 Resiliance against missing InnerClass attributes\nA classfile in the wild related to Vaadin lacked the InnerClasses\r\nattribute. As such, our class file parser treated a nested enum\r\nclass as top-level, which led to a crash when trying to find its\r\nlinked module.\r\n\r\nMore details of the investigation are available in the JIRA comments.\r\n\r\nThe test introduces a new facility to rewrite classfiles.\r\n\r\nThis commit turns this situation into a logged warning, rather\r\nthan crashing. Code by @paulp, test by yours truly.\r\n\r\nReview by @paulp'
2638,'','Cleanup of crash output.\nI finally ran across the assert (or one of them) which produces such\r\nvoluminous output that it scares the cattle. When you see "decls" in an\r\nassert, run.\r\n\r\nAfter silencing that, I extended the journey into quieting the default crash\r\nmessage down, way down. I assume this will be met only with sighs of relief.\r\nAnd then most challenging of all for some reason, I convinced it to only print\r\nthe information once.\r\n\r\nVolume of crash data generated when reproducing the fsc bug shown below:\r\n```\r\n  Before this commit  1158 lines\r\n   After this commit    27 lines\r\n```\r\nPretty sure there\'s more information in the 27 lines. To reproduce the crash:\r\n```\r\nfsc src/library/scala/collection/immutable/IntMap.scala\r\nfsc src/library/scala/collection/immutable/IntMap.scala\r\n```\r\nThe first compile succeeds quietly; the second throws warnings out of the\r\ngate, then crashes. And the "after" output:\r\n```\r\n  error: Cannot create static reference to method equals because object GenMapLike$class has no source module\r\n error: fatal error:\r\n      while compiling: /scala/trunk/src/library/scala/collection/immutable/IntMap.scala\r\n         during phase: globalPhase=mixin, enteringPhase=cleanup\r\n      library version: version 2.11.0-20130606-052937-392858b4f6\r\n     compiler version: version 2.11.0-20130606-055515-1856bec71b\r\n   reconstructed args: -d /tmp\r\n\r\n    last tree to typer: Ident(key$2)\r\n        tree position: line 377 of /scala/trunk/src/library/scala/collection/immutable/IntMap.scala\r\n             tree tpe: Int\r\n               symbol: value key$2 (flags: <param> <synthetic>)\r\n    symbol definition: key$2: Int (a TermSymbol)\r\n       symbol package: scala.collection.immutable\r\n        symbol owners: value key$2 -> constructor IntMap$$anonfun$unionWith$2 -> anonymous class anonfun$unionWith$2\r\n            call site: object IntMap$Nil in package immutable in package immutable\r\n\r\n  == Source file context for tree position ==\r\n\r\n    374       }\r\n    375     case (IntMap.Tip(key, value), x) => x.updateWith[S](key, value, (x, y) => f(key, y, x))\r\n    376     case (x, IntMap.Tip(key, value)) => x.updateWith[S](key, value, (x, y) => f(key, x, y))\r\n    377     case (IntMap.Nil, x) => x\r\n    378     case (x, IntMap.Nil) => x\r\n    379   }\r\n    380\r\n```'
2637,'paulp','SI-7439 Avoid NPE in `isMonomorphicType` with stub symbols. …\n`originalInfo` can return null for stub symbols; deal with that\r\nas we used to before a regression in 016bc3d.\r\n\r\nAfter this change, we can once again delete A_1.class and still compile\r\ncode instantiating B_1. (A_1 is only referred to in a method signature\r\nof B_1 which is not called from our code.)\r\n\r\n\tscala> new B_1\r\n\twarning: Class A_1 not found - continuing with a stub.\r\n\tres0: B_1 = B_1@5284b8f\r\n\r\nIn practice, this situation arises when someone uses a third\r\nparty class that was compiled against other libraries not avaialable\r\non the current compilation classpath.\r\n\r\nReview by @paulp'
2636,'','SI-7515 Emit final in bytecode for final inner classes.\nAs we did before a regression in 18efdedfb / SI-5676.\r\n\r\nThis commit tightens up the condition in which the FINAL\r\nmodifier is ommitted; it now *only* does this for the module\r\nclasses of nested objects.\r\n\r\nReview by @JamesIry'
2635,'','SI-7151 Emit final in bytecode for final inner classes.\nAs we did before a regression in 18efdedfb / SI-5676.\r\n\r\nThis commit tightens up the condition in which the FINAL\r\nmodifier is omitted; it now *only* does this for the module\r\nclasses of nested objects.\r\n\r\nReview by @JamesIry'
2634,'','taming outer refs: anon-closures that retain fewer heap objects\nThis PR supersedes https://github.com/scala/scala/pull/2633\r\n\r\nOriginal discussion at https://groups.google.com/forum/#!topic/scala-internals/jQiRINTvhZQ\r\n\r\nreview by @JamesIry or @paulp\r\n'
2633,'','taming outer refs: anon-closures that retain fewer heap objects\n\r\nOriginal discussion at https://groups.google.com/forum/#!topic/scala-internals/jQiRINTvhZQ\r\n\r\nreview by @JamesIry or @paulp'
2632,'','SI-6754 Support @tailrec for extension methods.\n- move the annotation from the class method to the extension method.\r\n - rewrite recursive calls on in the method body to call the extension\r\n   method.\r\n\r\nReview by @paulp'
2631,'adriaanm',"SI-5022 Retain precise existentials through pattern matching\nFrom the dawn of scalac's existentials, the typer widens\r\nexistentials pt-s by substituting wildcard types in places\r\nof existential quantifiers.\r\n\r\nIn this example:\r\n\r\n    class ForSomeVsUnapply {\r\n      def test {\r\n        def makeWrap: Wrap = ???\r\n        def useRep[e](rep: (e, X[e])) = ()\r\n\r\n        val rep = makeWrap match {\r\n          case Wrap(r) => r\r\n        };\r\n\r\n        useRep(rep) // error\r\n      }\r\n    }\r\n\r\nthe type of `r` is the result of typechecking:\r\n\r\n    Apply(\r\n     fun = TypeTree(\r\n       tpe = (rep#12037: (e#12038, X#7041[e#12038]) forSome { type e#12038 })\r\n     args = Bind(r @ _) :: Nil\r\n    }\r\n\r\nThis descends to type the `Bind` with:\r\n\r\n    pt = (e#12038, X#7041[e#12038]) forSome { type e#12038 }\r\n\r\n`dropExistential` clobbers that type to `Tuple2#1540[?, X#7041[?]]`,\r\nwhich doesn't express any relationship between the two instances\r\nof the wildcard type. `typedIdent` sort of reverses this with a call\r\nto `makeFullyDefined`, but only ends up with:\r\n\r\n    pt = (Any#3330, X#7041[_1#12227]) forSome { type _1#12227; type e#12038 }\r\n\r\nI suspect that this existential dropping only makes sense outside of\r\ntypechecking patterns. In pattern mode, type information flows from the\r\nexpected type onwards to the body of the case; we must not lose precision\r\nin the types.\r\n\r\nFor SIP-18 friendly existentials, one `dropExistential` is invertable with\r\n`makeFullyDefined`, so this hasn't been such a big problem.\r\n\r\nThe error message improvement conferred by SI-4515 took a hit.\r\nThat might be a good example to consider when reviewing this change:\r\nDoes it tell us anything interesting about this `dropExistential`\r\nbusiness?\r\n\r\nReview by @adriaanm.\r\n\r\nIf we go forward with this, I can address the two FIXME's introduced in this patch before merging."
2630,'','SI-6308 Specialize methods that have some unspecialized params\nThis is a continuation of 1591c14e50, which didn\'t go far enough\r\nto handle method calls with a mix of specialized and unspecialized\r\ntype parameters.\r\n\r\nThis commit modifies `specSym` to calculate the residual type\r\nof the original method after specialized type parameters have\r\nbeen removed and the type environment of the candidate specialized\r\nvariant has been subsituted.\r\n\r\nFor example, here is trace of `specSym` when searcing for the\r\nspecialized variant of `f4` in the enclosed test:\r\n\r\n    tree             = Main.this.f4[Nothing, Int]\r\n    tree.tpe         = (a: Int, b: List[(Int, Nothing)])String\r\n    fun.tpe          = [B, A](a: A, b: List[(A, B)])String\r\n    residualTreeType = [B](a: Int, b: List[(Int, B)])String\r\n    memberType       = [B](a: Int, b: List[(Int, B)])String\r\n    env              = Map(type A -> Int)\r\n    doesConform      = true\r\n\r\nA few "todo" tests are included that highlight an endemic\r\nissue with the current specialization implementation: type\r\nparameters that show up after `uncurry` might be clones of\r\nthe original symbols from typer, if they have been through\r\na TypeMap (e.g. within a call to `uncurryTreeType`). So testing\r\nthem for existence with the `typeEnv` map is fruitless.\r\n\r\nNo amount of `atPhase` acrobatics can rescue us from this;\r\nwe need to transport this information in a symbol-cloning\r\nresiliant manner. Maybe Symbol Attachments?\r\n\r\nReview by @vladureche, /cc @d6'
2629,'xeno-by','SI-7558 Fix capture of free local vars in toolbox compiler\nIt was creating an `ObjectRef[<notype>]` because of a small\r\nbug in `capturedVariableType`.\r\n\r\nReview by @xeno-by'
2628,'xeno-by','SI-7364 Allow raw types in parent position in Java sources\nTo make this work, this commit simply restricts parent\r\ntype argument inference to Scala source files.\r\n\r\nThe surrounding code has also been refactored to avoid a var.\r\n\r\nReview by @xeno-by (last seen in this area in 40063b00)'
2627,'paulp','SI-7418 Avoid concurrent use of compiler in REPL startup\nEnable the tab completer *after* we\'re finished binding\r\n$intp and unleashing power mode on the asynchronous\r\nREPL startup thread.\r\n\r\nTested manually:\r\n - run qbin/scala\r\n - Paste "".toUp\r\n - Hit <TAB> like a maniac\r\n\r\nBefore this patch, the crash was reproducible almost every time.\r\nAfterwards, not the once.\r\n\r\nReview by @paulp'
2626,'xeno-by','SI-7556 Fix runtime reflection involving ScalaLongSignature\nScala type information is stored in classfiles in encoded in a String\r\nin the ScalaSignature annotation. When it is too big for a single\r\nString, it is split into an array of Strings in a different annotation,\r\nScalaLongSignature.\r\n\r\nThe enclosed test, with a class containing 3000 methods, uses the latter.\r\nIt exposes a bug in the way runtime reflection decodes that data.\r\n\r\nIt must concatentate and *then* decode, rather that the other way around.\r\n\r\nReview by @xeno-by'
2625,'',"SI-6899, prohibit dangerous, useless implicit conversions.\nIncrease eligibility requirements for implicit conversions, such that T => U\r\nis ineligible if\r\n```\r\nT <: Null    <or>   AnyRef <: U\r\n```\r\nThis has the salutary effect of allowing us to ditch 16 ridiculous implicits\r\nfrom Predef, since they existed solely to work around the absence of this\r\nrestriction.\r\n\r\nThere was one tiny impact on actual source code (one line in one file) shown\r\nhere, necessitated because the literal null is not eligible to be implicitly\r\nconverted to A via ```<:<```.\r\n```\r\ndef f[A](implicit ev: Null <:< A): A = null     // before\r\ndef f[A](implicit ev: Null <:< A): A = ev(null) // after\r\n```\r\nAs impositions go it's on the tame side."
2624,'','Revert "SI-7517 type constructors too eagerly normalized."\nThis reverts commit 14534c693d2eb6acafaf8244c14b5643388fbd67.\r\n\r\nIt turns out this approach was breaking the working variations\r\nin the submitted test case even as it was unbreaking the unworking\r\none, but I never managed to uncomment them. Fortunately retronym\'s\r\ntest case was not so lackadaisical.'
2623,'','Merge 2.10.x/2.10.2 into master.\n'
2622,'','Backport from paradise/macros\nFollow-up for https://github.com/scala/scala/pull/2577. Review @paulp @retronym'
2621,'paulp',"SI-7264 Initialize owner when searching for companion.\nFrom ClassSymbol:\r\n\r\n    protected final def companionModule0: Symbol =\r\n      flatOwnerInfo.decl(name.toTermName).suchThat(sym => sym.isModuleNotMethod && (sym isCoDefinedWith this))\r\n\r\n    protected final def flatOwnerInfo: Type = {\r\n      if (needsFlatClasses)\r\n        info\r\n      owner.rawInfo\r\n    }\r\n\r\nNote the call to `rawInfo`; in the enclosed test case, that gives\r\nus back an uninitialized type for the module class of `Foo`, and\r\nconsequently we don't find the companion for `Foo.Values`.\r\n\r\nThis commit forces the initialization of the owning symbol if it\r\nwas compiled in a prior run.\r\n\r\nIn addition, it adds a special case to `Run#compiles` for early\r\ninitialized symbols, which start out in life with the wrong owner.\r\nAs best as I can see, that complexity stems from allowing early\r\ninitialized members *without* return types to be used as value arguments\r\nto the super call, which in turn is needed to infer parent type arguments.\r\nThe situation is described a little further in existing comments of\r\n`typedPrimaryConstrBody`.\r\n\r\nThis bug is essentially another case of SI-6976. See the comments in pull\r\nrequest of that patch (https://github.com/scala/scala/pull/1910) for\r\ncommit archaeology that shows why we're reluctant to force the owner\r\ninfo more broadly than is done in this commit.\r\n\r\nReview by @paulp / @lrytz\r\n\r\nThis PR is more a suggestion, rather than a final proposal. I lack confidence that the cycles we're afraid of are tested, and the intuition to craft said tests retrospectively."
2620,'','new bytecode emitter, GenBCode (11th attempt)\n\r\nThis PR re-submission supersedes #2603 and takes into account review comments so far.\r\n\r\nCompared to the previous PR, pipelining is left for a future PR (same goes for "built-in" dead-code elimination and jumps-chain collapsing). This PR includes just the bytecode-emitter.\r\n\r\nLet\'s see what dbuild thinks about GenBCode (after changing in `ScalaSettings` the default for the `neo` option from GenASM as in this PR to GenBCode).\r\n\r\n\r\nreview by @gkossakowski or @JamesIry or @retronym or @paulp\r\n'
2619,'','SI-7375 ClassTag for value class aliases\nreifyRuntimeClass now always dealiases its argument prior to processing.'
2618,'JamesIry',"Finalized math.E and math.Pi.\nWithout this treatment these constants will not be inlined or folded, bloating\nbytecode and inhibiting optimization. Marking them @inline doesn't have any\nadditional effect, but I did it to futurize them in light of SI-7542."
2617,'xeno-by','Eliminate needless Options.\nMany of our core types have dedicated sentinels which serve perfectly to\ncommunicate "no value", even more perfectly than None. Saving a billion\nallocations is gravy.'
2616,'adriaanm','SI-7505 Test case for pattern matcher + type alias bug\nProgressed along with SI-7214 in acd74cae09.\r\n\r\nReview by @adriaanm'
2615,'adriaanm',"SI-7517 type constructors too eagerly normalized.\nI think 403eadd0f1 was largely a symptomatic remedy (not that\r\nwe shouldn't harden against such outcomes) and that this commit\r\ngets closer to the root causes. The unanticipated change to\r\ntest/files/run/t6113.check is like a cry of support from the jury box.\r\n```diff\r\n-Foo[[X](Int, X)]\r\n+Foo[AnyRef{type l[X] = (Int, X)}#l]\r\n```\r\nWe should continue to look upon calls to normalize with grave suspicion."
2614,'','Revert "SI-6039 Harden against irrelevant filesystem details"\nThis reverts commit b0758f5cb9d966b940933d48bdbb45d17a80de66.\n\nThis commit sent startup time through the roof, at least in some circumstances\n(it is presumably related to one\'s current working directory.)'
2613,'JamesIry','SI-6309 Test case for early-init / private[this] crasher.\nThis has worked since 98daf03, "Overhauled local/getter/setter name logic.".\r\n\r\nI didn\'t narrow the progression down to a particular part of the patch.\r\n\r\nJubilant review from the overhauler himself, @paulp.'
2612,'retronym',"SI-7533 Adds Symbol.isAbstract\nAmazingly enough, we've missed the fact that non-type symbols can also\r\nbe abstract. Having been enlightened by this, I'm exposing isDeferred\r\nand merging it along with isAbstractType and isAbstractClass into the\r\nunified Symbol.isAbstract method."
2611,'paulp',"SI-6841 Fix bug at the intersection of DelayedInit and named args\nThe DelayedInit transformation analyses the constructor to partition\r\nregular initialization from calls to super constructors / trait\r\ninitializers.\r\n\r\nIt failed to find such super calls if they were nested in a Block,\r\nwhich can happens when using named or default arguments.\r\n\r\nThis commit makes that code peer into Blocks to correctly partition\r\nthe constructor statements.\r\n\r\nThis change doesn't affect the result of run/t4680.scala, which was\r\nmentioned in nearby comments and which chronicles bugs with DelayedInit\r\nwhen used in inheritance hierarchies.\r\n\r\nReview by @paulp (the author of said comments)"
2610,'retronym','SI-7498 ParTrieMap.foreach no longer crashes\nPreviously, the `split` method of the `ParTrieMap` iterator threw\r\nan exception when splitting a splitter that iterated over nodes\r\nwhose hash codes collide.\r\nThis was due to reusing the iterator of the list of colliding keys\r\nrather than creating a new splitter.\r\n\r\nThis commit changes the `subdivide` method to create a new\r\niterator using the factory method of the current trie map\r\niterator rather than returning a `LinearSeqLike` iterator.\r\n\r\nReview by @retronym '
2609,'paulp','SI-7507 Fix lookup of private[this] member in presence of self type.\nIn the following code:\r\n\r\n\ttrait Cake extends Slice\r\n\r\n\ttrait Slice { self: Cake =>    // must have self type that extends `Slice`\r\n\t  private[this] val bippy = () // must be private[this]\r\n\t  locally(bippy)\r\n\t}\r\n\r\n`ThisType(<Slice>).findMember(bippy)` excluded the private local member on\r\nthe grounds that the first class in the base type sequence, `Cake`, was\r\nnot contained in `Slice`.\r\n\r\n\tscala> val thisType = typeOf[Slice].typeSymbol.thisType\r\n\tthisType: $r.intp.global.Type = Slice.this.type\r\n\r\n\tscala> thisType.baseClasses\r\n\tres6: List[$r.intp.global.Symbol] = List(trait Cake, trait Slice, class Object, class Any)\r\n\r\nThis commit changes `findMember` to use the symbol of the `ThisType`, rather\r\nthan the first base class, as the location of the selection.\r\n\r\nReview by @paulp'
2608,'JamesIry',"SI-7532 Fix regression in Java inner classfile reader\n395e90a modified the detection of top-level classes in\r\nClassfileParser in two ways:\r\n  1. used `Name#containsChar` rather than `toString.indexOf ...` (good!)\r\n  2. decoded the name before doing this check (bad!)\r\n\r\nThat code is actually only run for non-Scala classfiles, whose\r\nnames don't need decoding. Attempting to do so converted `R$attr`\r\nto `R@tr`, which no longer contains a '$', and was wrongly treated\r\nas a top level class.\r\n\r\nThis commit reverts the use of `decodedName`, and inlines the method\r\nto its only call site for clarity.\r\n\r\nReview by @paulp and @JamesIry (for 2.10.2-RC2 inclusion)"
2607,'adriaanm',"SI-7517 Fix higher kinded type inference regression\n - Discovered in 2.10.2-RC1\r\n - Ostensibly regressed in 7e52fb910b, which conceptually reverted\r\n   part of 0cde930b so that (mutable) TypeVars don't use structural equality.\r\n - But, does *not* fail if 7e52fb910b is cherry-picked directly after 0cde930b,\r\n   suggesting that it shone a light on a behaviour change in some other commit\r\n   in between the two.\r\n - Indeed, the true regression came in https://github.com/scala/scala/commit/e5da30b843#L5L3176\r\n - A targeted revert of e5da30b843 is undesirable, as we'd like SI-6846 to stay fixed\r\n\r\nWhat's happening here? In the enclosed test case, higher kinded type\r\ninference explores two possibilities:\r\n\r\n    Composed.this.Split[A]\r\n    K[[T]A[B[T]]]           // `Split[A]` dealiased\r\n\r\nThe difference in the flow of type inference can be seen from the diff\r\nbelow. Notice how now we no longer register `?K.addBound(Composed.this.Split)`,\r\nwe instead only register `?K.addBound(K)`\r\n\r\nReview by @adriaanm @paulp\r\n\r\n```patch\r\n--- sandbox/old.log 2013-05-30 00:27:34.000000000 +0200\r\n+++ sandbox/new.log 2013-05-30 00:28:28.000000000 +0200\r\n@@ -1,55 +1,114 @@\r\n ?K.unifyFull(Composed.this.Split[A])\r\n   ?K.unifySpecific(Composed.this.Split[A])\r\n-  ?K.addBound(Composed.this.Split)\r\n     ?B.unifyFull(T)\r\n       ?B.unifySpecific(T)\r\n       `-> false\r\n     ?B.unifyFull(Any)\r\n       ?B.unifySpecific(Any)\r\n       `-> false\r\n   `-> false\r\n   ?K.unifySpecific(L[[T]A[B[T]]])\r\n-  ?K.addBound(L)\r\n     ?B.unifyFull(B[T])\r\n       ?B.unifySpecific(B[T])\r\n       ?B.addBound(B)\r\n       `-> true\r\n     ?B.unifyFull(B[T])\r\n       ?B.unifySpecific(B[T])\r\n       ?B.addBound(B)\r\n       `-> true\r\n     ?B.unifyFull(B[T])\r\n       ?B.unifySpecific(B[T])\r\n       ?B.addBound(B)\r\n       `-> true\r\n     ?B.unifyFull(B[T])\r\n       ?B.unifySpecific(B[T])\r\n       ?B.addBound(B)\r\n       `-> true\r\n+  ?K.addBound(L)\r\n   `-> true\r\n ?K.unifyFull(Composed.this.Split[A])\r\n   ?K.unifySpecific(Composed.this.Split[A])\r\n-  ?K.addBound(Composed.this.Split)\r\n     ?B.unifyFull(x)\r\n       ?B.unifySpecific(x)\r\n       `-> false\r\n   `-> false\r\n   ?K.unifySpecific(L[[T]A[B[T]]])\r\n+    ?B.unifyFull(B[T])\r\n+      ?B.unifySpecific(B[T])\r\n+      ?B.addBound(B)\r\n+      `-> true\r\n+    ?B.unifyFull(B[T])\r\n+      ?B.unifySpecific(B[T])\r\n+      ?B.addBound(B)\r\n+      `-> true\r\n+    ?B.unifyFull(B[T])\r\n+      ?B.unifySpecific(B[T])\r\n+      ?B.addBound(B)\r\n+      `-> true\r\n+    ?B.unifyFull(B[T])\r\n+      ?B.unifySpecific(B[T])\r\n+      ?B.addBound(B)\r\n+      `-> true\r\n   ?K.addBound(L)\r\n+  `-> true\r\n+?K.unifyFull(Composed.this.Split[A])\r\n+  ?K.unifySpecific(Composed.this.Split[A])\r\n+    ?B.unifyFull(T)\r\n+      ?B.unifySpecific(T)\r\n+      `-> false\r\n+    ?B.unifyFull(Any)\r\n+      ?B.unifySpecific(Any)\r\n+      `-> false\r\n+  `-> false\r\n+  ?K.unifySpecific(L[[T]A[B[T]]])\r\n     ?B.unifyFull(B[T])\r\n       ?B.unifySpecific(B[T])\r\n       ?B.addBound(B)\r\n       `-> true\r\n     ?B.unifyFull(B[T])\r\n       ?B.unifySpecific(B[T])\r\n       ?B.addBound(B)\r\n       `-> true\r\n     ?B.unifyFull(B[T])\r\n       ?B.unifySpecific(B[T])\r\n       ?B.addBound(B)\r\n       `-> true\r\n     ?B.unifyFull(B[T])\r\n       ?B.unifySpecific(B[T])\r\n       ?B.addBound(B)\r\n       `-> true\r\n+  ?K.addBound(L)\r\n+  `-> true\r\n+?K.unifyFull(Composed.this.Split[A])\r\n+  ?K.unifySpecific(Composed.this.Split[A])\r\n+    ?B.unifyFull(x)\r\n+      ?B.unifySpecific(x)\r\n+      `-> false\r\n+  `-> false\r\n+  ?K.unifySpecific(L[[T]A[B[T]]])\r\n+    ?B.unifyFull(B[T])\r\n+      ?B.unifySpecific(B[T])\r\n+      ?B.addBound(B)\r\n+      `-> true\r\n+    ?B.unifyFull(B[T])\r\n+      ?B.unifySpecific(B[T])\r\n+      ?B.addBound(B)\r\n+      `-> true\r\n+    ?B.unifyFull(B[T])\r\n+      ?B.unifySpecific(B[T])\r\n+      ?B.addBound(B)\r\n+      `-> true\r\n+    ?B.unifyFull(B[T])\r\n+      ?B.unifySpecific(B[T])\r\n+      ?B.addBound(B)\r\n+      `-> true\r\n+  ?K.addBound(L)\r\n+  `-> true\r\n+?K.unifyFull(L[A])\r\n+  ?K.unifySpecific(L[A])\r\n+  ?K.addBound(L)\r\n+  `-> true\r\n+?K.unifyFull(L[A])\r\n+  ?K.unifySpecific(L[A])\r\n+  ?K.addBound(L)\r\n   `-> true\r\n```"
2606,'gkossakowski','Test for reading JDK 8 (classfile format 52) class files.\nThis commit includes a test for reading JDK 8 (classfile format 52)\r\nclass files, in particular default (aka defender) methods. It uses ASM\r\nto generate an interface with default methods then exercises that\r\ninterface from Scala.\r\n\r\nSurprisingly no changes are necessary to the Scala code base to support\r\nreading format 52 class files.\r\n\r\nBecause the test can only run under JDK 8, the JDK version is checked\r\nand the expected output is synthesized for previous versions.'
2605,'gkossakowski','SI-7149 Use a WeakHashSet for type uniqueness\nWe have an implementation of WeakHashSet in the compiler but it never cleans up its WeakReferences. The first commit in this PR replaces the implementation with one that does clean up. Along the way it modifies the interface to follow the standard scala.collection.mutable.Set interface so that it can eventually be moved into the main library should we choose to do so.\r\n\r\nCurrently type uniqueness is done via a HashSet[Type], but\r\nthat means the Types live through an entire compile session, even\r\nones that are used once. The result is a huge amount of unnecessarily\r\nretained memory. This commit uses a WeakHashSet instead so that Types\r\nand their WeakReferences are cleaned up when no longer in use.\r\n\r\nFinally, perRunCaches is also updated to use the WeakHashSet instead of a HashSet of WeakReferences because the former was never cleaning up unused WeakReferences.\r\n'
2604,'JamesIry','SI-7523 Deprecate abstract methods without result type\n'
2603,'','new bytecode emitter, GenBCode (10th attempt)\n\r\nThis PR re-submission supersedes #2575 and takes into account review comments so far.\r\n\r\nThe two last commits include tests for dead-code elimination and jump-chains collapsing, two rewritings that are always desirable and are thus "built-in". \r\n\r\nTwo other bytecode-level simplifications are also built-in to GenBCode:\r\n  - removing unused LabelNodes (where a `LabelNode` represents e.g. the target of a jump)\r\n  - removing redundant exception-entries (an exception entry is redundant provided it protects an instruction range that consists of nop instructions only)\r\n\r\nIn the first case, removal occurs after walking all of a method, collecting references to LabelNodes. Those LabelsNodes never seen during this walk are redundant. Given the procedure is straightforward, no test is necessary.\r\n\r\nAs for exception entries, each such entry lists the start and end instructions of the range being protected. Any executable instruction other than NOP means the exception-entry should stay. That\'s what `asm.optimiz.DanglingExcHandlers` implements.\r\n\r\n\r\nreview by @gkossakowski or @JamesIry or @retronym or @paulp'
2602,'JamesIry','Add Duration.toCoarsest method\n'
2601,'JamesIry','SI-7516 Revert "SI-7234 Make named args play nice w. depmet types"\nThis reverts commit 83c9c764b528a7a1c1d39c480d22c8e3a71d5a58.\r\n\r\nThe tests are shunted to \'pending\'.\r\n\r\nWhitespace fixes and identifier renaming were not reverted.\r\nWhy revert this seemingly innocous commit? 83c9c76 generates a ValDef whose\r\ntpt TypeTree has no original; this contains a reference to the symbol for `d`.\r\nresetAttrs and the retypecheck assigns a new symbol for d and leaves a the\r\nreference to the prior symbol dangling. The real bug is the resetAttrs concept.\r\n\r\nReview by @paulp'
2600,'','A test case for a recent LUB progression.\nA test distilled from a Lift example that compiles correctly\r\nunder 2.10.1, but not under 2.10.0.\r\n\r\nI pinpointed the progression to:\r\n\r\n  https://github.com/scala/scala/commit/a06d31f6#L0R6611\r\n\r\nChalk up another win for `dealiasWiden`.\r\n\r\nReview by @lrytz\r\n\r\nThanks to @nafg for the [example](https://gist.github.com/nafg/c701f7757c55a24a7db3).'
2599,'JamesIry','constructors phase refactoring for readability\nRebase of #2586.'
2598,'','Print raw types correctly.\nThe "For convenience, these are usable as stub implementations" bit has\r\ngenerated surprisingly few angry letters, but I noticed today it blows it on\r\nraw types. Or, used to blow it.\r\n```scala\r\n  /** As seen from class Sub, the missing signatures are as follows.\r\n  *  For convenience, these are usable as stub implementations.\r\n  *  (First one before this commitw as \'def raw(x$1: M_1)\'\r\n  */\r\n\r\n  def raw(x$1: M_1[_ <: String]): Unit = ???\r\n  def raw(x$1: Any): Unit = ???\r\n```'
2597,'adriaanm','SI-7520 bug in subtyping.\nisSubType, if given two SingleTypes, would check =:= and stop there. It is\nnecessary to continue with weakening the left hand side, because (for\ninstance) the singleton type on the left hand side could be a refinement\nclass carrying parents which are themselves single or constant types.'
2596,'xeno-by',"SI-7519 Less brutal attribute resetting in adapt fallback\nPrefers `resetLocalAttrs` over `resetAllAttrs`. The latter loses\r\ntrack of which enclosing class of the given name is referenced by\r\na `This` node which prefixes the an applied implicit view.\r\n\r\nThe code that `resetAllAttrs` originally landed in: https://github.com/scala/scala/commit/d4c63b#L6R804\r\n\r\nReview by @xeno-by. Let's run it by @odersky, too.\r\n\r\nI wonder: when would a `resetAllAttrs` *ever* be appropriate?"
2595,'','SI-7421 remove unneeded extra-attachement in maven deploy\nreview by @huitseeker'
2594,'','SI-7287 include all compiler sources in -src.jar\nreview by @paulp'
2593,'',"Make all numeric coercions explicit.\nOptimistically, this is preparation for a day when we don't let numeric types\ndrift with the winds. Even without the optimism it's a good idea. I found a\ncouple bugs in the process - how many people would see this one coming without\ncompiler help. One of these methods has an inappropriately wide return type.\n\n  def signum(x: Int): Int       = java.lang.Integer.signum(x)\n def signum(x: Long): Long     = java.lang.Long.signum(x)\n def signum(x: Float): Float   = java.lang.Math.signum(x)\n def signum(x: Double): Double = java.lang.Math.signum(x)\n\nManaging type coercions manually is a bit tedious, no doubt, but it's not\ntedious enough to warrant abandoning type safety just because java did it."
2592,'retronym','SI-7088 Array crasher in erasure.\nThe usual business where half our pattern matches are missing half the\nnecessary cases.'
2591,'','SI-7003 Partest redirects stderr to log file\nSome scalac output is on stderr, and it\'s useful to see that\r\nin the log file, especially for debugging.\r\n\r\nAdds a line filter for logs, specified as "filter: pattern"\r\nin the test source.\r\n\r\nBackslashes are made forward only when detected as paths.\r\n\r\nTest alignments:\r\n\r\nDeprecations which do not pertain to the system under test\r\nare corrected in the obvious way.\r\n\r\nWhen testing deprecated API, suppress warnings by deprecating\r\nthe Test object.\r\n\r\nCheck files are updated with useful true warnings, instead of\r\nrunning under -nowarn.\r\n\r\nLanguage feature imports as required, instead of running under -language.\r\n\r\nLanguage feature not required, such as casual use of postfix.\r\n\r\nHeed useful warning.\r\n\r\nIgnore broken warnings. (Rarely, -nowarn.)\r\n\r\nDebug output from the test required an update.\r\n\r\nReview by @khernyo since he originated the issue and has looked at the feature.\r\n\r\n'
2590,'','SI-7486 Regressions in implicit search.\nRevert e86832d7e8 and dd33e280e2.'
2589,'','SI-7486 Regressions in implicit search.\nRevert e86832d7e8 and dd33e280e2.'
2588,'','SI-7509 Avoid crasher as erronous args flow through NamesDefaults\nThe fix for SI-7238 caused this regression.\r\n\r\nThis commit marks taints whole Apply with an ErrorType if it\r\nhas an erroneous argument, so as to stop a later crash trying\r\nto further process the tree.\r\n\r\nReview by @lrytz'
2587,'','[backport] SI-7497 Use `osName startsWith "Mac OS X"` ...\n... instead of `osName contains "OS X"`\r\n\r\nSee http://mail.openjdk.java.net/pipermail/macosx-port-dev/2012-November/005148.html\r\nfor the reason why we don\'t follow developer.apple.com/library/mac/#technotes/tn2002/tn2110.'
2586,'',"constructors phase refactoring for readability (with speed also in mind)\n\r\nThe constructors phase has grown over time, with sub-transformations being added to the all-encompassing `transformClassTemplate()` on an as-needed basis.\r\n\r\nThis PR breaks that method apart, encapsulating each sub-transformation in a trait dedicated to it. Documentation has been thrown in, too.\r\n\r\nThe whole effort was motivated by an idea to achieve lower heap retention,\r\n  https://groups.google.com/forum/#!topic/scala-internals/jQiRINTvhZQ\r\nwhose implementation will be more approacheble once the constructors phase is more approachable. Thus this PR.\r\n\r\nreview by (it's been a while) @paulp\r\n"
2585,'','Concision contribution.\nUpdates to use more direct/concise types.'
2584,'',"SI-7410 REPL uses improved tools.jar locator\nSI-7410 REPL uses improved tools.jar locator\r\n    \r\nThe logic in partest for snooping around for tools.jar\r\nis moved to PathResolver, and ILoop uses it from there.\r\n    \r\nIf JAVA_HOME is toolless, check out java.home.\r\n    \r\nThe use case was that Ubuntu installed with `java` at\r\nversion 6 and `javac` at version 7; it's easy to wind\r\nup with JAVA_HOME pointing at the version 6 JRE, as\r\nI discovered.  It's confusing when that happens.\r\n\r\nI hate to say it, but several months ago @paulp asked me to refactor this out of repl to a place partest could use it, then partest got the cadillac, so this ports it back to repl if @paulp reviews it and thinks it's worthwhile.\r\n\r\nAlso, @paulp is most likely to dislike or have a better suggestion for the second commit, for legibility of debug strings, which is something one needs and uses all the time.\r\n\r\n"
2583,'','SI-7473 Bad for expr crashes postfix\nThis commit makes building PostfixSelect robust against a bad pos\r\non its operand, which can happen if a bad for expression results\r\nin an EmptyTree.\r\n\r\nReview by @paulp for his recent fix for munged while.\r\n'
2582,'xeno-by','Cache the most recently created SubstTypeMap.\nI discovered that a 1-element cache for SubstTypeMaps gave a 75-90% hit rate.'
2581,'','SI-6811 Deprecate scala.util.parsing.json\n'
2580,'adriaanm','SI-7265 Buy some time to fix s.u.Properties.isJavaAtLeast\n'
2579,'JamesIry',"SI-7502 removing non-existent element from ListMap leaves it unchaged.\nCurrent imperative version constructs a new ListMap regardless of\r\nthe fact the map doesn't contain the element. Replace it with the\r\ntail-recursive variant that conserves. Also replace some usages with\r\nthe invariant now held."
2578,'adriaanm',"SI-6138 Centralize and refine detection of `getClass` calls\n`getClass` is special cased in the compiler; this is described\r\nin in the comments on `Definitions.Any_getClass`.\r\n\r\nPart of this happens in `Typer#stabilize`. This was trying to determine\r\nif an Ident or Select node was a call to `getClass` by merits of the name\r\nof the tree's symbol and by checking that the its type (if it was a\r\nMethodType or PolyType) had no parameters in the primary parameter list.\r\n\r\nOverloaded user defined `getClass` methods confused this check. In the\r\nenclosed test case, the tree `definitions.this.getClass` had an\r\n`OverloadedType`, and such types always report an empty list of `params`.\r\n\r\nThis commit:\r\n\r\n  - changes `stabilize` to use `isGetClass`, rather than the\r\n    homebrew check\r\n  - changes `isGetClass` to consider a `Set[Symbol]` containing all\r\n    `getClass` variants. This moves some similar code from `Erasure`\r\n    to `Definitions`\r\n  - keeps a fast negative path in `isGetClass` based on the symbol's name\r\n\r\nReview by @adriaanm"
2577,'paulp','Backport from paradise/macros\nreview @paulp @retronym'
2576,'',"SI-7436 Varargs awareness for super param aliasing.\nDon't consider a super class parameter accessor to be\r\nan alias if it is a repeated. Parameter aliases are used\r\nto avoid retaining redundant fields in the subclass; but\r\nthat optimization is out of the question here.\r\n\r\nReview by @paulp"
2575,'','new bytecode emitter, GenBCode (9th attempt)\n\r\nThis PR re-submission supersedes #2529 and takes into account review comments so far.\r\n\r\nTesting against the community build will provide more information than isolated tests.\r\nBytecode tests are by their very nature fragile (e.g., testing first that pattern matching emits a chain of jumps, only to make sure a moment later that chain of jumps has been collapsed by GenBCode). Concrete ideas and examples on how to balance usefulness vs brittleness are welcome.\r\n\r\nReviews about the content proper of the PR are most welcome.\r\n\r\nreview by @gkossakowski or @JamesIry or @retronym or @paulp\r\n'
2574,'','SI-3425 erasure crash with refinement members.\nChecking that a refinement class symbol does not override any symbols does\r\nmean it will have to be invoke reflectively; but the converse is not true. It\r\ncan override other symbols and still have to be called reflectively, because\r\nthe overridden symbols may also be defined in refinement classes.\r\n```\r\nscala> class Foo { type R1 <: { def x: Any } ; type R2 <: R1 { def x: Int } }\r\ndefined class Foo\r\n\r\nscala> typeOf[Foo].member(TypeName("R2")).info.member("x": TermName).overrideChain\r\nres1: List[$r.intp.global.Symbol] = List(method x, method x)\r\n\r\nscala> res1 filterNot (_.owner.isRefinementClass)\r\nres2: List[$r.intp.global.Symbol] = List()\r\n```\r\nAnd checking that "owner.info decl name == this" only works if name is not\r\noverloaded.\r\n\r\nSo the logic is all in "isOnlyRefinementMember" now, and let\'s hope that\r\nsuffices for a while.'
2573,'','SI-7499 Additional test case for SI-7319\nFrom a duplicate ticket.\r\n\r\nReview by @paulp'
2572,'','Increase build.number to 2.10.3\nGets this branch ready for the next release in the 2.10.x series.\r\n\r\nreview @adriaanm'
2571,'',"Harden partest against duplicate paths.\nA serious issue: partest would launch the same test multiple times if a test\npath was given in multiple forms (e.g. absolute and relative paths.)\nUnfortunately all those tests would share the same logfile, output directory,\netc. which would predictably lead to explosions.\n\nSince overwriting classfiles while being loaded can lead to jvm core dumps,\nit's possible this is involved in recent jvm crashes and other test\nbreakdowns.\n\nThis commit also alters the default partest verbosity to only full print test\ntranscripts under --verbose."
2570,'','SI-7391 Always use ForkJoin in Scala actors on ...\n... Java 6 and above (except when the porperty\r\nactors.enableForkJoin says otherwise)\r\n\r\nLike SI-7236 and SI-7237, the logic in\r\nscala.actors.scheduler.ThreadPoolConfig.useForkJoin\r\n(which resulted in a different thread pool implementation\r\nbeing chosen) was causing random hangs in the test\r\nconcurrent-stream.scala when running on Avian.'
2569,'','SI-7391 Always use ForkJoin in Scala actors on ...\n... Java 6 and above (except when the porperty\r\nactors.enableForkJoin says otherwise)\r\n\r\nLike SI-7236 and SI-7237, the logic in\r\nscala.actors.scheduler.ThreadPoolConfig.useForkJoin\r\n(which resulted in a different thread pool implementation\r\nbeing chosen) was causing random hangs in the test\r\nconcurrent-stream.scala when running on Avian.'
2568,'',"Moves AbstractFileClassLoader to scala-reflect.jar\nIts string name was used in ReflectionUtils and became broken after repl\r\ngot factored out. This hints that that classloader belongs to where it is\r\nused, i.e. to scala-reflect.jar.\r\n\r\nMoreover AbstractFile is defined in scala-reflect.jar, so it's only\r\nlogical to also define a derived classloader in scala-reflect.jar."
2567,'','Make partest defaults quieter.\nOnly show failure transcipts under --verbose. Only show individual test\nsuccesses under --verbose. Regular verbosity gets a . for each success and a\nstraight list of test failures at the end of the run.\n\nChased down a couple other partest annoyances, such as partest-ack counting\n(and trying to run) tests more than once. Also cleaned up the orphan check and\nflag files people leave lying around when the move tests aside.'
2566,'','An attempt to make tests deterministic.\nThe nondeterminism presently showing itself in presentation/implicit-member is\na consequence of the presentation compiler tests relying on details of the\nbehavior of toString calls. We need to stomp this out, but it will take a\nwhile. Based on the check file changes enclosed with this commit, this will\nsuffice for the presentation compiler tests. A broader assault will have to\ntake place, but not yet.'
2565,'','SI-7427 stop crashing under -Ydebug.\nChange "dumpClassesAndAbort" to "devWarning". You can witness\r\nit happen like so.\r\n```\r\n  % scalac test/files/pos/t7427.scala -Ydebug -Xdev\r\n  ...\r\n  [running phase cleanup on t7427.scala]\r\n  [running phase icode on t7427.scala]\r\n  warning: !!! PJUMP(method matchEnd4)/GenICode$PJUMP\r\n    is not a control flow instruction\r\n  warning: !!! PJUMP(method case6)/GenICode$PJUMP\r\n    is not a control flow instruction\r\n  [running phase inliner on t7427.scala]\r\n  [running phase inlinehandlers on t7427.scala]\r\n```\r\nHaving now lived with this for months, I have no ambition to unravel the\r\nactual problem, I just want it to stop crashing.'
2564,'','sanitation of Infer.\nMerge frustration led me to stick to one file for a while.'
2563,'JamesIry','SI-7474 Parallel collections: End the exception handling madness\n"What\'s wrong with an API which non-deterministically returns either\r\ntype A or type B(Set(A, ...))?"\r\n\r\nThis is pretty much what the exception handling behavior of the\r\nparallel collections does: If exceptions of type A occur, either an\r\nexception of type A or an exception of type B, wrapping multiple\r\nexceptions of A\'s, are returned.\r\n\r\nThis behavior is incredibly broken and so unintuitive, that even\r\npeople writing tests don\'t handle it correctly.\r\nSee files/run/t5375.scala.\r\n\r\nConcerning “non-deterministic”:\r\nHow many exceptions are observed before the operation is aborted\r\ndepends on the machine, the available cores and hyper-threading,\r\nthe operating system, the threadpool implementation and\r\nconfiguration, the size of the collection and the runtime itself.\r\n\r\nIn fact, files/run/t5375.scala is failing on both jdk7u and Avian\r\nbecause of this issue.\r\n\r\nWith this change, we just pass the "first" exception which occurs.\r\nThis seems to be what C# and Java both do, too.\r\n\r\n“Why don\'t we wrap everything in CompositeThrowables?”\r\nEven consistently returning CompositeThrowable doesn\'t make much\r\nsense (because we have fail-fast behaviour and don\'t wait until\r\nall tasks have finished or have thrown an exception).\r\nTherefore, there is no useful semantic in having a\r\nCompositeThrowable which returns "some" exceptions.\r\n\r\nEither\r\na) gather and return all the exceptions or\r\nb) just return one, instead of wrapping a non-deterministic\r\n   number of exceptions into a completely unrelated wrapper type.\r\n\r\nConsidering that changing the parallel collection semantics in\r\nsuch a profound way as described in a) is out of question, the\r\nsecond option is chosen.\r\n\r\nAs soon as Scala targets Java > 7 Throwable#addSurpressed can be\r\nused to add further exceptions to the one which gets returned.'
2562,'',"SI-7494 Each plugin must only be instantiated once.\nThe old behavior was that Plugin.loadAllFrom took a distinct\r\nlist of plugin locations.\r\n            \r\nThe broken behavior incorrectly punted to the pruning\r\nalgorithm in Plugins.loadPlugins$pick.\r\n                        \r\nThe new behavior is to distinctify the list of class names\r\nto load.\r\n                                    \r\nThis is more robust; under the old scheme, specifying the \r\ncontinuations.jar under two file names would fail as\r\ndescribed in the ticket.\r\n                                                    \r\nPruning a plugin by disabling (-Xplugin-disable) or because\r\nit steps on someone else's phase name suffers the same\r\ndefect. There is no way to tell the plugin it has been\r\nbenched. And you know that global I gave you?  Can I\r\nhave it back?\r\n\r\nThe second commit enables some pending tests, and I'll\r\nsupplement them in a future commit.\r\n"
2561,'retronym','SI-7479 Make test/files/run/tailcalls.scala pass on Avian\n'
2560,'','[backport] SI-7497 Fix scala.util.Properties.isMac\nIt returned wrong values because it used the java.vendor\r\nproperty instead of os.name, as specified in\r\ndeveloper.apple.com/library/mac/#technotes/tn2002/tn2110.'
2559,'','SI-7497 Fix scala.util.Properties.isMac\nIt returned wrong values because it used the java.vendor\r\nproperty instead of os.name, as specified in\r\ndeveloper.apple.com/library/mac/#technotes/tn2002/tn2110.'
2558,'paulp','SI-5090: Expose the current size of ArrayBuilder\n'
2557,'','new bytecode emitter, GenBCode (8th attempt)\n\r\nThis PR re-submission supersedes https://github.com/scala/scala/pull/2529 and takes into account review comments so far. \r\n\r\nTesting against the community build will provide more information than isolated tests.\r\nBytecode tests are by their very nature fragile (e.g., testing first that pattern matching emits a chain of jumps, only to make sure a moment later that chain of jumps has been collapsed by GenBCode). Concrete ideas and examples on how to balance usefulness vs brittleness are welcome.\r\n\r\nReviews about the content proper of the PR are most welcome.\r\n\r\nreview by @gkossakowski or @JamesIry or @retronym or @paulp\r\n'
2556,'','Merge 2.10.x\nThis merges 2.10.2-RC1 into 2.11.0-M3.\r\n\r\nreview by @paulp'
2555,'','SI-7492 Remove -Ystruct-dispatch and associated code\nThis means that the private option is gone as well as the untested\r\ncode for no-cache and mono-cache and the non-working code for\r\ninvoke-dynamic.\r\n\r\npoly-cache is now always used. For the future it probably makes more\r\nsense to let the backend decide how it wants to treat structural\r\ndispatch instead of allowing the user to “mix and match” backends\r\nwith structural dispatch implementations.'
2554,'','Merge v2.10.1-326-g4f8c306 into master\n'
2553,'paulp','SI-7486 regression in implicit resolution.\nWhat a touchy beast the compiler is.'
2552,'',"Revert deprecations that break SBT\nThis reverts commit 7e9c21ffd38711c23f89b5650cc5a32cafe4cd20.\r\n\r\nThis is still used by SBT; we'll give it a touch longer\r\nto switch to Murmur3.\r\n\r\nAlso partially reverts ac990c1bc.\r\n\r\nReview by @soc @huitseeker"
2551,'',"Merge/v2.10.1 326 g4f8c306 to master\n```\r\ngit merge 77437ff\r\ngit merge 0ae7e55\r\ngit merge -s ours 4e64a27\r\ngit merge v2.10.1-326-g4f8c306\r\n\r\ngit log --graph --oneline  $(git merge-base v2.10.1-326-g4f8c306 master)...v2.10.1-326-g4f8c306\r\n*   4f8c306 Merge pull request #2504 from scalamacros/ticket/7464\r\n|\\  \r\n| * 5e71539 SI-7464 allows FieldMirror.set to update vals\r\n* |   7415430 Merge pull request #2497 from scalamacros/topic/macro-qqq\r\n|\\ \\  \r\n| * | bc10715 easy way of writing not implemented macros\r\n* | |   988e27a Merge pull request #2547 from paulp/issue/bogus-warning\r\n|\\ \\ \\  \r\n| * | | b08c135 Fix for unreachable code warning.\r\n|/ / /  \r\n* | |   01716c8 Merge pull request #2537 from adriaanm/ticket-5886\r\n|\\ \\ \\  \r\n| * | | e9c3f87 SI-5886 Remove check for packed type conformance.\r\n* | | |   70e2ead Merge pull request #2515 from heathermiller/issue/6555\r\n|\\ \\ \\ \\  \r\n| |/ / /  \r\n|/| | |   \r\n| * | | 963c4a7 Actual SI-6555 fix, Scaladoc filter works WITH keyboard shortcuts too\r\n* | | |   487584c Merge pull request #2502 from viktorklang/wip-SI7383-EC-prepare-in-Future-apply-2.10-√\r\n|\\ \\ \\ \\  \r\n| |/ / /  \r\n|/| | |   \r\n| * | | b32d294 SI-7383 - Call ExecutionContext.prepare in Future.apply to allow for capturing local context like ThreadLocals and then re-establishing them prior to execution, as per intention of EC.prepare\r\n* | | |   76b8724 Merge pull request #2500 from phaller/topic/forkjoin-update\r\n|\\ \\ \\ \\  \r\n| |_|/ /  \r\n|/| | |   \r\n| * | | 77437ff SI-7442 Update bundled Fork/Join pool (JSR166y)\r\n* | | |   aa7568e Merge pull request #2494 from scalamacros/ticket/5923\r\n|\\ \\ \\ \\  \r\n| * | | | 4e64a27 [nomaster] removes duplication in inferImplicitValue\r\n| * | | | 3edde27 [nomaster] SI-7166 catches DivergentImplicit in c.inferImplicitXXX\r\n| * | | | b4da864 [nomaster] SI-7047 fixes silent for c.inferImplicitXXX\r\n| * | | | fdead2b [nomaster] SI-7291: No exception throwing for diverging implicit expansion\r\n| * | | | 8168f11 [nomaster] SI-7167 implicit macros decide what is divergence\r\n| * | | | bb73b96 [nomaster] macroExpandAll is now triggered in all invocations of typed\r\n| * | | | 90ac5c4 [nomaster] SI-5923 instantiates targs in deferred macro applications\r\n| * | | | 0c6927b [nomaster] temporarily breaks SI-5353\r\n| |/ / /  \r\n* | | |   0ae7e55 Merge pull request #2496 from igormoreno/2.10.x\r\n|\\ \\ \\ \\  \r\n| * | | | 7562499 Scaladoc: fixing small typo in PartialFunction.scala\r\n|  / / /  \r\n* | | |   616417b Merge pull request #2505 from scalamacros/topic/macros\r\n|\\ \\ \\ \\  \r\n| |/ / /  \r\n|/| | |   \r\n| * | | 5751ddd pull request feedback\r\n| * | | 75a3b88 replaces inferBootClasspath with a simple lookup at sun.boot.class.path\r\n| * | | 35c0145 removes the traces of always on debug diagnostics\r\n| * | | a3d03ab fixes a crash in ReflectionUtils.systemProperties\r\n| |/ /  \r\n* | |   082ca2e Merge pull request #2513 from scalamacros/topic/210x-breakage\r\n|\\ \\ \\  \r\n| * | | f1040ea fixes a checkfile breakage in 2.10.x\r\n|/ / /  \r\n* | |   3b08917 Merge pull request #2481 from martinmcnulty/socket-timeout\r\n|\\ \\ \\  \r\n| * | | 8325729 SI-5734 Allow setting of socket timeout for remote actors\r\n|  / /  \r\n* | |   1ee5cc4 Merge pull request #2456 from paulp/pr/jdk8-210x\r\n|\\ \\ \\  \r\n| * | | b2c67b3 SI-7398 Add support for java8 default methods\r\n| * | | fbb1363 Refactor DirectTest so java can be tested.\r\n|  / /  \r\n* | |   ece84b7 Merge pull request #2461 from scalamacros/ticket/7325\r\n|\\ \\ \\  \r\n| * | | 25f49cb literal() now assigns a position to the tree it produces\r\n| * | | cb1a427 SI-7325 cleans up corner cases of percent handling in StringContext.f\r\n| * | | a8edefc SI-7271 fixes positions of string interpolation parts\r\n|  / /  \r\n* | |   34d28aa Merge pull request #2458 from paulp/issue/7426-210\r\n|\\ \\ \\  \r\n| * | | df3cae7 SI-7426 Crash in pickler.\r\n|  / /  \r\n* | |   c34af08 Merge pull request #2473 from paulp/pr/2.10.2/5634\r\n|\\ \\ \\  \r\n| * | | 3abdaf4 SI-5634 eliminate overly verbose error message\r\n|  / /  \r\n* | |   fb99a1e Merge pull request #2488 from paulp/issue/7441\r\n|\\ \\ \\  \r\n| |/ /  \r\n|/| |   \r\n| * | e86832d SI-7441 Don't ramble on about inapplicable implicits.\r\n|  /  \r\n* |   5c77e01 Merge pull request #2472 from paulp/pr/2.10.2/7385\r\n|\\ \\  \r\n| * | d0a1f5b SI-7385 crash in erroneous code\r\n|  /  \r\n* |   0f74eda Merge pull request #2487 from paulp/issue/6091\r\n|\\ \\  \r\n| |/  \r\n|/|   \r\n| * 62cdd7f SI-6091 overeager warning for reference equality\r\n* 48e80cb Merge pull request #2440 from retronym/ticket/6771\r\n* 3009916 SI-6771 Alias awareness for checkableType in match analysis.\r\n```\r\n"
2550,'','[nomaster] unbreaks test.bc\nThe optimizer behaves unexpectedly smartly, stripping off unused private\r\nmethods. Unfortunately, sometimes private methods might be compiled down\r\nto public Java methods, so stripping them off might lead to binary\r\nincompatibilities.\r\n\r\nThis particular commit recovers from this problem caused by\r\nhttps://github.com/scala/scala/commit/5e715396af.'
2549,'',"Prevent slash duplication.\nDon't add trailing slash to external doc URL if it already ends with\r\none."
2548,'','easy way of writing not implemented macros: now in master\nreview @retronym'
2547,'','Fix for unreachable code warning.\nOops, I miss when unreachable code was an error.'
2546,'xeno-by','SI-7375 ClassTag for value class aliases\nDon\'t know how one could have a "ClassTag" for a type alias; I\'d have thought\nthey would be disallowed by construction.'
2545,'',"SI-7482 Don't cook raw types after erasure.\n"
2544,'','Deprecate parameter names in scala.concurrent\nfor the purpose of being consistent.\r\nAlso switches to Future.successful iso\r\nPromise.successful(..).future for brevity\r\nin implementation code.'
2543,'','SI-7469 Remove @deprecated scala.util.logging\n'
2542,'','Read-eval-print : the script engine does not need print so make it lazy\nThis can have a dramatic effect on computing time in cases with big\r\nintermediate results but simple final one.'
2541,'','ScriptEngine.eval() forwards Error instead of new ScriptException\n'
2540,'',"SI-7201 scala-library's pom points to scaladoc url\nThe project/properties/info.apiURL pom property is used by SBT\r\nto link to an artifact's scaladoc.\r\n\r\nFor scala-library version $v, the url is http://www.scala-lang.org/api/$v/\r\n\r\nI verified the substitution works by inspecting the pom generated by `ant deploy.local`\r\n\r\nreview by @harrah or @jsuereth"
2539,'','SI-7484 Add @SupressWarning("rawtypes") to MainNode.java\n'
2538,'','SI-6488 Interrupt i/o threads on process destroy\nThe previous fix uses Thread.stop to stop the threads which\r\ndrain outputs, but should do something orderly.\r\n\r\nThis commit interrupts the threads, which must check isInterrupted\r\nbefore attempting further i/o.\r\n\r\nThe reading thread will suppress either the interruption or the\r\nIOException cited in the ticket.\r\n\r\nSimilarly, i/o handlers must preserve and communicate interrupted\r\nstatus.\r\n\r\nThe modest goal of this fix is to ameliorate any stack traces\r\nwhen the process is destroyed.\r\n\r\nThe test runs itself as a sample process with output.\r\n\r\nSupersedes https://github.com/scala/scala/pull/2478 which was corrupted by history.\r\n\r\nReview by @soc and @harrah, hurrah.'
2537,'',"SI-5886 Remove check for packed type conformance.\nNothing breaks. Why did by-name arguments have this extra check?\r\nWhat's the difference to a () => T?\r\nNo one (including the original author) can think of a reason,\r\nso removing it to fix this bug seems acceptable.\r\n\r\nThe check was added originally in 8414eba\r\n\r\nreview by @paulp"
2536,'',"[backport #1727] SI-7359 cyclic nested java class\nThe original commit message:\r\n\r\nSI-6548 reflection correctly enters jinners\r\n\r\nWhen completing Java classes, runtime reflection enumerates their\r\nfields, methods, constructors and inner classes, loads them and\r\nenters them into either the instance part (ClassSymbol) or the\r\nstatic part (ModuleSymbol).\r\n\r\nHowever unlike fields, methods and constructors, inner classes don't\r\nneed to be entered explicitly - they are entered implicitly when\r\nbeing loaded.\r\n\r\nThis patch fixes the double-enter problem, make sure that enter-on-load\r\nuses the correct owner, and also hardens jclassAsScala against double\r\nenters that can occur in a different scenario.\r\n\r\nSince the fix is about Java-compiled classes, the test needs *.class\r\nartifacts produced by javac. Therefore I updated javac-artifacts.jar to\r\ninclude the new artifacts along with their source code.\r\n\r\nreview by @xeno-by"
2535,'','SI-7445 element order of ListMap.iterator should be reversed\nSince the underlying collection of ListMap is indeed a List,\r\norder-related methods of ListMap should respect the order\r\nof elements in the underlying List.\r\n\r\nSince the underlying List of ListMap stores elements in a\r\nreversed input order (i.e. LIFO), it is natural that\r\nListMap.iterator also returns elements in the same order.'
2534,'paulp','SI-3943 Test case for already-fixed Java interop bug\nConfirmed that this was fixed in edee27f59.\r\n\r\nReview by @paulp'
2533,'scala-jenkins','SI-6503 Fix doctype, remove processing instructions, ...\n... and add alt attributes to image tags.'
2532,'','SI-7480 Create test dir for Avian-specific tests ...\n... and add some tests to it.\r\nThis should have no effect until the build script is updated.'
2531,'','Create test dir for Avian-specific tests ...\n... and add some tests to it.\r\nThis should have no effect until the build script is updated.'
2530,'','SI-6424 Scaladoc: Use mapNodes.get(_) to avoid NoSuchElementException\nUse mapNodes.get(_) instead of mapNodes(_) to avoid NoSuchElementException.\r\n'
2529,'','new bytecode emitter, GenBCode (7th attempt)\n\r\nCompared to the previous submission this PR keeps line count reasonably small for all source files added.\r\n\r\nThis PR contains commits beyond those in the initial submission (that PR covered only the first two commits in this PR) with the aim of providing a better perspective on why the first two commits include the functionality they include. For example, dead-code elimination follows naturally bytecode generation, thus whenever GenBCode runs in the future it will perform dead-code elimination out of the box. That can be seen from commit "GenBCode tightens code before serializing classfiles"\r\n\r\nTesting against the community build will provide more information than isolated tests.\r\nBytecode tests are by their very nature fragile (e.g., testing first that pattern matching emits a chain of jumps, only to make sure a moment later that chain of jumps has been collapsed by GenBCode). Concrete ideas and examples on how to balance usefulness vs brittleness are welcome.\r\n\r\nReviews about the content proper of the PR are most welcome.\r\n\r\nreview by @gkossakowski or @JamesIry or @retronym or @paulp\r\n'
2528,'','SI-7479 Make test/files/run/tailcalls.scala pass on Avian\n'
2527,'','SI-7476 Add documentation to GenericTraversableTemplate\n'
2526,'','Fix formatting for couple of scaladocs in the compiler\nSource code on scaladoc for the virtual pattern matcher was not being\r\ncorrectly identified as such. Also, I had to use an html code tag instead\r\nof backticks when referring to the __match identifier, otherwise the\r\ndouble underscore would be treated as start-of-underline wiki markup.'
2525,'','SI-7469 Remove @deprecated scala.util.parsing.ast\n'
2524,'','SI-7469 Remove deprecated elements in Java{Conversions,Converters}\n'
2523,'','SI-7469 Remove @deprecated MurmurHash elements\n'
2522,'','SI-7469 Remove @deprecated scala.util.logging\n'
2521,'','SI-7469 Remove deprecated elements in s.u.parsing.combinator\n'
2520,'',"SI-7469 Make @deprecated elems in scala.concurrent private[scala]\nThey can't be removed yet because scala.actors depends on it."
2519,'','SI-6406 Restore deprecated API\nThe original patch for SI-6406 was intended for 2.10 but during\r\nthose volatile weeks of early autumn, it missed the boat.\r\n\r\nA deprecated method was incorrectly tagged at 2.10 and later\r\nremoved; this restores the method and its test, and resets\r\nthe deprecation clock to 2.11.\r\n\r\nThe deprecation tool should confirm that changes occur on the\r\ngit timeline as claimed.\r\n\r\nThis partially reverts f931833df8cc69d119f636d8a553941bf7ce2349.\r\n\r\nReview by @soc aka The Scourge of Deprecation'
2518,'',"SI-1786 incorporate defined bounds in inference\nAlso fixes SI-5459.\r\n\r\nLook, you don't have to redeclare the bounds, isn't it exciting? For instance,\r\nthere are eight places in JavaMirrors with this: ``` jTypeVariable[_ <: GenericDeclaration]``` After this code is in starr, those can look like this: ```jTypeVariable[_]```. Since TypeVariable's definition looks like this, ```interface TypeVariable<D extends GenericDeclaration>```, we already know that!"
2517,'','new bytecode emitter, GenBCode (6th attempt)\nCompared to the previous submission this PR keeps line count reasonably small for all source files added.\r\n\r\nThis PR contains commits beyond those in the initial submission (that PR covered only the first two commits in this PR) with the aim of providing a better perspective on why the first two commits include the functionality they include. For example, dead-code elimination follows naturally bytecode generation, thus whenever GenBCode runs in the future it will perform dead-code elimination out of the box. That can be seen from commit "GenBCode tightens code before serializing classfiles"\r\n\r\nTesting against the community build will provide more information than isolated tests.\r\nBytecode tests are by their very nature fragile (e.g., testing first that pattern matching emits a chain of jumps, only to make sure a moment later that chain of jumps has been collapsed by GenBCode). Concrete ideas and examples on how to balance usefulness vs brittleness are welcome.\r\n\r\nReviews about the content proper of the PR are most welcome.\r\n\r\nreview by @gkossakowski or @JamesIry or @retronym or @paulp\r\n'
2516,'','new bytecode emitter, GenBCode (5th attempt)\nCompared to the previous submission this PR keeps line count reasonably small for all source files added.\r\n\r\nThis PR contains commits beyond those in the initial submission (that PR covered only the first two commits in this PR) with the aim of providing a better perspective on why the first two commits include the functionality they include. For example, dead-code elimination follows naturally bytecode generation, thus whenever GenBCode runs in the future it will perform dead-code elimination out of the box. That can be seen from commit "GenBCode tightens code before serializing classfiles"\r\n\r\nTesting against the community build will provide more information than isolated tests.\r\nBytecode tests are by their very nature fragile (e.g., testing first that pattern matching emits a chain of jumps, only to make sure a moment later that chain of jumps has been collapsed by GenBCode). Concrete ideas and examples on how to balance usefulness vs brittleness are welcome.\r\n\r\nReviews about the content proper of the PR are most welcome.\r\n\r\nreview by @gkossakowski or @JamesIry or @retronym or @paulp\r\n'
2515,'','Actual SI-6555 fix, Scaladoc filter works now WITH keyboard shortcuts too\nCommit daefab18b8b0c170c372991022357413ec69b2af attempted to fix a bug related to Scaladoc filtering, meanwhile breaking Scaladoc keyboard shortcuts.\r\n\r\nBefore commit daefab18b8b0c170c372991022357413ec69b2af, Scaladoc\'s filter wouldn\'t consider the last character of a search term entered into the (left) Scaladoc filter pane, but toggling with the `tab` key between filter panes did work.\r\n\r\nAfter daefab18b8b0c170c372991022357413ec69b2af, Scaladoc\'s left pane filter correctly searches for the full search term, but pressing the `tab` key causes the "focus" of the input bar to be stuck on the filter panel in the right Scaladoc filter pane, rendering it useless.\r\n\r\nEnd result: annoying Scaladoc interface bug present in 2.10.1, but which wasn\'t present in 2.10.0.\r\n\r\nThis pull request fixes this, enabling both behaviors. The `tab` key toggle needed to be triggered on a `keydown` event, while everything else is fine to be triggered on a `keyup` event. This pull request enables the correct behavior by binding both a `keydown` and a `keyup` event rather than lumping everything all together in a `keyup` event (as was the case before).'
2514,'',"makes sense of implicit macros! now in master\nThis is a port of https://github.com/scala/scala/pull/2494 from 2.10.x. Depending on your preference we can either get it in 2.11.0-M3, since it's already been reviewed and merged in 2.10.2, or we can delay it until 2.11.0-M4.\r\n\r\nreview @paulp @retronym"
2513,'','fixes a checkfile breakage in 2.10.x\nThe breakage is caused by https://github.com/scala/scala/commit/fbb13630d3\r\nand https://github.com/scala/scala/commit/a8edefcef8 having been merged\r\nindependently from each other.'
2512,'','Par-Test includes log in transcript of failed exec\nThe previous behavior was that the Failure is generated\r\nbefore the log is appended to the transcript.\r\n\r\nThat meant that the summary transcripts wouldn\'t include\r\nthe log file. Luckily, the transcript would say something\r\nlike "jvm > showFail-run.log".\r\n\r\nSorry, I was just about to put this commit on my other partest PR, but for some reason it\'s been reviewed and merged already.  Thanks and the same note applies, that this improving tweak is deemed useful enough not to annoy with paltritude.  If that\'s not a word, I hope you\'ll take it as one.\r\n\r\nFor the record, I pursued this as part of the "empty util package" review.\r\n\r\n(My other branch redirects stderr to the log file, so it\'s nice to see the log.)\r\n\r\nReview by @paulp who takes a modern view'
2511,'scala-jenkins','General SIP-14 Future method implementation cleanup\nCleaning up implementations of Future methods to try to keep method size down to allow for easier JIT-ing (smaller method sizes) and increasing code reuse.\r\n\r\nReview by: @adriaanm & @phaller'
2510,'','SI-7442 Update bundled Fork/Join pool (JSR166y)\n- Updates ForkJoinPool and dependent classes to the latest jsr166y revisions:\r\n\r\n    ForkJoinPool.java:\r\n    Revision 1.185\r\n    Sat Feb 16 20:50:29 2013 UTC (2 months, 2 weeks ago) by jsr166\r\n\r\n    ForkJoinTask.java:\r\n    Revision 1.100\r\n    Tue Feb 5 17:09:54 2013 UTC (3 months ago) by jsr166\r\n\r\n    ForkJoinWorkerThread.java:\r\n    Revision 1.73\r\n    Wed Nov 21 19:54:39 2012 UTC (5 months, 2 weeks ago) by dl\r\n\r\n- Includes Akka-contributed `sun.misc.Unsafe` detection to support Android.\r\n  See changeset 06d685c1bbd8a0d058ee8a3f374569f8097f2acc\r\n\r\n- Adds private `CountedCompleter` class.\r\n  This class is only visible and used in `ForkJoinPool.java`.\r\n\r\n- Updates desired.sha1 for updated forkjoin.jar\r\n\r\n- Resolves binary compatibility issues by\r\n  (a) keeping package-private methods that are no longer used\r\n  (b) adding dummy implementation of package-private method\r\n      void registerWorker(WorkQueue w)'
2509,'','Applying deprecatedName to the scala.concurrent package to harmonize nam...\n...es. Also switching to Future.successful iso Promise.successful(..).future for brevity.\r\n\r\nReview by: @adriaanm & @phaller'
2508,'','Reimplementing blocking awaiting for Futures so only the blockers have t...\n...o pay for it.\r\n\r\nChanging so that only blockers pay for signalling by using CDL + onComplete, saving monitor-usage for non-blockers.\r\n\r\nReview by: @phaller & @adriaanm'
2507,'','SI-7462 Qualify types and terms which come from java.lang._\n'
2506,'','c.typeCheck(silent = true) now suppresses ambiguous errors\nOtherwise use cases like the one shown in the attached test (trying to\r\ntypecheck something, which leads to an ambiguous overload error) will\r\nmysteriously fail compilation.'
2505,'','some fixes for macros: one esoteric, and one quite critical\nreview @retronym'
2504,'',"SI-7464 allows FieldMirror.set to update vals\nThere's no reason to leave such sentinels in place inside a facility\r\ndesigned to circumvent usual restrictions of static types / visibility."
2503,'','SI-6039 Harden against irrelevant filesystem details\nThe symbol loader need not create and populate package symbols merely because\nthere is a directory somewhere. Every package created based on the existence\nof a directory should contain a classfile, either directly or indirectly.'
2502,'','SI-7383 - call ExecutionContext.prepare in Future.apply\nhttps://issues.scala-lang.org/browse/SI-7383\r\n\r\nReview by @phaller, @adriaanm\r\n\r\nExecutionContext.prepare is meant to be used as a way to capture context like ThreadLocals etc and then reinstating them when the the Runnable is executed.'
2501,'','Limit unnecessary calls to Type#toString.\nLogging revealed a few thousand calls to the often expensive Type#toString\nemerging from tailcalls. The error message was being generated for all methods\neven though it was only issued in rare cases (and for the particular tailrec\nfailure which made the call, extremely rare.)\n\nThe remaining boatload of unnecessary Type#toString calls are much harder to\nfix due to the design of "AbsTypeError" and the fact that the compiler\napproaches mutability like a cat approaches a loaded gun. See SI-6149.'
2500,'','SI-7442 Update bundled Fork/Join pool (JSR166y)\n- Updates ForkJoinPool and dependent classes to the latest jsr166y revisions:\r\n\r\n      ForkJoinPool.java:\r\n      Revision 1.185\r\n      Sat Feb 16 20:50:29 2013 UTC (2 months, 2 weeks ago) by jsr166\r\n\r\n      ForkJoinTask.java:\r\n      Revision 1.100\r\n      Tue Feb 5 17:09:54 2013 UTC (3 months ago) by jsr166\r\n\r\n      ForkJoinWorkerThread.java:\r\n      Revision 1.73\r\n      Wed Nov 21 19:54:39 2012 UTC (5 months, 2 weeks ago) by dl\r\n\r\n- Includes Akka-contributed `sun.misc.Unsafe` detection to support Android.\r\n  See changeset 06d685c1bbd8a0d058ee8a3f374569f8097f2acc\r\n\r\n- Adds private `CountedCompleter` class.\r\n  This class is only visible and used in `ForkJoinPool.java`.\r\n\r\nFixes SI-7442.'
2499,'','SI-7470 implements fundep materialization\nreview @adriaanm @odersky @retronym @paulp'
2498,'','fix typo in comment\n'
2497,'',"easy way of writing not implemented macros\nEven though it's easy to mark regular method bodies as stubs (using ???),\r\nthere's no simple way of doing the same for macro methods. This patch\r\nfixes the inconvenience."
2496,'','Scaladoc: fixing small typo in PartialFunction.scala\nFixing a one-letter typo in the documentation of PartialFunction.scala (from "an plain" to "a plain").'
2495,'','new bytecode emitter, GenBCode (4th attempt)\nCompared to the previous submission this PR adds functionality to GenBCode in stages, with additional documentation.\r\n\r\nTesting against the community build will provide more information than isolated tests.\r\nBytecode tests are by their very nature fragile (e.g., testing first that pattern matching emits a chain of jump, only to make sure a moment later that chain of jumps has been collapsed by GenBCode). Concrete ideas and examples on how to balance usefulness vs brittleness are welcome.\r\n\r\nReviews about the content proper of the PR are most welcome.\r\n\r\nreview by @gkossakowski or @JamesIry or @retronym or @paulp\r\n'
2494,'','makes sense of implicit macros!\nSupersedes https://github.com/scala/scala/pull/2464\r\n\r\nreview @paulp @retronym'
2493,'','Hardening against nulls for deserialization.\nWhen one attempts to populate data structures via deserialization,\nnulls tend to show up in unlikely or "impossible" places. Now\nthere are a few fewer.'
2492,'','Toward more organized typer state.\n'
2491,'','Absolutized paths involving the scala package.\nConfusing, now-it-happens now-it-doesn\'t mysteries lurk in the darkness. When\r\nscala packages are declared like this:\r\n\r\n  package scala.collection.mutable\r\n\r\nThen paths relative to scala can easily be broken via the unlucky presence of\r\nan empty (or nonempty) directory. Example:\r\n```\r\n  // a.scala\r\n package scala.foo\r\n class Bar { new util.Random }\r\n\r\n % scalac ./a.scala\r\n % mkdir util\r\n % scalac ./a.scala\r\n ./a.scala:4: error: type Random is not a member of package util\r\n   new util.Random\r\n            ^\r\n one error found\r\n```\r\nThere are two ways to play defense against this:\r\n\r\n- don\'t use relative paths; okay sometimes, less so others\r\n- don\'t "opt out" of the scala package\r\n\r\nThis commit mostly pursues the latter, with occasional doses of the former.\r\n\r\nI created a scratch directory containing these empty directories:\r\n\r\n  actors annotation ant api asm beans cmd collection compat\r\n concurrent control convert docutil dtd duration event factory\r\n forkjoin generic hashing immutable impl include internal io\r\n logging macros man1 matching math meta model mutable nsc parallel\r\n parsing partest persistent process pull ref reflect reify remote\r\n runtime scalap scheduler script swing sys text threadpool tools\r\n transform unchecked util xml\r\n\r\nI stopped when I could compile the main src directories even with all those\r\nempties on my classpath.'
2490,'','SI-6736, SI-6747 (alternative impl.) sort out Range boundary problems\nWhen Range contains more than Int.MaxValue elements,\r\nit should throw IllegalArgumentException before every\r\nmeaningful operation on it. It seems that the only\r\nreason of delaying this exception is for allowing "by"\r\noperation.\r\n\r\n> (Int.MinValue to 0).contains(4) # should throw exception\r\n> (Int.MinValue to 0 by 3).contains(4) # okay\r\n\r\nThe source of all evil here is irregular use of\r\n`numRangeElements`. It returns -1 if Range object is\r\ninvalid. Some use sites of `numRangeElements` properly check\r\nits validity before using it, but some of them miss this\r\ncheck and cause the integer overflow problems (for example,\r\nin `lastElements`).\r\n\r\nThis commit adds missing checks.\r\n\r\nAdditionally, because they (`numRangeElements`,`lastElement`,\r\n`terminalElement`) are completely undocumented and also have\r\nbetter public alternatives (`last`,`length`), I propose to\r\nmake them private.'
2489,'','Partest can --show-diff again after incremental report.\nA flag is set in NestUI to look for "diff" in the transcript of failing tests.\r\n\r\nThe diff is echoed after the incremental status line for the test.\r\n\r\nThe use case is that if you ctl-c, you don\'t see the summary transcripts.\r\n\r\nSorry to annoy, I know you want to do clean-up. It\'s the middle of the night and I needed it.  I needed it bad.\r\n\r\nReview or repulse by @paulp'
2488,'',"SI-7441 Don't ramble on about inapplicable implicits.\n"
2487,'',"SI-6091 overeager warning for reference equality\nDon't warn on eq and ne unless they're the real eq or ne."
2486,'','SI-5353 unsound Array lubs.\nPre-process types which cannot be represented at runtime before calculating\nlubs, lest we arrive at invalid conclusions.'
2485,'','new bytecode emitter, GenBCode (3rd attempt)\n\r\nCompared to the previous submission this PR adds functionality to GenBCode in stages, with additional documentation.\r\n\r\nTesting against the community build will provide more information than isolated tests.\r\nBytecode tests are by their very nature fragile (e.g., testing first that pattern matching emits a chain of jump, only to make sure a moment later that chain of jumps has been collapsed by GenBCode). Concrete ideas and examples on how to balance usefulness vs brittleness are welcome.\r\n\r\nAnd of course, reviews about the content proper of the PR are most welcome.\r\n\r\nreview by @gkossakowski or @JamesIry or @retronym or @paulp\r\n'
2484,'','new bytecode emitter, GenBCode (2nd attempt)\n\r\nCompared to the previous submission, this PR adds functionality to GenBCode in stages, with additional documentation.\r\n\r\nTesting against the community build will provide more information than isolated tests.\r\nBytecode tests are by their very nature fragile (e.g., testing first that pattern matching emits a chain of jump, only to make sure a moment later that chain of jumps has been collapsed by GenBCode).\r\n\r\nHowever concrete ideas and examples on how to balance usefulness vs brittleness are welcome.\r\n\r\nAnd of course, reviews about the content proper of the PR are most welcome.\r\n'
2483,'','Merge 2.10.x\nreview by @paulp, please'
2482,'','SI-7438 Avoid a performance bug in our JSR166 redistribution\nUse `execute` unconditionally, rather than `fork`, which in some\r\nfairly easy to provoke circumstances fails to utilize all available\r\ncores.\r\n\r\nThe longer term fix is the update to the latest version of the JSR133\r\ncode, and then the restore the use of `fork`.\r\n\r\nBenchmark and results:\r\n\r\n  https://gist.github.com/retronym/5495585\r\n\r\nReview by @phaller.\r\n\r\nEven if we do decide to update FJ in 2.10.2, I think that we should start with this commit. This gives us better "rollback-ability" of the FJ update in case of some unexpected problem.'
2481,'','SI-5734 Allow setting of socket timeout for remote actors\nTcpService is locked while connections are being established, preventing\r\nmessages being sent to remote nodes. There was no way to specify a connect\r\ntimeout, so the service was waiting for a ConnectException to be thrown if\r\nthe remote node was unavailable (which can take several minutes).\r\n\r\nAdded a system property to allow setting a socket connect timeout to\r\nprevent the TcpService from being locked for minutes at a time.\r\n\r\nDefault behaviour is unchanged, all tests pass and the patch has been\r\nrunning in production without issue.'
2480,'','SI-5734 Allow setting of socket timeout for remote actors\nTcpService is locked while connections are being established, preventing\r\nmessages being sent to remote nodes. There was no way to specify a connect\r\ntimeout, so the service was waiting for a ConnectException to be thrown if\r\nthe remote node was unavailable (which can take several minutes).\r\n\r\nAdded a system property to allow setting a socket connect timeout to\r\nprevent the TcpService from being locked for minutes at a time.\r\n\r\nDefault behaviour is unchanged, all tests pass and the patch has been\r\nrunning in production without issue.\r\n\r\nbackport to 2.10.x'
2479,'','new bytecode emitter, GenBCode, for now under a flag\nreview by @gkossakowski or @JamesIry or @retronym or @paulp'
2478,'',"SI-6488 Interrupt i/o threads on process destroy\nThe previous fix uses Thread.stop, but should do something orderly.\r\n\r\nThis commit interrupts the threads, which must check isInterrupted\r\nbefore attempting further i/o.\r\n\r\nSimilarly, i/o handlers must preserve and communicate interrupted\r\nstatus; see the test.\r\n\r\nThere was a recent ML thread on whether there is a judicious use of stop.\r\n\r\nIn this case, the process code owns the threads performing the reads, but also invoke arbitrary callbacks.\r\n\r\nOne could argue that the callbacks are arbitrary and this might be a Coursera exercise so use stop, or inversely, don't stop arbitrary callbacks; or stop if the thread is still alive after some period.\r\n"
2477,'','SI-6736, SI-6747 sort out Range boundary problems\nWhen Range contains more than Int.MaxValue elements,\r\nit should throw IllegalArgumentException before every\r\nmeaningful operation on it. It seems that the only\r\nreason of delaying this exception is for allowing "by"\r\noperation.\r\n\r\n> (Int.MinValue to 0).contains(4) # should throw exception\r\n> (Int.MinValue to 0 by 3).contains(4) # okay\r\n\r\nThe source of all evil here is irregular use of\r\n`numRangeElements`. It returns -1 if Range object is\r\ninvalid. Some use sites of `numRangeElements` properly check\r\nits validity before using it, but some of them miss this\r\ncheck and cause the integer overflow problems (for example,\r\nin `lastElements`).\r\n\r\nI think better strategy is to make `numRangeElements` lazy\r\nvalue and throw exception inside itself when initialized\r\nbut turned to be invalid.\r\n\r\nAdditionally, because they (`numRangeElements`,`lastElement`,\r\n`terminalElement`) are completely undocumented and also have\r\nbetter public alternatives (`last`,`length`), I propose to\r\nmake them private.'
2476,'','Partest PR up to the passing commit.\nRebased and dropped the failer in the hopes of merging this.'
2475,'','use relative symlink in distpack\nTo simplify building a release on jenkins, we run distpack-opt in one job,\r\nstore the `dists/` directory in a tar ball, archive that artifact and\r\ncopy it to the downstream jobs that package on windows and unix.\r\n\r\nTo make the tarball portable between machines, it must not use absolute symlinks.\r\n\r\nreview by @jamesiry'
2474,'','Add SupressWarning annotations to MainNode\n'
2473,'',"SI-5634 eliminate overly verbose error message\nIn fact I couldn't see where the error message described in the ticket is\nbeing produced, and I'm supposing it has already vacated the premises. I went\nthrough ClassfileParser and UnPickler, the two enclaves most likely to harbor\nthe spewer, and hardened the output. No printlns, tighter assertion messages,\nand string interpolation for aesthetics. We're not savages."
2472,'','SI-7385 crash in erroneous code\nLess crashing, more emitting errors.'
2471,'','SI-6532 emit debug info in compiled java.\nOur handful of java source files weren\'t being compiled with line numbers,\r\nsourcefile, and other debugger aids. I don\'t really know how to test this so\r\nI\'ll enclose an excerpt of the bytecode diff of scala.runtime.IntRef to show\r\nthat this change results in debug information.\r\n\r\n```diff\r\n 2,3c2,4\r\n >   Compiled from "IntRef.java"\r\n 4a6\r\n >   SourceFile: "IntRef.java"\r\n 53a62,67\r\n >       LineNumberTable:\r\n >         line 18: 0\r\n >       LocalVariableTable:\r\n >         Start  Length  Slot  Name   Signature\r\n >                0      10     0  this   Lscala/runtime/IntRef;\r\n >                0      10     1  elem   I\r\n 62a77,81\r\n >       LineNumberTable:\r\n >         line 19: 0\r\n >       LocalVariableTable:\r\n >         Start  Length  Slot  Name   Signature\r\n >                0       8     0  this   Lscala/runtime/IntRef;\r\n```'
2470,'','SI-7432 Range.min should throw NoSuchElementException on empty range\nFor consistency, range.max and range.min should throw\r\nNoSuchElementException on an empty range.'
2469,'',"Route -explaintypes through reporter.\nSick of seeing Console printlns during partest runs. You should not print\nanything to Console.{out,err} if it's ever going to happen outside\ndeveloperland."
2468,'','Actors - allow setting of timeout for opening remote Socket connections\nThis is a fix for the issue raised by Chris Marshall in SI-5734 which should alleviate problems where opening a Socket to a remote Node blocks (for up to a minute in our experience) not allowing other remote messages to be sent during this time.  An optional timeout can be set through a system property that is passed to the Socket when it is connected.\r\n\r\nDefault behaviour is unchanged, since the property defaults to 0, which signifies "no timeout" to the java.net.Socket.'
2467,'','Document null Executor/ExecutorService behaviour\nA null executor or ExecutorService results in a default fork join pool being created sized to the number of processors available. This should be documented as part of the API starting at this line:\r\n\r\nhttps://github.com/scala/scala/blob/master/src/library/scala/concurrent/ExecutionContext.scala#L68'
2466,'','SI-5353 unsound Array lubs.\nmergePrefixAndArgs tried too hard to finesse the Array lub. When\r\nthere is more than one distinct Array element type being lubbed,\r\nabandon the attempt to erase to any common Array type, because the\r\nstorage must match all the element types and Nothing will always\r\nbreak this. Simply erase to AnyRef.'
2465,'','SI-6784 Localize features imports in scala.swing\nReview by @paulp'
2464,'',"SI-5923 instantiate targs in deferred macro applications \nSupersedes the incorrect fix to SI-5923, which has been merged into trunk in https://github.com/scala/scala/pull/1844. See https://issues.scala-lang.org/browse/SI-5923 to learn more about the problem, which is now fixed.\r\n\r\nSubmitting this against 2.10.x, since the fix brings a significant feature on the table, which I wouldn't like to delay until 2.11. For instance, Play could use the fix to completely eliminate serialization boilerplate (http://mandubian.com/2012/11/11/JSON-inception/) /cc @mandubian.\r\n\r\nEven though the fix per se doesn't bring binary incompatibilities, it might cause source incompatibilities, namely: materialization macros, whose usages would compile under 2.10.2 wouldn't compile under 2.10.0 and 2.10.1. Not sure whether that's acceptable, but it's definitely worth a try.\r\n\r\nReview @paulp @retronym @adriaanm "
2463,'paulp','SI-7429 Fix checkinit build failure in Contexts\nThe recent refactoring in Contexts resulted in an uninitialized\r\nfield access. This wasn\'t deadly, as it was already compensating\r\nfor this by expecting a null value for `outer` during in the body\r\nof the constructor of Contexts when extended by NoContext.\r\n\r\nThis commit reworks that code a little to avoid dereferencing the\r\noverriden `outer` field.\r\n\r\nA similar mistake in `ImportContext` is also corrected.\r\n\r\n```\r\nticket/7429 ~/code/scala find src/compiler/ | grep Contexts | xargs touch\r\nticket/7429 ~/code/scala ant -Dscalac.args="-Xcheckinit"\r\nBuildfile: /Users/jason/code/scala/build.xml\r\n\r\ndesired.jars.uptodate:\r\n\r\nboot:\r\n\r\ninit:\r\n[artifact:dependencies] [WARNING] POM for \'biz.aQute:bndlib:pom:1.43.0:compile\' is invalid.\r\n[artifact:dependencies]\r\n[artifact:dependencies] Its dependencies (if any) will NOT be available to the current build.\r\n     [echo]        build time: 28 April 2013, 12:53:44\r\n     [echo]      java version: Java HotSpot(TM) 64-Bit Server VM 1.6.0_37 (1.6)\r\n     [echo]         java args: -Xmx1612M -Xss2M -server -XX:MaxPermSize=180M\r\n     [echo]        javac args:\r\n     [echo]       scalac args:  -Xcheckinit\r\n     [echo] scalac quick args:  -Xcheckinit\r\n     [echo]          git date: 20130428-125245\r\n     [echo]          git hash: f59be7a783\r\n     [echo]     maven version: 2.11.0-SNAPSHOT\r\n     [echo]      OSGi version: 2.11.0.v20130428-125245-f59be7a783\r\n     [echo] canonical version: 2.11.0-20130428-125245-f59be7a783\r\n...\r\nquick.comp:\r\n[quick.compiler] Compiling 1 file to /Users/jason/code/scala/build/quick/classes/compiler\r\n[quick.compiler] warning: there were 1 feature warning(s); re-run with -feature for details\r\n[quick.compiler] one warning found\r\n[propertyfile] Updating property file: /Users/jason/code/scala/build/quick/classes/compiler/compiler.properties\r\n[stopwatch] [quick.compiler.timer: 11.834 sec]\r\n...\r\n\r\nBUILD SUCCESSFUL\r\nTotal time: 19 seconds\r\nticket/7429 ~/code/scala qbin/scala -e \' "".reverse \'\r\n```\r\n\r\nReview by @paulp.'
2462,'','SI-6863 root cause fixed using factory of scala.runtime.*Ref\nThis PR supercedes https://github.com/scala/scala/pull/2460\r\n\r\nreview by @JamesIry or @retronym'
2461,'','Some fixes for string interpolation\nLong time no see!\r\n\r\nReview @paulp @retronym. Also see https://github.com/scala/scala/pull/2282'
2460,'','fixing root cause of SI-6863\nreview by @JamesIry'
2459,'','similar in purpose to -Ygen-javap but with some advantages: -Ygen-asmp\nEmitting a textual representation of bytecode is often useful. This PR adds that capability without requiring javap functionality.\r\n\r\nreview by @gkossakowski or @JamesIry or @paulp'
2458,'','SI-7426 Crash in pickler.\nI wonder if the supply of copy-pasted code, and the bugs\r\nwhich always accompany it, will ever run low. Here we have\r\na couple hundred lines of tree traversal which appears\r\nroughly identical in structure to a different couple hundred\r\nlines of tree traversal, except one calls methods called\r\nputXXX and the other calls methods called writeXXX.\r\n\r\nExcept there was one call to writeXXX among all the putXXX\r\ncalls. Guess where it was crashing.\r\n\r\nThis entire file should be expunged.'
2457,'','Documented lateMETHOD flag.\n'
2456,'','SI-7398 Add support for java8 default methods\nNow with test.'
2455,'','Add support for java8 default methods.\nAnd new starr including said support.'
2454,'','This is a cleanup of scaladoc code.\nIt fixes the following inefficiences or code style violations:\r\n\r\n\t- Explicit asInstanceOf calls.\r\n\t- Boxing symbols instead of using plain NoSymbol.\r\n\t- Matching `this` instead of late-binding.'
2453,'','SI-7422 GenASM populates and clears its maps within a Run\nreview by @dragos'
2452,'','cleanup of old stuff from the GenJVM era\nreview by @JamesIry or @gkossakowski'
2451,'',"check added instruction to ASM MethodNode\nGuarding against inadvertent sharing of ASM-level bytecode instructions across MethodNodes. In those rare occassions where it's needed, this check helps big time.\r\n\r\nreview by @gkossakowski or @JamesIry\r\n"
2450,'','SI-7421 remove unneeded extra-attachement in maven deploy\n'
2449,'','Corrects link in README.rst\nReview by @jsuereth'
2448,'',"Update links to old website, in preparation for launch.\nRemoved the contact form, since it's redundant with mailing lists and\r\nissue tracker.\r\n\r\nReview by @jsuereth"
2447,'','Created utility function for dropping by-name-ness.\nAnd applied it in three locations.'
2446,'','SI-7349 SI-7358 SI-7409 Par-Test checks and balances\nA failing scalacheck test generates a test failure instead of allowing the build to succeed.\r\nThe failure log is added to the transcript.\r\n\r\nUpdates Scalacheck to 1.10.1 and invokes it using the\r\ntest-interface API. This obviates kludgy output checking for result\r\nstatus.\r\n\r\nAlso, Partest testnum field width is sensitive to total tests.\r\n\r\nAllow the hyphens to line up on a column within the output\r\nfor a test category or "kind".\r\n\r\nUsers are notified when check files are updated, and also when the compiler crashes instead of updating their check files.\r\n\r\nSupersedes https://github.com/scala/scala/pull/2418\r\n\r\nReview by @soc @adriaanm @retronym'
2445,'','improvements, constructors phase (2nd attempt)\nThese improvements make the compiler emit code that is both more compact and somewhat faster, too.\r\n\r\nSupercedes https://github.com/scala/scala/pull/2409\r\n\r\nreview by @JamesIry or @gkossakowski or @retronym\r\n'
2444,'','SI-6943 warn on value class miscomparison.\nThere\'s a very dangerous situation running around when you\r\ncombine universal equality with value classes:\r\n\r\n  // All over your code\r\n  val x = "abc"\r\n  if (x == "abc") ...\r\n\r\n  // Hey let\'s make x a value class\r\n  val x = new ValueClass("abc")\r\n  // Uh-oh\r\n\r\nThere was until now no warning when comparing a value class\r\nwith something else. Now there is.'
2443,'','Updated jline and rebuilt.\nTwo years of atrophy. Now using sbt 0.12.3 and latest\r\nversions of jansi, etc.'
2442,'','SI-7403 Stream extends Serializable\nAdditionally, add @deprecatedInheritance to warn creators of\r\ncustom subclasses that the class will be sealed in the future.'
2441,'','SI-7402 List extends Serializable\nWhile we are all aware of the issues around Serialization,\r\nI think in this case it is perfectly sound and safe to make\r\nList serializable:\r\n\r\n- List is not an interface, it is the base type of an ADT.\r\n  Common behavior of its members should be reflected in the base type.\r\n- List is sealed, there is no chance of an user providing a new\r\n  non-serializable subtype of List.'
2440,'','SI-6771 Alias awareness for checkableType in match analysis.\nFailure to dealias the type of the scrutinee led the pattern\r\nmatcher to incorrectly reason about the type test in:\r\n\r\n    type Id[X] = X; (null: Id[Option[Int]]) match { case Some(_) => }\r\n\r\nBefore, `checkableType` returned `Id[?]`, now it returns `Some[?]`.\r\n\r\nReview by @adriaanm'
2439,'adriaanm',"SI-7369 Avoid spurious unreachable warnings in patterns\nUnreachability analysis draws on the enumerated domain of types\r\n(e.g sealed subclasses + null, or true/false), and also looks at all\r\nstable identifier patterns tested for equality against the same 'slot'\r\nin a pattern.\r\n\r\nIt was drawing the wrong conclusions about stable identifier patterns.\r\nUnlike the domain constants, two such values may hold the same value,\r\nso we can't assume that matching X precludes matching Y in the same\r\nslot in a subsequent case.\r\n\r\nFor example:\r\n\r\n    val X: Boolean = true; val Y: Boolean = true\r\n    def m1(t1: Tuple1[Boolean]) = t1 match {\r\n      case Tuple1(true) =>\r\n      case Tuple1(false) =>\r\n      case Tuple1(false) => // correctly unreachable\r\n    }\r\n    def m2(t1: Tuple1[Boolean]) = t1 match {\r\n      case Tuple1(X) =>\r\n      case Tuple1(Y) => // spurious unreachable warning\r\n    }\r\n\r\n    //\r\n    // Before\r\n    //\r\n    reachability, vars:\r\n    V2: Boolean ::= true | false// Set(false, Y, X, true) // = x1._1\r\n    V1: (Boolean,) ::= null | ... // = x1\r\n    equality axioms:\r\n      V2=true#4  \\/ V2=false#5  /\\\r\n     -V2=false#5 \\/  -V2=Y#3    /\\\r\n     -V2=false#5 \\/  -V2=X#2    /\\\r\n     -V2=false#5 \\/ -V2=true#4  /\\\r\n       -V2=Y#3   \\/  -V2=X#2    /\\\r\n       -V2=Y#3   \\/ -V2=true#4  /\\\r\n       -V2=X#2   \\/ -V2=true#4\r\n\r\n    //\r\n    // After\r\n    //\r\n    reachability, vars:\r\n    V2: Boolean ::= true | false// Set(false, Y, X, true) // = x1._1\r\n    V1: (Boolean,) ::= null | ... // = x1\r\n    equality axioms:\r\n      V2=true#4  \\/ V2=false#5  /\\\r\n     -V2=false#5 \\/ -V2=true#4\r\n\r\nReview by @adriaanm, who diagnosed the problem the other day by harnessing the emanations of the Scala Staircase. (Or was it the coffee?)"
2438,'',"Disabled failing bitset test.\nIt's a couple orders of magnitude out of whack when a test\r\ndemands a gigabyte of memory to pass. We might need to start\r\ncollecting per-test stats to avoid this kind of thing in the\r\nfuture. It's a huge waste of time."
2437,'','Quieting down a bunch of warnings.\nThis should offer a more soothing building experience.'
2436,'','     Minor overhaul of lub-producing typer methods.\nThere were a number of inefficiencies and unnecessary\r\nindirections in these methods. I beat them into better shape.\r\nSome highlights:\r\n\r\n - eliminated ptOrLub and similar. We must do something to\r\n   suppress peoples\' urge to tack a Boolean onto another method:\r\n   these methods returned (Type, Boolean) and in addition to\r\n   being horribly inefficient, it\'s vastly harder to follow the\r\n   logic. Anything which can be written with a Boolean parameter\r\n   or multi-value return can probably be written without the\r\n   Boolean parameter and/or the multi-value return.\r\n\r\n - eliminated all the vars in the lub producing methods.\r\n   Again, it\'s just a lot easier to understand code when I\r\n   don\'t have to keep scanning up and down to see where and\r\n   how previously declared names are being changed midstream.\r\n\r\n - added "sameWeakLubAsLub", which is the bit of information\r\n   which was being tacked onto ptOrLub. This lets them all find\r\n   out in advance whether the lub result implies further tree\r\n   adaptation is necessary.'
2435,'','SI-7355 Handle spaces in paths in Windows batch files.\nChanged "%1%" and %2% to "%~1" and %~2 to allow spaces\r\nin paths by surrounding quotes according to advice at:\r\n\r\n  http://stackoverflow.com/questions/473117/pass-path-with-spaces-as-parameter-to-bat-file\r\n  http://ss64.com/nt/syntax-args.html\r\n\r\nResubmission of #2429'
2434,'','SI-7402 List extends Serializable\nWhile we are all aware of the issues around Serialization,\r\nI think in this case it is perfectly sound and safe to make\r\nList serializable:\r\n\r\n- List is not an interface, it is the base type of an ADT.\r\n  Common behavior of its members should be reflected in the base type.\r\n- List is sealed, there is no chance of an user providing a new\r\n  non-serializable subtype of List.'
2433,'','SI-7408 Fix test by sorting results of getDeclaredClasses\nrun/t4023 can fail (and has already) because the order of elements\r\nin the reflection API is not specified and can differ between platforms\r\n(e. g. HotSpot and Avian) or even versions (Java 7 vs. Java 8).'
2432,'','Warn on selection of vals from DelayedInit subclasses.\nWhich are likely to yield null, if the program didn\'t start\r\nvia the `App`-s main method, or, more generally, if the\r\n`DelayedInit` is still pending initialization.\r\n\r\nThis is a common source of confusion for people new to\r\nthe language, as was seen during the Coursera course.\r\n\r\nThe test case shows that the usage pattern within Specs2\r\nwon\'t generate these warnings.\r\n\r\nReview by @lrytz, who once [noted](http://comments.gmane.org/gmane.comp.lang.scala.internals/13194) that \r\n\r\n> I understand what\'s going on here, but from a beginner\'s perspective this is not ideal.\r\n> Especially since "App" is made for beginners.\r\n\r\nI\'m also open to the idea of moving this out of the shadow of `-Xlint`. Perhaps it would be a touch more conservative to do that for `App`, rather than unknown `DelayedInit`-s.'
2431,'','Par-Test allows redefinition of srcDir by Ant\nSince srcDir is no longer used to extract the test kind from any\r\ngiven test path, it is especially benign to rely on the defness\r\nof srcDir in order to allow redefinition during an Ant run (as\r\nrequired by test.scaladoc).\r\n\r\nThe parameter is configured via the partest.srcdir property.\r\n\r\nMaybe the keyword should be def for definite values and\r\nred for redefinable values and ind for indefinite values.\r\nAnd ded for dedefinable values optionally reset to None.\r\n\r\nReview by @hubertp who spotted it'
2430,'',"SI-4365 nondeterministic failure in asSeenFrom\nUnder some order-dependent conditions (if source files arrive\r\nin one order it happens, in the other order it does not) more\r\nthan one set of type parameters are created for a given class.\r\nPreviously this would lead to a crash in asSeenFrom when a type\r\nparameter had to be matched up with a type application.\r\n\r\nNow when that situation arises I compare them by name and log\r\na dev warning if it hits. This does not risk anything undesirable\r\nhappening because the wayward type parameter's owner is always\r\nthe right class; it's only the class type parameters which don't\r\ninclude the wayward one. Since in a given type parameter list\r\nnames are unique, we have enough information to salvage the\r\nsearch."
2429,'','Si 7355 scala bat file cannot handle space in paths\n"good to merge" see discussion at\r\nhttps://github.com/scala/scala/pull/2384\r\nclosing this to reopen for 2.10.x\r\n---\r\nchanged "%1%" and %2% to "%~1" and %~2 to allow spaces in paths by surrounding quotes\r\naccording to advice at\r\nhttp://stackoverflow.com/questions/473117/pass-path-with-spaces-as-parameter-to-bat-file\r\nhttp://ss64.com/nt/syntax-args.html\r\n\r\ntest case:\r\nPS C:\\Users\\bjornr> scala -toolcp "test blank/myJar.jar" "test blank/myJar.jar"\r\n\r\nwith the suggested fix this test case will NOT print this error msg:\r\nblank/myJar.jar""=="-toolcp" was unexpected at this time.\r\n'
2428,'',"SI-7291: Don't throw exceptions while encountering diverging expansion.\nSince we don't throw exceptions for normal errors it was a bit odd that we don't do that for DivergingImplicit. As SI-7291 shows, the logic behind catching/throwing exception was broken for divergence. Instead of patching it, I rewrote the mechanism so that we now another SearchFailure type related to diverging expansion, similar to ambiguous implicit scenario.\r\nThe logic to prevent diverging expansion from stopping the search had to be slightly adapted but works as usual.\r\n\r\nThe upside is that we don't have to catch diverging implicit for example in the presentation compiler which was again showing that something was utterly broken with the exception approach.\r\n\r\nReview by @retronym."
2427,'','Fix BigDecimal documentation for primitive conversion methods.\n'
2426,'','SI-7324 jvm not cool with 255+ parameters\nFail those monster methods rather than generating bad bytecode.'
2425,'','Boil out some duplicated parser logic.\n'
2424,'JamesIry','SI-7399 : Take scala.concurrent.context.maxThreads into account\n'
2423,'','Better formatting for import clauses\nI think\r\n\r\n...\r\nimport p.{x, y}\r\n...\r\n\r\nis better than\r\n\r\n...\r\nimport p.{ x, y }\r\n...'
2422,'','Fix bug with null.asInstanceOf[type].\n'
2421,'','-Yshow-member-pos, print the positions of members.\nHere for instance is a command line which leverages the\r\noutput of this option to print the method bodies of all\r\nmethods called \'transformInfo\' found under src. Given\r\n1500 source files it accomplishes this in four seconds,\r\nthanks to -Ystop-after:parser.\r\n\r\n```\r\n% scalac -Yshow-member-pos sed -Ystop-after:parser \\\r\n    $(find src/compiler -name \'*.scala\') | \\\r\n    grep transformInfo | sed \'s/ # .*//;\' | \\\r\n    while read line; do echo "// $line" && gsed -n $line && echo; done\r\n```\r\nOr more simply, the start/end lines of each member of Random:\r\n```\r\n% scalac -Yshow-member-pos "" ./src/library/scala/util/Random.scala\r\n./src/library/scala/util/Random.scala\r\n20,134               class Random\r\n 33                  def nextBoolean\r\n 38                  def nextBytes\r\n 43                  def nextDouble\r\n 48                  def nextFloat\r\n 54                  def nextGaussian\r\n 59                  def nextInt\r\n 65                  def nextInt\r\n 70                  def nextLong\r\n 81,89               def nextString\r\n  82,86              def safeChar\r\n   83                val surrogateStart\r\n   84                val res\r\n 94,98               def nextPrintableChar\r\n [snip]\r\n```\r\nIt makes me sad I\'m always in the position of having to hack\r\nthe compiler to do this sort of thing. All we need is something\r\nlike -Yinsert-phase:Foo where Foo is a class implementing a\r\n(Phase, Tree) => Tree method, and the compiler runs all the\r\nunit.bodies through it after each phase, and then one could\r\neasily accomplish this in the privacy of one\'s own compiler.'
2420,'','SI-6675 Avoid spurious warning about pattern bind arity.\nIn 692372ce, we added a warning (under -Xlint) when binding\r\na `TupleN` in to a single pattern binder, which wasn\'t allowed\r\nbefore 2.10.0, and more often than not represents a bug.\r\n\r\nHowever, that warning overstretched, and warned even when\r\nusing a Tuple Pattern to bind to the elements of such a value.\r\n\r\nThis commit checks for this case, and avoids the spurious warnings.\r\n\r\nA new test case is added for this case to go with the existing\r\ntest for SI-6675:\r\n\r\n    $ ./tools/partest-ack 6675\r\n    % tests-with-matching-paths      ...  3\r\n    % tests-with-matching-code       ...  2\r\n    # 3 tests to run.\r\n    test/partest --show-diff --show-log                  \\\r\n      test/files/neg/t6675-old-patmat.scala              \\\r\n      test/files/neg/t6675.scala                         \\\r\n      test/files/pos/t6675.scala                         \\\r\n      ""\r\n\r\n    Testing individual files\r\n    testing: [...]/files/pos/t6675.scala                                  [  OK  ]\r\n\r\n    Testing individual files\r\n    testing: [...]/files/neg/t6675-old-patmat.scala                       [  OK  ]\r\n    testing: [...]/files/neg/t6675.scala                                  [  OK  ]\r\n    All of 3 tests were successful (elapsed time: 00:00:03)\r\n\r\nReview by @adriaanm. This change **does not close the ticket**, it just refines the warning.'
2419,'paulp','Merge v2.10.1-245-g5147bb2 to master\n... and the 2.11 incarnation of SI-7377, 962f88e.\r\n\r\nReview by @paulp'
2418,'','SI-7349 SI-7358 SI-7409 Par-Test inches forward\nA failing scalacheck test generates a test failure instead of allowing the build to succeed.\r\nThe failure log is added to the transcript.\r\n\r\nUpdates Scalacheck to 1.10.1 and invokes it using the\r\ntest-interface API.  This obviates kludgy output checking for result\r\nstatus.\r\n\r\nAlso, Partest testnum field width is sensitive to total tests.\r\n\r\nAllow the hyphens to line up on a column within the output\r\nfor a test category or "kind".\r\n\r\nUsers are notified when check files are updated, and also when the compiler crashes instead of updating their check files.\r\n\r\nReview by @soc and @adriaanm for build changes to use test-interface.jar.\r\nFurther review by @retronym who crept the feature.\r\n\r\nIllustrations of behavior follow.  Here it is in black and white.  (In color at a screen near you.)\r\n```\r\n$ partest files/neg/t4134.scala --run\r\nSelected 1348 tests drawn from 1 named test categories, specified tests\r\n\r\n# starting 1 test in neg\r\nok 1 - neg/t4134.scala\r\n\r\n# starting 1347 tests in run\r\nok    1 - run/absoverride.scala\r\nok    2 - run/amp.scala\r\nok    3 - run/adding-growing-set.scala\r\n```\r\n\r\nPartest --timeout "30 seconds" to time out the test run.  "I hang with Par-Test" no more!\r\n\r\n```\r\nok   62 - pos/five-dot-f.scala                    \r\nok   63 - pos/functions.scala                     \r\nThread pool timeout elapsed before all tests were complete!\r\n63/1067 passed, 1004 skipped (elapsed time: 00:00:30)\r\nTest Run PASSED\r\n```\r\n\r\n```\r\n$ partest files/neg/failtest.scala\r\nSelected 1 tests drawn from specified tests\r\n\r\n# starting 1 test in neg\r\n!! 1 - neg/failtest.scala                        [output differs]\r\n# 0/1 passed, 1 failed in neg\r\n\r\n##### Transcripts from failed tests #####\r\n\r\n# partest files\\neg\\failtest.scala\r\n% scalac files\\neg\\failtest.scala\r\nfailtest.scala:3: error: value really is not a member of object Foo\r\n    this.really("doesn\'t compile")\r\n         ^\r\none error found\r\n\r\n% diff files\\neg\\failtest-neg.log files\\neg\\failtest.check--- a\r\n+++ b\r\n@@ -1,4 +1,0 @@\r\n-failtest.scala:3: error: value really is not a member of object Foo\r\n-    this.really("doesn\'t compile")\r\n-         ^\r\n-one error found\r\n\r\n0/1 passed, 1 failed (elapsed time: 00:00:01)\r\nTest Run FAILED\r\n\r\napm@halyard /cygdrive/m/apm/projects/scala-second/test\r\n$ partest --update-check files/neg/failtest.scala\r\nSelected 1 tests drawn from specified tests\r\n\r\n# starting 1 test in neg\r\n++ 1 - neg/failtest.scala                        [updated check file]\r\n\r\n1/1 passed (elapsed time: 00:00:01)\r\nTest Run PASSED\r\n\r\napm@halyard /cygdrive/m/apm/projects/scala-second/test\r\n$ partest --update-check files/neg/failtest.scala\r\nSelected 1 tests drawn from specified tests\r\n\r\n# starting 1 test in neg\r\nok 1 - neg/failtest.scala                      \r\n\r\n1/1 passed (elapsed time: 00:00:01)\r\nTest Run PASSED\r\n\r\n```\r\n\r\n```\r\n$ partest --update-check files/neg/t7223.scala\r\nSelected 1 tests drawn from specified tests\r\n\r\n# starting 1 test in neg\r\nunhandled exception while transforming t7223.scala\r\n!! 1 - neg/t7223.scala                           [compilation failed]\r\n# 0/1 passed, 1 failed in neg\r\n\r\n##### Transcripts from failed tests #####\r\n\r\n# partest files\\neg\\t7223.scala\r\n% scalac files\\neg\\t7223.scala\r\nerror: no-symbol does not have an owner\r\n[** transcript abbreviated **]\r\n0/1 passed, 1 failed (elapsed time: 00:00:02)\r\nTest Run FAILED\r\n```\r\n'
2417,'','Simplify type bounds.\nI started out looking to limit the noise from empty type\r\nbounds, i.e. the endless repetition of\r\n```\r\n  class A[T >: _root_.scala.Nothing <: _root_.scala.Any]\r\n```\r\nThis led me to be reminded of all the unnecessary and\r\nin fact damaging overreaches which are performed during parsing.\r\nWhy should a type parameter for which no bounds are\r\nspecified be immediately encoded with this giant tree:\r\n```\r\n  TypeBounds(\r\n    Select(Select(Ident(nme.ROOTPKG), tpnme.scala_), tpnme.Nothing),\r\n    Select(Select(Ident(nme.ROOTPKG), tpnme.scala_), tpnme.Any)\r\n  )\r\n```\r\n...which must then be manually recognized as empty type bounds?\r\nTruly, this is madness.\r\n\r\n - It deftly eliminates the possibility of recognizing\r\n   whether the user wrote "class A[T]" or "class A[T >: Nothing]"\r\n   or "class A[T <: Any]" or specified both bounds. The fact\r\n   that these work out the same internally does not imply the\r\n   information should be exterminated even before parsing completes.\r\n - It burdens everyone who must recognize type bounds trees,\r\n   such as this author\r\n - It is far less efficient than the obvious encoding\r\n - It offers literally no advantage whatsoever\r\n\r\nEncode empty type bounds as\r\n```\r\n  TypeBounds(EmptyTree, EmptyTree)\r\n```\r\nWhat could be simpler.'
2416,'',"SI-7393, value classes leave no-ops in bytecode.\nCreated @pure annotation.\r\n\r\nIt's private[scala] and marks objects which can be assumed\r\nnot to side-effect on load."
2415,'','SI-7391 Always use ForkJoin in Scala actors\nLike SI-7236 and SI-7237, the logic in\r\nscala.actors.scheduler.ThreadPoolConfig.useForkJoin\r\n(which resulted in a different thread pool implementation\r\nbeing chosen) was causing random hangs in the test\r\nconcurrent-stream.scala when running on Avian.'
2414,'','[backport] SI-7391 Always use ForkJoin in Scala actors\n... on Java 6 and above.\r\n\r\nLike SI-7236 and SI-7237, the logic in\r\nscala.actors.scheduler.ThreadPoolConfig.useForkJoin\r\n(which resulted in a different thread pool implementation\r\nbeing chosen) was causing random hangs in the test\r\nconcurrent-stream.scala when running on Avian.'
2413,'','[backport] SI-7391 Always use ForkJoin in Scala actors\n... on Java 6 and above.\r\n\r\nLike SI-7236 and SI-7237, the logic in\r\nscala.actors.scheduler.ThreadPoolConfig.useForkJoin\r\n(which resulted in a different thread pool implementation\r\nbeing chosen) was causing random hangs in the test\r\nconcurrent-stream.scala when running on Avian.'
2412,'','[backport] SI-7237 Always choose ForkJoinTaskSupport\n... on Java 6 and above.\r\n\r\nForkJoinTaskSupport works on Hotspot, Avian and J9,\r\nwhile ThreadPoolTaskSupport causes the test\r\ntest/files/scalacheck/parallel-collections\r\nto reliably hang on all three.\r\n\r\nWe keep ThreadPoolTaskSupport around to keep the hope\r\nalive that we still have a glimpse of 1.5 support.'
2411,'',"SI-7388 Be more robust against cycles in error symbol creation.\n`Symbol#toString` was triggering `CyclicReferenceError` (specifically,\r\n`accurateKindString` which calls `owner.primaryConstructor`.)\r\n\r\nThe `toString` output is used when creating an error symbol to\r\nassign to the tree after an error (in this case, a non-existent\r\naccess qualifier.)\r\n\r\nThis commit catches the error, and falls back to just using the\r\nsymbol's name.\r\n\r\nReview by @paulp."
2410,'','Quiet down overloaded implicit warning.\nApparently implicit classes product both a method symbol and\r\na module symbol, both of which are marked implicit, which left\r\nthis warning code believing there was an overloaded implicit\r\nmethod.'
2409,'','improvements in constructors phase\nThese improvements make the compiler emit code that is both more compact and somewhat faster, too.\r\n\r\nreview by @JamesIry or @gkossakowski or @retronym'
2408,'','Absolute path in error message.\nAs soon as you have a directory called "language" lying around,\r\nyou will appreciate why the advice given regarding SIP-18\r\nshould be "import scala.language..." not "import language..."'
2407,'',"Rewrite TailCalls for performance and immutability.\nWhile logging symbols created after typer, I discovered that\r\nTailCalls was far and away the largest creator. It turns out\r\nthis was due to a bug where thousands of labels were eagerly\r\ncreated during tail call analysis, even if the method weren't\r\ntail recursive and no label would ever be required.\r\n\r\nThis commit shaves 10% off the total number of method symbol\r\ncreations (compiling quick.lib drops from 88K to 80K.)"
2406,'','SI-7362, crash in presentation compiler\n'
2405,'','Simplify type bounds.\nI started out looking to limit the noise from empty type\r\nbounds, i.e. the endless repetition of\r\n\r\n  ```class A[T >: _root_.scala.Nothing <: _root_.scala.Any]```\r\n\r\nThis led me to be reminded of all the unnecessary and\r\nin fact damaging overreaches which are performed during parsing.\r\nWhy should a type parameter for which no bounds are\r\nspecified be immediately encoded with this giant tree:\r\n```\r\n  TypeBounds(\r\n    Select(Select(Ident(nme.ROOTPKG), tpnme.scala_), tpnme.Nothing),\r\n    Select(Select(Ident(nme.ROOTPKG), tpnme.scala_), tpnme.Any)\r\n  )\r\n```\r\n...which must then be manually recognized as empty type bounds?\r\nTruly, this is madness.\r\n\r\n - It deftly eliminates the possibility of recognizing\r\n   whether the user wrote "class A[T]" or "class A[T >: Nothing]"\r\n   or "class A[T <: Any]" or specified both bounds. The fact\r\n   that these work out the same internally does not imply the\r\n   information should be exterminated even before parsing completes.\r\n - It burdens everyone who must recognize type bounds trees,\r\n   such as this author\r\n - It is far less efficient than the obvious encoding\r\n - It offers literally no advantage whatsoever\r\n\r\nEncode empty type bounds as\r\n\r\n  ```TypeBounds(EmptyTree, EmptyTree)```\r\n\r\nWhat could be simpler.'
2404,'',"SI-6775 Racy synchronization of specialized methods.\nWhen the new specialized method is created that overrides a method\r\nin a base class, cloneSymbol is called on a base method, rather than\r\non a non-specialized overrider.\r\n\r\nThis results in flags incorrectly (un)set on the clone, which include,\r\namong others, SYNCHRONIZED snd FINAL.\r\n\r\nTo fix the problem, we don't forward to specializedOverload, but\r\nrather clone overriding method directly."
2403,'',"SI-6775 Racy synchronization of specialized methods.\nWhen the new specialized method is created that overrides a method\r\nin a base class, cloneSymbol is called on a base method, rather than\r\non a non-specialized overrider.\r\n\r\nThis results in flags incorrectly (un)set on the clone, which include,\r\namong others, SYNCHRONIZED snd FINAL.\r\n\r\nTo fix the problem, we don't forward to specializedOverload, but\r\nrather clone overriding method directly."
2402,'paulp','SI-7377 Fix retypechecking of patterns on case companion alias\nSome ancient code in Typers switches from PATTERNmode to\r\nEXPRmode when encountering `stableF(...)`. It just\r\ntypechecks `stableF` and discards the arguments.\r\n\r\nTo the best of Martin\'s recollection, this has something\r\nto do with the need to typecheck patterns rather late in\r\nthe compiler, after `a.b` had been translated to `a.b()`\r\nin `Uncurry`. I\'m not able to motivate this with tests\r\nusing `-Xoldpatmat`; was there ever an even older pattern\r\nmatcher that ran *after* uncurry?\r\n\r\nWhat changed in 2.10.1 to expose this wrinkle? dfbaaa17\r\nfixed `TypeTree.copyAttrs` to copy the original tree.\r\nDuring the descent of `ResetAttrs`, sub-trees are duplicated\r\nbefore begin further transformed. Duplicating the `Match`\r\nin 2.10.0 would forget that the original tree of:\r\n\r\n    pat = (a: Int)Foo(_)\r\n          `----------`\r\n               `- TypeTree((a: Int)Foo), with original Select(..., "FooAlias")\r\n\r\nThe retypechecking would operate on the `MethodType`, rather\r\nthan the `Select`, which was not considered a stable\r\napplication.\r\n\r\nFor 2.10.x, I\'ve just tightened up the condition to only\r\nhit this if `args` is empty. I\'m almost certain that the code\r\ncan be removed altogether, and I\'ll do that when this is merged\r\nto master.\r\n\r\nReview by @paulp'
2401,'',"Remove unnecessary lower bounds on Eithers joinLeft and joinRight\nBecause <:< is contravariant in its first type parameter it is not\r\nnecessary that both type parameters of Either are lower bounded in\r\njoinLeft and joinRight.\r\n\r\n---\r\nI don't know if you want to have a ticket for this. If yes, just tell me and I create one."
2400,'','SI-7373 reduce visibility of scala.collection.immutable.{Vector,VectorIterator} constructors.\n'
2399,'','AbstractFile.getDirectory does not return null when outDir is "."\n'
2398,'','Change unrecognized scaladoc comments to C-style\nThis is a re-work of https://github.com/scala/scala/pull/2394'
2397,'',"Optimize matching on tuples\n```\r\n(e1,...,eN) match {\r\n  case (p1, ..., pN) if g =>\r\n  ...\r\n  case (q1, ..., qN) if g' =>\r\n  case _ if g'' =>\r\n}\r\n```\r\n\r\nis compiled by introducing the prelude\r\n\r\n```\r\nval x1 = e1\r\n...\r\nval xN = eN\r\n```\r\n\r\nand then referring directly to the `xi` that corresponding to the `i`th subpattern,\r\nin the translation of the match, rather than selecting the `_i` component of the tuple.\r\n\r\nThis eliminates the allocation of the tuple and the indirection of accessing its fields.\r\n\r\nreview by @paulp"
2396,'',"SI-7376 Scaladoc warns when discarding local doc comments with API tags\nDouble-star doc comments in non-dockable positions at the end of a block\r\nwill emit a warning only if API tags like @author are present, or under\r\n-Xlint.\r\n\r\nA real comment parser is applied early to probe for tags, to minimize\r\nad hoc testing or duplication, but warnings are suppressed. Residual\r\nad hockiness lies in precisely which tags to warn on.  Ad hoc or ad doc.\r\n\r\nThis fix is a stop gap; a richer solution would also report about other\r\ndoc locations that won't be processed.\r\n\r\nReview by @paulp, of whose idea this is a refinement.  Of whom?\r\n\r\nI'll also take advice from Mr Thor @author.  Not sure whom best to impose upon.  Upon whom?\r\n"
2395,'','Eliminated lateMETHOD.\nFlushed out and documented some of the associated mysteries.\r\n\r\nReview by @retronym.'
2394,'','In the spirit of https://github.com/scala/scala/pull/2285\nChanged unrecognized doc comments from Doc to C style, silencing scaladoc some\nmore\n\nThis has been obtained automatically by processing scaladoc log output, then checked manually\n(for e.g. comments tha tshould be recognized as scaladoc)'
2393,'',"SI-7345 Refactoring Contexts\nReview by @hubertp (maybe in person Tuesday afternoon?)\r\n\r\nI've left the commits pretty fine grained to aid review, happy to squash a little bit before merge."
2392,'',"SI-7367 scaladoc crash on constructing the model for annotations.\nScaladoc only checks primary constructor when building annotation\r\nmodel.\r\n\r\nHere we instead find the constructor matching the annotation's symbol.\r\nAlso change TreeFactory.makeTree to return TreeEntity rather than\r\nOption[TreeEntity] and force the caller check for EmptyTree."
2391,'adriaanm','Merge/v2.10.1 235 g4525e92 to master\nThe only notable conflict was from SI-6286 / 67c2d6d.\r\n\r\nReview by @adriaanm'
2390,'','Searching.binarySearch wrong results\nI got wrong results when using binarySearch in my project.\r\n\r\nReproducing:\r\nval a = Vector(1,2,4).search(0)\r\nval b = Vector(1,2,4).search(3)\r\nval c = Vector(1,2,4).search(5)\r\n\r\na = InsertionPoint(-1)\r\nb = InsertionPoint(1)\r\nc = InsertionPoint(2)\r\n\r\nwhereas it should be:\r\na = InsertionPoint(0)\r\nb = InsertionPoint(2)\r\nc = InsertionPoint(3)\r\n\r\nProposed fix in Searching line 89 ( private def binarySearch )\r\n\r\nis:\r\n      if (to - from == 1 ) InsertionPoint(from)\r\n\r\nshould be:\r\n      if (to - from == 1 ) InsertionPoint(from+1)\r\n\r\n'
2389,'',"SI-7360 Don't let a follow-up TypeError obscure the original error.\nWhen supplementing a fatal error message with context (current\r\ncompilation unit, tree, phase, etcetera), we must be cautious to\r\nnot to trigger another error which will obscure the original one.\r\n\r\nCurrently, `supplementErrorMessage` does its working a try catch\r\nthat only catches `Exception`. But this fails to catch\r\nCyclicReferenceError (<: TypeError <: Throwable), as was seen\r\nin a recent mailing list post by Greg Meredith.\r\n\r\nThis commit extends the catch clause.\r\n\r\nReview by @paulp"
2388,'','Removed all the Statistics code.\nI think we should acknowledge this is the wrong way to approach\r\nthe issue. Statistics can be gathered in a way which does not\r\npollute the compiler codebase and is not rigidly tied into\r\nstatically generated logic, via instrumentation. Here are some\r\nreasons why this code should go:\r\n\r\n - it greatly obfuscates the logic of key methods\r\n - it is untested\r\n - it cannot even be enabled without recompiling\r\n - it is inflexible in other ways\r\n - it is almost certainly hurting performance\r\n\r\nAs to the last point, are we really that confident that a\r\ndifference like this in a hot method isn\'t going to have any\r\nimpact? I\'m definitely not.\r\n\r\n```diff\r\n-        : getstatic     #                 // Field util/Statistics$.MODULE$:Lutil/Statist\r\n-        : invokevirtual #                 // Method util/Statistics$.canEnable:()Z\r\n-        : ifeq\r\n-       : getstatic     #                 // Field util/Statistics$.MODULE$:Lutil/Statisti\r\n-       : getstatic     #                 // Field TypesStats$.MODULE$:LTypesStats$;\r\n-       : invokevirtual #                 // Method TypesStats$.findMembersCount:()Lutil/S\r\n-       : invokevirtual #                 // Method util/Statistics$.incCounter:(Lutil/St\r\n-       : getstatic     #                 // Field util/Statistics$.MODULE$:Lutil/Statisti\r\n-       : invokevirtual #                 // Method util/Statistics$.canEnable:()Z\r\n-       : ifeq\r\n-       : getstatic     #                 // Field util/Statistics$.MODULE$:Lutil/Statisti\r\n-       : getstatic     #                 // Field TypesStats$.MODULE$:LTypesStats$;\r\n-       : invokevirtual #                 // Method TypesStats$.typeOpsStack:()Lutil/Stati\r\n-       : new           #                 // class Types$Type$$anonfun$\r\n-       : dup\r\n-       : invokespecial #                 // Method Types$Type$$anonfun$ ."<init>":(LTypes\r\n-       : invokevirtual #                 // Method util/Statistics$.pushTimer:(Lutil/Stat\r\n-       : goto\r\n-       : aconst_null\r\n-       : astore\r\n-       : lload_3\r\n-       : lstore\r\n-       : lload_1\r\n-       : ldc _w        #                 // long  l\r\n+        : lload_3\r\n+        : lstore\r\n+        : lload_1\r\n+        : ldc _w        #                 // long  l\r\n```'
2387,'','Interactive scaladoc: demand new typer run when done.\nAs of now, when further backgroundCompile is in the same typer run as\r\nscaladoc-fetching logic, it gets confused with stale symbols.\r\n\r\nPlease check if there are other inconsistencies in this PC method.\r\nReview by @odersky.'
2386,'',"SI-7349 Partest supports test-interface\nThis commit updates Scalacheck to 1.10.1 and invokes it using the\r\ntest-interface API.  This obviates kludgy output checking for result\r\nstatus.\r\n\r\nAs indicated in the commit message, the framework for scaladoc tests\r\nneeds a dash of sanity.  I envision that the runner will run scaladoc for\r\nus, and the test consist of code to doc + assertions about the result.\r\n\r\nTwo smaller files are merged to reduce the number of source files named\r\nDirectSomething or SomethingRunner.scala.  Or is it RunnerSomething.\r\n\r\nReview by @paulp who by now wishes he hadn't touched Par-Test. Or @phaller who perhaps wishes he'd kept the name, PHaller-Test. Or Par-Hell-Test.\r\n\r\nThis PR should be rebased after https://github.com/scala/scala/pull/2385 which is a babier step. (I'll do the rebase.)\r\n"
2385,'','SI-7358 Partest fails on scalacheck failure\nA failing test generates a test failure.\r\nThe failure log is added to the transcript.\r\n\r\nAlso, Partest testnum field width is sensitive to total tests.\r\n\r\nAllow the hyphens to line up on a column within the output\r\nfor a test category or "kind".\r\n\r\n```\r\n$ partest files/neg/t4134.scala --run\r\nSelected 1348 tests drawn from 1 named test categories, specified tests\r\n\r\n& starting 1 test in neg\r\nok 1 - neg/t4134.scala\r\n\r\n& starting 1347 tests in run\r\nok    1 - run/absoverride.scala\r\nok    2 - run/amp.scala\r\nok    3 - run/adding-growing-set.scala\r\n```\r\n\r\nReview by @soc who asked for it and @paulp who callled them transcripts instead of autopsies.'
2384,'','Update tool-windows.tmpl\nchanged "%1%" and %2% to "%~1" and %~2 to allow spaces in paths by surrounding quotes\r\naccording to advice at \r\nhttp://stackoverflow.com/questions/473117/pass-path-with-spaces-as-parameter-to-bat-file\r\nhttp://ss64.com/nt/syntax-args.html\r\n\r\ntest case:\r\nPS C:\\Users\\bjornr> scala -toolcp "test blank/myJar.jar" "test blank/myJar.jar"\r\n\r\nwith the suggested fix this test case will NOT print this error msg:\r\nblank/myJar.jar""=="-toolcp" was unexpected at this time.'
2383,'paulp','SI-6286 IllegalArgumentException handling specialized method.\nSpecialize assigns SpecialOverride info to a specialized method\r\neven when there is a further specialization that should be forwarded\r\nto.'
2382,'VladUreche','Remove scaladoc deprecated option.\nRemove -external-urls that had been previously deprecated in 2.10.'
2381,'','Nicer partest formatting of 4-digit test numbers\nBecause\r\n\r\n  ...\r\n  [partest] ok  999 - pos/t3534.scala\r\n  [partest] ok 1000 - pos/t261-ba.scala\r\n  ...\r\n\r\nis so much nicer than\r\n\r\n  ...\r\n  [partest] ok 999 - pos/t3534.scala\r\n  [partest] ok 1000 - pos/t261-ba.scala\r\n  ...'
2380,'',"Reifier -> AST Node test.\nIt's a Node-by-Node tour of the reifier's abilities and\r\noccasional foibles.\r\n\r\nThat is one spectacularly attractive checkfile."
2379,'scala-jenkins','SI-7350 Close all pipe threads when destroying a PipedProcess\nThis is a fix for issue 7350'
2378,'','Fix SI-6387 taking into account SI-7341.\nAnother try at SI-6387:\r\n\r\nIn 4e10b2c83 the logic of expandName was changed to preserve\r\noverriding symbols when expanding. This change broke the invariant\r\nthat the entire (field, getter, setter) triplet should be expanded\r\nif any of its components is.\r\n\r\nFix this invariant by expanding all above symbols for `accessed` in\r\na later stage, if an initially expanded symbol is an accessor.'
2377,'','SI-7341 checkinit build failure.\nIn 4e10b2c83 the logic of expandName was changed to preserve\r\noverriding symbols when expanding. This change broke the invariant\r\nthat the entire (field, getter, setter) triplet should be expanded\r\nif any of its components is.\r\n\r\nFix this invariant by expanding all above symbols for `accessed` in\r\na later stage, if an initially expanded symbol is an accessor.\r\n\r\nThis fixes a serious regression causing akka build failure on 2.10.x-SNAPSHOT.'
2376,'','Merge v2.11.0-m2-181-gc57c4f8 to java7\nReview by @gkossakowski'
2375,'','Merge 2.10.x into master.\n'
2374,'retronym','SI-6815 untangle isStable and hasVolatileType\n`Symbol::isStable` is now independent of `Symbol::hasVolatileType`,\r\nso that we can allow stable identifiers that are volatile in ident patterns.\r\n\r\nThis split is validated by SI-6815 and the old logic in RefChecks,\r\nwhich seems to assume this independence, and thus I don\'t think ever worked:\r\n\r\n```\r\nif (member.isStable && !otherTp.isVolatile) {\r\n  if (memberTp.isVolatile)\r\n    overrideError("has a volatile type; cannot override a member with non-volatile type")\r\n```\r\n\r\nIntroduces `admitsTypeSelection` and `isStableIdentifierPattern` in treeInfo,\r\nand uses them instead of duplicating that logic all over the place.\r\n\r\nSince volatility only matters in the context of type application,\r\n`isStableIdentifierPattern` is used to check patterns (resulting in `==` checks)\r\nand imports.\r\n\r\nreview by @retronym & @paulp\r\n\r\nI decided not to backport this to 2.10.x as it may introduce new errors.'
2373,'','Reduce visibility of implicit class tags.\n500 lines of generated boilerplate is *impossible to maintain*.\r\nGenerated code of this kind should never be allowed.\r\n\r\nThree lines of documentation, duplicated 100 times, cannot\r\nmasquerade as three hundred lines of documentation. If someone\r\nknows to look at the documentation of implicit ClassTags,\r\nthey *already know* about implicit ClassTags. It is wherever\r\n"match" is documented which needs this information (and I am\r\nsure we can express it more clearly, given the luxury of\r\nonly saying it once.)\r\n\r\nDocumenting each ClassTag with the same boilerplate is\r\ncomparable in utility to attaching such text to every Int.\r\n"An Int is a whole number within the range -2147483648 to\r\n2147483647 inclusive. It\'s usually used to represent how\r\nmany of something there are, such as \'5 bunnies\' or \'3\r\nwitty commit messages\', but you can store about anything\r\nin an Int if you can fit it into 32 bits."\r\n\r\nWe don\'t do that, because you\'re expected to discover what\r\nan Int is in a manner which generalizes to all the Ints you\r\nmay encounter. The situation with implicit ClassTags is\r\nimmediately analogous.'
2372,'','Merge 2.10.x\n\r\nreview by @paulp for:\r\n```\r\n    def unexpandedName(name: Name): Name = name lastIndexOf "$$" match {\r\n      case -1 | 0 => name\r\n```\r\n\r\nreview by @retronym for UnCurry conflict'
2371,'','Cleaning up the implicits in the reflection api\n'
2370,'paulp','SI-7319 Avoid unflushed error/warning buffers in startContext\nWhich can render a REPL inoperable, or doubly report errors in regular compilation.\r\n\r\nI plan to invest some much needed TLC into this area over on master as SI-7345; this PR tries to tread lightly.\r\n\r\nReview by the P-s: @hubertp / @paulp'
2369,'paulp','Read-eval-print : sometimes we do not need print so make it lazy\n'
2368,'lrytz','SI-7335 Simpler bootstrapping the standard library\n - mandate that Predef parents are defined in Predef.scala\r\n - fix bugs / add logging in related code\r\n\r\nReview by @namin (for confirmation that this will be okay for scala-virtualized), and @lrytz'
2367,'','Revert "SI-6387 Clones accessor before name expansion"\nThis reverts commit 4e10b2c833fa846c68b81e94a08d867e7de656aa.\r\n\r\nAdd relevant tests to pending.\r\n\r\nReview by @retronym.'
2366,'gkossakowski',"Merge branch 'master' into java7\n\r\nConflicts:\r\n\tbuild.xml\r\n\r\nAlso removed the warning about Java7 not being able to\r\nbuild the distribution, which doesn't apply to this branch.\r\n\r\nReview by @gkossakowski"
2365,'',"SI-6386 typed existential type tree's original now have tpe set\nTree reification fails for ExistentialTypeTree. The reason is that the\r\ntree passed for reification (see reifyTree at GetTrees.scala) must have\r\nnot null tpe (see reifyBoundType at GenTrees.scala), which is not true\r\nin the case of ExistentialTypeTree.\r\n\r\nWhy is it so? The tree passed to reifyTree was obtained in the reshape\r\nphase of reificationusing using original TypeTrees that represent pre-\r\ntyper representation of a type. The problem is that original's tpe for\r\nExistentialTypeTree is not set.\r\n\r\nSo the solution to the issue is to create ExistentialTypeTree's original\r\nin a such way that is has actual tpe set."
2364,'paulp',"SI-7329 duplicate default getters for specialized parameters.\nThe default getter is generated with @specialized annotation if the\r\ntype parameter corresponding to the type of the parameter is\r\nspecialized. Consequently specialize pass tries to generate overloads.\r\n\r\nRather than pruning overloads to exclude duplicates, let's notice\r\nthat default getter specialization is not needed at all:\r\n  - The dynamic scope of default getter doesn't include specialized\r\n    method or class constructor.\r\n  - generic default getter is called even when calling specialized\r\n    method.\r\n"
2363,'',"When skipping locker, print version of starr we are using.\nAs SI-7339 shows, it's easy to misunderstand behavior of `-Dlocker.skip=1`.\r\nWe can help by printing version of STARR we use for locker.\r\n\r\nThis is achieved by loading `compiler.properties` file and printing\r\n`build.number` property."
2362,'retronym','SI-4695, package object separate compilation.\nThe mechanism being used to notice when a package object\r\nis being compiled from source does not appear to work at all.\r\nI applied a different mechanism, which does appear to.'
2361,'paulp','SI-7337 Error out on missing -d directory.\nThis check was removed without comment in 3a30af154, the addition\r\nof JSR-223 support for the interpreter.\r\n\r\nAfter this commit, I manually tested that JSR-223 support works.\r\n\r\n    scala> import javax.script._, collection.JavaConverters._; val manager = new ScriptEngineManager; manager.getEngineByName("scala").eval("List(1)")\r\n    import javax.script._\r\n    import collection.JavaConverters._\r\n    manager: javax.script.ScriptEngineManager = javax.script.ScriptEngineManager@4418f61b\r\n    res1: Object = List(1)\r\n\r\n3a30af154 did not include a test case, so I don\'t know whether I\'ve\r\nbroken some other aspect of it. I tried the above as a `run` test,\r\nbut hit two problems, one of them seemingly our fault, and the other\r\na MacOS JDK wrinkle.\r\n\r\n  1. scala.reflect.internal.MissingRequirementError: object scala.runtime in compiler mirror not found.\r\n  2. java.lang.UnsatisfiedLinkError: no AppleScriptEngine in java.library.path\r\n\r\nI can\'t find my way to fix these, so JSR-223 remains untested. I don\'t\r\nthink that #2238 was really up to standard; it could handle additional\r\nreview, documentation, and testing. It might even be modularized so as\r\nnot to pollute the REPL itself.\r\n\r\nReview by @paulp'
2360,'phaller','SI-7080 improve boundary value checking for BitSet\nWhen BitSet accepts a very large integer such as Integer.MAX_VALUE,\r\ninteger overflow possibly occurs in the calculation of boundary value\r\n"nwords * WordLength". This faulty boundary condition causes\r\nempty-iterator problem like following:\r\n\r\nscala> import collection.mutable.BitSet\r\nimport collection.mutable.BitSet\r\n\r\nscala> val x = BitSet(Integer.MAX_VALUE)\r\nx: scala.collection.mutable.BitSet = BitSet()\r\n\r\nscala> x.iterator\r\nres0: Iterator[Int] = empty iterator'
2359,'',"some more build fixes\nnow i'm really-really done\r\n\r\nreally\r\n\r\nreview by @paulp \r\n\r\n------\r\n\r\nps: for those who skim commit messages, today's protip says:\r\n\r\nI recommend creating a build.properties file as follows:\r\n\r\n```\r\nlocker.skip=1\r\nstarr.use.released=1\r\n```\r\n\r\nThis will download the Scala version specified in starr.number,\r\nuse it to build quick, skipping locker."
2358,'retronym',"SI-7330 better error when pattern's not a value\nSomehow an applied type managed to sneak past the type checker in pattern mode.\r\nPatterns must be values, though.\r\n\r\n`case C[_] =>` was probably meant to be `case _: C[_] =>`\r\nAdvice is dispensed accordingly. (Generalizing the existing advice machinery.)\r\n\r\nreview by @retronym"
2357,'paulp','SI-7331 importers now import tree positions\nThis fixes the problem with toolbox-parsed trees not having positions.'
2356,'','Wonderfulizing isSameType\nReview by @adriaanm.'
2355,'',"SI-7300 single line comment in multi line comment\nThis issue was fixed in 3d5c675982 but didn't get any test cases,\r\nwhich are added by this commit.\r\n\r\nBefore, a single line comment that occurred before a closing multi\r\nline comment, like in `/*//*/`, was not treated as the beginning of\r\na nested comment, thus the shown example was parsed as a valid\r\ncomment.\r\n\r\nReview by @paulp"
2354,'','SI-7289 Less strict type application for TypeVar.\n(Proposed alternative for #2294)\r\n\r\nWhen a type constructor variable is applied to the wrong number of arguments,\r\nreturn a new type variable whose instance is `ErrorType`.\r\n\r\nLet\'s dissect the reported test case.\r\n\r\nDefine the first implicit:\r\n\r\n    scala> trait Schtroumpf[T]\r\n    defined trait Schtroumpf\r\n\r\n    scala> implicit def schtroumpf[T, U <: Coll[T], Coll[X] <: Traversable[X]]\r\n         |     (implicit minorSchtroumpf: Schtroumpf[T]): Schtroumpf[U] = ???\r\n    schtroumpf: [T, U <: Coll[T], Coll[X] <: Traversable[X]](implicit minorSchtroumpf: Schtroumpf[T])Schtroumpf[U]\r\n\r\nCall it explicitly => kind error during type inference reported.\r\n\r\n    scala> schtroumpf(null): Schtroumpf[Int]\r\n    <console>:10: error: inferred kinds of the type arguments (Nothing,Int,Int) do not conform to the expected kinds of the type parameters (type T,type U,type Coll).\r\n    Int\'s type parameters do not match type Coll\'s expected parameters:\r\n    class Int has no type parameters, but type Coll has one\r\n                  schtroumpf(null): Schtroumpf[Int]\r\n                  ^\r\n    <console>:10: error: type mismatch;\r\n     found   : Schtroumpf[U]\r\n     required: Schtroumpf[Int]\r\n                  schtroumpf(null): Schtroumpf[Int]\r\n                            ^\r\n\r\nAdd another implicit, and let implicit search weigh them up.\r\n\r\n    scala> implicitly[Schtroumpf[Int]]\r\n    <console>:10: error: diverging implicit expansion for type Schtroumpf[Int]\r\n    starting with method schtroumpf\r\n                  implicitly[Schtroumpf[Int]]\r\n                            ^\r\n\r\n    scala> implicit val qoo = new Schtroumpf[Int]{}\r\n    qoo: Schtroumpf[Int] = $anon$1@c1b9b03\r\n\r\n    scala> implicitly[Schtroumpf[Int]]\r\n    <crash>\r\n\r\nImplicit search compares the two in-scope implicits in `isStrictlyMoreSpecific`,\r\nwhich constructs an existential type:\r\n\r\n   type ET = Schtroumpf[U] forSome { type T; type U <: Coll[T]; type Coll[_] <: Traversable[_] }\r\n\r\nA subsequent subtype check `ET <:< Schtroumpf[Int]` gets to `withTypeVars`, which\r\nreplaces the quantified types with type variables, checks conformance of that\r\nsubstitued underlying type against `Schtroumpf[Int]`, and then tries to solve\r\nthe collected type constraints. The type var trace looks like:\r\n\r\n    [    create] ?T                       ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [    create] ?U                       ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [    create] ?Coll                    ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [   setInst] Nothing                  ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], T=Nothing )\r\n    [   setInst] scala.collection.immutable.Nil.type( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], U=scala.collection.immutable.Nil.type )\r\n    [   setInst] =?scala.collection.immutable.Nil.type( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], Coll==?scala.collection.immutable.Nil.type )\r\n    [    create] ?T                       ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [   setInst] Int                      ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], T=Int )\r\n    [    create] ?T                       ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [    create] ?U                       ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [    create] ?Coll                    ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [   setInst] Nothing                  ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], T=Nothing )\r\n    [   setInst] Int                      ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], U=Int )\r\n    [   setInst] =?Int                    ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], Coll==?Int )\r\n\r\nThe problematic part is when `?Int` (the type var originated from `U`) is registered\r\nas a lower bound for `Coll`. That happens in `solveOne`:\r\n\r\n    for (tparam2 <- tparams)\r\n      tparam2.info.bounds.hi.dealias match {\r\n        case TypeRef(_, `tparam`, _) =>\r\n          log(s"$tvar addLoBound $tparam2.tpeHK.instantiateTypeParams($tparams, $tvars)")\r\n          tvar addLoBound tparam2.tpeHK.instantiateTypeParams(tparams, tvars)\r\n        case _ =>\r\n      }'
2353,'','Cooler couleurs take 3\nrereredid #2350'
2352,'',"Add float version of the double NaN tests\nThe double version uncovered a bug in Avian already,\r\nso let's be safe and cover all the NaNs we have."
2351,'',"SI-7321 Memory leak in specialize on multiple compiler runs.\nCurrently the map is declared LinkedHashMap, which doesn't align with\r\nother caching maps that are cleared on every run. Linkedness is only\r\nneeded to ensure deterministic order on the generated specialized\r\nclasses. The same can be accomplished by sorting generated classes\r\na-posteriori.\r\n\r\nThe change can only affect the order in which specialized classes are added, which is ok\r\nto add in a minor release."
2350,'',"Topic/cooler couleurs rebased\nRebase of https://github.com/scala/scala/pull/2328, including https://github.com/scala/scala/pull/2332.\r\n\r\nThis is Paul's Testicolor with Test with DiffFilter so the test doesn't fail under Java 7.\r\n\r\nThe build refactor is also due to Paul, or to some emanation of Paul that continues coding after he goes to sleep.\r\n\r\nForgot mention Review by @paulp who has seen it all\r\n"
2349,'',"SI-6937 core type tags are no longer referentially unique\nType tag factory used to evaluate the provided type creator in the\r\ncontext of the initial mirror in order to maintain referential equality\r\nof instances of standard tags. Unfortunately this evaluation might fail\r\nif the mirror provided doesn't contain the classes being referred to.\r\nTherefore I think we should avoid evaluating type creators there.\r\n\r\nNote that failure of evaluation doesn't mean that there's something\r\nbad going on. When one creates a type tag, the correct mirror /\r\nclassloader to interpret that tag in might be unknown (like it happens\r\nhere). This is okay, and this is exactly what the 2.10.0-M4 refactoring\r\nhas addressed.\r\n\r\nSomething like `res2.typeTag[A].in(currentMirror)` should be okay."
2348,'','SI-7237 Always choose ForkJoinTaskSupport\nForkJoinTaskSupport works on Hotspot, Avian and J9,\r\nwhile ThreadPoolTaskSupport causes the test\r\ntest/files/scalacheck/parallel-collections\r\nto reliably hang on all three.'
2347,'','Merge 2.10.x: #2346 edition\nMerge #2346 into master'
2346,'','Make build even more regular\nOne target per project (set of source files).\r\nAlways build java sources.\r\n\r\nEaster egg: zinc support.'
2345,'',"SI-7321 memory leak in SpecializeTypes.\nCurrently the map is declared LinkedHashMap, whiich doesn't align\r\nwith other caching maps. Such map is only needed to ensure\r\ndeterministic order on the generated specialized classes. The same\r\ncan be accomplished by manually sorting generated classes.\r\n\r\nWhile refactoring I noticed some differences with the proposed code\r\nstyle, like e.g. importing way too many members from Definitions,\r\ninstead of a single wildcard import. Such aggressive refactoring is not\r\nmergeable with 2.10.x, so I plan for a more minimalistic PR for 2.10\r\nbranch."
2344,'dragos',"SI-7147 Diagnostic for unexplained assertion in presentation compiler.\nWe don't have a reproducible test for this, so the best we can\r\ndo is beef up the assertion to shine a little light on the problem.\r\n\r\nReview by @dragos"
2343,'adriaanm','Merge 2.10.x to master\nThe main area of conflict was `build.xml` (refactorings/bug fixes from 2.10.x + modularization from master).\r\n\r\nI merged the MiMa targets into the master `build.xml`, but disabled their execution until 2.11.0.\r\n\r\nReview by @adriaanm'
2342,'adriaanm','SI-7292 Deprecate octal escape literals\n'
2341,'','ClassfileParser work.\n'
2340,'adriaanm','Added a :kind command to the REPL\n### Description\r\nBecause Scala supports working with higher kinded types, we might want to be able to inspects kinds as well as types. This pull request adds a simple `:kind` command, implemented by @eed3si9n in his ["Introduction to Scalaz: day 4"](http://eed3si9n.com/learning-scalaz-day3) post, to the Scala REPL. Here is an example output:\r\n```scala\r\nscala> :kind scala.Option\r\nOption\'s kind is * -> *\r\n\r\nscala> :k scalaz.Unapply\r\nUnapply\'s kind is ((* -> *) -> *) -> * -> *\r\n\r\nscala> import scalaz._\r\nimport scalaz._\r\n\r\nscala> :k Monad // Finds locally imported types.\r\nMonad\'s kind is (* -> *) -> *\r\nThis is a type constructor that takes type constructor(s): a higher-kinded type.\r\n\r\nscala> :k Nonexisting\r\n<console>:14: error: not found: value Nonexisting\r\n              Nonexisting\r\n              ^\r\n\r\nscala> class Foo\r\ndefined class Foo\r\n\r\nscala> new Foo { def empty = true }\r\nres0: Foo{def empty: Boolean} = $anon$1@786aceba\r\n\r\nscala> :k res0\r\nFoo{def empty: Boolean}\'s kind is *\r\n```\r\n### Future improvements\r\nAs pointed out by @retronym [here](https://twitter.com/retronym/status/318343952942125057), variance and type bounds are also part of the kind and we might want to include them in command\'s output.\r\n### Acknowledgements\r\nThe function for `:kind` feature is originally implemented by @eed3si9n \r\nI got a lot of help from @xeno-by and @retronym while working on this feature, thank you for that.\r\n\r\nHappy Easter everyone!'
2339,'','Fixing small doc. typo in PartialFunction.scala\nFixing a one-letter typo in the documentation of PartialFunction.scala (from "an plain" to "a plain").'
2338,'paulp','SI-7314 Partest locates tools.jar and javac\nThis commit lets partest locate tools.jar the way REPL does, with\r\nthe addition that java.home.parent is also tried.\r\n\r\nThe partest script will use JAVAC_CMD if set, or else JAVA_HOME, and\r\nwill try the sibling of JAVACMD if set (on the theory that if you specify\r\njava, you are avoiding the path lookup and javac may also be in\r\nthat special place), or else query the path for javac.\r\n\r\nThe use cases are: no env vars, look around java.home; JDK or JAVA_HOME is\r\nset; JAVACMD is set; and finally tools.jar can live in jre/lib/ext and\r\nthe fallback deep search will find it.\r\n\r\nThese cases have been tried on cygwin with Java installed under\r\ns"Program${space}Files", which is usually the most brittle environment.\r\nThat means tested with bash.\r\n\r\nThe windows partest.bat has not been upgraded or side-graded.\r\n\r\nReview by @paulp because he doesn\'t have enough to do already, plus he\'s a pretty snazzy shell scripter'
2337,'JamesIry',"SI-7110 Warn about naked try without catch/finally\nBefore, this was allowed:\r\n\r\n    scala> try ( 1 / 0 )\r\n    java.lang.ArithmeticException: / by zero\r\n\r\nBut since the advent of util.Try, the subtle difference to the\r\nfollowing seems dangerous:\r\n\r\n    scala> import util.Try\r\n    import util.Try\r\n\r\n    scala> Try ( 1 / 0 )\r\n    res4: scala.util.Try[Int] = Failure(java.lang.ArithmeticException: / by zero)\r\n\r\nDiscussion: https://groups.google.com/d/topic/scala-language/fy2vXD_3fF8/discussion\r\n\r\nThere was some concern that this curtails a handy, temporary\r\nway to remove the exception handlers from some code. But after\r\nthinking about this, I contend that:\r\n\r\n a) those people can easily stomach the warning temporarily\r\n    (modulo, of course, those with -Xfatal-warnings.)\r\n b) putting this warning behind Xlint will disable it for those\r\n    who need it most: beginners.\r\n\r\nI also chose not to refer to 'scala.util.Try' in the error message\r\nas I think that has as much potential to confuse as it does to clarify.\r\n\r\nResubmission of #2108; review by @JamesIry, "
2336,'JamesIry','SI-7312 @deprecatedInheritance now ignores same-file subclasses\nThis allows us to deprecate external inheritances as a prelude\r\nto sealing a class, without enduring the warnings ourselved in\r\ninterlude.\r\n\r\nThe `neg` test from SI-6162 has been split into a pos test (subclasses in the same compilation unit), and a neg test (subclasses in a different compilation unit.)\r\n\r\nThis will also silence these recently introduced spurious warnings (SI-7315):\r\n\r\n```\r\nqbin/scalac -deprecation src/library/scala/Tuple*.scala\r\nsrc/library/scala/Tuple1.scala:19: warning: inheritance from class Tuple1 in package scala is deprecated: Tuples will be made final in a future version.\r\ncase class Tuple1[@specialized(Int, Long, Double) +T1](_1: T1)\r\n```\r\n\r\nReview by @JamesIry.'
2335,'paulp','Optimize file metadata access\nBackground: When profiling an application that was using the interpreter to compile\r\na script, a lot of time was reported in `exists`/`isDirectory`/`isFile`. I happened to be profiling on Windows. \r\n\r\nTurns out some of these calls are redundant, this PR eliminate two such places.\r\n\r\nHere\'s an example of how it helps:\r\n\r\nTaking a Hello, Akka! application, and compiling it with the compiler\r\nand library on a directory classpath (ie, using build/quick):\r\n\r\n    class HelloActor extends Actor {\r\n      def receive = {\r\n        case "hello" => println("hello back at you")\r\n        case _       => println("huh?")\r\n      }\r\n    }\r\n\r\n    object Main extends App {\r\n      val system = ActorSystem("HelloSystem")\r\n      // default Actor constructor\r\n      val helloActor = system.actorOf(Props[HelloActor], name = "helloactor")\r\n      helloActor ! "hello"\r\n      helloActor ! "buenos dias"\r\n    }\r\n\r\n    % qbin/scalac -Ystatistics -classpath ~/.ivy2/cache/com.typesafe.akka/akka-actor_2.10/jars/akka-actor_2.10-2.1.1.jar:/Users/jason/.ivy2/cache/com.typesafe/config/bundles/config-1.0.0.jar sandbox/test.scala 2>&1 | grep File\r\n\r\n```\r\nBefore\r\n----------------------------------\r\nFile.isFile calls           : 7620\r\nFile.isDirectory calls      : 8348\r\nFile.exists calls           : 5770\r\n\r\nAfter\r\n----------------------------------\r\nFile.isFile calls           : 7620\r\nFile.isDirectory calls      : 2319\r\nFile.exists calls           : 345\r\n```'
2334,'paulp',"SI-7202 tighten name mangling.\nFollowing the discussion at https://groups.google.com/forum/?fromgroups=#!searchin/scala-internals/mangling/scala-internals/GHC3HJTegmw/5py5GH7Rrm8J\r\nI'm re-submitting the change against master.\r\n\r\nWhen the compiler wants to make private symbol visible outside its\r\ndeclaring class, it also changes the name to make it unique to avoid\r\naccidental overriding.\r\n\r\nThe current scheme prepends fullName of the owner class, which could\r\nstill result in overriding if the derived class is nested in a value\r\ndefinition.\r\n\r\nTo avoid such scenario, name mangling prepends not only the names of\r\nthe enclosing classes, but also '$' characters for val owners that\r\naren't synthetic.\r\n\r\nThis scheme wouldn't be enough if the base class were local as well,\r\nand the derived class saw it with a non-trivial prefix type; however\r\nscala doesn't allow it.\r\n\r\nMaking this change required unification between normal 'fullName'\r\nand the one used for name mangling. Using the opportunity, I also\r\nclean the implementation of fullName to make recurring local, that\r\nis a speedup over the late-bound call currently."
2333,'','Merge 2.10.x (through 395e90a786) into master.\nAlso merges 2b4cd6c110 for SI-7302. This should smooth over the two bumps I contributed to the latest merge.'
2332,'',"SI-7310 Partest check file diff filtering\nAdds a simple filter to check file diffs in order to accommodate differences between java 6 and java 7.\r\n\r\nThere's no consensus on the feature yet.  This PR is to vet the commit.\r\n\r\nThis is a follow-on to the Testicolor commit.\r\n"
2331,'','Take the N^2 out of the compiler\'s TreeSet.\nIf we\'re going to have custom reimplementations of standard\r\ncollections, it seems like they should have some demonstrable\r\nperformance advantage. With this commit the time to compile\r\na particular piece of generated code dropped from this:\r\n```\r\n  % time scalac3 ./target/generated/src.scala\r\n  Mar 28 13:20:31 [running phase parser on src.scala]\r\n  ...\r\n  Mar 28 13:21:28 [running phase lazyvals on src.scala]\r\n  Mar 28 13:21:28 [running phase lambdalift on src.scala]  <-- WHOA\r\n  Mar 28 13:25:05 [running phase constructors on src.scala]\r\n  ...\r\n  Mar 28 13:25:19 [running phase jvm on icode]\r\n  316.387 real, 438.182 user, 8.163 sys\r\n```\r\nTo this:\r\n```\r\n  % time pscalac ./target/generated/src.scala\r\n  Mar 28 13:18:47 [running phase parser on src.scala]\r\n  ...\r\n  Mar 28 13:19:44 [running phase lazyvals on src.scala]\r\n  Mar 28 13:19:44 [running phase lambdalift on src.scala]\r\n  Mar 28 13:19:46 [running phase constructors on src.scala]\r\n  ...\r\n  Mar 28 13:19:57 [running phase jvm on icode]\r\n  99.909 real, 223.605 user, 7.847 sys\r\n```\r\nThat\'s lambdalift dropping from 217 seconds to 2 seconds. Which\r\nshould really call into question whether the "demonstrable"\r\nstandard is being met. The number of bugs like this is going to be\r\nproportional to the number of distinct implementations. How many\r\ndifferent logical paths do we need to concatenate iterators?\r\n\r\nThis should be exhibit A as to why the collections should\r\nbundle far less code and behavior. It seems even we, the authors\r\nof the collections, find them too heavyweight to use in our\r\nprimary application, favoring instead stripped down versions\r\nof the same data structures. And here we see a huge performance\r\nbug because of it. Wouldn\'t it be nice if we could use the same\r\nbattle-tested code everyone else does?'
2330,'',"Use java-diff-utils for diffing in partest.\nIt's not clear to me how partest's classpath is managed, so I hacked it in.\r\n\r\nreview by @paulp, @phaller, @gkossakowski"
2329,'',"SI-7202 tighten name mangling.\nFollowing the discussion at https://groups.google.com/forum/?fromgroups=#!searchin/scala-internals/mangling/scala-internals/GHC3HJTegmw/5py5GH7Rrm8J\r\nre-submitting against master.\r\n\r\nWhen the compiler wants to make private symbol visible outside its\r\ndeclaring class, it also changes the name to make it unique to avoid\r\naccidental overriding.\r\n\r\nThe current scheme prepends fullName of the owner class, which could\r\nstill result in overriding if the derived class is local.\r\n\r\nTo avoid such scenario, name mangling prepends not only the names of\r\nthe enclosing classes, but also '$' characters for any non-class\r\nowners.\r\n\r\nThis scheme wouldn't be enough if the base class were local as well,\r\nand the derived class saw it with a non-trivial prefix type; however\r\nscala doesn't allow it.\r\n"
2328,'',"SI-6289 Partest in technicolor and showing javac errors\nPaulptest includes color and simplified test scarfing.\r\n\r\nScalap tests are moved to the conventional name and location.\r\n\r\nIn a grouped or staged or round-robin compilation, any file foo_1.scala can contribute a foo_1.flags to the group flags. That is for simplicity.  (Mnemonic: foo declares the flags it needs, and flags are gathered on a group basis.)\r\n\r\nJust a few fixes from the Sept 2012 version: don't apply options more than once, since multi-valued settings like -Xplugin are cumulative; honor SCALAC_OPTS because ant relies on it for -Xpluginsdir.  Note that no names have been changed to make them appear innocent.\r\n\r\nPaul's test that compilation round errors are reported is forthcoming.\r\n\r\nTesticolor is due to one of Paul's branches on a timeline\r\nthat apparently did not include the destruction of planet\r\nEarth and its colonies by the Xindi.\r\n\r\nThanks also to Szabolcs Berecz for his merge effort.  Merging\r\nis thankless work, but not as thankless as merging in a\r\ntimeline that actually does terminate in the destruction of\r\nyour home world and Enterprise.\r\n\r\nArcher had a supremely difficult choice: rescue humanity or\r\nlive out his retirement with T'Pol waiting on him hand and\r\nfoot? I'm sure I don't know how I'd choose.\r\n\r\nReview by @paulp or maybe @khernyo would also prefer that paulp kept his eyes trained on the future instead of the distant past.  It's also possible that paulp is a transdimensional being for whom time has no meaning, and who is working, as we speak, on bugs that were fixed three years ago and on features of Scala 3 that won't appear until the next decade.  Or more mysteriously, he is working on bugs that were closed as WontFix or CantFix, but which will form the basis of a future and betterized Scala beyond our ability to comprehend."
2327,'','SI-7261 Implicit conversion of BooleanSetting to Boolean and BooleanFlag\nRebase of #2315.'
2326,'','SI-7302 importing from Any.\nTurns out the "minor tweaks" in 632daed4ed were only minor\r\nfor major values of minor. You can indeed import members from\r\nAny/Object, so long as you rename them. Reverted logic error.\r\nTest case will accompany SI-7233 upon merge into master.'
2325,'gkossakowski',"SI-7186 Slim down some TypeRefs by 8 bytes.\nBy virtue of being defined in object TypeRef, they\r\nhad two outer pointers.\r\n\r\n    $outer  scala.reflect.internal.Types$TypeRef$\r\n    $outer  scala.tools.nsc.Global\r\n\r\nThis commit moves them out of that object. They also\r\nnow are no longer shrouded in anonymity, which is\r\npleasant when debugging and profiling.\r\n\r\nThe shallow size leaderboard now looks like:\r\n\r\n```\r\n   Class             % Shallow  % Objects\r\n                          Size\r\n-----------------------------------------\r\n1. ::                      14%        25%\r\n2. char[]                  10% a       5%\r\n3. ClassArgsTypeRef         6%         5%\r\n4. Object[]                 6% b       1%\r\n5. TypeHistory              5%         6%\r\n6. AbstractTypeSymbol       4%         2%\r\n7. AbsractNoArgsTypeRef     3%         2%\r\n8. j.l.Class                3%         2%\r\n9. TermSymbol               2%         1%\r\n10. HashEntry               1% c       1%\r\n```\r\na) 6% of the char[] by size is the name table.\r\n   Retained source code seems to be sizable => should we discard after parsing?\r\nb) Types.uniques\r\nc) ZipArchive#DirEntry.entries\r\n\r\nConfirmation of the slimmer size can be seen in:\r\n\r\n  https://github.com/retronym/scala/compare/ticket/7186\r\n\r\nIn that branch, I introduced infrastructure to query JVM\r\nobject size in instrumented tests, and the diff shows:\r\n\r\n```patch\r\n       size                class instance\r\n ========================================================================\r\n-  64 bytes  internal.Types$TypeRef$$anon$5 List[Int]\r\n-  64 bytes  internal.Types$TypeRef$$anon$6 String\r\n+  56 bytes  nternal.Types$ClassArgsTypeRef List[Int]\r\n+  56 bytes  ernal.Types$ClassNoArgsTypeRef String\r\n```\r\n\r\nI chose not to bring that test infrastructure across to master so as\r\nnot to burden us with brittle tests built on esoteric facilities.\r\n\r\nThis does not close the ticket which proposes a different\r\nspace optimization which is also explored in that branch,\r\nbut no a clear cut improvement.\r\n\r\nReview by @gkossakowski (if you're up to it) or @paulp"
2324,'','SI-7237 Always choose ForkJoinTaskSupport\nForkJoinTaskSupport works on Hotspot, Avian and J9,\r\nwhile ThreadPoolTaskSupport causes the test\r\ntest/files/scalacheck/parallel-collections\r\nto reliably hang on all three.'
2323,'JamesIry',"Iterator.++ no longer blows the stack.\nTo my chagrin we still hadn't gotten this one. I took a new\r\napproach which seems like a winner to me. Here's a benchmark:\r\n\r\n```\r\nobject Test {\r\n  def run(n: Int) = println((1 to n).foldLeft(Iterator.empty: Iterator[Int])((res, _) => res ++ Iterator(1)) sum)\r\n  def main(args: Array[String]): Unit = run(args(0).toInt)\r\n}\r\n```\r\n\r\nRuntime before this commit for various n:\r\n\r\n  500   0.403 real\r\n  1000  0.911 real\r\n  1500  2.351 real\r\n  2000  5.298 real\r\n  2500 10.184 real\r\n\r\nRuntime after this commit, same n:\r\n\r\n  500  0.346 real\r\n  1000 0.359 real\r\n  1500 0.368 real\r\n  2000 0.379 real\r\n  2500 0.390 real\r\n\r\nIn the test case I dial it up to 100000."
2322,'adriaanm','SI-7200 Test case for fixed type inference error.\nBroken in 2.9.2 and 2.10.0, but working in 2.10.1\r\n\r\n```patch\r\n--- sandbox/2.10.0.log\r\n+++ sandbox/2.10.1.log\r\n       def coflatMap[A >: Nothing <: Any, B >: Nothing <: Any](f: Test.Nel[A] => B): Test.Nel[A] => Test.Nel[B] = ((l: Test.Nel[A]) => Test.this.Nel.apply[B](f.apply(l), l.tail match {\r\n         case immutable.this.Nil => immutable.this.Nil\r\n-        case (hd: A, tl: List[A])scala.collection.immutable.::[A]((h @ _), (t @ _)) => {\r\n-          val r: Test.Nel[Nothing] = NelFoo.this.coflatMap[A, Nothing](f).apply(Test.this.Nel.apply[A](h, t));\r\n+        case (hd: A, tl: List[A])scala.collection.immutable.::[?A1]((h @ _), (t @ _)) => {\r\n+          val r: Test.Nel[B] = NelFoo.this.coflatMap[A, B](f).apply(Test.this.Nel.apply[A](h, t));\r\n           {\r\n-            <synthetic> val x$1: Nothing = r.head;\r\n-            r.tail.::[Nothing](x$1)\r\n+            <synthetic> val x$1: B = r.head;\r\n+            r.tail.::[B](x$1)\r\n           }\r\n         }\r\n       }))\r\n```\r\n\r\nb74c33eb86 represents the exact moment of progression. Comments\r\nin pos/t7200b.scala, a minimal test that demonstrates the problem\r\nwithout type constructors or code execution, pinpoint the line of\r\ncode responsible for the fix.\r\n\r\nIncidentally, I\'m currently on a train somewhere between Solothurn\r\nand Biel, and am consequently without the power of scala-bisector.\r\nUndeterred, and inspired by a line I saw in Skyfall last night\r\n("sometimes the olds ways are better"), I just pulled off a two-hop\r\nbisection. Take that, O(log N)!\r\n\r\nThe one remaining worry is the appearance of the type variable\r\n?A1 in the output of -Xprint:typer for run/t7200.scala.\r\n\r\nReview by @lrytz'
2321,'','Scaladoc: Load scripts at the bottom, and with a defer attribute\nTo improve latency on modern browsers (which supports defer) and old browsers:\r\n\r\n * https://www.webkit.org/blog/1395/running-scripts-in-webkit/\r\n * http://developer.yahoo.com/blogs/ydn/posts/2007/07/high_performanc_5/\r\n'
2320,'','doc for Types.baseClasses has Linearization definition reversed from spec 5.1.2\n'
2319,'paulp','SI-6793 Don\'t use super param accessors if inaccessible.\n"Alias replacement" has been with us since 2005 (13c59adf9).\r\n\r\nGiven:\r\n\r\n    package a {\r\n      class C1(val v0: String)\r\n      class C2(v1: String) extends a.C1(v1) { v1 }\r\n    }\r\n\r\nThe reference to `v1` is rewritten as `C2.super.v0()`, and\r\nno field is generated in `C2`.\r\n\r\n(Oddly, this optimization doesn\'t seem to kick in if\r\nthese classes are in the empty package. That\'s probably\r\na distinct bug.)\r\n\r\nHowever, this rewriting is done without consideration of\r\nthe accessibility of `v0` from `C2`.\r\n\r\nThis commit disables this optimization if there if `v0` is\r\nnot accessible.\r\n\r\nReview by @paulp. The accessibility checking mechanism is a bit clunky, any better suggestions.'
2318,'adriaanm','[forward port] SI-7259 Fix detection of Java defined Selects\nThe fix for SI-3120, 3ff7743, introduced a fallback within\r\n`typedSelect` that accounted for the ambiguity of a Java\r\nselection syntax. Does `A.B` refer to a member of the type `A`\r\nor of the companion object `A`? (The companion object here is a\r\nfiction used by scalac to group the static members of a Java\r\nclass.)\r\n\r\nThe fallback in `typedSelect` was predicated on\r\n`context.owner.enclosingTopLevelClass.isJavaDefined`.\r\nHowever, this was incorrectly including Select-s in top-level\r\nannotations in Scala files, which are owned by the enclosing\r\npackage class, which is considered to be Java defined. This\r\nled to nonsensical error messages ("type scala not found.")\r\n\r\nInstead, this commit checks the compilation unit of the context,\r\nwhich is more direct and correct. (As I learned recently,\r\n`currentUnit.isJavaDefined` would *not* be correct, as a lazy type\r\nmight complete a Java signature while compiling some other compilation\r\nunit!)\r\n\r\nA bonus post factum test case is included for SI-3120.\r\n\r\n**Manual forward port of f046853 which was not merged as\r\npart of the routine 2.10.x to master merge.** The test case\r\nuncovered a NullPointerExceptiion crasher in annotation\r\ntypechecking introduced in 5878099c; this has been prevented\r\nwith a null check.\r\n\r\nConflicts:\r\n\tsrc/compiler/scala/tools/nsc/typechecker/Typers.scala\r\n\r\nReview by @adriaanm'
2317,'adriaanm','[forward-port] SI-7232 Fix Java import vs defn. binding precendence\nJava Spec:\r\n> A single-type-import declaration d in a compilation unit c\r\n> of package p that imports a type named n shadows, throughout\r\n> c, the declarations of:\r\n>   - any top level type named n declared in another compilation\r\n>     unit of p\r\n>   - any type named n imported by a type-import-on-demand\r\n>     declaration in c\r\n>   - any type named n imported by a static-import-on-demand\r\n>     declaration in c\r\n\r\nScala Spec:\r\n> Bindings of different kinds have a precedence deﬁned on them:\r\n>   1. Deﬁnitions and declarations that are local, inherited, or made\r\n>      available by a package clause in the same compilation unit where\r\n>      the deﬁnition occurs have highest precedence.\r\n>   2. Explicit imports have next highest precedence.\r\n\r\n**This is a forward port of 6e79370, which did not merge cleanly\r\nand was omitted in the regular merge from 2.10.x to master.**\r\n\r\nConflicts:\r\n\tsrc/compiler/scala/tools/nsc/typechecker/Typers.scala\r\n\r\nReview by @adriaanm'
2316,'','Improve testing interactive experience.\nCurrently the exceptions that happen in the test are swallowed, as\r\nthe JVM is forced to exit before printing the stack trace.\r\nAlso assert message doesn\'t contain information about the problem.\r\n\r\nThe call to "sys.exit" masks bugs in the testing framework, that\r\nhas to be addressed more elaborately, so here we remove it. Also\r\nadd the message parameter to assert to make it more informative.\r\n\r\nAfter removing "sys.exit" call, doc test starts failing. I suspect\r\nthere might be a problem when expanding doc variables, but this\r\nshould be addressed separately.'
2315,'','SI-7261 Implicit conversion of BooleanSetting to Boolean and BooleanFlag\nThis allows a more compact expression `if (settings.debug)` instead of\r\n`if (settings.debug.value)`, in order to improve readability.\r\n\r\nThe first commit contains the two implicit definitions, and the second\r\ncommit deletes dot value where the expected type is Boolean, viz., in\r\nconditionals or, rarely, function calls.\r\n\r\nThis is a more conservative version of https://github.com/scala/scala/pull/2297.\r\n\r\nReview by @paulp who is still trying to conserve the code base\r\n'
2314,'','further tweaks to the ant build\nreview by review roulette'
2313,'',"missing compiler jar dependency restored\npack.comp currently doesn't rebuild scala-compiler.jar when files in {interactive, scaladoc, repl} have been recompiled.\r\n\r\nChange pack.comp.available property to include multiple srcfiles, for {compiler.complete, interactive.complete, scaladoc.complete, repl.complete}."
2312,'adriaanm','SI-6815 Loosen definition of stability in stable ID patterns\nBefore, a stable identifier pattern was vetted by `isStable`,\r\nwhich delegates to `isExprSafeToInline`. This requires that\r\nthe result type of the expression is non-volatile.\r\n\r\nBut, according to @adriaanm, while "it\'s unsound to select\r\ntypes on a prefix with a volatile type", it "should be fine\r\nto compare it for equality."\r\n\r\nThe infrastructure to perform the looser check was already\r\nin place for reporting stability errors; this commit employs\r\nit when checking stability of patterns.\r\n\r\nThe enclosed `neg` test shows that this doesn\'t overreach:\r\ntype selections are still disallowed.\r\n\r\nReview by @adriaanm'
2311,'adriaanm','An IntelliJ Module for the recently modularized REPL.\nReview by @adriaanm'
2310,'dragos',"SI-6168 Retain prefix when parsing types in JVM signatures\nWhen reading Java classfiles, the generic signatures are\r\nused to construct the corresponding Scala type signatures.\r\n\r\nIn the enclosed test case, the field `SomeClass.f` had\r\nthe JVM signature:\r\n\r\n    LContext<LSomeClass;>.Field<Ljava.lang.Integer;>;\r\n\r\nThe parser first (correctly) parsed the prefix as `Context[SomeClass]`.\r\nIt then looked up the type symbol for `Field` in that that type. It then\r\ndiscarded the parsed prefix, and instead used the prefix from the\r\ninfo of the type symbol: `Context[ParentType]`.\r\n\r\nThis commit changes the signature parser after the first `.` to\r\nuse the result of prior parsing as the prefix.\r\n\r\nI've also included a test case with Java static inner classes,\r\nwhich don't require any special treatment.\r\n\r\nReview by @dragos (picked on account of earlier work in the area 2ea6916)\r\n\r\nNote that partest exercises both the java source parser and classfile reader.\r\n\r\n```\r\nIn practice, this happens in 3 steps:                                                                         \r\nSTEP1: Feed all the files to scalac if there are also non-Scala sources.                                      \r\n       It will parse java files and obtain their expected signatures and generate bytecode for scala files    \r\nSTEP2: Feed the java files to javac if there are any.                                                         \r\n       It will generate the bytecode for the java files and link to the scalac-generated bytecode for scala   \r\nSTEP3: (Re-)compile the scala sources so they link to the correct                                             \r\n       java signatures, in case the signatures deduced by scalac from the source files were wrong. Since the  \r\n       bytecode for java is already in place, we only feed the scala files to scalac so it will take the      \r\n       java signatures from the existing javac-generated bytecode.                                            \r\n       Note that no artifacts are deleted before this step.                                                   \r\n```\r\n\r\nTargeting at `master` rather than `2.10.x` as there is a (small) chance that this improvement will silently change the meaning of some existing code; we will now infer the correct specific types for calls to such methods, which could affect subsequent overload resolution etc."
2309,'retronym','Use AnyVal to optimize TailCalls.scala \nNow there is no more indirect reference.'
2308,'JamesIry','SI-6654 & SI-7005 - Map#filterKeys and Map#mapValues not serializable\nFixes SI-6654\r\nFixes SI-7005\r\n\r\nReview by @axel22\r\nReview by @rkuhn'
2307,'','SI-6654 & SI-7005 - Map#filterKeys and Map#mapValues not serializable\nFixes SI-6654\r\nFixes SI-7005'
2306,'scala-jenkins','SI-7299 Improve error message for eta-expanding 23+ param method\nBefore, we got `error: missing arguments for method f`.\r\n\r\nReview by @szeiger'
2305,'',"SI-7296 Lifting the limit on case class arity\nThe first commit fixes a crasher with the limit still imposed, that shows up with nested fat case classes.\r\n\r\nThe second lifts the limit. For case classes with > 22 params:\r\n - omit generation of `unapply`\r\n - pattern matching directly binds to the case accessors (as it would do for smaller case classes already)\r\n - the companion doesn't inherit `FunctionN`.\r\n\r\nThere was some understandable fear of the piecemeal when\r\nI tabled this idea on scala-internals [1]. But I'd like\r\nto persist as this limit is a needless source of pain for\r\nanyone using case classes to bind to database, XML or JSON\r\nschemata.\r\n\r\nReview by @paulp @szeiger (for a Slick perspective), and by the Scala Meeting tomorrow.\r\n\r\n[1] https://groups.google.com/forum/#!topic/scala-internals/RRu5bppi16Y"
2304,'retronym','Fix typos in build.xml\nfollow up on #2290/#2295'
2303,'JamesIry','Correct sorting example for Ordering in scaladoc\n### Sorting example for Ordering in scaladoc corrected\r\n\r\n\r\nOrdering example code for\r\n```scala\r\nSorting.quickSort(pairs)(Ordering.by[(String, Int, Int), Int](_._2)\r\n```\r\n\r\nshould be fixed like below    \r\n```scala\r\nSorting.quickSort(pairs)(Ordering.by[(String, Int, Int), Int](_._2))\r\n```'
2302,'','Sorting example for Ordering in scaladoc corrected\n### Sorting example for Ordering in scaladoc corrected\r\n\r\n\r\nOrdering example code for\r\n```scala\r\nSorting.quickSort(pairs)(Ordering.by[(String, Int, Int), Int](_._2)\r\n```\r\n\r\nshould be fixed like below    \r\n```scala\r\nSorting.quickSort(pairs)(Ordering.by[(String, Int, Int), Int](_._2))\r\n```'
2301,'','Gyuhang/libdoc\n### Sorting example for Ordering in scaladoc corrected\r\n\r\n\r\nOrdering example code for\r\n```scala\r\nSorting.quickSort(pairs)(Ordering.by[(String, Int, Int), Int](_._2)\r\n```\r\n\r\nshould be fixed like below    \r\n```scala\r\nSorting.quickSort(pairs)(Ordering.by[(String, Int, Int), Int](_._2))\r\n```'
2300,'','Ordering sorting example in scaladoc corrected\nBelow code snippet,\r\n\tSorting.quickSort(pairs)(Ordering.by[(String, Int, Int), Int](_._2)\t\tshould be\r\n\tSorting.quickSort(pairs)(Ordering.by[(String, Int, Int), Int](_._2))'
2299,'lrytz',"SI-7294 Towards finality for TupleN\n - Treat TupleN as final under -Xfuture for static analysis\r\n - Deprecate inheritance from TupleN.\r\n\r\nReview by @lrytz @paulp (it's a change to a core class, so a few opinions are needed.)"
2298,'paulp','SI-6900 Tail call elimination + dependent method type crasher\nOnly the last commit is behaviour changing.\r\n\r\nAttempted to fix this with finesse, but ended up using a localised sledgehammer.\r\n\r\nReview by @paulp'
2297,'paulp',"SI-7261 BooleanSetting to Boolean conversion\nAdd an implicit for BooleanSetting to Boolean, since while we never expect the Spanish Inquisition, we do expect a boolean in an if clause.\r\n\r\nThe first cut put the implicit at AbsScalaSettings, but the more general case is at reflect/internal's MutableSettings. There was no particular desire to privilege mutability.\r\n\r\nThere is an additional implicit to convert BooleanSetting to BooleanFlag, in the second commit. Maybe you knew there was a BooleanFlag.\r\n\r\nThe second commit tries to be minimalist, just to 6x the .value. There are two or three spots where an expression has been restructured, but no intentional changes in behavior.\r\n\r\nThis PR is a rebase and resubmit of https://github.com/scala/scala/pull/2272.\r\n\r\nReview by @paulp who liked the idea and @retronym who has already egged on.\r\n"
2296,'','SI-6289 Partest in technicolor and showing javac errors\nPaulptest includes color and simplified test scarfing.\r\n\r\nThe transcript feature handles errors in staged compilation.\r\n\r\nThis is work-in-progress, merged from paulp/partest-sprint, nearly done.  It touches build.xml, so more tweaking after the ant build refactor.'
2295,'','Build cleanup 2.10\nSee #2290. It contains the same commits. The difference between master and 2.10.x is in the merge commit where this PR is merged into #2290'
2294,'adriaanm','SI-7289 Discard ill-kinded type constraints during inference\nLet\'s disect the reported test case.\r\n\r\nDefine the first implicit:\r\n\r\n    scala> trait Schtroumpf[T]\r\n    defined trait Schtroumpf\r\n\r\n    scala> implicit def schtroumpf[T, U <: Coll[T], Coll[X] <: Traversable[X]]\r\n         |     (implicit minorSchtroumpf: Schtroumpf[T]): Schtroumpf[U] = ???\r\n    schtroumpf: [T, U <: Coll[T], Coll[X] <: Traversable[X]](implicit minorSchtroumpf: Schtroumpf[T])Schtroumpf[U]\r\n\r\nCall it explicitly => kind error during type inference reported.\r\n\r\n    scala> schtroumpf(null): Schtroumpf[Int]\r\n    <console>:10: error: inferred kinds of the type arguments (Nothing,Int,Int) do not conform to the expected kinds of the type parameters (type T,type U,type Coll).\r\n    Int\'s type parameters do not match type Coll\'s expected parameters:\r\n    class Int has no type parameters, but type Coll has one\r\n                  schtroumpf(null): Schtroumpf[Int]\r\n                  ^\r\n    <console>:10: error: type mismatch;\r\n     found   : Schtroumpf[U]\r\n     required: Schtroumpf[Int]\r\n                  schtroumpf(null): Schtroumpf[Int]\r\n                            ^\r\n\r\nAdd another implicit, and let implicit search weigh them up.\r\n\r\n    scala> implicitly[Schtroumpf[Int]]\r\n    <console>:10: error: diverging implicit expansion for type Schtroumpf[Int]\r\n    starting with method schtroumpf\r\n                  implicitly[Schtroumpf[Int]]\r\n                            ^\r\n\r\n    scala> implicit val qoo = new Schtroumpf[Int]{}\r\n    qoo: Schtroumpf[Int] = $anon$1@c1b9b03\r\n\r\n    scala> implicitly[Schtroumpf[Int]]\r\n    <crash>\r\n\r\nImplicit search compares the two in-scope implicits in `isStrictlyMoreSpecific`,\r\nwhich constructs an existential type:\r\n\r\n  type ET = Schtroumpf[U] forSome { type T; type U <: Coll[T]; type Coll[_] <: Traversable[_] }\r\n\r\nA subsequent subtype check `ET <:< Schtroumpf[Int]` gets to `withTypeVars`, which\r\nreplaces the quantified types with type variables, checks conformance of that\r\nsubstitued underlying type against `Schtroumpf[Int]`, and then tries to solve\r\nthe collected type constraints. The type var trace looks like:\r\n\r\n    [    create] ?T                       ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [    create] ?U                       ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [    create] ?Coll                    ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [   setInst] Nothing                  ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], T=Nothing )\r\n    [   setInst] scala.collection.immutable.Nil.type( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], U=scala.collection.immutable.Nil.type )\r\n    [   setInst] =?scala.collection.immutable.Nil.type( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], Coll==?scala.collection.immutable.Nil.type )\r\n    [    create] ?T                       ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [   setInst] Int                      ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], T=Int )\r\n    [    create] ?T                       ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [    create] ?U                       ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [    create] ?Coll                    ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]] )\r\n    [   setInst] Nothing                  ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], T=Nothing )\r\n    [   setInst] Int                      ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], U=Int )\r\n    [   setInst] =?Int                    ( In Test#schtroumpf[T,U <: Coll[T],Coll[_] <: Traversable[_]], Coll==?Int )\r\n\r\nThe problematic part is when `?Int` (the type var originated from `U`) is registered\r\nas a lower bound for `Coll`. That happens in `solveOne`:\r\n\r\n    for (tparam2 <- tparams)\r\n      tparam2.info.bounds.hi.dealias match {\r\n        case TypeRef(_, `tparam`, _) =>\r\n          log(s"$tvar addLoBound $tparam2.tpeHK.instantiateTypeParams($tparams, $tvars)")\r\n          tvar addLoBound tparam2.tpeHK.instantiateTypeParams(tparams, tvars)\r\n        case _ =>\r\n      }\r\n\r\nThis commit changes `addHiBound` and `addLoBound` to discard non higher-kinded\r\nbounds for higher-kinded type variables.\r\n\r\nReview by @adriaanm\r\n\r\nThis is more of a review request than a pull request, I think more test cases are needed, and would appreciate your ideas there.\r\n\r\nThis didn\'t crash prior to c800d1fec (implicit search failure was correctly reported), but I don\'t know exactly why.'
2293,'adriaanm','SI-6210 Test case for already-fixed pattern matcher bug\nThe fix arrived in SI-6022 / #1100 / 2.10.0-M7.\r\n\r\nReview by @adriaanm.\r\n\r\n```\r\n% RUNNER=scalac scala-hash v2.10.0-M7~26 -Xfatal-warnings test/files/pos/t6210.scala\r\n[warn] v2.10.0-M7 failed, using closest available\r\n[info] 07f942971a => /Users/jason/usr/scala-v2.10.0-M6-214-g07f9429\r\ntest/files/pos/t6210.scala:15: error: unreachable code\r\n      case AConstBool(v: Boolean) => TBool()\r\n                                          ^\r\none error found\r\n% RUNNER=scalac scala-hash v2.10.0-M7~25 -Xfatal-warnings test/files/pos/t6210.scala\r\n[info] v2.10.0-M7 => /Users/jason/usr/scala-v2.10.0-M6-219-gd1bdafa\r\n```'
2292,'adriaanm','SI-7285 Fix match analysis with nested objects\nThe fix for SI-6146 introduced `nestedMemberType` to\r\nfigure out set of the sealed subtypes based on the\r\n(prefixed) type of the scrutinee and the symbols of its\r\nsealed subclasses. That method needed to widen\r\n`ThisType(modSym)`s to `ModuleTypeRef(modSym)` before\r\ncalling `asSeenFrom`.\r\n\r\nHowever, this could lead to the sealed subtypes being\r\n`ModuleTypeRef`s were not =:= to the singleton type on the module.\r\nThe pattern matcher analysis treated them as distinct, and spurious\r\nwarnings ensued.\r\n\r\nThis commit makes two changes:\r\n\r\n - conditionally re-narrow the result of `asSeenFrom` in `nestedMemberType`.\r\n - present `a.b.SomeModule.type` as `SomeModule` in warnings emitted\r\n   by the pattern matcher.\r\n\r\nReview by @adriaanm'
2291,'adriaanm','SI-7290 Discard duplicates in switchable alternative patterns.\nThe pattern matcher must not allow duplicates to hit the\r\nbackend when generating switches. It already eliminates then\r\nif they appear on different cases (with an unreachability warning.)\r\n\r\nThis commit does the same for duplicated literal patterns in an\r\nalternative pattern: discard and warn.\r\n\r\nReview by @adriaanm'
2290,'','Sanity for build.xml: exscriptus&positus delendus est.\nReduced copy/pasting to the best of my antabilities. The next person to duplicate anything without written permission will be sentenced to a week in xmhell.\r\n\r\nWhile I was at it, made sure that layering is respected. The quick phase exclusively uses the locker compiler for building.\r\n\r\nThe jar task will fail when trying to create an empty jar.\r\n\r\nReplaced the crazy if/unless/depends constructs by if/then/else. Version suffix computation should now be comprehensible. I threw in some validation to make sure the various suffixes are consistent.\r\n\r\nAlso, no more init/pre-foo tasks unless absolutely necessary.\r\n\r\nIntroduce a couple of macros to capture the essence of staged compilation. For example, this is the entirety of the locker phase:\r\n\r\n```\r\n<target name="locker.lib" depends="locker.start" unless="locker.locked">\r\n  <staged-build with="starr" stage="locker" project="library" srcpath="${src.dir}/library" includes="lib.includes">\r\n    <pre><staged-javac stage="locker" project="library" args="-XDignore.symbol.file"/></pre>\r\n  </staged-build></target>\r\n\r\n<target name="locker.reflect" depends="locker.lib"     unless="locker.locked">\r\n  <staged-build with="starr" stage="locker" project="reflect"/></target>\r\n\r\n<target name="locker.comp"    depends="locker.reflect" unless="locker.locked">\r\n  <staged-build with="starr" stage="locker" project="compiler"/></target>\r\n```\r\n\r\nNotes:\r\n  - remove lib.extra, standardize on aux.libs\r\n  - collapse *.javac.path and *.build.path\r\n  - rename starr.classpath to starr.compiler.path\r\n  - only repl needs jline, locker.compiler.path = locker.comp.build.path + forkjoin\r\n  - more uniform build.paths (compiler = reflect + library)\r\n    - uniformity means slightly bigger classpaths\r\n      (e.g. forkjoin is only used in library,  but inherited by compiler)\r\n    - pruned: some spurious dependencies removed\r\n    - compilerpathref = compiler build path\r\n  - silence test.osgi, by hook or by crook\r\n  - centralized clean tasks\r\n  - reduce duplication in property usage\r\n  - fix pack.xml to pack scaladoc/partest instead of scaladoc/scala-partest\r\n  - TODO: -XDignore.symbol.file necessary for library? only needed for forkjoin?\r\n  - document usage from jenkins, fix typo: partest.scalac*_*opts\r\n\r\nNew targets:\r\n - quick-opt\r\n - strap-opt\r\n - test.bc\r\n - test.osgi\r\n - test.osgi.comp\r\n - test.osgi.init\r\n - test.stability-opt\r\n\r\nRemoved/replaced targets:\r\n - asm.clean asm.lib asm.start\r\n - bc.run\r\n - dist.latest dist.latest.unix dist.latest.win dist.start\r\n - docs.all docs.manmaker docs.pre-comp docs.pre-continuations-plugin\r\n - docs.pre-jline docs.pre-lib docs.pre-man docs.pre-partest docs.pre-scalap\r\n - forkjoin.clean forkjoin.lib forkjoin.pack forkjoin.start\r\n - graph.clean\r\n - init.build.nopatch.release init.build.patch.release init.build.release\r\n - init.build.snapshot init.build.suffix.done init.extra.tasks\r\n - init.fail.bad.jdk init.hasbuildnum init.hasmavensuffix init.jars\r\n - init.jars.check init.maven.jars init.maven.tasks init.osgi.suffix\r\n - init.osgi.suffix.final init.osgi.suffix.snapshot init.testjava6\r\n - init.version.done init.version.git init.version.release init.version.snapshot\r\n - init.warn.jdk7 locker.pre-comp locker.pre-lib locker.pre-reflect\r\n - locker.unlock.comp locker.unlock.lib locker.unlock.pre-comp\r\n - locker.unlock.pre-lib locker.unlock.pre-reflect locker.unlock.reflect\r\n - osgi.clean osgi.test osgi.test.comp osgi.test.init\r\n - pack.clean pack.pre-bin pack.pre-comp pack.pre-lib pack.pre-partest\r\n - pack.pre-plugins pack.pre-reflect pack.pre-scalap pack.start\r\n - palo.comp palo.lib palo.pre-bin palo.pre-comp palo.pre-lib palo.pre-reflect\r\n - palo.reflect palo.start quick.pre-bin\r\n - quick.pre-comp quick.pre-interactive quick.pre-lib quick.pre-partest\r\n - quick.pre-plugins quick.pre-reflect quick.pre-repl quick.pre-scalacheck\r\n - quick.pre-scaladoc quick.pre-scalap\r\n - sbt.clean sbt.compile sbt.done sbt.libs sbt.start\r\n - starr.clean\r\n - strap.clean strap.pre-comp strap.pre-lib strap.pre-reflect strap.start\r\n - test.debug test.pre-run'
2289,'adriaanm','Name logic consistency\nReview by @adriaanm'
2288,'scala-jenkins',"SI-6387 Clones accessor before name expansion\nWhen a symbol's name is expanded due to a conflict during mixin\r\ncomposition (e.g. multiple traits with same-named members, but\r\nwhich are not both visible at the language level in the concrete\r\nclass) the compiler renames some symbols with expanded names which\r\nembed the name of the declaring class to avoid clashes.\r\n\r\nIn the rare cases when the accessor overrides the member in base\r\nclass, such expansion either results in AbstractMethodError when\r\nthe base method is abstract, or, even worse, can change the\r\nsemantics of the program.\r\n\r\nTo avoid such issues, we clone the accessor symbol, clear its\r\nACCESSOR flag and enter the symbol with an unchanged name."
2287,'JamesIry','SI-7102 Override isEmpty for bitsets with an efficient implementation \nrather than use default checking for size == 0.'
2286,'','SI-7102 efficient isEmpty for bitsets\nOverride isEmpty for bitsets with a specialized implementation rather than use default checking for size == 0.\r\nTarget 2.10.x since the change is binary-compatible.\r\nReview by @JamesIry.'
2285,'adriaanm','Remove unrecognized doc comments\nDoc -> C-style comments for local symbols to avoid "discarding unmoored doc comment" warning when building distribution for scala itself.'
2284,'retronym','SI-6898 Document AnyVal box and unbox implemention by BoxesRunTime\n* Added `@boxRunTimeDoc@` and `@unboxRunTimeDoc@` tokens to `AnyVals`\r\n* Doc comments refer to [BoxesRunTime.java](https://github.com/scala/scala/blob/master/src/library/scala/runtime/BoxesRunTime.java) in the Scala repo\r\n* No comment for `Unit`'
2283,'retronym',"fixes the craziness in JavaUniverse.log\nThis long-standing, but trivial to fix nuisance in the implementation of\r\nruntime reflection actively avoided being fixed in both 2.10.0 and 2.10.1.\r\n\r\nIt's finally the time to put it to a rest."
2282,'paulp','SI-7271 fixes positions of string interpolation parts\nPositions of static parts are now set explicitly during parsing rather\r\nthan filled in wholesale during subsequent atPos after parsing.\r\n\r\nI also had to change the offsets that scanner uses for initial static\r\nparts of string interpolations so that they no longer point to the\r\nopening double quote, but rather to the actual beginning of the part.'
2281,'paulp','SI-6715 Scaladoc: Use an encoded name if a decoded name is ""\nIn Scala, we can define a method named "$$" but Scaladoc couldn\'t treat\r\nthe method correctly because the decoded name of the method was "".'
2280,'','Restored LOCAL_SUFFIX to originalName.\nIt looks like in an attempt to make originalName print\r\nconsistently with decodedName, I went a little too far and\r\nstripped invisible trailing spaces from originalName. This\r\nmeant outer fields would have an originalName of \'$outer\'\r\ninstead of \'$outer \', which in turn could have caused them to\r\nbe mis-recognized as outer accessors, because the logic of\r\nouterSource hinges upon "originalName == nme.OUTER".\r\n\r\nI don\'t know if this affected anything - I noticed it by\r\ninspection, improbably enough.\r\n\r\nAs a side note, LOCAL_SUFFIX is the worst. Significant\r\ntrailing whitespace! Time bomb.'
2279,'heathermiller',"SI-7013 Scaladoc: Fix StackOverflowError\nNo one see the result value of parse and if so, it's tail-recursive."
2278,'heathermiller','SI-6580 Scaladoc: Should not close void elements\nBecause it will generate a useless element like "\\</img>".\r\n\r\nTo made matters worse, Scaladoc used to generate the element with\r\nattributes (like \\</img src="...">). That\'s why we had SI-6580.'
2277,'',"SI-7202 tighten name mangling.\nWhen the compiler wants to make private symbol visible outside its\r\ndeclaring class, it also changes the name to make it unique to avoid\r\naccidental overriding.\r\n\r\nThe current scheme prepends fullName of the owner class, which could\r\nstill result in two renamed symbols overriding if one the symbols\r\nis declared in local class.\r\n\r\nTo avoid such scenario, name mangling prepends not only the names of\r\nthe enclosing classes, but also '$' characters for any non-class\r\nowner.\r\n\r\nSince usages of the symbols with expanded names are in the compiled compilation unit only, this change is safe to put in 2.10."
2276,'paulp','an amazing discovery made by Iulian\nTraces were stalling macro expansions by evaluating messages even when\r\n-Ymacro-debug-* flags were disabled.'
2275,'adriaanm','SI-7265 Future-proof Properties.isJavaAtLeast\n'
2274,'JamesIry','SI-5699 correct java parser for annotation defs.\nCorrect java source parser not to insert a constructor with the type of its <b>value</b> method.\r\n\r\nTarget 2.10.x since the current behavior affects java interop in e.g. scaladoc, see\r\nhttps://issues.scala-lang.org/browse/SI-5684.'
2273,'paulp','SI-6387 Copy overriding accessor when expanding its name\nWhen the compiler wants to make certain symbol accessible, it elevates the symbol \r\nwith otherwise private visibility and expands its name to append the full name of \r\ncontaining class to avoid clashes.\r\n\r\nIn the rare cases when the accessor overrides the member in base class, such \r\nexpanding either results in AbstractMethodError when the base method is abstract, or, \r\neven worse, can change the semantics of the program.\r\n\r\nTo avoid such issues, we clone the accessor symbol, clear its ACCESSOR flag and enter the symbol with an unchanged name.\r\n\r\nThis change only adds lost overridden methods, so the PR targets 2.10.x'
2272,'retronym',"SI-7261 BooleanSetting to Boolean conversion\nAdd an implicit for BooleanSetting to Boolean, since while we never expect the Spanish Inquisition, we do expect a boolean in an if clause.\r\n\r\nThe first cut put the implicit at AbsScalaSettings, but the more general case is at reflect/internal's MutableSettings.  There was no particular desire to privilege mutability.\r\n\r\nThere is an additional implicit to convert BooleanSetting to BooleanFlag, in the second commit.  Maybe you knew there was a BooleanFlag.\r\n\r\nThe second commit tries to be minimalist, just to 6x the `.value`.  There are two or three spots where an expression has been restructured, but no intentional changes in behavior.\r\n\r\nReview by @paulp who liked the idea and @retronym who has already egged on."
2271,'adriaanm',"Reduce duplication and increase verbosity in MiMa execution.\nThis helps to see whether we've broken forward or backward\r\nbinary compatibility.\r\n\r\nFurther duplication could be eradicated with Ant 1.8.0 [`local`](http://ant.apache.org/manual/Tasks/local.html) properties, but we currently only require 1.7.0.\r\n\r\nReview by @JamesIry"
2270,'scala-jenkins',"SI-7246 Make $outer pointer elision Java aware\nIn e0853b3, a space-saving optimization elided the outer pointer\r\nof inner classes if the the (protected) outer pointer of the\r\nimmediate parent class was guaranteed to point to the same instance.\r\n\r\nBut, this check failed to account for Java parent classes, which\r\ndon't follow the Scala scheme. This commit disables the optimization\r\nin that case.\r\n\r\nThe original test case in e0853b3 was anemic, I've fleshed it out to:\r\n\r\n  - test the presense or absense of $outer pointers with Java reflection\r\n  - test the optimization works in the presense of aliased and annotated\r\n    aliased types. (The former worked already, the latter required a\r\n    change to the implementation.)\r\n  - Test the negative case when the prefixes don't line up and the\r\n    subclass in fact needs its own $outer.\r\n\r\nThis patch is based on work by Euguene Vigdorchik with some\r\nadditions by Jason Zaugg.\r\n\r\nTargeted at 2.10.x because this the change is binary compatible other than the rare case of extending an annotated type. We don't do that ourselves, and could rely on MiMa to tell us if we do. (For a Java defined parent class, as shown in the enclosed test, the compiler used to crash.)\r\n\r\nReview by @vigdorchik\r\n\r\nSupersedes #2256"
2269,'JamesIry','SI-7259 Fix detection of Java defined Selects\nThe fix for SI-3120, 3ff7743, introduced a fallback within\r\n`typedSelect` that accounted for the ambiguity of a Java\r\nselection syntax. Does `A.B` refer to a member of the type `A`\r\nor of the companion object `A`? (The companion object here is a\r\nfiction used by scalac to group the static members of a Java\r\nclass.)\r\n\r\nThe fallback in `typedSelect` was predicated on\r\n`context.owner.enclosingTopLevelClass.isJavaDefined`.\r\nHowever, this was incorrectly including Select-s in top-level\r\nannotations in Scala files, which are owned by the enclosing\r\npackage class, which is considered to be Java defined. This\r\nled to nonsensical error messages ("type scala not found.")\r\n\r\nInstead, this commit checks the compilation unit of the context,\r\nwhich is more direct and correct. (As I learned recently,\r\n`currentUnit.isJavaDefined` would *not* be correct, as a lazy type\r\nmight complete a Java signature while compiling some other compilation\r\nunit!)\r\n\r\nA bonus post factum test case is included for SI-3120.\r\n\r\nReview by @JamesIry'
2268,'paulp','removes duplication in FreeDef extractors\n'
2267,'','Jenkins builds are "exposed" to external world and be cancelled by not-logged in user\nI just happen to cancel a job on https://scala-webapps.epfl.ch/jenkins/job/pr-checkin-per-commit/ although I am not a registered jenkins user ( I\'m sorry I did that - I was just curious what would happen). I just wanted to let you know as it is probably a security issue (or should I rather file an issue to jenkins project?) '
2266,'retronym','SI-7251, compiler crash with $.\nWe don\'t need to assert our way out of tight spots, we can issue\r\nan error. Or so I once thought.\r\n\r\nIt turns out lots of assertions have been disappearing before\r\nbeing heard thanks to "case t: Throwable". Under such conditions,\r\na failed assertion is a no-op, but an error is an error.\r\n\r\nThe crash associated with SI-7251 is best avoided by removing the\r\nassertion, which allows an error to be issued in the normal course\r\nof events.\r\n\r\nIn the course of trying to figure out the above, I cleaned up\r\nClassfileParser somewhat.'
2265,'paulp','script engine : better binding mechanism + reflexive access through bound variable "engine"\n'
2264,'adriaanm','SI-7253: respect binary compatibility constraints\nFrom the JLS one can prove that moving a method to a superclass is a binary\r\ncompatible change, both forward and backward. That\'s because when compiling a\r\nmethod call `c.foo()`, where c: C, the output descriptor *must* refer to `C` and\r\nnot to the class where `foo()` is actually defined.\r\n\r\nThis patch just ensures that, and adds a test comparing generated descriptors\r\nagainst the Javac output.\r\n\r\nThe sample code is from Paul Philipps, the fix and the bytecode comparison code\r\nfrom me.\r\n\r\nFrom 2006 (9954eafffd5e60676238369ab0ed5797c92b4a7b, a fix for bug 455 in the\r\nold bug tracker, http://www.scala-lang.org/sites/default/files/aladdin/displayItem.do%3Fid=455.html) until 2.9, Scalac has followed this rule "often" (that is, when C is *not* an interface).\r\n\r\nThis behavior was wrong, but the bug was hard to trigger. AFAICS, this can\r\ncreate problems only when moving a method to a super interface in a library and\r\nexpecting forward binary compatibility - that is, compiling some Scala client\r\ncode against the new version of the library, and trying to run this code against\r\nthe old version of the library. This change grows an interface, so it is valid\r\nonly if clients are supposed to *not* implement the library.  Apparently, this\r\nis so rare that nobody noticed.\r\n\r\nSince 2.10 (0bea2ab5f6b211a83bbf14ea46fe57b8163c6334), Scalac follows this rule\r\n*only* when C is an interface (I assume by oversight, since the main change was\r\nan accessibility check), so the bug was finally triggered.\r\n\r\nThe new code will have to emit INVOKEINTERFACE instead of INVOKEVIRTUAL a bit\r\nmore often, compared to 2.9 (but not to 2.10). I don\'t know whether\r\nINVOKEINTERFACE is noticeably slower (it shouldn\'t be); but this is the safest\r\nfix since this behavior is mandated by the JLS.\r\nIf somebody disagrees and believes the 2.9 is significantly faster, IMHO he\r\nshould send a separate pull request (although ProGuard is probably a better\r\nplace for the change).\r\n\r\nPlease let me know if I missed some other duplicated backend - the code I changed is identical in GenASM and GenJVM.\r\n\r\nReview by @paulp, @JamesIry (who discussed the bug) or @dragos (who wrote the original code in 2005-2006 and is responsible for the backend).'
2263,'','script engine : better binding mechanism + reflective access through bound variable "engine"\n'
2262,'JamesIry','removed a redundant var in JavaWriter.flagsToStr\nthe variable x was assigned to, but was never used.'
2261,'scala-jenkins',"SI-7258 Don't assume order of reflection values in t6223\ntest/files/run/t6223's check file expects a specific\r\nordering of the reflected values. The ordering is not\r\nguaranteed by the runtime/reflection API and can change.\r\n\r\nTherefore, sort the values before comparing them."
2260,'paulp','SI-5717 error when bytecode cannot be written\nIf there\'s an existing file foo when emitting a class file for foo.Bar,\r\nthen emit an error at foo.Bar, similar to what javac does.\r\n\r\nThe error message looks something like:\r\n\r\nfoo.scala:4: error: error writing object Foo: ./mypkg/Foo.class: ./mypkg is not a directory\r\n\r\nThis is a non-destructive version of https://github.com/scala/scala/pull/1746\r\n\r\nIt\'s worth quoting https://github.com/scala/scala/pull/2258\r\n\r\n"We don\'t need to assert our way out of tight spots, we can issue an error."\r\n\r\nReview by @paulp who went this way before.\r\n'
2259,'paulp','SI-6123: -explaintypes should not explain errors which won\'t be reported, new attempt\n-explainTypes means that only type tests which fail should be reported in more\r\ndetail by using explainTypes. Hence, callers of explainTypes should check if\r\ntype errors are being ignored, by checking context.reportErrors. Hence, this\r\ncheck is added to Inferencer, and another call site is redirected to that\r\nmethod.\r\n\r\nNote that this patch does not fix all occurrences, but only the ones which\r\nshowed up during debugging. The other ones never cause problems, maybe because\r\nthey occur when contextErrors is in fact guaranteed to be true. We might want to\r\nfix those ones anyway.\r\n\r\nCompared to the old request (https://github.com/scala/scala/pull/1940), I added some tests. However, these tests will become fully effective only once SI-7003 is finally fixed - right now there\'s no way of testing this, especially not of saying "for a compiling program, `-explaintypes` should add no extra output".\r\n\r\nReview by @hubertp.\r\nRefs #6123\r\nbackport to 2.10.x'
2258,'',"SI-7251, compiler crash with $.\nWe don't need to assert our way out of tight spots, we can\r\nissue an error."
2257,'paulp',"Read version 51 (JDK 7) class files.\nThis commit makes the ClassFileReader/ICodeReader parse class files\r\nfrom JDK 7 (class file version 51). It does that by skipping over\r\nthe method handle related entries in the constant pool and by doing\r\nsome dummy processing on invoke dynamic instructions. The inliner\r\nis updated to not try to inline a method with an invoke dynamic\r\ninstruction. A place holder INVOKE_DYNAMIC instruction is added to ICode\r\nbut it is designed to create an error if there's ever any attempt to\r\nanalyze it. Because the inliner is the only phase that ever tries\r\nto analyze ICode instructions not generated from Scala source and\r\nbecause Scala source will never emit an INVOKE_DYNAMIC, the place\r\nholder INVOKE_DYNAMIC should never cause any errors.\r\n\r\nA test is included that generates a class file with INVOKE_DYNAMIC\r\nand then compiles Scala code that depends on it."
2256,'retronym',"SI-7246: javac doesn't add $outer field.\n"
2255,'JamesIry','SI-7249 Reign in overzealous Function0 optimization.\nThe fix for SI-1247 went too far, and could result in\r\npremature evaluation of the expression that yields the\r\nFunction0.\r\n\r\nThis commit checks that said expression is safe to inline.\r\nIf not, a wrapper `() => ....` is still required.\r\n\r\nThe optimization is still enabled in sitations like the\r\noriginal test case, run/t1247.scala.\r\n\r\nReview by @JamesIry'
2254,'',"Restore sketchy dependency to quick.bin.\nApparently we cannot run at all without the continuations\r\nclasses on the classpath. At least that it was I conclude\r\nfrom the fact that quick/bin/scala hasn't worked since\r\nI routed the plugin classes into continuations-library.\r\n\r\nThis restores them to quick's classpath so we can have\r\nqscala again."
2253,'lrytz',"SI-6921 SI-7239 Tread lightly during exploratory typing\nWhen deciding whether an Assign is a named argument or\r\nand assignment expression, or when looking at arguments\r\nthat the current selection is applied to in order to\r\nevaluate candidate implicit views, we risk polluting\r\nthe tree by setting error types. This happens even\r\nif we are in 'silent' mode; that mode does silence the\r\nerror report, but not the side effect on the tree.\r\n\r\nThis commit adds strategic `duplicate` calls to\r\naddress the problem symptomatically.\r\n\r\nDuplicating trees and retyping in general reach into\r\nthe domain of bugs umbrella-ed under SI-5464, but in\r\nthese places we should be safe because the tree is in\r\nthe argument position, not somewhere where, for example,\r\na case class-es synthetic companion object might be\r\ntwice entered into the same scope.\r\n\r\nLonger term, we'd like to make type checking side effect\r\nfree, so we wouldn't need to play whack-a-mole like this.\r\nThat idea is tracked under SI-7176.\r\n\r\nReview by @lrytz"
2252,'adriaanm','[backport] SI-7237 Always choose ForkJoinTaskSupport\nForkJoinTaskSupport works on Hotspot, Avian and J9,\r\nwhile ThreadPoolTaskSupport causes the test\r\ntest/files/scalacheck/parallel-collections\r\nto reliably hang on all three.'
2251,'adriaanm','SI-7236 Deprecate ThreadPoolTaskSupport and friends\n'
2250,'','SI-7237 Always choose ForkJoinTaskSupport\nForkJoinTaskSupport works on Hotspot, Avian and J9,\r\nwhile ThreadPoolTaskSupport causes the test\r\ntest/files/scalacheck/parallel-collections\r\nto reliably hang on all three.'
2249,'','SI-7237 Always choose ForkJoinTaskSupport\nForkJoinTaskSupport works on Hotspot, Avian and J9,\r\nwhile ThreadPoolTaskSupport causes the test\r\ntest/files/scalacheck/parallel-collections\r\nto reliably hang on all three.'
2248,'','SI-6900 Tail call elimination + dependent method type crasher\nThe primary contribution of this change is best expressed as a diff:\r\n\r\n```\r\n% cat sandbox/test.scala\r\ntrait U { type A }\r\nobject Test {\r\n  def foo(u: U)(as: List[Any]): u.A = ???\r\n}\r\n\r\n% diff <(scalac210 -uniqid -Xprint:uncurry sandbox/test.scala) <(qbin/scalac -uniqid -Xprint:uncurry sandbox/test.scala)\r\n...\r\n<     def foo#7375(u#12217: U#7060, as#12218: List#11817[Any#3337]): u#12835.A#7371 = scala#23.this.Predef#832.???#6656()\r\n---\r\n>     def foo#7421(u#12273: U#7106, as#12274: List#11294[Any#3337]): u#12273.A#7417 = scala#21.this.Predef#1084.???#6702()\r\n```\r\n\r\nThe symbols of the `ValDef`s in the tree agree with the (cloned) symbols in the method type that was generated by the uncurry `InfoTransformer`.\r\n\r\nOne corner of the compiler universe fares a little better at the "[usual grand problem of keeping trees, symbols, and types in tune with one another](https://groups.google.com/d/msg/scala-internals/DwjBfws47Y8/8n7eaWMlDUIJ)".\r\n\r\nI\'m quoting @paulp, which is a nice thing to do before I ask him to review. In particular, should we (and, where could we) plug `substituteInfoParamsIntoDefDef` into the tree transformers of all phases that install info transformers?\r\n\r\nThis PR also includes rework of SI-6135 which became apparent to me after spending more time in `uncurry` and was closely related to this change.'
2247,'adriaanm','SI-7232 Fix Java import vs defn. binding precendence\nJava Spec:\r\n> A single-type-import declaration d in a compilation unit c\r\n> of package p that imports a type named n shadows, throughout\r\n> c, the declarations of:\r\n>   - any top level type named n declared in another compilation\r\n>     unit of p\r\n>   - any type named n imported by a type-import-on-demand\r\n>     declaration in c\r\n>   - any type named n imported by a static-import-on-demand\r\n>     declaration in c\r\n\r\nScala Spec:\r\n> Bindings of different kinds have a precedence deﬁned on them:\r\n>   1. Deﬁnitions and declarations that are local, inherited, or made\r\n>      available by a package clause in the same compilation unit where\r\n>      the deﬁnition occurs have highest precedence.\r\n>   2. Explicit imports have next highest precedence.\r\n\r\nReview by @vigdorchik'
2246,'',"Update sbt.latest.version to sbt's latest version.\nAnd tweak deprecated stub so it compiles with 0.12.2."
2245,'paulp','SI-7242 Fix crash when inner object mixes in its companion\nGiven:\r\n\r\n    class C {\r\n      trait T { C.this }            // C$T$$$outer$ : C\r\n      object T extends T { C.this } // C$T$$$outer$ : C.this.type\r\n    }\r\n\r\nobject T ended up with a definitions for both of the accessors.\r\nThese cannot co-exist, as they have the same erased type. A crash\r\nensued almost immediately in explitouter.\r\n\r\nFortunately, the solution is straightforward: we can just omit\r\nthe mixin outer accessor altogether, the objects own outer accessor\r\nis compatible with it.\r\n\r\n    scala> :javap C.T\r\n    Compiled from "<console>"\r\n    public interface C$T{\r\n        public abstract C C$T$$$outer();\r\n    }\r\n\r\n    scala> :javap C.T$\r\n    Compiled from "<console>"\r\n    public class C$T$ extends java.lang.Object implements C$T{\r\n        public C C$T$$$outer();\r\n        public C$T$(C);\r\n    }\r\n\r\nI also added an assertion to give a better error message in\r\ncase we find ourselves here again.\r\n\r\nReview by @paulp. I can\'t find any duplicates of the bug in JIRA, but it seems so easy to step into that I\'m sure they must be in there. Can you summon any?'
2244,'adriaanm','SI-7247, deprecate NotNull.\nBrought the steamroller to bear on NotNull; fired up the Zamboni afterward to smooth things over.'
2243,'adriaanm',"Read version 51 (JDK 7) class files.\nThis commit makes the ClassFileReader/ICodeReader parse class files\r\nfrom JDK 7 (class file version 51). It does that by skipping over\r\nthe method handle related entries in the constant pool and by doing\r\nsome dummy processing on invoke dynamic instructions. The inliner\r\nis updated to not try to inline a method with an invoke dynamic\r\ninstruction. A place holder INVOKE_DYNAMIC instruction is added to ICode\r\nbut it is designed to create an error if there's ever any attempt to\r\nanalyze it. Because the inliner is the only phase that ever tries\r\nto analyze ICode instructions not generated from Scala source and\r\nbecause Scala source will never emit an INVOKE_DYNAMIC, the place\r\nholder INVOKE_DYNAMIC should never cause any errors.\r\n\r\nA test is included that generates a class file with INVOKE_DYNAMIC\r\nand then compiles Scala code that depends on it."
2242,'','Merge 2.10.x into master\nreview by @retronym'
2241,'','update eclipse projects (partest, repl & scaladoc)\nSince we\'ve removed scala.annotations.serializable in 2.11,\r\non top of this, you\'ll need to following bandaid to use eclipse on master.\r\n\r\nThis is the easiest fix, but certainly not recommended in general.\r\n\r\n```\r\n--- i/src/eclipse/scala-library/.classpath\r\n+++ w/src/eclipse/scala-library/.classpath\r\n@@ -1,7 +1,7 @@\r\n <?xml version="1.0" encoding="UTF-8"?>\r\n <classpath>\r\n        <classpathentry kind="src" path="library"/>\r\n-       <classpathentry kind="con" path="org.scala-ide.sdt.launching.SCALA_CONTAINER"/>\r\n+       <classpathentry exported="true" kind="con" path="org.scala-ide.sdt.launching.SCALA_CONTAINER"/>\r\n```\r\n\r\nThis corresponds to checking the export check box for the scala library jar\r\nin the library\'s build path.'
2240,'JamesIry','Warn about locally identifiable init order issues.\nThis warns about a subset of initialization order issues which\r\ncan easily be identified by inspection, such as\r\n\r\n  val x = y\r\n  val y = 5\r\n\r\nThe likelihood of this formulation being intentional is miniscule.'
2239,'adriaanm','Warnings removal and other cleanup.\n'
2238,'adriaanm',"[rebase of #2206] SI-874 JSR-223 compliance for the interpreter\nreview by @rjolly to make sure I didn't butcher anything during the rebase"
2237,'',"Close after slurping (fixes SI-7244)\nSince slurp by definition is the noise made by the straw when\r\nthe cup is empty and all milk shake is consumed, we can safely\r\nclose after slurping.\r\n\r\nUse case was deleting a test artifact on Windows.\r\n\r\nSpeaking of testing, it's not obvious that this change wants a partest test.  But if instructed where to put it, I would add a unit test, perhaps someplace friendly to sbt.\r\n"
2236,'paulp',"SI-6601 Close access loophole for value class constructors\nExtensionMethods marks private constructors of value classes as\r\nnotPRIVATE before pickling. When the pickler reads the flags of this\r\nsymbol, the anti-shift mechanism folds this into the regular PRIVATE\r\nflag, so the class is pickled as though it was public all along. A\r\nseprately compiled client can then call this constructor.\r\n\r\nTo remedy this, we must:\r\n\r\n - pickle `rawFlags`, rather than `flags`. This is symmetric with\r\n   unpickling, which sets `rawFlags` with the value it reads.\r\n - Add `notPRIVATE` to the flagset `PickledFlags`.\r\n\r\nWe cannot make this change in a minor version, as the pickler\r\nand unpickler must agree on `PickledFlags`.\r\n\r\nI believe that this won't change the size of pickled flags\r\nfor the majority of symbols (ie, those without the notPRIVATE flag)\r\ndue to the variable length encoding in `writeLongNat`.\r\n\r\nThis also improves the situation for SI-6608. Reflection and\r\nscalap (and, by extension, IntelliJ), no longer will see\r\nas public methods that have had their access widened in\r\nSuperAccessors (which is done selectively to support inlining\r\nunder separate compilation.)\r\n\r\nReview by @gkossakowski"
2235,'JamesIry','SI-5513: add inplace set-theoretic operations for mutable bitsets.\n'
2234,'retronym','SI-7240 fixes language feature lookup\nAs I discovered today, Definitions.getMember have a fallback clause,\r\nwhich accounts for the phases which have inner classes flattened.\r\n\r\nThis fallback uses nme.flattenedName to compute a flattened name, but\r\nunfortunately nme.flattenedName produces a TermName, not a TypeName,\r\nwhich means that the fallback will commence search in a wrong namespace\r\nwith predictable results.'
2233,'','Copyright 2008 Google\nCopyright 2008 Google Inc. All Rights Reserved.\r\n\r\nhell no\r\n\r\nhttps://github.com/scala/scala/blob/master/src/library/scala/xml/Elem.scala#L17'
2232,'','Modularized the repl.\nFollowing in the footsteps of scaladoc and interactive.\r\nThe interpreter sources move into src/repl, and are given\r\na separate build target. As with the others, at present\r\nthey are still packaged into scala-compiler.jar.\r\n\r\nA summary of changes:\r\n\r\n - repl requires use of ReplGlobal (this was already implied)\r\n - macro code\'s repl-specific classloader hack pulled into overridable\r\n   method and overridden in ReplGlobal\r\n - removed -Ygen-javap option to eliminate backend\'s dependency on javap\r\n - removed -Yrepl-debug option (can still be enabled with -Dscala.repl.debug)\r\n - pushed javap code into src/repl so javax.tools dependency can bee\r\n   weakened to the repl only\r\n - removed some "show pickled" related code which hasn\'t worked right\r\n   in a while and isn\'t the right way to do it anymore anyway. Will\r\n   return to fix showPickled and provide it with some tests.'
2231,'',"Topic/ide config\nUpdate Eclipse and IntelliJ config files. Motivated by #2226\r\n\r\nReview by @gkossakowski, I'm very new to Scala IDE so please check that commit closely."
2230,'JamesIry',"SI-7233 Account for aliased imports in EtaExpansion / Erasure \nBuggy:\r\n\r\n    treeCopy.Select(sel, sel.qual, sel.name) setSymbol null\r\n    Select(sel, sel.qual, sel.name)\r\n\r\nOkay:\r\n\r\n    treeCopy.Select(sel, sel.qual, sel.name)\r\n    Select(sel, sel.qual, sel.symbol.name) // but doesn't copyAttrs!\r\n\r\nReview by @JamesIry"
2229,'','A small typo corrected\nDo i need to sign Scala CLA for this even?'
2228,'adriaanm',"SI-7226 Fix inference regression caused by TypeVar equality\nTypeVars, being mutable creatures, mustn't have structural\r\nequality/hashing, otherwise TypeRefs that differ only by\r\nhaving distinct TypeVars as components get wrongly uniqued\r\ntogether.\r\n\r\nThe reported bug showed the disaterous consequences: constraints\r\nfrom the `C?[Int]` in the return type applied to the `?C[?A]` in\r\nthe parameter list.\r\n\r\nThis commit overrides `equals` and `hashCode` in `TypeVar`\r\nto use reference equality. An alternative fix would be to drop\r\nthe `case`-ness of the class, as was the case before 0cde930b\r\nwhen this regressed.\r\n\r\nReview by @adriaanm"
2227,'paulp',"SI-7132 - don't discard Unit type in interpreter\nbackport from previous pull request #2191. review @paulp"
2226,'paulp','[rework] Modularized scaladoc and presentation compiler.\nThey are now separately built targets and are not privileged from the standpoint of the rest of the compiler. There is no change to build products: they are still bundlled into scala-compiler.jar, but it would now be easy to create a scaladoc.jar and an interactive.jar should we be so inclined.\r\n\r\nrework of #2208'
2225,'lrytz','SI-7234 Make named args play nice with dep. method types\nSome care is needed to avoid interaction with constant\r\ntypes (e.g pos/z1730.scala) and with existentials\r\n(e.g. t3507-old.scala).\r\n\r\nReview by @lrytz'
2224,'lrytz','SI-7328 Bail out of names/defaults when args are error typed\nTo avoid a crasher later on with a null type inside a\r\nsequence argument.\r\n\r\nReview by @lrytz'
2223,'',"reifier is now aware of SI-7235\nSI-7235 is caused by a long-standing todo in typedRefinement, which leads\r\nto originals of compound type trees swallowing their stats.\r\n\r\nI'm not sure how exactly to fix SI-7235, but what I am sure about is that\r\nwe shouldn't silently discard stats during reification. This patch\r\nintroduces a new implementation restrictions, which now reports that\r\nreify of compound type trees with non-empty stats isn't going to work."
2222,'paulp',"SI-6725 `f` interpolator now supports %n tokens\nCurrently the `f` interpolator supports format specifiers which\r\nspecify conversions for formatted arguments. However Java formatting\r\nis not limited to argument-related conversions as explained in:\r\nhttp://docs.oracle.com/javase/6/docs/api/java/util/Formatter.html#detail.\r\n\r\nConversions which don't correspond to any arguments are `%` (used to\r\nemit verbatim `'%'` characters) and `n` (used to emit platform-specific\r\nline separators). Of those only the former is supported, and this patch\r\nfixes the oversight."
2221,'retronym','SI-5710 has fixed itself\nMy job here is only to submit tests.'
2220,'adriaanm',"SI-7226 Fix inference regression caused by TypeVar equality.\nTypeVars, being mutable creatures, mustn't have structural\r\nequality/hashing, otherwise TypeRefs that differ only by\r\nhaving distinct TypeVars as components get wrongly uniqued\r\ntogether.\r\n\r\nThe reported bug showed the disaterous consequences: constraints\r\nfrom the `C?[Int]` in the return type applied to the `?C[?A]` in\r\nthe parameter list.\r\n\r\nThis commit overrides `equals` and `hashCode` in `TypeVar`\r\nto use reference equality. An alternative fix would be to drop\r\nthe `case`-ness of the class, as was the case before 0cde930b\r\nwhen this regressed.\r\n\r\nReview by @adriaanm . Do the other conversions to case classes in that commit look safe?\r\n\r\nI consider this to be a serious enough regression to consider yet another RC for 2.10.1."
2219,'JamesIry','Optimize RedBlackTree rebalance method by using null optimized list implementation.\nrebalance method relies heavily on s.c.i.List. By replacing List with null\r\noptimized version, NList, rebalance operation is significantly more faster.\r\nTest indicate +10 % performance improvement for tree sizes >= 100.'
2218,'','Move lambda bodies to methods on their owning class\nThis PR makes the bodies of lambdas ordinary inner methods, which\r\nthen get lifted to top level methods by LambdaLift. The anonymous\r\nFunctionN class for the lambda now has a simple apply method that\r\ndelegates to the new method. A -Y flag is added to disable this\r\nchange.\r\n'
2217,'','SI-7006 Fix the unreachable test\nThe unreachable test was missing the cases when Random.nextInt returned\r\na negative number. This commit fixes that.'
2216,'','SI-7231 Fix assertion when adapting Null type to Array type\nGenICode was doing a sanity check when adapting an expression of type\r\nNull to something else. It was just doing the wrong one. Instead of\r\nchecking whether the result expression type was a reference type it\r\nwas checking to see if it was an class reference type. This commit fixes\r\nthat and adds a test to make sure both forms of adaptation work as\r\nexpected.'
2215,'retronym','SI-7228, bug in subtyping.\nMake isWeakSubType more frequently correct. Simplify widening logic.'
2214,'retronym','Analyze constants to remove unnecessary branches\nThis commit adds analysis and optimization of constants to remove\r\nunnecessary branches. It uses abstract interpretation to determine\r\nwhat constant(s) a particular stack slot or variable might or might not\r\nhold at a given spot and uses that knowledge to eliminate branches that\r\ncannot be taken. Its primary goal is null check removal, but it also\r\nworks for other constants.\r\n\r\nSeveral tests are modified to include the new optimization phase.\r\n\r\nTwo new tests are added. One verifies that branching still works as\r\nexpected. The other verifies that branches are removed.'
2213,'','Move lambda bodies to methods on their owning class\nThis PR makes the bodies of lambdas ordinary inner methods, which\r\nthen get lifted to top level methods by LambdaLift. The anonymous\r\nFunctionN class for the lambda now has a simple apply method that\r\ndelegates to the new method.'
2212,'scala-jenkins',"Fix SI-7224.\nDon't focus positions assigned to the TypeTree of a parent of a Template\r\nwhen the parent exists in the source. A focused position (instance\r\nof `OffsetPosition`) makes it invisible to the presentation compiler\r\nwhen it looks for the innermost enclosing tree of a given position\r\n(breaking hyperlinking, for example). See [IDE ticket #1001553](https://scala-ide-portfolio.assembla.com/spaces/scala-ide/tickets/1001553).\r\n\r\n(I couldn't find a way to reproduce the pr-ragepos build locally, as I couldn't find the definition of the corresponding Jenkins job)\r\n\r\nreview by @huitseeker, @hubertp"
2211,'','SI_7179: add variance annotations to scala.math.Equiv and scala.math.PartialOrdering.\nAlso annotate aliases in scala.Predef. Review by @paulp.'
2210,'',"Quasiquotes refactoring\nFixes a number of bugs:\r\n- SI-6837: pattern don't infer most specific types\r\n- SI-6839: more standard instances of Liftable\r\n- SI-6851: crash upon cardinality mismatch\r\n- SI-6878: splicing list of liftable fails\r\n\r\nRefactoring and fixes:\r\n- all tree construction and deconstuction is refactored using quasiquotes\r\n- much improved error reporting for construction quasiquotes\r\n- adds new liftables for Expr, TypTag and improves liftable for Symbol\r\n- minor bug fixes\r\n"
2209,'','Bring some sanity to the stability test.\nThere is no reason to be stability testing every piece of\r\nbytecode we\'ve ever encountered. If the compilation products\r\nare unstable, then testing 20,000 classfiles will reveal it.\r\nOr it won\'t; either way, we can stop there. So I cut a gordian\r\nknot and focused the stability test solely on the contents of:\r\n\r\n  library reflect compiler\r\n\r\nNext I cut the "custom ant task" cord. There\'s a tool for\r\ndiffing files, it\'s decades old, it\'s called diff. It does\r\nthe entire job we need. If it doesn\'t work on windows, it\r\ndoesn\'t matter. The stability test is not something which\r\nneeds to run in every environment. Either the classfiles\r\nare stable or they aren\'t.\r\n\r\nGenerated the ant xml for building quick.{lib,reflect,comp}\r\nand strap.{lib,reflect,comp} so they are identical modulo the\r\ncompiler used to build them, probably for the first time ever.\r\nI\'m sure they won\'t stay that way, but it\'s a step.'
2208,'','Modularized scaladoc and presentation compiler.\nThey are now separately built targets and are not privileged from the standpoint of the rest of the compiler. There is no change to build products: they are still bundlled into scala-compiler.jar, but it would now be easy to create a scaladoc.jar and an interactive.jar should we be so inclined.'
2207,'','Enabling commit for interactive/scaladoc modules.\nThis is a non-behaviorally-changing setup commit which\r\nre-routes bits of code through avenues which can more easily\r\nbe influenced by subclasses of Global.'
2206,'adriaanm','SI-874 JSR-223 compliance for the interpreter\n'
2205,'',"Add option to disable optimization\nBy default we run par test under -optimise. But occasionally we need\r\nto test optimizations in isolation. This commit adds a Ynooptimise\r\nflag that turns the optimize flags off back off after they've been\r\nturned on.\r\n\r\nA test is included to ensure that -Ynooptimise turns off optimizations\r\nand an existing test is modified to show that optimizations coming\r\nafter -Ynooptimise in command line are enabled.\r\n"
2204,'','Merge 2.10.x into master\n- 78d15a1308: git merge 5d54cf9e37 -m"Merge 2.10.x into master. [...]"\r\n- 21fc4c710f: git merge c4eede47d7 2cf6c5d7e5 387fbf459e [1]\r\n- a941850c2e: git merge 1a84c86ce4 -m"Merge 2.10.x into master."\r\n- 6dda983596: git merge 773f6a8df9 -m"Merge 2.10.x into master."\r\n- c46f5ba694: git merge -s ours scala/2.10.x -m"No-op merge for [nomaster] part of 2.10.x"\r\n\r\nThe last merge was indeed ok to be no-op:\r\n\r\n```\r\n$ git log 6dda983596..scala/2.10.x --oneline --stat:\r\n1176035f27 (scala/2.10.x) Merge pull request #2193 from adriaanm/patmat-refactor\r\nf482d5bdd0 (scala/pr/2193) Merge 2.10.1 into 2.10.x\r\n33e32179fd (tag: v2.10.1-RC3, scala/2.10.1) Merge pull request #2190 from adriaanm/test-runs-mima-2.10.1\r\n54a9f1bb76 Merge pull request #2189 from adriaanm/ticket-7195\r\n09130d55fd (scala/pr/2189) [nomaster] SI-7195 minor version mustn\'t introduce warnings\r\n src/compiler/scala/tools/nsc/typechecker/Typers.scala |  4 +++-\r\n test/files/neg/t5954.check                            | 16 ----------------\r\n test/files/neg/t5954.flags                            |  1 -\r\n test/files/neg/t5954.scala                            | 46 ----------------------------------------------\r\n 4 files changed, 3 insertions(+), 64 deletions(-)\r\nb775d8f16d (scala/pr/2190, adriaanm/test-runs-mima-2.10.1, test-runs-mima-2.10.1) test.done again checks bin compat (using mima 0.1.5)\r\n bincompat-backward.whitelist.conf | 4 ++++\r\n build.xml                         | 8 ++++----\r\n 2 files changed, 8 insertions(+), 4 deletions(-)\r\n440bf0a8c2 (2.10.1) Merge pull request #2168 from retronym/ticket/7183\r\n0303e64efa (scala/pr/2168) SI-7183 Disable unreachability for withFilter matches.\r\n src/compiler/scala/tools/nsc/typechecker/PatternMatching.scala | 42 ++++++++++++++++++++++++++++--------------\r\n test/files/pos/t7183.flags                                     |  1 +\r\n test/files/pos/t7183.scala                                     | 13 +++++++++++++\r\n 3 files changed, 42 insertions(+), 14 deletions(-)\r\n```\r\n\r\n[1] determined all commits in HEAD..scala/2.10.x that merged cleanly as follows:\r\n\r\n```bash\r\ncommits=$(for c in `git rev-list 78d15a1308..scala/2.10.x`; do if ( git merge -n $c &> /dev/null ); then echo "OK: $c" && grh HEAD^; else grh; fi; done | grep OK: | perl -pe \'s/OK: //\')\r\ngit merge $commits -m"Merge 2.10.x into master."\r\n```\r\n\r\nreview by @gkossakowski, @paulp'
2203,'paulp',"Name boolean arguments (rebased)\nRebased version of #2164 since I took long enough to review it that it started conflicting with retronym's later patches. Supersedes #2164."
2202,'','[nomaster] Carve up Types.scala\nStep one of a plan to bring some order and thread\r\nsafety to this neck of the woods.\r\n\r\nMore info:\r\n\r\n  https://gist.github.com/retronym/5081754\r\n  https://groups.google.com/forum/?fromgroups=#!topic/scala-internals/MOvmcnbyb_g\r\n\r\nHand crafted backport of the #2201.'
2201,'lrytz','Carve up Types.scala\nStep one of a plan to bring some order and thread\r\nsafety to this neck of the woods.\r\n\r\nMore info:\r\n\r\n  https://gist.github.com/retronym/5081754\r\n  https://groups.google.com/forum/?fromgroups=#!topic/scala-internals/MOvmcnbyb_g\r\n\r\nReview by @lrytz @paulp'
2200,'','NullPointerException with UTF-8 Input contains umlauts on Windows\nOS: Windows 7\r\nJava: JRE 7\r\nGatling: 1.4.3\r\nScala: 2.9?\r\n\r\nI\'ve configured my console to use UTF-8 (chcp 65001). The text output generated by gatling is than well formated for german umlauts.\r\n\r\nBut if I start gatling and enter for "run description" some german umlauts I get the following Exception:\r\nException in thread "main" java.lang.NullPointerException at com.excilys.ebi.gatling.app.Gatling.com$excilys$ebi$gatling$app$Gatling$$interactiveSelect(Gatling.scala:132)\r\nat com.excilys.ebi.gatling.app.Gatling$$anonfun$11$$anonfun$16.apply(Gatling.scala:98)\r\nat com.excilys.ebi.gatling.app.Gatling$$anonfun$11$$anonfun$16.apply(Gatling.scala:98)\r\nat scala.Option.getOrElse(Option.scala:108)\r\nat com.excilys.ebi.gatling.app.Gatling$$anonfun$11.apply(Gatling.scala:98)\r\nat com.excilys.ebi.gatling.app.Gatling$$anonfun$11.apply(Gatling.scala:87)\r\nat scala.Option.getOrElse(Option.scala:108)\r\nat com.excilys.ebi.gatling.app.Gatling.start(Gatling.scala:87)\r\nat com.excilys.ebi.gatling.app.Gatling$.fromMap(Gatling.scala:54)\r\nat com.excilys.ebi.gatling.app.Gatling$.runGatling(Gatling.scala:73)\r\nat com.excilys.ebi.gatling.app.Gatling$.main(Gatling.scala:49)\r\nat com.excilys.ebi.gatling.app.Gatling.main(Gatling.scala)\r\n\r\nThe affected Line is:\r\n```scala\r\nval runDescription = Console.readLine.trim\r\n```\r\nso ```scala Console.readline``` returns null.\r\nSee https://github.com/excilys/gatling/blob/1.4.3/gatling-app/src/main/scala/com/excilys/ebi/gatling/app/Gatling.scala#L132\r\nSee https://github.com/excilys/gatling/issues/988'
2199,'adriaanm',"SI-7214 outer check based on dealiased pattern type.\nA Typed Pattern (`_: T`) is more than `.isInstanceOf`: if `T` is a\r\npath dependent type, the scrutinee's $outer reference is also\r\ncompared against the prefix of `T`.\r\n\r\nThe code that synthesises this is split into two places.\r\n`needsOuterCheck` determines whether to add this check, based on\r\nthe type `T`, and the type of the scrutinee. If it gives the\r\ngo-ahead, `treeCondStrategy.outerCheck` synthesizes the check.\r\n\r\nThe new test case demonstrates the problems caused by the failure\r\nto dealias in `needsOuterCheck`: it could either wrongly lead to\r\nsynthesis of an outer test (which would crash), or wrongly omit\r\nthe outer test (meaning overly liberal matching.)\r\n\r\nA simple `dealias` remedies this. `dealiasWiden` is *not*\r\nappropriate here; we need to keep hold of singleton types.\r\n\r\nI'll also note that there is already a little slack between these\r\nmethods, as commented:\r\n\r\n> ExplicitOuter replaces `Select(q, outerSym) OBJ_EQ expectedPrefix`\r\n> by `Select(q, > outerAccessor(outerSym.owner)) OBJ_EQ expectedPrefix`\r\n> if there's an outer accessor, otherwise the condition becomes `true`\r\n> TODO: can we improve needsOuterTest so there's always an outerAccessor?\r\n\r\nSo this is probably a fragile area that warrants a careful review\r\nwith a view to design improvements.\r\n\r\nReview by @adriaanm"
2198,'JamesIry','SI-7215 Fix transpose of an empty Array[Array[T]].\nReview by @JamesIry'
2197,'retronym','Integrate range positions.\n'
2196,'','Logging little understood maneuverings during type inference\nReview by @adriaanm.'
2195,'','Changes around lint\n'
2194,'','Remove lint warnings in the library:\n-Remove truly unused symbols.\r\n-Turn the "copy the implementation from super trait in a class inheriting from AnyVal" from warning to info.\r\n-Filter out language._ imports from the unused.'
2193,'retronym','merge 2.10.1 into 2.10.x\nIncludes a couple of commits that clean up the patmat refactoring a bit,\r\nand a separate forwardport (in 2cf6c5d) of the fix for SI-7183 (original in 0303e64).\r\n\r\nreview by @retronym '
2192,'','Renamed type param to be consistent with convention.\nIt\'s super confusing to see debugging output showing\r\na type constructor called "Coll". The convention in the\r\ncollections is that CC[A] takes type parameters and\r\nColl is an alias for the applied type.'
2191,'paulp',"SI-7132 - don't discard Unit type in interpreter\nThis is my first pull request here, so apologies in advance if I've (likely) screwed something up.\r\n\r\nThis is to fix a bug in the REPL, apparently introduced in 4a6f54b, in which the `:type` command fully evaluates expressions of type `Unit`, rather than just printing the type name `Unit`.\r\n\r\n@paulp I think I'm supposed to ask you to review..."
2190,'JamesIry','test.done again checks bin compat (using mima 0.1.5)\n'
2189,'JamesIry',"[nomaster] SI-7195 minor version mustn't introduce warnings\nWe want 2.10.1 to be a drop-in replacement for 2.10.0,\r\nso we can't start warning where we weren't warning in 2.10.0.\r\n\r\nSee SI-5954 (#1882, #2079) for when it was an implementation restriction,\r\nwhich was then weakened to a warning. It's now hidden behind -Ydebug.\r\n\r\nreview by @jamesiry"
2188,'JamesIry',"test.done again checks bin compat (using  mima 0.1.5)\nWe can again check binary compatibility as part of PR validation thanks to @gkossakowski's https://github.com/typesafehub/migration-manager/pull/30.\r\n\r\n(Mad props to @jsuereth for speeding up the release process!)\r\n\r\nReview by @jamesiry."
2187,'paulp','SI-6816 Deprecate -Yeta-expand-keeps-star\nThis commit deprecates the -Yeta-expand-keeps-star flag. It was created\r\nin 2.10 to help in the transition from 2.9 but by the time 2.11 comes\r\nout it should no longer be necessary.'
2186,'odersky',"SI-6725 `f` interpolator now supports %n tokens\nCurrently the `f` interpolator supports format specifiers which\r\nspecify conversions for formatted arguments. However Java formatting\r\nis not limited to argument-related conversions as explained in:\r\nhttp://docs.oracle.com/javase/6/docs/api/java/util/Formatter.html#detail.\r\n\r\nConversions which don't correspond to any arguments are `%` (used to\r\nemit verbatim `'%'` characters) and `n` (used to emit platform-specific\r\nline separators). Of those only the former is supported, and this patch\r\nfixes the oversight."
2185,'gkossakowski','SI-7006 Prevent unreachable blocks in GenICode\nThis commit makes GenICode prevent the generation of\r\nmost unreachable blocks. The new unreachable block prevention code can\r\nbe disabled with a compiler flag.\r\n\r\nBecause full unreachable analysis is no longer necessary for\r\nnormal code it makes the unreachable block analysis run only under\r\n-optimise.\r\n\r\nA test is included to make sure unreachable code doesn\'t cause issues\r\nin code gen.\r\n\r\nA concrete example will help.\r\n\r\n  def foo(): X = {\r\n   try\r\n     return something()\r\n   catch {\r\n     case e: Throwable =>\r\n        println(e)\r\n        throw e\r\n   }\r\n   unreachableCode()\r\n  ]\r\n\r\nHere unreachableCode() is unreachable but GenICode would create ICode\r\nfor it and then ASM would turn it into a pile of NOPS.\r\n\r\nA previous commit added a reachability analysis step to eliminate\r\nthat unreachable code but that added a bit of time to the\r\ncompilation process even when optimization was turned off.\r\nThis commit avoids generating most unreachable\r\nICode in the first place so that full reachability analysis is\r\nonly needed after doing other optimization work.\r\n\r\nThe new code works by extending a mechanism that was already in place.\r\nWhen GenICode encountered a THROW or RETURN it would put the\r\ncurrent block into "ignore" mode so that no further instructions\r\nwould be written into the block. However, that ignore mode flag\r\nwas itself ignored when it came to figuring out if follow on blocks\r\nshould  be written. So this commit goes through places like try/catch\r\nand if/else and uses the ignore mode of the current block to decide\r\nwhether to create follow on blocks, or if it already has, to kill by\r\nputting them into ignore mode and closing them where they\'ll be\r\nremoved from the method\'s list of active blocks.\r\n\r\nIt\'s not quite as good as full reachability analysis. In particular\r\nbecause a label def can be emitted before anything that jumps to it,\r\nthis simple logic is forced to leave label defs alone and that means\r\nsome of them may be unreachable without being removed. However, in\r\npractice it gets close the the benefit of reachability analysis at\r\nvery nearly no cost.'
2184,'',"Revert SI-6240 synchronization for runtime reflection\nThis commit reverts #2083:\r\n  - 387b2590db runtime reflection: death from thousand threads\r\n  - 73d079fb38 removes the assertion in missingHook\r\n  - f4dd56ca5d synchronizes names\r\n  - dd148de5a8 synchronizes pendingVolatiles\r\n  - 4cbb9357c5 synchronizes toolboxes\r\n  - 07bcb6176a SI-7045 reflection now auto-initializes selfType\r\n  - bebd62d566 optimizes Scala reflection GIL\r\n  - 735634f1d6 initializes lazy vals and inner objects in advance\r\n  - 5b37cfb19a introduces GIL to Scala reflection\r\n  - 981da8edfc cleans up initialization of runtime reflection\r\n  - b2c2493b22 reflection no longer uses atPhase and friends\r\n  - a9dca512d8 synchronizes symbols\r\n  - 0262941b3c removes the crazy extraneous log\r\n  - 21d5d3820b moves Symbol#SymbolKind to Symbols\r\n\r\nreview by @xeno-by or anyone else who can get this done today -- I'd like to end the week with a nice row of happy jenkins jobs (will merge 2.10.x into master after this) /cc @paulp, @gkossakowski \r\n\r\nnext week will be the sprint to get M2 out of the door"
2183,'JamesIry','Require firstKey and lastKey on IntMap tail-recursive.\n'
2182,'','Tone down a soft-warning to only show under -Ydebug.\nSI-6191 remains open and can lead to incomplete debug\r\nscope information. In 2.10.0, the backend detected when\r\nthis happend, and warned the user. But there is little\r\nthe user can do about the warning. We have a few test\r\ncases for the problem now, so we should not pollute\r\nthe compile output.\r\n\r\nReview by @JamesIry'
2181,'JamesIry','Tone down a soft-warning to only show under -Ydebug.\nSI-6191 remains open and can lead to incomplete debug\r\nscope information. In 2.10.0, the backend detected when\r\nthis happend, and warned the user. But there is little\r\nthe user can do about the warning. We have a few test\r\ncases for the problem now, so we should not pollute\r\nthe compile output.\r\n\r\nReview by @JamesIry'
2180,'','Merge 2.10.1 into master\nThe [nomaster] commits have been merged with git merge -s ours.\r\n'
2179,'','Merge 2.10.1 into 2.10.x\n'
2178,'retronym',"SI-7190 macros no longer give rise to bridges\nAmazingly enough, this got through all the testing we performed. But now\r\nerasure knows that it shouldn't generate bridges for macro methods."
2177,'gkossakowski',"SI-7159 Distinguish between assignability and subtyping in TypeKinds\nGenICode#adapt had some unreachable code. That's removed.\r\n\r\nAnother commit cleans up several spots in the back end related to adapting types.\r\n\r\nTypeKinds said INT <:< LONG. But that's not true on the JVM, you need\r\na coercion to move up. And GenICode#adapt was checking for just that\r\nspecial case. One commit fixes that up.\r\n\r\nTypeKinds also said that BOOL, BYTE, CHAR, and SHORT were also subtypes of INT. That's not quite right. They're assignable to INT, but they aren't subtypes. Another commit fixes that."
2176,'retronym','SI-6605: extract TagKeys and other cleanup.\n'
2175,'xeno-by',"SI-7185 Avoid NPE in TreeInfo.isExprSafeToInline\nWe got there typechecking code with a redundant\r\nlayer of Block.\r\n\r\nWe can't express that in source code, so we test\r\nthis with manual tree construction and with XML\r\nliterals, which as reported produce such trees.\r\n\r\nReview by @xeno-by"
2174,'JamesIry','add to Enumaration withNameOpt returning Option\n'
2173,'','add to Enumaration withValueOpt returning Option\n'
2172,'retronym','SI-6609, eliminate special case in pattern matcher.\n'
2171,'retronym','Reconcile definitions of stability.\n'
2170,'adriaanm','relax time constraint in duration-tck.scala (for Windows)\nIt seems that on Windows Thread.sleep can actually return early even if it does not throw an exception.\r\n\r\nreview-by: @phaller @adriaanm'
2169,'gkossakowski','SI-7181 Eliminate unnecessary duplicates of finally blocks\nThe main body of a try and each exception handler were getting a copy of\r\nthe finally block for the "normal" flow case (i.e. where they don\'t\r\nthrow an uncaught exception or use "return" to exit early). But that\'s\r\n not necessary.\r\n\r\nWith this commit the try body and each exception handler can all jump\r\nto the same copy of the finally block on a normal exit.\r\n\r\nTwo tests are included. One is a run style test that shows that\r\ntry/catch/finally logic remains unchanged. The other is a byte code\r\ntest that ensures we\'re getting fewer copies of the finally.\r\n'
2168,'adriaanm',"SI-7183 Disable unreachability for withFilter matches.\nThis avoids spurious unreachable warnings on code\r\nthat the user didn't write.\r\n\r\nThe parser desugars for-comprehensions such as:\r\n\r\n    for (A(a) <- List(new A)) yield a\r\n\r\nTo:\r\n\r\n    List(new A()).withFilter(((check$ifrefutable$2) =>\r\n      check$ifrefutable$2: @scala.unhecked match {\r\n       case A((a @ _)) => true\r\n       case _ => false\r\n      })\r\n    )\r\n\r\nBut, if `A.unapply` returns `Some[_]`, the last case is dead code.\r\n(Matching against a regular case class *would* fall through in\r\nthe caes of a null scrutinee.)\r\n\r\nIn SI-6902, we enabled unreachability warnings, even if the\r\nscrutinee was annotated as @unchecked. That was consistent\r\nwith the 2.9.2 behaviour, it was only disabled temporarily\r\n(actually, accidentally) in 2.10.0. But, the old pattern matcher\r\ndidn't warn about this code.\r\n\r\nThis commit makes the pattern matcher recognise the special\r\nscrutinee based on its name and disables both exhaustivity\r\n*and* unreachability analysis.\r\n\r\nTo do so, the we generalize the boolean flag `unchecked` to\r\nthe class `Suppression`.\r\n\r\nReview by @adriaanm. \r\n\r\nThis one shows up on typical usage of Slick, so I think its a fairly important regression. We need to get better at internal testing of new Scala releases; we had a regression from each of SBT, Akka, and Slick show up very late in the cycle.\r\n\r\n```\r\n/Users/jason/code/slick/slick-testkit/src/main/scala/com/typesafe/slick/testkit/tests/NestingTest.scala:20: warning: unreachable code\r\n      a ~ b <- mapped\r\n```"
2167,'adriaanm',"SI-7126 Account for the alias types that don't dealias.\nAfter this change:\r\n\r\n    qbin/scalac -Ydebug test/files/pos/t7126.scala 2>&1 | grep warning\r\n    warning: dropExistential did not progress dealiasing Test.this.T[Test.this.T], see SI-7126\r\n    one warning found\r\n\r\n`T[T]`? Really? The true bug lies somewhere else; the comments of\r\nthe ticket illuminate the general areas of concern.\r\n\r\nThis is a shallow fix intended for 2.10.1. I'll keep investigating the deeper issue, to help inform the decision about whether we are comfortable releasing 2.10.1 with only this bandaid.\r\n\r\nReview by @paulp"
2166,'',"SI-7180 Fix regression in implicit scope of HK type alias.\nWe actually need to call normalize here, otherwise we don't\r\nprogress through 1. below.\r\n\r\n    [infer implicit] scala.this.Predef.implicitly[Higher[Foo.Bar]] with pt=Higher[Foo.Bar] in object Foo\r\n    1. tp=Foo.Bar tp.normalize=[A <: <?>]Foo.Bar[A] tp.dealias=Foo.Bar\r\n    2. tp=Foo.Bar[A] tp.normalize=Box[A] tp.dealias=Box[A]\r\n\r\nReview by @adriaanm\r\n\r\nI'm submitting against 2.10.1 as I think it meets the criteria for an RC3: it's a regression against 2.10.0, its very difficult for users to diagnose, and the workaround is unpalatable (manually expanding the type alias at the point of implicit search breaks the users abstractions)."
2165,'paulp',"Spring cleaning\nGetting in before the thaw.\r\n\r\n - Don't override empty-paren methods as paren-less.\r\n - Be explicit about empty param list calls.\r\n - Banish needless semicolons\r\n - Omit redundant val in case class params\r\n - Don't call `someArray.size`\r\n - Modernize legacy quoting in scaladoc\r\n - Address general scaladocrot.\r\n\r\nThese were a few of my least favourite things.\r\n\r\nReview by @paulp"
2164,'paulp','Name boolean arguments\nWhat would you prefer?\r\n\r\n    adaptToMemberWithArgs(tree, qual, name, mode, false, false)\r\n\r\nOr:\r\n\r\n    adaptToMemberWithArgs(tree, qual, name, mode, reportAmbiguous = false, saveErrors = false)\r\n\r\ncompiler, reflect, and library have been swept.\r\n\r\nA sanity check is included to show that using named args for clarity incurs no bytecode penalty.\r\n\r\nReview by @paulp. Minor chuckles here: https://github.com/retronym/scala/pull/new/topic/bool-arg#L62L15'
2163,'retronym','Refactors AsSeenFromMap to expose extension point.\nThe extension point was the initial motivation but I also tried to\r\nbring some clarity to the internals. This is a setup commit for\r\nscaladoc and interactive modularization, and also will be followed\r\nby a fix for abstract types losing their prefixes (SI-6161.)'
2162,'','Merge 2.10.x into master.\nUnfortunately the ant-pleasing commit was on the far side of the previous merge, and it is intolerable to develop against master with five files being needlessly recompiled on every go-around.'
2161,'JamesIry','fixes the test for SI-7112\nresubmission of https://github.com/scala/scala/pull/2159 against `master`'
2160,'JamesIry','fixes the test for SI-7112\nresubmission of https://github.com/scala/scala/pull/2159 against `2.10.1`'
2159,'JamesIry','fixes the test for SI-7112\nFreshly released Java 1.6.0_41 for OSX fails with "IllegalAccessError:\r\ntried to access class JavaSimpleEnumeration_1 from class sun.proxy.$Proxy6",\r\nand rightfully so, because that class isn\'t public.\r\n\r\nI think I will avoid the usual "how could this even work before" in this\r\ncommit message.'
2158,'gkossakowski','SI-7006 Eliminate NOPs and unreachable code\nWe were generating NOPs in two cases\r\n\r\n1) If jump elision failed to eliminate a JUMP-only block that happened to JUMP to its next block then the code emitter would spit out a NOP. The answer was to fix jump elision to catch more jump-only blocks. Along the way a O(N*M) method was reduced to O(N)\r\n\r\n2) Partly from jump elision and partly from other sources we were leaving behind unreachable code. ASM turned that into NOPs. The answer here was to get rid of the unreachable exception handler elision that would leave behind other unreachable code and replace it with full blown (and simpler) unreachable block elision.\r\n\r\nPR is broken into several commits to make review a bit easier.\r\n'
2157,'JamesIry',"SI-7171 Consider prefix when assessing type finality.\n`Type#isFinalType` determines if a type could have a\r\nnon-bottom subtype. This property is exploited by\r\nthe pattern matcher to flag impossible patterns.\r\n\r\nThis check was ignoring the type's prefix, and\r\nincorrectly deemed that `T#A` in `trait T { final class A }`\r\nwas a final type. But it could have been subtyped by\r\n`U#A` where `U` <:< `T`, or, more simply, by `T.this.A`.\r\n\r\nNow, type finality requires that the prefix is stable.\r\n\r\nThe existing test cases inneg/patmat-type-check.scala\r\nstill correctly flag incompatiblities.\r\n\r\n`isFinalType` is also used by some code that massages\r\npattern matches post specialization. That is actually\r\neither broken or obsolete under virtpatmat, I've opened\r\nSI-7172 to invesigate that.\r\n\r\nIt's also used by GenICode to determine whether to emit\r\nthe appropriate equality checks that are correct in the\r\nface of boxing. It is possible that this change will force\r\nthe slow path in some rare cases, but it won't affect\r\ncorrectness.\r\n\r\nReview by @adriaanm and @JamesIry"
2156,'scala-jenkins',"SI-7109 SI-7153 Generalize the API to get docComments: allow to force do...\n...cTrees\r\n\r\nfor given fragments. Don't type-check when forcing doc comments, but rather\r\n do it directly. Test the new functionality as well as better tests for\r\nthe old one."
2155,'','added DesktopPane, InternalFrame and its events\nFixed last pull request: https://github.com/scala/scala/pull/2123'
2154,'','SI-7164 - Removing NotImplementedError as Fatal from s.u.c.NonFatal\nFixing docs and test and making NotImplementedError NonFatal instead of Fatal, see: https://issues.scala-lang.org/browse/SI-7164'
2153,'paulp','SI-874 JSR-223 compliance for the interpreter\nUsage:\r\n\r\nscala/bin/jarlister -o scala-library-listed.jar scala/lib/scala-library.jar\r\n\r\njrunscript -classpath scala/lib/scala-compiler.jar:scala/lib/scala-reflect.jar:scala-library-listed.jar -l scala'
2152,'adriaanm','SI-7163 backport of annotated retyping to 2.10.1\nBackport of #2118 to 2.10.1.\r\n\r\nTracking this with a retrospective ticket SI-7163\r\n\r\nReview by @JamesIry\r\n'
2151,'paulp','Merge 2.10.x into master\nreview by @paulp'
2150,'adriaanm','[nomaster] nightly tests binary compat and osgi\nTogether with af0da51e1b, this reenables testing binary compatibility\r\nas part of PR validation, on check-in of every commit, and during the nightly.\r\n\r\nNOTE: depends on https://github.com/typesafehub/migration-manager/pull/30 and a new migration manager release'
2149,'gkossakowski','SI-7074 Fix xml attribute sorting\n'
2148,'paulp',"SI-107 Adds test for problematic byte to long conversion\nWhile working on another issue I found some questionable looking code\r\nin GenICode#adapt. A bit of code spelunking found that it fixed\r\nissue 107, but that commit didn't include a test. So this commit adds\r\na test and a comment so the next person doesn't break it.\r\n\r\nThe code still looks questionable so I've created issue\r\nhttps://issues.scala-lang.org/browse/SI-7159 to track it."
2147,'gkossakowski',"SI-7015 Removes redundant aconst_null; pop; aconst_null creation\nIn an effort to adapt methods and field accesses of type Null to\r\nother types, we were always emitting\r\n\r\n    aconst_null\r\n    pop\r\n    aconst_null\r\n\r\nThe problem is we were doing that even when the JVM was in a position\r\nto know it had null value, e.g. when the user had written a null\r\nconstant. This commit fixes that and includes a test to show that the\r\nresulting byte code still works even without repeating ourselves and/or\r\nrepeating ourselves.\r\n\r\nThis commit also makes the scala.runtim.Null$ constructor private. It\r\nwas a sealed abstract class which prevented subclassing in Scala, but\r\nit didn't prevent subclassing in Java. A private constructor takes care\r\nof that hole so now the only value of type Null$ should be null.\r\n\r\nAlong the way I found some other questionable things in adapt and I've\r\nadded TODO's and issue https://issues.scala-lang.org/browse/SI-7159 to\r\ntrack."
2146,'','bump build number to 2.10.2\nreview by @gkossakowski /cc @dragos'
2145,'','Boxing cleanup: erasure, post-erasure, value classes.\nIntroduces extractors for value class trees. Puts them to\r\nwork to make the value class tree manipulations believable.\r\nEliminated some boxing code in erasure which had been\r\nmarked "maybe subsumed by posterasure?" after deciding\r\nthat it had been subsumed by posterasure.\r\n\r\nAdded some same-bytecode tests involving value class boxing\r\n(actually the lack thereof.)'
2144,'dragos','SI-7109 SI-7153 Generalize the API to get docComments: allow to force do...\n...cTrees\r\n\r\nfor allOverriddenSymbols. Test the new functionality as well as better tests for\r\nthe old one.'
2143,'xeno-by','Fixed error in reflection API docs about linearization order on method baseClasses\nDoc comment for method `baseClasses` in `SymbolAPI` and `TypeAPI` incorrectly claims that the method returns a list of base classes in reverse linearization order, when the list returned is actually in linearization order (not in reverse).\r\n\r\nFor fun, the spec (ignore references to `ScalaObject`):\r\n![](http://f.cl.ly/items/1v1l2y1v3v1A3U0B3m35/Screen%20Shot%202013-02-19%20at%2010.34.25%20PM.png)\r\n\r\nreview by @retronym, @xeno-by'
2142,'xeno-by','Extracted abstract implicit vals from Types.\nThese should be considered plumbing and not blended in with the\r\nrest of the api.'
2141,'retronym','Fix and optimization in overriding logic.\nGiven:\r\n\r\n  trait Foo { def f: Int = 5 }\r\n  trait Bar extends Foo { def f: Int }\r\n\r\nI noticed allOverriddenSymbols for the abstract f defined in Bar\r\nwas returning the method from Foo, even though an abstract method\r\ncannot override a concrete one. There were other bits of code\r\nwhich accidentally depended on this outcome. Now allOverriddenSymbols\r\nfor Bar is empty.\r\n\r\nThe optimization is that whether or not a symbol overrides\r\nany other symbols is known at creation time and does not change.\r\nWe now spend a lot less time looking for overridden symbols in\r\nbase classes by storing that value, "isOverridingSymbol".'
2140,'','Fixing initialization order bug in ExecutionContextImpl, regression from...\n... 2.10'
2139,'','Fixing initialization order bug in ExecutionContextImpl, regression from...\n... 2.10'
2138,'',"SI-6576 Workaround / diagnostic for IDE NPE.\nSeems like this was too optimistic:\r\n\r\n> // later by lukas: disabled when fixing SI-5975\r\n> // i think it cannot happen anymore\r\n\r\n - restored the null check\r\n - added logging when we set the namer in this attachment,\r\n   in the hope of spotting a pattern in the wild.\r\n\r\nWe don't have a test case yet; if we did we could most likely\r\nhave a more principled fix. But this should suffice for 2.10.1.\r\n\r\nReview by @lrytz"
2137,'','SI-5013 / #1000567 : added presentation test for fixed bug \n(issue was about visibility of class-protected inherited member from a distinct reload)'
2136,'',"SI-7143 Fix scanner docComment production.\nWasn't able to extract a test case from the failing IDE tests unfortunately.\r\nReview by @dragos."
2135,'',"Removing disabled, unneeded futures tests\nAs per my comment in #2131, I noticed some old akka-related tests that I don't think we need anymore.\r\n\r\n@phaller and @axel22 can you review/verify this?"
2134,'retronym',"resetAttrs now always erases This.tpe\nThe symbol of This, if it points to a package class, isn't touched, just\r\nas usual, so that our Select(Select(Select(...))) => This(...) optimization\r\nworks fine with attr reset.\r\n\r\nHowever the tpe is now erased, so that subsequent reflective compilation\r\ndoesn't spuriously fail when seeing that some subtrees of a tree being\r\ncompiled are typed.\r\n\r\nErasing the tpe doesn't pose even a tiniest problem, because, as it can\r\nbe seen in typedThis, type is trivially reconstructed from the symbol."
2133,'','Shadowed Implict typo (fixes no issue)\nReview by @heathermiller \r\n'
2132,'',"SI-5744 evidence params are now SYNTHETIC\nThe macro def <-> macro impl correspondence check compares names of the\r\ncorresponding parameters in def and impl and reports an error if they\r\ndon't match. This was originally designed to avoid confusion w.r.t named\r\narguments (which ended up being never implemented as described in SI-5920).\r\n\r\nSometimes parameter names are generated by the compiler, which puts the\r\nuser in a tough position. Luckily, there's an escape hatch built it, which\r\nomits the name correspondence check if one of the parameters is SYNTHETIC.\r\nEverything went well until we realized that evidences generated by\r\ncontext bounds aren't SYNTHETIC, which led to the bug at hand.\r\n\r\nMarking auto-generated evidence parameters SYNTHETIC was only the first\r\nstep, as the correspondence checker uses parameter symbols, not parameter\r\ntrees. Why's that a problem? Because SYNTHETIC doesn't get propagated from def\r\ntrees to their underlying symbols (see ValueParameterFlags).\r\n\r\nUnfortunately one cannot just change ValueParameterFlags, because that\r\nwould break printouts generated in TypeDiagnostics, which is designed to not\r\nprint synthetic symbols. Thus we modify methodTypeErrorString in\r\nTypeDiagnostics to always print synthetic symbols.\r\n\r\nTherefore now we propagate all paramSym.flags when doing correspondent sweeps\r\nto keep them in sync between def trees and their underlying symbols. This\r\nfixes the problem."
2131,'','make Future scaladoc examples up-to-date and compilable\nHi There, \r\nI\'ve stumbled upon some examples in Future\'s scaladoc which are obsolete and will not compile. That\'s definitely not a critical thing, but I think it should go to 2.10.x b/c Future is a new "feature" class in 2.10 and lots of users who are going to migrate to 2.10 can find that confusing. \r\nThere are also two unrelated minor corrections to ArrayBuffer and BigInt scaladocs.\r\n~\r\nEugene\r\n\r\nreview by @heathermiller, @axel22'
2130,'',"SI-7134: don't require doc.Settings in base api of scaladoc.\n"
2129,'','Fix SI-7130: Memory leaked caused by Statistics\nAs described in the ticket, we were leaking memory by holding reference\r\nto Global through by-name argument that was captured by an instance of\r\na class stored in global HashMap `qs`.\r\n\r\nThe fix is simple: do not register quantities in HashMap unless statistics\r\nis enabled. This way, if Statistics is disabled we do not store any\r\nreferences.\r\n\r\nWe still leak memory in case of statistics being enabled.'
2128,'','SI-7128 Fix regression in copyToArray for empty arrays\nAs seen in Akka.\r\n\r\nReview by @JamesIry'
2127,'','Remove noSelfCheck setting usage from scaladoc and deprecate the setting...\n....'
2126,'',"Remove special casing of sourcepath when settings.isScaladoc.\nIt's a poor coincidence that scaladoc uses sourcepath for its purposes, that has\r\nto be fixed in 2.11, but for 2.10 it makes sense to simply remove that code. [nomerge]"
2125,'paulp','SI-7120 Erasure must honor typeref prefixes\nErasure was discarding these, which led to unnecessarily\r\nwide types in quite particular circumstances. This showed\r\nup as a double definition error in the reported bug when the\r\nbridge method clashed with the erased signature.\r\n\r\nTargeted at 2.11 rather than 2.10.2 on grounds of binary compatibility.\r\n\r\nReview by @odersky, @paulp (should we use `dealiasWiden` here?)'
2124,'','merge 2.10.x\nreview by @gkossakowski \r\n\r\n\r\n```patch\r\n -      var materializer = atPos(pos.focus)(gen.mkMethodCall(TagMaterializers(tagClass), List(tp), if (prefix != EmptyTree) List(prefix) else List()))\r\n +      val materializer = atPos(pos.focus)(gen.mkMethodCall(TagMaterializers(tagClass), List(tp), if (prefix != EmptyTree) List(prefix) else List()))\r\n-       if (settings.XlogImplicits.value) println("materializing requested %s.%s[%s] using %s".format(pre, tagClass.name, tp, materializer))\r\n+       if (settings.XlogImplicits.value) reporter.echo(pos, "materializing requested %s.%s[%s] using %s".format(pre, tagClass.name, tp, materializer))\r\n```'
2123,'','added DesktopPane, InternalFrame and its events\nI have added DesktopPane and InternalFrame, both basic Java classes in Swing. Additionally some events for InternalFrame. More information look my post: https://groups.google.com/forum/?fromgroups#!topic/scala-internals/W1PgEvoqoP8'
2122,'','Revert #1403: binary incompatibilities in scala-swing\nthis reverts #1403 to maintain binary compatibility with 2.10.0\r\n\r\nreview by @jamesiry'
2121,'gkossakowski','merge the patmat refactoring into master\nsee #2120 -- nothing to see here but the merge commits:\r\n\r\n```patch\r\n -  def newTransformer(unit: CompilationUnit): Transformer =\r\n -    if (opt.virtPatmat) new MatchTransformer(unit)\r\n -    else noopTransformer\r\n++  def newTransformer(unit: CompilationUnit): Transformer = new MatchTransformer(unit)\r\n```\r\n\r\n```patch\r\n+   // 2.10/2.11 compatibility\r\n -  protected final def dealiasWiden(tp: Type)   = tp.dealias                       // 2.11: dealiasWiden\r\n -  protected final def mkTRUE                   = CODE.TRUE_typed                  // 2.11: CODE.TRUE\r\n -  protected final def mkFALSE                  = CODE.FALSE_typed                 // 2.11: CODE.FALSE\r\n -  protected final def hasStableSymbol(p: Tree) = p.hasSymbol && p.symbol.isStable // 2.11: p.hasSymbolField && p.symbol.isStable\r\n -  protected final def devWarning(str: String)  = global.debugwarn(str)            // 2.11: omit\r\n++  protected final def dealiasWiden(tp: Type)   = tp.dealiasWiden\r\n++  protected final def mkTRUE                   = CODE.TRUE\r\n++  protected final def mkFALSE                  = CODE.FALSE\r\n++  protected final def hasStableSymbol(p: Tree) = p.hasSymbolField && p.symbol.isStable\r\n```'
2120,'retronym',"refactor the pattern matcher into smaller files\n- align the 2.11 and 2.10 pattern matcher implementations, factoring out their differences as compatibility stubs (the difference was mostly code cleanup)\r\n- split the monster into 7 smaller monsters [*] and subsequent minor refactors\r\n- drop `Cond` in favor of `Prop` and sweep up around the area\r\n\r\nreview by @paulp, @retronym and anyone else who'd like to split the monster (merge into master following once tests pass)\r\n\r\n[*] To verify the split in smaller files (it doesn't change any behavior, I promise), may I suggest:\r\n\r\n```\r\ngit checkout e14846b\r\n\r\ncat                                                                     \\\r\nsrc/compiler/scala/tools/nsc/transform/patmat/PatternMatching.scala     \\\r\nsrc/compiler/scala/tools/nsc/transform/patmat/MatchTranslation.scala    \\\r\nsrc/compiler/scala/tools/nsc/transform/patmat/MatchTreeMakers.scala     \\\r\nsrc/compiler/scala/tools/nsc/transform/patmat/MatchCodeGen.scala        \\\r\nsrc/compiler/scala/tools/nsc/transform/patmat/MatchAnalysis.scala       \\\r\nsrc/compiler/scala/tools/nsc/transform/patmat/Logic.scala               \\\r\nsrc/compiler/scala/tools/nsc/transform/patmat/MatchOptimization.scala   > /tmp/patmat.scala\r\n\r\ngit checkout e14846b^\r\n\r\nopendiff src/compiler/scala/tools/nsc/typechecker/PatternMatching.scala /tmp/patmat.scala\r\n```"
2119,'','SI-6642 Adds iteratorFrom, keysIteratorFrom, and valuesIteratorFrom\nSI-6642 Adds iteratorFrom, keysIteratorFrom, and valuesIteratorFrom\r\n\r\nAdds the ability to efficiently create an iterator that starts at a\r\ngiven key or element of a sorted set or map. Similar work is done for\r\nkey and value only iterators on maps.\r\n\r\nThe heart of the work is in RedBlackTree. Most of the rest is pushing\r\nthe new api methods throughout the appropriate spots in the collection\r\nAPI.\r\n\r\nAlong the way mutable.TreeSet is reimplemented in terms of\r\nRedBlackTree to eliminate code duplication and improve efficiency.\r\n\r\nreview @adriaanm'
2118,'','Fix typing idempotency bug with Annotated trees\ntypedAnnotated transforms an Annotated tree into a Typed tree. The\r\noriginal field of the result is set to the Annotated tree.\r\n\r\nThe bug was that typedAnnotated was using the untyped Annotated tree\r\nas original, but also set its type. When re-typing later on the same\r\nAnnotated tree, the typer would consider it as alreadyTyped. This\r\nis incorrect, the typer needs to convert Annotated trees to Typed.\r\n\r\nAlso, the Annotated tree only had its type field set, but its children\r\nwere still untyped. This crashed the compiler lateron, non-typed trees\r\nwould get out of the typing phase.\r\n\r\nReview by @xeno-by\r\n'
2117,'gkossakowski',"Fix SI-7107: scala now thinks every exception is polymorphic\nWe need to force info of the `throwableSym` in `addThrowsAnnotation`\r\nbecause we call `Symbol.isMonomorphicType` that relies on a symbol\r\nbeing initialized to give right answers.\r\n\r\nIn the future we should just clean up implementation of\r\n`isMonomorphicType` method to not rely on a symbol being initialized\r\nas there's no inherent reason for that in most cases. In cases where\r\nthere's reason for that we should just force the initialization."
2116,'',"Fix SI-7107: scala now thinks every exception is polymorphic\nWe need to force info of the `throwableSym` in `addThrowsAnnotation`\r\nbecause we call `Symbol.isMonomorphicType` that relies on a symbol\r\nbeing initialized to give right answers.\r\n\r\nIn the future we should just clean up implementation of\r\n`isMonomorphicType` method to not rely on a symbol being initialized\r\nas there's no inherent reason for that in most cases. In cases where\r\nthere's reason for that we should just force the initialization."
2115,'',"SI-7091 Don't try to put a protected accessor in a package.\nThis shows up when a protected[pack] class has a constructor\r\nwith a default argument.\r\n\r\nRegressed in f708b87 / SI-2296.\r\n\r\nReview by @adriaanm\r\n\r\n - Added commentary\r\n - Wished I'd hit the merge button on your hastily retracted lgtm on #2110 (you tease!)\r\n"
2114,'','SI-874 JSR-223 compliance for the interpreter\n'
2113,'','silences t6323a\nTag materialization notices enabled with -Xlog-implicits are now warnings\r\nnot printlns. Therefore, they go into stderr, not stdout, getting logged\r\nby partest and not spamming stdout of partest.'
2112,'',"merge 2.10.x into master\nIt's fun to finish the P-I-T-A\r\nIt's fun to finish the P-I-T-A\r\nembrace each form of pain git knows how to inflict,\r\nlet your life become merge conflicts"
2111,'','SI-6514 Avoid spurious dead code warnings\n`deadCode.expr` stores the method symbol most recently encountered\r\nin `handleMonomorphicCall`, and uses this to avoid warnings\r\nfor arguments to label jumps and `Object#synchronized` (which\r\nsneakily acts by-name without advertising the fact in its type.)\r\n\r\nBut this scheme was insufficient if the argument itself contains\r\nanother method call, such as `matchEnd(throw e(""))`.\r\n\r\nThis commit changes the single slot to a stack, and also\r\ngrants exemption to `LabelDef` trees. They were incorrectly\r\nflagged in the enclosed test case after I made the the first change.\r\n\r\nReview by @paulp'
2110,'','address a nasty protected[pkg] class regression\nShows up in combination with default args.\r\n\r\nReview by @paulp for the code, and by @adriaanm for my wildly optimistic target branch.'
2109,'','SI-874 JSR-223 compliance for the interpreter\n'
2108,'','SI-7110 Warn about naked try without catch/finally\nBefore, this was allowed:\r\n\r\n    scala> try ( 1 / 0 )\r\n    java.lang.ArithmeticException: / by zero\r\n\r\nBut since the advent of util.Try, the subtle difference to the\r\nfollowing seems dangerous:\r\n\r\n    scala> import util.Try\r\n    import util.Try\r\n\r\n    scala> Try ( 1 / 0 )\r\n    res4: scala.util.Try[Int] = Failure(java.lang.ArithmeticException: / by zero)\r\n\r\nDiscussion: https://groups.google.com/d/topic/scala-language/fy2vXD_3fF8/discussion\r\n\r\nReview by @JamesIry'
2107,'','Application is deprecated. Replaced with App\n'
2106,'','SI-7109: test interactive documentation for more syntactic categories.\nReview by @dragos.'
2105,'','highlights internal parts of scala.reflect.runtime\nBy moving them to scala.reflect.runtime.internal.\r\n\r\nNoone should be using those classes anyway, because everything except\r\nJavaUniverse is private[XXX] and JavaUniverse itself has the "do not\r\ninstantiate" doc comment on it.\r\n\r\nOn the other hand, our runtime reflection APIs are exposed via\r\napi.JavaUniverse, not via runtime.JavaUniverse, so nothing publicly\r\naccessible refers to the runtime cake.\r\n\r\nFinally, reifier is also not using runtime cake directly, preferring\r\napi.JavaUniverse. It didn\'t have to, but I feel very relieved that I did\r\nnot tap into internal implementation details back then. Here\'s the code:\r\nhttps://github.com/scala/scala/blob/v2.10.0/src/compiler/scala/reflect/reify/package.scala#L37'
2104,'','highlights internal parts of scala.reflect.runtime\nBy moving them to scala.reflect.runtime.internal.\r\n\r\nNoone should be using those classes anyway, because everything except\r\nJavaUniverse is private[XXX] and JavaUniverse itself has the "do not\r\ninstantiate" doc comment on it.\r\n\r\nOn the other hand, our runtime reflection APIs are exposed via\r\napi.JavaUniverse, not via runtime.JavaUniverse, so nothing publicly\r\naccessible refers to the runtime cake.\r\n\r\nFinally, reifier is also not using runtime cake directly, preferring\r\napi.JavaUniverse. It didn\'t have to, but I feel very relieved that I did\r\nnot tap into internal implementation details back then. Here\'s the code:\r\nhttps://github.com/scala/scala/blob/v2.10.0/src/compiler/scala/reflect/reify/package.scala#L37'
2103,'',"Forward and backward binary compatibility between 2.10.0 and 2.10.1-RC1\nStart running mima both ways, filtering out failures using @gkossakowski's [contribution to mima](https://github.com/gkossakowski/migration-manager/tree/13-cli-filters), which should be in 0.1.5-SNAPSHOT soon, to make sure bc.run doesn't fail (even where it should).\r\n\r\nEach commit in this PR comments out the filters it makes irrelevant, until we only need to filter out permitted binary incompatibilities.\r\n\r\nWe only allow binary incompatibilities in scala.reflect.internal.\r\n\r\n\r\nReverts backports of:\r\n  - SI-6521, overrides Range#head to be faster\r\n  - SI-4664 Make scala.util.Random Serializable\r\n  - SI-6548 reflection now correctly enters jinners\r\n\r\nAlso reverts/refactors:\r\n  - cosmetic renamings in runtime reflection\r\n  - duplicate tailImpl as a private method\r\n  - bring back SerializeStart from fa3b804\r\n  - can't add new class BatchingExecutor\r\n  - refactor AdaptedForkJoinTask, uncaughtExceptionHandler\r\n\xa0 - SI-6989 privateWithin is now populated in reflect (refactored, fix preserved)\r\n\r\nreview by/ping @retronym, @xeno-by, @gkossakowski, @paulp, @jamesiry, @phaller, @viktorklang and the rest of the world\r\n"
2102,'',"Tolerate symbol sharing between accessor/field.\nRecently, TreeCheckers (-Ycheck) was extended to\r\nreport on references to symbols that were not in\r\nscope, which is often a sign that some substitution\r\nor ownership changes have been omitted.\r\n\r\nBut, accessor methods directly use the type of the\r\nunderlying field, without cloning symbols defined\r\nin that type, such as quantified types in existentials,\r\nat the new owner.\r\n\r\nMy attempt to change this broke pos/existentials.scala.\r\n\r\nInstead, I'll just look the other way in TreeCheckers.\r\n\r\nreview by @paulp"
2101,'',"SI-5675 Restore former type of ConditionalWarning.warnings\nIn case the linkage error reported in SBT [1] proves to be\r\nlegitimate. To me, it looks like it just needs to recompile\r\nthe compiler-interface. But it this change can't hurt.\r\n\r\n[1] https://groups.google.com/forum/?fromgroups=#!topic/scala-internals/ZpzayFCu_8E\r\n\r\nReview by @lrytz"
2100,'','Fixing binary compat for $super regression\n'
2099,'',"SI-6158 Restore compile error output under partest --show-log\nSeems like the ifs and elses didn't quite survive e830a7ce9.\r\n\r\nBefore:\r\n\r\n    ./test/partest --show-log test/files/run/foo.scala\r\n    Testing individual files\r\n    testing: [...]/files/run/foo.scala                                    [FAILED]\r\n\r\nNow:\r\n\r\n    ./test/partest --show-log test/files/run/foo.scala\r\n    Testing individual files\r\n    testing: [...]/files/run/foo.scala                                    [FAILED]\r\n    foo.scala:1: error: expected class or object definition\r\n    askdfjskl\r\n    ^\r\n    one error found\r\n    1 of 1 tests failed (elapsed time: 00:00:01)\r\n\r\nReview by @VladUreche\r\n\r\nThe part I'm not 100% sure about is the duplicated output below: we show both a diff and the full output. I could also silence the full output if the diff is non empty; suggestions here are welcome.\r\n\r\n    ./test/partest --show-log  test/files/run/foo.scala\r\n    \r\n    Testing individual files\r\n    testing: [...]/files/run/foo.scala                                    [FAILED]\r\n    1c1\r\n    < 11\r\n    ---\r\n    > 1\r\n    11"
2098,'paulp',"SI-6225 Fix import of inherited package object implicits\nThe prefix in the ImplicitInfo must be com.acme.`package`.type,\r\nrather than com.acme.\r\n\r\nReview by @paulp. It could easily wait until 2.10.2 unless you're feeling lucky."
2097,'','SI-6935 Added readResolve in BoxedUnit\nWhen deserializing Unit, it would return an instance of Object, but not a Scala Unit.\r\nBy adding readResolve, the deserialization of Unit will work.\r\n\r\nreview by @phaller '
2096,'',"SI-6370 changed ListMap apply0 method to produce correct error message\nCurrent implementation of apply0 relies on tail method to iterate over all keys.\r\nWhen the list gets to its end, tail produces an 'empty map' message in its exception, which is thrown by ListMap. This change checks if the collection is empty before calling tail and provides a more appropriate key not found message.\r\n\r\nImplementation already discussed on PR: https://github.com/scala/scala/pull/2009\r\nreview by @phaller\r\n"
2095,'','SI-5675 Discard duplicate feature warnings at a position\nWhen -feature has not been enabled, we were double counting\r\nidentical feature warnings that were emitted at the same position.\r\nNormal error reporting only reports the first time a warning\r\nappears at a position; feature warning counter incrementing\r\nshould behave the same way.\r\n\r\n@hubertp: Fixed .check files that were broken in the original commit.\r\n\r\nRe-submission of #2067.\r\nI was the reviewer of the original PR and apart from the .check files everything LGTM.\r\nSo I guess review by @retronym'
2094,'',' SI-6591 Reify and path-dependent types \nreview @retronym @paulp'
2093,'','SI-6961 no structural sharing in list serialization\nRevert list serialization back to what it was in 2.9.x and before.\r\n\r\nPartial revert of a6fcd70b60 e234978dfd, which fixed SI-5374.\r\nThe ListBuffer part of the fix remains in place.\r\n\r\nOriginally submitted as #2073. I just cleaned it up and rebased on 2.10.x.\r\n\r\nReview by @axel22 and @jamesiry.'
2092,'',"SI-7096 SubstSymMap copies trees before modifying their symbols\nI removed some strange code in a06d31f6a2 and replaced it by something\r\nincorrect: SubstSymMap should never have side-effects: otherwise,\r\ncalling 'tpe1 <: tpe2' for instance would modify the symbols in\r\nannotations of tpe2.\r\n\r\nSubstSymMap now always creates new trees before changing them.\r\n\r\nComes with a fancy test! I verified that the test fails on 2.10.x before the patch.\r\n\r\nReview by @adriaanm"
2091,'','[backport] SI-6478 Fixing JavaTokenParser ident\nBackport of 256934160007079f473131469af2df4d023c2cfc from PR\r\nhttps://github.com/scala/scala/pull/1466'
2090,'',"SI-6187 Make partial functions re-typable\n(rebase of #2011)\r\n\r\n- `New(tpe)` doesn't survive a `resetAttrs` / typecheck; use\r\n   a name instead.\r\n - Abandon the tree attachment that passed the default\r\n   case from `typer` to `patmat`; this tree eluded the\r\n   attribute reset performed in the macro. Instead, add it\r\n   to the match. Apart from making the tree re-typable, it\r\n   also exposes the true code structure to macros, which\r\n   is important if they need to perform other code\r\n   transformations.\r\n - Install original trees on the declared types of the\r\n   parameters of the `applyOrElse` method to ensure that\r\n   references to them within the method pick up the correct\r\n   type parameter skolems upon retypechecking.\r\n - Propagate `TypeTree#original` through `copyAttrs`,\r\n   which is called during tree duplication / `TreeCopiers`.\r\n   Without this, the original trees that we installed were\r\n   not visible anymore during `ResetAttrs`.\r\n\r\nWe are not able to reify partial functions yet -- the\r\nparticular sticking point is reification of the parentage\r\nwhich is only available in the `ClassInfoType`."
2089,'','SI-7100 Fixed infinite recursion in duplicators\nHopefully this simple fix will do...\r\n\r\nReview by @JamesIry'
2088,'adriaanm','SI-6146 More accurate prefixes for sealed subtypes.\nWhen analysing exhaustivity/reachability of type tests\r\nand equality tests, the pattern matcher must construct\r\na set of sealed subtypes based on the prefix of the\r\nstatic type of and the set of sealed descendent symbols\r\nof that type.\r\n\r\nPreviously, it was using `memberType` for this purpose.\r\nIn simple cases, this is sufficient:\r\n\r\n    scala> class C { class I1; object O { class I2 } }; object D extends C\r\n    defined class C\r\n    defined module D\r\n\r\n    scala> typeOf[D.type] memberType typeOf[C#I1].typeSymbol\r\n    res0: u.Type = D.I1\r\n\r\nBut, as reported in this bug, it fails when there is an\r\nadditional level of nesting:\r\n\r\n    scala> typeOf[D.type] memberType typeOf[c.O.I2 forSome { val c: C }].typeSymbol\r\n    res5: u.Type = C.O.I2\r\n\r\nThis commit introduces `nestedMemberType`, which uses `memberType`\r\nrecursively up the prefix chain prefix chain.\r\n\r\n    scala> nestedMemberType(typeOf[c.O.I2 forSome { val c: C }].typeSymbol, typeOf[D.type], typeOf[C].typeSymbol)\r\n    res6: u.Type = D.O.Id\r\n\r\n\r\nReview by @adriaanm + @odersky (two heads are better than one, given the lateness of the hour in the 2.10.1 cycle)\r\n\r\nAdditional test cases would be welcome. Note that existing tests cover Java enums, which required some logic in the new function (e.g. pos/t6942).'
2087,'',"Disable failing presentation/doc test\nI think you are all familiar with the following message from partest:\r\nDiscarding invalid test path 'test/files/presentation/doc'\r\n\r\nThis is fixed in the first commit. Unfortunately, it's failing because of unexpected output:\r\nGot no result\r\nGot no result\r\nGot no result\r\nGot no result\r\nGot no result\r\nGot no result\r\n\r\nThe expected output is at https://github.com/scala/scala/blob/master/test/files/presentation/doc.check\r\n\r\nSo, the second commit disables it. If you need an accompanying ticket, I will create it just let me know."
2086,'',"SI-5744 evidence params are now SYNTHETIC \nThe macro def <-> macro impl correspondence check compares names of the\r\ncorresponding parameters in def and impl and reports an error if they\r\ndon't match. This was originally designed to avoid confusion w.r.t named\r\narguments (which ended up being never implemented as described in SI-5920).\r\n\r\nSometimes parameter names are generated by the compiler, which puts the\r\nuser in a tough position. Luckily, there's an escape hatch built it, which\r\nomits the name correspondence check if one of the parameters are SYNTHETIC.\r\nEverything went well until we realized that evidences generated by\r\ncontext bounds aren't SYNTHETIC, which led to the bug at hand.\r\n\r\nMarking auto-generated evidence parameters SYNTHETIC was only the first\r\nstep, as the correspondence checker uses parameter symbols, not parameter\r\ntrees. Why's that a problem? Because SYNTHETIC doesn't get propagated from def\r\ntrees to their underlying symbols (see ValueParameterFlags).\r\n\r\nUnfortunately one cannot just change ValueParameterFlags, because that\r\nwould break printouts generated in TypeDiagnostics, which is designed to not\r\nprint synthetic symbols.\r\n\r\nTherefore now we not only check paramSym.flags, but also paramDef.mods.flags\r\nwhen doing corresponce sweeps. This fixes the problem and doesn't mess up\r\nerror messages and debug printouts."
2085,'','SI-5824 Fix crashes in reify with _*\nReification crashes if "foo: _*" construct is used. This happens besause type tree is represented either with TypeTree, or with Ident (present case), and `toPreTyperTypedOrAnnotated\' only matches of the former. The fix is to cover the latter too. A test is included.'
2084,'',"SI-6113 typeOf now works for type lambdas\nIt's not a problem to have an abstract type symbol in a ground type tag\r\nif that symbol is defined in the type being reified.\r\n\r\nThis mechanics was already built in for existentials, now we extend it to\r\ninclude type params of poly types."
2083,'adriaanm','SI-6240 synchronization for runtime reflection\nUnlike its predecessors, this pull request is for realz! \r\n\r\nI have several stress tests for reflection, and I also have successfully run parallel tests in a couple of projects, whose authors reported crashes when using runtime reflection.\r\n\r\nreview @paulp @adriaanm @retronym'
2082,'adriaanm','SI-6807 Deprecating the Actors library.\nAll public classes, traits and objects marked as deprecated.\r\nAdded deprecation note on the package object.\r\nEmbedded external libraries (ThreadPool etc.) are not deprecated as they are intended for internal use only.\r\n\r\nReview by: @phaller'
2081,'',"SI-6240 synchronization for runtime reflection\nThis is the first step in synchronizing reflection. First we get it working in multi-threaded environment, afterwards I'll look into making it fast (see the comments in `Gil.scala` for more information)."
2080,'','[nomaster] Revert "SI-5017 Poor performance of :+ operator on Arrays"\nThis reverts commit 02b2da63409af6a28824cbb74d00d0ec04518c8d.'
2079,'adriaanm',"SI-7070 Turn restriction on companions in pkg objs into warning\nThe implementation restriction created from SI-5954 in\r\n3ef487ecb6733bfe3c13d89780ebcfc81f9a5ea0 has two problems.\r\n\r\n1) The problematic code works fine if compile with sbt. That means the\r\nrestriction is breaking some people needlessly.\r\n\r\n2) It's not binary compatible.\r\n\r\nTo fix all that this commit changes the error into a warning and removes\r\nthe setting used to get around the restriction."
2078,'','Reflection API: Module to Object refactoring\n'
2077,'','Update src/library/scala/sys/process/package.scala\nFix broken wildcard expansion in the `sys.process` docs. (Using `"sh -c \'scalac *.scala\'"` did not work.)'
2076,'','Update src/library/scala/sys/process/ProcessBuilder.scala\nFix typesetting of unordered list items in the `ProcessBuilder` docs.'
2075,'','Add a request to presentation compiler to fetch doc comment information.\nRefactor scaladoc base functionality to allow it to be mixed in with Global in the IDE.\r\nReview by @dragos.'
2074,'',"SI-5744 evidence params are now SYNTHETIC\nThe macro def <-> macro impl correspondence check compares names of the\r\ncorresponding parameters in def and impl and reports an error if they\r\ndon't match. This was originally designed to avoid confusion w.r.t named\r\narguments (which ended up being never implemented as described in SI-5920).\r\n\r\nSometimes parameter names are generated by the compiler, which puts the\r\nuser in a tough position. Luckily, there's an escape hatch built it, which\r\nomits the name correspondence check if one of the parameters are SYNTHETIC.\r\nEverything went well until we realized that evidences generated by\r\ncontext bounds aren't SYNTHETIC, which led to the bug at hand.\r\n\r\nMarking auto-generated evidence parameters SYNTHETIC was only the first\r\nstep, as the correspondence checker uses parameter symbols, not parameter\r\ntrees. Why's that a problem? Because SYNTHETIC doesn't get propagated from def\r\ntrees to their underlying symbols (see ValueParameterFlags).\r\n\r\nUnfortunately one cannot just change ValueParameterFlags, because that\r\nwould break printouts generated in TypeDiagnostics, which is designed to not\r\nprint synthetic symbols.\r\n\r\nTherefore now we not only check paramSym.flags, but also paramDef.mods.flags\r\nwhen doing corresponce sweeps. This fixes the problem and doesn't mess up\r\nerror messages and debug printouts."
2073,'','SI-6961 maintain structural sharing in list serialization.\nAfter the decision made on the meeting, reverting list serialization back to\r\nwhat it was in 2.9.x and before.\r\nWe do not guarantee that structural sharing is maintained in serialized lists.\r\n\r\nReview by @phaller'
2072,'','SI-6591 Reify and path-dependent types\nReification scheme changed. Now Select an SelectFromTypeTree trees\r\nreified appropriately, as Select and SelectFromTypeTree accordingly.\r\nPackages and Predef object was excluded in order not to break the\r\nexisting reification scheme and not to break tests which rely on it.\r\n\r\nReified free terms can contain flag <stable> to make reified values\r\nbecome stable identifiers. For example in the case of\r\nreify_newimpl_15.scala\r\n\r\n    class C {\r\n      type T\r\n      reify { val v: List[T] = List(2) }\r\n    }\r\n\r\nclass C reified as free term C$value, and List[C.T] becomes\r\nList[C$value().T], so C$value.apply() need to pass stability test\r\nisExprSafeToInline at scala.reflect.internal.TreeInfo. For this purpose\r\nspecial case for reified free terms was added to isExprSafeToInline\r\nfunction.\r\n\r\ntest `reify_newimpl_30.scala` disabled due to [SI-7082](https://issues.scala-lang.org/browse/SI-7082)\r\ntest `t6591_4.scala` moved to pending due to [SI-7083](https://issues.scala-lang.org/browse/SI-7083)\r\n\r\nreview by: @xeno-by'
2071,'','SI-6773 Changes IndexSeqFactory to be "since 2.11"\nThe addition of IndexSeqFactory to 2.10.x branch created a binary\r\nincompatibility so it was removed in that branch before being released.\r\nThis commit fixes the since annotation to 2.11 on IndexSeqFactory in the\r\nmaster branch.\r\n\r\nRelates to https://github.com/scala/scala/pull/2064'
2070,'','SI-6807 Deprecating the Actors library.\nAll public classes, traits and objects marked as deprecated.\r\nAdded deprecation note on the package object.\r\nEmbedded external libraries (ThreadPool etc.) are not deprecated as they are intended for internal use only.\r\n\r\nRetargetting #1903 to master\r\n\r\nReview by: @phaller \r\n'
2069,'',"SI-6888 Loosen criteria for $outer search.\nIn order to cater for nested classes with names that end\r\nwith '$', which lead to ambiguity when unmangling expanded\r\nnames.\r\n\r\nIn:\r\n\r\n    class X { object $ }\r\n\r\nWe end up with:\r\n\r\n    orginalName(X$$$$$outer) = $$$outer\r\n\r\nThis change modifies `outerSource` to consider that to be\r\nand outer accessor name. It is a piecemeal fix, and no doubt\r\nthere are other nasty surprises in store for those inclined to\r\nflash their $$$ in identifier names, but the method changed is\r\nnot used widely and this solves the reported problem.\r\n\r\nSI-2806 remains open to address the deeper problem.\r\n\r\nReview by @JamesIry"
2068,'','[nomaster] SI-7064 Reflection: forward compat for 2.10.1\n'
2067,'','SI-5675 Discard duplicate feature warnings at a position\nWhen -feature has not been enabled, we were double counting\r\nidentical feature warnings that were emitted at the same position.\r\nNormal error reporting only reports the first time a warning\r\nappears at a position; feature warning counter incrementing\r\nshould behave the same way.\r\n\r\nReview by @hubertp'
2066,'',"SI-7070 Revert implementation restriction on companions in pkg objs\nThe implementation restriction created from SI-5954 has two problems.\r\n\r\n1) The problematic code works fine if compile with sbt. That means the\r\nrestriction is breaking some people needlessly.\r\n\r\n2) It's not binary compatible.\r\n\r\nThe implementation restriction needs to be reverted.\r\n\r\nThis commit reverts 3ef487ecb6733bfe3c13d89780ebcfc81f9a5ea0"
2065,'','Change Doc to trait to allow it to be used as a cake slice.\nChange the implementation of getDocumentation() method.\r\nRename and privatize symbols in CommentFactoryBase to avoid clashes when cooking a cake.'
2064,'','[nomaster] SI-6773 Makes the SI-6150 changes binary compatible with 2.10\nThe back ported fix of SI-6150 1f0e488 broke binary compatibility. This commit fixes that by removing the IndexedSeqFactory class and copy/pasting its one method around to everything that extended it then re-adds some inner classes needed by the binary compatibility checker.\r\n\r\nreview @retronym'
2063,'','[nomerge] SI-6667 Demote a new ambiguity error to a lint warning.\nIn the interests of not breaking source compability.\r\nA few projects are relying on this bug.\r\n\r\nShould not be merged to master.\r\n\r\nReview by @paulp'
2062,'','SI-5833 Fixes tail-of-Nil problem in RefinedType#normalizeImpl\nRefinedType#normalizeImpl was checking to see if the flattened list of\r\nparents had an empty tail then pulling the head if so. But if the list\r\nwas empty then boom. This fix makes it check if the whole list has\r\nlength 1 instead. Empty lists will flow through to the rest the logic\r\nwhich has no problems with Nil.\r\n\r\nreview @adriaanm or @hubertp\r\n\r\nQuestions for reviewer to contemplate:\r\nI had no luck finding a reproducing test case. Can you?\r\nShould a refinement type with no parents and no decls normalize to AnyRef instead of falling through to the rest of the logic?\r\n'
2061,'','Merge Analyzer Plugins for Master\nReview by @retronym. Includes the exact same commits as #2022, plus the merge.'
2060,'','Revert "SI-6422: add missing Fractional and Integral alias in scala package"\nThis reverts commit c6866a28faf67cd2e455f9a0a829859a73e38819 because it adds two\r\nmembers to the API and so breaks forward binary compatibility.\r\n\r\nAttention: this is only intended for 2.10.x, not for 2.11.\r\n\r\nThanks to Paul Phillips for the report:\r\nhttps://groups.google.com/d/topic/scala-internals/WQ0LKC8Re6A/discussion'
2059,'','SI-7060 More conservative dead code elim marking\nIn dead code elimination, a DROP instruction that gets marked as useful\r\nand can be reached via several paths needs to also mark all the reaching\r\ndefinitions as useful, else we\'ll get unbalanced stacks on the two paths.\r\n\r\nA simplistic example:\r\n```\r\nBB1:\r\n  CALL X       // useful, leaves a LONG on the stack\r\n  JUMP BB3\r\n\r\nBB2:\r\n  LOAD_FIELD Y // not useful\r\n  JUMP BB3\r\n\r\nBB3:\r\n  DROP LONG    // useful because "CALL X" is useful\r\n               // but unless we mark "LOAD_FIELD Y" as useful too\r\n               // we\'ll get unbalanced stacks when reaching BB3\r\n```\r\n\r\nThis patch addresses the unbalanced stack problem by adding all the\r\nreaching definitions of a useful DROP as useful instructions too.'
2058,'','[testing the per-commit build kitten, please ignore]\n'
2057,'','SI-6355, weakend implementation restriction on applyDynamic.\nI realized one can successfully call an overloaded applyDynamic,\r\nunder conditions such as these:\r\n```\r\n  def applyDynamic[T1](m: String)(x1: T1): Any = 1\r\n  def applyDynamic[T1, T2](m: String)(x: T1, y: T2): Any = 2\r\n  def applyDynamic[T1, T2, T3](m: String)(x: T1, y: T2, z: T3): Any = 3\r\n```\r\nSo I weakened the overloading restriction to allow overloading\r\nif each method has a distinct number of type parameters. This very\r\nlikely still allows the creation of uncallable overloads, but an\r\noverly restrictive rule is worse. If the overload cannot be called,\r\nit will still be discovered at the call site.'
2056,'','SI-5824 Fix crashes in reify with _*\nReification crashes if "foo: _*" construct is used. This happens besause type tree is represented either with TypeTree, or with Ident (present case), and `toPreTyperTypedOrAnnotated\' only matches the former. The fix is to cover the latter too. A test is included.\r\n\r\nThis is a copy of a pull request [1930](https://github.com/scala/scala/pull/1930), which was accidentially merged with some tests still failing.'
2055,'','Can we have the opposite method of Seq.isEmpty?\nIt bothers me a little that I have to use ```if (! seq.isEmpty)...```. I wish there was a method that would compose a positive condition instead.\r\n\r\nDoes a method like this exist already?\r\n\r\nThanks!'
2054,'',"SI-6240 synchronization for runtime reflection\nThis is the first step in synchronizing reflection. First we get it working in multi-threaded environment, afterwards I'll look into making it fast (see the comments in `Gil.scala` for more information)."
2053,'',"SI-6146 More accurate prefixes for sealed subtypes.\nWhen analysing exhaustivity/reachability of type tests\r\nand equality tests, the pattern matcher must construct\r\na set of sealed subtypes based on the prefix of the\r\nstatic type of and the set of sealed descendent symbols\r\nof that type.\r\n\r\nPreviously, it was using `memberType` for this purpose.\r\nIn simple cases, this is sufficient:\r\n\r\n    scala> class C { class Inner }; object D extends C\r\n    defined class C\r\n    defined module D\r\n\r\n    scala> typeOf[D.type] memberType typeOf[C#Inner].typeSymbol\r\n    res0: u.Type = D.Inner\r\n\r\nBut, as reported in this bug, it fails when there is an\r\nadditional level of nesting:\r\n\r\n    scala> typeOf[D.type] memberType typeOf[c.O.Inner forSome { val c: C }].typeSymbol\r\n    res5: u.Type = C.O.Inner\r\n\r\n    scala> typeOf[Any] memberType typeOf[c.O.Inner forSome { val c: C }].typeSymbol\r\n    res6: u.Type = C.O.Inner\r\n\r\nThis commit introduces `deepMemberType`, which uses `memberType`\r\nrecursively over the prefix chain.\r\n\r\n    scala> deepMemberType(typeOf[D.type], typeOf[c.O.Inner forSome { val c: C }].typeSymbol)\r\n    res3: u.Type = D.O.Inner\r\n\r\nReview by @adriaanm && @paulp\r\n  - I'm not sure how to join the dots on the connection to `dealiasWiden`\r\n  - `memberTypeDeep` is something of a straw-man, better suggestions?\r\n  - is this something we might expect `AsSeenFrom` to handle automatically?"
2052,'',"Merge 2.10.x into master.\n@retronym ExtensionMethods could use a good look to make sure I didn't butcher something. It's all starting to look like swahili to me.\r\n\r\nI'm morbidly curious to see how someone else will fare with one of these backport-heavy merge offerings."
2051,'','SI-7039 unapplySeq result type independent of subpattern count\nFixes a bug in the implementation of the `unapplySeq` part of the spec below.\r\n\r\nAn `unapply` method with result type `R` in an object `x` matches the \r\npattern `x(p_1, ..., p_n)` if it takes exactly one argument and, either:\r\n  - `n = 0` and `R =:= Boolean`, or\r\n  - `n = 1` and `R <:< Option[T]`, for some type `T`.\r\n     The argument pattern `p1` is typed in turn with expected type `T`.\r\n  - Or, `n > 1` and `R <:< Option[Product_n[T_1, ..., T_n]]`, for some\r\n    types `T_1, ..., T_n`. The argument patterns `p_1, ..., p_n` are\r\n    typed with expected types `T_1, ..., T_n`.\r\n\r\nAn `unapplySeq` method in an object `x` matches the pattern `x(p_1, ..., p_n)`\r\nif it takes exactly one argument and its result type is of the form `Option[S]`,\r\nwhere either:\r\n  - `S` is a subtype of `Seq[U]` for some element type `U`, (set `m = 0`)\r\n  - or `S` is a `ProductX[T_1, ..., T_m]` and `T_m <: Seq[U]` (`m <= n`).\r\n\r\nThe argument patterns `p_1, ..., p_n` are typed with expected types\r\n`T_1, ..., T_m, U, ..., U`. Here, `U` is repeated `n-m` times.\r\n\r\n\r\nreview by @retronym, /cc @jrudolph (thanks for the original patch in #2004!)'
2050,'','SI-6017 Scaladoc: Fix dangling links on index.html\nAs @heathermiller and @VladUreche commented in #1861, I removed `<a>` and use `<span>` instead when there is no page to link to.'
2049,'','https://github.com/scala/scala/pull/1861\n'
2048,'','Fix SI-6578. Deprecated `askType` because of possible race conditions in...\n... type checker.\r\n\r\nAskType triggers type-checks the given source and returns a typed tree. If that\r\nsource is already loaded (a precondition), the background compilation loop may actually\r\nbe compiling that same source. The new type checker run may then get into an inconsistent\r\nstate and try to add twice the same synthetic members, like `canEqual`.\r\n\r\nMost of the times, `askLoadedTyped` (that waits for the type checker to finish, and\r\nreturns the most recent typed tree) *is* the right way to go.\r\n\r\nRemoved occurrences of the deprecated method in tests and interactive.REPL.\r\n\r\n@reviewby @huitseeker,@odersky'
2047,'','[Backport] Fix for SI-6426, importable _.\nbackports 357f45c1152728a5e461312f462aa7ab63e2adec\r\n\r\nProhibit `_` as an identifier, it can only bring badness.'
2046,'',"SI-4714 Initialize history while initializing the REPL's reader\nIt was possible to get a command into the REPL before the history\r\nrecording object was set and so the command would be lost in the sands\r\nof time. This fix just moves the initialization of the history object\r\ninto the JLineReader constructor, out of the post-init hook.\r\n\r\n@paulp how is this going to break things? Also, I don't have a clue how to automate the testing of this."
2045,'',"Overhaul of tools/partest-ack.\nI decided what would be really handy for test selection is\r\nbeing able to run all the tests which were created or modified\r\nat the same time as something else. Right now that is at file\r\ngranularity, though it would be simple enough to generalize it\r\nsuch that any expression which can be translated to a set of\r\ngit commits can also be turned into a selection of tests.\r\n\r\nI added some other options as well:\r\n```\r\nUsage: $0 <regex> [-dfquvp] [ack options]\r\n\r\n  -d          pass --debug to partest\r\n  -f          pass --failed to partest\r\n  -q          DON'T pass --show-log and --show-diff to partest\r\n  -u          pass --update-check to partest\r\n  -v          pass --verbose to partest\r\n  -p <path>   select tests appearing in commits where <path> was also modified\r\n```\r\nExample usage:\r\n```\r\n  > tools/partest-ack -p src/compiler/scala/tools/nsc/typechecker/Checkable.scala\r\n  % tests-modified-in-same-commit  ...  12\r\n  # 12 tests to run.\r\n  Testing individual files\r\n  testing: [...]/files/pos/t6537.scala                                  [  OK  ]\r\n\r\n  Testing individual files\r\n  testing: [...]/files/neg/unchecked-impossible.scala                   [  OK  ]\r\n  testing: [...]/files/neg/t1872.scala                                  [  OK  ]\r\n  testing: [...]/files/neg/t4302.scala                                  [  OK  ]\r\n  testing: [...]/files/neg/unchecked-knowable.scala                     [  OK  ]\r\n  testing: [...]/files/neg/unchecked-abstract.scala                     [  OK  ]\r\n  [etc]\r\n```"
2044,'','SI-7029 - Makes sure that uncaught exceptions are propagated to the UEH ...\n...for the global ExecutionContext\r\n\r\nAlready reviewed and discussed at b673248542af4f2558f1a41e41b63e162a09581d\r\n\r\nReview by @adriaanm'
2043,'',"SI-3353 don't extract <unapply-selector> into named-arg local val\nReview by @adriaanm"
2042,'','SI-5151 - Add firstKey and lastKey to LongMap.\n'
2041,'','SI-6411 reflection is now aware of posterasure\nThe `transformedType` method, which is used to bring Scala types to Java\r\nworld, was written in pre-valueclass times. Therefore, this method only\r\ncalled transforms from erasure, uncurry and refChecks.\r\n\r\nNow runtime reflection becomes aware of posterasure and as a consequence\r\nmethods, which have value classes in their signatures, can be called\r\nwithout having to wrap them in catch-a-crash clause.'
2040,'',"SI-7008 @throws annotations are now populated in reflect\nRuntime reflection in JavaMirrors previously forgot to fill in\r\n@throws when importing Java reflection artifacts. Now this is fixed.\r\n\r\nNote that generic exception types used in `throws` specifications will\r\nbe garbled (i.e. erased), because we don't use `getGenericExceptionTypes`\r\nin favor of just `getExceptionTypes` to stay compatible with the behavior\r\nof ClassfileParser. That's a bug, but a separate one and should be fixed\r\nseparately.\r\n\r\nAlso note that this commit updated javac-artifacts.jar, because we need\r\nto test how reflection works with javac-produced classfiles. The sources\r\nthat were used to produce those classfiles can be found in the jar next\r\nto the classfiles."
2039,'','SI-7046 reflection now auto-initializes knownDirectSubclasses\nknownDirectSubclasses joins the happy family of flags, annotations and\r\nprivateWithin, which automatically trigger initialization, when used\r\nwithin runtime reflection.'
2038,'','SI-7045 reflection now auto-initializes thisSym\nthisSym joins the happy family of flags, annotations and privateWithin,\r\nwhich automatically trigger initialization, when used within runtime\r\nreflection.'
2037,'',"[backport] Removed restriction on final vars, SI-2418.\nBackport of b79c7600544db9964c228b94a2f70f3ed854f89b\r\n\r\nThe original fix for SI-2418 excluded final vars entirely, but\r\nthe problem was not final vars per se, but the emission of ACC_FINAL\r\nin combination with ACC_VOLATILE.  Since vars never get ACC_FINAL\r\nnow, this is no longer an issue.\r\n\r\nreview @paulp since it's a backport of his code"
2036,'','[backport] the scanner is now less eager about deprecations\nBackport of https://github.com/scala/scala/pull/1807'
2035,'retronym','SI-6989 privateWithin is now populated in reflect\nRuntime reflection in JavaMirrors previously forgot to fill in\r\nprivateWithin when importing Java reflection artifacts. Now this is fixed.'
2034,'',"evicts eponymous packages and objects from tests\nAs I figured out from http://groups.google.com/group/scala-internals/browse_thread/thread/ace970a799dcf7a0,\r\ncurrent behavior with same-named objects silently taking precedence over\r\nsame-named packages is a bug and shouldn't be relied upon."
2033,'',"pattern matching efficiency: addresses SI-6686 and SI-6941, affects SI-5739\n- don't do null check when we know we've just done a type test\r\n- don't store subpatterns bound to underscore in local val\r\n  - note 1: under -optimize this is only done when correctness mandates it for mutable fields\r\n  - note 2: mutable fields in case classes nested in the scala package are assumed not to be mutated by public methods, so that we don't have to store them (specifically for ::) --> this affects SI-5739\r\n- eliminate local vals storing subpatterns when the vals aren't referenced  (their rhs's side-effect is not guaranteed anyway, and normally not observable)\r\n- eliminate primitive value class type test when we statically know it can't fail\r\n- test all this at the bytecode level by comparing bytecode of a match and the equivalent if/then/else/isInstanceOf/asInstanceOf/equals/...\r\n\r\nreview by @gkossakowski, @retronym"
2032,'',"Bump the default memory setting in ANT_OPTS to 2G.\nThe reason is that `ant dist` fails with our current default (1.5G)\r\nbecause Scaladoc needs more memory. This is being discovered by\r\nnewcomers every few weeks and they just go and adjust their own\r\nenvironment variable `ANT_OPTS`. Let's save that trouble and fix\r\nthe default."
2031,'',"SI-6669 Add . to the default scalap classpath\nThe default classpath for scalap did not include '.' which made it\r\nbehave differently from javap in an annoying way. This commit adds\r\nit to the default. Also included is a test to make sure it's in\r\nthe default but does not corrupt a user specified classpath.\r\n\r\nreview @retronym (by random roll of the dice)"
2030,'',"Always build scala-swing in java7 branch.\nThe 6dd90d349da6471c0a105c584798979f136d7d55 commit introduced a way\r\nto skip building swing in case one is not using Java 6 (e.g. using\r\nJava 7). That change was meant to make it easier to work with master\r\nno matter if one is using Java 6 or Java 7 because for everything\r\napart from swing it doesn't matter.\r\n\r\nHowever, that change propagated to java7 branch which exists only to\r\ndeal with Swing problems and is meant to be used with Java 7 only.\r\nIn this branch we should get rid of conditional building of Swing and\r\nbuild all the time."
2029,'',"Merge master to java7 branch\nThere were no conflicts during merge so nothing to review really.\r\n\r\nHowever, I'd still like to request for stamp of approval from @paulp."
2028,'','SI-6728 Fixes crash in parser on incomplete for expression\nThe parser was trying to take the position of an empty expression\r\nwhich would crash. Son on the empty expression case in TreeBuilder#\r\nmakeWhile it tries to do that and, if that failed, gets a position\r\nthat wraps both the condition and the body.\r\n\r\nI also made a slight improvement to the UnsupportedOperationEx\r\nmessages in Position.\r\n\r\nreview @paulp'
2027,'',"Fix access to empty package from the repl.\nIt seems that way back in f5c336d566 three months ago I\r\nbooched the repl's ability to get at the empty package.\r\nI've noticed this a hundred times but strangely it has not\r\nbeen reported by anyone else. Perhaps you are all religious\r\npackage users. In any case, it is back."
2026,'','SI-2818 Makes List#foldRight work for large lists\nUses length compare to determine if the list is "large" (currently\r\nmeaning 10 or more elements). If so, it reverses the list and does a\r\na fold left with the flip of the supplied function. For small lists it\r\nuses the default foldRight implementation.\r\n\r\nThe code was written by @paulp. I\'m just packaging it up and adding\r\nsome tests.\r\n\r\nreview @gkossakowski '
2025,'','SI-6516, macros comparing types with == instead of =:=.\nI gift-wrapped this ticket four months ago:\r\n\r\n  \'I think it will be enough to say "tpe =:= MacroContextClass.tpe"\r\n   rather than == .\'\r\n\r\nIndeed. Had to open my own gift. Thanks, paulp!'
2024,'',"SI-6812 scaladoc can opt out of expanding macros \nThis is a temporary change, possible only because macros currently can't\r\naffect the global symbol table (except for the case when they will steer\r\ninference of a method's return type).\r\n\r\nLater on, e.g. with the addition of c.introduceTopLevel in master,\r\nwe will have to upgrade Scaladoc to allow for separate generation of\r\ndocumentation, because then we'll be forced to expand macros in order to\r\nget the whole picture of the code."
2023,'','Extractors for value class trees.\nSalvaged from work six months ago on value class bugs. Seemed like\r\na shame to lose it (look at the "after" in posterasure.) There may\r\nbe some modest overlap with some other tree extractors; I suggest\r\nthat tree extractors are not amenable to one-size-fits-all-ness,\r\nand modest overlap should be tolerated, maybe even embraced.\r\n\r\nI admit ignorance as to what happend with t6028.check.'
2022,'','Analyzer Plugins\nResubmission of #2005, incorporated the points discussed:\r\n\r\n- `debuglog` and more documentation about function types with refinements in UnCurry\r\n  - new: removed an unnecessary `if` in UnCurry\r\n- `AnnotationCheckers` are source compatible with the way they were before. I checked that this works by running the un-modified version of the continuations plugin.\r\n- Removed the hook into `SymbolTable.phase_=`\r\n- Word-Wrapped commit comments\r\n- Fixed Typos'
2021,'',"SI-7009: `@throws` annotation synthesized incorrectly\nThe 990b3c7 made `scala.throws` annotation polymorphic but forgot to\r\nadapt compiler code that synthesizes it, e.g. when parsing class files.\r\n\r\nThe consequence was that we would get non-deterministically either\r\n`scala.throws` or `scala.throws[T]` as a type for synthesized annotation.\r\nThe reason is that `Symbol.addAnnotation` would call `tpe` method which\r\ndoes not initialization of symbol so type parameters list would not be\r\ndetermined correctly. Only if info of that symbol was forced for other\r\nreason we would get `scala.throws[T]`. That non-deterministic behavior\r\nwas observed in sbt's incremental compiler.\r\n\r\nAnother problem we have is that Scala allows polymorphic exceptions\r\nso in ClassfileParser we could synthesize `@throws` annotation with\r\nwrong (polymorphic) type applied. In such case the best we can do\r\nis to convert such type to monomorphic one by introducing existentials.\r\n\r\nHere's list of changes this commit introduces:\r\n  * The `Symbol.addAnnotation` that takes symbol as argument asserts\r\n    that the type represented by that symbol is monomorphic (disabled\r\n    due to cycles; see comments in the code)\r\n  * Introduce `Symbol.addAnnotation` overload that allows us to pass\r\n    an applied type\r\n  * Change all places where polymorphic annotations are synthesized\r\n    to pass an applied type\r\n  * Handle polymorphic exception types in\r\n    `ClassfileParser.parseExceptions`\r\n\r\nFixes SI-7009."
2020,'',"[retarget #1994 to 2.10.x] SI-6726 Improving pattern matcher analysis performance\nA dash of hash consing and a pinch of loop fusion.\r\n\r\nThese were just follow-the-profiler changes; I suspect there are bigger wins to be had. Perhaps the wins here don't merit closing the ticket.\r\n\r\nPerhaps we could think about how to efficiently handle the common case where each case performs a single a) type test against a leaf type (one not subclassed by any other types that are tested), or b) equality test against a constant that is also unique within the match.\r\n\r\nI'll leave consideration of that the reviewer, @adriaanm."
2019,'',"SI-6539 moves @compileTimeOnly away from scala-reflect\nThe move is done to provide forward compatibility with 2.10.0.\r\n\r\nThe annotation isn't replaced with one of the macro-based solutions\r\nright away (see comments for more information about those), because\r\nwe lack necessary tech in 2.10.x."
2018,'',"SI-6240 synchronization for runtime reflection\nLocks are no fun, but it looks like that's our only hope of getting thread-safety in 2.10.1."
2017,'paulp',"Booking more progress on SI-6666\n - Avoids unneeded outer pointers for classes nested indirectly in self/super calls\r\n - Expands implementation restriction to prevent verify errors in early initializers\r\n\r\nCloses SI-6259 and SI-6506; a bit more work is needed on SI-6666/SI-6957.\r\n\r\nReview by @paulp / @JamesIry.\r\n\r\nI'll warn you up front that there is some less than beautiful code in `ExplicitOuter` to communicate these errors as implementation restrictions, rather than crashes."
2016,'','Change Doc to trait to allow it to be used as a cake slice.\nChange the implementation of retrieve() method.\r\nRename and privatize symbols in CommentFactoryBase to avoid clashes when cooking a cake.'
2015,'','10 backports\nBackports of: SI-6595, SI-6584, SI-6426, SI-6072,\r\nSI-5604, SI-5859, SI-5353, SI-5130, SI-4729, SI-2418\r\n'
2014,'',"Add Bytecode test (ASM-based) to partest.\nThis commit introduces a new kind of test `Bytecode` that allows\r\none to inspect bytecode generated for given piece of Scala code.\r\n\r\nThe bytecode inspection is achieved by inspection of ASM trees.\r\nSee the included example for details.\r\n\r\nNOTE: This commit does not introduce a new category of pratest tests.\r\nBytecode tests should be run in `jvm` category of partest tests.\r\n\r\nSpecific list of changes:\r\n  * Add BytecodeTest that contains common utilities to partest\r\n  * Add asm to classpath when compiling partest. That's not a\r\n    new dependency as it's being already done for javac task\r\n    we were running while compiling partest.\r\n  * Add an example test that shows how to count null checks in\r\n    given method."
2013,'','Changes many calls from normalize to dealiasWiden.\n'
2012,'','Merge 2.10.x into master.\n'
2011,'adriaanm',"SI-6187 Make partial functions re-typable\n - `New(tpe)` doesn't survive a `resetAttrs` / typecheck; use\r\n   a name instead.\r\n - Abandon the tree attachment that passed the default\r\n   case from `typer` to `patmat`; this tree eluded the\r\n   attribute reset performed in the macro. Instead, add it\r\n   to the match. Apart from making the tree re-typable, it\r\n   also exposes the true code structure to macros, which\r\n   is important if they need to perform other code\r\n   transformations.\r\n - Install original trees on the declared types of the\r\n   parameters of the `applyOrElse` method to ensure that\r\n   references to them within the method pick up the correct\r\n   type parameter skolems upon retypechecking.\r\n - Propagate `TypeTree#original` through `copyAttrs`,\r\n   which is called during tree duplication / `TreeCopiers`.\r\n   Without this, the original trees that we installed were\r\n   not visible anymore during `ResetAttrs`.\r\n\r\nWe are not able to reify partial functions yet -- the\r\nparticular sticking point is reification of the parentage\r\nwhich is only available in the `ClassInfoType`.\r\n\r\nReview by @adriaanm / @xeno-by \r\n\r\nI'm using `typedCase` now, based on your prior review. The `asInstanceOf` is also gone."
2010,'','[backport] Disabled SI-6987.\nIt causes spurious failures - a typical example:\r\n\r\n[partest] testing: [...]/files/run/t6987.scala                                  [FAILED]\r\n[partest] did not get the string expected, full results were:\r\n[partest] Fast Scala compiler version 2.11.0-20130126-111937-f01e001c77 -- Copyright 2002-2013, LAMP/EPFL\r\n[partest] [Given arguments: -shutdown -verbose]\r\n[partest] [Transformed arguments: -shutdown -verbose -current-dir /localhome/jenkins/b/workspace/scala-checkin-manual]\r\n[partest] [VM arguments: ]\r\n[partest] java.net.ConnectException: Connection refused\r\n[partest] [Connecting to compilation daemon at port 32808 failed; re-trying...]\r\n[partest] [No compilation server running.]\r\n[partest]\r\n(cherry picked from commit 53d5df5c1d52b941732c243159de4f44456f03b4)'
2009,'',"SI-6370 changed ListMap apply method to produce correct error message\nCurrent implementation of apply uses tail recursive apply0 to get a value from a key. apply0 relies on tail method to iterate over all keys.When the list gets to its end, tail produces an 'empty map' message in its exception, which is thrown by ListMap. This change catches this exception in the apply method and change the exception message to a more appropriate 'key not found' message\r\n\r\nreview by @phaller"
2008,'','Optimization in AsSeenFromMap.\nDespite all the eyes which have traveled over this code,\r\nwe all managed to miss this:\r\n```\r\n  // Note that pre and clazz are fixed at construction\r\n  class AsSeenFromMap(pre: Type, clazz: Symbol) {\r\n    ...\r\n    def apply(tp: Type): Type =\r\n      if (skipPrefixOf(pre, clazz)) tp\r\n      else ...\r\n  }\r\n```\r\nAdditionally, the exclusion condition in asSeenFrom contained\r\na useless check, here:\r\n```\r\n  // !isPossiblePrefix(clazz) alone is enough\r\n  pre.normalize.isTrivial && !isPossiblePrefix(clazz)\r\n```'
2007,'','[backport] Fix for SI-6154, VerifyError originating in uncurry.\nLhs still might be an Ident.  Miguel did all the work,\r\nI just wrote it down in code form.\r\n(cherry picked from commit 48f8235822a2a100d6c4e8d3d7349df565ac6d40)\r\n\r\nBackport of #1021 \r\n\r\nReview by @magarciaEPFL'
2006,'','[backport] SI-6301 / SI-6572 specialization regressions \n - Backports parts of #1226\r\n - omits the warnings for overloaded symbols after typer\r\n    - to get rid of those, we would need a few library changes\r\n - Adds the test case from SI-6572 provided by @ijuma after the original bug was fixed.\r\n\r\nReview by @paulp'
2005,'','Analyzer plugins\nvarious fixes, cleanups in namers. new: analyzer plugins. check individual commit messages.\r\n\r\nreview by @paulp, @retronym'
2004,'','SI-7039 if unapplySeq returns an option of a product `nbSubPats` is not ...\n...enough to check because this will miss a pattern with one product element and an empty repeated argument list.\r\n\r\nThe proposed solution is to check the number of elements in the expected product as well before concluding that an extractor is _no_ unapplySeq.\r\n\r\nThis seems to fix it but I suppose there are better ways to achieve the same effect.'
2003,'','SI-7039 if unapplySeq returns an option of a product `nbSubPats` is not ...\n...enough to check because this will miss a pattern with one product element and an empty repeated argument list.\r\n\r\nThe proposed solution is to check the number of elements in the expected product as well before concluding that an extractor is _no_ unapplySeq.\r\n\r\nThis seems to fix it but I suppose there are better ways to achieve the same effect.'
2002,'','Revert "SI-6811 Misc. removals in util, testing, io, ..."\nThis partially reverts commit f931833df8cc69d119f636d8a553941bf7ce2349.\r\n\r\nThe commit got reverted because it breaks Sbt that relies on\r\nthe old implementation of MurmurHash. The new implementation\r\ngot introduced in Scala 2.10 but sbt supports Scala 2.9 so\r\nthere\'s no way to migrate it to the new implementation hence\r\nwe have to keep the old one a while longer.\r\n\r\nReview by @paulp'
2001,'','SI-5313 Do not eliminate stores that potentially wipe referenes\nStoring to local variables of reference or array type is indirectly\r\nobservable because it potentially allows gc to collect an object. So\r\nthis commit makes DeadCodeElimination mark a store necessary if it\r\nassigns to a local that potentially stored by a previous necessary store.\r\n\r\nreview @paulp, @magarciaEPFL'
2000,'','[backport] SI-5378, unsoundness with type bounds in refinements.\nAs the comment says:\r\n\r\nNot enough to look for abstract types; have to recursively check\r\nthe bounds of each abstract type for more abstract types. Almost\r\ncertainly there are other exploitable type soundness bugs which\r\ncan be seen by bounding a type parameter by an abstract type which\r\nitself is bounded by an abstract type.\r\n\r\nSPECIAL: BUY ONE UNSOUNDNESS, GET ONE FREE\r\n\r\nIn refinement types, only the first parameter list of methods\r\nwas being analyzed for unsound uses of abstract types. Second\r\nparameter list and beyond had free unsoundness reign. That bug\r\nas well is fixed here.'
1999,'','Predef maintenance\nThis supersedes #1986. Predef maintenance. Deprecates things which merit deprecation; applies implicit value classes more consistently. Review by @retronym.'
1998,'',"SI-6963 Add version to -Xmigration\nAdds an optional version parameter to the -Xmigration compiler setting.\r\nDoing -Xmigration without version number behaves as it used to by\r\ndumping every possible migration warning.\r\n\r\nThis commit adds a ScalaVersion class (plus ancillary stuff), and a\r\nScalaVersionSetting.\r\n\r\nSince @adriaanm convinced me to add a version number, I'll give this to him for review."
1997,'paulp','SI-7035 Centralize case field accessor sorting.\nIt is both burdensome and dangerous to expect callers\r\nto reorder these. This was seen in the field permutation\r\nin the unapply method; a regression in 2.10.0.\r\n\r\nReview by @paulp'
1996,'','Change Doc to trait to allow it to be used as a cake slice.\nChange the implementation of retrieve() method.\r\nRename and privatize symbols in CommentFactoryBase to avoid clashes when cooking a cake.'
1995,'',"SI-5082 Cycle avoidance between case companions\nWe can synthesize the case companion unapply without forcing\r\nthe info of the case class, by looking at the parameters in\r\nthe `ClassDef` tree, rather than at `sym.caseFieldAccessors`.\r\n\r\nReview by @paulp. Perhaps you'd like to try it in combination with your `ProductN` patch."
1994,'',"SI-6726 Improving pattern matcher analysis performance\nA dash of hash consing and a pinch of loop fusion.\r\n\r\nThese were just follow-the-profiler changes; I suspect there are bigger wins to be had. Perhaps the wins here don't merit closing the ticket.\r\n\r\nPerhaps we could think about how to efficiently handle the common case where each case performs a single a) type test against a leaf type (one not subclassed by any other types that are tested), or b) equality test against a constant that is also unique within the match.\r\n\r\nI'll leave consideration of that the reviewer, @adriaanm."
1993,'',"SI-7026 Asking for a parse tree will now never result in a typed tree\nHi there,\r\n\r\nThis pull request fixes SI-7026. I've confirmed that the tests fails\r\nbefore the patch and that they succeed after. I tried to discuss the\r\nticket on the ML but no-one seemed interested (It was over christmas),\r\nand given that I've already discussed and fixed the issue in the IDE\r\nI thought it was better just to go ahead and fix the problem ;)\r\n\r\nSolved it with an implementation that just parses the source every\r\ntime without trying to memorize anything. Added tests that checks\r\nthat\r\n\r\n1. You get a new parse tree every time you ask for one.\r\n2. You always get a parse tree, never a typed tree.\r\n3. A parse tree should never contain any symbols or types [1].\r\n4. If you ask for a parse tree and then ask for a typed tree it shouldn't change the parse tree you originally asked for, i.e. property 3 still holds.\r\n\r\n[1] There is an exception to this though. Some of the nodes that\r\nthe compiler generates will actually contain symbols. I've\r\nchosen to just ignore these special cases for now."
1992,'paulp','SI-7033 Be symful when creating factory methods.\nImplicit class factory methods were synthesizing the\r\nreference to the class as `Ident(classDef.name)`, which\r\nwas unhygienic in case of `implicit class X[X]`.\r\n\r\nTo use symbols without causing a cycle, I switched from\r\n`REF(symbol)` to `Ident(symbol)`. The former calls into:\r\n\r\n    at scala.reflect.internal.TreeGen.mkAttributedSelect(TreeGen.scala:184)\r\n    at scala.reflect.internal.TreeGen.mkAttributedRef(TreeGen.scala:124)\r\n    at scala.reflect.internal.TreeGen.mkAttributedRef(TreeGen.scala:130)\r\n    at scala.tools.nsc.ast.TreeDSL$CODE$.REF(TreeDSL.scala:307)\r\n\r\nwhich seems to force the enclosing module and blow up.\r\n\r\nReview by @paulp\r\n\r\n - have I lost something by using `Ident(classSym)` here.\r\n - in general, when would one choose `REF(_)` over `Ident(_)`?'
1991,'',"SI-6961 maintain structural sharing in list serialization.\nApplying Jan Vanek's patch that makes list serialization maintain\r\nstructural sharing, as well as avoids a stack overflow for big lists.\r\nSee a more detailed explanation in the bugtracker.\r\n\r\nAdditionally, deserialization of lists serialized with Scala 2.10.1\r\nand 2.9.x should work.\r\nThis legacy deserialization is embodied in the methods `readObject_2_10_0`\r\nand `readObject_2_9_x`.\r\n\r\nFactored out setting and resetting of the SerializeControl instance\r\ninto the companion object, using @inline to eliminate the closure.\r\n\r\nThis is a resubmission of:\r\nhttps://github.com/scala/scala/pull/1923"
1990,'',"SI-6961 maintain structural sharing in list serialization.\nApplying Jan Vanek's patch that makes list serialization maintain\r\nstructural sharing, as well as avoids a stack overflow for big lists.\r\nSee a more detailed explanation in the bugtracker.\r\n\r\nAdditionally, deserialization of lists serialized with Scala 2.10.1\r\nand 2.9.x should work.\r\nThis legacy deserialization is embodied in the methods `readObject_2_10_0`\r\nand `readObject_2_9_x`.\r\n\r\nFactored out setting and resetting of the SerializeControl instance\r\ninto the companion object, using @inline to eliminate the closure.\r\n\r\nThis is a PR 1923 resubmitted, squashed:\r\nhttps://github.com/scala/scala/pull/1923"
1989,'',"SI-6968 Simple Tuple patterns aren't irrefutable\nReverts part of c82ecab. The parser can't assume that\r\na pattern `(a, b)` will match, as results of\r\n`.isInstanceOf[Tuple2]` can't be statically known until\r\nafter the typer.\r\n\r\nThe reopens SI-1336, SI-5589 and SI-4574, in exchange for fixing\r\nthis regression SI-6968. Keeping all of those fixed will require\r\na better definition of irrefutability, and some acrobatics to\r\nensure safe passage to the ambiguous trees through typechecking.\r\n\r\nthis drops the more ambitious commit from #1945 and now LGTM /cc @retronym"
1988,'','SI-4733 - fsc no longer creates a single temp directory for all users.\nfsc previously created a single temporary directory called\r\n"scala-devel". This is an issue, since the directory belongs to whoever\r\ncreated the directory. Depending on the user\'s umask, this directory may\r\nonly be writable for the creator. This causes problems for any other\r\nusers who then try to use fsc or invoke fsc indirectly.\r\n\r\nOther programs usually solve this issue by creating a separate directory\r\nfor each user, either by appending the username to a base directory name\r\nor creating a new direcotory with a random name with a program like\r\n"mktemp". This commit changes CompileSocket to use the first method.\r\n\r\nFixes SI-4733\r\nbackport to 2.10.x'
1987,'','SI-4733 - fsc no longer creates a single temp directory for all users.\nfsc previously created a single temporary directory called\r\n"scala-devel". This is an issue, since the directory belongs to whoever\r\ncreated the directory. Depending on the user\'s umask, this directory may\r\nonly be writable for the creator. This causes problems for any other\r\nusers who then try to use fsc or invoke fsc indirectly.\r\n\r\nOther programs usually solve this issue by creating a separate directory\r\nfor each user, either by appending the username to a base directory name\r\nor creating a new direcotory with a random name with a program like\r\n"mktemp". This commit changes CompileSocket to use the first method.\r\n\r\nFixes SI-4733\r\nbackport to 2.10.x'
1986,'','Taking Predef into the modern age.\nRemoved some methods in Predef, deprecated some others, and turned its implicit classes into implicit classes.\r\n\r\nReview by @retronym'
1985,'','Disabled SI-6987.\nIt causes spurious failures - a typical example:\r\n\r\n[partest] testing: [...]/files/run/t6987.scala                                  [FAILED]\r\n[partest] did not get the string expected, full results were:\r\n[partest] Fast Scala compiler version 2.11.0-20130126-111937-f01e001c77 -- Copyright 2002-2013, LAMP/EPFL\r\n[partest] [Given arguments: -shutdown -verbose]\r\n[partest] [Transformed arguments: -shutdown -verbose -current-dir /localhome/jenkins/b/workspace/scala-checkin-manual]\r\n[partest] [VM arguments: ]\r\n[partest] java.net.ConnectException: Connection refused\r\n[partest] [Connecting to compilation daemon at port 32808 failed; re-trying...]\r\n[partest] [No compilation server running.]\r\n[partest]'
1984,'','SI-4733 - fsc no longer creates a single temp directory for all users.\nfsc previously created a single temporary directory called\r\n"scala-devel". This is an issue, since the directory belongs to whoever\r\ncreated the directory. Depending on the user\'s umask, this directory may\r\nonly be writable for the creator. This causes problems for any other\r\nusers who then try to use fsc or invoke fsc indirectly.\r\n\r\nOther programs usually solve this issue by creating a separate directory\r\nfor each user, either by appending the username to a base directory name\r\nor creating a new direcotory with a random name with a program like\r\n"mktemp". This commit changes CompileSocket to use the first method.\r\n\r\nFixes SI-4733\r\nbackport to 2.10.x'
1983,'','Bumped partest MaxPermSize to 128m.\n'
1982,'',"This commit fixes ticket SI-7026\nHi there,\r\n\r\nThis pull request fixes SI-7026. I've confirmed that the tests fails\r\nbefore the patch and that they succeed after. I tried to discuss the\r\nticket on the ML but no-one seemed interested (It was over christmas),\r\nand given that I've already discussed and fixed the issue in the IDE\r\nI thought it was better just to go ahead and fix the problem ;)\r\n\r\nSolved it with an implementation that just parses the source every\r\ntime without trying to memorize anything. Added tests that checks\r\nthat\r\n\r\n1. You get a new parse tree every time you ask for one.\r\n2. You always get a parse tree, never a typed tree.\r\n3. A parse tree should never contain any symbols or types [1].\r\n4. If you ask for a parse tree and then ask for a typed tree it\r\n   shouldn't change the parse tree you originally asked for, i.e.\r\n   property 3 still holds.\r\n\r\n[1] There is an exception to this though. Some of the nodes that\r\nthe compiler generates will actually contain symbols. I've\r\nchosen to just ignore these special cases for now."
1981,'','[backport] SI-3577 BoundedWildcardType handling\ncommit 3c91b32d699a9e29d685ac20c9805f96c9f2db2c\r\nAuthor: Jason Zaugg <jzaugg@gmail.com>\r\nDate:   Fri Aug 24 01:16:47 2012 +0200\r\n\r\n    Mention BoundedWildcardType in "a standard type pattern match".\r\n    (cherry picked from commit 00e46b3dbcea2b72fd3941b7ffc2efba382871e9)\r\n\r\ncommit 0664be2b69b1ce013e937bc93f4e84b891676f1f\r\nAuthor: Jason Zaugg <jzaugg@gmail.com>\r\nDate:   Fri Aug 24 01:05:07 2012 +0200\r\n\r\n    Make RefChecks#validateVariance aware of BoundedWildcardType.\r\n\r\n    The only test case that I know for this will be neutered\r\n    by the imminent fix for SI-6258; so I haven\'t been able to\r\n    test this.\r\n\r\n    But trying this manually, you can see that this patch defers the\r\n    the SI-6258 to the erasure phase.\r\n\r\n    Original:\r\n\r\n    scala.MatchError: ? (of class scala.reflect.internal.Types$BoundedWildcardType)\r\n    \tat scala.tools.nsc.typechecker.RefChecks$RefCheckTransformer$$anon$3.scala$tools$nsc$typechecker$RefChecks$RefCheckTransformer$$anon$$validateVariance$1(RefChecks.scala:894)\r\n    \tat scala.tools.nsc.typechecker.RefChecks$RefCheckTransformer$$anon$3.validateVariance(RefChecks.scala:965)\r\n\r\n    Modified:\r\n\r\n    java.lang.ClassCastException: scala.reflect.internal.Types$TypeRef$$anon$6 cannot be cast to scala.reflect.internal.Types$TypeBounds\r\n    \tat scala.reflect.internal.Types$TypeMap.mapOver(Types.scala:4160)\r\n    \tat scala.reflect.internal.transform.Erasure$ErasureMap.apply(Erasure.scala:156)\r\n    (cherry picked from commit 2b4e7183fd24113cca5e868456668fd05c848168)\r\n\r\ncommit 6ad651c94faf463133c742feb2aee59ef782ea1f\r\nAuthor: Jason Zaugg <jzaugg@gmail.com>\r\nDate:   Fri Aug 24 00:54:59 2012 +0200\r\n\r\n    SI-3577 Make varianceInType aware of BoundedWildcardType.\r\n    (cherry picked from commit 21105654c40ed0c462142bcbb6c8eced77f8b07a)\r\n\r\nReview by @adriaanm'
1980,'',"[backport] SI-2968 Fix brace healing for `^case (class|object) {`\nSquashed commit of the following:\r\n\r\ncommit 24828531f62ce05402c96c04d7096e82d5f4e3bf\r\nAuthor: Jason Zaugg <jzaugg@gmail.com>\r\nDate:   Sun Oct 21 23:34:35 2012 +0200\r\n\r\n    SI-2968 Fix brace healing for `^case (class|object) {`\r\n\r\n    The scanner coalesces the pair of tokens into CASEOBJECT or\r\n    CASECLASS, but fails to set `offset` back to the start of `case`.\r\n    Brace healing is then unable to correctly guess the location of\r\n    the missing brace.\r\n\r\n    This commit resets `offset` and `lastOffset`, as though\r\n    caseobject were a single keyword. Only the former was neccessary\r\n    to fix this bug; I haven't found a test that shows the need for\r\n    the latter.\r\n    (cherry picked from commit cbad218dba47d49a39897b86d467c384538fdd53)\r\n\r\nReview by @adriaanm"
1979,'',"[backport] Fix for SI-6206, inconsistency with apply.\nSquashed commit of the following:\r\n\r\ncommit f6bbf85150cfd7e461989ec1d6765ff4b4aeba51\r\nAuthor: Paul Phillips <paulp@improving.org>\r\nDate:   Mon Oct 1 09:10:45 2012 -0700\r\n\r\n    Fix for SI-6206, inconsistency with apply.\r\n\r\n    The code part of this patch is 100% written by retronym, who\r\n    apparently has higher standards than I do because I found it just\r\n    lying around in his repository. I think I'll go pick through his\r\n    trash and see if he's throwing away any perfectly good muffins.\r\n\r\n    I made the test case more exciting so as to feel useful.\r\n    (cherry picked from commit 267650cf9c3b07e360a59f3c5b70b37fea9de453)\r\n\r\n\r\nReview by @paulp"
1978,'',"SI-6556 Remove unneeded workaround in erasure.\nIn fb6e687, a workaround was added, described as:\r\n\r\n> See SI-6556. It seems in some cases the result constructor\r\n> type of an anonymous class is a different version of the class.\r\n> This has nothing to do with value classes per se.\r\n> We simply used a less discriminating transform before, that\r\n> did not look at the cases in detail.\r\n> It seems there is a deeper problem here, which needs\r\n> following up to. But we will not risk regressions\r\n> in 2.10 because of it.\r\n\r\nI was expecting an arduous investigation into this,\r\nbut happilly the underlying problem was already solved\r\nin the fix for SI-6648 (1587a77e). (Chalk up another\r\nwin for libscala's scala-hash!)\r\n\r\nThis commit escalates the logging to an assertion.\r\nIt also reverts the other change in fb6e687,\r\nwhich introduced a case for RefinedType, which are\r\nnot needed to pass pos/t6556.scala.\r\n\r\nReviewed by @paulp in it's previous incarnation, #1868\r\n"
1977,'dragos',"SI-7018 Fix memory leak in Attachments.\nMakes NonEmptyAttachments a top level class so that\r\nit doesn't accidentally accumulate history via the\r\n$outer field.\r\n\r\nNo test is included because I think the fix is\r\nself evident.\r\n\r\nReview by @dragos"
1976,'','[backport] SI-6428 / SI-7022 Value class with bounds\nReview by @paulp. There was one merge conflict, but it was straight forward to resolve.'
1975,'paulp','Revert "SI-6601 Publicise derived value contstructor after pickler"\nThis reverts commit b07228aebe7aa620af45a681ef60d945ffc65665.\r\n\r\nThe remedy was far worse than the disease:\r\n\r\n    % cat sandbox/test.scala\r\n    class V private (val a: Any) extends AnyVal\r\n\r\n    % RUNNER=scalac scala-hash b07228aebe sandbox/test.scala\r\n    [info] b07228aebe => /Users/jason/usr/scala-v2.10.0-256-gb07228a\r\n\r\n    % scala-hash b07228aebe\r\n    [info] b07228aebe => /Users/jason/usr/scala-v2.10.0-256-gb07228a\r\n    Welcome to Scala version 2.10.1-20130116-230935-b07228aebe (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_27).\r\n    Type in expressions to have them evaluated.\r\n    Type :help for more information.\r\n\r\n    scala> def foo(v: V) = v.a == v.a\r\n    exception when typing v.a().==(v.a())/class scala.reflect.internal.Trees$Apply\r\n    constructor V in class V cannot be accessed in object $iw in file <console>\r\n    scala.reflect.internal.Types$TypeError: constructor V in class V cannot be accessed in object $iw\r\n\r\nReview by @paulp'
1974,'',"Merge 2.10.x into master.\nNotes on this merge:\r\n\r\n- backported commits were avoided by using multiple merges and -Xours on backported ranges.\r\n- b07228aebe is excluded from the merge because it breaks master, as recounted on internals.\r\n- I don't know what is the significance or importance of the change to test/files/run/t6028.check.\r\n\r\nReview by any willing party, @adriaanm, @retronym, etc. Don't make the merge commit stew - they don't improve with age.. Think of them as the bananas of the commit universe."
1973,'',"SI-4602 Make fsc absolutize source file names\nThe fsc server was using a path supplied by the client to turn things\r\nlike class path values into absolute paths. But it wasn't absolutizing\r\nthe source file names supplied to the compiler which lead to SI-4602.\r\nThis commit adds that absolutizing bit and cleans the logic up a bit\r\nso that the settings object isn't told a path that it already knows.\r\n\r\nA test is included that simulates changing directory by forcing two\r\ndifferent -current-dir settings on two different compile sessions on\r\nthe same server process.\r\n\r\nreview @paulp"
1972,'','[backport] SI-6969, mishandling of SoftReferences in method cache.\nMore interesting to test than it was to fix. The soft\r\nreference is now dereferenced once, the locally stored\r\nunderlying value ascertained to be non-null, and the\r\nremainder of the references to the value use the local var.\r\n\r\nThe enclosed test reliably NPEs without this patch.'
1971,'','Revert "SI-5824 Fix crashes in reify with _*"\nThis reverts commit 0a25ee3431d0314c782dd2e6620bc75c4de0d1a4.\r\n\r\nIt came with a test failure which I overlooked.'
1970,'','Change Doc to trait to allow it to be used as a cake slice.\nChange the implementation of retrieve() method.\r\nRename and privatize symbols in CommentFactoryBase to avoid clashes when cooking a cake.'
1969,'','Interactive documentation changes\nReview by @dragos.'
1968,'',"Fix broken build.\nIt's all system admin, all the time, here at scala ranch."
1967,'',"SI-6434 updates test reify_magicsymbols to use the new (=> A) => B\nThe change to use (=> A) => B caught an innocent bystander test. This\r\ncommit makes the trivial change to the test's .check file to make it\r\nrecognize the new output.\r\n\r\nreview @paulp or @adriaanm whichever gets it first and expedite as all 2.10.x builds will be failing until this is merged."
1966,'','Fix java7 again\nBecause perpetually failing tests are the gifts which keep on giving, especially when trying to perform backports, backport the instrumentation fixes so partest can pass.'
1965,'','Fix few typos in the doc\nFixes mostly **a int**, **a a thing** kind of typos.\r\nAlso removes trailing whitespaces, useless empty lines and commented\r\n`println()` from "test/files/run/ctries-new/iterator.scala". '
1964,'','SI-7017 Improve interactions between j.l.Comparable & s.m.Ordered\n'
1963,'','Add the new request to presentation compiler to do work\nwith mirror symbols before their compilation units are unloaded.'
1962,'','Backport of SI-6932 to 2.9.x\nAlready reviewed and discussed, see https://github.com/scala/scala/pull/1941\r\n\r\nReview by @adriaanm'
1961,'',"SI-7009: `@throws` annotation synthesized incorrectly\nThe 990b3c7 made `scala.throws` annotation polymorphic but forgot to\r\nadapt compiler code that synthesizes it, e.g. when parsing class files.\r\n\r\nThe consequence was that we would get non-deterministically either\r\n`scala.throws` or `scala.throws[T]` as a type for synthesized annotation.\r\nThe reason is that `Symbol.addAnnotation` would call `tpe` method which\r\ndoes not initialization of symbol so type parameters list would not be\r\ndetermined correctly. Only if info of that symbol was forced for other\r\nreason we would get `scala.throws[T]`. That non-deterministic behavior\r\nwas observed in sbt's incremental compiler.\r\n\r\nHere's list of changes this commit introduces:\r\n  * The `Symbol.addAnnotation` that takes symbol as argument calls\r\n    `typeSymbol` instead of `tpe` for deterministic results\r\n  * Introduce `Symbol.addAnnotation` overload that allows us to pass\r\n    an applied type\r\n  * Change all places where polymorphic annotations are synthesized\r\n    to pass an applied type\r\n\r\nFixes SI-7009.\r\n\r\nReview by @adriaanm"
1960,'',"SI-6853 changed private method remove to be tail recursive.\nOperations += and -= on mutable.ListMap rely on the private method remove to perform. This method was implemented using recursion, but it was not tail recursive. When the ListMap got too big the += caused a StackOverflowError.\r\n\r\nThis PR replaces https://github.com/scala/scala/pull/1925, following Adrian's advice to include it in the 2.10.x. \r\n\r\nreview by @phaller"
1959,'','SI-5313 Disable dead local store optimization on ref and array types\nStoring to local variables of reference or array type is indirectly\r\nobservable because it potentially allows gc to collect an object. So\r\nthis commit gets rid of dead store optimization on reference and array\r\ntypes.\r\n\r\nreview @gkossakowski'
1958,'',"SI-6434 Pretty print function types with by name arg as (=> A) => B\nWe were pretty printing a function type with one by name arg as\r\n=> A => B, but because => is right associative that's formally\r\nequivalent to => (A => B) and that's entirely a different thing. This\r\ncommit changes the pretty printer in Typers.scala to check for a\r\nbyname argument on a function type and wrap it in parens. A REPL test\r\nis included.\r\n\r\nreview @paulp"
1957,'',"SI-4615 Adds proper handling of -D and -J options Windows\nOn Windows, -D and -J parameters weren't being added to JAVA_OPTS.\r\n\r\nI've manually verified this patch on a Windows 7 VM, but we don't seem to have a way to run an automated test of the scala or scalac scripts.\r\n\r\nreview @adriaanm"
1956,'',"SI-7011 Fix finding constructor type in captured var definitions\nIf a captured var was initialized with an empty tree then finding\r\nthe type of the empty tree was being handled improperly. The fix is\r\nto look for primary constructors on the tree's type symbol rather than\r\nthe tree's symbol.\r\n\r\nA test is included. In order to make the problem more testable the debug\r\nlogging of the issue is changed to a debug warn.\r\n\r\nreview @retronym"
1955,'','Backports for SI-2418 SI-4729 SI-5130 SI-5353 SI-5604 SI-5859 SI-6072 SI-6426 SI-6482 SI-6584 SI-6595\n'
1954,'',"[backport] SI-6567 Warning for Option(implicitView(foo))\ncommit 284bd754fa5dfc8bc626b0c5ebe85d872dd044cb\r\nAuthor: Jason Zaugg <jzaugg@gmail.com>\r\nDate:   Sat Nov 3 16:19:46 2012 +0100\r\n\r\n    SI-6567 Warning for Option(implicitView(foo))\r\n\r\n    I've seen the reported problem before in the wild. It seems\r\n    worthy of a special warning, so long as we advocate Option.apply\r\n    as an alternative to `if (x == null) Some(x) else None`.\r\n\r\n    It is behind -Xlint at the moment, an option that could do with\r\n    some promotion.\r\n    (cherry picked from commit 0bcb9e9169146e3f589c6c9f65cc4a5523b78120)"
1953,'','[backport] Fix unsafe array opt. / opt. primitive Array(...)\nSI-6611, SI-6247 (partial fix)\r\n\r\nThe original commits on master were a bit circuitous, this\r\nis squashed to a neat little package.\r\n\r\nI had to add type arguments to the Array.apply calls in the\r\ntest case, they are inferred on master.\r\n\r\ncommit 41ff05dfdbcf032157b3509ace633f2e7a12295c\r\nAuthor: Jason Zaugg <jzaugg@gmail.com>\r\nDate:   Sun Nov 4 14:44:59 2012 +0100\r\n\r\n    Refactor guards checking for a particular overload of Array.apply.\r\n    (cherry picked from commit 092345a24c22a821204fb358d33272ae8f7353be)\r\n\r\ncommit 1e5c942deccaf64f8d57bd8891b912381d7f220a\r\nAuthor: Jason Zaugg <jzaugg@gmail.com>\r\nDate:   Sun Nov 4 14:17:25 2012 +0100\r\n\r\n    Expand optimization of Array(e1, ..., en) to primitive arrays.\r\n    (cherry picked from commit 8265175ecc42293997d59049f430396c77a2b891)\r\n\r\ncommit ab1bf77e39f2dfeacf3fc107ccb2907a1867f04c\r\nAuthor: Jason Zaugg <jzaugg@gmail.com>\r\nDate:   Sat Nov 3 13:34:20 2012 +0100\r\n\r\n    SI-6611 Tighten up an unsafe array optimization\r\n\r\n    The net was cast too wide and was unsafely optimizing away array\r\n    copies.\r\n    (cherry picked from commit dad886659faca4fba2d4937c9bc6780591b02c27)\r\n\r\nAnd also:\r\n\r\nOptimize primitive Array(e1, ..., en)\r\n\r\nExpands an existing optimization for reference arrays to\r\napply to primitives, as well.\r\n\r\nFixes one aspect of SI-6247.\r\n(cherry picked from commit cac5a08611f9511ba4d94b99db630404efae190a)\r\n\r\nConflicts:\r\n\tsrc/compiler/scala/tools/nsc/transform/CleanUp.scala\r\n\r\nMore principled tree copying.\r\n\r\nCanonical > home-spun.\r\n\r\nConflicts:\r\n\tsrc/compiler/scala/tools/nsc/transform/CleanUp.scala'
1952,'','[backport] Fix SI-6637 (misoptimization in erasure)\ncommit f9ef5300ab561628e53c654df9000c75f488d74a\r\nAuthor: Jan Niehusmann <jan@gondor.com>\r\nDate:   Fri Nov 9 15:05:58 2012 +0100\r\n\r\n    Fix SI-6637 (misoptimization in erasure)\r\n\r\n    Move the optimization one level deeper so the expression\r\n    being tested with isInstanceOf is always evaluated.\r\n    (cherry picked from commit b540aaee4ba30e2dd980456a44e8c6d732222df1)'
1951,'','SI-6987 Fixes fsc compile server verbose output\nInternally the fsc server code was setting a "verbose" flag, but it was\r\nalways false. Fixing that gives server\'s verbose output, but because the\r\noutput was buffered and not flushed the server\'s output wasn\'t seen\r\nuntil the compile run was complete. This commit fixes the verbose flag\r\nand flushes the server side output.\r\n\r\nNo reviewer requested until the build kitteh can verify the test works reliably.'
1950,'','Add firstKey and lastKey to LongMap, fixing SI-5151\nhttps://issues.scala-lang.org/browse/SI-5151'
1949,'','Use the same default scalac options in all three partest frontends\nMake ConsoleRunner, AntRunner and SBTRunner take scalac options from\r\n"partest.scalac_opts" property.\r\n\r\nAlso remove leftover "-deprecation" option from test/partest.\r\n\r\nThe change to SBTRunner was not tested as sbt test is currently broken.'
1948,'','Add more permgen space for test/partest\nRunning "test/partest --all" needs about 108MB permgen space, but the\r\ndefault is less than that (85MB for me on Oracle Java 6 with no extra\r\noptions).\r\n\r\nThis commit bumps it to 128MB.\r\n'
1947,'','Fixed typo in ProcessBuilder scaladoc.\nProcessBuilder creation sample code did not complie due to an error\r\nin import statement.'
1946,'gkossakowski','SI-6231 Report unsupported free var capture by a trait.\n_Does not close the ticket, merely advances a crasher to an implementation restriction._\r\n\r\nIf a class nested in a trait captures a free variable from\r\nthe enclosing scope of the trait, the transformation to\r\nadd that variable to the `init` method of the trait\r\nimplementation class happens *after* the abstract trait\r\ninterface has been extracted. This would lead to a crash\r\nwhen trying to find the corresponding interface method.\r\n\r\nThis commit detects this situation and reports an\r\nimplementation restriction. The enclosed test case\r\nshows a workaround.\r\n\r\nTo lift this restriction, LambdaLifter should add the getters\r\nand make sure they end up in the trait interface. Looks like\r\nMartin tried this once:\r\n\r\n    // LambdaLift.scala\r\n    //\r\n    // Disabled attempt to to add getters to freeParams\r\n    // this does not work yet. Problem is that local symbols need local names\r\n    // and references to local symbols need to be transformed into\r\n    // method calls to setters.\r\n    // def paramGetter(param: Symbol): Tree = {\r\n    //   val getter = param.newGetter setFlag TRANS_FLAG resetFlag PARAMACCESSOR // mark because we have to add them to interface\r\n    //   sym.info.decls.enter(getter)\r\n    //   val rhs = Select(gen.mkAttributedThis(sym), param) setType param.tpe\r\n    //   DefDef(getter, rhs) setPos tree.pos setType NoType\r\n    // }\r\n    // val newDefs = if (sym.isTrait) freeParams ::: (ps map paramGetter) else freeParams\r\n\r\nReview by @gkossakowski'
1945,'',"Refutability strikes back\nAddresses an nasty regression in for-comprehension desugaring (SI-6968) with a reversion, and then claws back some of the lost ground via overdue renovations to the refutability handling in `RefChecks`.\r\n\r\nSee the commit comments for all the gory details.\r\n\r\nWe can jettison a little bit more code from `RefChecks` when this is merged to master, it's marked with TODO comments.\r\n\r\nRefutation or otherwise by @paulp (any other ideas on how to save `(a, b) <- either.right`?), and by @adriaanm (for my trespass in the pattern matcher.)"
1944,'','Removed class files.\n'
1943,'','Removing classfiles from the repo\n'
1942,'','Removing classfiles from the repo\n'
1941,'','SI-6932 StackOverflowError in chained Future.flatMap calls\nAfter discussion on commit 089805510ee79c389ff2a870355c8496c723b8cc, submitting a self-contained PR for the bug fix taken from:\r\nhttps://github.com/viktorklang/scala/pull/5/commits\r\n\r\nI agree with the assessment of @jsuereth, @retronym, and @adriaanm that package-private visibility should enable these changes for 2.10.x.\r\n\r\nNote: already reviewed and discussed, but maybe we can have another completing review by @heathermiller '
1940,'',"SI-6123: -explaintypes should not explain errors which won't be reported\n-explainTypes means that only type tests which *fail* should be reported in more\r\ndetail by using explainTypes. Hence, callers of explainTypes should check if\r\ntype errors are being ignored, by checking context.reportErrors. Hence, this\r\ncheck is added to Inferencer, and another call site is redirected to that\r\nmethod.\r\n\r\nNote that this patch does not fix all occurrences, but only the ones which\r\nshowed up during debugging. The other ones never cause problems, maybe because\r\nthey occur when contextErrors is in fact guaranteed to be true. We might want to\r\nfix those ones anyway.\r\n\r\nNew tests are missing, I'll add them ASAP.\r\n\r\nReview by @hubertp.\r\nRefs #6123\r\nbackport to _2.10.x_"
1939,'','SI-6811 Move scala.util.{automata,regexp} ...\n... to scala.xml.dtd.impl and make it private[dtd]'
1938,'paulp',"SI-6666 Restrict hidden `this` access in self/super calls.\nDetect when classes (user authored or compiler generated)\r\nlocal to a self or super constructor argument would require\r\npremature access to the in-construction instance.\r\n\r\nThe same restriction applies for classes and objects; for objects,\r\nthe premature access would result in a null via MODULE$ field.\r\n\r\nA residual error has been lodged as SI-6997.\r\n\r\nI'd like to remove calls to `Symbol#outerClass` (which relies on\r\nthe flaky flag INCONSTRUCTOR, see my comments in the JIRA issue\r\nfor more discussion) from `LambdaLift` and `ExplicitOuter`, and\r\ninstead use the stack of active self/super calls to know when to\r\nskip an enclosing class. That will obviate that flag.\r\n\r\nReview by @paulp"
1937,'','SI-6998 Improvements to the task-support API\n'
1936,'paulp',"SI-6891 Fix value class + tailrec crasher.\nrhs.substituteSymbols(old, new) leaves us with:\r\n\r\n    def loop#12225(x#12226: A#15491): scala#21.this.Unit#1615 =\r\n      loop#12225(x#12226)\r\n\r\nIn which the TermSymbol x#12226 has a stale info, pointing at\r\nthe A#7274, the class type parameter, rather than A#15491,\r\nthe corresponding type parameter of the synthetic backing\r\nmethod.\r\n\r\nI've improved `TreeSymSubstituter` to substitute not\r\nonly `Tree#{tpe, symbol}`, but also `DefTree#sym.info`.\r\n\r\nThe `pos` test that triggered the new code path are\r\nlisted here: https://gist.github.com/4575687\r\n\r\nScathing review, please, by @paulp + @adriaanm; it's a small patch, but touches some fundamental machinery.\r\n\r\nObviously I could limit the scope of the new code to the `substituteSymbols` calls in `ExtensionMethods`, but I don't see how its correctness is context sensitive.\r\n\r\nIt seems to me that `substituteSymbols` was a breeding ground for inconsistencies between `tree.tpe` and `tree.symbol.info`, and I'm at a loss as to why that doesn't cause more problems.\r\n\r\nI'm currently trying to add a new check to `TreeCheckers` to find references to type parameters and method parameters (to start with, but what else?) that don't respect scoping, ie their owner chain doesn't include the owner of the parameter. This check would have diagnosed this bug other like it. Any  and all suggestions for this line of investigation are most welcome. (Such checks will also be useful, nay, vital, for folks doing serious macro development)"
1935,'','SI-6994 Avoid spurious promiscuous catch warning\nIt was being issued upon re-typechecking of a transformed\r\ntree. Now we disable the warning post-typer.\r\n\r\nreview by @JamesIry'
1934,'','Addressing warnings.\n- SI-6923 uncovered a few valid warnings, these have been\r\n   addressed.\r\n - A pair of "catches all throwable" warnings appeared; one\r\n   of the is spurious and the subject of SI-6994.\r\n\r\nReview by @JamesIry. What\'s your opinion on the spuriosity of the following?\r\n\r\n```\r\nscala> (x => x): (Any => Unit)\r\n<console>:8: warning: a pure expression does nothing in statement position; you may be omitting necessary parentheses\r\n              (x => x): (Any => Unit)\r\n                    ^\r\n```\r\n'
1933,'','scalac STILL borks on shebangs\nhttps://issues.scala-lang.org/browse/SI-5179\r\n\r\nHello.scala:\r\n\r\n\t#!/bin/sh\r\n\texec scala "$0" "$@"\r\n\t!#\r\n\r\n\tobject Hello {\r\n\t\tdef main(args: Array[String]) {\r\n\t\t\tprintln("Hello World!")\r\n\t\t}\r\n\t}\r\n\r\nTrace:\r\n\r\n\t$ scalac Hello.scala \r\n\tHello.scala:1: error: expected class or object definition\r\n\t#!/bin/sh\r\n\t^\r\n\tHello.scala:2: error: expected class or object definition\r\n\texec scala "$0" "$@"\r\n\t^\r\n\tHello.scala:3: error: expected class or object definition\r\n\t!#\r\n\t^\r\n\tthree errors found\r\n\r\nSpecs:\r\n\r\n\t$ scalac -version\r\n\tScala compiler version 2.11.0-20130117-095302-d7b59f452f -- Copyright 2002-2013, LAMP/EPFL'
1932,'','How do you install Scala from source?\nThere is no `ant install`. Can we please add this command?'
1931,'','Remove the term "pimp" from the repository in favor of "enrich"\nSmall terminology change aimed at improving inclusion.\r\n\r\nDiscussion on scala-internal: https://groups.google.com/forum/?fromgroups=#!topic/scala-internals/kVWg7HKldjs\r\n\r\nI signed the CLA and sent it to the email address in the PDF.'
1930,'','SI-5824 Fix crashes in reify with _*\nReification crashes if "foo: _*" construct is used. This happens besause type tree is represented either with TypeTree, or with Ident (present case), and `toPreTyperTypedOrAnnotated\' only matches the former. The fix is to cover the latter too. A test is included.'
1929,'',"SI-6439 Avoid spurious REPL warnings about companionship\n`val m` isn't a companion of `trait m`, check the pair of\r\neponymous symbols are a ((class|trait), object) pair before\r\nemitting the warning.\r\n\r\nIn order to correctly check this one a type alias is involved,\r\n`definedSymbols` must avoid normalizing through type aliases.\r\nAFAICT this is an improvement to the other clients of that Map,\r\none such power mode progression is demonstrated at the end\r\nof the test case.\r\n\r\nReview by @paulp, /cc @som-snytt"
1928,'adriaanm','SI-6902 Check unreachability under @unchecked\nOnly exhaustiveness checking should be disabled if the\r\nscrutinee of a match as annotated as `: @unchecked`.\r\nThis was the pre-2.10.x behaviour.\r\n\r\nThis also fixes a variation of the closed ticket,\r\nSI-6011. The exhaustiveness check is needed to\r\nsafely fallback from emitting a table switch if\r\nduplicate cases are detected.\r\n\r\nReview by @adriaanm'
1927,'',"SI-6863 Fix verify error in captured var inited from block w try/catch\nIf a captured var was inited from a try/catch we did something\r\nreasonable. But if the var was inited from a block that ended with\r\na try/catch then we didn't and we were generating faulty byte code.\r\nThis fix patches LambdaLift to add the missing case. It also\r\nremoves a related, but no longer valid comment from UnCurry. A\r\ntest is included.\r\n\r\nreview @magarciaEPFL"
1926,'',"Disable MIMA in master.\nBinary compatibility checks do not make sense in master because\r\nthere's no base point against which we should check."
1925,'','Fix SI-6853\nThis is a fix to: https://issues.scala-lang.org/browse/SI-6853\r\nI could not assign it to myself on JIRA, even though I am user my name does not show up there.\r\nreview by: @phaller'
1924,'',"SI-6991 Remove warning message about ClassfileAnnotation ...\n... not being visible at run-time. That's the whole point of a\r\nClassfileAnnotation, compared to a hypothetical RuntimeAnnotation."
1923,'',"SI-6961\nApplying Jan Vanek's patch that makes list serialization maintain\r\nstructural sharing, as well as avoids a stack overflow for big lists.\r\nSee a more detailed explanation in the bugtracker.\r\n\r\nAdditionally, deserialization of lists serialized with Scala 2.10.1\r\nand 2.9.x should work.\r\nThis legacy deserialization is embodied in the methods `readObject_2_10_0`\r\nand `readObject_2_9_x`.\r\n\r\nReview by @jsuereth or @retronym. Or anybody else, for that matter.\r\n"
1922,'','SI-6963 Removes -Xmigration switch\nRemoves the -Xmigration switch, the internal setting, the documentation,\r\nand the tests around it.\r\n\r\nreview @gkossakowski\r\n'
1921,'','SI-6811 Scheduled removal of deprecated items for 2.11\n'
1920,'','Si 6987 2.10.x\nSI-6987 Fixes fsc compile server verbose output\r\n\r\nInternally the fsc server code was setting a "verbose" flag, but it was\r\nalways false. Fixing that gives server\'s verbose output, but because the\r\noutput was buffered and not flushed the server\'s output wasn\'t seen\r\nuntil the compile run was complete. This pull request fixes the verbose flag\r\nand flushes the server side output.\r\n\r\nIncludes a test\r\n\r\nreview @adriaanm'
1919,'','Re-merge of #1906\n#1906 went unmergeable; this brings it back.'
1918,'','Removals for 2.11 — The (hopefully) uncontroversial parts\nNot removed:\r\n - scala.collection.convert deprecations\r\n - Manifests\r\n - Code required by scala.xml or scala.actors'
1917,'','Reference members imported by default with their owner\nrather than some arbitrary site.'
1916,'','Change Doc to trait to allow it to be used as a cake slice.\nChange the implementation of retrieve() method to make the right distinction between\r\nlibrary and source symbols.\r\nRename and privatize symbols in CommentFactoryBase to avoid clashes when cooking a cake.'
1915,'',"SI-6942 more efficient CNF conversion in patmat analysis\nAvoid blowing the stack/the analysis budget by more eagerly translating\r\nthe propositions that model matches to CNF.\r\nFirst building a large proposition that represents the match,\r\nand then converting to CNF tends to blow the stack.\r\nLuckily, it's easy to convert to CNF as we go.\r\n\r\nremoveVarEq may throw an AnalysisBudget.Exception\r\n\r\nreview by @retronym"
1914,'gkossakowski',"SI-6601 Publicise derived value contstructor after pickler\nOtherwise the access restrictions are not enforced under\r\nseparate compilation.\r\n\r\nSee also SI-6608.\r\n\r\nReview by @gkossakowski\r\n\r\nWe don't ship any value classes with private constructors in the standard library, so perhaps we can ship this fix in 2.10.x."
1913,'',"align partest script with ant\ndon't silently pass -deprecation to scalac by default\r\n\r\nreview by @jamesiry"
1912,'paulp','SI-6651 Extension methods types may depend on the typed of the wrapped value\nThis allows for the likes of:\r\n\r\n    class A[X](val x: X) extends AnyVal {\r\n      def foo(xy: x.Y) {}\r\n    }\r\n\r\nWe have to do this in both directions, when synthesizing\r\nthe extension method in `Extender#transform`, and later on\r\nwhen Erasure tries to find the corresponding extension\r\nmethods by backing out the original signatures from\r\nthe signatures of the synthesized methods in the companion.\r\n\r\nIn the first case, we have to be careful to use a stable\r\nreference to the `self` parameter, which can satisfy the\r\ndependent types.\r\n\r\nReview by @paulp'
1911,'','SI-4976 Scaladoc: Add a source link to package objects\nIf a package has a package object, the source link should point the source file of the package object.\r\n\r\nReview by @heathermiller\r\n'
1910,'paulp',"SI-6976 Fix value class separate compilation crasher.\nWe can't guarantee that the owner of the value class\r\nis initialized, and if it isn't, the search for the\r\ncompanion module will turn up bubkis.\r\n\r\nThis is a localized fix, but I'd be suprised if there\r\nweren't other places that suffered from the same problem.\r\n\r\nWouldn't it be nicer to have something like:\r\n\r\n    // doesn't force info\r\n    sym.raw.info\r\n    sym.raw.companionModule\r\n\r\n    // forces info\r\n    sym.info\r\n    sym.companionModule\r\n\r\nReview by @paulp. \r\n\r\n/cc @JamesIry for consideration of SI-5954"
1909,'','SI-6017 Scaladoc\'s Index should be case-sensitive\nIn the alphabetical index page (index-$letter.html), the entries are not case-sensitive. For example, "STAR" and "Star" are listed under "STAR".\r\n\r\n(Cherry-picked from #1861)'
1908,'adriaanm',"SI-6979 Small optimization in lub\nIf a member of `lubBase` is final, it cannot be\r\nrefined in the types we're lubbing.\r\n\r\nReview by @adriaanm."
1907,'','Closes SI-6952: add correct error positions for Dynamic feature check.\nReview by @adriaanm.'
1906,'','Merge 2.10.x\nreview by @paulp, @retronym'
1905,'',"SI-6956 determine switchability by type, not tree\nConstant folding will set the type of a constant tree\r\nto `ConstantType(Constant(folded))`, while the tree\r\nitself can be many different things (in casu, an Ident).\r\n\r\nWe used to look at the tree directly when deciding whether\r\nto emit a switch. Now we look at the tree's type. Voilà.\r\n\r\nreview by @paulp"
1904,'','SI-5568 Fixes verify error from getClass on refinement of value type\n().asInstanceOf[AnyRef with Unit].getClass and\r\n5.asInstanceOf[AnyRef with Int].getClass would cause a verify\r\nerror. Going the other way, i.e. [Unit with AnyRef] or [Int with AnyRef]\r\nworked fine. This commit fixes it that both directions work out to\r\nBoxedUnit or java.lang.Integer.\r\n\r\nreview @gkossakowski'
1903,'','SI-6807 Deprecating the Actors library.\nAll public classes, traits and objects marked as deprecated.\r\nAdded deprecation note on the package object.\r\nEmbedded external libraries (ThreadPool etc.) are not deprecated as they are intended for internal use only.\r\n\r\nReview by: @phaller'
1902,'','SI-6969, mishandling of SoftReferences in method cache.\nMore interesting to test than it was to fix. The soft\r\nreference is now dereferenced once, the locally stored\r\nunderlying value ascertained to be non-null, and the\r\nremainder of the references to the value use the local var.\r\n\r\nThe enclosed test reliably NPEs without this patch.'
1901,'','dealiasing and annotations\nThat work was intersecting too much with another pending pull request so they met in the middle. This addresses I hope all the many comments left on #1804, and then some. Review by @xeno-by.'
1900,'','Modifies "maybeRewrap" to focus more on the maybe.\nExistential types are rewrapped under a bunch of conditions\r\nunless the operation performed on the underlying type returns\r\nthe same type by reference equality. That depends on a\r\nfoundation of predictability which doesn\'t exist. The upshot is\r\nthat existential types were rewrapped with abandon, even when\r\nthe type were identical.\r\n\r\nThis had both performance and correctness implications.\r\nNote where the test case output changes like so:\r\n\r\n  -scala.collection.immutable.List[Any]\r\n  +scala.collection.immutable.List[<?>]\r\n\r\nThat\'s correctness.'
1899,'','Granted scaladoc its own Global.\nAn incremental step on the road to disentangling\r\nscaladoc from the compiler sources. This pushes the\r\nelements in typer outward so scaladoc can subclass\r\nGlobal like everyone else.'
1898,'','backport from paradise/macros\nreview @paulp @retronym'
1897,'',"SI-6964 Remove build managers, both simple and refined.\nDeprecated in 2.10.0, out to pasture in 2.11.0.\r\n\r\nUsers are advised to migrate to:\r\n\r\n   https://github.com/typesafehub/zinc\r\n   http://www.scala-sbt.org/\r\n\r\n(Not much) discussion: https://groups.google.com/d/topic/scala-internals/QiheDz46nG8/discussion\r\n\r\nLet's see if we get a bit more as a pull request.\r\n\r\nReview by @paulp @dragos (for the IDE)"
1896,'','Remove EqualsPatternClass.\nDetritus from the classic pattern matcher, which was recently\r\nremoved 6084d2d9.\r\n\r\n[Reviewed](https://groups.google.com/forum/?fromgroups#!topic/scala-internals/ucSS4wmWIWw) by @paulp\r\n'
1895,'','SI-6963 Deprecates -Xmigration switch\n-Xmigration is specific to the 2.7 to 2.8 upgrade and is no longer\r\nrelevant. There is no plan to maintain it so it will be removed. This\r\ncommit deprecates it in anticipation.\r\n\r\nreview @gkossakowski'
1894,'','SI-6082 Conditionally expand @ann(x) to @ann(value = x)\n... if the annotation has an argument with the name `value`.\r\n\r\nDoing so unconditionally obscures error messages.\r\n\r\nWe still require that arguments to ClassFileAnnotations\r\nare named, other than for this special case.\r\n\r\nReview by @lrytz'
1893,'',"SI-6968 Simple Tuple patterns aren't irrefutable\nReverts part of c82ecab. The parser can't assume that\r\na pattern `(a, b)` will match, as results of\r\n`.isInstanceOf[Tuple2]` can't be statically known until\r\nafter the typer.\r\n\r\nThe reopens SI-1336 and SI-5589, in exchange for fixing\r\nthis regression SI-6968. Keeping all three fixed will require\r\nsome major surgery.\r\n\r\nReview by @paulp"
1892,'dragos',"SI-6479 Don't lift try exprs in label arguments.\nThe new pattern matcher uses label jumps to GOTO\r\nthe next case. Uncurry treated these like regular\r\nmethod arguments, and performed the liftedTree()\r\ntransformation, which ensures that try expressions\r\nare only used in a statement position. Even try\r\nin statement position of a block used as such an argument\r\nare subject to the same transform.\r\n\r\nThis transform stems from the JVM limitation,\r\nthat try/catch does not leave a value on the stack.\r\nSee b194446.\r\n\r\nThis commit changes Uncurry to avoid this transform\r\nfor arguments to label jumps. This avoids needlessly\r\nindirect code, and enables tail call elimination in\r\nmore cases.\r\n\r\nAs an example, Scala 2.10.0 transforms the last\r\nmethod of the enclosed test case to:\r\n\r\n      try {\r\n        case <synthetic> val x1: Int = 1;\r\n        case5(){\r\n          if (2.==(x1))\r\n            {\r\n              val x2: Int = x1;\r\n              matchEnd4({\r\n                {\r\n                  def liftedTree2(): Unit = try {\r\n                    throw new scala.runtime.NonLocalReturnControl[Unit](nonLocalReturnKey1, ())\r\n                  } catch {\r\n                    case (e @ (_: ClassNotFoundException)) => ()\r\n                  };\r\n                  liftedTree2()\r\n                };\r\n                TailrecAfterTryCatch.this.bad()\r\n              })\r\n            }\r\n          else\r\n            case6()\r\n        };\r\n        case6(){\r\n          matchEnd4(throw new MatchError(x1))\r\n        };\r\n        matchEnd4(x: Unit){\r\n          x\r\n        }\r\n      } catch {\r\n        case (ex @ (_: scala.runtime.NonLocalReturnControl[Unit @unchecked])) => if (ex.key().eq(nonLocalReturnKey1))\r\n          ex.value()\r\n        else\r\n          throw ex\r\n      }\r\n\r\nAfter this patch:\r\n\r\n    @scala.annotation.tailrec final def bad(): Unit = {\r\n      case <synthetic> val x1: Int = 1;\r\n      case5(){\r\n        if (2.==(x1))\r\n          {\r\n            <synthetic> val x2: Int = x1;\r\n            matchEnd4({\r\n              try {\r\n                return ()\r\n              } catch {\r\n                case (e @ (_: ClassNotFoundException)) => ()\r\n              };\r\n              TailrecAfterTryCatch.this.bad()\r\n            })\r\n          }\r\n        else\r\n          case6()\r\n      };\r\n      case6(){\r\n        matchEnd4(throw new MatchError(x1))\r\n      };\r\n      matchEnd4(x: Unit){\r\n        x\r\n      }\r\n    }\r\n\r\nReview by @dragos"
1891,'',"SI-6126 Test case for varargs of tagged primitives.\nThis started working after the merge fe1110f. I didn't track\r\ndown precisely which commit was responsible beyond that.\r\n\r\nReview by @adriaanm"
1890,'','SI-5440 Test case for exhaustiveness check\nReported against patmatclassic, working in virtpatmat.\r\n\r\nReview by @JamesIry'
1889,'','SI-5340 Change println to log\nAn esoteric implicit search could trigger an "amb prefix ..."\r\nmessage to standard out. Now the message has been improved\r\nand sent to the logger.\r\n\r\nReview by @JamesIry'
1888,'',"SI-6675 -Xlint arity enforcement for extractors\nExtractor Patterns changed in 2.10.0 to implement\r\nthe letter of the spec, which allows a single binding\r\nto capture an entire TupleN. But this can hide arity\r\nmismatches, especially if the case body uses the\r\nbound value as an `Any`.\r\n\r\nThis change warns when this happens under -Xlint.\r\n\r\nReview by @adriaanm, @paulp.\r\n\r\nIn particular, I'm after suggestions about how to issue a positioned warning from `Infer` in a less clunky way."
1887,'',"SI-6951 Refine ClassTag based unapply after inference.\nBefore, we were getting:\r\n\r\n    typed ClassTag.apply[T#Branch](classOf[Tree$Branch]).unapply(<unapply-selector>) <unapply> (Matcher.unapply[Oak.type](<unapply-selector>) <unapply> ((branch @ _))): T#Branch\r\n\r\nThis is problematic for two reasons:\r\n\r\n  - We don't actually need to use a class tag in\r\n    pattern matching, because after inference the\r\n    substituted formal type of the unapply method\r\n    is a concrete type, Oak.Branch.\r\n  - The class tag check delivers a T#Branch, which\r\n    doesn't line up with the required Oak.Branch\r\n    required by unapply.\r\n\r\nNow, we use the inferred type argument `Oak.type` to\r\ndouble check whether the type is in fact uncheckable,\r\nand retain the inferred type.\r\n\r\nIn addition, we only consider class tags available\r\nthrough normal implcits, we disable materialization.\r\nSee the code comments for an example of an uncheckable\r\ntype that for which a classtag can be materialized.\r\n\r\nReview by @adriaanm"
1886,'','SI-6966 Fix regression in implicit resolution\nReverts this line: 9c09c17#L50L671. That value was\r\napparantly discarded intentionally.\r\n\r\nreview by @paulp'
1885,'','Resolving new merge conflicts between #1844 and master.\nResolved conflicts with Mode. This also represents my lgtm of #1844, so I will merge after the tests pass.'
1884,'','fixed copy/paste error in IsTraversableLike scaladoc code example\nThe code example contained\xa0IsTraversableOnce when it should be\xa0IsTraversableLike.'
1883,'','Moved repl javap tests into pending.\nFor not passing on java6.'
1882,'',"SI-5954 Adds implementation restriction preventing companions in package...\n... objects\r\n\r\nCompanion objects (and thus also case classes) in package objects caused an\r\nassert about an overloaded symbol when everything was compiled twice. It's a\r\nhairy problem that doesn't fit in 2.10.1. So this fix adds an implementation\r\nrestriction. It also has a test to make sure the error messages are clean\r\nand reasonably friendly, and the test includes a commented out test in case\r\nsomebody thinks they've solved the underlying problem.\r\n\r\n@review gkossakowski"
1881,'',"SI-6955 switch emission no longer foiled by type alias\ndealiasWiden the type of the scrutinee before checking it's switchable\r\nnow with tests! (using IcodeTest since javap is not available everywhere)\r\n\r\nrebase of #1879"
1880,'','Fixes and features for javap (fixing SI-6894)\nOutput filtering is refactored for javap6.\r\n\r\nThat means javap6 also supports -raw.\r\n\r\nHandling of # is: Foo#foo filter on foo,\r\nFoo# filter on apply, -fun Foo#foo for anonfuns of foo,\r\n-fun Foo# anonfuns filtering on apply.\r\n\r\nOne is loath to add command options, so it\'s not possible\r\nto ask for "only apply methods in anonfuns pertaining to\r\na method."  Hypothetical syntax to say "show me the\r\napply only": -fun Foo#foo(), for future reference.\r\n\r\nThis is supplemental to #1849 which I ought to have closed while I was push -f\'ing more stuff late nights.\r\n\r\nAn additional use case is to ask for the App init body:\r\nscala> :javap -app grouped.Test#\r\n  public final java.lang.Object apply();\r\n\r\nReview by @paulp '
1879,'',"SI-6955 switch emission no longer foiled by type alias\ndealias the type of the scrutinee before checking it's switchable\r\nnow with tests!\r\n\r\nreview by @paulp"
1878,'',"SI-6925 use concrete type in applyOrElse's match's selecto\nFix a regression introduced in 2848373:\r\n\r\nPartialFunction synthesis was broken so that we'd get:\r\n```\r\nscala> def f[T](xs: Set[T]) = xs collect { case x => x }\r\nf: [T](xs: Set[T])scala.collection.immutable.Set[_ <: T]\r\n```\r\n\r\nrather than\r\n```\r\nscala> def f[T](xs: Set[T]) = xs collect { case x => x }\r\nf: [T](xs: Set[T])scala.collection.immutable.Set[T]\r\n```\r\n\r\nreworked partial function synthesis while I was in the neighborhood\r\nno functional changes (intended) in the second commit\r\n\r\nreview by @retronym"
1877,'',"SI-5189 detect unsoundness when inferring type of match\nGADT skolems encode type slack that results from pattern matching on variant type constructors. I thought they would not longer be relevant after cases have been typed,\r\nand since they caused weird issues with the old pattern matcher, I deskolemized in typedCase\r\n\r\nhowever, when we don't have an expected type for the match, we need to keep the skolems around until the skolemized type makes it out of the match and it becomes the result of type inference for that match when you do have an expected type, it will propagate to the case-level and the confrontation will thus already take place when typing individual cases\r\n\r\n[foward port of #1876]"
1876,'',"SI-5189 detect unsoundness when inferring type of match\nGADT skolems encode type slack that results from pattern matching on variant type constructors\r\nI thought they would not longer be relevant after cases have been typed,\r\nand since they caused weird issues with the old pattern matcher, I deskolemized in typedCase\r\n\r\nhowever, when we don't have an expected type for the match, we need to keep the skolems around\r\nuntil the skolemized type makes it out of the match and it becomes the result of type inference for that match\r\nwhen you do have an expected type, it will propagate to the case-level and the confrontation will thus\r\nalready take place when typing individual cases\r\n\r\nreview by @paulp"
1875,'','SI-6946, SI-6924 Greatly improves IsTraversableLike docs\nGiven:\r\n1. SI-6924 Error in IsTraversableLike scaladoc example (example code did not compile)\r\n2. SI-6946 Documentation for IsTraversableLike is confusing (my dissatisfaction with the docs for IsTraversableLike)\r\n\r\nI rewrote the docs completely and provided an alternate example. While the fix provided in #1850 did indeed make the example code compile, the example code was still far too complicated to clearly illustrate an already confusing concept.\r\n\r\nFunny observation: the amount of docs now greatly exceeds the amount of code.\r\n\r\nUnfortunately, this renders PR #1850 now unnecessary.\r\n\r\nReview by @jsuereth and @phaller '
1874,'','Made "mode" into a value class.\nThis is an obvious place to apply value class goodness and\r\ncollect some safety/sanity in typing modes. It does show off\r\na challenge in introducing value classes without disruption:\r\nthere\'s no way to deprecate the old signature of \'typed\',\r\n\'adapt\', etc. because they erase the same.\r\n```\r\n  class Bippy(val x: Int) extends AnyVal\r\n  class A {\r\n    @deprecated("Use a bippy") def f(x: Int): Int = 5\r\n    def f(x: Bippy): Int = x.x\r\n  }\r\n\r\n  ./a.scala:5: error: double definition:\r\n  method f:(x: Bippy)Int and\r\n  method f:(x: Int)Int at line 4\r\n  have same type after erasure: (x: Int)Int\r\n```\r\nAn Int => Mode implicit handles most uses, but nothing can\r\nbe done to avoid breaking anything which e.g. extends Typer\r\nand overrides typed.'
1873,'','a painstaking examination of Variance\nHighlights:\r\n\r\n - made Variance a value class\r\n - removed lots of redundant variance code\r\n - fixed multiple soundness holes\r\n - tests which count all the way past 100\r\n\r\nReview by @adriaanm.'
1872,'','SI-6555 Scaladoc\'s class filter shouldn\'t drop the last character (2.10.x)\nThe event handler have to wait "keyup", not "keydown".'
1871,'','Merge 2.10.x\nPatches applied:\r\n - rename of `dropRepeatedParamType` to `dropIllegalStarTypes` -- required since 8886d22\r\n - fixed test/files/neg/t6406-regextract.flags -- how could this have worked before?\r\n\r\nConflicts:\r\n\tsrc/compiler/scala/tools/nsc/interpreter/TypeStrings.scala\r\n\tsrc/library/scala/collection/LinearSeqOptimized.scala\r\n\tsrc/library/scala/util/Properties.scala\r\n\ttest/files/run/streams.check\r\n\ttest/files/run/streams.scala\r\n\r\nreview by @paulp'
1870,'',"SI-6863 Fix verify error in captured var created from try/catch\nIf a var is assigned from a try/catch and it's captured into a ref\r\nthen we were generating invalid byte code. The fix basically\r\nundoes commit b2f3fb271342d7862cc045f5ee5cff6815ac9722\r\nand adds a test to make sure this case doesn't regress again.\r\n\r\nreview @magarciaEPFL, @paulp"
1869,'','Backport of SI-6846.\nSquashed commit of the following:\r\n\r\ncommit 55806cc0e6177820c12a35a18b4f2a12dc07bb39\r\nAuthor: Paul Phillips <paulp@improving.org>\r\nDate:   Wed Dec 19 07:32:19 2012 -0800\r\n\r\n    SI-6846, regression in type constructor inference.\r\n\r\n    In 658ba1b4e6 some inference was gained and some was lost.\r\n    In this commit we regain what was lost and gain even more.\r\n    Dealiasing and widening should be fully handled now, as\r\n    illustrated by the test case.\r\n    (cherry picked from commit dbebcd509e4013ce02655a2687b27d0967b3650e)\r\n\r\ncommit e6ef58447d0f4ef6de956fcc03ee283bb9028c02\r\nAuthor: Paul Phillips <paulp@improving.org>\r\nDate:   Fri Dec 21 15:11:29 2012 -0800\r\n\r\n    Cleaning up type alias usage.\r\n\r\n    I determined that many if not most of the calls to .normalize\r\n    have no intent beyond dealiasing the type. In light of this I\r\n    went call site to call site knocking on doors and asking why\r\n    exactly they were calling any of\r\n\r\n      .normalize\r\n      .widen.normalize\r\n      .normalize.widen\r\n\r\n    and if I didn\'t like their answers they found themselves\r\n    introduced to \'dropAliasesAndSingleTypes\', the recursive widener\r\n    and dealiaser which I concluded is necessary after all.\r\n\r\n    Discovered that the object called \'deAlias\' actually depends\r\n    upon calling \'normalize\', not \'dealias\'. Decided this was\r\n    sufficient cause to rename it to \'normalizeAliases\'.\r\n\r\n    Created dealiasWiden and dealiasWidenChain.\r\n\r\n    Dropped dropAliasesAndSingleTypes in favor of methods\r\n    on Type alongside dealias and widen (Type#dealiasWiden).\r\n    These should reduce the number of "hey, the type alias doesn\'t work" bugs.\r\n\r\n    (cherry picked from commit 3bf51189f979eb0dd41744ca844fd12dfdaa0dee)\r\n\r\n    Conflicts:\r\n    \tsrc/compiler/scala/tools/nsc/interpreter/CompletionOutput.scala\r\n\r\ncommit c1d8803cea1523f458730103386d8e14324a9446\r\nAuthor: Paul Phillips <paulp@improving.org>\r\nDate:   Sat Dec 22 08:13:48 2012 -0800\r\n\r\n    Shored up a hidden dealiasing dependency.\r\n\r\n    Like the comment says:\r\n\r\n    // This way typedNew always returns a dealiased type. This\r\n    // used to happen by accident for instantiations without type\r\n    // arguments due to ad hoc code in typedTypeConstructor, and\r\n    // annotations depended on it (to the extent that they worked,\r\n    // which they did not when given a parameterized type alias\r\n    // which dealiased to an annotation.) typedTypeConstructor\r\n    // dealiases nothing now, but it makes sense for a "new" to\r\n    // always be given a dealiased type.\r\n\r\n    PS:\r\n    Simply running the test suite is becoming more difficult all\r\n    the time. Running "ant test" includes time consuming activities\r\n    of niche interest such as all the osgi tests, but test.suite\r\n    manages to miss the continuations tests.\r\n    (cherry picked from commit 422f461578ae0547181afe6d2c0c52ea1071d37b)\r\n\r\ncommit da4748502792b260161baa10939554564c488051\r\nAuthor: Paul Phillips <paulp@improving.org>\r\nDate:   Fri Dec 21 12:39:02 2012 -0800\r\n\r\n    Fix and simplify typedTypeConstructor.\r\n\r\n    Investigating the useful output of devWarning (-Xdev people,\r\n    it\'s good for you) led back to this comment:\r\n\r\n      "normalize to get rid of type aliases"\r\n\r\n    You may know that this is not all the normalizing does.\r\n    Normalizing also turns TypeRefs with unapplied arguments\r\n    (type constructors) into PolyTypes. That means that when\r\n    typedParentType would call typedTypeConstructor it would\r\n    find its parent had morphed into a PolyType. Not that it\r\n    noticed; it would blithely continue and unwittingly discard\r\n    the type arguments by way of appliedType (which smoothly\r\n    logged the incident, thank you appliedType.)\r\n\r\n    The simplification of typedTypeConstructor:\r\n\r\n    There was a whole complicated special treatment of AnyRef\r\n    here which appears to have become unnecessary. Removed special\r\n    treatment and lit a candle for regularity.\r\n\r\n    Updated lots of tests regarding newly not-so-special AnyRef.\r\n    (cherry picked from commit 394cc426c1ff1da53146679b4e2995ece52a133e)\r\n\r\ncommit 1f3c77bacb2fbb3ba9e4ad0a8a733e0f9263b234\r\nAuthor: Paul Phillips <paulp@improving.org>\r\nDate:   Fri Dec 21 15:06:10 2012 -0800\r\n\r\n    Removed dead implementation.\r\n\r\n    Another "attractive nuisance" burning off time until I\r\n    realized it was commented out.\r\n    (cherry picked from commit ed40f5cbdf35d09b02898e9c0950b9bd34c1f858)\r\n\r\nReview by @paulp'
1868,'paulp',"SI-6556 Remove unneeded workaround in erasure.\nIn fb6e687, a workaround was added, described as:\r\n\r\n> See SI-6556. It seems in some cases the result constructor\r\n> type of an anonymous class is a different version of the class.\r\n> This has nothing to do with value classes per se.\r\n> We simply used a less discriminating transform before, that\r\n> did not look at the cases in detail.\r\n> It seems there is a deeper problem here, which needs\r\n> following up to. But we will not risk regressions\r\n> in 2.10 because of it.\r\n\r\nI was expecting an arduous investigation into this,\r\nbut happilly the underlying problem was already solved\r\nin the fix for SI-6648 (1587a77e). (Chalk up another\r\nwin for libscala's scala-hash!)\r\n\r\nThis commit escalates the logging to an assertion.\r\nIt _doesn't_ revert the other change in fb6e687,\r\nwhich introduced a case for RefinedType. Those lines\r\nare not needed to pass pos/t6556.scala, but I'll\r\ntake the decision to remove those lines under advisement\r\nof a reviewer.\r\n\r\nReview by @odersky\r\n\r\n  - Is this case now redundant? If not, what test case could we add to exercise it? https://github.com/retronym/scala/blob/cced84a3/src/reflect/scala/reflect/internal/transform/Erasure.scala#L217\r\n\r\nAnd by @adriaanm for a call on `2.10.x` vs `master`."
1867,'','SI-6766 Create a continuations project in eclipse ( backports https://github.com/scala/scala/pull/1721)\n'
1866,'','Fixes SI-6521, overrides Range#head to be faster\nBackport of 63ba3d64a7002ef67f7f13083a18fe1042a3adba'
1865,'','SI-6555 Scaladoc\'s class filter shouldn\'t drop the last character\nThe event handler have to wait "keyup", not "keydown".'
1864,'paulp','SI-4859 Step back from mis-optimizations in qualifiers\nRetargetting #1710 to master.\r\n\r\nWidespread, invalid qualifier discarding in the apparent name of performance led to a variety of problems:\r\n\r\nThe compiler would crash in case of:\r\n\r\n    OuterCaseClass().InnerCaseClass()\r\n\r\nAnd the side effect would be elided in:\r\n\r\n    { println("!!"); Outer}.Inner\r\n\r\nThis change fixes these problems but stops short of fixing the last problem:\r\n\r\n    Outer.Inner.foo // module load of Outer is still elided.\r\n\r\nThis could be fixed use a stronger condition than `isExprSafeToInline` throughout this patch. (It would be `isExprSafeToElide` or `isPure`.)\r\n\r\nThoughts? Should that change be tackled in this ticket or separately?\r\n\r\nLast time, @paulp [opined](https://github.com/scala/scala/pull/1710#discussion_r2458429):\r\n\r\n> I don\'t see how we can fail to initialize Outer here if we wish to have at all predictable semantics.\r\n\r\nReview by @paulp @magarcia'
1863,'adriaanm','SI-6641 Deprecate SwingWorker\nSee discussion: #1862\r\n\r\nReview by @adriaanm'
1862,'adriaanm',"SI-6641 Cull scala.swing.SwingWorker\nIt appears to do nothing much at all, refers to the now-deprecated\r\nscala.actor package, and has a name clash with an important class\r\nfrom java.swing.\r\n\r\nNote that the POM for scala-swing does not declare the dependency.\r\n\r\nThe final nail in the coffin is it aides and abets the crash in\r\nthe crash in SI-6440.\r\n\r\nAttempts to remove or even deprecate this in 2.10.0 were\r\nmissed the boat.\r\n\r\nThis commit removes them for 2.11.0, in contravention of\r\nthe deprecation policy. Given that they rely on the\r\nscala-actors module which _is_ deprecated in 2.10.0,\r\nand will likely be removed in 2.11.0, I contend that\r\nthis is a reasonable exception.\r\nActor.scala\r\n\r\nAnother shot at #1603. \r\n\r\nI will submit another PR (#1863) to deprecate in 2.10.1, which doesn't absolve us of our sins, but seems like the right thing to do.\r\n\r\nReview by @adriaanm."
1861,'','SI-6017 Fix issues around Scaladoc\'s alphabetical index page\nThis pull request fix these two issues:\r\n\r\n1. In the index page (index.html), the current implementation creates links in JavaScript but it generates dangling links.\r\n2. In the alphabetical index page (index-$letter.html), the entries are not case-sensitive. For example, "STAR" and "Star" are listed under "STAR".'
1860,'','SI-6930 adds documentation to reduceLeft in TraversableOnce\nCloses [SI-6930](https://issues.scala-lang.org/browse/SI-6930).'
1859,'',"SI-6912 Avoid a typer cycle in overload resolution.\nc800d1fe, and followup commits 1ddc9358 and b10b5821\r\nmodified error handling in `Infer#inferExprAlternative`.\r\nAfter these changes, this method could fail to resolve\r\nthe overloaded alternative if:\r\n\r\n       best != NoSymbol\r\n    && !competing.isEmpty\r\n    && !noAlternatives\r\n    && pt.isErroneous\r\n\r\nThis commit calls `setError` in that case, which\r\nprevents the cycle in `adapt`.\r\n\r\nWhile I didn't extract a reproduction from the\r\noriginal code base, I've included a test case that\r\nexhibits the same symptom.\r\n\r\nIt was actually pretty tough to find an program that\r\ngot close to this code path, but luckilly we've been\r\npretty close to this bug in [SI-5553](https://issues.scala-lang.org/browse/SI-5553) / 4f99c2e5, and those\r\ntest cases formed the basis for this one.\r\n\r\nReview by @hubertp, or by @paulp if he's not about."
1858,'','SI-6939 Fix namespace binding (xmlns) not overriding outer binding\nThis is a fix for [SI-6939: Namespace binding (xmlns) is duplicated if a child redefines a prefix](https://issues.scala-lang.org/browse/SI-6939).\r\n\r\nGiven a nested XML literal to the compiler Elem instance is generated\r\nwith namespace binding of the inner element copying that of the outer element:\r\n\r\n```scala\r\nval foo = <x:foo xmlns:x="http://foo.com/">\r\n  <x:bar xmlns:x="http://bar.com/">\r\n    <x:baz/>\r\n  </x:bar>\r\n</x:foo>\r\n```\r\n\r\nWith the above example, `foo.child.head.scope.toString` returns\r\n\r\n```scala\r\n" xmlns:x="http://bar.com/" xmlns:x="http://foo.com/""\r\n```\r\n\r\nThis is incorrect since the outer xmls:x should be overridden\r\nby the inner binding.\r\n\r\nXML library also parses XML document in a similar manner:\r\n\r\n```scala\r\nval foo2 = scala.xml.XML.loadString("""<x:foo xmlns:x="http://foo.com/"><x:bar xmlns:x="http://bar.com/"><x:baz/></x:bar></x:foo>""")\r\n```\r\n\r\nDespite this erroneous behavior, since the structure of NamespaceBinding class\r\nis designed to be singly-linked list, the stacking of namespace bindings allows\r\nconstant-time creation with simple implementation.\r\nSince the inner namespace binding comes before the outer one,\r\nquery methods like `getURI` method behave correctly.\r\n\r\nBecause this bug is manifested when Elem is turned back into XML string,\r\nit could be fixed by normalizing the namespace binding right when\r\nbuildString is called.\r\nWith this change `foo.child.head.scope.toString` now returns:\r\n\r\n```scala\r\n" xmlns:x="http://bar.com/""\r\n```'
1857,'adriaanm','SI-6443 Widen dependent param types in uncurry\nBridge building operates on unusual method signatures:\r\nafter uncurry, so parameter lists are collapsed; but before\r\nerasure, so dependently typed parameters are still around.\r\n\r\nOriginal:\r\n\r\n    def foo(a: T)(b: a.type, c: a.U): Unit\r\n\r\nDuring computeBridges:\r\n\r\n    (a: T, b: a.type, c: a.U)Unit\r\n\r\nThis signature no longer appears to override the corresponding\r\none in a superclass, because the types of `b` and `c` are dependent\r\non method parameters.\r\n\r\nThe root of the problem is uncurry, which leaves the trees in\r\na poor state. This commit changes uncurry to remedy this.\r\n\r\nAn example illustrates it best:\r\n\r\n    // source\r\n    def foo(a: A)(b: a.type): b.type = b\r\n\r\n    // post uncurry before this patch.\r\n    // not well typed code!\r\n    def foo(a: A, b: a.type): b.type = {\r\n\r\n    // post uncurry after this patch\r\n    def foo(a: A, b: A): b.type = {\r\n       val b$1 = b.asInstanceOf[a.type]\r\n       b$1\r\n    }\r\n\r\nThis PR replaces #1696, and also closes SI-6135\r\n\r\nReview by @adriaanm'
1856,'jsuereth','sbt-git-plugin has moved.\nWe need to eliminate these sort of shifting sands to make\r\nthe SBT build a viable option.\r\n\r\nReview by @jsuereth. Should we switch to dependencies on binary releases of these plugins?'
1855,'','Makes partest understand .scalacheck files for scalacheck tests\nThese files will allow to pass custom params to scalatest test runner. This can be useful when default scalacheck settings are inappropriate (e.g. -maxSize is too large or -maxDiscardRatio is not sufficient)'
1854,'',"SI-6923 Context now buffers warnings as well as errors\nFirst pull request!\r\n\r\nhttps://issues.scala-lang.org/browse/SI-6923\r\n\r\nI want this change in 2.10.x but what's the procedure for porting this to 2.11/master?\r\n\r\n----\r\n\r\nCode that was silently typed would not report warnings, even if it\r\nreturned a successful result.\r\n\r\nThis appeared in the following code which didn't show warnings even\r\nwith -Ywarn-adapted-args:\r\n\r\n    def foo(a: Any) = a; foo(1, 2)\r\n\r\nWhile the following would show the expected warning:\r\n\r\n    def foo[A](a: Any) = a; foo(1, 2)"
1853,'','SI-6928, VerifyError with self reference to super.\nA bug in typers mishandled varargs. We should get more\r\naggressive about eliminating all the ad hoc parameter/argument\r\nhandling code spread everywhere. For varargs especially:\r\nany code which tries to make an adjustment based on a\r\nrepeated parameter is more likely to be wrong than right.\r\nIn aggregate these reinventions are a huge source of bugs.'
1852,'',"SI-6925 use concrete type in applyOrElse's match's selector\nFix a regression introduced in 28483739c3:\r\n\r\nPartialFunction synthesis was broken so that we'd get:\r\n```\r\nscala> def f[T](xs: Set[T]) = xs collect { case x => x }\r\nf: [T](xs: Set[T])scala.collection.immutable.Set[_ <: T]\r\n```\r\n\r\nrather than\r\n```\r\nscala> def f[T](xs: Set[T]) = xs collect { case x => x }\r\nf: [T](xs: Set[T])scala.collection.immutable.Set[T]\r\n```\r\n\r\nreview by @paulp"
1851,'',"SI-6925 use concrete type in applyOrElse's match's selector\nFix a regression introduced in 28483739c3:\r\n\r\nPartialFunction synthesis was broken so that we'd get:\r\n```\r\nscala> def f[T](xs: Set[T]) = xs collect { case x => x }\r\nf: [T](xs: Set[T])scala.collection.immutable.Set[_ <: T]\r\n```\r\n\r\nrather than\r\n```\r\nscala> def f[T](xs: Set[T]) = xs collect { case x => x }\r\nf: [T](xs: Set[T])scala.collection.immutable.Set[T]\r\n```"
1850,'',"fix IsTraversableLike example code\nCan't compile current example code. Maybe copy/paste mistakes form `IsTraversableOnce`\r\n\r\nhttps://github.com/scala/scala/blob/v2.10.0/src/library/scala/collection/generic/IsTraversableLike.scala#L21-L30\r\n\r\n```scala\r\n$ scala\r\nWelcome to Scala version 2.10.0 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_09).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n \r\nscala> import scala.collection._\r\nimport scala.collection._\r\n \r\nscala> import scala.collection.generic._\r\nimport scala.collection.generic._\r\n \r\nscala> class FilterMapImpl[A, Repr](val r: GenTraversableLike[A, Repr]) {\r\n     |   final def filterMap[B, That](f: A => Option[B])(implicit cbf: CanBuildFrom[Repr, B, That]): That =\r\n     |     r.flatMap(f(_).toSeq)\r\n     | }\r\ndefined class FilterMapImpl\r\n \r\nscala> implicit def filterMap[Repr, A](r: Repr)(implicit fr: IsTraversableOnce[Repr]): FilterMapImpl[fr.A,Repr] =\r\n     |   new FilterMapImpl(fr.conversion(r))\r\n<console>:15: error: type mismatch;\r\n found   : scala.collection.GenTraversableOnce[fr.A]\r\n required: scala.collection.GenTraversableLike[fr.A,Repr]\r\n         new FilterMapImpl(fr.conversion(r))\r\n                                        ^\r\n```\r\n\r\n\r\nhttps://github.com/scala/scala/blob/v2.10.0/test/files/run/enrich-gentraversable.scala#L7-L12"
1849,'',"Repl javap decodes various synthetic names for us (fixing SI-6894)\nPreface: this needs more tests.\r\n\r\nAlso, Foo#m filtering is easy to do; since -fun Foo#m is handled by this commit, maybe the less specific feature can get squashed in here, too.\r\n\r\nFeedback on feature and impl will be gratefully incorporated.\r\n\r\nI need this commit to work on implicits in for exprs, what a hassle to javap the anonfuns.\r\n\r\n***\r\n\r\nFor instance, javap -app Test is equivalent to javap Test$delayedInit$App\r\nwith the correct line and iw prepended.  This works by taking Test as a\r\nname in scope, translating that, and then supplying the suffix.\r\n\r\nThen javap -fun Test shows Test$$anonfun*, and for def m,\r\njavap -fun m shows Test$$anonfun$$m*.\r\n\r\nE.g., javap -fun scala.Enumeration obviates knowing or guessing\r\nscala/Enumeration$$anonfun$scala$Enumeration$$populateNameMap$1.class.\r\n\r\nAlso, scala> :javap -fun scala.Array#concat\r\nbut still to do is using imported syms.\r\n\r\nBoth files and replout are supported for searching for artifacts.\r\n\r\nThe trigger is detecting the synthetic name (has an interior dollar).\r\n\r\nStill to do, filter the output on Test#m to show only m.\r\n\r\nNeed a way to explore the list of artifacts; ideally, related symbols\r\nwould be available reflectively.\r\n\r\nPrefer companion class to object, otherwise it's not showable;\r\nfor object, require dollar when both exist.\r\n\r\nReview and invaluable feedback by @paulp\r\n"
1848,'','SI-6918 Changes REPL output from "defined module" to "defined object"\n'
1847,'','SI-6916 makes FlatHashTable#remove a Boolean not Option[A]\nMakes FlatHashTable#remove return a boolean instead of Option[A].\r\nUpdates HashSet accordingly. Adds a test to make sure remove\r\nworks as advertised.\r\n\r\nreview by @paulp'
1846,'','+paradise/macros\nDepends on a bunch of other pull requests opened against master. Please review those separately. Only the last three commits actually describe paradise functionality.\r\n\r\nCurrently only includes type macros. Quasiquotes and untyped macros will soon arrive.\r\n\r\nreview @paulp @adriaanm @retronym\r\n'
1845,'','+paradise/macros\nDepends on a bunch of other pull requests opened against master. Please review those separately. Only the last three commits actually describe paradise functionality.\r\n\r\nCurrently only includes type macros. Quasiquotes will soon arrive.\r\n\r\nreview @paulp @adriaanm @retronym\r\n'
1844,'','Backport from paradise/macros\nreview @paulp\r\n\r\nSupersedes #1831'
1843,'','SI-6915 Updates copyright properties to 2002-2013\nThe .scala header files had the right copyright dates\r\nbut properties used to generate the information in\r\ne.g. "scala -version" hadn\'t been updated.\r\n\r\nreview @adriaanm'
1842,'','Backport 1821\nbackport of part of #1821'
1841,'',"Fix Iterator#copyToArray (fixes SI-6827).\nAs pointed out in #scala, when using a non-zero start it's possible\r\nto get an ArrayIndexOutOfBoundsException due to an incorrect bounds\r\ncheck. This patch fixes this, as well as another potential bounds\r\nerror, and adds test cases.\r\n\r\nIncorporates some other suggestions by Som-Snytt to ensure that\r\ncallers will get useful error messages in cases where the start\r\nparameter is wrong (negative or out-of-array-bounds).\r\n\r\n(rebase of #1785)"
1840,'','SI-6911, regression in generated case class equality.\nCaught out by the different semantics of isInstanceOf and\r\npattern matching.\r\n\r\n  trait K { case class CC(name: String) }\r\n  object Foo extends K\r\n  object Bar extends K\r\n  Foo.CC("a") == Bar.CC("a")\r\n\r\nThat expression is supposed to be false, and with this\r\ncommit it is once again.'
1839,'','SI-6908 Makes FlatHashTable as well as derived classes support nulls\n\r\nThis change adds a null sentinel object which is used to indicate that a null\r\nvalue has been inserted in FlatHashTable. It also makes a strong distinction\r\nbetween logical elements of the Set vs entries in the hash table. Changes\r\nare made to mutable.HashSet and ParHashSet accordingly.\r\n\r\nreview by @adriaanm'
1838,'','SI-6594 - Switch to sneakyThrows instead of Unsafe.throwException as per...\n... new jsr166y to avoid issues with Android\r\n\r\n(was previously SI-6905 but that was a duplicate)\r\n\r\nSee: https://issues.scala-lang.org/browse/SI-6594\r\n\r\nSince code is lifted from the jsr166y repo and there is no test suite for FJ embedded in scala-lib I assume this is how we roll.\r\n\r\nThis of course also needs forwardporting. '
1837,'','Fix dependant => dependent\n'
1836,'','Align copyright years\nThis PR addresses https://issues.scala-lang.org/browse/SI-6903 to align the copyright years to 2013.'
1835,'',"SI-6896, spurious warning with overloaded main.\nMake sure there's no legit main signature before issuing\r\nany warnings about missing main methods."
1834,'',"SI-6897, lubs and varargs star.\nDon't allow lubs to calculate refinement types which contain\r\na varargs star outside of legal varargs star position."
1833,'',"BigDecimal precision explosion\nI'm finding a difference in the behavior of BigDecimals in 2.10.0-RC5 vs 2.9.2.  Specifically, computations in 2.10.0-RC5 can lead to explosions in precision.  For example, consider the following computation, done with the default MathContext (which has precision 34), in each version\r\n\r\n```\r\nWelcome to Scala version 2.9.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_07).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n\r\nscala> import math.BigDecimal\r\nimport math.BigDecimal\r\n\r\nscala> val z40 = BigDecimal(0).setScale(40)\r\nz40: scala.math.BigDecimal = 0E-40\r\n\r\nscala> (1+ z40*z40).precision\r\nres0: Int = 34\r\n```\r\n\r\nvs\r\n\r\n```\r\nWelcome to Scala version 2.10.0-RC5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_07).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\n\r\nscala> import math.BigDecimal\r\nimport math.BigDecimal\r\n\r\nscala> val z40 = BigDecimal(0).setScale(40)\r\nz40: scala.math.BigDecimal = 0E-40\r\n\r\nscala> (1+z40*z40).precision\r\nres0: Int = 81\r\n```\r\n\r\nThe old behavior seems correct to me.  (It can be recovered by doing something like `(1+z40*z40)(z40.mc)`, but this is somewhat ugly, and it would be nice to have the correct MathContext applied at each stage in a computation.)  Was this change intentional?  If so, what was the reasoning behind it?"
1832,'','+paradise/macros\nDepends on a bunch of other pull requests opened against master. Please review those separately.\r\n\r\nCurrently only includes type macros. Quasiquotes will soon arrive.\r\n\r\nreview @paulp @adriaanm @retronym\r\n'
1831,'','Backport from paradise/macros\nApplies improvements to the macro engine from paradise/macros\r\nto provide robustness and uniformity to different entrances of macro\r\nexpansion + to prepare for the unavoidable typemacro merge!'
1830,'','nested closures are flattened by calling supplementErrorMessage() directly\n\r\nA closure C that becomes an argument to the constructor of another closure makes both closures harder to eliminate (either by scalac-optimizer or JIT-compiler) than is the case when C is the argument to an @ inline method.\r\n\r\nIn the same vein as https://github.com/scala/scala/pull/1823\r\n\r\nreview by @JamesIry or @paulp\r\n\r\n'
1829,'',"New starr based on b7840d6b41.\nSeven weeks is a good amount of time between starrs,\r\nand I'm going nutso for -Xdev during locker."
1828,'','SI-6415, Stream#lengthCompare\nThis rebases, cleans up, and supersedes #1671.'
1827,'','Remove name-mangling for almost all characters\nWhile the list of exceptions hasn\'t changed much in size,\r\nnon-dangerous method names like + and ??? as well as 99% of the\r\ncharacter plane which were formerly name-mangled with $uXXXX appear\r\nnow as-is in stacktraces, other places and tools not specificially\r\nwritten with Scala\'s name-mangling in mind.\r\n\r\nThe changes are mostly in line with the recommendations for the JVM\r\n(look for "symbolic freedom"), except for the list of exceptions\r\nwhich currently keep using the $-style mangling instead of the suggested\r\nbackslash-style (example: / is currently encoded as $slash, the\r\nguidelines recommend \\|) due to readability concerns.\r\n\r\nThe improvements to readability are impressive, imho.\r\nAnother benefit is that people have to deal with a lot less mangled\r\nnames when working with macros.'
1826,'','uniform dealiasing and widening\nrebase #1797 into fewer commits'
1825,'',"fusion of loops in Range.foreach() and Range.validateRangeBoundaries()\nThis commit allows closure elimination in more cases. The non-inlined case also benefits from saving a Range.validateRangeBoundaries() invocation.\r\n\r\nBefore this commit, the closure argument to Range.foreach() escaped to Range.validateRangeBoundaries(). As a consequence, closure elimination required inlining both of them. Given that the current optimizer duplicates a closure body whenever that closure's apply() is invoked, the resulting code size taxed the JIT compiler. In particular when apply() delegates to a specialized version, or when a bridge apply() stands in the way.\r\n\r\nreview by @paulp\r\n\r\nDoes the performance gain warrant merging into 2.10.x ?"
1824,'',"Remove -deprecation from partest default options.\nWho knows why it was ever like this; it's not like anyone\r\nsees the deprecation warnings. In PR #1807 there is now a\r\ntest which depends on partest not making this move, so it's\r\na good time to finally expunge it."
1823,'','Eliminating allocations.\n    At this commit the statistics when compiling src/library\r\n    are as follows. These counts are precise, collected by a\r\n    modified Function1 which counts every instantiation of every\r\n    implementing class. The net result is 27 million fewer\r\n    allocations, over a 20% drop.\r\n    \r\n      // master (5b5635ee9d), total and top five by count:\r\n      Total Function1 allocations: 128,805,865\r\n    \r\n      scala.collection.immutable.$colon$colon 26781958\r\n      scala.collection.mutable.ListBuffer 15365174\r\n      scala.collection.TraversableLike$$anonfun$map$1 9127787\r\n      scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1 4636154\r\n      scala.collection.mutable.StringBuilder 3531211\r\n    \r\n      // After these commits, total and top five by count:\r\n      Total Function1 allocations: 101,865,721\r\n    \r\n      scala.collection.immutable.$colon$colon 26993704\r\n      scala.collection.mutable.ListBuffer 15319656\r\n      scala.collection.TraversableLike$$anonfun$map$1 7585019\r\n      scala.reflect.internal.Types$MethodType$$anonfun$paramTypes$1 2447307\r\n      scala.reflect.internal.Types$SubstSymMap 2436088'
1822,'','SI-6194, repl crash.\nAlways a bad idea to use replaceAll on unknown strings,\r\nas we saw here when windows classpaths arrived containing\r\nescape-requiring backslashes.'
1821,'','bind + argc specialization = 20x perf boost\nDefault logic of mirror construction, which gets triggered via\r\nreflectField/reflectMethod/reflectConstructor, validates a lot of facts\r\nabout its arguments.\r\n\r\nThis takes quite a bit of time, which significantly degrades performance\r\nof reflection-heavy applications. Proposed two changes provide an order\r\nof magnitude performance boost to a simple app, which repeatedly invokes\r\nthe same method for different receiver instances.'
1820,'','Removed old pattern matcher.\nToo slow, moors. Review by @adriaanm.'
1819,'','+paradise/macros\n'
1818,'',"macro expansions are now auto-duplicated\nThe fix still requires macro developers to be careful about sharing trees\r\nby references, because attributed DefTrees will still bring trouble.\r\n\r\nHowever this is an improvement, because it doesn't make matters worse\r\nand automatically fixes situations similar to one in the test.\r\n\r\nA much more thorough discussion with a number of open questions left:\r\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/492560d941b315cc"
1817,'',"adds c.introduceTopLevel\nThe first in the family of mutators for the global symbol table,\r\n`introduceTopLevel` is capable of creating synthetic top-level\r\nclasses and modules.\r\n\r\nThe addition of nme.EMPTY_PACKAGE_NAME is necessary to let\r\nprogrammers insert definitions into the empty package. That's explicitly\r\ndiscouraged in the docs, but at times might come in handy.\r\n\r\nThis patch introduce workarounds to avoid incompatibilities with SBT.\r\nFirst of all SBT doesn't like VirtualFiles having JFile set to null.\r\nSecondly SBT gets confused when someone depends on synthetic files\r\nadded by c.introduceTopLevel.\r\n\r\nStrictly speaking these problems require changes to SBT, and that will be\r\ndone later. However the main target of the patch is paradise/macros,\r\nwhich needs to be useful immediately, therefore we apply workarounds."
1816,'','enclosures are now strongly typed and are no longer vals\nreview @paulp @retronym'
1815,'','renames c.fresh to c.freshName\nreview @paulp'
1814,'','adds extractors for TypeName, TermName and Modifiers \n'
1813,'','SI-5903 extractor macros are now expanded\nThis patch alone only allows delegating to other extractors without\r\neven a possibility to change the signature. Something more powerful\r\nrequires c.introduceTopLevel or comparable.'
1812,'','showRaw can now print positions\n'
1811,'','adds Tree.nonEmpty\nSo that trees become consistent with isEmpty on lists and options.'
1810,'','fixes a crash in PatternMatching for positionless trees\n'
1809,'','fixes the typedIdent problem for good\nPrevious attachment retaining fix was only working for Idents which\r\nget turned into Selects. Now it works for all transformations applied\r\nto Idents (e.g. when an ident refers to something within a package obj).'
1808,'','Moves annotationError outside typedAnnotation\nThis refactoring allows everyone from the compiler, e.g. the macro engine\r\nwhich expands annotation-emitting macros, to produce annotation errors.'
1807,'',"the scanner is now less eager about deprecations\nWhen healing braces it isn't very useful to report deprecation warnings,\r\nespecially since this process is just simple context-free skimming, which\r\ncan't know about what positions can accept what identifiers."
1806,'','Rewrote FastTrack for clarity.\nWe can say what we wish to say with more directness\r\nand with fewer vars, levels of indirection, public members,\r\nand implicit conversions.'
1805,''," SI-4829 The :load command now fais if the command ends with a space\nModified the load command to accept a variable amount of filenames and to ignore whitespace at the end of the command.\r\n\r\nI am aware that this pull request cannot be accepted in  it's current form. I am looking to gather feedback on what I have done up until now, as not to waste too much time going down the wrong path (i.e. writing documentation for the methods I added). I am also aware that this would need to be rebased against master if I were to actually add these methods.\r\n\r\nReview by @paulp, @phaller, @axel22"
1804,'','Fixes for annotations bugs.\nThis supersedes and renders irrelevant #1802.'
1803,'','SI-6375, warn on lost annotation.\nAnnotations on abstract vals which are not meta-annotated\r\nwere silently discarded. Still discarded, only less silently.'
1802,'','SI-6860, annotations accepting dummy arguments.\nThis is less than ideal:\r\n\r\n  scala> class Bippy[T] extends annotation.StaticAnnotation\r\n  defined class Bippy\r\n\r\n  scala> def f: Int @Bippy = 5\r\n  f: Int @Bippy[T]\r\n\r\n  scala>\r\n\r\nNow it says:\r\n\r\n<console>:8: error: Bippy[T] requires explicit type arguments\r\n       def f: Int @Bippy = 5\r\n                   ^'
1801,'',"SI-6829, NPE during erroneous compilation.\nHave to intercept trees which have a null type due to errors\r\nbefore they leave the warm confines of 'def typed' because from\r\nthat point everything assumes tree.tpe != null."
1800,'','SI-6860, annotations accepting dummy arguments.\nThis is less than ideal:\r\n\r\n  scala> class Bippy[T] extends annotation.StaticAnnotation\r\n  defined class Bippy\r\n\r\n  scala> def f: Int @Bippy = 5\r\n  f: Int @Bippy[T]\r\n\r\n  scala>\r\n\r\nNow it says:\r\n\r\n<console>:8: error: Bippy[T] requires explicit type arguments\r\n       def f: Int @Bippy = 5\r\n                   ^'
1799,'','Remove stray debugging output line.\nI finally reached my "CHECK THREAD ACCESS" limit.'
1798,'','Remove stray debugging output line.\nI finally reached my "CHECK THREAD ACCESS" limit.'
1797,'','uniform dealiasing and widening\nSupersedes (and retargets to master) #1789.'
1796,'',"Fixing up the mailmap.\nThe format of the mailmap was wrong, and it was not\r\naccomplishing its intended task. I fixed it, and then\r\nobsessed/compulsed over the names for a while.\r\n\r\nHere's how you can tell if you're accomplishing something\r\nwith the mailmap:\r\n\r\n% git shortlog -nse |wc -l\r\n\r\nWas 162, now 128.\r\n\r\nrebased resubmit of #1795"
1795,'',"Fixing up the mailmap.\nThe format of the mailmap was wrong, and it was not\r\naccomplishing its intended task. I fixed it, and then\r\nobsessed/compulsed over the names for a while.\r\n\r\nHere's how you can tell if you're accomplishing something\r\nwith the mailmap:\r\n\r\n% git shortlog -nse |wc -l\r\n\r\nWas 162, now 128."
1794,'','Merge 2.10.x into master.\nAnother fun-filled day at the carmergival.'
1793,'','Fix scaladoc typo for isTerm method\n'
1792,'','Stream.zip naturalsEx example does not compile => remove extra zip call\n'
1791,'',"fixing test suite on java7\nSomething must have been lost in the translation when I attempted to get the isntrumentation tests fixed. If I had wanted a side branch where the tests pass under java7, I would have made a side branch and deleted these tests. The goal was and is to see the tests pass under java7 on master. So I discovered these patches languishing in the java7 branch, and after a cursory look they seem to work on java 6 and 7, so I don't know why they're there and not here.\r\n"
1790,'',"Merge 2.10.0-wip into 2.10.x\nIt's a small merge but it would let us close #1687."
1789,'','SI-6846, regression in type constructor inference.\nIn 658ba1b4e6 some inference was gained and some was lost.\r\nIn this commit we regain what was lost and gain even more.\r\nDealiasing and widening should be fully handled now, as\r\nillustrated by the test case.'
1788,'','Implicit vars should have non-implicit setters.\nOtherwise they trigger spurious feature warnings.\r\n\r\n    scala> trait T { implicit var a: Any }\r\n    <console>:7: warning: implicit conversion method a_= should\r\n    be enabled by making the implicit value\r\n    language.implicitConversions visible.'
1787,'','SI-6803: do not use java.net.URI, even more so incorrectly.\n'
1786,'',"SI-6745 Fix <init> lookup\nWe should only consult the decls of the enclosing\r\nclass. Members of the self type, enclosing scopes,\r\nor imports should not be considered.\r\n\r\nReworked and retargeted version of #1689. The change is easier to implement and review on master after Paul's recent refactoring.\r\n\r\nReview by @paulp"
1785,'',"Fix Iterator#copyToArray (fixes SI-6827).\nAs pointed out in #scala, when using a non-zero start it's possible\r\nto get an ArrayIndexOutOfBoundsException due to an incorrect bounds\r\ncheck. This patch fixes this, as well as another potential bounds\r\nerror, and adds test cases.\r\n\r\nI'm not sure if this should go against 2.10 or what... I'm happy to resubmit somewhere else if necessary."
1784,'','Integrate isNameInScope in Contexts.\nThis was a partial implementation of symbol lookup used for\r\nshort-circuiting some expensive tests. After rescuing lookup\r\nfrom typedIdent, it should only be a wrapper around\r\nlookupSymbol (as it now is.)'
1783,'','Optimization in SpecializeTypes.\nAvoid time traveling to find type parameters which will\r\nnever be there.'
1782,'',"SI-5875 fixes free methods reification\nIt converts free methods to functions during the reification in order to\r\npass them as a value and it fixes the free methods wrapping during the\r\nreification's output compilation. review by @xeno-by @retronym."
1781,'','scaladoc Template: remove duplicate code and several usages of Option.get.\n'
1780,'','adds scala-reflect.jar to MIMA in ant\nreview @jsuereth @adriaanm '
1779,'',"Deskolemize type skolems before pickling.\nLex Spoon noticed what appeared to be duplicate symbols\r\nin methods read from classfiles. The duplicates turned out\r\nto be type skolems, which because they're not supposed to\r\nbe pickled in the first place (right?) are unpickled\r\nwithout turning back into skolems. Now pickler is careful\r\nto deskolemize before writing anything down.\r\n\r\nThe effort implied by test case is more than can possibly\r\nbe justified for this obscure compiler corner, but I'll\r\nchalk it up to reflection exploration."
1778,'','P si 6795 2.10.x\nAccidentally deleted https://github.com/scala/scala/pull/1748 before it was merged'
1777,'','update mailmap\n'
1776,'','update mailmap\n'
1775,'','scaladoc Template: remove duplicate code and several usages of Option.get\n'
1774,'','binary compatibility compensation\n- change mima configuration to compare to 2.9.2\r\n- compensate 53130d2143: keep tailMap$1/tailFlatMap$1 around\r\n- revert introduction of accessString in de82f9a04a:\r\n  accessString appeared in library but only called once for a diagnostic message'
1773,'','Eliminate unnecessary binary compatibility breaker.\naccessString appeared on library side, is only called once\r\nfor a diagnostic message. Removed it from 2.9.x branch.'
1772,'',"Remove dead code from `Global`.\nThis is clearly dead-code (`phaseTimings` is not referred\r\nanywhere else in `Global.scala`) and it's safe to remove it since\r\n`phaseTimings` is private.\r\n\r\nThis dead-code is leftover from 317a1056.\r\n\r\nReview by @paulp."
1771,'','Cleanup MemberLookup. Better explain ambiguous link targets.\nReview by @VladUreche.'
1770,'',"SI-6536 Generates super accessors X.super[Y].blah when Y is a class\nThe main change here is to add another case for generating super accessors -\r\nthe case in X.super[Y].blah when X isn't the current class and Y is a class.\r\nThe change is deliberately kept as minimal as possible to reduce the chance\r\nof breaking something in the 2.9.x line.\r\n\r\nAdditionally GenICode now detects the case when we're trying to emit\r\nbyte code that would be nonsense and warns about it. That\r\ncan safely be made an assert for 2.11.\r\n\r\nFinally a related assert in RefChecks is beefed up to output a bit more useful\r\ninformation.\r\n\r\nreview @paulp, @adriaanm"
1769,'','SI-6809 Forbids deprecated case class definitions without parameter list\nThis has been deprecated since at least 2.7.7, so it should be good to go.'
1768,'','Eliminating var-like setter tpe_= on Tree.\nDeprecated tpe_= on Tree, which is redundant with and\r\nless useful than setType. To provide a small layer of\r\ninsulation from the direct nulling out of mutable fields\r\nused to signal the typer, added def clearType() which is\r\nmerely tree.tpe = null but is shamefaced about the null\r\nand var-settings parts like a respectable method should be.'
1767,'','Moves annotationError outside typedAnnotation\nThis refactoring allows everyone from the compiler, e.g. the macro engine\r\nwhich expands annotation-emitting macros, to produce annotation errors.'
1766,'','typedIdent no longer destroys attachments\nWhen transforming Idents to qualified Selects, typedIdent used to forget\r\nabout carrying original attachments to the resulting tree. Not anymore.'
1765,'','Removing more of that which merits removal\n'
1764,'','SIP-14 backport to 2.9.x\nOther than adding the new APIs, a few changes are required:\r\n\r\n1. Build. The Java sources in "scala/concurrent/impl" need forkjoin.jar on the classpath. Thus, I replaced the "classpath" attribute in the respective `javac` ant tasks (locker.lib and quick.lib) with a "classpathref" attribute pointing to a classpath which includes also the forkjoin.jar. In the locker.lib target, exclude the duration package and everything that depends on it.\r\n\r\n   Also, the library is built with -Ydependent-method-types (for both quick & strap -- use consistent options for stability)\r\n\r\n2. Dependent method types and SI-5958. The `duration` package relies on dependent method types, and requires a backport of SI-5958 (original backport was in #1726).\r\n\r\n3. To avoid a backend bug involving `throw` expressions inside closures (exercised by the Try tests), a backport of the fix for SI-6188 is required (original backport was  in #1755).\r\n\r\nReview by @jsuereth (build)\r\n\r\n(resubmission of https://github.com/scala/scala/pull/1745)'
1763,'',"the scanner is now less eager about deprecations\nWhen healing braces it isn't very useful to report deprecation warnings,\r\nespecially since this process is just simple context-free skimming, which\r\ncan't know about what positions can accept what identifiers."
1762,'',"showRaw can now print positions\nWould be great to simply add `printPos` argument to `show` and `showRaw`,\r\nbut we're bound by binary compatibility obligations for 2.10.x."
1761,'',"SI-6692 pickle one more flag bit: EXISTENTIAL\nbefore, PickledFlags & EXISTENTIAL == 0, so that an existential symbol would\r\nlose the EXISTENTIAL bit when pickled, causing spurious incremental recompiles,\r\nas pickled information and type-checking-from-source-based information differed\r\n\r\npickling this additional bit should be a compatible change, as older versions (pre-2.9.3)\r\nwill simply mask out the extra flag bits pickled as of now (2.9.3) so that their behavior\r\nis not affected -- newer versions will see more flags, which might cause regressions,\r\nbut it's also the only way to fix SI-6692\r\n\r\nthis obviates the need to set the existential flag when unpickling an existential type's params\r\n\r\nthis is the smallest backport of a9b85dbaad and 3e2c31fbeb that I could think of\r\n\r\nas 2.9 is in maintenance mode, I don't want to invest in testing infrastructure to test the pickler,\r\nhowever, the fix is tested by the incremental compiler test 'inc-pickled-existential' in sbt\r\n\r\nreview by @paulp, still taking feasible testing-suggestions"
1760,'','Disallows formerly deprecated case class definitions without parameter list\n'
1759,'','fixes incorrect handling of Annotated in lazy copier\n'
1758,'adriaanm','When we strip tvars we should also recursively strip their instantiation...\n...s\r\n\r\nas they can be tvars as well.\r\nOtherwise our list of lub base types can be empty.\r\nAfter this fix value x3 in the test case compiles.\r\n\r\nreview by @adriaanm'
1757,'',"Merge 2.10.x into master.\nNot the world's easiest merge; please @xeno-by, @adriaan review to make sure I didn't bork something."
1756,'','SI-6799 Adds option to trace when a symbol from a list of ids is created...\n....\r\n\r\nCreate -Ytraceids-debug, a debugging aid to find out where\r\nspecified symbols are created by dumping  a stack trace.\r\nThis change also meant adding a settings type for multiple ints.'
1755,'',"SI-6188 backport (ICodeReader wrongly ignored exception handlers)\nA backport of https://github.com/scala/scala/commit/61cc8ff61c81a1276a921ad5288ee3bebea1c96e\r\n\r\nThe original fix (above) includes a test case that relies on scala.util.Success which as of this writing isn't there in 2.9.x. The test case requires a previously compiled classfile (where bytecode for an @inline method with exception handlers can be found). Ticket SI-6188 contains a self-contained example (not dependent on scala.util.Success) with _1 and _2 .scala files . Alternatively that test case could be used instead.\r\n\r\nThe backported fix (this commit) is safe in the sense that it prevents methods read by ICodeReader containing exception handlers from being inlined, even if marked @inline. Alternatively, the same effect can be achieved by annotating a method as @noinline.\r\n\r\nreview by @phaller \r\n\r\nthis PR supercedes https://github.com/scala/scala/pull/1750\r\n"
1754,'','SI-6288 Perfecting positions\nImproves the debugging experience by fixing positions of extractor calls in patterns, and of label jumps emitted by patterns.\r\n\r\nReview by @adriaanm (first commit), and @dragos (second)'
1753,'','Adds extractors for TypeName, TermName and Modifiers\nThis change allows to pattern match over type names, term names and\r\nmodifiers. Otherwise it can be quite painful to match over complex trees\r\nas each name or modifiers requires a guard.\r\n\r\nThis pull request also changes the name of default constructor for term\r\nand type names i.e. TypeName(s) instead of newTermName(s). This is\r\nshorter to type, more consistent with the rest of reflection api and\r\nconsistent with the way it will be pattern matched later on.'
1752,'','Ticket/5841\nBackport of https://github.com/scala/scala/pull/1719 into 2.10.x'
1751,'','Merge conflict resolution for #1637\n'
1750,'','SI-6188 ICodeReader notes exception handlers, Inliner takes them into account\nBackport of bugfix of SI-6188 (part of #1059) to 2.9.x.\n\nNote: this backport is required for the backport of SIP-14 (futures) to 2.9.x (#1745).\n\nReview by @magarciaEPFL'
1749,'','Fix for SI-6595, lost modifiers in early defs.\nSaw this by accident; the trees created for early defs would\nwholesale replace the modifiers with PRESUPER rather than\ncombining them. FINAL was lost that way, as would be any other\nmodifiers which might be valid there.'
1748,'','SI-6795 Adds negative check for "abstract override" on types in traits\n"abstract override" shouldn\'t was being allowed on types in traits but the result\nmade no sense and the spec says that shouldn\'t be allowed.'
1747,'',"Fixes SI-6758: force LazyAnnnotationInfo for DefDef and TypeDef\nLooks like the change in 25ecde037f22ff no longer forced\nlazy annotations for some of the cases.\nAlso removed forcing for PackageDef annotations as we currently\ndon't support them.\n\nReview by @lrytz"
1746,'',"Fix for SI-5717, crash in GenASM.\nIf there is a file in the way when generating classfiles,\nremove it and proceed. If you had wanted to keep it, you\nwouldn't have left it lying around in an output directory\nwith a name which stands between you and the filesystem.\n\nThis is too difficult to write a test for under partest."
1745,'','SIP-14 backport to 2.9.x\nOther than adding the new APIs, a few changes are required:\r\n\r\n1. Build. The Java sources in "scala/concurrent/impl" need forkjoin.jar on the classpath. Thus, I replaced the "classpath" attribute in the respective `javac` ant tasks (locker.lib and quick.lib) with a "classpathref" attribute pointing to a classpath which includes also the forkjoin.jar. In the locker.lib target, exclude the duration package and everything that depends on it.\r\n\r\n2. Dependent method types and SI-5958. The `duration` package relies on dependent method types, and requires a backport of SI-5958. This backport is available in PR #1726.\r\n\r\n3. To avoid a backend bug involving `throw` expressions inside closures (exercised by the Try tests), a backport of the fix for SI-6188 is required. It is available in PR #1750.\r\n\r\nReview by @jsuereth (build) @adriaanm (dependency on #1726)'
1744,'','SI-4922 Show default in Scaladoc for generic methods.\nWe must account for cloned symbols.\n\nReview by @VladUlreche '
1743,'',"reduce sharing between trees\nThere's a very long way to go, but this reduces the amount of tree sharing.\n\nReview by @retronym."
1742,'',"prevents spurious kind bound errors\nThe patch adds a check which makes sure that the trees we're about to\nreport aren't already erroneous."
1741,'','SI-6484 adds Universe.typeOf[T](x: T)\nThis is a nice addition to Universe.typeOf[T], quite frequently useful\nfor inspecting ad-hoc types.'
1740,'','s/SuperCallArgs/SuperArgs/\nApplies a minor renaming that I failed to thoroughly perform\nin the last pull request which refactored parent types.'
1739,'','SI-5017 Poor performance of :+ operator on Arrays\nControl performance of :+ and +: operator on my machine were 700-800 ms\r\n\r\nAfter adding size hint on the implementation in SeqLike, it went down to 500-600 ms\r\n\r\nBut with specialixed implementation in ArrayOps, brings it down to 300-400 ms\r\n\r\nUnfortunatly, this method will only be called when the Array object is being referenced directly as it\'s type, but that should be the case enough times to justify the extra method.\r\n\r\nI ended up removing the sizeHint in SeqLike because it made the execution of the "benchmark" slower when the Array was being manipulated as a Seq.\r\n\r\nSide note: Interestingly enough, the benchmark performed better on my virtualized Fedora 17 with JDK 7 than natively on Mac OS X with JDK 6\r\n\r\nReview by @axel22'
1738,'paulp',"DRYer crash reports.\n - Add the supplementary message only once per run, so we don't\n   output the same information as we bubble up through a sequence\n   of well-intentioned exception handlers.\n - In Driver, don't report message of a `FatalException`\n   immediately after reporting the message and stack trace.\n    - Rename `logThrowable` to `reportThrowable`, which is what it\n      actually does.\n\nThe difference in output is visible:\n\n  https://gist.github.com/4242138\n\nReview by @paulp.\n"
1737,'dragos','SI-6555 Better parameter name retention\nWe were losing track of parameter names in two places:\n\n  1. Uncurry was using fresh names for the apply method\n     parameters during Function expansion. (The parameter names\n     in the tree were actually correct, they just had synthetic\n     symbols with "x$1" etc.)\n  2. When adding specialized overrides, the parameter names\n     of the overriden method were used, rather than the parameter\n     names from the overriding method in the class to which we are\n     adding methods.\n\nThe upshot of this is that when you\'re stopped in the debugger in\nthe body of, say, `(i: Int) => i * i`, you see `v1` rather than `i`.\n\nThis commit changes Uncurry and SpecializeTypes to remedy this.\n\nReview by @dragos'
1736,'','Adds extractors for TypeName, TermName and Modifiers\nThis change allows to pattern match over type names, term names and\nmodifiers. Otherwise it can be quite painful to match over complex trees\nas each name or modifiers requires a guard.\n\nThis pull request also changes the name of default constructor for term\nand type names i.e. TypeName(s) instead of newTermName(s). This is\nshorter to type, more consistent with the rest of reflection api and\nconsistent with the way it will be pattern matched later on.'
1735,'','Adds extractors for TypeName, TermName and Modifiers\nThis change allows to pattern match over type names, term names and\nmodifiers. Otherwise it can be quite painful to match over complex trees\nas each name or modifiers requires a guard.\n\nThis pull request also changes the name of default constructor for term\nand type names i.e. TypeName(s) instead of newTermName(s). This is\nshorter to type, more consistent with the rest of reflection api and\nconsistent with the way it will be pattern matched later on.'
1734,'','Adds extractors for TypeName, TermName and Modifiers\nThis change allows to pattern match over type names, term names and\nmodifiers. Otherwise it can be quite painful to match over complex trees\nas each name or modifiers requires a guard.\n\nThis pull request also changes the name of default constructor for term\nand type names i.e. TypeName(s) instead of newTermName(s). This is\nshorter to type, more consistent with the rest of reflection api and\nconsistent with the way it will be pattern matched later on.'
1733,'','SI-6614 Test case for fixed ArrayStack misconduct.\nNot sure when it was fixed, but in 2.9.2 things were\nmessed up:\n\n    scala> (for (i <- 0 to 10) yield { val in = ArrayStack.tabulate(i)(_.toString); (in, (in filter (_ => true)) == in) }).mkString("\\n")\n    res14: String =\n    (ArrayStack(),true)\n    (ArrayStack(0),true)\n    (ArrayStack(0, 1),true)\n    (ArrayStack(1, 2, null),false)\n    (ArrayStack(0, 1, 2, 3),true)\n    (ArrayStack(3, 4, null, null, null),false)\n    (ArrayStack(2, 3, 4, 5, null, null),false)\n    (ArrayStack(1, 2, 3, 4, 5, 6, null),false)\n    (ArrayStack(0, 1, 2, 3, 4, 5, 6, 7),true)\n    (ArrayStack(7, 8, null, null, null, null, null, null, null),false)\n    (ArrayStack(6, 7, 8, 9, null, null, null, null, null, null),false)\n\nReview by @axel22'
1732,'','SI-6690 Release reference to last dequeued element.\nAvoids leaks in MutableList and its more better known child,\nmutable.Queue, when the last element is dequeued or when we\ntake the tail of a one element collection.\n\nRefactors copy/pasted code between the two implementations of\ntail.\n\nReview by @axel22'
1731,'','SI-5858 xml.Node construction ambiguity is gone.\nTest case to show that the fix for SI-5859 saves the day.'
1730,'',"Small cleanup work done during my initial visits to the code.\nThese are just a series of small cleanups I did while reading\nthe code base during my first few days. None are actual\nfunctionality bugs and none warrant a full blown bug. Now\nthat I'm moving on to doing real work small stuff like this will\nlikely be swept up in other bugs, so this commit just captures\nthat initial pass of stuff."
1729,'',"SI-5789 Removes assertion about implclass flag in Mixin.scala\nThe assertion that the class being mixed from should be an implclass\nseems reasonable, but the flag isn't always set. In order to stop the\nbleeding this fix turns the assertion into a debug warning. Issue SI-6782\nwill track figuring out the root cause of the missing flag."
1728,'',"SI-5789 Removes assertion about implclass flag in Mixin.scala\nThe assertion that the class being mixed from should be an implclass\nseems reasonable, but the flag isn't always set. In order to stop the\nbleeding this fix turns the assertion into a debug warning. Issue SI-5782\nwill track figuring out the root cause of the missing flag."
1727,'',"SI-6548 reflection now correctly enters jinners\nWhen completing Java classes, runtime reflection enumerates their\nfields, methods, constructors and inner classes, loads them and\nenters them into either the instance part (ClassSymbol) or the\nstatic part (ModuleSymbol).\n\nHowever unlike fields, methods and constructors, inner classes don't\nneed to be entered explicitly - they are entered implicitly when\nbeing loaded.\n\nThis patch fixes the double-enter problem, make sure that enter-on-load\nuses the correct owner, and also hardens jclassAsScala against double\nenters that can occur in a different scenario."
1726,'',"SI-5958 This deserves a stable type - backport to 2.9.x\n`this` (or the self variable) passed as an actual argument to a method\nshould receive a singleton type when computing the method's resultType\n\nthis is necessary if the method's type depends on that argument\n\nadapts the test so that it runs on 2.9.x\n\nNote: this backport is required for the backport of SIP-14 (futures).\n\nreview by @adriaanm"
1725,'','Fix for SI-6699\nBigDecimal.isValidDouble was changed and two tests have been added to test/files/run/bigDecimalTest.scala'
1724,'','Merge msil and genjvm deletions.\nThis PR merges and supersedes #1717 and #1718.'
1723,'','Concurreny in reflection api\nI am using scala in the eclipse plugin version 2.1.0.m2 and I am getting problems when using the reflection API in a concurrent setting.\n\nI have a big framework using MPJ-Express as the backend and running applications in multi-core mode. When I use the reflection api, I get random occurences of the runtime eror displayed below:\n\n\njava.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:601)\n\tat runtime.starter.MulticoreStarter$1.run(MulticoreStarter.java:289)\n\tat java.lang.Thread.run(Thread.java:722)\nCaused by: scala.reflect.runtime.ReflectError: value Predef is not a package\n\tat scala.reflect.runtime.JavaMirrors$JavaMirror.scala$reflect$runtime$JavaMirrors$$makeScalaPackage(JavaMirrors.scala:893)\n\tat scala.reflect.runtime.JavaMirrors$class.missingHook(JavaMirrors.scala:1256)\n\tat scala.reflect.runtime.JavaUniverse.missingHook(JavaUniverse.scala:12)\n\tat scala.reflect.internal.Mirrors$RootsBase.universeMissingHook(Mirrors.scala:77)\n\tat scala.reflect.internal.Mirrors$RootsBase.missingHook(Mirrors.scala:79)\n\tat scala.reflect.internal.Mirrors$RootsBase.getModuleOrClass(Mirrors.scala:48)\n\tat scala.reflect.internal.Mirrors$RootsBase.getModuleOrClass(Mirrors.scala:61)\n\tat scala.reflect.internal.Mirrors$RootsBase.staticModuleOrClass(Mirrors.scala:72)\n\tat scala.reflect.internal.Mirrors$RootsBase.staticModule(Mirrors.scala:161)\n\tat scala.reflect.internal.Mirrors$RootsBase.staticModule(Mirrors.scala:21)\n\tat it.vigtig.thesis.test.NGridTest$$typecreator2$1.apply(NGridTest.scala:103)\n\tat scala.reflect.api.TypeTags$TypeTag$.apply(TypeTags.scala:302)\n\tat it.vigtig.thesis.test.NGridTest$.testGrid(NGridTest.scala:103)\n\tat it.vigtig.thesis.test.NGridTest$$anonfun$main$1.apply$mcV$sp(NGridTest.scala:16)\n\tat it.vigtig.thesis.env.package$$anonfun$parallelize$1.apply$mcV$sp(package.scala:68)\n\tat it.vigtig.thesis.env.comm.mpj.MPJDistributorTrait$class.execute(MPJDistributorTrait.scala:17)\n\tat it.vigtig.thesis.env.comm.mpj.MPJDistributor$.execute(MPJDistributor.scala:3)\n\tat it.vigtig.thesis.env.package$.parallelize(package.scala:59)\n\tat it.vigtig.thesis.test.NGridTest$.main(NGridTest.scala:14)\n\tat it.vigtig.thesis.test.NGridTest.main(NGridTest.scala)\n\t... 6 more\n\nI am not sharing any reflection knowledge or objects between threads, so this behaviour must be a bug. The parts I am using from reflection are TypeTags and ClassTags as implicit arguments.'
1722,'','Extract base scaladoc functionality for the IDE.\nReview by @VladUreche.'
1721,'',"SI-6766 Create a continuations project in eclipse\nWe're missing a continuations dependency when we try to build reflect\nin eclipse which causes things to die horribly. This commit adds an\neclipse project for the library portion of continuations, makes\nprojects that depend on the scala-library also depend on\ncontinuations-library, and adds another bullet to the eclipse readme to\nturn on the continuations plugin.\n\nThis is a resubmit of https://github.com/scala/scala/pull/1715 to the 2.10.x branch"
1720,'','SI-6746 Fixes MANIFEST.MF package entry (s.r.makro -> s.r.macros)\n'
1719,'','SI-5841 reification of renamed imports\nAnd cleanups of reifyBoundTerm and reifyBoundType.'
1718,'','Expunged the .net backend.\nIt lives on in a branch born from this commit\'s parent.\nIt\'s abrupt; no attempt is made to offer a "smooth transition"\nfor the serious msil userbase, population zero. If anyone feels\nvery strongly that such a transition is necessary, I will be\nhappy to talk you into feeling differently.'
1717,'',"SI-6769 Removes GenJVM backend\nGet rid of GenJVM and everything that refers to it.\nAlso get rid of GenAndroid since it's dead code that refers to GenJVM.\n\nreview @paulp, @adriaanm, @jsuereth"
1716,'','Merged 2.10.0/x into master.\nArranging ducks in row before expunging msil from master.'
1715,'',"SI-6766 Create a continuations project in eclipse\nWe're missing a continuations dependency when we try to build reflect in eclipse which causes things to die horribly. This commit adds an eclipse project for the library portion of continuations, makes projects that depend on the scala-library also depend on continuations-library, and adds another bullet to the eclipse readme to turn on the continuations plugin.\n\nreviewed by @adriaanm, @dragos"
1714,'',"SI-6770 Removes unused and unusable review scripts\nDelete review and postreview.py scripts since they depend on SVN and aren't necessary under the github pull-request system."
1713,'',"SI-5894 Don't emit static forwarders for macros.\nWith a little opportunistic `Gen{AS, JV}M` duplication avoidance en-route.\n\nReview by @magarcia, /cc @paulp, @xeno-by"
1712,'','Fixing OSGi distribution.\nApparently you have to resort to all manners of awesome in ant.  Probably better to\nfilter in what you awnt to copy rather than overwrite.  So far ths works.\n\n\nReview by @lrytz or @adriaanm'
1711,'dragos','SI-1672 Catches are in tail position without finally.\nSo we can eliminate tail calls within.\n\nReview by @dragos, who once opined "I think this is safe as long as there is no `finally`".'
1710,'paulp','SI-4859 Don\'t rewrite CC().CC2() to new CC2\nWhere CC and CC2 are case classes. Attempting to do so leads to\r\na "no legal prefix" error.\r\n\r\nNow, we restrict this optimization (living in RefChecks ?!) to\r\ncase class applies with a "safe to inline" qualifier.\r\n\r\nReview by @paulp\r\n  - is `isExprSafeToInline` the right check here? I wasn\'t sure about that.\r\n  - I didn\'t go as far as adding a test to show that some rewriting still works. But via manual inspection: here\'s how the enclosed test case looks after `refchecks`.\r\n\r\n```scala\r\n  object O extends scala.AnyRef {\r\n    def <init>(): O.type = {\r\n      O.super.<init>();\r\n      ()\r\n    };\r\n    new C().CC.apply();\r\n    new D().DD.apply()\r\n  };\r\n```\r\n\r\n*Update*\r\n\r\nI also had to modify `Flatten` and `GenICode` to make sure we throw in:\r\n\r\n```scala\r\n{???; Predef}.DummyImplicit.dummyImplicit\r\n```\r\n\r\nand `DeadCodeElimination` to initialize object `Outer` in `Outer.Inner.foo`.'
1709,'adriaanm',"SI-3995 Exclude companions with an existential prefix.\nIn `(qual: Q).apply(expr)` where `expr` must be implictily\nconverted to a path dependent type `T` defined in `qual`,\nwe were looking for companion implicits via a path prefixed\nby an existential skolem `_1`. These aren't much good to us,\nas when we try to feed them into `mkAttributedQualifer`, a\ncrash rightly ensues.\n\nThis commit excludes companions prefixed by an existentially\nbound path.\n\nReview by @adriaanm"
1708,'','SI-6766 Makes the eclipse config for the library project use "scala" as ...\n...the source path\n\nThe .classpath and .project files need to point to the "scala" subdirectory not the non-existent "library" subdirectory.'
1707,'adriaanm','SI-5390 Detect forward reference of case class apply\nRefchecks performs (among others) two tasks at once:\n\n  - detecting forward references\n  - translating `qual.Case(...)` to `new qual.Case(...)`\n\nAs is often the case with such multi-tasking tree traversals,\ncompletion of one task precluded the other.\n\nReview by @adriaanm\n\nOne question: should this also be a forward reference?\n\n```scala\nclass A {\n  case class B[A](s: String)\n}\n\nobject X {\n  def foo {\n    val a = new A\n    val b = new a.B[c.type]("")\n    val c = ""\n  }\n}\n```'
1706,'adriaanm','SI-5361 Avoid cyclic type with malformed refinement\nThe statement `val x = this` in the refinment type:\n\n    (new {}): {val x = this}\n\nis lazily typechecked, in order to, according to the comment\nin `typedRefinment, "avoid cyclic reference errors".\n\nBut the approximate type used ends up with:\n\n    Refinment@1(\n      parents = [...]\n      decls = { val x: Refinement@1 })\n\nThis commit eagerly checks that there is no term definitions\nin type refinments, rather than delaying this.\n\nThis changes the error message for SI-3614.\n\nReview by @adriaanm'
1705,'','Warn when generated classfiles differ only in case.\nWe should most likely prohibit it completely, but warning\nis a start.'
1704,'adriaanm',"Fix for rangepos crasher.\nwrapClassTagUnapply was generating an unpositioned tree\nwhich would crash under -Yrangepos.  See SI-6338 / SI-6754\n\nReview by @adriaanm (I've bumped this to a 2.10.0 blocker\nafter the reports or problems in the IDE with Akka.)\n\nCherry-pick from #1447."
1703,'adriaanm','SI-6528 Avoid loop in getClassParts.\nCarefully crafted types can lead to an endless stream of\ndistinct parts, differing only in different instantiations\nof an abstract type.\n\nThis commit substitutes abstract types with their upper bounds\nbefore determining if a type has already been seen.\n\nReview for correctness, completeness, and performance by @adriaanm.'
1702,'','tests for idempotency issues in the typechecker\nFor more details see https://issues.scala-lang.org/browse/SI-5464.\n\nCheck files are intentionally very precise, so that we can monitor\nhow the situation changes over time.'
1701,'paulp','SI-5877 Support implicit classes in package objects\nThis used to crash, as both the package and the package object\nhad the synthetic method in `decls`, and the typer tried to add\nthe tree to both places.\n\nNow, synthetics in the package object are excluded from the pacakge\nitself.\n\nReview by @paulp'
1700,'paulp','SI-6535 Step back from the precipice of a cycle\nAdding any non-local parent to WrapAsScala will trigger a valid\ncyclic reference error. By moving the import of `Wrapper._`\ninside `WrapAsScala` and `WrapAsJava`, it is not in scope when\ntyping the parents of those, and we avoid the cycle.\n\nAdds a test case to show the essense of the promiscious mutual\nimports that triggers this.\n\nReview by @paulp'
1699,'paulp','SI-6549 Improve escaping in REPL codegen.\n- Escape the LHS of an assign when printing results\n   - e.g. X("").foo = bar\n - Escape val names\n   - e.g. val `"` = 0`\n\nReview by @paulp'
1698,'',"scala-doc search should be improved\nCurrently, it's nothing more but a ^F with slight filtering. Much more could be done with it, e.g. matching members over all classes or matching types of all function arguments (aka which function takes class X as argument)."
1697,'paulp',"Don't return unimportables from importedSymbol.\nHardening against the symptom of SI-6745, which yielded:\n\n    wat.scala:4: error: too many arguments for constructor Predef: ()object Predef\n      def this() = this(0)\n               ^\nThe fix for the underlying problem in that bug\nhas been targetted at branch 2.10.x.\n\nReview by @paulp.\n\nI was tempted to add a `devWarning` for this one, but before I did that I would need to check if we hit that code path under non-warnable circumstances."
1696,'odersky','SI-6135 SI-6443 Bridges for dependent method types\nBridge building operates on unusual method signatures:\nafter uncurry, so parameter lists are collapsed; but before\nerasure, so dependently typed parameters are still around.\n\nOriginal:\n\n    def foo(a: T)(b: a.type, c: a.U): Unit\n\nDuring computeBridges:\n\n    (a: T, b: a.type, c: a.U)Unit\n\nThis signature no longer appears to override the corresponding\none in a superclass, because the types of `b` and `c` are dependent\non method parameters.\n\nThis commit instead checks for overriding pairs with fully\ncurried signatures, such as:\n\n    (a: T)(b: a.type)(c: a.U)Unit\n\nExisting logic in [`matchesQuantified`](https://github.com/retronym/scala/blob/8e8aa4b1d/src/reflect/scala/reflect/internal/Types.scala#L6175), a local method in\n`matchesType`, then correctly substitutes the superclass signature\nparameter symbol into the subclass signature.\n\nReview by @odersky'
1695,'dragos','SI-6751 macroContext factory is now public\nIn order to make macro contexts customizable by the embedding environment\nsuch as an IDE.\n\nThe motivation for this commit was a request to expose an IDE-friendly\ndebug log API for macros. With macroContext being overridable (see the\ninstructions in the comments), we can recommend people to use c.info\nand then the IDE could override it and present it conveniently.'
1694,'jsuereth',"SI-6742 undeprecates certain manifest methods\nMakes sure all manifest-related (but not classmanifest-exclusive) APIs\nare undeprecated in 2.10. Let's hope we'll get them deprecated back\nagain in 2.11."
1693,'','Name implicit removal\nReview by @xeno-by'
1692,'','SI-6547: elide box unbox pair only when primitives match\nThis is a retargeted submission of #1533; re-review by @VladUreche.'
1691,'','SI-6558: typecheck lazy annotation info using non-silent context\nResubmitting #1531 to `2.10.x`.\n\nPatch by @hubertp, LGTM, with the extra test cases I added to the PR.\n\nReview by @lrtyz'
1690,'','SI-6631 Handle invalid escapes in string interpolators\nPatch contributed by Rex Kerr.\n\nReview by @paulp'
1689,'adriaanm','SI-6745 Skip refinements in the search for <init>\nThese arise in the base class sequence when a self type\nis annotated. This prevented an auxillary constructor from\ncalling the primary constructor.'
1688,'',"SI-6754 Position ClassTag based unapply\nRange Positions didn't take kindly to it.\n\n======= Position error\nUnpositioned tree #483\n   unpositioned [L  -1 P#  484] #483    [NoPosition]    UnApply    // UnApply\n      enclosing [L   7        ] #484    [261:291]       CaseDef    // ru.TypeRef(_, _, args) => args;\n        sibling [L  -1 P#  484] #483    [NoPosition]    UnApply    // UnApply\n        sibling [L   7 P#  484] #79     [287:291]       Ident      // args;\n\nReview by @adriaanm. I've targetted this at 2.10.x. What is the impact of range pos errors on the IDE for 2.10.0?"
1687,'','fixes the unchecked warning in quick.comp\nAll those months when I thought it was yet another spurious error\nin the new pattern matcher...'
1686,'','Ticket/6685\n'
1685,'','Ticket/6685\nFollow-up for #1684'
1684,'','Fix for SI-6685, stack overflow in sbt.\nThis is the worst offense against engineering I have ever had a\nhand in. I feel like showering with lye. "How could you do it?"\nmy grandchildren will ask me. And what will I tell them? "I was a\nvictim too," I\'ll sob. "You weren\'t there! YOU CAN\'T KNOW WHAT IT\nWAS LIKE!" After that I will only be able to cast my eyes downward\nand hope they are able to lead better lives than I was.\n\nLeaving the test case for mr. "exception during macro expansion"\nwhile I go door to door looking for anyone willing to lobotomize me\nat this hour.'
1683,'',"Fix for integer types' bitwise right shift docs\nCurrently in 2.10, all integer Types (Byte, Char, Short, Int and Long) have the same small mistake in the docs in the part about the `>>` operator:\n\n### Current:\nReturns this value bit-shifted **left** by the specified number of bits,\nfilling in the **right** bits with the same value as the left-most bit of this.\n\n### Should be:\nReturns this value bit-shifted **right** by the specified number of bits,\nfilling in the **left** bits with the same value as the left-most bit of this.\n\nNo tests were written, since this commit changes only comments."
1682,'','Asserts about Tree qualifiers.\nEncoding recent revelations about certain tree invariants\nin the form of asserts.'
1681,'','Fix for SI-6731, dropped trees in selectDynamic.\nI rewrote mkInvoke entirely, and boosted the test coverage.'
1680,'','Fix typo in documentation for Seq\nReview by @axel22'
1679,'','Add convenience attribute operator to NodeSeq\nCompared to the current method of reading the string text of an attribute:\n\n```\n(x \\ "@bar").text\n```\n\n...the new operator removes the need for a pair of parenthesis and shortens the overall expression by 7 chars :\n\n```\nx \\@ "bar"\n```\n\n\n\nDiscussion on scala-internals:\n\nhttps://groups.google.com/d/topic/scala-internals/BZ-tfbebDqE/discussion\n\nReview by @phaller'
1678,'','SI-5753 macros cannot be loaded when inherited from a class or a trait\nenclClass should be taken from Tree otherwise we can jump to declaration\nclass/trait.'
1677,'','SI-5678 Bad return type for [Use Case] docs in Range\nMany [Use Case] doc tags in Range such as the one associated to the union method document that the method returns a Range which is just plain false.\n\nExample:\n\nval ran1 = Range(1,3)\nval ran2 = Range(54, 57)\nval result = ran1.union(ran2) // This is a perfectly valid use case yet obviously cannot be represented as a Range\n\nReview by @axel22'
1676,'paulp','Adds a margin stripping string interpolator.\nJust for compiler internal use for now, despite some interest in a wider release on scala-internals. Let\'s take it for a spin internally before releasing it to the world.\n\nUnlike the previous incarnation, this now emulates `raw""` semantics -- string escape sequences are not processed. It doesn\'t make sense to use this interpolator with single quoted strings, so I think that\'s the correct way to go here.\n\nReview by @paulp'
1675,'odersky','SI-6667 Abort after any ambiguous in-scope implicit\nRather than continuing on to a search of implicits\nof the expected type.\n\nPreviously, the companion implicits were searched if the\nthe caller was running the implicit search in silent\nmode, for example if searching for an implicit parameter\nin an application which has an expected type.\n\nAfter this commit, the behaviour is consistent, regardless\non silent/non-silent typing.\n\nResubmission of #1659\n\nReview by @odersky\n\n/cc @xeno-by, who can perhaps shed light on why when I tried to shield `materializeImplicit` behind the same condition I got:\n\n```\nticket/6667 ~/code/scala ./test/partest test/files/run/macro-expand-tparams-prefix-c1 || cat test/files/run/macro-expand-tparams-prefix-c1-run.log \n\nTesting individual files\ntesting: [...]/files/run/macro-expand-tparams-prefix-c1               [FAILED]\n1 of 1 tests failed (elapsed time: 00:00:02)\nImpls_1.scala:7: error: ambiguous implicit values:\n both value V of type c.WeakTypeTag[V]\n and value T of type c.WeakTypeTag[T]\n match expected type c.WeakTypeTag[T]\n    c.Expr(Block(List(\n          ^\n```'
1674,'','SI-6718 fixes a volatile test\nreview @retronym @magarciaEPFL'
1673,'',"Fix for SerialVersionUID instability.\nCan hardly believe this has been broken for a decade or so, but\nthere it is - see test case. Four classes attempt to set their\nSerialVersionUID to 13. One succeeds. No warnings or errors. The\noutput before this patch (for me anyway - your random numbers may\ndiffer) was:\n\n  860336111422349646\n  13\n  8409527228024057943\n  -7852527872932878365\n\nThere was already code in place for rejecting annotations\nwith non-constant args when constant args are required, but\nthat check is only performed on ClassfileAnnotations, and\nSerialVersionUID was a StaticAnnotation. Maybe people don't\nreach for ClassfileAnnotation because of this giant warning\nwhich I see no way to suppress:\n\n  warning: Implementation restriction: subclassing Classfile does\n  not make your annotation visible at runtime. If that is what you\n  want, you must write the annotation class in Java.\n\nWhy did I change the name of the field from uid to value?\nIf you don't use the name 'value', you have to name the argument\nevery time you use it, even if it's the only parameter. I didn't\nrelish breaking every usage of scala's @SerialVersionUID in the\nknown universe."
1672,'','SI-4664 Make scala.util.Random Serializable\nreview by @phaller'
1671,'',"SI-6415 avoid early evaluation in some Stream's methods\nThe lengthCompare method in LinearSeqOptimized was looking one step further\nthan it needed to in order to give the correct result, which was creating some\nunwanted side effects related to Streams.\n\nAdd test case to expose the problem and a few test cases to ensure correctness of LinearSeq.lengthCompare() method.\n\nhttps://issues.scala-lang.org/browse/SI-6415\n\nReview by @axel22"
1670,'','Fix for SI-6712, bug in object lifting.\nReview by @retronym'
1669,'',"Updated asm to 4.1.\nReleased 2012-10-14. One of the listed features is\n\n  316321: asm osgi bundles based on BND.\n\nin case that's interesting to anyone."
1668,'','refactors handling of parent types\nAt the moment parser does too much w.r.t handling of parent types.\nIt checks whether a parent can have value arguments or not and\nmore importantly, it synthesizes constructors and super calls.\n\nThis approach is fundamentally incompatible with upcoming type macros.\nTake for example the following two snippets of code:\n\n  `class C extends A(2)`\n  `class D extends A(2) with B(3)`\n\nIn the first snippet, `A` might be a type macro, therefore the super call\n`A.super(2)` eagerly emitted by the parser might be meaningless. In the\nsecond snippet parser will report an error despite that `B` might be\na type macro which expands into a trait.\n\nUnfortunately we cannot simply augment the parser with the `isTypeMacro`\ncheck. This is because to find out whether an identifier refers to a type\nmacro, one needs to perform a typecheck, which the parser cannot do.\n\nTherefore we need a deep change in how parent types and constructors\nare processed by the compiler, which is implemented in this commit.'
1667,'','introduces -Yignore-crashes\nQuite useful when prototyping significant changes in the compiler\nand not wanting to expose oneself to huge crash messages.'
1666,'','Flag pattern matcher synthetics as synthetic.\n'
1665,'','Fix for SI-6687, wrong isVar logic.\nFields which back lazy vals need to be excluded via !isLazy\nlest isVar return true.'
1664,'','Merge 2.10.x into master.\n'
1663,'','Merge 2.10.0-wip into 2.10.x.\n'
1662,'','Fix for SI-6706, Symbol breakage under GC.\nEnsure the map key and the String in the Symbol are the\nsame reference by removing the old key before updating the\nmap with the new key -> symbol relation.'
1661,'','2.9.x\nSI-6688 - fsc client now listens on the loopback interface rather than the public interface.'
1660,'','SI-6023 reify abstract vals\nResubmission of https://github.com/scala/scala/pull/1658 against 2.10.x'
1659,'retronym',"SI-6667 Abort after any ambiguous in-scope implicit\nRather than continuing on to a search of implicits\nof the expected type, which used to happen if\nthe caller was running the implicit search in silent\nmode.\n\nI've discussed the change with @odersky.\n\nReview of the implementation by @adriaanm\n\n/cc @xeno-by: Note that tag generation is also now\nuniformly suppressed after any ambiguity error."
1658,'','SI-6023 reify abstract vals\n SI-6023 reify abstract vals\n\nType trees created by MethodSynthesis for abstract val getters carry symless originals,\nwhich are unusable for reification purposes\n(or the result of reification will be unhygienic).\n\nTo combat this, type trees for such getters are now created empty,\ni.e. without any `tpe` set, just having an original assigned.\nSubsequent `typedTypeTree` invocations fill in the `tpe` and\nupdate the original to be symful.'
1657,'',"SI-6415 avoid early evaluation in some Stream's methods\nThe lengthCompare method in LinearSeqOptimized was looking one step further\nthan it needed too in order to give the correct result, which was creating some\nunwanted side effects related to Streams.\n\nhttps://issues.scala-lang.org/browse/SI-6415\n\nReview by @axel22"
1656,'','Removing controversial `either` method from Futures API.\n* Removes `either` from Future\n* No tests need to change, since this was an untested method.\n\n\nReview by @phaller'
1655,'paulp','Margin stripping interpolator\nReview by the originator of the idea, @paulp'
1654,'','SI-6696 removes "helper" tree factory methods\nAs experience shows, these methods can easily be a source of confusion\nfor the newcomers: https://issues.scala-lang.org/browse/SI-6696.\n\nI\'m only leaving the `TypeTree(tp)` factory, since the facility to\nset underlying types for type trees is not exposed in the public API,\nas it\'s inherently mutable.'
1653,'jsuereth','SI-6695 Test case for fixed Array match bug\nAlready fixed for 2.10.0 by virtpatmat.\n\nReview by @jsuereth'
1652,'','findEntry implementation code more concise and DRYer.\nAs suggested by Daniel Sobral as a side note on the following issue.\n\nhttps://issues.scala-lang.org/browse/SI-4796?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\n\nA DRYer implementation of findEntry() and containsEntry() in FlatHashTable that does not compromise for performance.\n\nreview by @adriaanm, @jsuereth'
1651,'',"eclipse project files are now in src/eclipse\nTo use these project files you need to define the Eclipse 'path variable'\nSCALA_BASEDIR, in General/Workspace/Linked Resources.\n\nsee src/eclipse/README.md for more info\n\nbackport to 2.9.x of fd6573a2ce ceb095362b 98a5714fed 49169e2123 64f05974c7 27aaaa4fce\n\nreview by @dragos"
1650,'',"Now the test suite runs MIMA for compatibility testing.\nFailures are still not reported, thanks to MIMA not returnign non-0 exit codes on failure.  I'll be patching MiMA seprately, but at least\nthis will let us deal with failures in scala.   Currently, we need to adapt the Vector speed improvements for binary compatibility.\n\nReview by @retronym"
1649,'','Factoring out common code between findEntry() and containsEntry() in FlatHashTable\nAs suggested by Daniel Sobral as a side note on the following issue.\n\nhttps://issues.scala-lang.org/browse/SI-4796?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\n\nA DRYer implementation of findEntry() and containsEntry() in FlatHashTable that does not compromise for performance.'
1648,'','Removing unused code, take 2.\nIncorporating knowledge of what failed on the first attempt. The list of failures probably looked like a lot more than it was; only five methods were implicated, but some were called a lot. This PR restores those methods and marks them as externally used until we have a more permanent mechanism for assuring their survival.\n\nReview by @dotta (confirmation that everything builds against this would be very helpful.)'
1647,'',"Fix for SI-6357, cycle with value classes.\nDon't force the owner info.\n\n[backport of #1626, review by @paulp]"
1646,'','Re SI-6688\nCompileClient now connects by default to the "localhost/127.0.0.1" interface rather than the public external facing local interface.'
1645,'','SI-6673 fixes macro problems with eta expansions \nReincarnation of https://github.com/scala/scala/pull/1639, resubmitted to target 2.10.x.'
1644,'','Restore the opimization apparently lost after merge.\nReview by @VladUreche '
1643,'odersky','SI-6677 Insert required cast in `new qual.foo.T`\nShort version: we sometimes need to rewrite this as:\n\n    new T(qual.asInstanceOf[OwnerOfFoo].foo)\n\nLong version:\n\n`adaptMember` in Erasure performs a few tasks, among them:\n\n1. adding an empty argument list qualifiers in `new qual.T`\n    for which `qual` is a val template member that has\n    (post uncurry) a MethodType with an empty parameter list.\n\n    The same rewriting was already applied in uncurry for such\n    qualifiers appearing in other context, e.g. `qual.foo` was\n    already rewritten to `qual().foo`.\n2. casting, if necessary, the qualifier in `Select(qual, name)`\n    to the type of owner of the symbol that this selection\n    references.\n\n    This can be neccesary with compound types:\n     - some val class member has type `A with B`;\n     - we instantiate `new ab.valMemberOfB.T`\n     - we must pass `ab.valMemberOfB` to the constructor of `T`\n       as the `$outer` pointer\n     - we must cast `ab` to `B` before calling `valMemberOfB`.\n\n    Failure to insert this cast can lead to a LinkageError or\n    a VerifyError.\n\nHowever, if 1) was performed, 2) was not.\n\nThe error is pretty easy to trigger with the new reflection\nAPI:\n\n    class Test {\n      val cm: reflect.runtime.universe.Mirror\n          = reflect.runtime.currentMirror\n      def error {\n        new cm.universe.Traverser // java.lang.VerifyError\n      }\n\n      def okay1 {\n        val cm: reflect.runtime.universe.Mirror = reflect.runtime.currentMirror\n        new cm.universe.Traverser\n      }\n    }\n\nThe fix applied here to `adaptMember` mirrors the existing\nimplementation of `adaptType`.\n\nReview by @odersky'
1642,'','make classOf into a macro\nReview by @xeno-by'
1641,'','Scaladoc update for collection.mutable.MultiMap\nAddition of source code example on how to use a MultiMap and its\ndefined methods. Minor correction in documentation for method\n`removeBinding`.'
1640,'','Added -Xdev setting... you know, for devs\nA setting we developers can give all the time and expect to\nhear useful things without being buried in debugging output.\nAs the comment says:\n\n  This is for WARNINGS which should reach the ears of scala\n  developers whenever they occur, but are not useful for normal\n  users. They should be precise, explanatory, and infrequent. Please\n  don\'t use this as a logging mechanism. !!! is prefixed to all\n  messages issued via this route to make them visually distinct.\n\nThis is what I always intended for "debugwarn", the method\nI have deprecated in favor of the more accurate:\n\n  def devWarning(msg: => String): Unit\n\nIn this VERY SAME COMMIT, I performed the CLOSELY RELATED\ntask of quieting down an -Xlint warning which had become too\nnoisy thanks to implicit classes tickling it. I tightened that\nwarn condition to include both -Xlint and -Xdev.'
1639,'',"SI-6673 fixes macro problems with eta expansions\nEta expansions previously caused the typer to disable macros. That was\ndone in order to detect eta expansion of macro defs and show the user\nan appropriate error message.\n\nMacros were disabled because to find out whether we're expanding\na macro def, we need to get its symbol, and to get a symbol of something\nwe need to typecheck that something. However typechecking automatically\nexpands macros, so, unless we disable macros, after a typecheck we won't\nbe able to analyze macro occurrences anymore.\n\nUnfortunately this solution has a fatal flaw. By disabling macros we\nnot only prevent the eta-expandee from macro expanding, but also all\nthe subtrees of that eta-expandee (see SI-6673).\n\nThis commit adds a mechanism for fine-grained control over macro\nexpansion. Now it's possible to prohibit only the node, but not its\nchildren from macro expanding."
1638,'','SI-6624 better lookup of case field accessors for case class pattern with complicated type\n(I need to run, but wanted to let the bot build this already -- will assign reviewer etc ASAP)'
1637,'',"Javap for Java 7 (Fixes SI-4936)\nAdd support for reflective invocation of javap under jdk7,\r\nusing the quasi-javax.tools API.\r\n\r\nUnder -Ygen-javap, warn if you can't.\r\n\r\nSince JAVA_HOME is used to locate tools.jar, the script is\r\nupdated to convert it for cygwin.\r\n\r\nUpdate Javap for simpl repl.\r\n\r\nAlso, reduce clutter of JavaxTools as suggested.\r\n\r\nJavapTool7 evades repl truncating if enabled; the truncating PrintWriter\r\nis not line-oriented but string-oriented.\r\n\r\nReview by @paulp"
1636,'','Fixes SI-6628, Revert "Fix for view isEmpty."\nThis reverts commit caf7eb6b56817fd1e1fbc1cf017f30e6f94c6bea.\n\nI don\'t have a better idea right now than wholesale reversion.'
1635,'',"Fix for overly eager package object initialization.\nA subtle change in the order in which symbol attributes were\ninspected (now you know why I avoid vals in the compiler) led to a\ncycle during initialization for slick. I'm afraid I don't know how\nto reproduce the issue outside of slick and sbt, so I added some\nlogging instead.\n\nAfter some challenges juggling general correctness and cycle\navoidance, I resorted to improving and documenting the logic\nas well. I predict reviewer will be pleased."
1634,'','Scaladoc update for collection.mutable.MultiMap\nAddition of source code example on how to use a MultiMap and its\r\ndefined methods. Minor correction in documentation for method\r\n`removeBinding`.\r\n\r\nThis is my first PR to scala-library, please tell me if I can do something better.\r\n\r\nFor possible future PRs, shall I assign documentation updates to specific people?'
1633,'','Added -Xdev setting... you know, for devs\nA setting we developers can give all the time and expect to\r\nhear useful things without being buried in debugging output.\r\nAs the comment says:\r\n\r\n  This is for WARNINGS which should reach the ears of scala\r\n  developers whenever they occur, but are not useful for normal\r\n  users. They should be precise, explanatory, and infrequent. Please\r\n  don\'t use this as a logging mechanism. !!! is prefixed to all\r\n  messages issued via this route to make them visually distinct.\r\n\r\nThis is what I always intended for "debugwarn", the method\r\nI have deprecated in favor of the more accurate:\r\n\r\n  def devWarning(msg: => String): Unit\r\n\r\nIn this VERY SAME COMMIT, I performed the CLOSELY RELATED\r\ntask of quieting down an -Xlint warning which had become too\r\nnoisy thanks to implicit classes tickling it. I tightened that\r\nwarn condition to include both -Xlint and -Xdev.'
1632,'','Fix bug in partest-ack.\nUnfortunate bug was making it far less useful than it was\r\nsupposed to be. Now it really does look in scala/check/flags\r\nfiles, here are examples of things which work:\r\n\r\n  % tools/partest-ack "input ended while parsing XML"\r\n  Found 6 tests matching \'ack input ended while parsing XML\'\r\n\r\n  % tools/partest-ack Xlint\r\n  Found 11 tests matching \'ack Xlint\'\r\n\r\n  % tools/partest-ack -- -language:experimental.macros\r\n  Found 143 tests matching \'ack -- -language:experimental.macros\'\r\n\r\n  % tools/partest-ack @unchecked\r\n  Found 13 tests matching \'ack @unchecked\''
1631,'',"Lower confusion levels in typedApply.\nIt's the usual thing, making logic more logical and removing\r\ncomments which are incorrect and/or no longer useful."
1630,'',"Fix Documentation Typo\nThere was a typo on the if.\r\n\r\nI also thought it might be worth rephrasing the paragraph because it seemed a bit contrived.\r\n\r\nIt's a trivial fix, but it would allow us to close a bug in the issue tracker which seems worthwhile to me."
1629,'',"Error for SI-6355, overloading of applyDynamic.\nAs long as it can never be called anyway, seems like we'd be\r\ndoing people a kindness to fail the compile rather than letting\r\nit be ambiguous at every use site.\r\n\r\nAlso quieted down currently noisy -Xlint warning."
1628,'','Fixes SI-6150 - backport to 2.10.x branch.\nBackporting https://github.com/scala/scala/pull/1150 to 2.10.x.\r\n\r\nReview by @paulp and/or @jsuereth.\r\n\r\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/669/console'
1627,'',"Fix for SI-6664, cycle in case classes.\nScope lookup of an overloaded symbol was accidentally\r\nforcing some lazy info. Since as usual the caller didn't\r\neven have any interest in the symbol, but only in whether\r\nthe name existed at all, I changed it call the method I\r\nmade for this exact purpose, containsName. Also I much\r\nreduced the number of checks being made in the quest for\r\nan inherited copy method."
1626,'',"Fix for SI-6357, cycle with value classes.\nDon't force the owner info."
1625,'',"Fix for overly eager package object search.\nA subtle change in the order in which symbol attributes were\r\ninspected (now you know why I avoid vals in the compiler) led to a\r\ncycle during initialization for slick. I'm afraid I don't know how\r\nto reproduce the issue outside of slick and sbt, so I added some\r\nlogging instead."
1624,'',"SI-5330, SI-6014 deal with existential self-type\n[backport to 2.10.x of #1622]\r\n\r\nThis has been broken since https://github.com/scala/scala/commit/b7b81ca2#L0L567.\r\nThe existential rash is treated in a similar manner as in fc24db4c.\r\n\r\nConceptually, the fix would be `def selfTypeSkolemized =\r\nwiden.skolemizeExistential.narrow`, but simply widening before\r\nnarrowing achieves the same thing. Since we're in existential voodoo\r\nterritory, let's go for the minimal fix: replacing `this.narrow` by\r\n`widen.narrow`.\r\n\r\n--\r\nOriginal patch by @retronym in #1074, refined by @paulp to\r\nonly perform widen.narrow incantation if there are\r\nexistentials present in the widened type, as\r\nnarrowing is expensive when the type is not a singleton.\r\n\r\nThe result is that compiling the entirety of quick, that\r\ncode path is hit only 143 times.  All the other calls hit\r\n.narrow directly as before.  It looks like the definition\r\nof negligible in the diff of -Ystatistics when compiling\r\nsrc/library/scala/collection:\r\n\r\n    < #symbols                      : 306315\r\n    ---\r\n    > #symbols                      : 306320\r\n    12c13\r\n    < #unique types                 : 293859\r\n    ---\r\n    > #unique types                 : 293865\r\n\r\nI'm assuming based on the 2/1000ths of a percent increase\r\nin symbol and type creation that wall clock is manageable,\r\nbut I didn't measure it."
1623,'',"Merge 2.10.0-wip/.x into master\nA little more eagerly than usual because I'm trying to hunt down regressions and it's easier when there's a common history."
1622,'',"SI-5330, SI-6014 deal with existential self-type\nThis has been broken since https://github.com/scala/scala/commit/b7b81ca2#L0L567.\r\nThe existential rash is treated in a similar manner as in fc24db4c.\r\n\r\nConceptually, the fix would be `def selfTypeSkolemized =\r\nwiden.skolemizeExistential.narrow`, but simply widening before\r\nnarrowing achieves the same thing. Since we're in existential voodoo\r\nterritory, let's go for the minimal fix: replacing `this.narrow` by\r\n`widen.narrow`.\r\n\r\n--\r\nOriginal patch by @retronym in #1074, refined by @paulp to\r\nonly perform widen.narrow incantation if there are\r\nexistentials present in the widened type, as\r\nnarrowing is expensive when the type is not a singleton.\r\n\r\nThe result is that compiling the entirety of quick, that\r\ncode path is hit only 143 times.  All the other calls hit\r\n.narrow directly as before.  It looks like the definition\r\nof negligible in the diff of -Ystatistics when compiling\r\nsrc/library/scala/collection:\r\n\r\n    < #symbols                      : 306315\r\n    ---\r\n    > #symbols                      : 306320\r\n    12c13\r\n    < #unique types                 : 293859\r\n    ---\r\n    > #unique types                 : 293865\r\n\r\nI'm assuming based on the 2/1000ths of a percent increase\r\nin symbol and type creation that wall clock is manageable,\r\nbut I didn't measure it."
1621,'',"Si 6663 2.10.x fix type parameter on selectDynamic\nThe first commit fixes the bug reported in [SI-6663](https://issues.scala-lang.org/browse/SI-6663), the second one another similar case as noted in [a comment](https://issues.scala-lang.org/browse/SI-6663?focusedCommentId=60935&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-60935) on that bug report.\r\n\r\nI'd guess that there are other possible contents of cxTree not yet handled. Is there a better way to fix this than to add all such cases manually to mkInvoke?\r\n\r\nSame as [pull request 1619](https://github.com/scala/scala/pull/1619), but targeted at 2.10.x, as requested by @retronym.\r\n\r\nReview by @namin (also requested by @retronym)\r\n\r\n"
1620,'',"Fixes SI-6551.\nDon't rewrite an explicit apply method to dynamic polytypes."
1619,'',"Fix for SI-6663\nThe first commit fixes the bug reported in [SI-6663](https://issues.scala-lang.org/browse/SI-6663), the second one another similar case as noted in [a comment](https://issues.scala-lang.org/browse/SI-6663?focusedCommentId=60935&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-60935) on that bug report.\r\n\r\nI'd guess that there are other possible contents of cxTree not yet handled. Is there a better way to fix this than to add all such cases manually to mkInvoke?"
1618,'',"Fix for SI-6662, macro failing too early.\nDon't give up before you try tupling. Who knows what\r\nsomeone might be doing with a Unit."
1617,'',"Fix for SI-6662, macro failing too early.\nDon't give up before you try tupling. Who knows what\r\nsomeone might be doing with a Unit."
1616,'','SI-6559 Fix raw string interpolator: string parts which were after the first argument were still escaped\nReview by @jsuereth\r\n\r\nOnly touches new code.\r\n\r\nBackport from master.'
1615,'',"SI-6648 copyAttrs must preserve TypeTree#wasEmpty\nThis field tracks whether the type is an inferred\r\none, subject to removal in `resetAttrs`, or an explicit\r\ntype, which must remain.\r\n\r\nIn ae5ff662, `ResetAttrs` was modified to duplicate\r\ntrees, rather than mutate trees in place. But the\r\ntree copier didn't pass `wasEmpty` on to the new tree,\r\nwhich in turn meant that the subsequent typing run\r\non the tree would not re-infer the types. If the\r\ntype refers to a local class, e.g. the anonymous\r\nfunction in the enclosed test case, the reference\r\nto the old symbol would persist.\r\n\r\nThis commit overrides `copyAttrs` in TypeTree to\r\ncopy `wasEmpty`.\r\n\r\nWe might consider representing this as a tree\r\nattachment, but this would need to be validated\r\nfor the performance impact.\r\n\r\nReview by @lrytz"
1614,'','SI-6661 - Remove obsolete implicit parameter of scala.concurrent.promise method\nReview by @axel22 '
1613,'','Address obvious bug in MutableSettings.\nIf x startsWith "-" it seems unlikely that x == "".\r\nFree with purchase: test case with 100 argument permutations.\r\nThat\'s only a smidgen shy of infinity.'
1612,'','sane printing of renamed imports\nHaving a select named "foo" with an underlying symbol named "bar"\r\nand trying to make sense of all that by prettyprinting is very confusing'
1611,'','Removing unused code.\nWill add some details in email.'
1610,'','better error when typetagging local classes\nInspired by https://issues.scala-lang.org/browse/SI-6649'
1609,'',"-Yshow-trees-compact respects other options\nThe aforementioned tree printer now respects other tree printing\r\noptions such as -uniqid and -Xprint-types.\r\n\r\nThis helps debugging reify, which uses `nodePrinters`, not `showRaw`\r\nto print its trees, because back then `showRaw` didn't exist yet."
1608,'','SI-6644 Account for varargs in extmethod forwarder\nWhich sounded difficult, so instead I offshored the work\r\nto the friendly republic of `TreeGen`.\r\n\r\nReview by @paulp for content, @jsuereth for merge target.\r\n\r\nIt doesn\'t seem different from the multitude of prior "value classes + X\r\nare broken" bugs that blocked earlier RCs.'
1607,'','SI-6640 Better reporting of deficient classpaths.\nIn a55788e, StubSymbols were introduced to fail-slow when\r\nthe classpath was deficient. This allowed compilation to\r\nsucceed in cases when one didn\'t actually use the part of\r\nclass A which referred to some missing class B.\r\n\r\nBut a few problems were introduced.\r\n\r\nFirstly, when the deferred error eventually happened, it was\r\nsignalled with abort(msg), rather than through a thrown\r\nMissingRequirementError. The latter is desirable, as it doesn\'t\r\nlead to printing a stack trace.\r\n\r\nSecond, the actual error message changed, and no longer\r\nincluded the name of the class file that refers to the missing\r\nclass.\r\n\r\nFinally, it seems that we can end up with a stub term symbol\r\nin a situation where a class symbol is desired. An assertion\r\nin the constructor of ThisType throws trips when calling .isClass,\r\nbefore the useful error message from StubSymbol can be emitted.\r\n\r\nThis commit addresses these points, and rewords the error\r\na little to be more accessible. The last point is the most fragile\r\nin this arrangement, there might be some whack-a-mole\r\nrequired to similar assertions. I don\'t see a clean solution\r\nfor this, but am open to suggestions.\r\n\r\nAfter the change:\r\n\r\n```\r\n[info] Set current project to default-821d14 (in build file:/Users/jason/code/scratch1/)\r\n> compile\r\n\r\n[info] Compiling 1 Scala source to /Users/jason/code/scratch1/target/scala-2.10/classes...\r\n[error]\r\n[error]      while compiling: /Users/jason/code/scratch1/test.scala\r\n[error]         during phase: typer\r\n[error]      library version: version 2.10.0-RC2\r\n[error]     compiler version: version 2.10.0-RC2\r\n...\r\n[error]   last tree to typer: Ident(SwingWorker)\r\n[error]               symbol: <none> (flags: )\r\n[error]    symbol definition: <none>\r\n[error]        symbol owners:\r\n[error]       context owners: object Test -> package <empty>\r\n ...\r\n[error] uncaught exception during compilation: java.lang.AssertionError\r\n[trace] Stack trace suppressed: run last compile:compile for the full output.\r\n[error] (compile:compile) java.lang.AssertionError: assertion failed: value actors\r\n[error] Total time: 2 s, completed Nov 10, 2012 3:18:34 PM\r\n>\r\n> set scalaHome := Some(file("/Users/jason/code/scala/build/pack"))\r\n[info] Defining *:scala-home\r\n[info] The new value will be used by no settings or tasks.\r\n[info] Reapplying settings...\r\n[info] Set current project to default-821d14 (in build file:/Users/jason/code/scratch1/)\r\n^[compile\r\n[info] Compiling 1 Scala source to /Users/jason/code/scratch1/target/scala-2.10/classes...\r\n[error] /Users/jason/code/scratch1/test.scala:4: A signature in SwingWorker.class refers to term actors in package scala which is missing from the classpath.\r\n[error] object Test extends SwingWorker\r\n[error]                     ^\r\n[error] one error found\r\n[error] (compile:compile) Compilation failed\r\n[error] Total time: 2 s, completed Nov 10, 2012 3:18:45 PM\r\n```\r\n\r\nReview by @paulp @jsuereth\r\n\r\n'
1606,'',"SI-6646 Fix regression in for desugaring.\nThe early check in the parser of pattern irrefutability,\r\nadded in c82ecab, failed to consider InitCaps and\r\n`backquoted` identifiers.\r\n\r\nReview by @paulp\r\n\r\n@adriaanm should take a look to judge the severity.\r\n\r\nGiven that it's a silent killer, I've formed an opinion that is\r\nexpressed with the target branch of this PR."
1605,'',"Fix instrumentation tests for Java 7\nJava 7 was more strict about enforcing rules that Java agents should follow\r\nand uncovered a several problems with current implementation of instrumented tests.\r\n\r\nSee particular commit messages for details.\r\n\r\nOnce this is proven to fix problems with Java 7 build I'll cherry-pick it into 2.10.x branch (and from there it'll eventually propagate to master).\r\n\r\nReview by @namin."
1604,'',"Fix merge error.\nI fixed that already and somehow it didn't appear in my push."
1603,'jsuereth',"SI-6441 Cull scala.swing.SwingWorker\nIt appears to do nothing much at all, refers to the now-deprecated\r\nscala.actor package, and has a name clash with an important class\r\nfrom java.swing.\r\n\r\nNote that the POM for scala-swing does not declare the dependency.\r\n\r\nThe final nail in the coffin is it aides and abets the crash in\r\nthe crash in SI-6440.\r\n\r\nObviously removal of a class isn't binary compatible with 2.10.0.\r\nThings could play out a few ways:\r\n\r\n  - RC3 is required for some other reason, and this change is\r\n    admitted to 2.10.0\r\n  - Or, an exeption to the binary/source compatibility policy\r\n    is made for this class\r\n  - Or, this is deferred until 2.11.0, or at least until the\r\n    spin-off of scala-swing to a standalone repo.\r\n\r\nFor now, I'll submit this to 2.10.x for now and leave those\r\nchoices up to the release managers.\r\n\r\nReview by @ingoem, @jsuereth"
1602,'',"Fix type of the custom `ClassTag` in `PatternMatching.scala`\nIn fb315772 custom ClassTags were introduced to optimize array\r\ncreation in hot places. The idea was that if `Array[T]` is allocated\r\nthrough `ClassTag[T]` (which is essentially a factory for Array[T])\r\nwe would introduce a custom class implementing `ClassTag[T]` interface\r\nand would have specialized array allocation instruction instead of\r\nhaving reflective call as it's being done with default (compiler\r\nsynthesized) implementation of `ClassTag[T]`.\r\n\r\nIn case of `PatternMatching.scala` I made a mistake of providing\r\n`ClassTag[Array[Clause]]` instead of `ClassTag[Clause]` so that value\r\nwould never be used and compiler still would resolve implicit through\r\ndefault mechanism. This has been discovered thanks to @paulp's work\r\non unused value detection.\r\n\r\nReview by @paulp."
1601,'','Update tools/epfl-publish\nCurrently, during each Scala nightly build, the epfl-publish script rsyncs the resulting dists/archives to the repository machine (chara).\r\n\r\nNow, as a result of a change introduced a while back, dists/archives/ contains a symbolic link, created at the end of the build when the targets "pack-archives.latest.*" are invoked (in src/build/pack.xml). That was introduced in:\r\n\r\nscala/scala@506bcfe71c93160ebfa0ca9b8b170b4b54e844e9\r\nscala/scala@cb99853c8655686dae1288cbcd44a42cf1ea6609\r\n\r\nThis link, created in dists/archives/, is copied to chara with the rest. On chara, however, the link points to an invalid target (the path is absolute).\r\n\r\nSeparately, the repository directory on chara is rsync\'d every 30 minutes over to the machine that serves www.scala-lang.org, via cron. Rsync finds that the link target does not exist, and generates an email with the cron log, which is then duly sent to a system mailbox. Every 30 minutes. Since March. Needless to say, the mailbox is pretty large by now.\r\n\r\nThe fix is trivial, but this needs to be included in all the branches that are tested during the nightly tests. Since RC2 has just been cut, and the code frozen, I\'m not sure how this change can be included without disruption; therefore, I\'ll just send a pull request on 2.10.0-wip, and let Josh/Paul take the appropriate steps.'
1600,'','fix t2318.scala\nt2318 fails for me with a java.security.AccessControlException. AFAICT this is just a bug in the test code, which should be fixed by this commit.'
1599,'',"SI-6637\nShould fix SI-6637\r\n\r\nI don't really understand all the details about this transform, so please review and ensure that I didn't create a big mess."
1598,'',"Associate correct names to e-mails, correct or not\nThis is used by git log to produce names with certain formats, and\r\nis used by the release notes tool as well. Helpful if you have commits\r\nwith Author not set correctly, as did I.\r\n\r\nI'm also including Aleksandar Prokopec and his friend Aleksandar Pokopec,\r\nas well as Pavel Pavlov, both of whom have commits appearing under more\r\nthan one name.\r\n\r\nI'm not including others who have not set a full name, but don't have\r\ncommits appearing under more than one name."
1597,'','SI-6634 Fixes data corruption issue in ListBuffer#remove\nBounds are now enforced (and exceptions get thrown),\r\ninstead of trying to make invalid bounds work.'
1596,'','SI-6632 SI-6633 Fixes issues and data corruption in ListBuffer\n- Disallow negative positions for ListBuffer#insert/insertAll/update\r\n - Fix data corruption issue in ListBuffer#insert'
1595,'retronym',"Remove hostile code from explicitouter.\nIf that's the $outer accessor, what's that being created\r\nin newOuterAccessor? Sketchy, sketchy business."
1594,'','show developer guidelines on opening pull request\nImprovements and typo fixes to CONTRIBUTING.md by @heathermiller\r\nas well as feedback from @retronym.'
1593,'','show developer guidelines on opening pull request\nImprovements and typo fixes to CONTRIBUTING.md by @heathermiller\r\nas well as feedback from @retronym.'
1592,'','show developer guidelines on opening pull request\nImprovements and typo fixes to CONTRIBUTING.md by @heathermiller\r\nas well as feedback from @retronym.'
1591,'','New starr based on 4f98d50bc2 .\nContains the extension method naming change, in the\r\ninterests of unbreaking the sbt build for a while.'
1590,'',"Don't complain about Java 8's default methods.\n"
1589,'','Avoid creating the temporary StreamIterator\nWhen using list comprehension on TraversableOnce without Iterable or Iterator,\r\noriginal MonadOps would create a temporary StreamIterator.\r\n\r\nMy patch avoids that.'
1588,'',"Treat name in getResourceAsStream as resource path\nThe parameter for getResourceAsStream is not a class name. It's a resource path!"
1587,'','Warn about unused imports.\nAnd remove a slew of them. Review by @adriaanm or @retronym.'
1586,'','Optimize primitive Array(e1, ..., en)\nExpands an existing optimization for reference arrays to\r\napply to primitives, as well.\r\n\r\nFixes one aspect of SI-6247.\r\n\r\nReview by @paulp. The only difference from last time you saw this is `copyAttrs`.'
1585,'','SI-6539 Annotation for methods unfit for post-typer ASTs\nMotivated by the `.value` method in the SBT task-syntax branch,\r\nwhich should only be called within the context of the argument\r\nto a setting initialization macro.\r\n\r\nThe facility is akin to a fatal deprecation.\r\n\r\nReview by @xeno-by @harrah'
1584,'','Fixes an oversight in recent array optimization.\nIn 8265175, I forgot to set the type of the new ArrayValue\r\ntree, and we accidentally merged without approval on the extra\r\ncommit by our feline build overlords.\r\n\r\nThis is an alternative to #1582, which fixes the problem rather than\r\nreverting the optimization.\r\n\r\nReview by @lrytz'
1583,'',"SI-6616 Check that unsafe operations are only called on the presentation...\n... compiler thread.\r\n\r\nThe method that checks the actual constraint is @elidable, expecting it to be used\r\nfor nightly builds but stripped-off in release builds. This way we don't lose any\r\nperformance, but 'fail-fast' in IDE nightlies.\r\n\r\nThis assumes that release builds will have at least `-Xelide-below ASSERTION`, but\r\nthis pull request does not do that.\r\n\r\nreview by @adriaanm, @paulp"
1582,'',"Ticket/revert primitive array opt\nLet's try to revert these two commits and see if build stability returns.\r\n\r\nReview by @lrytz"
1581,'','comment / question in typers\n'
1580,'','Extract the base functionality of scaladoc that should be implemented to\nget the light-weight documentation for a symbol. Review by @VladUreche.'
1579,'','show developer guidelines when users open a pull request\nreview by @heathermiller, @jsuereth'
1578,'','show developer guidelines when users open a pull request\nreview by @heathermiller, @jsuereth'
1577,'','show developer guidelines when users open a pull request\nreview by @heathermiller, @jsuereth\r\n'
1576,'','Merge 2.10.x/2.10.0-RC2 into master\nBased on #1574.'
1575,'',"SI-6616 Check that unsafe operations are only called on the presentation...\n... compiler thread.\r\n\r\nThe method that checks the actual constraint is @elidable, expecting it to be used\r\nfor nightly builds but stripped-off in release builds. This way we don't lose any\r\nperformance, but 'fail-fast' in IDE nightlies.\r\n\r\nThis assumes that release builds will have at least `-Xelide-below ASSERTION`, but\r\nthis pull request does not do that.\r\n\r\n@review by @adriaanm, @paulp"
1574,'','Merge 2.10.0-RC2 into 2.10.x\nReview by @adriaanm'
1573,'','Revamp of some repl mechanisms.\nThis includes some large simplifications and consistentifications in the repl. Review by @som-snytt.'
1572,'',"Javap for Java 7 (Fixes SI-4936)\nAdd support for reflective invocation of javap under jdk7,\r\nusing the quasi-javax.tools API.\r\n\r\nUnder -Ygen-javap, warn if you can't.\r\n\r\nSince JAVA_HOME is used to locate tools.jar, the script is\r\nupdated to convert it for cygwin.\r\n\r\nA par-test awaits a fix for SI-6026 and perhaps consensus on usage of tests requiring tools.jar, e.g., whether a missing tools.jar should fail the test or skip it.  Jenkins knows if java.home is set correctly.  That's why he's Jenkins.\r\n\r\nBut this will be moot after the asm textifier.\r\n\r\n"
1571,'',"Save existential regression fix from the graveyard.\nRetronym's commit message appended. Following another idea\r\nfrom his idea-wealthy pull request #1074, I only perform the\r\nwiden.narrow incantation if there are existentials present\r\nin the widened type.\r\n\r\nThe result is that compiling the entirety of quick, that\r\ncode path is hit only 143 times.  All the other calls hit\r\n.narrow directly as before.  It looks like the definition\r\nof negligible in the diff of -Ystatistics when compiling\r\nsrc/library/scala/collection:\r\n\r\n```diff\r\n    < #symbols                      : 306315\r\n    ---\r\n    > #symbols                      : 306320\r\n    12c13\r\n    < #unique types                 : 293859\r\n    ---\r\n    > #unique types                 : 293865\r\n```\r\nI'm assuming based on the 2/1000ths of a percent increase\r\nin symbol and type creation that wall clock is manageable,\r\nbut I didn't measure it.\r\n\r\n---\r\n\r\nSI-5330, SI-6014 deal with existential self-type\r\n\r\nThis has been broken since https://github.com/scala/scala/commit/b7b81ca2#L0L567.\r\nThe existential rash is treated in a similar manner as in fc24db4c.\r\n\r\nConceptually, the fix would be `def selfTypeSkolemized =\r\nwiden.skolemizeExistential.narrow`, but simply widening before\r\nnarrowing achieves the same thing. Since we're in existential voodoo\r\nterritory, let's go for the minimal fix: replacing `this.narrow` by\r\n`widen.narrow`."
1570,'','SI-6448 Collecting the spoils of PartialFun#runWith\nAvoids calling both `isDefinedAt` and `apply`. This pathological\r\ncase that would benefit the most looks like:\r\n\r\n```scala\r\n  xs collect {\r\n    case x if {expensive(); true} => x\r\n  }\r\n```\r\n\r\nThe typical change looks like:\r\n\r\n```diff\r\n-    for (x <- this) if (pf.isDefinedAt(x)) b += pf(x)\r\n+    foreach(pf.runWith(b += _))\r\n```\r\n\r\nIncorporates feedback provided by Pavel Pavlov:\r\n\r\n  https://github.com/retronym/scala/commit/ef5430\r\n\r\nA few more opportunities for optimization are noted in the\r\n`Pending` section of the enclosed test. `Iterator.collect`\r\nwould be nice, but a solution eludes me.\r\n\r\nCalling the guard less frequently does change the behaviour\r\nof these functions in an obervable way, but not contravene\r\nthe documented semantics. That said, there is an alternative\r\nopinion on the comment of the ticket:\r\n\r\n  https://issues.scala-lang.org/browse/SI-6448\r\n\r\nReview by @axel22 @pavelpavlov'
1569,'',"Fixing issue where OSGi bundles weren't getting used for distribution.\nReview by @lrytz or anyone interested before 2.10.0-RC2"
1568,'','SI-6611 Tighten up an unsafe array optimization\nThe net was cast too wide and was unsafely optimizing away array\r\ncopies.\r\n\r\nreview by @paulp\r\n\r\nI\'d like to move the following to `Definitions`, but I\'m not what I can use in there to pick a particular overload when arity isn\'t enough.\r\n\r\n```scala\r\nArrayModule_overloadedApply.suchThat {\r\n  _.tpe.resultType.dealias.typeSymbol == ObjectClass  // [T: ClassTag](xs: T*): Array[T] post erasure\r\n           })\r\n```\r\n\r\nOne idea I had was to annotate such methods:\r\n\r\n```scala\r\nobject Array {\r\n  @scala.annotation.internal.magic("Array_apply_ref")\r\n  def apply[T: ClassTag](args: T*)\r\n```\r\n\r\nIt would simplify the compiler logic and make it more self evident in the source that this method is treated specially by the compiler. But maybe they should just be macros, which would be even more revealing.\r\n\r\nRelates to SI-6247, in that it shows where one overload of `Array.apply` is already optimized, and where the corresponding primitive optimizations could go (again, unless macros are preferred.)'
1567,'','Fix for SI-6426, importable _.\nProhibit `_` as an identifier, it can only bring badness.'
1566,'','Fixes example in Type.asSeenFrom\nIt was written in some form of non-executable pseudo-code before and\r\nthat might be quite confusing for people who are not familiar with scala\r\nreflection.\r\n\r\nThis is rebased version of #1557 as requested by @xeno-by.'
1565,'',"SI-6567 Warning for Option(implicitView(foo))\nI've seen the reported problem before in the wild. It seems\r\nworthy of a special warning, so long as we advocate `Option.apply`\r\nas an alternative to `if (x == null) Some(x) else None`.\r\n\r\nIt is behind `-Xlint` at the moment, an option that could do with\r\nsome promotion.\r\n\r\nReview by @paulp (is it time for Lint.scala?)"
1564,'','Expanded unused warnings.\nReview by @jsuereth.'
1563,'','Comment to link code to a relevant JIRA ticket\n"review" by @paulp.'
1562,'','Fix for SI-6600, regression with ScalaNumber.\nNot much in the end; I divided ScalaNumericConversions\r\ninto two traits such that the ScalaNumericAnyConversions can\r\nbe used in value classes, and ScalaNumericConversions can\r\noverride methods in ScalaNumber (since one trait cannot do\r\nboth those things.)\r\n\r\nThe fact that ScalaNumber is privileged for equality but a) extends\r\njava.lang.Number and therefore b) cannot be a value class is something\r\nwe will want to revisit real soon.'
1561,'',"SI-6562 Fix crash with class nested in @inline method\ne6b4204604 moved access widenings from ExplicitOuter to\r\nSuperAccessors to reflect them in pickled signatures so\r\nthat the inliner can take advantage of them under separate\r\ncompilation.\r\n\r\nThe followup discussion [1] determined that this wasn't\r\nthe right solution: while it enabled new separate compilation\r\ninlinings, it failed to widen access of outer pointers and\r\nhence prevented certain inlinings.\r\n\r\nA better solution was proposed: modify the inliner to know\r\nthat access widening is guaranteed to have happened in\r\nExplicitOuter for any field accessed by an @inline-d method\r\nbody, rather than relying solely on the pickled types.\r\n\r\nBut this hasn't happened yet. In the meantime 07f94297 / #1121\r\nreinstated the access widening to SuperAccessors, but took a\r\nslightly different approach, using `Symbol#enclMethod` rather\r\nthan `closestEnclMethod`. That deviation triggers SI-6562.\r\n\r\nThis commit goes back to `closestEnclMethod`.\r\n\r\n[1] https://groups.google.com/forum/#!topic/scala-internals/iPkMCygzws4"
1560,'','Backport of #994 (SI-5314 - CPS transform of return statement fails)\nEnable return expressions in CPS code if they are in tail position.\r\n\r\nThis is a backport (intended for 2.9.3) of a fix that has already been merged into 2.10.0-wip (via 2.10.x). The backport was done by cherry-picking the 6 individual commits from pull request #994.\r\n\r\nReview by @adriaanm'
1559,'',"Updated copyright dates throughout compiler and stdlib for upcoming release\nFor the release, I thought that it'd be nice to have copyrights that are up-to-date. Most copyrights were 2011- which will soon be two years outdated. It was driving me nuts.\r\n\r\n- commit 807dbe5 updates all copyrights in comments, so these should be harmless\r\n- commit a47c2a3 updates copyrights in Scaladoc's manpage template, and in the footer of all Scaladoc pages. This should also be harmless- but since these technically touch code, and not comments, I separated them out for clarity.\r\n"
1558,'','API docs: reflection fixes, AnyVal/Any documentation additions, errata\nThis PR resolves a couple of documentation blockers:\r\n- SI-6132 Reflection docs, corrections, typo fixes\r\n- SI-6399 AnyVal and Any docs to reflect the existence of value classes and universal traits\r\n- SI-6606 Removes a placeholder icon for abstract types Scaladoc (class icon) with one that makes sense for abstract types\r\n\r\nOther fixes:\r\n- A typo-fix to scala.concurrent.Future docs\r\n- The addition of "Experimental" labels across scala.reflect.api and scala.reflect.macros'
1557,'','Fixes example in Type.asSeenFrom\nIt was written in some form of non-executable pseudo-code before and\r\nthat might be quite confusing for people who are not familiar with scala\r\nreflection.'
1556,'','SI-6562 Shuffle around Inliner based access widening, part III\nInitial review by @odersky @magarcia. Additional pairs of eyes are very welcome.\r\n\r\nThe first commit is sufficient to resolve the reported crash.\r\n\r\nBut when considering what should and should not land in 2.10.0, we must carefully weigh the risk of these late changes against the risk of leaving the access widening in `SuperAccessors`, which is a significant deviation from 2.9.2, and might have as-yet-undiscovered impacts on other clients of pickled signatures (scalap / Salat / Reflection?). It would might also hamper our ability to deliver the full fix in 2.10.1 on grounds of binary compatibility.'
1555,'','Provide interactive scaladoc limited view to be used by the IDE.\nReview by @VladUreche.'
1554,'','Improvements to scope lookup.\nReview by @adriaanm.'
1553,'','Warn about unused private members. Get rid of warnings (and their privates).\n[rebase of #1544 -- i meta-diffed but it took me a couple times to get it right and I\'m still unsure about the difference in whitespace in the diffs, so you may want to double check]\r\n\r\n"99 unused methods in the repo, 99 unused methods... take one down, pass it around, 98 unused methods in the repo."\r\n\r\nreview by @paulp'
1552,'','Fix for regression with ScalaNumber.\nThe really sad part is that these methods accomplish\r\nnothing; the same implementations are already in\r\njava.lang.Number.'
1551,'','Fix for SI-6597, implicit case class crasher.\n[backport to 2.10.x of #1550]\r\n\r\nIt seems to me like every call to scope.lookup in the\r\ncompiler is a latent bug. If a symbol is overloaded, you\r\nget one at random. (See the FIXME comment in f5c336d5660\r\nfor more on this.)\r\n'
1550,'','Fix for SI-6597, implicit case class crasher.\nIt seems to me like every call to scope.lookup in the\r\ncompiler is a latent bug. If a symbol is overloaded, you\r\nget one at random. (See the FIXME comment in f5c336d5660\r\nfor more on this.)'
1549,'','Fix performance bug in GenASM.\nIt was going through missingHook looking for android classes\r\nevery time something was compiled, which means four failing\r\nmissingHook calls for every line in the repl.'
1548,'','Fix for -Xcheckinit failures.\nThe GenASM phase had an eager val which required loading\r\na bunch of symbols, which meant an earlier call to isPastTyper\r\ncould lead to a cycle of the form:\r\n\r\n  new Run\r\n  new GenASM\r\n  rootMirror.getRequiredClass\r\n  findMember\r\n  defineBaseClassesOfCompoundType\r\n  isPastTyper\r\n  currentRun.typerPhase\r\n\r\nand the opening "new Run" hasn\'t yet caught up to where\r\ncurrentRun.typerPhase is set.\r\n\r\nThis was remedied by making the eager val lazy, and\r\nsubstantially hardened against recurrence via a method on\r\nglobal "isGlobalInitialized" which verifies that both\r\nthe definitions object and the root mirror have completed\r\ntheir init methods.'
1547,'','Merge 2.10.x into master.\n'
1546,'','Merge 2.10.0-wip into 2.10.x.\n'
1545,'','Provide (limited) scaladoc HTML view to be used by the IDE.\nAdd a flag to interactive.Global to keep docComments.\r\nReview by @VladUreche when time permits.'
1544,'','Warn about unused private members.\n99 unused methods in the repo, 99 unused methods... take one down, pass it around, 98 unused methods in the repo.'
1543,'',"SI-6578 Harden against synthetics being added more than once.\nDon't add synthetic methods if they already contain synthetic\r\nmethods from the set we're about to add.\r\n\r\nAfter a lot of back-and-forth, it was decided this can go in.\r\nDevelopment of automated tests was attempted but not feasible right now.\r\nManual testing will have to do.\r\n\r\nreview by @dragos (it would be interesting to document as part of the review the attempted tests and how we can improve the compiler to make this testable in the future)"
1542,'',"SI-6556 no assert for surprising ctor result type\nPrevious fix to value classes uncovered some questionable cases in the backend where result types of constructor signatures are surprising. It's not a big deal because these types will be ignored afterwards anyway. But\r\nthe method uncovered some questionable situations which we should follow up on. However, breaking 2.9 code because of this is way too harsh. That's why the asserts were converted to warnings.\r\n\r\nreview by @paulp, @adriaanm\r\n\r\nresubmit of #1539"
1541,'','SI-6577 Make actors-migration an external module\n\r\n* Removes actors-migration hooks from partest\r\n* Removes actors-migration code\r\n* removes actors-migration tests\r\n* removes actors-migration distribution packaging.\r\n\r\n\r\nReview by @vjovanov'
1540,'','Fixes SI-6500 by making erasure more regular.\nWith the introduction of value classes, erasure uses specialErasure where a value class C with underlying type T is unboxed to an ErasedValueType. ErasedValue types are eliminated one phase later, in post-erasure. This was done everywhere, except in the parameter types of bridge methods. That was a mistake, because that way  bridge methods could not do the boxing/unboxing logic triggered by ErasedValueTypes.\r\n\r\nNote: there is one remaining use of erasure (not specialErasure) in Erasure.scala. I put in a comment why that is OK.\r\n\r\nReview by @paulp @adriaanm'
1539,'',"Fixes SI-6556 by converting asserts to logging.\nPrevious fix to value classes uncovered some questionable cases in the backend where result types of constructor signatures are surprising. It's not a big deal because these types will be ignored afterwards anyway. But the method uncovered some questionable situations which we should follow up on. However, breaking 2.9 code because of this is way too harsh. That's why the asserts were converted to warnings.\r\n\r\nreview by @paulp, @adriaanm"
1538,'',"Fixes SI-6556 by converting asserts to logging.\nPrevious fix to value classes uncovered some questionable cases in the backend where result types of constructor signatures are surprising. It's not a big deal because these types will be ignored afterwards anyway. But\r\nthe method uncovered some questionable situations which we should follow up on. However, breaking 2.9 code because of this is way too harsh. That's why the asserts were converted to warnings."
1537,'','Fixes SI-6559 - StringContext not using passed in escape function.\nAs reported by Curtis Stanford, with indication of what to fix.  standardInterpolator was not correctly\r\ncalling the passed in process function, so raw strings were not really raw.\r\n\r\n\r\nReview by @axel22'
1536,'','SI-6581 fixed by inlining `Actor.self`.\nThis avoids the necessary type cast that was preventing leakage of internal migration classes.\r\n\r\nReview by @phaller'
1535,'','Fix SI-6584, Stream#distinct uses too much memory.\nNesting recursive calls in Stream is always a dicey business.'
1534,'','An option for real repl output.\nThere have been many requests to expose the products of\r\nthe repl in some way outside in-memory. This does that.\r\n\r\n  scala                        # usual in-memory behavior\r\n  scala -Yrepl-outdir ""       # make up a temp dir\r\n  scala -Yrepl-outdir /foo/bar # use /foo/bar'
1533,'','SI-6547: elide box unbox pair only when primitives match\nreview by @VladUreche'
1532,'',"Fixes SI-5031 for separate compilation scenario.\nWhen you have a conflicting member in package object and normal package that share the same namespace we remove the latter ClassSymbol from the scope. Now, this has an unpleasant consequence that companionClass/companionModule/companionSymbol no longer work correctly as they rely on finding the correspondent symbol using decls of the owner.\r\nThis fixes the problem of SI-5031 for separate compilation. Why the above change matters for finding foo.bar.Foo? Because when parsing the class we needed information about the static module (and we have the correct module symbol when completing the info). It's just that 043ce6d0565c9d5d960 relied on no longer valid assumptions. So we were getting NoSymbol and sym.exist was failing.\r\n\r\nObviously a more complete solution would be better if we didn't rely on the scope but that's too big to change for 2.10.0.\r\n\r\nAlready discussed with @odersky, but it would be great to get a quick lgtm."
1531,'','Fixes SI-6558: typecheck lazy annotation info using non-silent context.\nMake context for typing lazy annotations always non-silent. If lazy annotation info was created in local (silent) context, error could go unnoticed because later they would still use silent typer for typing the annotation.\r\n\r\nReview by @lrytz'
1530,'',"SI-6575 Plug inference leak of AbstractPartialFunction\nUsually this isn't needed, as partial functions can only be\r\ndefined with an expected type. But if that expected type is\r\nand inherited method return type, the actual type of the partial\r\nfunction literal is used, and the implementation detail of\r\n`AbstractPartialFunction[A, B] with Serializable` leaks out.\r\n\r\nAfter this change, the inferred types match those from\r\nScala 2.9.2.\r\n\r\n```\r\nticket/6575 ~/code/scala scalac29 -Xprint:typer test/files/pos/t6575a.scala | grep def > 29.txt\r\nticket/6575 ~/code/scala squalac -Xprint:typer test/files/pos/t6575a.scala | grep def > 210.txt\r\nticket/6575 ~/code/scala diff -u 29.txt 210.txt\r\n--- 29.txt\t2012-10-28 13:51:07.000000000 +0100\r\n+++ 210.txt\t2012-10-28 13:51:20.000000000 +0100\r\n@@ -1,7 +1,16 @@\r\n     def foo: PartialFunction[Int,Int]\r\n     def /*Y*/$init$(): Unit = {\r\n-    absoverride def foo: PartialFunction[Int,Int] = ((x0$1: Int) => x0$1 match {\r\n+    absoverride def foo: PartialFunction[Int,Int] = {\r\n+        def <init>(): anonymous class $anonfun = {\r\n+        final override def applyOrElse[A1 >: Nothing <: Int, B1 >: Int <: Any](x$1: A1, default: A1 => B1): B1 = (x$1: A1 @unchecked) match {\r\n+        final def isDefinedAt(x$1: Int): Boolean = (x$1: Int @unchecked) match {\r\n     def /*Z*/$init$(): Unit = {\r\n-    absoverride def foo: PartialFunction[Int,Int] = ((x0$2: Int) => x0$2 match {\r\n+    absoverride def foo: PartialFunction[Int,Int] = {\r\n+        def <init>(): anonymous class $anonfun = {\r\n+        final override def applyOrElse[A1 >: Nothing <: Int, B1 >: Int <: Any](x$1: A1, default: A1 => B1): B1 = (x$1: A1 @unchecked) match {\r\n+        final def isDefinedAt(x$1: Int): Boolean = (x$1: Int @unchecked) match {\r\n     def /*Comb*/$init$(): Unit = {\r\n-    absoverride def foo: PartialFunction[Int,Int] = ((x0$3: Int) => x0$3 match {\r\n+    absoverride def foo: PartialFunction[Int,Int] = {\r\n+        def <init>(): anonymous class $anonfun = {\r\n+        final override def applyOrElse[A1 >: Nothing <: Int, B1 >: Int <: Any](x$1: A1, default: A1 => B1): B1 = (x$1: A1 @unchecked) match {\r\n+        final def isDefinedAt(x$1: Int): Boolean = (x$1: Int @unchecked) match {\r\n```\r\n\r\nreview by @adriaanm\r\n  - submitting to 2.10.0-wip under the regression-discovered-in-RC1 banner.\r\n  - what's preferred, `tree.setType(tp)` or `Typed(tree, tp)`?"
1529,'',"SI-6546: JVM InnerClass attribute doesn't list closures elided by optimizer\n\r\nreview by @gkossakowski "
1528,'',"SI-6575 Type ascribe partial function literals.\nUsually this isn't needed, as partial functions can only be\r\ndefined with an expected type. But if that expected type is\r\nand inherited method return type, the actual type of the partial\r\nfunction literal is used, and the implementation detail of\r\n`AbstractPartialFunction[A, B] with Serializable` leaks out.\r\n\r\nAfter this change, the inferred types match those from\r\nScala 2.9.2.\r\n\r\n```\r\nticket/6575 ~/code/scala scalac29 -Xprint:typer test/files/pos/t6575a.scala | grep def > 29.txt\r\nticket/6575 ~/code/scala squalac -Xprint:typer test/files/pos/t6575a.scala | grep def > 210.txt\r\nticket/6575 ~/code/scala diff -u 29.txt 210.txt\r\n--- 29.txt\t2012-10-28 13:51:07.000000000 +0100\r\n+++ 210.txt\t2012-10-28 13:51:20.000000000 +0100\r\n@@ -1,7 +1,16 @@\r\n     def foo: PartialFunction[Int,Int]\r\n     def /*Y*/$init$(): Unit = {\r\n-    absoverride def foo: PartialFunction[Int,Int] = ((x0$1: Int) => x0$1 match {\r\n+    absoverride def foo: PartialFunction[Int,Int] = {\r\n+        def <init>(): anonymous class $anonfun = {\r\n+        final override def applyOrElse[A1 >: Nothing <: Int, B1 >: Int <: Any](x$1: A1, default: A1 => B1): B1 = (x$1: A1 @unchecked) match {\r\n+        final def isDefinedAt(x$1: Int): Boolean = (x$1: Int @unchecked) match {\r\n     def /*Z*/$init$(): Unit = {\r\n-    absoverride def foo: PartialFunction[Int,Int] = ((x0$2: Int) => x0$2 match {\r\n+    absoverride def foo: PartialFunction[Int,Int] = {\r\n+        def <init>(): anonymous class $anonfun = {\r\n+        final override def applyOrElse[A1 >: Nothing <: Int, B1 >: Int <: Any](x$1: A1, default: A1 => B1): B1 = (x$1: A1 @unchecked) match {\r\n+        final def isDefinedAt(x$1: Int): Boolean = (x$1: Int @unchecked) match {\r\n     def /*Comb*/$init$(): Unit = {\r\n-    absoverride def foo: PartialFunction[Int,Int] = ((x0$3: Int) => x0$3 match {\r\n+    absoverride def foo: PartialFunction[Int,Int] = {\r\n+        def <init>(): anonymous class $anonfun = {\r\n+        final override def applyOrElse[A1 >: Nothing <: Int, B1 >: Int <: Any](x$1: A1, default: A1 => B1): B1 = (x$1: A1 @unchecked) match {\r\n+        final def isDefinedAt(x$1: Int): Boolean = (x$1: Int @unchecked) match {\r\n```\r\n\r\nreview by @adriaanm"
1527,'',"silences optional logs in reflection\nSome parts of the compiler call `SymbolTable.log` to dump information\r\nabout the progress of compilation, type inference, etc.\r\n\r\nIn Global.scala, `log` checks the -Ylog configuration setting to approve\r\nor reject incoming messages.\r\n\r\nHowever in runtime reflection (scala.reflect.runtime.JavaUniverse)\r\n`log` always prints its argument, which is annoying. Here's why\r\nthis is happening.\r\n\r\nIn runtime reflection -Ylog is inapplicable, because this is a\r\nphase-based setting, whereas reflection does not have a notion of phases.\r\nMoreover reflection doesn't expose `settings` to the programmers\r\n(the corresponding `def settings` definition is declared in\r\nscala.reflect.internal.Required).\r\n\r\nTherefore there's no obvious solution to conditional printing in `log`\r\nwhen invoked in reflective setting. The situation is tough and needs to\r\nbe addressed in a principled manner. However we're in between RC1 and RC2\r\nat the moment, so I don't fancy significant changes right now.\r\n\r\nNevertheless we need to fix the annoyance right away, therefore I change\r\nreflective `log` to use -Ydebug. This is inconsistent w.r.t how Global\r\nworks, and also there's no way to enable logging short of casting to\r\n`scala.reflect.runtime.SymbolTable`, but it looks like a decent\r\ntemporary measure."
1526,'',"New take on SI-6534, value classes.\nDon't prohibit equals and hashCode in universal traits;\r\ninstead, always override them in value classes."
1525,'',"Harden against synthetics being added more than once.\nDon't add synthetic methods if they already contain synthetic\r\nmethods from the set we're about to add."
1524,'','Fixes SI-6559 - StringContext not using passed in escape function.\nAs reported by Curtis Stanford, with indication of what to fix.  standardInterpolator was not correctly\r\ncalling the passed in process function, so raw strings were not really raw.\r\n\r\n\r\nReview by @adriaanm'
1523,'',"Harden against synthetics being added more than once.\nDon't add synthetic methods if they already contain synthetic\r\nmethods from the set we're about to add."
1522,'','SI-6488: Fix for race with open I/O fds\nUnless the I/O threads for error and output are closed prior to Process.destroy() there is a potential race condition that ends in the I/O threads raising an IOException.\r\n\r\nAdded test case and resubmitted against 2.10.x\r\n\r\nCLA also signed and confirmed.\r\n\r\nSupersedes https://github.com/scala/scala/pull/1484 which may now be closed.'
1521,'',"Saving symbol lookup from typedIdent.\nAnticipating the appeals to performance, I offer this coarse measurement. My times are the good ones. Better measurements are welcome, but I convinced myself at least that I wasn't hurting anything.\r\n\r\n    % for i in 1 2 3; do time scalac3 -J-Xmx1g -d $(mktemp -dt foo) $(find /scratch/trunk5/src/library/scala/collection/mutable -name '*.scala') ; done\r\n    28.139 real, 68.872 user, 1.186 sys\r\n    30.963 real, 70.071 user, 1.260 sys\r\n    29.741 real, 73.389 user, 1.249 sys\r\n    % for i in 1 2 3; do time ./pack-whats-in-a-name/bin/scalac -J-Xmx1g -d $(mktemp -dt foo) $(find /scratch/trunk5/src/library/scala/collection/mutable -name '*.scala') ; done\r\n    28.129 real, 68.396 user, 1.176 sys\r\n    27.571 real, 67.318 user, 1.081 sys\r\n    27.240 real, 66.336 user, 1.046 sys\r\n\r\nReview by @odersky, @adriaanm."
1520,'',"Remove compiler phases that don't influence scaladoc generation.\nReview by @adriaanm."
1519,'',"Disabled generation of _1, _2, etc. methods.\nThis was part of the introduction of ProductN, which had\r\nto go back into pandora's box because of issues with cycles\r\nduring typing.  These should have been reverted along\r\nwith it."
1518,'',"SI-2968 Fix brace healing for `^case (class|object) {`\nThe scanner coalesces the pair of tokens into CASEOBJECT or\r\nCASECLASS, but fails to set `offset` back to the start of `case`.\r\nBrace healing is then unable to correctly guess the location of\r\nthe missing brace.\r\n\r\nThis commit resets `offset` and `lastOffset`, as though\r\ncaseobject were a single keyword. Only the former was neccessary\r\nto fix this bug; I haven't found a test that shows the need for\r\nthe latter.\r\n\r\nreview by @paulp"
1517,'','Rename module to object\n'
1516,'',"Fixes SI-6551.\nDon't rewrite an explicit apply method to dynamic polytypes.\r\n\r\nReview by @retronym and @jsuereth."
1515,'',"Fix SI-6552, regression with self types.\nIn 6eb55d4b7a we put in a remedy for an old issue SI-4560 which\r\nhad accumulated a number of sketchy partial remedies which carried\r\nno tests to illustrate their necessity. Looks like at least one of\r\nthose was doing something useful. Here's to reversion-reversion.\r\n\r\nThis reverts commit c8bdf199, which itself reverted cb4fd6582."
1514,'','Issue/5330\n'
1513,'','Set is override\nReview by @retronym'
1512,'','Merge 2.10.x into master.\nThese merges become more "interesting" all the time.  I had to resolve a scaladoc conflict with no real idea about the resolution.  We need some more natural way to put that kind of work in front of the people who wrote the conflicting code, and which doesn\'t block the whole repository from merging.  In any case, I took a stab at it.'
1511,'',"Removed .disabled files.\nThese things don't belong in trunk.  They poison all my\r\nsearches with bogus results.  I'd say two years was about\r\n1.999 years too long."
1510,'','avoid single-arg assert where harmful in duration-tck\nafter mailing list discussion: https://groups.google.com/d/msg/scala-internals/7j6ph0cQBW8/U3Lr7QrA41EJ\r\n\r\nnot sure whether 2.10.0-wip is the appropriate branch, should be easily relocatable wherever needed.\r\n\r\nreview by: @paulp'
1509,'','Fix for SI-6537, inaccurate unchecked warning.\nI found a more direct expression of the unchecked logic,\r\nwhich should be much easier for others to verify.  But the\r\nbug being fixed here is that the unchecked checking happens\r\ntoo early, and the sealed children of a symbol are not yet\r\nvisible if it is being simultaneously compiled.'
1508,'','Backport commits that fix SI-6358 from master\nOnly minor renaming changes were necessary to adapt it to 2.10.x.\r\n\r\nReview by @jsuereth'
1507,'',"SI-6526 Tail call elimination should descend deeper.\nIt wasn't traversing into Select nodes nor into the receiver of\r\na tail call.\r\n\r\nReview by @dragos"
1506,'','PluginComponent contributes description to -Xshow-phases. (Fixes SI-6446)\nIn Global, SubComponent is called a phase descriptor, but it doesn\'t actually have a description. (Phase itself does.) This fix adds a description to PluginComponent so that plugins can describe what they do in -Xshow-phases.\r\n\r\nTo avoid chaos, as per the formatting comments in Global.scala, -Xshow-phases output is restricted to 80 columns.  As an aid, inlineExceptionHandlers is renamed to inlineHandlers.\r\n\r\nPhase descriptions are provided for the CPS components.\r\n\r\nA minimal test is provided for -Xshow-phases with a custom plugin.  Plugin loading and partest are modified so that a test can provide a plugin.  (Plugin loading accepts an exploded jar, and partest replaces "dot" or cwd with output dir.  This means a test can contribute just one plugin.)\r\n\r\n(One could imagine testing a compiler component by supplying a test phase that creates possibly screwy trees, for example to test robustness.)\r\n\r\nMoves test run/t4351.scala from the pos test set.\r\n\r\nFootnote: Continuations tests could be mainstreamed, by adding .flags.\r\n\r\nreview by: @paulp who cares'
1505,'','Merge 2.10.0-wip into 2.10.x.\n'
1504,'',"Deprecated instrumentation API\nreview by @jsuereth, @odersky\r\n\r\nThe instrumentation logic needed by the Scala IDE Worksheet is currently part\r\nof the Scala project, but it doesn't need to be.  I already have a PR ready for\r\ncompletely removing the instrumentation logic, but I considered it too risky at\r\nthis point for 2.10.0 release (an oversight can lead to the impossibility of\r\nrunning the worksheet with Scala 2.10.0).\r\n\r\nFor the moment, I believe it's better to deprecate the whole instrumentation\r\nAPI in 2.10.0, and the PR for removing the instrumentation logic will target\r\n2.10.1 or 2.11.0.\r\n\r\nBesides deprecating the instrumentation API, this commit also raised visibility\r\nof `interruptsEnabled` member in `Global`.  This change alone is sufficient for\r\nmoving the instrumentation logic outside of the compiler, and it is needed\r\nbecause the Presentation Compiler thread should never be interrupted while\r\ninstrumenting a source.\r\n\r\nThis commit is related to SI-6458\r\n(cherry picked from commit 4c7127d9acb1e0bae6f14a6b40019a535d057112)"
1503,'',"Use presentation compiler when scaladocing.\nDon't run unneeded phases when generating scaladoc.\r\nReview by @VladUreche and @dragos."
1502,'',"Use presentation compiler when scaladocing.\nDon't run unneeded phases when generating scaladoc.\r\nReview by @VladUreche and @dragos."
1501,'','Remove unneeded calls to substring()\nReview by @VladUreche.'
1500,'',"Compiler crashes with StackOverflowError on amateur attempt at a Covariant Set collection\nHere is the code that was being compiled: https://github.com/barneyii/zutha-lib/tree/master/src/main/scala/net/zutha/lib/collection\r\n\r\nI tried to compile with scala 2.9.2 and that pretended to succeed when I compiled in Intellij Idea but it actually didn't finish. When I compiled with 2.9.2 using SBT it failed with a StackOverflowError.\r\n\r\nI then tried compiling with Scala 2.10.0 M7 (later changed back to M4 with no effect) and received this error message: https://github.com/barneyii/zutha-lib/blob/master/compile-errors.txt"
1499,'',"Fix for SI-6206, inconsistency with apply.\nThe code part of this patch is 100% written by retronym, who\r\napparently has higher standards than I do because I found it just\r\nlying around in his repository. I think I'll go pick through his\r\ntrash and see if he's throwing away any perfectly good muffins.\r\n\r\nI made the test case more exciting so as to feel useful."
1498,'','Changes Tree and Type members from vals to defs.\nExplanatory email:\r\n\r\nThe reflection API defines a great many abstract vals. I would\r\nlike these all to be defs. I\'m sending a pull request to that end.\r\n\r\nReasons: for starters, they should default to being defs. It\'s a\r\ndecision to use vals for which one should have to supply reasons.\r\nThe reason for THAT is that defs can be implemented with vals, but\r\nnot vice versa.\r\n\r\nWhy does this matter? I can\'t find my long writing on the subject\r\nof TypeRef. In short, we waste a huge amount of memory on its\r\nfields, because given the way TypeRef is defined, each one demands\r\na pre, a sym, and an args. Except that somewhere between 1/3 and\r\n1/2 have prefix "NoPrefix", and somewhere between 1/3 and 1/2 have\r\nargs "Nil". We know it at creation time, but we give every typeref\r\nthe whole field anyway.\r\n\r\nAt present there\'s no way to fix this which has acceptable\r\nperformance - i.e. custom subclasses save us lots of memory, but\r\nare too much slower for having to use an extractor - but there\'s\r\nno reason we should have to choose, and I fully expect to fix it\r\neventually. Let\'s not make that fix into a breaking change by\r\nabstractly defining "pre" and "args" as field-requiring vals.'
1497,'','Warn about more misplaced expressions.\nAn identifier being used in statement position is not likely\r\nwhat was meant when it is a non-lazy getter.'
1496,'','Fixes SI-6521, overrides Range#head to be faster\nSuper trivial change.'
1495,'',"[backport] Fixed SI-6505. Respond to ask calls by immediate failure even after comp...\n...iler shutdown.\r\n\r\nWhen the compiler is asked to shutdown, it may still have items on the working queue, and more can be added by clients in other thread that don't *know* the compiler is down yet. These requests were never serviced, leading to deadlocks or timeouts.\r\n\r\nreview by @odersky, @hubertp\r\n(cherry picked from commit 19ea47b3425f973c1ca92890cb8ee561b0ecab3d)\r\n"
1494,'','Extract compiler\nReview by @VladUreche.'
1493,'','Removed redundant containsUncheckable.\nLike the comment said:\r\n\r\n  "TODO: at the very least, reduce duplication wrt checkCheckable"\r\n\r\nI went with the very most, eliminating it.'
1492,'','Pullrequest/reflection docs\n'
1491,'','Scaladoc bugfixes for reflection\nReview by @vigdorchik @jsuereth'
1490,'',"Fix for SI-6499, regression in type inference.\nI can't do any better than a reproduced comment:\r\n\r\nFor some reason which is still a bit fuzzy, we must let Nothing\r\nthrough as a lower bound despite the fact that Nothing is always\r\na lower bound. My current supposition is that the side-effecting\r\ntype constraint accumulation mechanism depends on these subtype\r\ntests being performed to make forward progress when there are\r\nmutally recursive type vars. See pos/t6367 and pos/t6499 for the\r\ncompeting test cases."
1489,'','SI-6453 Documentation links for @switch are broken\nUpdates a link to Oracle docs.'
1488,'',"Deprecated instrumentation API\nreview by @odersky, @dragos\r\n\r\nThe instrumentation logic needed by the Scala IDE Worksheet is currently part\r\nof the Scala project, but it doesn't need to be.  I already have a PR ready for\r\ncompletely removing the instrumentation logic, but I considered it too risky at\r\nthis point for 2.10.0 release (an oversight can lead to the impossibility of\r\nrunning the worksheet with Scala 2.10.0).\r\n\r\nFor the moment, I believe it's better to deprecate the whole instrumentation\r\nAPI in 2.10.0, and the PR for removing the instrumentation logic will target\r\n2.10.1 or 2.11.0.\r\n\r\nBesides deprecating the instrumentation API, this commit also raised visibility\r\nof `interruptsEnabled` member in `Global`.  This change alone is sufficient for\r\nmoving the instrumentation logic outside of the compiler. The change is needed\r\nbecause the Presentation Compiler thread should never be interrupted while\r\ninstrumenting a source.\r\n\r\nThis commit is related to SI-6458"
1487,'',"Fixed SI-6505. Respond to ask calls by immediate failure after compiler shutdown.\nWhen the compiler is asked to shutdown, it may still have items on the working queue, and more can be added by clients in other thread that don't *know* the compiler is down yet. These requests were never serviced, leading to deadlocks or timeouts.\r\n\r\nreview by @odersky, @hubertp\r\n\r\nbackport to 2.9.x"
1486,'',"SI-6099 - Scaladoc for scala.concurrent incomplete\nThis is a rebase and resubmission of @phaller's [pull](https://github.com/scala/scala/pull/1485), with the reviewers' comments additionally addressed."
1485,'','SI-6099 - Scaladoc for scala.concurrent incomplete\nComplete and improve doc comments of `scala.concurrent`:\r\n\r\n- Skip generating docs for `scala.concurrent.impl` package\r\n- Added doc comment to `Awaitable` trait\r\n- Rewrote doc comments of `Awaitable.ready`/`Await.ready` and `Awaitable.result`/`Await.result`\r\n- Reworded doc comment about managed blocking in the `Await` object\r\n- Fix doc comment of `scala.concurrent.blocking`\r\n\r\nReview by @heathermiller and @axel22 '
1484,'','SI-6488: Fix for race with open I/O fds\nUnless the I/O threads for error and output are closed prior to Process.destroy() there is a potential race condition that ends in the I/O threads raising an IOException.'
1483,'','SI-6440: Revert change to `TraversableLike.filterNot`\nCommit df9f470f14262b9b1002f022c2620d8c38835805 introduced\r\na change to `TraversableLike.filterNot` which broke Stream\r\nimplementation that does override `filter` implementation\r\nbut does not override `filterNot` implementation. This shows\r\nclearly that reusing code for strict and non-strict collections\r\nis very problematic.\r\n\r\nAdded a test-case covering this problem.\r\n\r\nCloses SI-6440.\r\n\r\nReview by @retronym.'
1482,'',"Fixes SI-4042, challenges with NumericRange's contains.\nCleans up some sketchy and inadequate casting in favor of\r\nusing a dummy implicit to overload contains.  This way if\r\nyou're doing something reasonably sensible like\r\n\r\n  1L to 10L contains 3\r\n\r\nIt will be both fast and correct.  And if you're doing\r\nsomething sensible but less convenient for the implementor like\r\n\r\n  1L to 10L contains BigInt(3)\r\n\r\n..then it will still be correct."
1481,'','Proposed fix for SI-6490.\nIssues a "companions must be in same file" error only if both class and module exist. This can certainly do no harm. I believe it should adress SI-6490, but, lacking a test case, I don\'t have evidence for that.\r\n\r\nReview by @paulp @dragos'
1480,'','Fixes SI-6170: issue with dragging scaladoc splitter over central iframe\nSetting a simple jquery layout flag was enough. This PR also includes the correct jquery-ui.js. Review by @VladUreche, @heathermiller '
1479,'',"Scaladoc knows the package structure of the libraries,\nso don't include them in -external-urls setting. Review by @VladUreche."
1478,'',"Scaladoc knows the package structure of the libraries,\nso don't include them in -external-urls setting. Review by @VladUreche."
1477,'',"Possible fix for continuations bug.\nIt comes looking for an implicit from (A @foo) => B\r\nand gives up, despite the fact that there is an implicit\r\nfrom A => B.  Maybe there is some good reason for this,\r\nand/or I would fully believe there is a better way to fix\r\nit, but I'll propose this and wait to hear about the\r\ngood reason and/or better way."
1476,'','Corection of Range comments - SI-5678\nRemove $Coll comment in Range and ParRange. Correct immutable in comment of ParSeq.'
1475,'','Make reads in CommentFactory slice from the underlying buffer\nrather than create from a StringBuilder. Make the code easier to reason about.\r\nReview by @VladUreche.'
1474,'',"SI-6485 stops creating extmethods for macros\nMacros don't correspond to bytecode-level methods, therefore\r\nthere's no need to undergo any transformations past typer."
1473,'','SI-6388 Remove deprecated items scheduled for 2.11\n'
1472,'','Merge 2.10\n'
1471,'','SI-6483 Prohibit super[T] references in value classes.\nThis seems the safest course of action for 2.10.0.\r\n\r\nWithout this, `typedSuper` fails during erasure.\r\n\r\nReview by @odersky\r\n\r\n - Is "this restriction is planned to be removed in subsequent releases" ?'
1470,'',"MethodSymbol.params => MethodSymbol.paramss\nThis matter was discussed at scala-internals:\r\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/6414d200cf31c357\r\n\r\nAnd I am convinced with Paul's argument: consistency of the convention\r\nis very important."
1469,'',' fixed trivial error with printing of exception stack trace in verbose m...\nFixed trivial error with printing internal compiler exception stacktrace in verbose mode: in original variant  pw.toString  show us something like PrintWriter@hashCode \r\n\r\n'
1468,'','Issue/6482\nReview by @odersky if possible, or @adriaanm or @retronym.'
1467,'','Move tests out of pending.\n'
1466,'',"SI-6478 Fixing JavaTokenParser.ident\nJavaTokenParser.ident doesn't accept many valid Java identifiers, including `MODULE$` (very common in Scala land), and anything containing unicode characters.\r\n\r\nSee\xa0https://issues.scala-lang.org/browse/SI-6478 for more details."
1465,'','Improvements to overloading resolution code.\nReview by @retronym.'
1464,'',"More scaladoc speed optimization:\nDon't parse doc comment if the word 'deprecated' is not mentioned.\r\nReview by @VladUreche."
1463,'',"SI-6471 Update jquery from 1.4.2 to 1.8.2\nThis reopens SI-6170 that was fixed by 1be1f760. I don't want to start\r\na revert war, but I see two reasons we should stick to newer jquerys:\r\n - they provide better compatibility to new browsers\r\n - having diagrams not working is much more annoying than having the\r\nsplitter not work"
1462,'',"Merge remote-tracking branch 'scala/2.10.0-wip' into 2.10.x\nMerge with no conflicts.\r\n\r\nI'm merging so quickly to propagate fix a test-case that fails on Windows.\r\n\r\nReview by @adriaanm."
1461,'',"Merge remote-tracking branch 'scala/2.10.0-wip' into 2.10.x\nMerge with no conflicts.\r\n\r\nI'm merging so quickly to propagate fix a test-case that fails on Windows.\r\n\r\nReview by @adriaanm."
1460,'','SI-6467: Zero element in aggregate now by-name\n'
1459,'','Fix broken links with names that need to be encoded.\nReview by @VladUreche.'
1458,'',"Another reflection bomb\nReflection is the gift that keeps on giving.\r\n\r\nWriting the docs for reflection and macros produced another 17 shiny commits that clean up the public API and even touch the prettyprinters. \r\n\r\nThe previous reflection pull request caused significant controversy, but I would like to convince you, our release managers, once again. \r\n\r\nMore than a half of the PR is removal of useless methods that somehow sneaked into the public API. Another half of the remaining half is renaming of `XXXError` exceptions wrongfully called errors. Two more commits are mandatory for Scaladoc working correctly. Another two commits are not mandatory, but they help the docs to be more comprehensible.\r\n\r\nAnd the last commit upgrades prettyprinting of reflection trees, accumulating the fixes I made when prepping examples for the documentation. If you insist I'm okay with letting this one go into 2.10.1.\r\n\r\nreview @gkossakowski @jsuereth"
1457,'','Added Regex.matches(s:String)\nI missed a function to directly check if a string complies to a regex.\r\n\r\n - String.matches() only allows Strings as parameters (not Regex\'es)\r\n - The scala Regex class didn\'t offer a direct way.\r\n\r\nThe user had to write\r\n\r\n    val myRegex="some_regex".r\r\n    myRegex.pattern.matcher(string).matches\r\n\r\nwhich I found to be too complicated. So I implemented a shortcut function in the scala Regex class.'
1456,'','Renamed hasSymbol to hasSymbolField.\nSuggestion by retronym that the obvious implementation of\r\n"hasSymbol" be called "hasSymbol" reminded me we have a method\r\ncalled "hasSymbol" which does not have that implementation, and\r\nwhich has burned us already with subtle bugginess. I think that\r\n"hasSymbolField" is self-documenting.'
1455,'',"undeprecates manifests for 2.10.0\nSince scala-reflect.jar is going to be declared experimental for 2.10.0,\r\nit doesn't make sense to deprecate manifests in favor of type tags.\r\n\r\nClass manifests, however, ARE deprecated for class tags, because class tags\r\ndon't require scala-reflect.jar and are generated independently of type tags."
1454,'','SI-6467: Zero element in aggregate now by-name\nChange zero element `z` in `aggregate` signature to be by-name.\r\n\r\nReview by @jsuereth.'
1453,'','Fix scaladoc links in a couple of places.\nReview by @paulp.'
1452,'',"Merge remote-tracking branch 'scala/2.10.x' into master\nReview by @paulp.\r\n\r\nThe only interesting bit is the merge commit 9b2154e43a8a138e561a004ccab85660d3c0b4dd. I don't know how to force github ui to show merge resolution diff only but locally you can use gitk for that."
1451,'','SI-6451: Rename classes in `unchecked-abstract.scala` test.\nAs reported Miguel, `Con` is problematic name of a class on Windows\r\nand makes this test to fail. Renamed classes to something else which\r\nhopefully make Windows build happy again.\r\n\r\nCloses SI-6451.\r\n\r\nReview by @magarciaEPFL or @paulp.'
1450,'','REPL: Ctrl+V with no clipboard contents throws an exception\nIn the REPL with nothing in the clipboard, hitting Ctrl+V causes the following:\r\n\r\n```\r\nscala> [ERROR] Paste failed: java.awt.datatransfer.UnsupportedFlavorException: Plain Text\r\n        at sun.awt.datatransfer.ClipboardTransferable.getTransferData(ClipboardTransferable.java:160)\r\n        at scala.tools.jline.console.ConsoleReader.paste(ConsoleReader.java:1826)\r\n        at scala.tools.jline.console.ConsoleReader.readLine(ConsoleReader.java:1361)\r\n        at scala.tools.jline.console.ConsoleReader.readLine(ConsoleReader.java:1161)\r\n        at scala.tools.nsc.interpreter.JLineReader.readOneLine(JLineReader.scala:76)\r\n        at scala.tools.nsc.interpreter.InteractiveReader$class.readLine(InteractiveReader.scala:44)\r\n        at scala.tools.nsc.interpreter.JLineReader.readLine(JLineReader.scala:19)\r\n        at scala.tools.nsc.interpreter.ILoop.readOneLine$1(ILoop.scala:533)\r\n        at scala.tools.nsc.interpreter.ILoop.loop(ILoop.scala:550)\r\n        at scala.tools.nsc.interpreter.ILoop.process(ILoop.scala:822)\r\n        at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:67)\r\n        at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:80)\r\n        at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:89)\r\n        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\r\n```\r\nThis is doubly unexpected as Ctrl+V is usually the escape sequence in a Linux terminal emulator to type a raw character; i.e. not a shortcut for paste. It seems to me that the REPL should catch this exception. src/compiler/scala/tools/nsc/interactive/REPL.scala:78?\r\n\r\nOS: Linux 3.2.0-31-generic x86_64\r\nScala: 2.9.1.dfsg-3\r\nTerminal: zsh 4.3.17\r\nTerminal emulator: GNOME Terminal 3.4.1.1\r\n\r\n---\r\nAnother related issue is that Home and End don\'t work under some terminal emulators, like PuTTY. Instead they emit part of their character sequence, "1~" and "4~" respectively. I can open another issue for this if it is not related.'
1449,'',"comment documenting fix for SI-5859 some more\ntook @paulp's explanation and pasted it in there for the benefit of future selves\r\n\r\nreview by @paulp"
1448,'','fix for SI-6464: using ~> and <~ enables backtracking disabled by ~!\nreview by @phaller'
1447,'','Spurious warning elimination.\nReview by @retronym.'
1446,'','SI-6436 Handle ambiguous string processors\nBefore, we got in an inifinite loop by chasing\r\nthe error typed result of adaptToMemberWithArgs.\r\n\r\nOne point of befuddlement remains: why did t6436 and t6436b\r\nbehave differently before this change?\r\n\r\nReview by @hubertp'
1445,'','fix for SI-6464: using ~> and <~ enables backtracking disabled by ~!\n\r\n it seems that scala.util.parsing.combinator.Parsers.OnceParser must implement own ~> <~ instead of inheriting them.\r\n\r\ntestcase:\r\n\r\n    import scala.util.parsing.input.CharSequenceReader\r\n    import scala.util.parsing.combinator.RegexParsers\r\n\r\n    object SspParser extends RegexParsers {\r\n      val ok: Parser[Any] =\r\n        ( "<%" ~! rep(\' \') ~  "\\\\w+".r  ~ rep(\' \') ~ "%>"\r\n        | "<%" ~! error("should not fail here, because of ~!") )\r\n\r\n      val buggy: Parser[Any] =\r\n        ( "<%" ~! rep(\' \') ~> "\\\\w+".r <~ rep(\' \') ~ "%>"\r\n        | "<%" ~! error("should not fail here, because of ~!") )\r\n\r\n      def main(args:Array[String]) {\r\n        println( phrase(ok)   (new CharSequenceReader("<% hi %>")))  // [1.9] parsed: ((((<%~List( ))~hi)~List( ))~%>)\r\n        println( phrase(ok)   (new CharSequenceReader("<%    %>")))  // [1.7] error: string matching regex `\\w+\' expected but `%\' found\r\n        println( phrase(buggy)(new CharSequenceReader("<% hi %>")))  // [1.9] parsed: hi\r\n        println( phrase(buggy)(new CharSequenceReader("<%    %>")))  // java.lang.RuntimeException: should not fail here, because of ~!\r\n      }\r\n    }'
1444,'',"Merge branch 'scala/2.10.0-wip' into 2.10.x\nReview by @VladUreche or @jsuereth."
1443,'','AnyVal/value classes restrictions\nThis is merge of #1366, #1300 and some more restrictions that I collected from various value classes tickets.\r\n\r\nReview by @odersky, @retronym.\r\n//cc @hubertp\r\n'
1442,'','SI-6215 Fix compiler crash on private method in value class\nFixes the problem with private defs in value classes by moving the $extension after the name proper rather than before. The previous scheme did not commute with makeNonPrivate:\r\n\r\nI.e. if -ext-> is "generate extension name" and -mnp-> is "make not private" we did get for\r\nmethod foo in value class Foo:\r\n\r\n  foo -ext-> extension$foo -mnp-> Foo$$extension$foo\r\n\r\nbut\r\n\r\n  foo -mnp-> Foo$$foo -ext-> extension$Foo$$foo\r\n\r\nWith the change both variations give the same name:\r\n\r\n  foo -ext-> foo$extension -mnp-> Foo$$foo$extension\r\n\r\nbut\r\n\r\n  foo -mnp-> Foo$$foo -ext-> Foo$$foo$extension\r\n\r\n(resubmit of #1427 with fixed commit message)'
1441,'','Get rid of StringBuilder when parsing comments.\nReview by @VladUreche.'
1440,'','Improved the `scala.language` documentation\nAlso corrected the links in the library rootdoc.\r\n\r\n**Note: We need to fast track this commit so it reaches master in the\r\nnext 12 hours, before we generate the next nightly docs.**\r\n\r\nReview by @odersky'
1439,'',"fixes a bug in a weak cache in runtime reflection\nEntries in SynchronizedTypes.uniques could previously be garbage collected\r\nin-between a successful call to contains and an actual cache lookup.\r\n\r\nThe patch could be a one-liner, but I don't want to use HOFs\r\nin this function, whose prototype is a hotspot in the compiler.\r\n\r\nAlso the fix doesn't touch scalac in any way. It only applies to\r\nreflective universes that provide runtime reflection functionality."
1438,'','Fix for gluttunous raw type creation.\nClassfileParser had a bug which led to it thinking pretty\r\nmuch anything might be a raw type, and thus creating extra\r\nsymbols for no good reason.  When compiling scala.collection,\r\nbefore this change it thought 1094 raw types had passed by;\r\nafterward it thought 237.'
1437,'','Typevar suspension\nReview by @adriaanm.'
1436,'','[backport] Fixed instrumentation code so that it can deal with:\n1. leading imports: object sheet { import math; … }\r\n2. trailing objects: object sheet { … } object other { … }\r\n\r\nReview by @adriaanm\r\n(cherry picked from commit 092eac75a25dc09734c940adb962d62eebfeeaa0)'
1435,'','Fix StringContext documentation.\nIt doesn\'t call "new", as I discovered after some head\r\nscratching.'
1434,'','Fixes deprecation annotations for 2.10.0\nReview by @soc and @gkossakowski'
1433,'','Fixes SI-6421 - Manifest is no longer deprecated.\nHowever, all the methods on Manfiest that are approximations, or not core methods\r\nof ClassTag are still deprecated.   This only allows people to use Manifest without\r\ndeprecation warnings for informational purposes, in lieu of non-experimental\r\nTypeTags.\r\n\r\nNote: This is only for 2.10.0.\r\n\r\nReview by @xeno-by'
1432,'','Fix for SI-6452, leak in ListBuffer.\nThe private var which holds a pointer to the end\r\nof the list was not cleared even when the length of the\r\nbuffer was reduced to 0.'
1431,'','More retrofit of doc model factory.\nReview by @VladUreche.'
1430,'','Fixes for SI-5859, SI-5353, SI-4729.\nMostly to do with varargs.  Review by @jsuereth.'
1429,'','Added utility function shortClass.\nPretty sick of names like\r\n\r\n  scala> typeOf[List[Int]].getClass.getName\r\n  res0: String = scala.reflect.internal.Types$TypeRef$$anon$1\r\n\r\nI wrote this so I can see what the class of some arbitrary\r\nthing is in a way which my little brain can understand.  For\r\nthe example above we get\r\n\r\n  scala> shortClassOfInstance(typeOf[List[Int]])\r\n  res0: String = ArgsTypeRef with AliasTypeRef\r\n\r\nLet\'s pimp a "shortClassName" onto AnyRef and be happy.'
1428,'','Issue/6311\n'
1427,'','SI-6215\nFixes the problem with private defs in value classes by moving the $extension after the name proper rather than before. The previous scheme did not commute with makeNonPreivate:\r\n\r\nI.e. if -ext-> is "generate extension name" and -mnp-> is "make not private" we did get for\r\nmethod foo in value class Foo:\r\n\r\n  foo -ext-> extension$foo -mnp-> Foo$$extension$foo\r\n\r\nbut\r\n\r\n  foo -mnp-> Foo$$foo -ext-> extension$Foo$$foo\r\n\r\nWith the change both variations give the same name:\r\n\r\n  foo -ext-> foo$extension -mnp-> Foo$$foo$extension\r\n  foo -mnp-> Foo$$foo -ext-> Foo$$foo$extension\r\n\r\nReview by @paulp @adriaanm'
1426,'','SI-6422: add missing Fractional and Integral alias in scala package\nIn scala/package.scala we see:\r\n```scala\r\ntype Fractional[T] = scala.math.Fractional[T]\r\ntype Integral[T] = scala.math.Integral[T]\r\n\r\ntype Numeric[T] = scala.math.Numeric[T]\r\nval Numeric = scala.math.Numeric\r\n```\r\nBut Fractional and Integral have an associated object as well, and they should be aliased as well for consistency.'
1425,'','SI-6442 - Add ActorDSL object for actor migration kit\nRemoves `MigrationSystem`, since `ActorDSL` replaces it.\r\n\r\nReview by @vjovanov'
1424,'','SI-6449 Adds version arg to @deprecated usages (non-compiler sources)\n'
1423,'','Fix for SI-5130, precision disappearing from refinement.\nRemove some code, win a prize.'
1422,'','Typer cycles\n'
1421,'',"Issue/6447\n(I assume I'm supposed to open against master now, even though I imagine this goes into 2.10 eventually.)"
1420,'','[Delete] Cleaned up code in LinearSeqOptimized.scala\nDeleted explicit uses of return keyword to adhere to functional style. Return is inferred. '
1419,'',"PluginComponent contributes description to -Xshow-phases. (Fixes SI-6446)\nIn Global, SubComponent is called a phase descriptor, but it doesn't\r\nactually have a description.  (Phase itself does.)  This fix adds\r\na description to PluginComponent so that plugins can describe what\r\nthey do in -Xshow-phases."
1418,'',"Purged DebruijnIndex.\nApparently everyone agrees it's not used anymore."
1417,'',"Merging 2.10.x into master.\nI'm in need of some of the recent 2.10.x work in master.  Review by @jsuereth."
1416,'','add a bit about unicode to scaladoc.\nAn important fix to the scaladoc for string context.  Review by @retronym'
1415,'',"a fork of isValueType and isNonValueType\nfixing the stuff while Paul's sleeping"
1414,'',"Fix class loader issues in instrumentation tests.\nThe ASM ClassWriter uses a wimpy class loader when computing common\nsuperclasses. This could cause a ClassNotFoundException in the\ntransform method (at reader.accept). This exception gets swallowed,\nresulting in a class that should be instrumented to silently not\nbe. The fix is to override getCommonSuperClass to use the correct\nclass loader.\n\nTrivia: This bug was discovered while 'stress-testing' this\ninstrumentation scheme on the Coursera students, to check that they\nimplement one method in terms of another in the assignment."
1413,'','isValueType and isNonValueType\nThis should supersede #1384.  Review by @xeno-by, @retronym.'
1412,'','Changed implementation comments from /** */ to /* */ for ScalaDoc\nThis way ScalaDoc remains reasonable.\n\nThe pull request was already accepted for 2.10.x, but should also be changed in 2.9.x'
1411,'','Bump version number for next dev cycle.\nMigrates the 2.10.x branch for usage in 2.10.1 development.   Infrastructure to follow this tomorrow.\n\n\nReview/Merge by @gkossakowski  when time is up.'
1410,'','Merges 2.10.x\nFixes broken tests and migrates a few new reclection methods to the time-travel refactoring.\n\nReview by @paulp.'
1409,'','Finish docs for string interpolation.\nWhile there\'s no direct JIRA ticket for this, it\'s still a blocker for 2.10.x to have scaladoc which states: "Finish this after SIP is accepted".\n\nHere\'s the finished (or up to your judgement) product.\n\n\nReview by @heathermiller'
1408,'','hardens DirectTest against missing -d settings\nAnd also explicitly specifies -d in a test where I forgot to do that.\nDouble checking never hurts.'
1407,'','Don\'t call `updateInfo` during typing.\nWe resort to `setInfo`, basically removing the previous info. This "fixes" a possible race condition\nin typing ModuleDefs by making the typer always \'win\'. See the assertion stack trace in SI-6429.\n\nreview by @odersky, @gkossakowski '
1406,'','Closes SI-6358. Move accessor generation for lazy vals to typers.\nThis will need to be backported to 2.10.1 once 2.10.0 is out.\n\nReview by @odersky, @xeno-by.'
1405,'','Scaladoc interface fixes, js/css-only\nFixes for bugs\n- [SI-4587](https://issues.scala-lang.org/browse/SI-4587) - Hide all/show all buttons broken\n- [SI-6170](https://issues.scala-lang.org/browse/SI-6170) - Left-navigation panel broken\n\nAdditionally adds scrolling/highlighting to linked-to members in Scaladoc'
1404,'','Scaladoc interface fixes, js/css-only\nFixes for bugs\n- [SI-4587](https://issues.scala-lang.org/browse/SI-4587) - Hide all/show all buttons broken\n- [SI-6170](https://issues.scala-lang.org/browse/SI-6170) - Left-navigation panel broken\n\nAdditionally adds scrolling/highlighting to linked-to members in Scaladoc'
1403,'','Adds Swing wrappers for ColorChooser and PopupMenu\nThis integrates pending non-controversial pull requests from Andy Hicks and John Sullivan.'
1402,'','reflection and macro cleanup\nScaladoc-driven cleanup rocks. Yesterday night the API was quite ugly, now it looks much better.'
1401,'','Generate links to external projects in scaladoc.\nReview by @VladUreche.'
1400,'','Generate links to external projects in scaladoc.\nReview by @VladUreche.'
1399,'',"Much better unchecked warnings.\nLet's give this patch another look.  I burned the entire day on it.  Given that we have to turn off unchecked warnings in 2.10 if we don't put it in, let's put it in.  Look at the code, I think it speaks for itself.  I broke it into six little commits for your reviewing pleasure.\n"
1398,'','Update check-file for SI-6344 test.\nThere were some changes to value classes since pull request\nwas tested so outdated check-file got merged.\n\nPaul confirmed that those changes are going in the right\ndirection so all it requires is to update the check file.\n\nReview by @paulp.'
1397,'','Improves SI-6409 - Add note to string flatMap about evaluation.\nNote:  flatMap has to evaluate the stream until it finds\na head for the new stream.  This is a limitation that will\nexist for 2.10.0, but the bug will remain open.\n\n\nReview by @axel22'
1396,'',"SI-6410 add test cases.\nApparently, the fix didn't get into M7 because it was ported to the 2.10.x branch just after the M7 release. Nevertheless, some additional test cases are here.\n\nreview by @jsuereth"
1395,'','Removes discrepancy between SIP 15 and compiler\nThere was a discrepancy in that the compiler alternatively accepts a val parameter or an unbox method for a value class but SIP 15 does not mention the unbox method. I commented out the line in the compiler that does it. Review by @harrah @paulp'
1394,'','Moving ActorRef API to scala.concurrent.\nMoving ActorRef API to scala.concurrent. \n\nAdding Actor Migration Kit tests.\n\nFixed SI-6305 which was also accidentally merged to master.  \n\nReview by @phaller'
1393,'',"SI-6412 alleviates leaks in toolboxes, attempt #2\nTurns importer caches into fully weak hash maps, and also applies\nmanual cleanup to toolboxes every time they are used.\n\nIt's not enough, because reflection-mem-typecheck test is still leaking\nat a rate of ~100kb per typecheck, but it's much better than it was before.\nWe'll fix the rest later, after 2.10.0-final.\n\nFor more information, see https://issues.scala-lang.org/browse/SI-6412 and\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/eabcf3d406dab8b2\n\nIn comparison with https://github.com/scala/scala/commit/b403c1d,\nthe original commit that implemented the fix, this one doesn't crash tests.\nThe problem with the original commit was that it called tryFixup() before\nupdating the cache, leading to stack overflows."
1392,'','Revert "SI-6412 alleviates leaks in toolboxes"\nThis reverts commit b403c1d7524ccdfc3455b5bc5d5363fdd9c82bec.\n\nThat commit caused tests to fail.\n\nReview by @xeno-by.'
1391,'','Fixes a regression in importers\nSymbol and type caches must be updated prior to tryFixup,\notherwise we risk getting a stack overflow.'
1390,'',"isolates failing tests\nSo that everyone else can continue working on their pull requests,\nwhile I'm looking for the problem."
1389,'','Closes SI-6358. Move accessor generation for lazy vals to typers.\nUntil now lazy accessors were handled somehow special because their symbol was created in typers but the corresponding tree was only added in Refchecks. This irregularity caused serious problems for value classes. Also it now looks just better when lazy value is treated in a similar way as other fields.\n\nI needed to adapt reifier so that it handles the new implementation correctly. Previously it had to recreate lazy val only by removing defdef and renaming. Now we basically need to recreate lazy val from scratch.\n\nThere is one minor change to cps plugin but that is still fine because lazy vals were never really part of the transformation.\n\nReview by @odersky and @xeno-by'
1388,'','Fixed instrumentation code so that it can deal with:\n1. leading imports: object sheet { import math; … }\n2. trailing objects: object sheet { … } object other { … }\n\nReview by @dragos'
1387,'',"Fixing -Xlint and acting on its advice for 2.10.\nSome fixes -Xlint told me about.\n\nMoved dead code out of the standard lint, as it has become super\nnoisy for some reason. Un-overloaded implicits (don't overload\nimplicits!) Eliminated non-nullary method overriding nullary method\nin the Future/Promise code. Made access levels consistent in some\ncollections classes."
1386,'gkossakowski','Better unchecked warnings.\n'
1385,'','SI-6412 some fixes for reflection leaks\n'
1384,'','SI-6417 correctly reifies non-value types\nreview @paulp @gkossakowski @retronym'
1383,'','Issue/5604\nRetargeting #1376 to master.'
1382,'',"Defanged dummy type arguments.\nSpending a few hours on yet another tpe vs. tpeHK bug drove me\nto finally go after the dragon in his cave. I created a separate\nmethod for when you want to receive an invalid type which will\ncause mysterious crashes later if it is out of your sight for five\nseconds.\n\n  def tpeHK : Type // unapplied type params stay unapplied\n  def tpe_* : Type // unapplied type params applied as dummy args\n  def tpe   : Type // if there are unapplied type params, ABORT\n\nActually it doesn't really abort, but I had it print a stack trace\nduring development so I could track down every site which blindly\ncalls tpe and see why they were doing it. Now it only admonishes\nyou under -Ydebug.\n\nThis way is a big step forward: you have to make a choice, which\nis good, because if you choose not to decide you still have made a\nchoice, only mostly what you have chosen is bugs."
1381,'','A wrapper for selecting tests for partest.\n"partest-ack", just what it sounds like.\n\n% tools/partest-ack\nUsage: tools/partest-ack <regex> [ack options]\n\nGiven a regular expression (and optionally, any arguments accepted\nby ack) runs all the tests for which any associated file matches\nthe regex. Associated files include .check and .flags files. Tests\nin directories will match if any file matches. A file can match the\nregex by its contents or by its name.\n\nYou must have ack installed:\n  http://betterthangrep.com/ack-standalone\n\nExamples:\n\n  % tools/partest-ack monad\n  Found 4 tests matching \'ack monad\'\n\n  Testing individual files\n  testing: [...]/files/pos/tcpoly_boundedmonad.scala   [  OK  ]\n  testing: [...]/files/pos/tcpoly_ticket2096.scala     [  OK  ]\n  testing: [...]/files/run/tcpoly_monads.scala         [  OK  ]\n  testing: [...]/files/presentation/callcc-interpreter [  OK  ]\n\n  % tools/partest-ack monad -i  # -i == ignore case\n  Found 12 tests matching \'ack monad -i\'\n\n  Testing individual files\n  [etc]'
1380,'',"SI-6277 fix for isXXX methods in reflection\nThe underlying problem is that some symbols require so-called initialization before certain methods (for example, the Symbol.isSealed method) return reliable results.\n\nThis doesn't bring much trouble in the compiler, because noone usually calls these methods before making sure that the symbol is initialized, but we cannot put this burden onto users of the reflection API.\n\nUnfortunately we cannot just do automatic initialization in misbehaving methods, because that breaks the compiler, causing nasty cyclic reference errors. Quite probably this can be done, but not a few weeks before a major release.\n\nLuckily there's a non-invasive fix. We can decorate runtime reflection symbols with a trait, which overrides the methods of interest and performs initialization prior to calling super. Then the compiler remains unaffected, and reflection users are happy.\n\n***\n\nThe problem is that the cleanest implementation of the fix involves a de-optimization of the compiler (removal of final from Symbol.hasFlag and its buddies). \n\nThere's also an alternative that requires some copy/paste and is more fragile (though the fragility is controlled by a unit test), but its performance characteristics are non-obvious.\n\nTherefore I asked Greg to do performance testing, and these tests ended up with very controversial results. Greg reran the tests again, and the results are more realistic, though it's still unclear what to conclude:\n\n**First test run**\n\n```\n[baseline] 630f1b4 minor cleanup for reflection\nVector_scala\nMean: 747.25ms ± 2.46ms (cov: 0.99%; 63:123)\nscalap-src\nMean: 4317.65ms ± 13.60ms (cov: 0.95%; 35:95)\n\n[approach #1] 6711d6e SI-6277 decorates runtime symbols with auto-init\nVector_scala\nMean: 783.92ms ± 2.59ms (cov: 0.99%; 69:129)\nscalap-src\nMean: 4523.95ms ± 14.05ms (cov: 0.93%; 80:140)\n\n[approach #2] 549267f an optimization for the previous commit\nVector_scala\nMean: 750.01ms ± 2.51ms (cov: 1.01%; 79:139)\nscalap-src\nMean: 4262.53ms ± 14.12ms (cov: 1.00%; 40:100)\n```\n\n**Second test run**\n\n```\n\n[baseline] 630f1b4 minor cleanup for reflection\nVector_scala\nMean: 762.27ms ± 2.54ms (cov: 1.00%; 52:112)\nscalap-src\nMean: 4249.28ms ± 13.90ms (cov: 0.98%; 34:94)\n\n[approach #1] 6711d6e SI-6277 decorates runtime symbols with auto-init\nVector_scala\nMean: 797.82ms ± 2.50ms (cov: 0.94%; 58:118)\nscalap-src\nMean: 4569.82ms ± 15.31ms (cov: 1.01%; 25:85)\n\n[approach #2] 549267f an optimization for the previous commit\nVector_scala\nMean: 749.13ms ± 2.49ms (cov: 1.00%; 83:143)\nscalap-src\nMean: 4321.25ms ± 14.20ms (cov: 0.99%; 34:94)\n```"
1379,'','Remove BoxingConversions from the scala package.\nAnd add it to two test cases that rely on it.\n\nIt is a remnant of the now-removed FlatArray (8cc7de74d).\n\nReview by @odersky.'
1378,'','SI-5918 fixes the ConstantType ugliness\nJava enum values are represented with constants wrapping corresponding Symbols.\nTo find out the underlying type of such a constant one needs to calculate\nsym.owner.linkedClassOfClass.tpe (where sym represents the wrapped symbol).\n\nTo quote the source code, given (in java): class A { enum E { VAL1 } }\n- sym: the symbol of the actual enumeration value (VAL1)\n- .owner: the ModuleClassSymbol of the enumeration (object E)\n- .linkedClassOfClass: the ClassSymbol of the enumeration (class E)\n\nBack then, as far as I can guess, linkedClassOfClass was flaky and didn\'t\nwork well late in the compilation pipeline.\n\nTherefore a fix to SI-1329 introduced a caching facility. Once a ConstantType\nrepresenting the type of Constant(sym) was created (I guess, during typer, when\nlinkedClassOfClass was still working), it cached the underlying type and used\nit in subsequent phases.\n\n***\n\nUnfortunately this solution, being fine for enum values, broke another flavor\nof constants - type wrapping constants that represent classOf (for example,\nConstant(IntTpe) represents the classOf[Int] constant).\n\nType-wrapping constants are special, because their type (e.g. Class[Int] in the\nexample from the previous paragraph) changes as the compilation progresses.\nBefore erasure it\'s Class[something], and after erasure it\'s just Class.\n\nTherefore caching types of such constants might lead to incorrect types\nflying around after erasure, as described in this scala-internals thread:\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/45185b341aeb6a30.\n\n***\n\nNow when the problem is clear, the question is why didn\'t it happen before?\nThat\'s all because of another peculiarity of the compiler.\n\nBefore erasure package references (e.g. in TypeRef prefixes) are represented\nas ThisType(sym), where sym stands for a package class symbol. After erasure\nsuch references are represented differently, e.g. java.lang package looks like\nTypeRef(TypeRef(TypeRef(NoPrefix, root, Nil), java, Nil), java.lang, Nil).\n\nAs described in the aforementioned thread, the incorrect caching strategy\nemployed in UniqueConstantType mixed with other caching mechanisms in compiler\neffectively established a non-clearable cache that goes from Type instances to\ntypes that represent their classOfs, e.g. from String to Class[String].\n\nSo if anyone tried to typecheck a classOf after erasure, he/she would get\nClass[String] instead of the correct Class, and compiler would crash. Right?\n\nNope. Before erasure String is TypeRef(ThisType(java.lang), StringSymbol, Nil),\nand after erasure it\'s TypeRef(TypeRef(...), StringSymbol, Nil), as explained\nabove. Therefore the foul cache would contain two String types: one pre-erasure\ngoing to a pre-erasure Class[String], and another one post-erasure going to\na post-erasure Class.\n\n***\n\nThis shaky balance was broken when I tried to implement class tag generation\nwith shiny Type.erasure method that Martin just exposed in the reflection API.\n\nThe erasure method partially invoked the Erasure phase, and for a String\nit returned its post-erasure representation (with java.lang prefix represented\nas TypeRef, not as ThisType). And after that I used the result of erasure\nto build a classOf for a class tag. Since I did it in a macro, it was\ntyper, a pre-erasure phase.\n\nNow you understand why things broke. That classOf created a Constant\nwrapping a post-erasure representation of String, which cached the incorrect\nnon-erased Class[String] type for a post-erasure type, and things exploded.\n\nYou can imagine my panic! The ScalaDays deadline was near, I still had to do\nfinishing touches to implicit macros (which I actually never had time to do),\nand such a fundamental thing exploded.\n\nActually I figured out the hashing problem, but in the limited time I had\nI failed to understand why exactly it\'s happening, so I introduced the dirty\nworkaround praised in SI-5918 and moved on.\n\n***\n\nThe story doesn\'t end here.\n\nSome time has passed, and I learned a lot about the compiler. I independently\ndiscovered the ThisType -> TypeRef transform that erasure applies to package\nreferences and patched Type.erasure to undo it. After all, Type.erasure is a\nuser-facing API, and users don\'t need to know about post-typer implementation\ndetails. You can read more about this here:\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/6d3277ae21b6d581\n\nFrom what we\'ve learned above, we can see that this Type.erasure fix made\nthe UniqueConstantType workaround unnecessary. But I didn\'t know that.\n\nSo imagine my surprise when I tried to remove that workaround and ran the tests\nonly to see that nothing fails. I went back in time to April when the problem\nfirst manifested, extracted a minimized crasher and tried to use it on trunk.\nAgain, nothing crashed.\n\nAnd only with the help of showRaw, I finally understood that types printed as\n"String" can be wildly different. The rest was a piece of cake.\n\n***\n\nThe irony is that the original reason for ConstantType caching is no longer\nvalid. linkedClassOfClass now works fine (and files/jvm/outerEnum.scala\nagrees with me), so we can remove the cache altogether.\n\nSo why all this story about erasure and package references? Well, I don\'t know.\nI enjoyed uncovering this mystery, so I wanted to share it with you :)'
1377,'','partest now always produces log files with LFs\nreview @paulp @gkossakowski'
1376,'','Issue/5604\nReview by @retronym, @harrah, @odersky .'
1375,'','SI-6388 Remove deprecated items scheduled for 2.11\n'
1374,'',"SI-5918 fixes ConstantType ugliness\nThe problem that made me erect this ugly workaround has fixed itself.\nThe test attached failed to compile back then without a workaround, but\nnow it succeeds. Therefore I'm just reverting ConstantType."
1373,'','Changed implementation comments from /** */ to /* */ for ScalaDoc\nThere were some comments saying "overridden for efficiency" in /** */ brackets\nwhich then were shown in ScalaDoc as documentation for the function.\n\nI changed them to /* */'
1372,'','ActorRef API that uses scala.concurrent.\nThese changes are made to address the change in Akka API for the scala.concurrent package.\nAdded some additional tests.\nMinor cleanup.\n\nReview by @phaller. This review was already done in: https://github.com/scala/scala/pull/1361'
1371,'','fix scaladoc\nReview by @heathermiller or @vladureche'
1370,'','LinkedHashSet scaladoc fix after FlatHashTable->HashTable transiton\n'
1369,'','Regex.unapplySeq should not take Any (Fixes SI-6406)\nThis deprecates unapplySeq(Any) and adds overloaded\nunapplySeq(CharSequence) and unapplySeq(Match), with the\nputative advantage that you can\'t try to extract the unextractable.\n\nRegex is massaged so that the underlying Pattern is primary,\nrather than the String-valued expression.  Regex and its\nunanchored companion (I almost wrote unmoored) share a\nPattern object, so that unapplySeq(Match) can easily test\nwhether the Match was generated by this Regex; in that case,\nthe match result is used immediately, instead of reapplying\nthe regex to the matched string.\n\nThe documentation is massaged to reflect unanchored and also to\nalign with the underlying terminology, e.g., "subgroup" really\njust means "group."\n\nReview by @jsuereth\n'
1368,'','Merge 2.10.x into master\nThe merge pain is accelerating at a disturbing rate.'
1367,'',"SI-6381 Honour -Yrangepos in the REPL\nThe motivation for this, aside from simple consistency, is to make range positions a little more accessible for macro tinkerers.\n\nI wasn't able to find any prior discussion about why this needs to be an option at all, ie why we can't have range positions all the time. Performance? Robustness?\n\nThis is a followup to #1307, which applied the same fix to the Ant tasks.\n\nReview by @paulp or @hubertp"
1366,'','SI-6408: Aligns SIP-15 and compiler implementation\nI reworked SIP 15 and brought the compiler restrictions inline with it. Review by @harrah @paulp @hubertp'
1365,'',"Pull 1352 reformatted\nThis is a rebase of #1352 on 2.10.x plus fixing the line lengths of martin's commit messages."
1364,'',"Pull 1352 reformatted\nThis is a rebase of #1352 on 2.10.x plus fixing the line lengths of martin's commit messages."
1363,'',"Use faster download URL now that artifactory is fixed.\nBump artifactory repo version for faster/more stable access (we're promised).   Will backport to 2.9.x if the build succeeds.\n\nNo Review"
1362,'','Fix for loud test.\n'
1361,'','ActorRef API for the scala.concurrent\nThese changes are made to address the change in Akka API for the scala.concurrent package.\nAdded some additional tests.\nMinor cleanup.\n\nReview by @phaller.'
1360,'',"don't try to create tags w/o scala-reflect.jar\nSince recently type tags have relocated to scala-reflect.jar,\nmeaning that they are no longer always on library classpath.\n\nIn the compiler we do have code that generates type tags, and this code\nis bound to fail if scala-reflect.jar isn't there.\n\nI though this wouldn't be a problem, because type tag materialization\nis only going to be triggered by users explicitly requesting a type tag.\n\nThat's generally true, but I overlooked a corner case. Since we provide\nmanifest <-> type tag compatibility, manifest lookup can sometimes trigger\ntag lookup, which might result in tag synthesis, which blows up like this:\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/166ce4b71b7c46bb"
1359,'',"SI-6407 Better defaults for text encoding\nTraditionally there were two ways of getting a “default” text encoding:\n - Assume UTF-8\n - Use the underlying platform's encoding\n\nWe shouldn't invent an additional, third way to do that."
1358,'','SI-6392 wraps non-terms before typecheck/eval\nWrap non-term arguments of typecheck and eval, so that toolboxes\ncan work with full-fledged files (except for package declarations).'
1357,'','Merge 2.10 into master.\n'
1356,'','Pullreq 1342\n'
1355,'','Pullreq 1339\nThis builds on #1339.'
1354,'','merges scala.reflect.base into scala.reflect.api\n'
1353,'',"Fix problem with names encoding in scalap.\nThe refactoring performed in 020053c321 made use of naming encoding\nmore consisted but introduced a regression in scalap. The problem\nis that the old encoder that scalap had didn't escape any characters\nthat were not included in its opcode list.\n\n`NameTransformer` performs full encoding so it also encodes dots\nthat are being used as separators for packages. Therefore, in order\nto retain the old behaviour we need to split the name by dots before\nfeeding each fragment to `NameTransformer`.\n\nReview by @paulp."
1352,'','Value classes fixes\nI added to me previous pull request a patch that eliminates half boxing. That gets rid of several bad tests, including SI-6385. Review  by @paulp @harrah'
1351,'','Tickets/valueclasses\n'
1350,'',"Fix problem with names encoding in scalap.\nThe refactoring performed in 020053c321 made use of naming encoding\nmore consisted but introduced a regression in scalap. The problem\nis that the old encoder that scalap had didn't escape any characters\nthat were not included in its opcode list.\n\n`NameTransformer` performs full encoding so it also encodes dots\nthat are being used as separators for packages. Therefore, in order\nto retain the old behaviour we need to split the name by dots before\nfeeding each fragment to `NameTransformer`.\n\nReview by @paulp."
1349,'','Value classes: Fixes bridge methods and eliminates half boxing\nI added to my previous pull request a new commit that eliminates half boxing\n\n\nReview by @paulp @jsuereth'
1348,'','SI-6394 fixes macros.Context.enclosingClass\nreview @gkossakowski @adriaanm'
1347,'','SI-6380 Add @throws[Exception]\nCompiler support.'
1346,'','Idea regarding method name\nHi,\n\nI am not sure if I should put this here, please let me know if it is not appropriate.\n\nwhen we want to check the state when doing something, the method might be named as \ncheckStateIsAtWhen(state,action), It seems it is not so nice to understand it. if we can write like\ncheckSateIsAt(state)When(action), it could be more descriptive and easy to read.\n\n\nThanks\n\nJulius '
1345,'',"Possible fix for SI-6344, value class generic signatures.\nI'm not enormously confident that I'm generating the\nright signatures, but it's closer at worst."
1344,'','Fixes SI-5822 & SI-6305 - OSGi tests + fixes\nThis pull requests brings:\n\n* OSGi manfiest generation (via BND) into the ant build.  \n* Felix/equinox tests against the defined bundles.  The "basic" test is enough to ensure that our packages resolve correctly.   \n* A very simplistic reflection test.   Tests basic mirror usage.  Any more and we start breaking (which I\'ll be reporting as bugs as soon as the ability to write tests for them is in the 2.10.x branch).\n* Refactoring scala.tools.nsc.io split package so that it\'s OSGi friendly.\n\nNote: These changes should *not* affect normal dev.  Only running ant test or dist.done will cause the extra bundle creation.   I\'ll have to look into ways to speed it up more in the future.\n\nReview by @xeno-by and @paulp\n\nSpecial thanks to @jamie-allen and @martiell for help on this.'
1343,'','Fixes SI-6354: improved error messages for Dynamic signature mismatches.\nIf an error occurs afer a Dynamic rewriting, augment the error message\nwith the rewritten tree and a hint to check the Dynamic method\nsignature.\n\nReview by @hubertp.'
1342,'',"SI-6336 Now also catches return types\nAs Mark's comments on SI-6336 shows, we also need to disallow value classes\nas return types of structural types. Review by @paulp @harrah"
1341,'','clarify caveats of App trait\nReview by: @heathermiller'
1340,'',"Revert `@static` annotation\nThis pull request reverts all changes related to `@static` feature.\n\nAs it has been discussed on scala-internals this feature should come with SIP in the first place. We need much more time hash out the details of `@static` semantics which we don't have at the moment given how close the RC1 is.\n\nReview by @axel22."
1339,'','enable integer multiplication/divison on FiniteDuration, see SI-6389\nThis fixes a regression introduced in my previous pull request (despite all the review), which made duration arithmetic limited to addition / subtraction in practice (due to losing the FiniteDuration static type).\n\nReview by: @phaller @axel22 @jsuereth'
1338,'','existentially typed macro expansions now work fine\nreview by @paulp @odersky'
1337,'','Wip 6389 finite duration mult\nThis fixes a regression introduced in my previous pull request (despite all the review), which made duration arithmetic limited to addition / subtraction in practice (due to losing the FiniteDuration static type).\n\nReview by: @phaller @axel22 @jsuereth '
1336,'','SI-6388 Removes deprecated functionality for 2.11\nNot in this commit:\n - Deprecated methods of List (does Paul still want to keep them?)\n - @serializable annotation (removal needs multiple steps)'
1335,'','improved reflection documentation\n'
1334,'','SI-6384 - avoid crash due to optimization in 2.10 CPS plugin\nThis fixes a regression in the 2.9.x branch (code combining CPS and try-catch crashing the compiler). The fix is simply undoing an optimization that was done in the 2.10 CPS plugin (replacing a function with only a match by a match on an empty tree; this optimization seems to work only with virtpatmat).\n\nReview by @adriaanm'
1333,'',"Removed many @inline annotations and final modifiers.\nIt is my belief that these @inlines and finals landed between\nunhelpful and harmful. I am sure this will be disputed in some\ncases. It's too much and too difficult to measure except in the\naggregate unless we have specific @inline sites to discuss.\nI don't know upon whom the burden of proof lies.  I think we\nshould err on the side given here, since there is no evidence\nof any consistent rationale being applied and it is easy to\nverify the negative impact scala compiler inlining can have on\nhotspot's far more sophisticated inlining."
1332,'','Fix for SI-6384\nThis fixes a regression in the 2.9.x branch (code combining CPS and try-catch crashing the compiler). The fix is simply undoing an optimization that was done in the 2.10.x CPS plugin (replacing a function with only a match by a match on an empty tree; this optimization seems to work only with virtpatmat).\n\nReview by @adriaanm'
1331,'','SI-5943 toolboxes now autoimport Predef and scala\nPreviously tb.typeCheck used default typer, which builds upon NoContext.\nChanging the context to analyzer.rootContext(NoCompilationUnit, EmptyTree)\nfixed the missing imports problem.'
1330,'','Value classes error message improvements\nThis builds on #1326.'
1329,'',"SI-5692 better error message\nDoesn't fix the underlying issue with macros and type inference,\nbut at least now the error message says exactly what needs to be done\nto make the error go away."
1328,'','SI-5942 toolboxes now reset front ends\nFrontEnd => Reporter proxy now correctly redirects\nflush and reset back to the underlying front end.'
1327,'','SI-6287 fixes synthetic symbol clashes in toolbox\nApparently synthetic classes like $anonfun$1 have two properties:\n1) Their names are generated using a counter unique to a compilation unit\n2) After flatten they levitate to the nearest enclosing package\n\nAs a result if we use an empty package to wrap toolbox codegen,\nthen this package will soon be overflown by $anonfun$1 symbols, because:\n1) New codegen session = new compilation unit = new counter which starts at 0\n2) New codegen session = new anon funs that end up as children of empty package\n\nCreating a freshly named package for each codegen session fixed the problem.\nNow anonfuns from different sessions end up with different parents.'
1326,'','Fixes SI-6358\nLocal lazy accessors are an annoying irregular case. This change makes them work with value classes.\nResubmitted after fixing build failures. Review by @paulp @hubertp'
1325,'','Fixes SI-6337 by disallowing nested value classes.\nIt seems for the moment too hard to allow this, and the functionality to have value classes wrap other value classes does not seem essential. Review by @paulp, @harrah'
1324,'','Scala reflection now supports Java CRTP\n'
1323,'',"Fix for SI-6245 with workaround for SI-2296.\nprotected/super accessor issue: Don't subvert the creation of the\nstandard protected accessor with the java interop accessor. For\nSI-2296, the compiler emits an error instead of causing an illegal\naccess error at runtime.\n\nAdapted from e498fac7fdbda3187a2a4fffcdf7fa4f9ddb7ac8.\n\nConflicts:\n\n\tsrc/compiler/scala/tools/nsc/typechecker/SuperAccessors.scala\n\nReview by @jsuereth."
1322,'','Topic/empty array\n'
1321,'','Fixed SI-6353: applyDynamic with sugared applications\n- Accept sugared applications such as x(1) if x implements Dynamic,\n  so x(1) gets re-written to x.apply(1).\n- When picking a dynamic rewrite for x.apply(1), favor applyDynamic\n  instead of the default selectDynamic.\n\nReview by @paulp or @gkossakowski.'
1320,'','moves isImplicit from TermSymbol to Symbol\nBecause classes can also be implicit.'
1319,'','Eugene pullreq 1306\nA few lines of #1306 which were independent of #1314.'
1318,'','SI-6336 Disallows value types in structuralal refinements\nStructural refinements already have a number of restrictions, e.g. cannot refer to\ntype parameters of enclosing classes. We need to disallow value classes as well. Review by @harrah @paulp'
1317,'','SI-6336 Disallows value types in structural\n'
1316,'','Fixes SI-6337 by siallowing nested value classes.\nIt seems for the moment too hard to allow this, and the functionality to have value classes wrap other value classes does not seem essential. Review by @paulp @harrah'
1315,'','Fixes SI-6358\nLocal lazy accessors are an annoying irregular case. This change makes them work with value classes.'
1314,'','Pullreq 1306\n'
1313,'','Fixes SI-6260 \nand also has a small cleanup for OverridingPairs. Review by @paulp @retronym'
1312,'','Topic/gitattributes\n'
1311,'','deals with magic\nreview by @paulp @retronym'
1310,'','test suite for SI-6329\nreview @jsuereth'
1309,'',"More relative path elimination.\nSome names I missed in 55b609458fd .\n\nHow one might know when one is done:\n\n  mkdir scratch && cd scratch\n  mkdir annotation beans collection compat concurrent io \\\n    math parallel ref reflect runtime scala sys testing \\\n    text tools util xml\n  scalac $(find ../src/library -name '*.scala')\n\nUntil recently that would fail with about a billion errors. When it\ncompiles, that's when you're done.  And that's where this commit\ntakes us, for src/library at least."
1308,'','SI-4478 Replaces wrt with (hopefully) slightly improved wording.\n'
1307,'','Make the scalac Ant task recognise -Yrangepos\nThe scalac Ant task was not setting up the Scala compiler to produce\nrange positions when specifying the -Yrangepos flag in its addparams\nproperty.'
1306,'','SI-6356 reflection now supports Java annotations\n'
1305,'','Merge 210\n'
1304,'','Topic/empty array optimization\n'
1303,'','Eliminate breaking relative names in source.\nThese things are killing me.  Constructions like\n\n  package scala.foo.bar.baz\n  import foo.Other\n\nDO NOT WORK in general.  Such files are not really in the\n"scala" package, because it is not declared\n\n  package scala\n  package foo.bar.baz\n\nAnd there is a second problem: using a relative path name means\ncompilation will fail in the presence of a directory of the same\nname, e.g.\n\n  % mkdir reflect\n  % scalac src/reflect/scala/reflect/internal/util/Position.scala\n  src/reflect/scala/reflect/internal/util/Position.scala:9: error:\n    object ClassTag is not a member of package reflect\n  import reflect.ClassTag\n         ^\n  src/reflect/scala/reflect/internal/util/Position.scala:10: error:\n    object base is not a member of package reflect\n  import reflect.base.Attachments\n                 ^\n\nAs a rule, do not use relative package paths unless you have\nexplicitly imported the path to which you think you are relative.\nBetter yet, don\'t use them at all. Unfortunately they mostly work\nbecause scala variously thinks everything scala.* is in the scala\npackage and/or because you usually aren\'t bootstrapping and it\nfalls through to an existing version of the class already on the\nclasspath.\n\nMaking the paths explicit is not a complete solution -\nin particular, we remain enormously vulnerable to any directory\nor package called "scala" which isn\'t ours - but it greatly\nlimts the severity of the problem.'
1302,'','cleaning up reflection\nreview @paulp @retronym @gkossakowski'
1301,'',"Made 'def clone()' consistent with parens everywhere.\nFor the reference of others,\n\n  ack --files-with-matches 'def clone[:\\s]' src\n\nis how you might find out who needs fixing."
1300,'','SI-6359 Deep prohibition of templates in value class\nThis seems to have been the intent of 95d532 / SI-5882.\n\nThe method local object/classes are also generated with `outer` pointers, so we should also prohibit them, at least for now.\n\nReview by @paulp or @odersky'
1299,'',"Fix for SI-6245 with workaround for SI-2296.\nprotected/super accessor issue: Don't subvert the creation of the\nstandard protected accessor with the java interop accessor. For\nSI-2296, the compiler emits an error instead of causing an illegal\naccess error at runtime.\n\nOnce 2.10 is released, we can investigate a full fix for Si-2296, which is tricky.\n\nReview by @paulp."
1298,'','SI-5767 fix + protecting public FlatHashMap API\n- `LinkedHashSet` implementation moved from `FlatHashTable` to `HashTable`\n   - `remove` time reduced from O(n) to O(1)\n   - `diff` time reduced from O(n^2) to O(n)\n- A bit of refactoring in `HashTable` serialization code\n- Putting an element into hash map now avoids double hash code/hash index\n  calculation (see `HashTable#findOrAddEntry`)\n- Bugfix: compiler/LambdaLift occasionally breaks LinkedHashSet integrity\n- Making public methods of FlatHashTable protected\n  As discussed in https://groups.google.com/forum/?pli=1#!topic/scala-internals/1yABM30POS0'
1297,'',"Fixes binary repo push for new typesafe repo layouts.\nThis adds a new/fixed push.jar and adapts the binary-repo-lib script to use different URLs\nfor pulling than pushing.\n\nThis also adjustst the script to attempt the backup repo in case new artifacts haven't\nsynched to the fast/stable repository.\n\n\nBACKPORT from 2.10.x\n\nNo Review if tests pass."
1296,'','210 errors and trees\nReview by @jsuereth.'
1295,'','improvements for type tags\n'
1294,'',"Fix for SI-6367, exponential time in inference.\nThis pathology is not new - it can be witnessed in 2.9,\nwhere compiling the test case enclosed with this ticket with\n-Yinfer-debug will print a line with (pinky to lips) one million\ntype parameters. 1048576 actually, aka 2^20. But in 2.9 we were\nsomehow getting away with creating the list, presumably by not\nspending much time looking at it. Somewhere between there and M1,\nthat changed.\n\nI cut it off at the knees - don't create a list of one million\nupper bound constraints when 1 will suffice. It would not be too\nsurprising if this proves to be a boon for performance."
1293,'','Fixes binary repo push for new typesafe repo layouts.\nThis adds a new/fixed push.jar and adapts the binary-repo-lib script to use different URLs\nfor pulling than pushing.\n\nReview by @lrytz + use by @xeno-by  / @paulp\n\nNote to self: Cherry pick this against 2.9.x when able.'
1292,'',"Fixes SI-6259.  Unable to use typeOf in super call of top-level object.\nThis works around the issue of the inability to use classOf for top-level object classes by inventing a new\nanonymous class and instantiating it just to grab its class.  Since the class is a nested type of the\ntop-level object it'll be in the same classloader unless some kind of evil behavior is afoot.\n\nThis patch should be undone if ever SI-2453 ever gets fixed, or we wind up with a direct way to grab\nthe class of an object.\n\nReview by @xeno-by and @paulp"
1291,'','Fix for SI-6315 & new actor migration tests \n'
1290,'',"A little cleanup along the Any to AnyRef trail.\nFollowup to 35316be and d3f879a.\n\n - Remove obsolete comments and replace them with a test.\n - Don't emit error addendum unless we know we're dealing\n   with a value class.\n\nreview by @paulp"
1289,'',"Avoid spurious warning for `def foo = x.foo`.\nFollowup to SI-6276 (#1275)\n\nReview by @paulp, and by checking the build logs on Jenkins to ensure the new warning isn't issued spuriously any more."
1288,'',"Fixes SI-6268.  Improper multistring setting unparse.\nFixes SI-6268.   Review by @paulp and @lrytz.\n\nThis reverts a refactoring from https://github.com/scala/scala/commit/963aabbeb4\n\nMultiString settings would not properly write an `unparse` string that could be reparsed, leading to failures when forking scalac in ant.  Specifically, if a setting was empty, it was getting added to the unparse string and causing scalac to fail.   This at least reverts to previous behavior.   Whatever we do here has to work with the @file style argument reading and can't place empty options on the command line.   \n\nNote:  The test is not automated yet, so unfortunately, we need to improve ANT testing capabilities to prevent regressons"
1287,'','Disable test t2868\nit keeps failing randomly, e.g. http://scala-webapps.epfl.ch/artifacts/e3b0c7abbf637dacce7bcd7b69d5655820e8e714/buildLog.txt'
1286,'','Topic/inliner logging\n'
1285,'','First half of fix for ticket 6260.\nThis commit fixes the first half of SI-6260. Duplicate methods are no longer generated.\nWe get another problem (a ClassCast exeption) which is a much deeper problem. \n\nIt looks like we will have to disallow again value classes that wrap over a type parameter. Folliowing up in scala-sips.\n\nReview by @paulp @retronym'
1284,'','SI-6162 Adds private[scala] @deprecatedInheritance/@deprecatedOverriding\nSecond try submission of #1026\n\nReview by @paulp, @soc'
1283,'','SI-6162 Adds private[scala] @deprecatedInheritance/@deprecatedOverriding\nSecond try submission of #1026\n\nReview by @paulp, @soc'
1282,'','Minor cleanups of code/comments related to value classes\nRubber stamp by @jsuereth'
1281,'',"Fix SI-4813 - Clone doesn't work on LinkedList.\n* Added extensive test for clone across all standard mutable collections\n* Fixed clone implementations when needed so they work.\n\n\nReview by @axel22 or @lrytz"
1280,'','SI-191: add the ability to link to external projects. Review by @VladUre...\n...che.'
1279,'',"fix usage of Duration in Promise impl\n- correctly treat MinusInf and Undefined\n- don't toMillis in the timeout message (could be MinusInf)\n- also notice that Inf did not actually wait unbounded\n- and further notice that tryAwait swallows InterruptedException instead\n  of bailing out early => changed to do so and added throws annotation\n- also removed some unused imports of Duration"
1278,'','SI-6345 Remove scala.runtime.ScalaRunTime.Try\n'
1277,'','SI-6278 fixed: synthetic implicit def must sort with its associated impl...\n...icit class\n\nAdd a case to the ad-hoc (or add-hack) addSynthetics to keep the trees close.\n\nThis relies on naming convention, so changes in naming of the implicit def\nwould require an update here.\n\nBack-applied patch to 2.10.x.'
1276,'','SI-6326. Makes getClass of a value class work.\nReview by @paulp @jsuereth'
1275,'','SI-6276 Warn on def or val that trivially loops infinitely\nReview by Mr Lint, aka @paulp.'
1274,'',"SI-6335 More precise location of the implicit class synthetic method.\nOne approach would be to disallow an implicit class in a template\nthat already has a member with the same name.\n\nBut this commit doesn't do this; instead it uses `isSynthetic` to\nfind the synthesized implicit conversion method from the potentially\noverloaded alternatives."
1273,'','More old code cleanup. Review by @VladUreche or @heathermiller.\n'
1272,'','Fix for SI-6340, error message regression.\n'
1271,'','SI-6331 deconst If type / refine equality of floating point Constant types.\nReview by @paulp\n\n/cc @xeno-by \n\n1. I\'d suggest you remove `ConstantType#isNaN` from `scala.reflect.api.Constants#ConstantApi`.\n2. Do you expect this output when compiling a macro in partest?\n\n```\nquick.partest:\n[scalacfork] Compiling 1 file to /Users/jason/code/scala/build/quick/classes/partest\n[scalacfork] // produced from source-/Users/jason/code/scala/src/partest/scala/tools/partest/package.scala,line-98,offset=2789\n[scalacfork] object Test extends App {\n[scalacfork]   val $u: c.universe.type = c.universe;\n[scalacfork]   import $u._\n[scalacfork]   val tpe = evidence$1.in($m).tpe\n[scalacfork]   println(tpe)\n[scalacfork] }\n[scalacfork] // produced from source-/Users/jason/code/scala/src/partest/scala/tools/partest/package.scala,line-98,offset=2789\n[scalacfork] object Test extends App {\n[scalacfork]   val $u: c.universe.type = c.universe;\n[scalacfork]   val $m: $u.Mirror = c.universe.rootMirror;\n[scalacfork]   import $u._, $m._\n[scalacfork]   val tree = Block(List(Apply(Select(Select(build.This(staticPackage("scala").asModule.moduleClass), newTermName("Predef")), newTermName("println")), List(Apply(Select(Apply(Select(Select(build.Ident(staticPackage("scala")), newTermName("StringContext")), newTermName("apply")), List(Literal(Constant("trace> ")), Literal(Constant("\\\\nres: ")), Literal(Constant(" = ")), Literal(Constant("\\\\n")))), newTermName("s")), List(exprCode.in($m).tree, exprType.in($m).tree, a.in($m).tree))))), a.in($m).tree)\n[scalacfork]   println(tree)\n[scalacfork] }\n[propertyfile] Updating property file: /Users/jason/code/scala/build/quick/classes/partest/partest.properties\n[stopwatch] [quick.partest.timer: 10.808 sec]\n```'
1270,'','Fix for SI-6327, wrongness in Dynamic.\n'
1269,'','Wip/si 6333\nFix for SI-6333 - Try throws from combinators\n\nAlso reduces some object allocations and does minor style cleanup and more documentation.  Note:  Failure + Success are undocumented, and we should fix that!  Feel free to push back on this PR if you want, I was mostly focused on the bugs.\n\n\nReview by @mariusaeriksen (PLZ? KTHX) and @viktorklang or @phaller\n\n'
1268,'','removes isLocatable from the public API\nHard to come up with a good name, would need extensive documentation\nto justify its purpose => no go. If necessary we can always reintroduce\nit later in 2.10.1.'
1267,'','fixes for class tags and manifests\nreview by @jsuereth'
1266,'',"removes Type.isConcrete\nThis method was no longer used anywhere, except for a place where it wasn't\nreally necessary.\n\nIts implementation is non-trivial, and I have doubts about it, so I propose\nto remove it altogether instead of living with some dubious code necessary\nfor some dubious matter."
1265,'','SI-6318 fixes ClassTag.unapply for primitives\nClassTag.unapply now takes a class tag itself, so that it can preserve\nboxiness of value classes when performing subtyping tests.'
1264,'','SI-6277 decorates runtime symbols with auto-init\n'
1263,'','Removes @deprecated elements scheduled for removal in Scala 2.11\n'
1262,'',"Fixes SI-6271 - Missing isEmpty override for views.\nGenIterableView didn't override isEmpty for filter to look at *filtered* iterator, but was instead pulling\nunfiltered iterator and causing issues.   Chalk up another bizzare bug to lack of insight/visibility into\nlinearization and what havoc overriding new methods can spew on our library.\n\nReview by @alex22, @paulp or anyone who loves inheritance (not the $$ kind)."
1261,'','several fixes to scala.concurrent.util.Duration\n- add test cases (migrated from Akka sources)\n- add overflow checking (will throw IllegalArgumentException instead of\n  giving wrong results)\n- make string parsing more precise when giving >100days in nanoseconds\n- make method signatures more precise in retaining FiniteDuration\n  throughout calculations\n- fix mul/div of infinities by negative number\n- add Ordering for Deadline (was accidentally left out earlier)'
1260,'',"Issue/5031\nResubmit of PR #1208\n\n@paulp gave me his personal approval for this patch, since he wrote it.  The only new thing added is ordering of partest files so that we beat cross-platform issues.\n\nNo further review needed, but if @phaller or @lrytz want to look at the partest fix, feel free.  It's two lines."
1259,'','[backport] Fixed positions\n.. in de-aliased special symbols and for automatically added `apply` methods.\n\nManual Backport of 3415436b67ae7889a11ce2537576ca49b328aecc.\n\nreview by @jsuereth\n\nFixed #5064, thanks to @paulp who showed the right direction (and how to test it).'
1258,'','Backport/instrumenter fixes part 2\nBackport a second batch of instrumenter fixes from Martin (pull #1219).\n\nreview by @lrytz.'
1257,'','[backport] Allow nested calls to `askForResponse` in the presentation compiler.\nFix #6312.\n\nreview by @odersky,@lrytz.\n\n(cherry picked from commit 4f932df552fd2a9e1af31bc3b5fbbfeeaa15feed)'
1256,'','Merge 210\n'
1255,'','Fix SI-6306 on testcase\nKeep track of args which are passed in by-name positions, and avoid\ninlining those.\n\nThanks to all commenters on SI-6306, in particular to Jason Zaugg for\ndiagnosing the underlying fault.\n\nMoreover, clarify comment and add testcase.\nReview by @lrytz.'
1254,'','Removes @deprecated elements scheduled for removal in Scala 2.11\n'
1253,'','Removing duplication from Duration.\nI don\'t know what good it is to have code review if we are checking\nin code like this. We must raise the bar, people. When the\njustification for code being in the standard library is borderline\nat best - as it is here - then the code must be of exceptional\nquality. This code is not of exceptional quality.\n\nMostly these are not behavioral changes, but:\n\n - I removed finite_? as it is a gratuitous deviation from\n   every isXXX method in the world.  This isn\'t ruby.\n - I removed all the regexps, which only made things complicated\n - I removed all the unnecessary casts, which is to say, all of them\n - I made more things final, sealed, and private\n - The unapply structure was all wrong; returning Option[Duration]\n   on the string unapply meant you\'d have to say\n     case Duration(Duration(x, y)) => ...\n   So I fixed apply and unapply to be symmetric.\n - And I removed the "parse" method, since it was doing what\n   apply is supposed to do.\n\nThanks to viktor klang for DurationConversions.'
1252,'','Remove extraneous null check in RedBlackTree\nThis changes the RedBlackTree foreach method to be be a simple wrapper around\na slightly shorter function, without an unnecessary nullity check.'
1251,'','Fixed positions in de-aliased special symbols..\n..and for automatically adde.d `apply` methods.\n\nFixed #5064, thanks to @paulp who showed the right direction (and how to test it).\n\nreview by @paulp.'
1250,'','Test case for SI-6301.\nAnd misc changes/comments based on pull request feedback\nfrom @retronym.'
1249,'','Cleanup makeShadowingTable, save some memory. Review by @VladUreche or @...\n...heathermiller.'
1248,'','Fixes SI-6285 - ParIterableLike no longer says sequential foreach.\nReview by @alex22, @phaller or anyone into documentation + collections.'
1247,'',"Fix t6114 - ++ on JList wrapper modifies underlying collection.\nWe solve this by overriding clone for JListWrapper to actually do a full clone.\n\nNote: This fix may need to be included other places, *but* we're not sure we've cloned the collection sensibly.  I.e.  is ArrayList a good default?\n\nReveiw by @alex22 or @paulp"
1246,'',"SI-6274 Fix owners when eta-expanding function with byName param\nWhen eta-expanding a function that takes a by-name param the local definition\nfor the corresponding argument is a function-0\n\n  val eta$1 = () => { argument-to-by-name }\n\nIf there are any definitinos in the `argument-to-by-name`, the symbol\nowner needs to be changed to the anonymous function's symbol.\n\nTo know the function symbol in eta expand, we need to type-check the\nfunction, and therefore pass the `Typer` instance to `etaExpand`."
1245,'','Allow nested calls to `askForResponse` in the presentation compiler.\nFix #6312.\n\nreview by @odersky,@lrytz.'
1244,'','Fixes typos in the ScalaDoc of StringContext\nFixes small errors in the documentation like the elimination of double-if or \ndouble-that.\n\nReview: @heathermiller\n'
1243,'','Cleanup makeShadoingTable,save some memory. Review by @VladUreche or @he...\n...athermiller.'
1242,'','Made Dynamic extend Any.\nSo it can be used in value classes.'
1241,'','SI-6295: Make DocType take optional ExternalID, as documented.\nDeprecates non-optional constructor and adds additional apply method. The\nlatter allows one to construct DocType("html"), which suffices if one intends\nonly to support modern web browsers.\n\nAdds a note regarding the incorrect extractor. No mechanism exists to deprecate\nor otherwise warn users of the upcoming change which will render use of the\ncurrent extractor silently non-functional.'
1240,'','Fix for SI-5064, mis-positioned tree.\nWhen adding explicit Foo.this prefixes to unqualified identifiers,\ngive the This tree an offset position, not a range position.'
1239,'',"Backport method askForResponse\nReview by @jsuereth.\n\nAdds method askForResponse\n\nAdds method askForResponse which returns a response immediately instead of waiting for a result. That way, one can wait for an ask's result using a timeout.\n(cherry picked from commit e896c0ab2d36740207f91086262e9feb4fc1c32d)\n\nConflicts:\n\n\tsrc/compiler/scala/tools/nsc/util/InterruptReq.scala"
1238,'','Clear undoLog more frequently. Saves accumulated 300M when running scala...\n...doc.This is certainly a hack, but a hack it was anyway...'
1237,'','Added more variants to achieve getLinkPos\nReview by @lrytz\n\ngetLinkPos is known to be flakey. This commit tries some variants and logs what failed.\n(cherry picked from commit 848756d47b980472996cd83409bda11f8fb5cac0)\n\nConflicts:\n\n\tsrc/compiler/scala/tools/nsc/interactive/Global.scala'
1236,'','Backport `Two fixes for the worksheet instrumenter`\n(1) Handle empty worksheets\n(2) Handle for expressions\n\nReview by @lrytz\n(cherry picked from commit 20dc9cd7848863097b07d1cb84ae3f729f7e94da)(cherry picked from commit 32cb44f9136a03e762baba420c0be2f4c27f4354)\n\nConflicts:\n\n\tsrc/compiler/scala/tools/nsc/ast/parser/Parsers.scala'
1235,'','Formatting cleanup in def typed.\nAs seen on scala-internals.'
1234,'','Topic/inliner logging\nInliner (and other) logging cleanup.'
1233,'','Fix for SI-6295 (DocType constructors).\nDeprecates non-optional constructor and adds additional apply method. The\nlatter allows one to construct DocType("html"), which suffices if one intends\nonly to support modern web browsers.'
1232,'','Topic/210 errors and warnings\n'
1231,'','Fix for SI-6273, repl string interpolation.\nAs usual the hard part is tracing through all the\nneedless abstraction.  Begone, 25 layers of parsing error\nissuing methods!'
1230,'',"SI-6278 fixed: synthetic implicit def must sort with its associated impl...\n...icit class\n\nAdd a case to the ad-hoc (or add-hack) addSynthetics to keep the trees close.\n\nThis relies on naming convention, so changes in naming of the implicit def\nwould require an update here.\n\nThis revised PR includes local names that don't require special software to read.\n\nReview by @paulp or @retronym"
1229,'','Merge 210\n'
1228,'','More useful -Xlog-implicits output.\nThe test exercises the most important case, when implicits are invalidated through shadowing.\n(See SI-4270)\n\nReview by @hubertp'
1227,'','Fix for SI-6034, covariant value classes.\nMy summary in the ticket was incorrect. The problem was that the\nclass type parameters were being cloned for the method and being\nallowed to keep their variance. I threw in an assertion for anyone\nattempting to create a method type with variant type parameters,\nbecause hey, why should we allow such madness.'
1226,'','Topic/unresolved overloads\nSpecialization and overloaded types.  Review by @axel22'
1225,'','Fixes SI-6290 by creating real instnaces of language features.\nReview by @paulp or @odersky'
1224,'',"Fix SBT sha resolution for new * in sha files.\nFollow on to Eugene's patch so that * in desired.sha1 files doesn't hose SBT resolution.\n\n\nReview by @vigdorchik or @lrytz"
1223,'','On --grep, partest must dir.list to descend into subdirs (fixes SI-6296)\nIn addition, always use UTF-8 when reading test files (and not default),\nsince some tests exercise UTF-8.\n\nAlso, quote "$JAVACMD" and convert it (and $JAVA_HOME) for cygwin, where\n$JAVACMD is likely to include a space.\n\nReview by @paulp or @axel22\n'
1222,'',"SBT build now works with SBT 0.12.\nAlso fixed partest explosion that happened after partest redesign.\n\nThe best part is, I was able to fix the partest integration using incremental compilation.   I'm moving myself 100% off the ant build at this point.  Going to use this and improve it while fixing 2.10.x bugs.\n\nReview by @lrytz"
1221,'','Use proper Option methods instead of .get in scaladoc ModelFactory.\n'
1220,'','Merge 210\nMerge 2.10.x into master.'
1219,'','More worksheet nstrumentation changes\nMade worksheet instrumentation more robust, eliminated unneeded code. Review by @dragos'
1218,'','Reflection Sealing\nThis pull request seals the isXXX and asXXX methods in the traits\ndefined in the cake piece `scala.reflect.base.Symbols`. All isXXX\nand asXXX methods which are known at a particular level to return\n`false` or to throw an exception respectively (as defined in the\nbase abstraction) are overridden with a final method with the same\nbehavior as the overridden one.\n\nTwo of these methods cannot be overridden as this leads to a build\nerror (see https://issues.scala-lang.org/browse/SI-6298).\n\n@paulp: Do you have an idea what happens here regarding this build problem?\n\nReview: @xeno-by'
1217,'','Fix SI-6294.\nAccomodates the fact that a `val` is inlined into a `def` if it is final and the right hand side is a constant.\n\nReview by @paulp.'
1216,'','Fix SI-6294.\nAccomodates the fact that a `val` is inlined into a `def` if it is `final` and the right hand side is a mere literal.\n'
1215,'','Reflection tuning\nThis pull request applies some tuning changes to the reflection library:\n1) the traits scala.reflect.api.FlagSets, scala.reflect.api.Mirrors\n   and scala.reflect.internal.Importers extend their corresponding\n   trait in the base layer of the cake.\n2) method isType and asType in trait TypeSymbolBase is declared final\n3) small changes in the docs.\n\nReview: @xeno-by'
1214,'','Fixed cloning a double-linked list.\nStill need to determine if this is a systemic\nissue and needs to be addressed higher in the\nlinked list hierarchy.   For now, just\nfixing the reported bug, with a note here\nfor other maintainers.\n\n\nReview by @alex22 or @paulp.  Let me know if you think I need to bump the clone method higher in the LL hierarchy.'
1213,'','Expanded the reach of value classes.\nNow extending AnyVal:\n\n - RichInt, RichDouble, etc.\n - ArrayOps.ofRef, ofBoolean, etc\n - StringAdd\n - StringFormat\n\nThe rest of it is the changes necessary to enable those.'
1212,'',"Two fixes for the worksheet instrumenter\nThis is Martin's fix for the worksheet, I'm just the messenger. I guess I can't be my own reviewer, so let's say review by @rytz.\n\n(1) Handle empty worksheets\n(2) Handle for expressions\n\nReview by @dragos\n(cherry picked from commit 20dc9cd7848863097b07d1cb84ae3f729f7e94da)"
1211,'','Adding documentation to language.scala to try to ward of people accessin...\n...g feature vals.\n\nThis relates to: https://issues.scala-lang.org/browse/SI-6290\n\nbasically, we need to fend people off of instantiating this.  Better soltuions/ideas appreciated, but wanted to get a bare minimum in for 2.10.x.\n\nReview by @odersky or @paulp'
1210,'','Fix crasher from bug in maven ant tasks.  Yippie.\nReveiw by @lrytz.'
1209,'','Closes SI-6227\nI added some general hook where one can add validation code before a name conflict involving at least one implicit symbol is reported. Review by @paulp'
1208,'','More fix for invalid companions.\nEliminated InvalidCompanions exception entirely.  Anyone\'s\nguess why we unholstered this exception every time someone\ncalls "isCodefinedWith" rather than when symbols are created.\nI moved the check into Namers, where it can be done once and\nwith sufficient finesse not to crash so much.\n\nWith this patch in place, "playbench" can be built with java7.'
1207,'','hotfix for SI-6293\nWe need to hide scala.reflect.macros.internal from scaladoc,\nnot the entire scala.reflect.macros.'
1206,'','Fix for SI-6283, no abstract value classes.\nThe needless abstraction penalty was in full flower in Namers.\nI managed to find somewhere else to issue this error, where I\ncan still just write an error message without tracking down an\nenumeration in a separate file and inventing an intermediate\nname for the enum member.'
1205,'',"Fix for SI-6245, protected/super accessor issue.\nDon't subvert the creation of the standard protected\naccessor with the java interop accessor."
1204,'','Rank based take/drop/slice\nTree navigation based on node rank is faster than using compare\nmethod. rank is simply count(tree.left) + 1.'
1203,'',"Fix version to be the first word.\nCurrent scheme doesn't work (because the files don't contain jar_name?)."
1202,'','further polishing of reflection\n'
1201,'','Fix SI-4581.\nSpecifically, the final flag on the generated static field\nis no longer ommitted.\n\nFix 2 failing test-cases.\n\nEmpty check file `t4581.check` is there until we fix https://issues.scala-lang.org/browse/SI-6289.\n\nReview by @paulp.'
1200,'','Fix SI-4581.\nSpecifically, the final flag on the generated `static` field\nis no longer ommitted.\n\nReview by @paulp.\n\nThe empty check file is there until we get https://issues.scala-lang.org/browse/SI-6289 fixed.'
1199,'','exposes Symbol.children\nAs requested in http://stackoverflow.com/questions/12078366/'
1198,'','Fixes SI-6279.\nThis commit additionally changes the signatures of certain collection\nmethods to accept `GenTraversableOnce` instead of `TraversableOnce`.\n\nReview by @jsuereth.'
1197,'','removes Symbol.kind and Type.kind\nuse Universe.showRaw instead:\n\nscala> import scala.reflect.runtime.{universe => ru}\nimport scala.reflect.runtime.{universe=>ru}\n\nscala> ru.showRaw(typeOf[Int])\nres0: String = TypeRef(ThisType(scala), scala.Int, List())\n\nscala> ru.showRaw(typeOf[Int].typeSymbol, printKinds = true)\nres1: String = scala.Int#CLS'
1196,'','renames Symbol.kind and Type.kind in the API\nKind as in http://en.wikipedia.org/wiki/Kind_(type_theory) seems to be\ntoo useful of a name to bind it to a debugging facility in the API.\n\nI also added a comment that this facility is meant for debugging only\nand should not be used to discriminate symbols/types in production code.'
1195,'',"Add missing tests for SI-6190\nThis was silently fixed in commit\n3cb0e784a05db7d0b542cec9bf4c5fbf3772a6cf (https://github.com/scala/scala/commit/3cb0e784a05db7d0b542cec9bf4c5fbf3772a6cf#L4L209) but no test was added.\n\nCloses SI-6190 (does this belong to the commit message?).\n\nReview by @heathermiller (who authored this commit) or @phaller (maintainer of the std. library).\nUPDATE: let's make that\n\nReview by @heathermiller and @phaller.\n\nto avoid the by-stander effect. This is also just a passing additional testcase."
1194,'',"SI-6281 macroArgs for defs with implicit args\nmacroArgs now correctly calculates the argss in case when a macro def\nhas implicit parameters.\n\nMacro impls can never have implicit parameters other than type tag evidences,\nso tags will always come in a separate parameter list w.r.t other parameters\nof macro impls (which are in 1-to-1 correspondence with the parameters of\nmacro defs).\n\nExample 1:\ndef w/o implicits: (params1)...(paramsN)\nimpl w/o tags: (params1')...(paramsN')\n\nExample 2:\ndef w/o implicits: (params1)...(paramsN)\nimpl w tags: (params1')...(paramsN')(implicit tags)\n\nExample 3:\ndef w implicits: (params1)...(paramsN)(implicit paramsN+1)\nimpl w/o tags: (params1')...(paramsN')(paramsN+1')\nNote: paramsN+1' is not an implicit parameter list\nbecause impls cannot have implicit parameters other than tags\n\nExample 4:\ndef w implicits: (params1)...(paramsN)(implicit paramsN+1)\nimpl w tags: (params1')...(paramsN')(paramsN+1')(implicit tags)\n\nTherefore we don't need to merge the argss.last (that correspond to implicit\nparameters of macro defs) with tags, as it was incorrectly coded before.\nWe just need to append tags to argss."
1193,'heathermiller',"SI-6280 Scaladoc: Reloading preserves anchors\nScaladoc redirects from */package.html pages to index.html with the\nqualified package name as the anchor. This is done to pop up the left\nnavigation panel whenever someone links directly to the page. (so\nusers may navigate the rest of the scaladoc pages)\n\nWhen linking members directly, one can use */package.html#<signature>,\nwhich translates to index.html#*.package@<signature>. The problem was\nthat the redirection javascript did not take the <signature> into\naccount, so it would redirect to the top of the package page instead\nof scrolling to the member.\n\nNote: this is a layout change, so there's no test for it."
1192,'','Deprecate unmaintained/old classes for removal in 2.11\nDeprecate unmaintained/undocumented/unused code.   Part 1 of 3.\n\nreview by @alex22'
1191,'','Deprecate/low hanging\nRemove unused/unmaintained/undocumented classes for 2.10.x.   Part 1 of 3.'
1190,'',"SI-6052 - fix groupBy on parallel collections\nSomehow this previously didn't make it into the 2.10.x branch.\n\nReview by @jsuereth."
1189,'',"Issue/6052 2.10.x\nFixes SI-6052.\n\nSomehow this previously didn't get into 2.10.x."
1188,'',"SI-6272 Support lazy vals defined in try in template.\nReview by @hubertp\n\nIt's a trivial fix for a crasher, so I'm optimistically submitting to 2.10.x."
1187,'','Better handling of BoundedWildcardType\nreview by @odersky'
1186,'','SI-6278 fixed: synthetic implicit def must sort with its associated impl...\n...icit class\n\nAdd a case to the ad-hoc (or add-hack) addSynthetics to keep the trees close.\n\nThis relies on naming convention, so changes in naming of the implicit def\nwould require an update here.'
1185,'',"Eliminated a metric ton of allocations.\nThanks to the hotspot DTrace probes.  I'm not sure why\nthis checkfile changed, but hopefully it's innocuous.\nReview by @VladUreche for the checkfile and @gkossakowski\nso he can tell me how much faster."
1184,'','PartialFunction polishing\n- ScalaDocs added\n- TODOs fixed\n- controversive method `run` deleted\n- not used class runtime.AbstractTotalFunction removed\n- small corrections & fixes\n- tests for `orElse` & `runWith`\n\nreview by @adriaanm\n'
1183,'','Fix stupid logic inversion of try-catch\nReviews + insults from @heathermiller  (it was a pretty dumb bug).'
1182,'',"Improved fix for SI-1987, overloading in package objects.\nWhen reformulating an errant package object overload,\ndon't forget to fully qualify it lest you trade one error\nfor another."
1181,'','Backport "Make Stream.withFilter.{map,flatMap} run in constant stack space" against 2.9.x\nThis is a backport of https://github.com/scala/scala/pull/1167. I produced the backport using `git cherry-pick` and got no conflict; I could reproduce the failure with `2.9.x` current HEAD, and no failure after applying this fix.\n\nReview by @axel22'
1180,'','Initial cut at running binary compatibility tests on the 2.9.x series\nReview by @lrytz or @gkossakowski'
1179,'','reverts changes to ClassTag.Nothing\nIt seemed to be a good idea to have ClassTag.Nothing crash\nin agreement with its incalculable nature.\n\nHowever this breaks CanBuildFrom for the situations when Nothing is inferred\nor provided explicitly. Hence the rollback.'
1178,'','adds weak_<:< to the API\nquite a fundamental method to be left to be implemented manually\nby the users of the reflection API'
1177,'','exposes absTypeTag and absTypeOf\nto be symmetric with typeTag and typeOf.\n\nthis is especially important for macro development,\nsince only c.AbsTypeTag context bounds can be used on macro implementations'
1176,'',"fixes non-determinism in reflection-sorted-decls\nordering of synthetic members on java7 with a lot of cores is non-deterministic\nthat's not a problem, because the doc doesn't promise anything about synthetics\nhence I've adjusted the test, so that it no longer includes accessors\n\ndiscussion: http://groups.google.com/group/scala-internals/msg/087a7d4805313561"
1175,'','Merging 2.10.x into master.\n'
1174,'','Fix for SI-6264, crash in checkCheckable.\nThe classic fail of assuming you will only receive a\nspecific subclass of Type.'
1173,'','Fixes SI-4996.\nThis bug is a result of a subtle interplay of the stackable modifications\nmechanism and specialization.\n\nPrior to this commit, using `abstract override` with specialization was\nbroken in the sense that specialization did not create a specialized\nversion of the super accessor. Observe the following code:\n\n    trait A[@specialized(Int) T] {\n      def foo(t: T)\n    }\n\n    trait B extends A[Int] {\n      def foo(t: Int) {\n        println("B.foo")\n      }\n    }\n\n    trait M extends B {\n      abstract override def foo(t: Int) {\n        super.foo(t)\n        println("M.foo")\n      }\n    }\n\n    object C extends B with M\n\nDuring the `superaccessors` phase, the following stub is generated\nin `M`:\n\n    private <artifact> <superaccessor> def super$foo(t: Int)\n\nNote that `foo` is a method that will later need to be specialized.\nDuring the `specialize` phase, `A.foo` gets a *special overload*\n`A.foo$mcI$sp`, which is a bridge to `A.foo`.\n\n`B` extends `A$mcI$sp` (previously `A[Int]`), so `B.foo` gets a\n*special override* `B.foo$mcI$sp`, which contains the implementation.\n`B.foo` is overridden to become a bridge to `B.foo$mcI$sp`.\n\n`M` extends `B`, so `M.foo` gets a special override `M.foo$mcI$sp`,\nand `M.foo` itself is turned into a bridge to `M.foo$mcI$sp`, just\nas was the case with `B`.\nThis is where the first problem arises - `M.foo$mcI$sp` does not\nget an `ABSOVERRIDE` flag after being created. This commit fixes\nthat.\n\nAs mentioned earlier, `M` has a super accessor `super$foo`.\nA super accessor (naturally) does not override anything, thus,\naccording to the standing specialization criteria it does not\nneed a special override (see `needsSpecialOverride`).\nIts type does not contain any specialized type parameters, thus,\nit is not eligible to obtain a special overload either.\n\nSo, our `super$foo` stays the way it is, subsequently being\nrenamed to `M$$super$foo`.\nLater, during `mixin`, it is implemented in `C` as a forwarder\nto `B$class.foo` (Not `B.foo`, because the implementation\nclasses are generated in `mixin`).\n\nLets see what we have now (I omit the `$this` parameter\nfor methods in implementation classes `B$class` and `M$class`):\n\n        class B$class\n          def foo(t: Int) =     ------------\\ <-\\\n          def foo$mcI$sp(t: Int) =          |   |\n                                            |   |\n        trait M$class                       |   |\n          def foo(t: Int) =   -------\\      |   |\n                                     |      |   |\n          def foo$mcI$sp(t: Int) = <-/<-\\   |   |\n          {                             |   |   |\n      /---- M$$super$foo(t)             |   |   |\n      |     ...                         |   |   |\n      |   }                             |   |   |\n      |                                 |   |   |\n      | object C                        |   |   |\n      |   def foo$mcI$sp(t: Int) = -----/ <-/   |\n      \\-> def M$$super$foo(t: Int) =            |\n          {                                     |\n            ------------------------------------/\n\nNow, call `C.foo`. This call is rewritten to\n`C.foo$mcI$sp`, which is a bridge to\n`M$class.foo$mcI$sp`.\nFollow the lines on the diagram to enter\nan endless loop. Boom! Stack overflow.\n\nThe culprit is the super accessor `C.M$$super$foo`, which\nshould have forwarded to the special override\n`B$class.foo$mcI$sp`, instead of to `B$class.foo`.\n\nSo, we have 2 options:\n1) Make `C.M$$super$foo` forward to the proper special\noverride, where the implementation actually is.\n2) During specialization, create a specialized version\nof `M$$super$foo` called `M$$super$foo$mcI$sp`, and set\nits alias to the special overload `foo$mcI$sp`. Later,\nduring `mixin`, this super accessor will be appropriately\nresolved in concrete classes.\n\nOption 1) involves cluttering `mixin` with specialization\nlogic.\nFurthermore, the specialization already does create\nspecialized versions of super accessors when the super\naccessor type contains specialized type parameters\n(in other words, it generates a special overload).\n\nThus, 2) seems an ideal solution. We cannot deduct\nif a super accessor should get a special override\ndirectly, but we can see if its alias needs a\nspecial override. If it does, then we generate\na special override for the super accessor.\n\nThis commit introduces the following changes:\n\n1) The `ABSOVERRIDE` flag is now retained, as mentioned\nearlier.\n2) A super accessor gets a special override if its\nalias needs a special override.\n3) The super calls in the methods bodies are rewritten\nto their specialized variants if they exist.\n4) Newly generated special overrides and special overloads\nare now entered into the declaration list of the owner\nduring specialization.\nStrangely, this was not done before, but it is necessary for\n`mixin` to detect the generated special overload/override\nwhich is an alias for the super accessor.\n\nReview by @dragos, @VladUreche.\n\nBtw, this made me discover https://issues.scala-lang.org/browse/SI-6265,\nwhich is *not* a regression caused by this commit.'
1172,'','JavaConversions: Restore source compatibility with 2.9\nReadd an implicit conversion which was available in 2.9, the one from\n`java.util.concurrent.ConcurrentMap` (`juc.ConcurrentMap`) to the (now\ndeprecated) type `scala.collection.mutable.ConcurrentMap`.\n\nThis implicit conversion can also be used to convert from\n`juc.ConcurrentMap`\nto `collection.Map` and creates an ambiguity error in\ntest/files/run/map_java_conversions.scala. To fix this, I have given\nlower priority to the new conversion.\n\nMoreover, update the documentation in `JavaConversions`: mark this\nconversion as deprecated and mention the new conversion which replaces\nit, converting to `scala.collection.concurrent.Map`.\n\nI discussed this issue previously with Paul Phillips on scala-language:\n\nhttps://groups.google.com/d/topic/scala-language/uXKRiGXb-44/discussion\n\nReview by @axel22.'
1171,'',"Suppressed 'possible cause' mis-warning.\nI have seen this warning a bunch of times and it has not yet\nbeen close to right."
1170,'','exposes overridenSymbol/overridingSymbol in API\nit seems like we completely overlooked this functionality'
1169,'','Si 6261\nThis is basically the improvements made to HashSet in SI-6197, SI-6198, SI-6220 applied to HashMap.\n\nThe test case is the same as the test cases for SI-6197, SI-6198 and SI-6220 as well.\n\nIf you want this as a single commit, or if I should create a SI for each tiny change, let me know.\n\nI am not sure if assertions are OK in scala collections, or if they should be commented out for test performance reasons. However just having them in there commented out is preferable to not having them at all because they show very concisely the assumptions made in the data structure.'
1168,'',"SI-6258 Reject partial funs with undefined param types\nThis regressed with virtpatmat.\n\nWith -Xoldpatmat, pattern matching anonymous functions with\nan expected type of PartialFunction[A, B] are translated to\na Function tree, and typed by typedFunction, which issues an\nerror of the parameter types are not fully defined.\n\nThis commit adds the same check to MatchFunTyper.\n\nIt doesn't plug the hole in RefChecks#validateVariance (which is\nreminiscent of SI-3577.) Seems to me that in general one should handle:\n  a) both BoundedWildcardType and WildcardType\n     when in a place that can be called during inference, or\n  b) neither otherwise\n\nI'm submitting to 2.10.x seeing as it's a regression and the fix is trivial.\n\nReview by @paulp"
1167,'','Make Stream.withFilter.{map,flatMap} run in constant stack space\nThe included test currently fails because `map` and `flatMap` do not\nrun in constant stack space on a stream returned by `Stream.withFilter`,\nas I reported here:\nhttps://groups.google.com/d/msg/scala-language/WqJR38REXnk/saaSiDdmyqoJ\n\nFix the problem and add a simple testcase.\n\nNote that the stack space consumed when producing an element of this stream is\nproportional to the number of elements failing the test before the next\nsuccess. The stack space consumed to produce the stream itself is the\nspace needed to produce the first element, that is, is proportional to\nthe number of failures before the first success.\n\nReview by @axel22.'
1166,'','rebuilt the starr after performance optimizations\nfor those who use locker as their main development platform'
1165,'','Fix/try catch libs\nThis unifies the difference between `scala.util.Try` and `scala.util.control.Exception`.  They both serve useful purposes, and this patch can unify them.   See the test for an example of how.\n\nReview by @heathermiller'
1164,'',"Compiler optimizations (take 3, hopefully final)\nCompiler optimizations prepared by @odersky and me.\n\nAll tests for all commits pass:\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/ (builds 527-553)\n\nThis branch has been cooked before in #1157 and #1158. It seems to be ready for serving!\n\nChanges from last iteration:\n  * fix crasher in first commit (thanks to @paulp)\n  * fix some typos in a few commits that made build to fail\n  * dropped @retronym's patch (hopefully I can bring it back today but I'm travelling so no promises)\n  * squashed two last commits related to making collection methods under 35 bytes\n\nReview by @paulp, @odersky and everyone interested. We need this work to be merged ASAP."
1163,'','Si 6196\nAdded specialized implementation for filter\n\nThere is now an instrumented test checking for unnecessary object creations which the new implementation avoids, as well as a very simple correctness test under files/run\n\nA benchmark is referenced in the JIRA issue, since AFAIK there is not yet a way to add a benchmark as a test.'
1162,'','Fix for community build blocker.\nAs two character bugfixes go, this was a doozy.\nI will forego elaborating at length and offer generic\ninstructions for elucidation:\n\n% git log --grep=tpeHK'
1161,'',"SI-5788 correct test and symbol update\nPreviously I thought it's fixed because I didn't include the correct\ntestcase. Now it's the correct testcase and this prompted me to\nchange the code a bit to make it work properly.\n\nReview by @paulp."
1160,'','Si 6220\nAs requested, a pull request against 2.10.x for SI-6220'
1159,'','even more cleanup in Macros.scala\nwe got to under 900 loc! review by @paulp'
1158,'','Compiler speed optimizations take 2\nI rebased everything on latest 2.10.x.  '
1157,'',"Compile speed optimizations\nHere's the combined effort of Greg and myself this week to make the compiler faster. Overall we seem to be getting between 10 and 15%. We still need to do analysis to find out what optimizations were most beneficial. \n\nSome optimizations are beneficial for cold compilers and compilers warming up (this is what we see in the Scala build for instance). In particular method splitting seems to help. Other optimizations seem to mostly help in stable state when the compiler is fully jitted. These are harder to predict and often not intuitive at all. For instance method specialization might actually slow down the speed because it makes callsites polymorphic.\n\nReview by @paulp @gkossakowski"
1156,'',"Restored lastNoSuccess to Parsers.\nIt was in 2.9.2 and can't be removed without deprecation."
1155,'','Merge 210\n'
1154,'','Use rawflags for checking FINAL flag.\nPartially reverts 18efdedfb97de7ca9f6.\n\nReview by @paulp.'
1153,'','worksheet support on 2.9\nreview by @dotta, he already verified that the worksheet does actually work with that revision.'
1152,'','Absolutize tools.nsc => scala.tools.nsc.\nRelative references to scala.tools which omit the "scala"\nare uncompilable by themselves if you happen to have a directory\ncalled "tools" which shadows scala/tools.  As we do in trunk.'
1151,'',"more cleanup in Macros.scala\nthere's still a bit more left for tomorrow. review by @paulp"
1150,'','Issue/6150\nUpdate to #1143.'
1149,'','Topic/substmap210\nMoved from #1119.'
1148,'','Merge 210\n'
1147,'','cleanup of reflection and macros (reopened)\nhttps://github.com/scala/scala/pull/1145'
1146,'',"Hunting down eliminable :: allocations.\nWith this commit, the number of :: allocations logged in total\nafter individually compiling each scala file in src/compiler\ndrops from 190,766,642 to 170,679,925.  Twenty million fewer\ncolon-colons in the world, it's a start.\n\nFor some heavily used lists like List(List()) I made vals so\nwe can reuse the same one every time, e.g.\n\n  val ListOfNil = List(Nil)\n\nThe modifications in this patch were informed by logging call\nfrequency to List.apply and examining the heaviest users.\n\n>> Origins tag 'listApply' logged 3041128 calls from 318 distinguished sources.\n\n1497759   scala.reflect.internal.Definitions$ValueClassDefinitions$class.ScalaValueClasses(Definitions.scala:149)\n 173737   scala.reflect.internal.Symbols$Symbol.alternatives(Symbols.scala:1525)\n 148642   scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:306)\n 141676   scala.tools.nsc.transform.SpecializeTypes$$anonfun$scala$tools$nsc$transform$SpecializeTypes$$specializedOn$3.apply(SpecializeTypes.scala:114)\n  69049   scala.tools.nsc.transform.LazyVals$LazyValues$$anonfun$1.apply(LazyVals.scala:79)\n  62854   scala.tools.nsc.transform.SpecializeTypes.specializedTypeVars(SpecializeTypes.scala:427)\n  54781   scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:293)\n  54486   scala.reflect.internal.Symbols$Symbol.newSyntheticValueParams(Symbols.scala:334)\n  53843   scala.tools.nsc.backend.icode.Opcodes$opcodes$CZJUMP.<init>(Opcodes.scala:562)\n  ...     etc."
1145,'',"cleanup of reflection and macros\nI'm actually in the middle of it, but decided to give it a spin anyways, since the volume of the changes is quite big. review by @paulp, the very first commit is review by @VladUreche"
1144,'','new approach to access-level widening for inlining\nreview by @odersky or @paulp\n\nComments on performance impact are welcome /cc @gkossakowski\n\n'
1143,'','Fixes SI-6150.\nRemoves the `VectorReusableCBF` and pattern matching on it in optimized `Vector` methods.\nInstead, we now have a new `ReusableCBF` instance in `IndexedSeq` and check for equality\nwhen trying to optimize `:+`, `+:` and `updated`.\nThis overridden `ReusableCBF` is used by `IndexedSeq`, `immutable.IndexedSeq` and\n`immutable.Vector`.\n\nThe net effect is that calling `:+` and similar methods on a `Vector` instance with\na `CBF` that came from `IndexedSeq` or somewhere lower in the hierarchy will always\ncreate a `Vector` using the optimized method.\n\nReview by @jsuereth.'
1142,'','new approach to access-level widening for inlining\nSupercedes #1139\n\nreview by @odersky or @paulp\n\nComments on performance impact are welcome /cc @gkossakowski\n\n'
1141,'',"Fixes backend crash due to incorrect consumedTypes\nThis started out as a compiler crash after Greg copied the\ncomprehension methods to List and made them final.\n\nThe culprit was the dead code elimination phase, which after\nsweeping pieces of code was unable to restore the stack to its\noriginal state, thus causing the ASM backend to crash notifying\nthe resulting bytecode is incorrect.\n\nThe dead code elimination phase uses the icode Instructions'\nconsumedTypes to determine what needs to be dropped from the\nstack when an instruction is eliminated, but the consumedTypes\nwere only defined for a handful of instructions. So dce encountered\na DUP instruction for which it did not have consumedTypes defined\nand did not restore the stack correctly.\n\nThe consumedTypes/producedTypes for icode instructions are\nredundantly defined in 3 separate places:\n - Opcodes.scala (consumedTypes/producedTypes)\n - ICodeCheckers.scala (for checking icode)\n - TypeFlowAnalysis.scala (for computing types on the stack at each\nprogram point)\n\nSince the Opcodes types are the only ones visible outside, I suggest\nwe use them in ICodeCheckers.scala and TypeFlowAnalysis.scala too. But\nwe should make such changes after the release, as we're chilling out\nby the lake with a glass of good wine: SI-6234\n\nThe relevant discussion around it can be found at:\nhttps://groups.google.com/forum/?fromgroups#!topic/scala-internals/qcyTjk8euUI[1-25]\n\nMany thanks to Paul for his help!\n\nReview by @magarciaEPFL or @paulp."
1140,'','SI-6167 Override SeqLike#isEmpty for better performance\nThis results in a faster Vector#isEmpty (and head, tail, last, init)\nbecause it avoids building a VectorIterator just to check if\niterator.hasNext is false.\nOther classes which have not overridden the implementation of SeqLike\nalso benefit from it.'
1139,'','new approach to field publicizing in Inliner\nreview by @odersky or @paulp\n\nComments on performance impact are welcome /cc @gkossakowski'
1138,'','Fixes SI-6189.\nDisable @static for the REPL code.\nThe problem was that there are no companion classes generated for objects\nthat contain the top-level declarations in the REPL.\nWhen there is no companion class, the selecting a @static field will translate\nto a getter call, instead of to a field load.\n\nReview by @paulp'
1137,'','.ensime template for compiler development\nProvides a template of an .ensime file to be used for compiler hacking\ntogether with an ENSIME-enabled text editor.\n\nAlso includes a readme that outlines what editors support ENSIME.\nTo the best of my knowledge these are Emacs, TextMate, jEdit and Sublime Text 2'
1136,'','Add Scaladoc flag to specify hidden implicit conversions\nReplacing hardcoded hidden implicits by command line flag.\n\nReview by @VladUreche'
1135,'','`par` with tasksupport implicit - now with a default implicit\nExactly the same as in https://github.com/scala/scala/pull/930, only this time with a default implicit tasksupport parameter.\n\nReview by @jsuereth.'
1134,'',"patmat tweaks: compiler performance, better error on unsupported pattern\n(rework of #1112)\n\n- do not catch StackOverflowError: @gkossakowski diagnosed it to be killing compiler performance\n  --> limit recursion depth in negationNormalForm in the same way we were already harnessing conjunctiveNormalForm -- configurable using -Dscalac.patmat.analysisBudget=N (N=256 by default)\n\n- Roland reported hitting the unsupported pattern branch in translatePattern in akka code, so providing some diagnostics and a nicer error message to figure out what's going on\n\nreview by @gkossakowski (/cc @paulp)"
1133,'','new approach to field publicizing in Inliner\nReworked version derived from\n\nhttps://groups.google.com/d/topic/scala-internals/iPkMCygzws4/discussion\n\nIn particular,\n\nhttps://groups.google.com/d/msg/scala-internals/iPkMCygzws4/LZHydgSjFSUJ\nhttps://groups.google.com/d/msg/scala-internals/iPkMCygzws4/vEjJ4unAoFEJ\nhttps://groups.google.com/d/msg/scala-internals/iPkMCygzws4/MIDPK6-3vwMJ\n\nreview by @VladUreche\n\nComments on performance impact are welcome /cc @gkossakowski\n'
1132,'','follow-up to 07f942971aefcd6829415c56022af8226f931772\n\nFollow-up to https://github.com/scala/scala/pull/1121\n\nAs discussed in \n\n  https://groups.google.com/d/topic/scala-internals/iPkMCygzws4/discussion\n\nIn particular,\n\n  https://groups.google.com/d/msg/scala-internals/iPkMCygzws4/LZHydgSjFSUJ\n\n  https://groups.google.com/d/msg/scala-internals/iPkMCygzws4/vEjJ4unAoFEJ\n\n  https://groups.google.com/d/msg/scala-internals/iPkMCygzws4/MIDPK6-3vwMJ\n\n\nreview by @VladUreche\n\nComments on performance impact are welcome /cc @gkossakowski\n\n'
1131,'','Topic/view isempty\nThis fix is necessary so we can commit #1037.'
1130,'',"Move side-effecting call out of debuglog(). Fixes SI-6223.\nThis change fixes a situation in which method calls aren't being properly\nspecialized. All the existing tests pass; in addition, it likely fixes other\nspecialization bugs (and improves performance of specialized code).\n\nAlso includes a small regression test."
1129,'','Rewrite of transformTypeTagEvidenceParams.\nThis fixes what a bug where the prefix seems to be checked but\nis ignored; however I rewrote this method purely out of a desire\nfor tighter code.  I would consider it a great personal\nfavor if you would study the before/after and endeavor to\ninternalize the mechanisms I applied.\n\nPoints of particular note:\n\n - Before you write Option[Symbol], remember we already have\n   an Option[Symbol], and it\'s Symbol.  None == NoSymbol.\n - flatMap can be to an Option, you don\'t have to create a\n   one element List for flatMap\'s enjoyment\n - lastOption and headOption are rarely the way to go\n   ... especially if you start with if (xs.isEmpty) return\n - The method which checks for emptiness is ".isEmpty",\n   it is NOT ".length == 0"\n\nI should add a pattern matcher warning for when you have a lower\ncase name in scope (like "contextParam") and then use a lower case\npattern variable of the same name, which of course ignores the\none outside the pattern and matches everything.\n\nReview by @xeno-by.'
1128,'',"Move side-effecting call out of debuglog(). Fixes SI-6223.\nThis change fixes a situation in which method calls aren't being properly\nspecialized. All the existing tests pass; in addition, it likely fixes other\nspecialization bugs (and improves performance of specialized code).\n\nReview by @VladUreche or @paulp.\n\nP.S. As I said on list, this is a very small change and it would be great\nto backport to 2.10! I can send another pull request if this seems like a good idea."
1127,'','ICodeReader parses exception handlers from bytecode\n\nreview by @VladUreche or @paulp or @dragos'
1126,'','Improve efficiency of updated\nAdded utility method to create a HashTrieSet with two leaf HashSets with different hash\nUsed said utility method instead of creating a temorary HashTrieSet with an empty elems array\nAdded assertions to HashTrieSet to validate tree\n\nIt is difficult to write a test for this, because the old behavior was not wrong, just inefficient. A good test of the HashTrieSet in general would be to run the test suite with both assertions enabled. But the assertion that tests that elems.length must be >1 unless the child element is a HashTrieSet itself must remain commented out until SI-6197 is implemented.'
1125,'','Fixes SI-6214.\naddSynthetics was calling typedStat that caused flushing error buffer. Typically that would result in errors being re-added but addSynthetics was the last thing to run in typedStats.\nInstead of adding yet another check I used this as an opportunity to cleanup the once necessary workaround for typing stats. Since we are now chaining buffers of contexts manual handling is no longer necessary.\n\nReview by @odersky (I recall that you were planning to cleanup that part at some point).'
1124,'',"SI-4767 Inline @inline final trait methods\nA trait consists of an interface and an implementation class. From a\nJVM perspective, a class that extends a trait will actually implement\nthe interface and unless it overrides the member, will get a forwarder\nto the implementation class:\n\nfor:\n```\n  trait Foo { @inline final def foo(x: Int) = println(x) }\n  class Baz extends Foo\n```\n\nBaz is compled down to:\n```\n  class Baz extends Object with Foo {\n   @inline final def foo(x: Int): Unit = Foo$class.foo(FooImpl.this, x)\n   ...\n  }\n```\n\nNow, say we have:\n```\n  def bar(y: Foo) = y.foo(7)\n```\n\nThe type of `Foo` is `interface Foo`. Thus there's no way for the\ninliner to load the bytecode for foo. The first part of this patch\naddresses this problem, by transforming the call to `y.foo(7)` to\n`Foo$class.foo(y, 7)` if the foo method is final and @inline marked.\n\nThe second part is actually inlining the static call to `Foo$class.foo`.\nNow, the trick is that the inliner actually expects the calls it\ninlines to have an instance on which they're run. I relaxed the inline\nconditions to include static calls and changed the inliner to generate\ncorrect code for static calls. (the VerifyError was caused by this)\n\nThe third part was adapting the ICodeReader to be able to pick up the\ncode from implementation classes. I think the ICodeReader needs a real\nmaintainer, I was only after getting the test cases to pass, but there\nare still some failures visible with -Ydebug -Ylog:inliner.\n\nFinally, added a couple of tests using Greg's instrumented partest\naddon, and it's awesome!\n\nThanks to @magarciaEPFL, @lrytz and @xeno-by for their help!\n\nMandatory review by @paulp if we're going to get this in 2.10."
1123,'','Topic/unpickle resilience 2\nThis is an improved rework of #1053.'
1122,'',"Improvement for SI-2251, failure to lub f-bounds.\nAfter a great struggle, I realized that the major reason that\ncode like this still doesn't compile:\n\n  List(Stream(), List())\n\nis that we were poisoning the computed lub in mergePrefixAndArgs by\nthrowing in Any when the max recursion depth was reached. I modified\nit to return NoType instead, which allowed me to teach lublist to\nrecognize what has happened and fall back to a weaker type, one\nwhich does not contain recursive bounds. This enables the lubbing\nprocess to complete. The most elusive lub, defeated. Notice also\nthat the refinement members are correctly parameterized on Nothing,\nrather than on Any as has often been the case.\n\n(Re: Any/Nothing, see the change to test/files/run/lub-visibility.check.)\n\nscala> List(Stream(), List())\nres0: List[scala.collection.immutable.LinearSeq[Nothing] with scala.collection.AbstractSeq[Nothing]{def companion: scala.collection.generic.GenericCompanion[scala.collection.immutable.LinearSeq with scala.collection.AbstractSeq]; def reverse: scala.collection.immutable.LinearSeq[Nothing] with scala.collection.AbstractSeq[Nothing]{def companion: scala.collection.generic.GenericCompanion[scala.collection.immutable.LinearSeq with scala.collection.AbstractSeq]; def reverse: scala.collection.immutable.LinearSeq[Nothing] with scala.collection.AbstractSeq[Nothing]{def reverse: scala.collection.immutable.LinearSeq[Nothing] with scala.collection.AbstractSeq[Nothing]; def dropRight(n: Int): scala.collection.immutable.LinearSeq[Nothing] with scala.collection.AbstractSeq[Nothing]; def takeRight(n: ..."
1121,'','Added make not private logic for @inline accesses back to ExplicitOuter.\nAs discussed in https://mail.google.com/mail/u/0/?hl=en&tab=Tm#search/inlining+changes+needed/1390c955960d7cb5, we need to move access widenings back to ExplicitOuter, so that outer fields are correctly widened. The previous logiv in SuperAccessors can go once the inliner is adapted to the new scheme. I leave SuperAccessors for the moment as is, in order not to slide back even further with inlining. Review by @magarciaEPFL, @gkossakowski'
1120,'','Ticket 6184 revised\nAdd-on to #1092.'
1119,'',"Optimization in SubstMap.\nDon't create a new type with the same symbol.  This\nmodification avoids the creation of 30K types and a\nsimilar number of symbols in a compile of trunk."
1118,'',"SI-6201 minor fixes in key points\nFixes several oversights that led to 6201. RootPackage should have been static,\nrefactored implementation of hasSymbolWhich shouldn't have checked hasSymbol.\n\nFull discussion is here:\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/9500348f273a8aa."
1117,'','Topic/warn nonlocal returns\n'
1116,'',"a follow up on e01ec05a1e\nRemoves all traces of flags from symbol API, adds general flag set (hasFlag)\nto Modifiers (because Modifiers don't have isXXX checks that symbols have).\n\nThis also removes macros.Symbol.setFlags, because taking into account current\nstate of affairs that method was at best incomplete."
1115,'','Inliner may make public only an outer field of anon-closure-class\nAs discussed in https://groups.google.com/d/topic/scala-internals/iPkMCygzws4/discussion\n\nStats informing us about anon-closures-classes not being eliminated because of this commit are welcome!\n\nreview by @gkossakowski '
1114,'','Introduces the `isArtifact` test for symbols\nThe test seems to be necessary to tell apart useful synthetic symbols\n(such as accessors) and low-level compilation artifacts (such as $outer).'
1113,'','some more copyright cleanup for 2012\ncontributed by Carlo Dapor -- thanks!\n\nimproving my lines touched stats further -- review by @jsuereth'
1112,'',"patmat tweaks: compiler performance, better error on unsupported pattern\n- move a catch of a StackOverflowError up the call stack since @gkossakowski diagnosed it to be killing compiler performance\n- Roland reported hitting the unsupported pattern branch in translatePattern in akka code, so providing some diagnostics and a nicer error message to figure out what's going on\n\nreview by @gkossakowski (/cc @paulp)"
1111,'',"refines api.FlagSets\nIn the current vision of flags, they should only be used to construct trees,\nbecause tests are subsumed by the numerous isXXX methods that we have.\n\nHence we need to remove `hasFlag` and the flags that don't make sense being\nadded to tree modifiers manually.\n\nA good example of that is MODULE. There's an isModule check, so hasFlag MODULE\nis redundant. On the other hand, you don't need MODULE to construct a ModuleDef\nso it's redundant in this department as well."
1110,'','Fix raw string interpolator\n'
1109,'','Warn when Any or AnyVal is inferred.\nFor the very small price of annotating types as Any/AnyVal in those\ncases where we wish to use them, we can obtain useful warnings.\nI made trunk clean against this warning and found several bugs\nor at least suboptimalities in the process.\n\nI put the warning behind -Xlint for the moment, but I think this\nbelongs on by default, even for this alone:\n\n  scala> List(1, 2, 3) contains "a"\n  <console>:8: warning: a type was inferred to be `Any`; this may indicate a programming error.\n                List(1, 2, 3) contains "a"\n                                       ^\n  res0: Boolean = false\n\nOr this punishment meted out by SI-4042:\n\n  scala> 1l to 5l contains 5\n  <console>:8: warning: a type was inferred to be `AnyVal`; this may indicate a programming error.\n                1l to 5l contains 5\n                                  ^\n  res0: Boolean = false\n\nA different situation where this arises, which I have seen variations\nof many times:\n\n  scala> class A[T](default: T) {\n    def get(x: => Option[T]) = x getOrElse Some(default)\n  }\n  <console>:7: warning: a type was inferred to be `Any`; this may indicate a programming error.\n         class A[T](default: T) { def get(x: => Option[T]) = x getOrElse Some(default) }\n                                                                             ^\n  // Oops, this was what I meant\n  scala> class A[T](default: T) {\n    def get(x: => Option[T]) = x getOrElse default\n  }\n  defined class A\n\nHarder to avoid spurious warnings when "Object" is inferred.'
1108,'','Ensure that a.merged(b)(null) always chooses a in case of collisions\nFixes bug in bugfix of SI-5879\n\nMoved definition of liftMerger to companion object and replaced null with a default merger so merge works predictably if you pass null as a merger.'
1107,'','Removed hot statistics call in normal path.\nSome very hot calls to Statistics  are now subject to the compile-time constant hotEnabled, which means they will be eliminated entirely in the default case where hotEnabled = false.\n\nI hope it helps a bit in speeding up compile times and in any case it will not hurt.\n\nReview by @gkossakowski'
1106,'','Changed worksheet framework so that source transformers maintain a caret...\n... position\n\nBoth SourceInserters and Mixers now take an optional caret parameter, indicating the offset of the caret in the transformed document. They return the caret offset in the transformed document.'
1105,'','Only create a HashTrieSet if necessary.\nIf allow HashTrieSets with one element, you can get a degenerate tree that is six levels deep yet contains only one element by first building a large tree and then removing elements'
1104,'','Made inliner work for @inline methods that access private variables.\nWe need to disable the previous "potentiallyPublished" logic because that one disables inlining as long as the inlined method has a reference to a field with a $. But making fields public in @inline method will generate fields with $. \n\nWe still need to complement this patch with reverting the previous publication logic completely. I leave that to Vlad or Miguel. \n\nReview by @VladUreche, @magarciaEPFL, @gkossakowski, @moors'
1103,'','SI-6119 Fix mispelling on take documentation. (backport)\n'
1102,'','Support per-group flags files in partest\nIn a directory-based test with file A_1.scala, scalac flags that should apply only to A_1.scala can be put in the file A_1.flags. Local flags are appended to global flags.\n\nThis capability is important for testing the inliner, for example.\n\nReview by @paulp'
1101,'adriaanm',"SI-5940 impls are no longer in macro def pickles\nThe first officially released version of macros persisted\nmacro def -> impl bindings across compilation runs using a neat trick.\n\nThe right-hand side of macro definition (which contains a reference to an impl)\nwas typechecked and then put verbatim into an annotation on macro definition.\n\nThis solution is very simple, but unfortunately it's also lacking. If we use it\nthen signatures of macro defs become transitively dependent on scala-reflect.jar\n(because they refer to macro impls, and macro impls refer to\nscala.reflect.macros.Context defined in scala-reflect.jar).\nMore details can be found in https://issues.scala-lang.org/browse/SI-5940.\n\nTherefore we have to avoid putting macro impls into binding pickles and\ncome up with our own serialization format. Situation is further complicated\nby the fact that it's not enough to just pickle impl's class and method names,\nbecause macro expansion needs knowledge about the shape of impl's signature\n(which we can't pickle). Hence we precompute necessary stuff (e.g. the layout\nof type parameters) when compiling macro defs."
1100,'','SI-6022 cleaner model of variable equality modulo <:\ncentralized and improved the construction of the information needed to construct the boolean proposition that encodes the equality proposition (V = C) that models a type test pattern `_: C` or constant pattern `C`, where the type test gives rise to a TypeConst C, and the constant pattern yields a ValueConst C\n\nfor exhaustivity, we really only need implication (e.g., V = 1 implies that V = 1 /\\ V = Int, if both tests occur in the match, and thus in this variable\'s equality symbols), but reachability also requires us to model things like V = 1 precluding V = "1"\n'
1099,'',"Allow skipping the xz archives\nUsing 'ant -Darchives.skipxz=true'\n\nWill use that for checkin (and pr) builds, making them ~10 minutes faster.\n\nreview by @jsuereth"
1098,'',"SI-5940 impls are no longer in macro def pickles\nThe first officially released version of macros persisted\nmacro def -> impl bindings across compilation runs using a neat trick.\n\nThe right-hand side of macro definition (which contains a reference to an impl)\nwas typechecked and then put verbatim into an annotation on macro definition.\n\nThis solution is very simple, but unfortunately it's also lacking. If we use it\nthen signatures of macro defs become transitively dependent on scala-reflect.jar\n(because they refer to macro impls, and macro impls refer to\nscala.reflect.macros.Context defined in scala-reflect.jar).\nMore details can be found in https://issues.scala-lang.org/browse/SI-5940.\n\nTherefore we have to avoid putting macro impls into binding pickles and\ncome up with our own serialization format. Situation is further complicated\nby the fact that it's not enough to just pickle impl's class and method names,\nbecause macro expansion needs knowledge about the shape of impl's signature\n(which we can't pickle). Hence we precompute necessary stuff (e.g. the layout\nof type parameters) when compiling macro defs."
1097,'','Si 6198\nCreate a HashSet1 instead of a HashSetCollision1 if the list of colliding keys has only one entry.\n\nTo do this efficiently it was necessary to change ListSet so that head and tail are both O(1) with low overhead.\n\nBased on 2.10.x this time.'
1096,'','Implemented specialized filter for HashSet\nThe new implementation does not rebuild the tree from scratch like the builder-based filter method does.\n\nThis time it is based on 2.10.x, and it also passes ant test.suite.'
1095,'',"Moved inline logic before pickler.\nThe test case failed due to separate compilation. The problem was\nthat we don't pickle the fact that the field was made public.\n\nOriginal patch by @odersky. Cleaned up by me. Changes I made:\n\n  * removed stale test-case\n  * reduced whitespace changes\n\nSupersedes #1089.\n\nReview by @odersky and @adriaanm."
1094,'','fixes to existential-related reification problems\nreview by reflection meeting'
1093,'',"Fix SI-6208.  mutable.Queue now returns mutable.Queue for collection met...\n...hods rather than MutableList.\n\nReview by @alex22.  In particular, not happy about code duplication for `tail`.  Suggestions welcome, or I can refactory to add a MutableListLike if you think that's best."
1092,'',"SI-6184 don't introduce dummies in checkableType\nthis should fix the crash in asSeenFrom that resulted from calling\nbaseTypeSeq on a type that had an unbound type parameter in it\n\nalso, simplify widenToClass"
1091,'',"Better pattern matcher error message.\nFor the common case when someone hasn't quite grokked\nthe significance of lower case in a pattern match.  I'd\nlike to make all the unreachables errors, not warnings,\nbut there may be a bug or two to clear out first.\n\n    class A {\n      def badEquals(x: Any, y: Any) = x match {\n        case y => true\n        case _ => false\n      }\n    }\na.scala:3: warning: patterns after a variable pattern cannot match (SLS 8.1.1)\nIf you intended to match against parameter y of method badEquals, you must use backticks, like: case `y` =>\n    case y => true\n         ^\na.scala:4: warning: unreachable code due to variable pattern 'y' on line 3\n    case _ => false\n              ^\ntwo warnings found"
1090,'','fixes existential-related reification problems\nreview by reflection meeting'
1089,'',"Moved inline logic before pickler.\nThe test case failed due to separate compilation. The problem was that we don't\npickle the fact that the field was made public. Review by @gkossakowski, @adriaanm"
1088,'','SI-6205 make pt fully defined before inferTypedPattern\nrefines my fix for SI-2038 (#981) by making pt fully defined before calling inferTypedPattern,\ninstead of making the result of inferTypedPattern fully defined\n\nI finally realized my mistake by diffing the -Ytyper-debug output of compiling the variants with:\n\n```\n  x match {case Holder(k: A[kt]) => (k: A[kt])}\n```\n\nand\n\n```\n  (x: Any) match {case Holder(k: A[kt]) => (k: A[kt])}\n```'
1087,'',"Fixes SI-5687.\nRecover from erroneous type alias override to report\nmore useful error message.\n\nReview by @adriaanm (I couldn't come up with a scenario where normalize would loop and I don't think it can happen so I left the original commit as is). "
1086,'','merge 2.10.x into master\n'
1085,'',"Enable inlining in constructors.\nInlining in constructors has been disabled a long\ntime ago due to some VerifyErrors. Unfortunately,\n@dragos cannot recall what exactly was the problem.\nI tried to enable inlining in constructors and I\ndidn't see any problem.\n\n`Predef.assert` calls in class constructors are one\nof the biggest contributors to closure allocation\nin a compiler so we better off get rid of it.\n\nAdded a test-case that checks if inlining in\nconstructors works properly.\n\nReview by @magarciaEPFL and @paulp."
1084,'',"SI-5933 do the new patmat translation for scaladoc …\nespecially because it benefits from nicer type inference for partial functions\n\n**Resubmit Adriaan's pull request #980 with test**\n\nReview by @adriaanm."
1083,'','SI-6119 Fix mispelling on take documentation.\n'
1082,'paulp',"Removes AnyRef specialization from library\nAs discussed in #999, #1025 and\nhttps://groups.google.com/forum/?hl=en&fromgroups#!topic/scala-internals/5P5TS9ZWe_w\n\ninstrumented.jar is generated from the current source, there's no need\nfor a bootstrap commit.\n\nReview by @paulp."
1081,'','Merge 2.10.x\n'
1080,'','SI-6186 TypeTags no longer supported in macros\nThe original idea was to support both both TypeTags and ConcreteTypeTags as\ncontext bounds on macro implementations.\n\nBack then TypeTags were the implied default flavor of type tags. Basically\nbecause "TypeTag" is shorter than "ConcreteTypeTag" everyone jumped onto\nthem and used them everywhere.\n\nThat led to problems, because at that time TypeTags could reify unresolved type\nparameters ("unresolved" = not having TypeTag annotations for them). This\nled to a series of creepy errors, when one forgets to add a context bound\nin the middle of a chain of methods that all pass a type tag around, and then\nsuddenly all the tags turn into pumpkins (because that unlucky method just\nreifies TypeRef(NoPrefix, <type parameter symbol>, Nil and passes it down\nthe chain).\n\nHence we decided to rename ConcreteTypeTag => TypeTag & TypeTag => AbsTypeTag,\nwhich makes a lot of sense from a reflection point of view.\n\nUnfortunately this broke macros (in a sense), because now everyone writes\nTypeTag context bounds on macro implementations, which breaks in trivial\nsituations like: "def foo[T](x: T) = identity_macro(x)" (the type of x\nis not concrete, so macro expansion will emit an error when trying to\nmaterialize the corresponding TypeTag).\n\nNow we restore the broken balance by banning TypeTag from macro impls.\nThis forces anyone to use AbsTypeTags, and if someone wants to check the input\nfor presence of abstract types, it\'s possible to do that manually.'
1079,'','reflection now correctly supports inner classes and modules\nThis is a quick and dirty solution to `Class.getDeclaredClasses` not working for some corner cases of name mangling w.r.t inner classes and modules. In future we might investigate cleaner solutions to the problem.'
1078,'','reflection now correctly supports inner classes and modules\nThis is a quick and dirty solution to `Class.getDeclaredClasses` not working for some corner cases of name mangling w.r.t inner classes and modules. In future we might investigate cleaner solutions to the problem.'
1077,'','Makes all private variables accessed from an @inline method non-private.\ninlining across classes requires that accessed variables from @inline methods are not private. Review by @adriaanm, @magarciaEPFL'
1076,'','Fixes SI-3791\nreview by @phaller or @retronym\n\nAfter Float.Epsilon and Double.Epsilon have been deprecated for\n2.9, they have been removed for 2.10. With this pull request, the\ncorrect values for Epsilon are added for 2.11.\n\nThe definition for the machine epsilon is taken from the paper "What\nEvery Computer Scientist Should Know About Floating-Point Arithmetic"\nby David Goldberg, published in the March, 1991 issue of the ACM\nComputing Surveys.\n\nI have also fixed the indentation of two doc comments in both sources.'
1075,'','SI-6040 error on unauthorized extension Dynamic\nauthorization is easy to get: `import language.dynamics`\n\nreview by @hubertp'
1074,'',"SI-5330, SI-6014 deal with existential self-type\nThis has been broken since https://github.com/scala/scala/commit/b7b81ca2#L0L567.\nThe existential rash is treated in a similar manner as in fc24db4c.\n\nConceptually, the fix would be `def selfTypeSkolemized = widen.skolemizeExistential.narrow`,\nbut simply widening before narrowing achieves the same thing. Since we're in existential voodoo territory,\nlet's go for the minimal fix: replacing `this.narrow` by `widen.narrow`.\n\nreview by @odersky"
1073,'',"SI-6183 don't crash on type error in outer test\ndefend against ill-typed code reaching the outer-test codegen logic\nsince we already drop outer tests when in trouble, this fits nicely\n\nthere's no test case because the report was hard to minimize\nsince it was a crash on erroneous code, a backstop against a crash should suffice\n\nreview by @hubertp"
1072,'','update and normalize copyright notice\nThese are the regexp replacements performed:\n\nSxcala\n  -> Scala\n\nCopyright (\\d*) LAMP/EPFL\n  -> Copyright $1-2012 LAMP/EPFL\n\nCopyright (\\d*)-(\\d*)(,?) LAMP/EPFL\n  -> Copyright $1-2012 LAMP/EPFL\n\nCopyright (\\d*)-(\\d*) Scala Solutions and LAMP/EPFL\n  -> Copyright $1-2012 Scala Solutions and LAMP/EPFL\n\n\\(C\\) (\\d*)-(\\d*) LAMP/EPFL\n  -> (C) $1-2012 LAMP/EPFL\n\nCopyright \\(c\\) (\\d*)-(\\d*)(.*?)EPFL\n  -> Copyright (c) $1-2012$3EPFL\n\nThe last one was needed for two HTML-ified copyright notices.\n\nHere\'s the summarized diff:\n\nCreated using\n```\ngit diff -w | grep ^- | sort | uniq | mate\ngit diff -w | grep ^+ | sort | uniq | mate\n```\n\n```\n-          <div id="footer">Scala programming documentation. Copyright (c) 2003-2011 <a href="http://www.epfl.ch" target="_top">EPFL</a>, with contributions from <a href="http://typesafe.com" target="_top">Typesafe</a>.</div>\n-        copyright.string=Copyright 2002-2011, LAMP/EPFL\n-  <meta name="Copyright" content="(C) 2002-2011 LAMP/EPFL"/>\n- * Copyright 2002-2011 LAMP/EPFL\n- * Copyright 2004-2011 LAMP/EPFL\n- * Copyright 2005 LAMP/EPFL\n- * Copyright 2005-2011 LAMP/EPFL\n- * Copyright 2006-2011 LAMP/EPFL\n- * Copyright 2007 LAMP/EPFL\n- * Copyright 2007-2011 LAMP/EPFL\n- * Copyright 2009-2011 Scala Solutions and LAMP/EPFL\n- * Copyright 2009-2011 Scxala Solutions and LAMP/EPFL\n- * Copyright 2010-2011 LAMP/EPFL\n- * Copyright 2012 LAMP/EPFL\n-# Copyright 2002-2011, LAMP/EPFL\n-* Copyright 2005-2011 LAMP/EPFL\n-/* NSC -- new Scala compiler -- Copyright 2007-2011 LAMP/EPFL */\n-rem # Copyright 2002-2011, LAMP/EPFL\n```\n\n```\n+          <div id="footer">Scala programming documentation. Copyright (c) 2003-2012 <a href="http://www.epfl.ch" target="_top">EPFL</a>, with contributions from <a href="http://typesafe.com" target="_top">Typesafe</a>.</div>\n+        copyright.string=Copyright 2002-2012 LAMP/EPFL\n+  <meta name="Copyright" content="(C) 2002-2012 LAMP/EPFL"/>\n+ * Copyright 2002-2012 LAMP/EPFL\n+ * Copyright 2004-2012 LAMP/EPFL\n+ * Copyright 2005-2012 LAMP/EPFL\n+ * Copyright 2006-2012 LAMP/EPFL\n+ * Copyright 2007-2012 LAMP/EPFL\n+ * Copyright 2009-2012 Scala Solutions and LAMP/EPFL\n+ * Copyright 2010-2012 LAMP/EPFL\n+ * Copyright 2011-2012 LAMP/EPFL\n+# Copyright 2002-2012 LAMP/EPFL\n+* Copyright 2005-2012 LAMP/EPFL\n+/* NSC -- new Scala compiler -- Copyright 2007-2012 LAMP/EPFL */\n+rem # Copyright 2002-2012 LAMP/EPFL\n```'
1071,'','Prevent creation of one element HashSetCollision1\nif there is one element, there is no collision!\n\nA problem with this might be that size for ListSet is O(N), and there is no other way to figure out if a ListSet contains exactly one element. Also, head might not be efficient for ListSet. \n\nBut clearly having a HashSetCollision1 with one element is undesirable. '
1070,'','Topic/critical 2.10.x\nFrom my list of 2.10.x criticals.  Review by @adriaanm.'
1069,'','Prevent creation of one element HashTrieSet\nPrevent creation of one-element HashTrieSet when removing. This is only necessary in the branch where elemsNew is smaller than elems.'
1068,'','Implemented specialized filter for scala.collection.immutable.HashSet\nThis is a filter method for HashSet that does not use the builder infrastructure and thus does not create unneeded temporary copies. '
1067,'','Ultimate reflection pull request #2\nSupercedes https://github.com/scala/scala/pull/1048, https://github.com/scala/scala/pull/1052, https://github.com/scala/scala/pull/1054 and https://github.com/scala/scala/pull/1057.'
1066,'','SI-6102\nreview by @VladUreche or @dragos or @gkossakowski'
1065,'','Module object refactoring\n'
1064,'','SI-6145 lax typing of args to synthetic case-labels\nUse wildcard for the expected type of the arguments of a jump to a label\nsynthesized by the pattern matcher... except during erasure: we must take the\nexpected type into account as it drives the insertion of casts!\n\nIt\'s ok since we\'re typing the translation of well-typed code. The only "type\nerrors" we catch are skolem mismatches. (after erasure the existential types that\nbefore caused problems have disappeared.)\n\nIt\'s necessary to balance GADT magic, SI-6145, CPS type-driven transforms and\nother existential trickiness. I\'ve exhausted all other semi-clean approaches\nI could think of:\n  - the right thing to do -- packing existential types -- runs into limitations\n    in subtyping existential types,\n  - casting breaks SI-6145 (and it\'s an unnecessary cast at run time),\n  - not casting breaks GADT typing as it requires sneaking ill-typed trees\n    past typer\n\nreview by @odersky'
1063,'',"SI-5788 Tailcalls LabelDefs correctly duplicated\n... in specialization.\n\nThis is a quick hack to get SI-5788 fixed in 2.10.x. The full patch,\nwhich fixes the tailcalls LabelDefs will be merged into trunk, as it's\ntoo late for big changes.\n\nFor reference, the complete fix is: e86afe65c8\n\nReview by @adriaanm or @non."
1062,'',"SBT compiler interface now compiled in ant build.  Ensures those still u...\n...sing ant don't break the interface.\n\nReview by @harrah, @xeno-by, @lrytz and anyone else interested.  \n\nNote: This will break the build until Eugene's pull request is merged."
1061,'','compatibility stub for SBT 0.12.0\nAs discussed in http://groups.google.com/group/scala-internals/browse_thread/thread/9ee8df2ae9d43169,\nrecent change of return type for Type.members (from List[Symbol] to Scope)\nbroke compiler-interface for SBT 0.12.0-final.\n\nThis stub (courtesy of Jason Zaugg) keeps reflection API untouched and\nalso fixes SBT. Win-win.'
1060,'',"SI-5739 (bis) vals for subpatterns when -g:patmatvars\nTo facilitate debugging pattern matches, we store the values for\nsub-patterns of extractor (synthetic or user-defined) patterns when -g:patmatvars.\nNormally we inline them directly unless compiling under -g:patmatvars\n\nFor soundness, SI-5158, SI-6070, we must always store the values of mutable case class fields.\n\nWe don't always do this since it may affect performance.\nAlso, the total cost in byte code size is about 1% for the compiler&stdlib\nwhen run with -optimize and -g:patmatvars\n(but see SI-6193: dead case class field accessor calls are not eliminated).\n\nThere were suspicions that emitting this many local variables may impact run-time performance\n(it surely affects compiler performance) thus, I've decided to make these definitions opt-in.\nSimply pass `-g:patmatvars` to scalac to facilitate debugging of pattern matches."
1059,'','SI-6188\nreview by @VladUreche or @dragos'
1058,'','Changes REPL output from "defined module" to "defined object"\n'
1057,'',"first step in making mirrors work with primitives  \nmirrors now carry a class tag of the receiver, so that they can detect\nvalue classes being reflected upon and adjust accordingly (e.g. allow\nInt_+ for ints, but disallow it for Integers). This is a first step\nin fixing SI-6179.\n\nHowever magic methods on primitives (e.g. Int_+ or Boolean_||) are not\nimplemented yet. There are a lot of them, and bruteforce solution\nwould produce a lot of code. Hence we'd better take time to think of a\nbetter way to do it. Anyhow this commit is an improvement, because\nit replaces a cryptic error message with a clearly stated error.\n\nSuprisingly enough derived value classes (SIP-15 guys that inherit from AnyVal)\nhave been working all along, so no modification were required to fix them."
1056,'','Bases futures on Try instead of Either\nThis pull request is a result of meetings between the Scala team, the Akka team and Twitter Engineering to move toward a consolidated future implementation.\n\nIts main contribution is the replacement of the use of `Either` with `scala.util.Try` in methods `Future.onComplete`, `Future.value`, `Future.andThen`, `Promise.complete`, and `Promise.tryComplete`.\n\n`Try` is an abstraction adopted from the `com.twitter.util` package \\[[1]\\]. Unlike `Either`, `Try` is projection-less, which makes it more composable and more semantically similar to futures. Furthermore, as compared to `Either`, `Try` is better suited to handling exceptions, including execption-specific combinators such as `recover` and `recoverWith` (called `rescue` in `com.twitter.util.Try`). Moreover, both fatal and non-fatal exceptions are handled consistently across combinators such as `map` and `flatMap`. \n\nChanges compared to Twitter\'s original implementation of `Try`:\n- Use `scala.util.control.NonFatal` (adopted from Akka \\[[2]\\] for SIP-14) to avoid catching fatal exceptions.\n- Rename `Return/Throw` (in package `com.twitter.util`) to `Success`/`Failure` (in package `scala.util`); this makes the use of `Try` in combination with `Future` more regular.\n- Rename `handle` (in package `com.twitter.util`) to `recover` (in package `scala.util`).\n- Rename `rescue` (in package `com.twitter.util`) to `recoverWith` (in package `scala.util`), after `scala.concurrent.Future`\'s semantically-similar `recoverWith` method.\n- Add `foreach` method.\n- Add `orElse` method.\n- Add `failed` projection.\n\nThis pull request additionally contains some small fixes (`flatMap` in `Try` now goes through the `NonFatal` extractor), clean ups, and added tests on `Try`.\n\n@phaller has also included a `prepare` method on `ExecutionContext`s which enables abstractions to be built on top of execution contexts, such as Twitter\'s `Local` for handling data local to a chain of future callbacks, as previously discussed.\n\nReview by @viktorklang, and if available @mariusaeriksen \n\n[1]: https://github.com/twitter/util/ "com.twitter.util"\n[2]: http://akka.io/ "Akka"\n'
1055,'','adds deprecation annotations on manifest incantations\n'
1054,'',"multiple fixes for java mirrors  \nFirst of all in 911bbc4fdd I've completely overlooked the fact that\nreflectConstructor exists and that is also needs sanity checks.\n\nNow reflectConstructor checks that the incoming symbol is actually a ctor,\nand that it is actually a ctor of the class reflected by the current mirror.\n\nSecondly while fixing reflectConstructor I've found out that reflectXXX methods\ndon't accept inherited, but overriden members. That's also fixed now.\n\nHaha that was a nice one. After a fixed the problem with inherited members,\nI've uncovered another issue. If we have a field overriden in a descendant,\nthen (unlike with methods) overriding and overriden members make sense\nindependently of each other. Hence in `FieldMirror.get` we need some way\nof specifying whether we want the base value or the overriding value.\nTo do that I introduced an optional parameter. Luckily we don't need to change\n`FieldMirror.set` because vars cannot be overriden."
1053,'',"More resilience to missing classes.\nThe situation (I don't know how to make partest test this) is\n\n  package s\n  class A ; class S { def f(): A = ??? }\n\nIf one compiles this and removes A.class, should references to\nclass S cause the compiler to explode eagerly and fail to load S,\nor explode lazily if and when it needs to know something about A?\nThis patch takes us from the former strategy to the latter.\n\nReview by @xeno-by."
1052,'','SI-6181 method mirrors now support by-name args\nArguments provided in by-name positions are now automatically wrapped\nin Function0 instances by method mirrors.'
1051,'',"SI-6074\nWhen selecting a non-accessible constructor, don't infer a view to\nsomething with an accessible constructor.\n\nreview by @adriaanm"
1050,'','better error messages for Symbol.asXXX methods\nreview by anyone'
1049,'','Clear uniques via perRunCaches.\nThat lets this huge cache be cleared eagerly after a run\nis over rather than lazily when another run begins.  This\narrives pre-LGTMed by Important People.'
1048,'',"SI-6178 reflective invocation of magic symbols\nIn Scala there are some methods that only exist in symbol tables,\nbut don't have corresponding method entries in Java class files.\n\nTo the best of my knowledge, these methods can be subdivided into four groups:\n1) stuff weaved onto Any, AnyVal and AnyRef,\n2) magic methods that Scala exposes to fix Java arrays,\n3) compile-time methods (such as classOf and all kinds of macros),\n4) miscellaneous stuff (currently only String_+).\n\nTo support these magic symbols, I've modified the `checkMemberOf` validator\nto special case Any/AnyVal/AnyRef methods and adjusted MethodMirror and\nConstructorMirror classes to use special invokers for those instead of\nrelying on Java reflection."
1047,'',"adds more tests for api.Symbols\nI overlooked some of the tests that should be added to the public API.\nThis commit fixes my mistake. Also see 027b00171c.\n\nTo reiterate the reasoning behind introduction of test methods into the API.\nI'd argue that the API duplication w.r.t flags is trumped by unified interface\nto tests and better encapsulation (especially since some of the flags have\ndifferent meaning depending on whether the flaggee is a term or a type)."
1046,'','staticTpe => staticType, actualTpe => actualType\nreview by @paulp'
1045,'',"SI-6175 reflect over classes with symbolic names\nTop-level classes with symbolic names (having binary names like $colon$colon)\nhave previously been incorrectly treated as local classes by Scala reflection.\nAs a result they were loaded as if they weren't pickled (i.e. as Java classes).\n\nMoreover this bug also had a more subtle, but more dangerous manifestation.\nIf such a class has already been loaded indirectly by unpickling another class\n(which refers to it in its pickle) and then someone tried to load it explicitly\nvia classToScala, then it would be loaded twice (once as a Scala artifact and\nonce as a Java artifact). This is a short route to ambiguities and crashes.\n\nThe fix first checks whether a class with a suspicious name (having dollars)\ncan be loaded as a Scala artifact (by looking it up in a symbol table).\nIf this fails, the class is then loaded in Java style (as it was done before).\n\nAmbiguous names that can be interpreted both ways (e.g. foo_$colon$colon)\nare first resolved as Scala and then as Java. This prioritization cannot lead\nto errors, because Scala and Java artifacts with the same name cannot coexist,\ntherefore loading a Scala artifact won't shadow a homonymous Java artifact."
1044,'',"SI-5940 impls are no longer in macro def pickles\nThe first officially released version of macros persisted\nmacro def -> impl bindings across compilation runs using a neat trick.\n\nThe right-hand side of macro definition (which contains a reference to an impl)\nwas typechecked and then put verbatim into an annotation on macro definition.\n\nThis solution is very simple, but unfortunately it's also lacking. If we use it\nthen signatures of macro defs become transitively dependent on scala-reflect.jar\n(because they refer to macro impls, and macro impls refer to\nscala.reflect.macros.Context defined in scala-reflect.jar).\nMore details can be found in https://issues.scala-lang.org/browse/SI-5940.\n\nTherefore we have to avoid putting macro impls into binding pickles and\ncome up with our own serialization format. Situation is further complicated\nby the fact that it's not enough to just pickle impl's class and method names,\nbecause macro expansion needs knowledge about the shape of impl's signature\n(which we can't pickle). Hence we precompute necessary stuff (e.g. the layout\nof type parameters) when compiling macro defs."
1043,'',"updating resolveDups() to use MethodTFA.mutatingInterpret()\nWithout this patch ICodeReader doesn't load bytecode for some Java-compiled class files (those containing DUP_X-style instructions).\n\nreview by @VladUreche or @dragos"
1042,'',"Merge 2.10.x\nAfter that reflection commit it's conflict city."
1041,'','Issue/6153\nThis is my patch for the BigDecimal.hashCode bug, as discussed at https://issues.scala-lang.org/browse/SI-6153 .  I\'m quite new to Scala, so any suggestions for improvement are welcome.  Some things it fixes:\n * BigDecimal still returns same hashCode for equivalent values (e.g. "2" and "2.00")\n * BigInt and BigDecimal now return same hashCode for equivalent values\n * BigDecimal returns same hashCode as for equivalent Int, Long, and\n   Double values\n * BigDecimal hashCodes are no longer "stratified", as discussed in the original bug report\n * Although the new version is more expensive to compute than the old, the result is saved so it only has to be computed once\n\nIt\'s worth noting that since this changes the hashCode algorithms for BigInt and BigDecimal, it could break serialized data structures that rely on them (e.g. if someone serializes a hash table from an old version of Scala and tries to load it into a new one, it may cause problems).\n\n--Bennet Huber\n\nPS Thanks to Paul Phillips for initial patch skeleton\n'
1040,'','Fixes SI-6172.\nAll the credit for fixing magical constants in the encoding algorithm goes to @magarciaEPFL.\nThis time provided a test case that exercises GenASM.'
1039,'',"Ultimate reflection pull request\nUnifies https://github.com/scala/scala/pull/1017, https://github.com/scala/scala/pull/1031 and https://github.com/scala/scala/pull/1035.\n\nAll of those were LGTM'd by Martin, but couldn't be merged cleanly w.r.t each other. So now we only have to see that their superposition passes all the tests."
1038,'',"Ultimate reflection pull request\nUnifies https://github.com/scala/scala/pull/1017, https://github.com/scala/scala/pull/1031 and https://github.com/scala/scala/pull/1035.\n\nAll of those were LGTM'd by Martin, but couldn't be merged cleanly w.r.t each other. So now we only have to see that their superposition passes all the tests."
1037,'','SI-6167 Faster Vector#isEmpty (and head, tail, last, init)\nAvoid building a VectorIterator just to check if iterator.hasNext\nis false.'
1036,'','SI-6167 Faster Vector#isEmpty (and head, tail, last, init)\nAvoid building a VectorIterator just to check if iterator.hasNext\nis false.'
1035,'','first stab at serialization of exprs and tags\nIncludes 5 commits from https://github.com/scala/scala/pull/1017, because both this pull request and that one deploy a new starr, so I saved us all a starr-rebuilding merge.'
1034,'','minor fixes scaladoc\n'
1033,'',"Want a 25% partest speedup?*\n... well then, don't compile twice!\n\nExplanation:\nThe compilation process in partest happens in 3 stages:\n - scala + java files, all fed to scalac (so the java signatures are\n   loaded and the scala bytecode is generated)\n - java files, fed to javac (so the java bytecode is generated)\n - scala files, fed to scalac (so the scala bytecode correctly links\n   to the javac-generated bytecode)\n\nWhile this mechanism is great to have, for simple 1-file scala tests\nit's overkill by compiling scala files twice. So I adjusted the compile\nprocedure to only run the first step if java files are empty, leading\nto a 25% partest speedup.*\n\nReview by @paulp.\n\n\\* as measured on test.scaladoc"
1032,'','I actually managed to hit the limit of Scala signature annotation not fi...\n...tting into a single string (high five everyone) and entered the undisovered region of arrEncode in GenASM.\n\narrEncode returns Array[String] so asm.AnnotationWriter is not going to like it.\n\nAlready discussed with @magarciaEPFL but please review again.'
1031,'','improvements to reflection API\nreview by reflection meeting'
1030,'','SI-5751 cleans up toolboxes for the release\nRemoves the `freeTypes` parameters on `typeCheckExpr` and `runExpr`,\nsince we now have public `substituteTypes` on both trees and types.\n\nAlso implements long-awaited `inferImplicitValue` and `inferImplicitView`\n(thanks to Miles Sabin for nudging me!)'
1029,'','Added more variants to achieve getLinkPos\ngetLinkPos is known to be flakey. This commit tries some variants and logs what failed.\n\n\nReview by @dragos'
1028,'','Made worksheet output wrap around after custimizable # of output columns\nReview @dragos'
1027,'',"first stab at serialization of exprs and tags\nInstead of serializing into nonsense that can hardly be deserialized\n(which happens now), exprs and type tags will now serialize their creators\nand deserialize into scala.reflect.basis.\n\nSince creators produced by reification are not serializable right now,\nserialization will crash. That's a small improvement over state of the art\nfunctionality-wise, but it's a step forward robustness-wise.\n\nNext step in this direction is generation of serialization code for creators.\nRelated issues: SI-5919 and SI-5908. Also see the discussion at scala-internals\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/ef63f8b5bd194c7c"
1026,'',"SI-6162 Adds @deprecatedInheritance to dissuade from inheriting a class\n!!!WIP!!!\n\nI added some preliminary implementation of deprecatedInheritance.\n\nOne issue with the current code is that I get 2 warnings (this issue gets hidden in the test due to -Xfatal-warnings). I tried `psym != selfType.typeSymbol && psym.hasDeprecatedInheritanceAnnotation` and similar stuff to catch the duplicate warning, but didn't figure it out yet.\n\nI think if we want something like deprecatedOverride, it should be an additional annotation, so that the meaning and behaviour of each is clearly defined.\n\nReview: @retronym @paulp\n\n"
1025,'paulp',"Hiding AnyRef specialization under a flag\nThe current AnyRef specialization is still fragile, so we'll let the\nusers choose whether to use it or not via the -Xanyref-specialization\ncompiler flag. Source code can always be compiled against a previously\nAnyRef-specialized classes, but will only be AnyRef-specialized itself\nif the flag is set.\n\nIn this patch, an anti-annotation is introduced to mark the fact that\nAnyRef specialization should be excluded (@specializedExcludeAnyRef).\nThis anti-specialization annotation is added automatically by the\ncompiler to all @specialized type parameters, iregardless of whether\nthe type parameter is going to be specialized on AnyRef or not. The\nreason is that the logic necessary to decode the types involved in the\nspecialization should not be moved outside SpecializeTypes.scala.\n\nOnce @specializedExcludeAnyRef is set (in superaccessors) and pickled\ninto the class file, all further scalac runs will specialize the\nsignature for all given types except AnyRef.\n\nThe instrument.jar archive is generated from the current source, thus\nthere's no need for an extra bootstrapping commit.\n\nReview by @paulp and @non."
1024,'','Fixed maddening "..." lately in printed types.\nThis must have been me when I eliminated some of the\nremaining distinction between TypeRef(_, moduleClass, Nil) and\nSingleType(_, moduleClass).  Sorry I didn\'t track it down sooner.\nReview by anyone who is around because this is overdue.\n'
1023,'','Fix for SI-6084, type alias crasher.\n"no need for pt.normalize here, is done in erasure"\n\nORLY? Review by @adriaanm.'
1022,'','SI-5764 Honor -language:_\nWe now enable all language feature if -language:_ is given on the command line. Review by @paulp'
1021,'','Fix for SI-6154, VerifyError originating in uncurry.\nLhs still might be an Ident.  Miguel did all the work,\nI just wrote it down in code form.'
1020,'','SI-5866 Support casting null to value classes\nThe fix now supports null.asInstanceOf[C] where C is a value class that wraps a primitive type. Review by @jsuereth'
1019,'lrytz','Fix failing nightly build on java7\nReview by @lrytz'
1018,'',"ClassTag.Nothing now throws an exception\nNothing is a bottom type, so it doesn't make much sense for it to have\na meaningful erasure (ClassTag.Nothing.runtimeClass)."
1017,'','SI-5750 scala.reflect.makro => scala.reflect.macros\nPreviously was https://github.com/scala/scala/pull/983'
1016,'','Fixed SI-5031. Only consider classes when looking for companion class.\nsym.effectiveOwner revealed this piece of inconsistency. companionModule\nis fine because similar check is there already.\n\nI removed a bunch of feature imports that were unnecessary.\n\nReview by @paulp.'
1015,'','Fixed SI-5603. Early definitions now get transparent positions.\nThis includes a fix for a minor problem described in #594 -\nensureNonOverlapping still focuses on default position when outside of early defs.\nReview by @dragos, @odersky.\n\n@misto, you might wanna have a look as well. '
1014,'','Fixes typo in Throwable compiler warning\nSee corresponding section in style guide: http://docs.scala-lang.org/style/types.html'
1013,'','Closes SI-5878\nWe need to impose an additional rule on value classes: They may not unbox directly or indirectly to themselves. \n\nReview by @paulp, @moors'
1012,'','Promote unchecked warnings into being emitted by default.\nTo make that viable, suppression of unchecked warnings is now available\non a per-type-argument basis. The @unchecked annotation has hereby been\ngeneralized beyond exhaustiveness to mean context-dependent "disable further\ncompiler checking on this entity." Example of new usage:\n\n  def f(x: Any) = x match {\n    case xs: List[String @unchecked] => xs.head   // no warning\n    case xs: List[Int]               => xs.head   // unchecked warning\n  }\n\nIt turns out -unchecked has been put to other noisy uses such as\nthe pattern matcher complaining about its budget like a careworn spouse.\nThis actually simplified the path forward: I left -unchecked in place\nfor that and general compatibility, so those warnings can be enabled\nas before with -unchecked. The erasure warnings I turned into regular\nwarnings, subject to suppression by @unchecked.\n\nReview by @odersky.'
1011,'','Closes SI-5882\nI have added a restriction that value classes may not contain inner classes or objects. This makes sense as the "outer" field of any such classes or objects would be ephemeral, with surprising results. SIP-15 has been changed accordingly.\n\nReview by @szeiger @moors'
1010,'','Closed 6029 ...\n... in a less nice way than I would like. Essentially, we mask type errors at later stages that arise from comparing existentials and skolems because we know that they are not tracked correctly through all tree transformations. Never mind that all these types are going erased anyway shortly afterwards. It does not smell nice. But as I write in the comment, maybe the best way out is to\navoid skolems altogether. Such a change by far exceeds the scope of this pull request however.\n\nReview by @paulp'
1009,'','SI 4023 Testcase closes issue with inner classes/getDeclaredClasses\nReview by those who participated in the bug tracker discussion @paulp @dragos @gkossakowski @xeno-by so that we can be sure that the test covers all cornercases.'
1008,'','Adds `movePointLeft` and `movePointRight` to `scala.BigDecimal`.\nFixes SI-4619.'
1007,'','SI-6064 Add method contains to Option.\nThe Option API more or less mirrors the Collection API,\nbut it seems that somehow this method has been forgotten.\n\nResubmit of #886 for Scala 2.11.\n\nReview: @axel22'
1006,'','merge 2.10.x into master\nreview by @paulp'
1005,'','IDE imrpovements, with particular focus on making worksheets work.\nReview by @dragos'
1004,'',"Topic/warnings 2.10.x\nEliminated most non-deprecation warnings in trunk.\n\nI didn't know if this would go in 2.10.x so I'm opening separate pull requests.\n"
1003,'',"Topic/warnings\nEliminated most non-deprecation warnings in trunk.\n\nI didn't know if this would go in 2.10.x so I'm opening separate pull requests."
1002,'','SI-6142: warn @inline-methods ending up not inlined (rightfully or not)\nreview by @paulp , @VladUreche'
1001,'','Removed restriction on final vars, SI-2418.\nThe original fix for SI-2418 excluded final vars entirely, but\nthe problem was not final vars per se, but the emission of ACC_FINAL\nin combination with ACC_VOLATILE.  Since vars never get ACC_FINAL\nnow, this is no longer an issue.\n\nReview by @dragos.'
1000,'',"Refined isEffectivelyFinal logic for sealedness.\nIf the enclosing class of a method is sealed and has only final\nsubclasses, then the method is effectively final in the sealed class if\nnone of the subclasses overrides it. This makes it possible to inline\nmore methods without explicitly marking them final.\n\nNote that the test doesn't fail before this patch due to SI-6142,\na bug in the optimizer, but here's a bytecode diff to prove it:\n\n  @@ -16,8 +16,10 @@ public final class Test$ {\n       Code:\n   : getstatic                      // Field Foo$.MODULE$:LFoo$;\n   : invokevirtual                  // Method Foo$.mkFoo:()LFoo;\n  +: pop\n   : bipush\n  -: invokevirtual                  // Method Foo.bar:(I)I\n  +: iconst_1\n  +: iadd\n   : ireturn\n\nAnd the test in neg, which is manually made to fail due to the absence\nof inline warnings, correctly refuses to inline the methods.\n\nReview by @dragos."
999,'',"Hiding AnyRef specialization under a flag\nAs discussed on SI-6103: https://issues.scala-lang.org/browse/SI-6103\n\nThe reasoning is the following: the current implementation is fragile,\nso we'll let the users choose whether to use it or not via the\n-Xanyref-specialization flag. Source can be compiled against previously\nAnyRef-specialized code without the flag, and will use the AnyRef-specd\nclasses, but will not be AnyRef-specialized itself.\n\nSince the specialization information is pickled into the classfile,\nwe need to filter AnyRef out of the specialized annotation before we\npickle it. This is exactly what this patch does -- it expands the\nspecialized types in superaccessors, warns if it notices AnyRef, and\nreplaces the modified annotation.\n\nTHIS PATCH BREAKS BACKWARD COMPATIBILITY AT BYTECODE LEVEL:\n - previously un-expanded specializations won't work anymore\n - since Function*, Tuple* and Option were previously specialized\non AnyRef but are no more, older code that uses the specialized classes\nwon't work anymore\n\nAnother less intrusive solution suggested by Lukas is to add an\nanti-annotation @noAnyRefspecialization that we can add in\nsuperaccessors and read in specialization to remove AnyRef from\nthe specialized list. WDYT?\n\nReview by @paulp and @dragos pls. KTHXBYE"
998,'','Avoids loading scala.package and scala.reflect.package from source if a ...\n...classfile exists.\n\nWe know that loading these packages from source leads to compilation errors. To reproduce: Update scala.reflect.package, make sure it is on the source path and recompile anything using it. You will get a number of errors having to do with ClassTags and macro expansions. With the patch, these errors go away because the package is not loaded as long as a classfile exists.\n\nReview my @adriaanm, @dragos'
997,'','`ScriptSourceFile` should not hard-code `OffsetPosition`.\nThe presentation compiler should support script source files as well, but it needs range positions. This commit fixes an oversight when `RangePosition` was introduced.\n\nreview by @odersky, @hubertp'
996,'',"Partest instrumentation fixes\nInstrument all classes in `instrumented` package.\nExtend instrumenting infrastructure to instrument\nclasses in `instrumented` package. This is useful\nbecause very often you need to put your classes\ninto non-empty package. E.g. inliner doesn't work\nproperly with empty package at the moment so in\norder to test any behaviour we need to put classes\nin some other package that is instrumented.\n\nAdded testing code for that to instrumentation\ntest-case.\n\n--- \n\nFix `Instrumentation.getStatistics` method in partest.\nThe previous implementation was wrong because it\nwould always enable profiling after call to\n`Instrumenation.getStatistics` method. Now we are\nchecking the profiling status and enable it again\nonly when it was enabled before.\n\nReview by @phaller."
995,'','Scala REPL breaks on != (not equals)\nSummary: Typing "!=" on Scala breaks the REPL. It asks if the statements should be replayed -- regardless of answer, there\'s an issue with the buffer.\n\nI\'m on Fedora Core 17.\n\n```\nWelcome to Scala version 2.9.1.r0-b20120114224707 (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_25\n```\n\n```\n\nscala> 1 != 2\njava.lang.IllegalArgumentException: != 2: event not found\n        at jline.console.ConsoleReader.expandEvents(ConsoleReader.java:426)\n        at jline.console.ConsoleReader.finishBuffer(ConsoleReader.java:311)\n        at jline.console.ConsoleReader.readLine(ConsoleReader.java:1216)\n        at jline.console.ConsoleReader.readLine(ConsoleReader.java:1051)\n        at scala.tools.nsc.interpreter.JLineReader.readOneLine(JLineReader.scala:76)\n        at scala.tools.nsc.interpreter.InteractiveReader$class.readLine(InteractiveReader.scala:44)\n        at scala.tools.nsc.interpreter.JLineReader.readLine(JLineReader.scala:19)\n        at scala.tools.nsc.interpreter.ILoop.readOneLine$1(ILoop.scala:533)\n        at scala.tools.nsc.interpreter.ILoop.loop(ILoop.scala:550)\n        at scala.tools.nsc.interpreter.ILoop.process(ILoop.scala:822)\n        at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:67)\n        at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:80)\n        at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:89)\n        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n\nThat entry seems to have slain the compiler.  Shall I replay\nyour session? I can re-run each line except the last one.\n[y/n] y\nscala> val a = 1\njava.lang.IllegalArgumentException: != 2val a = 1: event not found\n        at jline.console.ConsoleReader.expandEvents(ConsoleReader.java:426)\n        at jline.console.ConsoleReader.finishBuffer(ConsoleReader.java:311)\n        at jline.console.ConsoleReader.readLine(ConsoleReader.java:1216)\n        at jline.console.ConsoleReader.readLine(ConsoleReader.java:1051)\n        at scala.tools.nsc.interpreter.JLineReader.readOneLine(JLineReader.scala:76)\n        at scala.tools.nsc.interpreter.InteractiveReader$class.readLine(InteractiveReader.scala:44)\n        at scala.tools.nsc.interpreter.JLineReader.readLine(JLineReader.scala:19)\n        at scala.tools.nsc.interpreter.ILoop.readOneLine$1(ILoop.scala:533)\n        at scala.tools.nsc.interpreter.ILoop.loop(ILoop.scala:550)\n        at scala.tools.nsc.interpreter.ILoop.process(ILoop.scala:822)\n        at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:67)\n        at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:80)\n        at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:89)\n        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n\nThat entry seems to have slain the compiler.  Shall I replay\nyour session? I can re-run each line except the last one.\n[y/n] n\nAbandoning crashed session.\n\nscala> 1 == 1\njava.lang.IllegalArgumentException: != 2val a = 11 == 1: event not found\n        at jline.console.ConsoleReader.expandEvents(ConsoleReader.java:426)\n        at jline.console.ConsoleReader.finishBuffer(ConsoleReader.java:311)\n        at jline.console.ConsoleReader.readLine(ConsoleReader.java:1216)\n        at jline.console.ConsoleReader.readLine(ConsoleReader.java:1051)\n        at scala.tools.nsc.interpreter.JLineReader.readOneLine(JLineReader.scala:76)\n        at scala.tools.nsc.interpreter.InteractiveReader$class.readLine(InteractiveReader.scala:44)\n        at scala.tools.nsc.interpreter.JLineReader.readLine(JLineReader.scala:19)\n        at scala.tools.nsc.interpreter.ILoop.readOneLine$1(ILoop.scala:533)\n        at scala.tools.nsc.interpreter.ILoop.loop(ILoop.scala:550)\n        at scala.tools.nsc.interpreter.ILoop.process(ILoop.scala:822)\n        at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:67)\n        at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:80)\n        at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:89)\n        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n\nThat entry seems to have slain the compiler.  Shall I replay\nyour session? I can re-run each line except the last one.\n[y/n]\nAbandoning crashed session.\nscala> foo\njava.lang.IllegalArgumentException: != 2val a = 11 == 1foo: event not found\n        at jline.console.ConsoleReader.expandEvents(ConsoleReader.java:426)\n        at jline.console.ConsoleReader.finishBuffer(ConsoleReader.java:311)\n        at jline.console.ConsoleReader.readLine(ConsoleReader.java:1216)\n        at jline.console.ConsoleReader.readLine(ConsoleReader.java:1051)\n        at scala.tools.nsc.interpreter.JLineReader.readOneLine(JLineReader.scala:76)\n        at scala.tools.nsc.interpreter.InteractiveReader$class.readLine(InteractiveReader.scala:44)\n        at scala.tools.nsc.interpreter.JLineReader.readLine(JLineReader.scala:19)\n        at scala.tools.nsc.interpreter.ILoop.readOneLine$1(ILoop.scala:533)\n        at scala.tools.nsc.interpreter.ILoop.loop(ILoop.scala:550)\n        at scala.tools.nsc.interpreter.ILoop.process(ILoop.scala:822)\n        at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:67)\n        at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:80)\n        at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:89)\n        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n\nThat entry seems to have slain the compiler.  Shall I replay\nyour session? I can re-run each line except the last one.\n[y/n]\n```\n'
994,'','SI-5314 - CPS transform of return statement fails (resubmission of #987)\nEnable return expressions in CPS code if they are in tail position. Note that tail returns are\nonly removed in methods that do not call `shift` or `reset` (otherwise, an error is reported).\n\nAddresses the issues pointed out in a previous pull request:\nhttps://github.com/scala/scala/pull/720\n\n- Addresses all issues mentioned here:\n  https://github.com/scala/scala/pull/720#issuecomment-6429705\n\n- Move transformation methods to SelectiveANFTransform.scala:\n  https://github.com/scala/scala/pull/720#commitcomment-1477497\n\n- Do not keep a list of tail returns.\n\nTests:\n- continuations-neg/t5314-missing-result-type.scala\n- continuations-neg/t5314-type-error.scala\n- continuations-neg/t5314-npe.scala\n- continuations-neg/t5314-return-reset.scala\n- continuations-run/t5314.scala\n- continuations-run/t5314-2.scala\n- continuations-run/t5314-3.scala\n\nReview by @TiarkRompf and @adriaanm'
993,'','Remove typesafe-config as dependency for library.  Akka-actors will draw...\n... it in.\n\nReview by @lrytz or @adriaanm.\n\nAnd sorry, this holds up 2.10.0-M6'
992,'','Optimization in List.\nMark all the closure-accepting methods which have implementations\nwithin List as @inline final so the closures can be eliminated.\n(All the methods are effectively final anyway, as Nil and :: are\nthe only possible subclasses.) And compromise with respect to\nthe inlining of inherited methods by overriding foreach (responsible\nfor over 300 closures) with an inlinable implementation.\n\nReview by @gkossakowski.'
991,'',"SI-5958 This deserves a stable type\n`this` (or the self variable) passed as an actual argument to a method\nshould receive a singleton type when computing the method's resultType\n\nthis is necessary if the method's type depends on that argument"
990,'heathermiller','SI-6140 Scaladoc infinite recursion in wiki parser\nintroduced by dc70d1b7.\n\nReview by @heathermiller.'
989,'','hotfix for TwoWayCache\n'
988,'','Issue/4560\n'
987,'','SI-5314 - CPS transform of return statement fails\nSI-5314 - CPS transform of return statement fails\n\nEnable return expressions in CPS code if they are in tail position. Note that tail returns are\nonly removed in methods that do not call `shift` or `reset` (otherwise, an error is reported).\n\nAddresses the issues pointed out in a previous pull request:\nhttps://github.com/scala/scala/pull/720\n\n- Addresses all issues mentioned here:\n  https://github.com/scala/scala/pull/720#issuecomment-6429705\n\n- Replaces explicit context stack with another hook in the AnnotationChecker interface,\n  as suggested by @TiarkRompf here:\n  https://github.com/scala/scala/pull/720#commitcomment-1477464\n\n- Move transformation methods to SelectiveANFTransform.scala:\n  https://github.com/scala/scala/pull/720#commitcomment-1477497\n\n- Do not keep a list of tail returns.\n\n- No separate traversal for issuing non-tail errors.\n\nTests:\n\n- continuations-neg/t5314-missing-result-type.scala\n- continuations-neg/t5314-type-error.scala\n- continuations-neg/t5314-npe.scala\n- continuations-run/t5314.scala\n- continuations-run/t5314-2.scala\n- continuations-run/t5314-3.scala\n\nReview by @TiarkRompf and @adriaanm'
986,'',"SI-6075 cleans up api.StandardNames\nI removed most of the stuff from api.StandardNames and reorganized all names.\nIn the new scheme of things (as documented in the comments to StandardNames):\n\n1) base.StandardNames contains names necessary for building trees. For example,\ntpnme.WILDCARD_STAR is necessary to build some invocations of varargs methods,\nand nme.CONSTRUCTOR is necessary to build invocations of constructors.\n\n2) api.StandardNames hosts names that are core to doing reflection. E.g.,\nto get to a package object, you need to find a member named nme.PACKAGE,\nto strip off the whitespace from the name of an underlying field of a val,\nyou need nme.LOCAL_SUFFIX_STRING.\n\nNote that we don't need nme.MODULE_SUFFIX_STRING, because module name mangling\nis encapsulated in java mirrors."
985,'',"SI-6112 exposes symbol mutators in macro universe\nIn makro.Universe we expose the most hardcore fragments of the compiler API\nthat don't make sense / can't be made use of in runtime reflection API.\n\nmakro.Universe is already refining Tree to include setters for\nsymbols, types and positions. Now we bring Symbol up to speed."
984,'','SI-6058 makes JavaMirror caches weak\nAs discussed on reflection meeting on 2012/07/19'
983,'','SI-5750 scala.reflect.makro => scala.reflect.macros\n'
982,'',"SI-5930 SI-5897 reduce redundant warnings in matches, fix flags usage\n* SI-5930 don't warn about dead code in jump to case\nthe jump to matchEnd with a throw new MatchError in the argument position caused spurious dead code warnings, so ignoring those (yes, the jump is dead code, but this is how it has to be)\n\n* SI-5897 don't check sensicality in match\nthe pattern matcher analyses (unreachability/exhaustivity) should cover more than the sensical comparison analysis, so skipping the latter in matches\n\n* the fix for SI-5930 required factoring out some flag checking code, so moved the magic flag combo to treeInfo\nshould go to Flags, I feel, but opinions on dealing with composite flags differ\nas a compromise I kept the hasAllFlags check and the definition of the flag combo val together\n\nreview of the compromise and fixes by @paulp\n"
981,'',"SI-2038 make pt fully-defined when typing Typed\ndropExistential turns existentials in the expected type (pt) that's passed to `typed`\ninto `BoundedWildcardType`s, but those should not end up in trees\n\nwhen typing a `Typed` node, we didn't check for the type being fully defined (`isFullyDefined`)\n(and thus did not make it fully defined by turning these BWTs into existentials again using `makeFullyDefined`)"
980,'','SI-5933 do the new patmat translation for scaladoc\nespecially because it benefits from nicer type inference for partial functions'
979,'','SI-6111 accept single-subpattern unapply pattern\nAn extractor pattern `X(p)` should type check for any `X.unapply`/`X.unapplySeq`\nthat returns an `Option[_]` -- previously we were confused about the case where\nit was an `Option[(T1, ... , Tn)]`. In this case, the expected type for the\npattern `p` is simply `(T1, ... , Tn)`.\n\nWhile I was at it, tried to clean up unapplyTypeList and friends (by replacing them by extractorFormalTypes).\n\nFrom the spec:\n   8.1.8 ExtractorPatterns\n\n   An extractor pattern x(p1, ..., pn) where n ≥ 0 is of the same syntactic form as a constructor pattern.\n   However, instead of a case class, the stable identifier x denotes an object which has a member method named unapply or unapplySeq that matches the pattern.\n   An unapply method in an object x matches the pattern x(p1, ..., pn) if it takes exactly one argument and one of the following applies:\n\n   n = 0 and unapply’s result type is Boolean.\n\n   n = 1 and unapply’s result type is Option[T], for some type T.\n     the (only) argument pattern p1 is typed in turn with expected type T\n\n   n > 1 and unapply’s result type is Option[(T1, ..., Tn)], for some types T1, ..., Tn.\n     the argument patterns p1, ..., pn are typed in turn with expected types T1, ..., Tn'
978,'','[doc] Fix example of `Ordering.on` usage.\nresubmit of #977'
977,'','Fix example of Ordering.on in scaladoc for Ordering.\nThe current scaladoc for Ordering includes an example of using Ordering.on that does not compile; it has too few parentheses, and uses _ as a placeholder argument twice in a function that should only take one argument.  Once these issues are fixed, the explicit type parameters to on are no longer needed.\n\nAn alternative fix would be something like\n\n  .on { case (s, _, i) => (i, s) }\n'
976,'',"SI-4440 workaround: avoid outer accessor that'll vanish\nouter accessors of final classes are dropped in constructors\napply some foresight in explicit outer and replace those doomed outer checks by `true`\n(since this is unfortunate, we generate an unchecked warning)"
975,'',"SI-4881 infer variance from formals, then result\nresubmission of #959 (added @retronym's variations to the test case)\n\nChanged behavior so that when determining the target variance of a method parameter,\nthe variance in formals comes first. If variance is still undecided by that,\nthe variance in the result type is used as a secondary criterion.\n\n(This is also done when determining prototype type params.)"
974,'','Improve unchecked warnings.\nresubmitted #973 so that 2.10.x also gets better unchecked warnings\n\nSpurious test was not good.  Better test avoids suppressing some legitimate warnings.\n\nReview by @adriaanm.'
973,'','Improve unchecked warnings.\nSpurious test was not good.  Better test avoids suppressing\nsome legitimate warnings.  Review by @adriaanm.'
972,'jsuereth',"SI-6089 test file for pt2\ntest that matchEnd that's an argument of || that's in tail position is in tail position\n\nreview by @jsuereth"
971,'','SI-6122: Small changes to reflection API to make it safe for IDE use.\n* Removed `typeSymbol` and `termSymbol` from `reflect.api.base`, and pushed them down to\n  `reflect.api`.\n* extracted `TypeTree.symbol` to a top-level method so it can be overridden in lower cake layers (this is the only method in trees that can trigger type checking and therefore is not thread safe.\n\nreview by @odersky, @xeno_by'
970,'',"Fix 4560\nHere's a proposal to fix 4560 [as suggested](https://issues.scala-lang.org/browse/SI-4560) by @odersky:\n\nI reverted both the original bugfixes/workarounds, 7127d8293775905acd0d04e21d9e045b5c029261 and 124cf3f9cbdc582a432c13edd229ba9b8726b99f and then reverted the commit which supposedly introduced the bug in the first place, cb4fd65825f3c88908103e48d0d7e89d70d26c22. I included the pending parts of the test and cleaned it up altogether.\n\nDo we want to have all those revert commits in the history or should I produce a squashed commit of all the changes? Should this still go into the 2.10.x branch since the bug priority recently was lowered from 'critical' to 'major'?"
969,'','Merge 2.10.x\nSince #950 created conflict between master and 2.10.x, I merged 2.10.x into master and offer it here.'
968,'','Removed "core classes first" logic.\nI see no evidence this is necessary, and it should be wildly\nuncontroversial that if we can lose this, we should. Hardcoded filenames\nwhich don\'t even exist in the repository ("StandardEmbeddings.scala",\n"EmbeddedControls.scala") have no place in compiler source. If some\nportion of this is believed necessary then better evidence of that\nshould be offered.\n\nReview by @lrytz.'
967,'',"Improve unchecked warnings a little.\nDon't warn on case _: CC[Any] if Any corresponds to a\ncovariant type parameter."
966,'','SI-6117 regression involving import ambiguity. \n'
965,'','Handle multiple packages in one source file in the presentation compiler.\nThe PC symbol loader would mistakenly refuse to enter symbols if more than one package declaration occurred\nin the same file. This has become common practice:\n\n     package object foo { … } \n     package foo { … }\n\n\nreview by @odersky.'
964,'','SI-6090\nSharpens the test so that only Object_== and Object_!= methods on valueclasses may be rewritten in posterasure, whereas user-defined methods are not rewritten. Review by @retronym.'
963,'jsuereth','SI-6089 pt2: _ is tailpos in `_ || _` and `_ && _`\npull #939 made tail position detection for matches more strict to fix SI-6089,\nbut became too strict: need to include the tail positions `_` in `_ || _` and `_ && _`.\n\nreview by @jsuereth'
962,'','Add link to the PR policy in the README\nreview by @adriaanm'
961,'','Scaladoc: Removing forgotten debugging info\n(blush)\n\nNo review.'
960,'',"Remove resolveOverloaded\nAt the reflection meeting, it was decided to delay resolveOverloaded until 2.10.1, where it will be unified with the compiler's overload resolution code. This commit removes it and the related tests."
959,'','SI 4881 fixed.\nChanged behavior so that when determining the target variance of a method parameter, the variance in formals comes first, but if variance is still undecided by that, the variance in the result type is used as a secondary criterion.'
958,'',"SI-1832 consistent symbols in casedef's pattern&body\nthe only change to typedBind in this commit (beyond refactoring to keep my eyes from bleeding),\nis explained by the added comment:\n\nhave to imperatively set the symbol for this bind to keep it in sync with the symbols used in the body of a case\nwhen type checking a case we imperatively update the symbols in the body of the case\nthose symbols are bound by the symbols in the Binds in the pattern of the case,\nso, if we set the symbols in the case body, but not in the patterns,\nthen re-type check the casedef (for a second try in typedApply for example -- SI-1832),\nwe are no longer in sync: the body has symbols set that do not appear in the patterns\nsince body1 is not necessarily equal to body, we must return a copied tree,\nbut we must still mutate the original bind"
957,'','address "this would catch all throwables" warnings\noriginal patch by @odersky in #955 -- criterion for the refactor:\n"catch Throwable as long as there\'s no obvious control flow exception going through the catch\nand the caught exception is processed further"\n\nrebased & updated with review comments in #955 and #954'
956,'','SIP-14 - Fix critical Java compatibility issue in scala.concurrent.Await\nPatch contributed by @viktorklang\nReview by @heathermiller\n'
955,'','Removes annoying this "would catch all throwables" warnings\nSilenced all "this would catch all throwables" messages in tools build except one. The one that still warns needs to be fixed by tightening the caught exception to be something different from Throwable. Review by @VladUreche.'
954,'','Removes redundant outers\nWidens the criterion when outer fields can be omitted. It used to be that sub- and superclass had to be enclosed by the same outer class. Only in that case was the outer field of the class omitted. We now omit if subclass is contained in an outer class that is itself a subclass of the superclasses outer class.\n\nSee test case "outertest.scala" for an example.'
953,'','SI-6031 customizable budget for patmat analyses\nread the scalac.patmat.analysisBudget system property to decide how much time to spend on unreachability/exhaustivity\nthe default value is 256, and you can turn it off entirely using -Dscalac.patmat.analysisBudget=off\n\nwhen the budget is exhausted, an unchecked warning is emitted\n\nstack overflows in CNF conversion are caught and treated as analysis budget violations'
952,'',"SI-4897 derive expected value from single type\nreview by @xeno-by\n\nwhen the type in a type test is, say, `C.this.A.type`,\nmust use the corresponding term `C.this.A` to test for equality\nif you use the naive REF(<C.this.A.type>.symbol), you'll\nget a path like `OwnerOfA.this.A`,\nwhere `OwnerOfA` might be a superclass of `C`, and\nexplicitouter won't like that"
951,'odersky','SI-4440 phase constructors cannot drop outer accessors\nreview by @odersky, as this affects the constructors phase\n\nbefore, we would drop outer accessors from nested final classes if the outer-accessor wasn\'t accessed anywhere (for some limited definition of "accessed")\nhowever, for the sake of separate compilation and the outer checks inserted by the pattern matcher,\nwe need to assume they might be accessed anywhere\n\nthe alternative would be to omit the outer checks when the outer accessors aren\'t available\nthis is what the old pattern matcher did\n\npart 2:\ndon\'t check super-type args after erasure (parentTypes)\nthis is mostly to appease pos/z1730 (which runs with -Ycheck:all)\nafter fixing SI-4440, running parentTypes after constructors would fail\nnot running this check after erasure doesn\'t lose any precision\nsince all constructors will be type checked for real in typedTemplate anyway\n\nmore precisely, after constructors, can\'t type check primary ctor body in the ad-hoc context used in parentTypes, since it will have inserted assignments to the private[this] outer accessor,\nwhich will only type check when the ctor is type checked in the proper context\nhere, it\'s type checked in a context outside the class to avoid circular dependency errors'
950,'','Renaming phase time-travel methods.\nenteringPhase and exitingPhase are our unambiguously named\nphase time travel methods.  atPhase is deprecated.  Other methods\nand uses have all been brought into line with that.\n\nReview by @lrytz.'
949,'','Expanded use of HIDDEN flag.\nLike the comment says:\n\n  /** Symbols which are marked HIDDEN. (Expand this list?)\n   *\n   *  - $outer fields and accessors\n   *  - super accessors\n   *  - protected accessors\n   *  - lazy local accessors\n   *  - bridge methods\n   *  - default argument getters\n   *  - evaluation-order preserving locals for right-associative and out-of-order named arguments\n   *  - catch-expression storing vals\n   *  - anything else which feels a setFlag(HIDDEN)\n   */\n\nI also changed a few safe-appearing locations to check isHidden\nrather than isSynthetic.  Review by @dragos, @odersky.'
948,'',"Deprecate all JVM 1.5 targets and make 1.6 default.\nAdd a check if deprecated target is being used. I put\nthat check into `checkDeprecatedSettings`. I tried to\ninvent some general mechanism for deprecating choices\nin ChoiceSetting but I gave up eventually. It wasn't\nworth it the complexity. Also, with current approach\nI'm able to provide nice, customized deprecation\nwarning.\n\nMake `jvm-1.6` a default backend.\n\nAltered test for SI-5957 because it crashes the backend.\nHowever, the problem is not with backend but with symbol\ncreation. We get two different symbols with the same\ninternal name and both are used in trees that reach\nGenASM. See SI-6109 for details.\n\nAlso, I went through `build.xml` and I updated all `javac`\ninvocations so they target 1.6 byte-code as well.\n\nReview by @magarciaEPFL, @paulp and @jsuereth."
947,'','Critical bugfixes/leak fixes/API corrections + ScalaDoc for SIP-14\nReview by @axel22 and @heathermiller '
946,'',"Shield from InterruptedException in partest.\nSorry, I'm not in practice with java.util.concurrent."
945,'','Fix of SI-5939\nEmpty packages can now be cleanly invalidated. I think this needs to go into 2.10 because it is critical to enable resident compilation in SBT 13. Review by @moors, @pvlugter, @harrah'
944,'','Removes Float.Epsilon and Double.Epsilon\nFloat.Epsilon and Double.Epsilon contain the wrong value. Epsilon\nshould be an upper bound on the relative error due to rounding\nerrors in floating point arithmetic, i.e. it is 1/2 ULP (unit in\nthe last position) which is 2^(-24) for Float and 2^(-53) for Double.\n\nThis was discussed in detail in https://issues.scala-lang.org/browse/SI-3791\nand it was decided to deprecate Epsilon for 2.9 and to remove it for 2.10\nand to reintroduce it with the correct value for 2.11.\n\nSee also the discussion (and comments from Martin) on\nhttps://groups.google.com/forum/?fromgroups#!topic/scala-internals/m763WjBdfyo\n\nReview by @lrytz'
943,'','SI-5939 resident compilation of sources in empty package\nEmpty packages can now be cleanly invalidated.'
942,'','Fix of SI-5939\nEmpty packages can now be cleanly invalidated.'
941,'',"SI-6104 support This pattern\nThis(name) is treated just like Ident(name)\n\napparently this pattern was used in 2.9 code,\nthough I'm not sure it's spec'ed\n\nreview by @paulp (look! the stone age is back with a vengeance)"
940,'','Fix SI-5937.\nFixes SI-5937 by checking the type of the builder factory and delegating to a special implementation in the case that the builder factory is constructing vectors.'
939,'','SI-6089 better tail position analysis for matches\nreview by @paulp, who discovered the problem\n\nwe mistakenly went into apply nodes to look for matchEnd-labeldefs\nin tail positions -- only apply nodes that jump to labels in tailpos\nshould be traversed (this arises for nested matches)'
938,'','SI-6095, SI-6098 - clean up public API, add deprecations\nThis pull request fixes two critical bugs in `scala.concurrent`, SI-6095 and SI-6098. Since the fixes affect the public API and cannot be fixed later, these issues should be considered critical.\n\nRemove `Scheduler`, `Cancellable`, and `Task` trait.\nHide `impl.Promise` object.\nDeprecate `managedBlock` methods in `TaskRunners`.\nRemove duplicate `toBoxed` method and pointless renaming import.\nRemove duplicate import of `CanBuildFrom` and `Builder` in `Future`.\nOrganize imports in `impl.Promise`.\n\nReview by @axel22 and @heathermiller'
937,'',"SI-5739 store sub-patterns in local vals\nAlso closes SI-5158 (debuggability), SI-6070 (soundness).\n\nTo improve both debuggability and soundness,\nwe now store the result of an extractor (user-defined and synthetic)\nin local variables.\n\nFor the case class case, this also fixes the soundness bug SI-6070,\nas this prevents post-match mutation of bound variables.\n\nThe core of the refactoring consisted of introducing the PreserveSubPatBinders\ntrait, which introduces local variables instead of substituting symbols\nfor the RHS of those variables (so this can be seen as reverting the premature optimization\nof inline the case-class getters into the case body).\n\nSince TreeMakerToCond fuses the substitutions performed in a match to find out\nwhich symbolic values binders evaluate to, masquerade PreserveSubPatBinders's\nbinding of subPatBinders and subPatRefs as the corresponding substitution.\n\nConsider `case class Foo(bar: Int)`, then `case y@Foo(x) => println(x)`\ngives rise to `{val x = y.bar; println(x)}` (instead of `println(y.bar)`),\nand `subPatternsAsSubstitution` pretends we still replace `x` by `y.bar`,\ninstead of storing it in a local variable so that the rest of the analysis need not be modified.\n\nMisc notes:\n- correct type for seq-subpattern\n- more error resilience (ill-typed patterns sometimes slip past the typechecker -- reopened SI-4425)\n\nTODO: come up with a more abstract framework for expressing bound symbols and their values"
936,'','fixes SI-5999\n'
935,'',"SI-5695 removes Context.enclosingApplication\nApparently it's impossible to find out the enclosing Apply node\nif you're an argument being typechecked.\n\nThis functionality is by far not a core feature of macros,\nso I'm removing it."
934,'','Increase partest timeout and emit warning when it hits.\n'
933,'',"SI-5731 a few fixes for value classes\nI've faced two gotchas.\n\nFirst of all posterasure, which is supposed to erase ErasedValueType types,\ndidn't look into ConstantType.value that is known to be smuggling types\n(hi Paul that's a plus one).\n\nSecondly ClassManifest.classType[T] assumed that its T is bound by AnyRef,\nwhich is not the case for value types. Here I had two choices:\na) introduce a special method for manifests of value types,\nb) remove the upper bound of the type parameter and call it a day.\nSince manifests are already deprecated and there's no difference which\nmethod was used to create which manifest, I went for option b)."
932,'','Fixes SI-5588. Correct compare for Enumeration.\nSlower than the original one but does comparison in the same spirit as IntOrdering.\n\nReview by @axel22.'
931,'',"Initialize BlockContext thread local to null to avoid a leak\nGenerally considered bad to have an initialValue that points to something we might want to GC.\n\nThis doesn't change public API behavior in any known-detectable way, other than potentially allowing more stuff to GC without shutting down the thread.\n\nReview by @phaller or @axel22 for example.\n\n"
930,'','Add an implicit parameter to `par` in collections.\nThis implicit parameter is a the task support the parallel collection\nwill be created with.\nThis way the task support may be set only once, upon the collection\ncreation. If the clients what to change the task support, they have\nto call `par` again.\n\nChecking manual:\n\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/230/console\n\nreview by @jsuereth, @phaller'
929,'','fixes field mirrors and also improves docs and exceptions for all mirrors\nreview by @adriaanm '
928,'','Fixed SI-6076. Range positions for macro-based string interpolation.\nShould bring back the jenkins job as well.\n\nReview by @odersky.'
927,'','SI-5856 enables use of $this in string interpolation\nReview: @xeno-by and @cvogt\n\nThis pull request fixes SI-5856. The scanner has been modified\nto return the correct token if keywords appear in $-expressions.\nThe parser has been modified to issue an error and to only accept\n$<identifier>, $this and $block.'
926,'','fixes a typo in macro classloaders\nPrimary should be here, because a test a few lines up checks whether\nprimary != "". Hence usage of fallback here is just a typo.\n\nPrimary and fallback classpaths were designed for situations when library\nclasspath are not enough (e.g. for bootstrapping libraries that don\'t get\nonto tool classpaths). Originally I planned to use them to bootstrap\nscala-library, however, there\'s always a starr/locker on a tool classpath,\nso we don\'t need special treatment of this case. After I realized that, I\ndecided to keep advanced classpath switches, because others might not be as\nlucky as we are.'
925,'heathermiller',"Fixing a bunch of scaladoc issues\ncloses SI-3314, SI-4888, SI-5235, SI-5558, SI-4324, SI-5780, SI-4887, SI-3695, SI-4224, SI-4497, SI-5079, SI-6073, SI-5533, SI-5784\n\nand prepares scaladoc to properly handle reflection. Btw, this patch introduces good support for scaladoc links, so we shouldn't miss it for 2.10 ;)\n\nReview by @heathermiller and @cvogt"
924,'','Fix for SI-5385.\nNodes which hit EOF with no whitespace afterward had\nwrong position.\n\nStole commit from @paulp and adapted it to the current state of master. Needed to fix DirectTest as the original commit assumed that we only produce range positions.\n\nReview by @paulp and @dotta.'
923,'','test case closes SI-6047\nThe bug is not reproducible both in M4 and in M5.'
922,'',"Fixed SI-6092. Fixed leaky annotations\nand relaxed the conditions under which a try-catch is lifted out to an inner method.\n\nLess known fact: lazy values null-out their dependent values is they're accessed only from\ntheir initializer. The analysis is not context-dependent (meaning the owner where a reference\nhappens needs to be exactly that lazy value).\n\n* Removed no-op code around positions in `LazyAnnotationInfo`\n* Don't lift expressions that have no `catch` clause\n\nThe two changes combined fix a memory leak that's been plaguing the IDE: an annotation\n(even when forced) would hang on to a namer, through the outer field of its call-by-name\nparameter.\n\nThe memory leak test is in the IDE project (couldn't find a simple way to reproduce it outside\nthe IDE). I added a test to make sure the field is nulled after the lazy val is initialized."
921,'','move test files that fail spuriously to pending\nI have this sneaky suspicion that part of these spurious failures\nare caused by the recent partest optimizations.\n\nSince the tests and/or their corresponding fixes are more likely to blame than the test framework,\nmoving them out of the way until their owners can get them back in line\nand they stop throwing primate wenches into our build.\n\nWe should bring them back as soon as possible, though.'
920,'','non-controversial critical fixes for reflection\nreview by @adriaanm '
919,'',"SI-6086 magic symbols strike back\nSome of the symbols inside the compiler get created on the fly,\nbecause there are no physical entities in classfiles corresponding to them.\n\nThis curious fact needs to be taken into account when loading symbols,\nso that the magic symbols get correctly loaded by reflective mirrors.\n\nmagicSymbols (as defined in Definitions.scala) include not only\ntop-level classes, but some other stuff (e.g. String_+ or methods on Any).\nHence a filtering was done to exclude the stuff that's irrelevant\nto reflective symbol loading.\n\nUnfortunately a filter was configured to accept only _.isClass,\nwhich consequently ruled out scala.AnyRef (that is a type alias)."
918,'',"SI-6086 magic symbols strike back\nSome of the symbols inside the compiler get created on the fly,\nbecause there are no physical entities in classfiles corresponding to them.\n\nThis curious fact needs to be taken into account when loading symbols,\nso that the magic symbols get correctly loaded by reflective mirrors.\n\nmagicSymbols (as defined in Definitions.scala) include not only\ntop-level classes, but some other stuff (e.g. String_+ or methods on Any).\nHence a filtering was done to exclude the stuff that's irrelevant\nto reflective symbol loading.\n\nUnfortunately a filter was configured to accept only _.isClass,\nwhich consequently ruled out scala.AnyRef (that is a type alias)."
917,'',"SI-6086 magic symbols strike back\nSome of the symbols inside the compiler get created on the fly,\nbecause there are no physical entities in classfiles corresponding to them.\n\nThis curious fact needs to be taken into account when loading symbols,\nso that the magic symbols get correctly loaded by reflective mirrors.\n\nmagicSymbols (as defined in Definitions.scala) include not only\ntop-level classes, but some other stuff (e.g. String_+ or methods on Any).\nHence a filtering was done to exclude the stuff that's irrelevant\nto reflective symbol loading.\n\nUnfortunately a filter was configured to accept only _.isClass,\nwhich consequently ruled out scala.AnyRef (that is a type alias)."
916,'','Eclipse project updates\nUpdated and included new Eclipse project definitions.\n\nReview by @dragos.'
915,'',"SI-6035: Specialization and separate compilation.\nFix an issue when specialization wouldn't work properly\nin a setting where separate compilation was involved.\nE.g. if you inherit from a class that is specialized and\nhas been compiled separately you might not get proper\nforwarders generated. A test-case that this commit\nadds covers that scenario.\n\nThe root cause of this issue was the fact that\nSPECIALIZED flag was not pickled. Thanks to recent\nFlags reorganization (see a9b85db) all that needs\nto be done is to set the flag before pickling.\n\nWe choose to that in superaccessors phase because\nit's a phase that runs before pickling and after\ntype checking (so we can check if given symbol\nhas an annotation).\n\nRemoved old logic from uncurry that was responsible\nfor setting flags that is not needed anymore because\nwe set them in superaccessors.\n\nReview by @axel22 and @paulp."
914,'',"Closes SI-6072, crasher with overloaded eq.\nYou don't want to do name-based selections in later phases\nif you can help it, because there is nobody left to resolve\nyour overloads.  If as in this example you're calling a\nknown method, use the symbol.  Review by @hubertp."
913,'','Partest: add `instrumented` test category.\n---\n(taken from README)\n\nTests in `instrumented/` directory are executed the same way as in `run/` but\nthey have additional byte-code instrumentation performed for profiling. You\nshould put your tests in `instrumented/` directory if you are interested in\nmethod call counts. Examples include tests for specialization (you want to\ncount boxing and unboxing method calls) or high-level tests for optimizer\nwhere you are interested if methods are successfuly inlined (so they should\nnot be called at runtime) or closures are eliminated (so no constructors\nof closures are called).\n\nCheck `scala.tools.partest.instrumented.Instrumentation` to learn how to\nuse the instrumentation infrastructure.\n\nThe instrumentation itself is achieved by attaching a Java agent to the\nforked VM process that injects calls to profiler. Check\n`scala.tools.partest.javaagent.ProfilingAgent` for details.\n\n---\n\nA few notes on low-level details of this change:\n\n  * Partest now depends on asm library for byte-code instrumentation\n    (`build.xml`)\n  * Build additional jar called `scala-partest-javaagent.jar` that is\n    used with `-javaagent:` option. (`build.xml`)\n  * Set `-javaagent:` option for all tests in `instrumented/` directory.\n    (`RunnerManger.scala`)\n  * Introduce a new category of tests called `instrumented`.\n  * Add one instrumented test to demonstrate usage and test new\n    infrastructure itself. (`InstrumentationTest.scala`)\n\nReview by @phaller.'
912,'','no Windows line endings in repo plz!\nCRLF line endings have been allowed to creep into a number of files in the repo. this fixes them.\n\nCRLF = faux pas; LF = de rigeur. keep the repo comme il faut, eschew ASCIIa non grata.\n\nat bare minimum, GenASM.scala ought to be fixed. the others are less important, but still good to have fixed, I think.\n\nI tested this on Mac OS X by running `git clean -fdx` followed by `ant dist`; all tests passed.'
911,'','Simplify raw types logic.\nIt was spread out much further than was warranted.\n\nReview by @adriaanm.'
910,'','SI-6028 Avoid needless symbol renaming in lambdalift\nreviewed as #847 (which was against master but this is deemed critical)\n\noriginal description:\n\nPreserve names of all referenced free vars. This is achieved\nin a slightly roundabout manner:\n\n 1. they are renamed (as before this change)\n 2. the code that references them is lifted\n 3. the original names are restored.\n\nThe resulting natural beauty is evident in the [diff of t6028.check](https://github.com/retronym/scala/commit/22f2e355#diff-3).\n\nThis subsumes the treatment in 0e170e4 that ensured named parameter\ncalls cannot see mangled names; pos/t6028 confirms as much.\n\nReview by @lrytz'
909,'','SI-5892 allow implicit views in annotation args\nthe problem was that lazy annotations got completed in phase pickler.\nthe `inferView` method in Typers bails out if `isPastTyper`. now the\nlazy annotations completes `atPhase(typerPhase)`. test case in `pos`.\n\nthe second test case in `neg` is for another bug that is discussed in\na comment of SI-5892. when type checking arguments of type parameter\nannotations, the class members should not be in scope. not sure which\ncommit fixed this, current master already behaves as expected.\n\nreview by @retronym'
908,'','updated intellij project files\nthe entire source tree can be compiled within idea. that depends on #907 however, otherwise compiling the library can crash the compiler due to SI-4365.\n\nreview by @retronym'
907,'','With -Yno-generic-signatures, exit GenASM.getGenericSignature early\nThis allows using -Yno-generic-signatures as a workaround for SI-4365.\n\nalso changed line endings in GenASM to Unix.\n\nreview by @magarciaEPFL'
906,'odersky',"Optimize findmember\nresubmission of #905\n\nFrom its description:\n\nfindMember takes about 30% of typechecking aggregate, 20% if we discount nested calls to asSeenFrom.\nI have tried ten different things to make it faster. The end result is less impressive than I had hoped for. I get about 16% reduction in wall-clock time for findMember, but my timings might be off. Still, every small improvement is worth it.\n\nI left all 10 changes as separate commits, so that we have a chance of measuring what works and what doesn't when Greg's benchmarking code is done.\n\nreview by @odersky "
905,'',"Gradual optimizations of findMember method\nfindMember takes about 30% of typechecking aggregate, 20% if we discount nested calls to asSeenFrom.\nI have tried ten different things to make it faster. The end result is less impressive than I had hoped for. I get about 16% reduction in wall-clock time for findMember, but my timings might be off. Still, every small improvement is worth it. \n\nI left all 10 changes as separate commits, so that we have a chance of measuring what works and what doesn't when Greg's benchmarking code is done.\n"
904,'','SI-6077 more conservative TreeMakersToConds for CSE\nwe were dropping irrefutable extractor calls (implemented for SI-4691)\nin common subcondition elimination, which caused bad code to be generated\n\nclean up TreeMakersToConds significantly in the process\n\nreview by @paulp and his crack monkeys'
903,'','SI-5906 Search for sorted sequences\nAlready reviewed as pull request #889.'
902,'','Implicits to encourage more Name-dropping.\n[This is a "critical usability fix" -- and I submitted it a week ago, when the deadline was but a gleam in someone\'s eye.]\n\nThis creates implicits in cakes across the land from:\n\n  String => TermName\n  String => TypeName\n\nAnd also from:\n\n  Name => NameOps[Name]           // lower priority\n  TermName => NameOps[TermName]\n  TypeName => NameOps[TypeName]\n\nWhat this is all about, using "drop" as a motivating example,\nis that these should all work:\n\n  "abc" drop 1                      // "bc": String\n  ("abc": TermName) drop 1          // "bc": TermName\n  ("abc": TypeName) drop 1          // "bc": TypeName\n  (("abc": TypeName): Name) drop 1  // "bc": Name\n\nBut this should not:\n\n  ("bc": Name)  // ambiguity error\n\nThis requires drop not being directly on Name; peer implicits\nfrom String => TermName and String => TypeName; implicit\nclasses to install drop on TermName and TypeName; and a lower\npriority implicit class to allow ops on Names.\n\nReview by @xeno.by .'
901,'odersky','Removed AestheticSettings.\nReview by @odersky.'
900,'','Squashed critical enhancements to SIP-14: daemonizing global EC, giving ...\n...EC to DelayedLazyVal, removing currentExecutionContext, removing impl.Future.isFutureThrowable, implementing asExecutionContext, giving a decent fallback if ForkJoinPool cannot be created.\n\nNeeds review by @axel22 @phaller'
899,'','Partest: add `instrumented` test category.\n---\n(taken from README)\n\nTests in `instrumented/` directory are executed the same way as in `run/` but\nthey have additional byte-code instrumentation performed for profiling. You\nshould put your tests in `instrumented/` directory if you are interested in\nmethod call counts. Examples include tests for specialization (you want to\ncount boxing and unboxing method calls) or high-level tests for optimizer\nwhere you are interested if methods are successfuly inlined (so they should\nnot be called at runtime) or closures are eliminated (so no constructors\nof closures are called).\n\nCheck `scala.tools.partest.instrumented.Instrumentation` to learn how to\nuse the instrumentation infrastructure.\n\nThe instrumentation itself is achieved by attaching a Java agent to the\nforked VM process that injects calls to profiler. Check\n`scala.tools.partest.javaagent.ProfilingAgent` for details.\n\n---\n\nA few notes on low-level details of this change:\n\n  * Partest now depends on asm library for byte-code instrumentation\n    (`build.xml`)\n  * Build additional jar called `scala-partest-javaagent.jar` that is\n    used with `-javaagent:` option. (`build.xml`)\n  * Set `-javaagent:` option for all tests in `instrumented/` directory.\n    (`RunnerManger.scala`)\n  * Introduce a new category of tests called `instrumented`.\n  * Add one instrumented test to demonstrate usage and test new\n    infrastructure itself. (`InstrumentationTest.scala`)\n\nReview by @phaller.'
898,'','Partest: add `instrumented` test category.\n---\n(taken from README)\n\nTests in `instrumented` directory are executed the same way as in `run` but\nthey have additional byte-code instrumentation performed for profiling. You\nshould put your tests in `instrumented` directory if you are interested in\nmethod call counts. Examples include tests for specialization (you want to\ncount boxing and unboxing method calls) or high-level tests for optimizer\nwhere you are interested if methods are successfuly inlined (so they should\nnot be called at runtime) or closures are eliminated (so no constructors\nof closures are called).\n\nCheck `scala.tools.partest.instrumented.Instrumentation` to learn how to\nuse the instrumentation infrastructure.\n\nThe instrumentation itself is achieved by attaching a Java agent to the\nforked VM process that injects calls to profiler. Check\n`scala.tools.partest.instrumented.Instrumentation` for details.\n\n---\n\nA few notes on low-level details of this change:\n\n  * Partest now depends on asm library for byte-code instrumentation\n    (`build.xml`)\n  * Build additional jar called `scala-partest-javaagent.jar` that is\n    used with `-javaagent:` option. (`build.xml`)\n  * Set `-javaagent:` option for all tests in `instrumented` directory.\n    (`RunnerManger.scala`)\n  * Introduce a new category of tests called `instrumented`.\n  * Add one instrumented test to demonstrate usage and test new\n    infrastructure itself. (`InstrumentationTest.scala`)\n\nReview by @phaller.'
897,'','SI-5956 trigger copy generation with correct namer\nthe call to `addCopyMethod` passes `templateNamer`, which is supposed to be the\nnamer of the case class template. with two classes of the same name, `addCopyMethod`\nwas triggered in the wrong template.\n\nreview by @hubertp'
896,'','SI-5956 trigger copy generation with correct namer\nthe call to `addCopyMethod` passes `templateNamer`, which is supposed to be the\nnamer of the case class template. with two classes of the same name, `addCopyMethod`\nwas triggered in the wrong template.\n\nreview by @hubertp'
895,'','Implement @static annotation on singleton object fields.\nThis commit introduces the `@static` annotation on fields of static singleton objects.\n\nA static singleton object is a top-level singleton object or an object nested within\na static singleton object.\n\nThe field annotated with `@static` is generated as a true static field in the companion\nclass of the object. The initialization of the field is done in the static initializer of the\ncompanion class, instead of the object itself.\n\nHere\'s an example. This:\n\n    object Foo {\n      @static val FIELD = 123\n    }\n    class Foo\n\ngenerates :\n\n    object Foo {\n      def FIELD(): Int = Foo.FIELD\n    }\n    class Foo {\n      <static> val FIELD = 123\n    }\n\nThe accessor in `object Foo` is changed to return the static\nfield in `class Foo` (the companion class is generated if it is\nnot already present, and the same is done for getters if `FIELD`\nis a `var`).\n\nFurthermore, all the callsites to accessor `Foo.FIELD` are rewritten\nto access the static field directly.\n\nIt is illegal to annotate a field in the singleton object as `@static` if there is\nalready a member of the same name in `class Foo`.\n\nThis allows better Java interoperability with frameworks which rely on static fields being\npresent in the class.\nThe `AtomicReferenceFieldUpdater`s are one such example. Instead of having\na Java base class holding the `volatile` mutable field `f` and a static field containing\na reference to the `AtomicReferenceFieldUpdater` that mutates `f` atomically,\nand extending this Java base class from Scala, we can now simply do:\n\n    object Foo {\n      @static val arfu = AtomicReferenceUpdater.newUpdater(\n        classOf[Foo], classOf[String], "f"\n      )\n    }\n    class Foo {\n      @volatile var f = null\n      import Foo._\n      def CAS(ov: String, nv: String) = arfu.compareAndSet(this, null, "")\n    }\n\nIn summary, this commit introduces the following:\n- adds the `@static` annotation\n- for objects without a companion class and `@static` members, creates a companion class\n(this is done in `CleanUp`)\n- checks for conflicting names and if `@static` is used on static singleton object member\n- creates the `static` field in the companion class for `@static` members\n- moves the field initialization from the companion object to the static initializer of\nthe class (the initialization of `@static` members is bypassed in the `Constructors` phase,\nand added to static ctors in `CleanUp`)\n- all callsites to the accessors of `@static` are rewritten to access the static fields directly\n(this is done in `GenICode`)\n- getters and setters to `@static` fields access the static field directly, and the field in the\nsingleton object is not emitted (this is done in `GenICode`)\n- changes in `GenJVM`, `GenASM` - now computing local var indices in static initializers\nas well - this was an oversight before, now is necessary\n\nFuture work: allow the @static annotation on methods as well - this will\nbe added next.\n\nReview by @odersky\nReview by @dragos'
894,'','Implement @static annotation on singleton object fields.\nThis commit introduces the `@static` annotation on fields of static singleton objects.\n\nA static singleton object is a top-level singleton object or an object nested within\na static singleton object.\n\nThe field annotated with `@static` is generated as a true static field in the companion\nclass of the object. The initialization of the field is done in the static initializer of the\ncompanion class, instead of the object itself.\n\nHere\'s an example. This:\n\n    object Foo {\n      @static val FIELD = 123\n    }\n    class Foo\n\ngenerates :\n\n    object Foo {\n      def FIELD(): Int = Foo.FIELD\n    }\n    class Foo {\n      <static> val FIELD = 123\n    }\n\nThe accessor in `object Foo` is changed to return the static\nfield in `class Foo` (the companion class is generated if it is\nnot already present, and the same is done for getters if `FIELD`\nis a `var`).\n\nFurthermore, all the callsites to accessor `Foo.FIELD` are rewritten\nto access the static field directly.\n\nIt is illegal to annotate a field in the singleton object as `@static` if there is\nalready a member of the same name in `class Foo`.\n\nThis allows better Java interoperability with frameworks which rely on static fields being\npresent in the class.\nThe `AtomicReferenceFieldUpdater`s are one such example. Instead of having\na Java base class holding the `volatile` mutable field `f` and a static field containing\na reference to the `AtomicReferenceFieldUpdater` that mutates `f` atomically,\nand extending this Java base class from Scala, we can now simply do:\n\n    object Foo {\n      @static val arfu = AtomicReferenceUpdater.newUpdater(\n        classOf[Foo], classOf[String], "f"\n      )\n    }\n    class Foo {\n      @volatile var f = null\n      import Foo._\n      def CAS(ov: String, nv: String) = arfu.compareAndSet(this, null, "")\n    }\n\nIn summary, this commit introduces the following:\n- adds the `@static` annotation\n- for objects without a companion class and `@static` members, creates a companion class\n(this is done in `CleanUp`)\n- checks for conflicting names and if `@static` is used on static singleton object member\n- creates the `static` field in the companion class for `@static` members\n- moves the field initialization from the companion object to the static initializer of\nthe class (the initialization of `@static` members is bypassed in the `Constructors` phase,\nand added to static ctors in `CleanUp`)\n- all callsites to the accessors of `@static` are rewritten to access the static fields directly\n(this is done in `GenICode`)\n- getters and setters to `@static` fields access the static field directly, and the field in the\nsingleton object is not emitted (this is done in `GenICode`)\n- changes in `GenJVM`, `GenASM` - now computing local var indices in static initializers\nas well - this was an oversight before, now is necessary\n\nFuture work: allow the `@static` annotation on methods as well - this will\nbe added next.\n\nReview by @odersky\nReview by @dragos'
893,'','Significant improvements to make-release-notes script\nSpecifically, it should generate exactly the HTML Toni needs for the website.\n\nReview by @lrytz and/or @cunei'
892,'','fix Right,Left and Either scaladoc links\n'
891,'','SI-5957 enable direct parsing of nested java class classfile\nby weakening an assertion. explained in the source comment.\n\nreview by @VladUreche'
890,'',"SI-6035: Specialization and separate compilation.\nFix an issue when specialization wouldn't work properly\nin a setting where separate compilation was involved.\nE.g. if you inherit from a class that is specialized and\nhas been compiled separately you might not get proper\nforwarders generated. A test-case that this commit\nadds covers that scenario.\n\nThe root cause of this issue was the fact that\nSPECIALIZED flag was not pickled. Thanks to recent\nFlags reorganization (see a9b85db) all that needs\nto be done is to set the flag before pickling.\n\nWe choose to that in superaccessors phase because\nit's a phase that runs before pickling and after\ntype checking (so we can check if given symbol\nhas an annotation).\n\nReview by @axel22 and @odersky."
889,'',"SI-5906 Search for sorted sequences\nThank you very much for the advice! I've moved the search feature into its own package (where that package should go, I'm not quite sure) and added a linear search for non-indexed sequences. I also assume that, for the sake of documentation, the inner object and implicit definition may need to be changed a bit, another thing I am unsure of."
888,'odersky','critical fixes to reflection\nreview by @odersky '
887,'','reformulation of odersky/topic/pickledflags\nThis is a 2.10.x-resolved version of https://github.com/scala/scala/pull/880 .'
886,'','SI-6064 Add method contains to Option.\nThe Option API more or less mirrors the Collection API,\nbut it seems that somehow this method has been forgotten.\n\nReview: @axel22'
885,'heathermiller','Fix doc about specialized subclasses of c.i.HashMap/HashSet.\nThe documentation was wrong and judging from the “TODO: add HashMap2,\nHashMap3, ...” in the source file I refrained from mentioning any\nspecific number, so overall it has gotten a bit less precise, but\nhopefully more correct.\n\nReview: @heathermiller'
884,'','SI-6032 Enhance TaskSupport documentation.\nBackport of commit sent to master.'
883,'','SI-6061 adds weakly conformance for number types to resolveOverloaded\nThis fix changes `resolveOverloaded` in `scala.reflect.internal`\nso that numeric widening on the actual argument types is also\nconsidered for primitive number types. Needs changes in functions\napplicable and mostSpecific.\n\nReview: @cvogt @xeno-by '
882,'','Bump version number for new nightlies.\nreview by @adriaanm @lrytz'
881,'','SI-4763 deprecated `@cloneable` annotation\nreviews already done in #859\n\nplease merge relatively quickly if all is fine - rebasing is not straightforward because i have to build a new starr and fixup the commit with sha hashes.'
880,'',"Pickled flag reorg; SI-5504\nCleaned up and optimized code that maps between raw and pickled flags. Avoids mystery constants. Makes a whole bunch of new flags be pickled which were not pickled before (more precisely: Everything in InitialFlags with value greater than 1 << 31 which is not in FlagsNotPickled now gets pickled whereas before it wasn't. Among these: VARARGS, IMPLCLASS, SPECIALZED, DEFAULTINIT, SYNCHRONIZED. I am curious how many tickets will get fixed by this change.\n\nThe first one I noted is t5504, which previously enforced the buggy behavior through a neg check!\n\nThere are also some build manager check file changes that have to do with the fact that flags now print in a different order for performance reasons.\n\nreview by @gregk or @paulp"
879,'','works around getDeclaredClasses\n'
878,'odersky',"polymorphic value classes\nreview by @odersky, please, to ensure I didn't mess up the rebase of his original pull request"
877,'',"SI-6015 assertion (in Type-flow analysis) that wasn't, valid counterexample found\nreview by @VladUreche"
876,'dragos',"SI-6011 switches: unreachability, guard-free form\nA complete overhaul. The original implementation in SI-5830 (#821) was pretty buggy.\n\nCollapse guarded cases that switch on the same constant (the last case may be unguarded).\n\nCases with patterns A and B switch on the same constant iff for all values x that match A also match B and vice versa.\n(This roughly corresponds to equality on trees modulo alpha renaming and reordering of alternatives.)\n\nThe rewrite only applies if some of the cases are guarded (this must be checked before invoking this method).\n\nThe rewrite proceeds by grouping the cases into subsequences of overlapping cases\n(since for any input, and when disregarding their guards, they either all match or they don't).\nThey are then merged into one case with their guards pushed into the body as follows (with P representing the overlapping pattern):\n\n`{case P if(G_i) => B_i }*` is rewritten to `case P => {if(G_i) B_i}*`\n\nThe rewrite fails (and returns Nil) when:\n  1. there is a subsequence of overlapping cases that has an unguarded case in the middle;\n     only the last case may be un-guarded\n\n  2. there are overlapping cases that differ (tested by `caseImplies`)\n     cases with patterns A and B are overlapping if for SOME value x, A matches x implies B matches y OR vice versa  <-- note the difference with case equality defined above\n     for example `case 'a' | 'b' =>` and `case 'b' =>` are different and overlapping (overlapping and equality disregard guards)\n\nAlso closes SI-6048 (duplicate)."
875,'','SI-6032 Enhance TaskSupport documentation.\n'
874,'',"SI-6022 model type-test-implication better\nwe use subtyping as a model for implication between instanceof tests\ni.e., when S <:< T we assume x.isInstanceOf[S] implies x.isInstanceOf[T]\nunfortunately this is not true in general.\n\nSI-6022 expects instanceOfTpImplies(ProductClass.tpe, AnyRefClass.tpe), but\nProductClass.tpe <:< AnyRefClass.tpe does not hold because Product extends Any\n\nhowever, if x.isInstanceOf[Product] holds, so does x.isInstanceOf[AnyRef],\nand that's all we care about when modeling type tests\n"
873,'','SI-6032 Enhance TaskSupport documentation.\n'
872,'','SI-6035 - retain specialized flag in separate compilation.\nThis solution does not pickle the `specialize` flag on the symbol of the\nspecialized type parameter.\nInstead, it recreates the `specialize` flag on a type parameter during the\nunpickling process if it sees the specialize annotation on that type parameter.\n\nAfter rebasing the commits against head, lets hope the stability test passes this time.\nIn the manual checkin it looks pretty stable to me:\n\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/205/console\n\nReview by @gkossakowski'
871,'','moved cloneable to annotation package\nreviews in #859'
870,'','Topic/partest no actors\nWe should merge this immediately, to improve the efficiency of the build bots if for no other reason.'
869,'',"SI-5895 fixes FieldMirrors\nreflectField now accepts getters and setters along with the field symbols,\nit also checks whether a field has a reasonable binary representation\n(this is necessary, because ctor parameters that are unused outside of their\ndeclaring constructors don't get compiled down to Java fields/methods)."
868,'',"Topic/valclasses2\nSI-6035 and other value classes fixes.\n\nI am sorry I must have messed up the git history of this commit to a degree where I can't fix it anymore. Rebasing seems to duplicate commits instead of organizing them. Rather than losing more time on this (I alreayd spent two fruitless hours) I ask that this is pulled exceptionally provided it passes the tests. Thank you.\n\nReview by @adriaanm\n"
867,'','SI-5498 completes ModuleMirror.instance\n'
866,'',"SI-6011 switches: unreachability, guard-free form\nA complete overhaul. The original implementation in SI-5830 (#821) was pretty buggy.\n\nCollapse guarded cases that switch on the same constant (the last case may be unguarded).\n\nCases with patterns A and B switch on the same constant iff for all values x that match A also match B and vice versa.\n(This roughly corresponds to equality on trees modulo alpha renaming and reordering of alternatives.)\n\nThe rewrite only applies if some of the cases are guarded (this must be checked before invoking this method).\n\nThe rewrite proceeds by grouping the cases into subsequences of overlapping cases\n(since for any input, and when disregarding their guards, they either all match or they don't).\nThey are then merged into one case with their guards pushed into the body as follows (with P representing the overlapping pattern):\n\n`{case P if(G_i) => B_i }*` is rewritten to `case P => {if(G_i) B_i}*`\n\nThe rewrite fails (and returns Nil) when:\n  1. there is a subsequence of overlapping cases that has an unguarded case in the middle;\n     only the last case may be un-guarded\n\n  2. there are overlapping cases that differ (tested by `caseImplies`)\n     cases with patterns A and B are overlapping if for SOME value x, A matches x implies B matches y OR vice versa  <-- note the difference with case equality defined above\n     for example `case 'a' | 'b' =>` and `case 'b' =>` are different and overlapping (overlapping and equality disregard guards)\n\nAlso closes SI-6048 (duplicate)."
865,'','SI-6035 - retain specialized flag in separate compilation.\nThis solution does not pickle the `specialize` flag on the symbol of the\nspecialized type parameter.\nInstead, it recreates the `specialize` flag on a type parameter during the\nunpickling process if it sees the specialize annotation on that type parameter.\n\nNow with separate compilation tests.\n\nReview by @VladUreche, @paulp, @gkossakowski.\n\n'
864,'','FIXING THE SAME MISTAKE BUT IN STRAP.  Yay for copy-paste ant-magic\nReview/laugh for @adriaanm'
863,'','SI-6035 - retain specialized flag in separate compilation.\nThis solution does not pickle the `specialize` flag on the symbol of the specialized type parameter.\nInstead, it recreates the `specialize` flag on a type parameter during the unpickling process if it sees the `specialize` annotation on that type parameter.\n\nUnable to include a test case, since this would require separate compilation,\nwhich cannot be simulated in partest.\n\nFor documentation purposes, the test files in the specialized\ntest group are included.\n\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/203/console\n\nReview by @paulp, @gkossakowski, @VladUreche.'
862,'jsuereth','SI-6052 - fix groupBy on parallel collections\nA critical patch.\n\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/202/console\n\nReview by @jsuereth'
861,'','Revert "GenASM: pipeline disk-write with building of classfiles"\nThis reverts commit 5d12fa4b791e73d5c99a0e145d28cbaba12823d2.\n\nThis is a temporary solution to unblock the IDE for M5. A background thread can\'t make changes to the Eclipse workspace without acquiring the proper locks.'
860,'','Fixed very bad build.xml issue and quick.bin missing ASM.\nReview by @adriaanm and @lrytz'
859,'jsuereth',"moved cloneable to annotation package\nrequires new starr.\n\nreview by @jsuereth\n\nthe first commit allows building the new starr: just run the script `tools/new-starr` (i didn't have time to do that in ant right now..)\n\nthe second commit is the new starr and removes the temporary files in `src/starr`\n\n"
858,'','bandaid in GenASM for SI-6049\nreview by @dragos\n'
857,'','Removing the non-deterministic actor migration test.\nDid the 8000 tests on my machine and could not reproduce it - nothing can replace the brain.'
856,'','Collection of updates to SIP-14 (scala.concurrent)\nDeveloped by Viktor Klang and Havoc Pennington\n\n- add Promise.isCompleted\n\n- add Future.successful and Future.failed\n\n- add ExecutionContextExecutor and ExecutionContextExecutorService for Java interop\n\n- remove defaultExecutionContext as default parameter value from promise and future\n\n- add ExecutionContext.Implicits.global which must be explicitly imported, rather\n  than the previous always-available value for the implicit EC\n\n- remove currentExecutionContext, since it could create bugs by being\n  out of sync with the implicit ExecutionContext\n\n- remove Future task batching (_taskStack) and Future.releaseStack\n\n    This optimization should instead be implemented either in\n    a specific thread pool or in a specific ExecutionContext.\n    Some pools or ExecutionContexts may not want or need it.\n    In this patch, the defaultExecutionContext does not\n    keep the batching optimization. Whether it should\n    have it should perhaps be determined through benchmarking.\n\n- move internalBlockingCall to BlockContext and remove currentExecutionContext\n\n    In this patch, BlockContext must be implemented by Thread.currentThread,\n    so the thread pool is the only place you can add custom hooks\n    to be run when blocking.\n    We implement BlockContext for the default ForkJoinWorkerThread in terms of\n    ForkJoinPool.ManagedBlocker.\n\n- add public BlockContext.current and BlockContext.push\n\n    These allow an ExecutionContext or other code to override\n    the BlockContext for the current thread. With this\n    API, the BlockContext is customizable without\n    creating a new pool of threads.\n\n    BlockContext.current is needed to obtain the previous\n    BlockContext before you push, so you can "chain up" to\n    it if desired.\n\n    BlockContext.push is used to override the context\n    for a given piece of code.\n\n- move isFutureThrowable into impl.Future\n\n- add implicitNotFound to ExecutionContext\n\n- remove default global EC from future {} and promise {}\n\n- add ExecutionContext.global for explicit use of the global default EC,\n  replaces defaultExecutionContext\n\n- add a timeout to scala-concurrent-tck tests that block on SyncVar\n  (so tests time out rather than hang)\n\n- insert blocking{} calls into concurrent tck to fix deadlocking\n\n- add NonFatal.apply and tests for NonFatal\n\n- add OnCompleteRunnable marker trait\n\n    This would allow an ExecutionContext to distinguish a Runnable originating\n    from Future.onComplete (all callbacks on Future end up going through\n    onComplete).\n\n- rename ListenerRunnable to CallbackRunnable and use for KeptPromise too\n  Just adds some clarity and consistency.'
855,'','minor corrections in Macros.scala\n'
854,'',"New TermSymbol.resolveOverloaded\nreview by @cvogt and @odersky\n\nUpdated: rebased to include some just-merged fixes.\n\nThis commit replaces the resolveOverload method in TermSymbols in order to bring it more into line with what happens in the compiler. It supports a number of language features that the existing version does not, including expected return type, call-by-name parameters, and default-argument parameters. It also has a lot more tests.\n\nI am sure that there are still many behavioral differences between this implementation and the one in the compiler as 1) I've just written it and 2) It is not the same code. Therefore, they should really be unified in reflect.jar in the future. That said, this is a significant improvement over what is in place now."
853,'',"New logic for TermSymbol.resolveOverloaded\nThis commit replaces the resolveOverload method in TermSymbols in order to bring it more into line with what happens in the compiler. It supports a number of language features that the existing version does not, including expected return type, call-by-name parameters, and default-argument parameters.\n\nI am sure that there are still many behavioral differences between this implementation and the one in the compiler as 1) I've just written it and 2) It is not the same code. Therefore, they should really be unified in reflect.jar in the future. That said, this is a significant improvement over what is in place now.\n\nreview by @cvogt and @odersky"
852,'paulp',"Shorter flattened names for nested $anons\n[scala-internals thread](https://groups.google.com/d/topic/scala-internals/M852v50Rrik/discussion)\n\nThe effect of the change is best described by the diff of [flatten.check](https://github.com/retronym/scala/commit/968909#diff-1)\n\nReview by @paulp, @odersky\n\n - Can you suggest additional interesting cases for test/files/run/flatten.scala?\n - Do we care that by unnesting the names we make it harder to mentally link the mangled name to its source code? (Incidentally, it would be great if we could teach YourKit to do this for us automatically, to save us either guessing / messing around with javap to figure it out).\n - I've done this for `$anonFun`, `$anon`: is there anything else that could have the same treatment?\n - The code to walk the `rawowner` chain was a bit fiddly to write and should be scrutinized. I didn't find an existing method on `Symbol` that did what I needed.\n\nReferences SI-3623."
851,'dragos',"Added a HIDDEN flag.\n[Still not a fan of the massive overlap between GenJVM and GenASM. I do\nnot think such duplication should be allowed into master at all, neither\nin experimental backends nor anywhere else. Putting us in the position\nthat we have to actually switch to stop incurring the duplication is\nengineering-by-prayer.]\n\nThe SYNTHETIC flag was long ago discovered to be inadequately specific\nto allow for emitting ACC_SYNTHETIC in bytecode. In this commit is born\na HIDDEN flag, which signals the flagged symbol as implementation detail\nwhich should not be considered during typechecking, and which will\nreceive ACC_SYNTHETIC during code generation.\n\nUnsure what should be hidden, I conservatively marked a few things which\nseem safely hidable.\n\n - $outer fields and accessors\n - classes whose classfile has the jvm Synthetic attribute\n   (not to be confused with the SYNTHETIC flag)\n\nI leave additional choices to those who have a better idea how\nthis will materialize (i.e. IDE guys.)\n\nIt is easy to selectively introduce this flag; but the SYNTHETIC flag\nis set or checked for in so many places, it is very difficult to alter\nthe logic around it (either by setting it less, or checking for HIDDEN\nonly) with much confidence. So right now HIDDEN is only used to help\nACC_SYNTHETIC make it into bytecode - it is only set in conjunction with\nSYNTHETIC, and it doesn't help anyone hide from the typechecker.\n\nReview by @dragos, @odersky."
850,'','SI-6042 Improve type selection from volatile type error\n- Display the type of the typed qualifier (qual1), to avoid the\n   message "Illegal type selection from volatile type null".\n - Show the upper bound, which is used to calculate the volatility.\n\nReview by @adriaanm'
849,'','better way to look for method bodies to inline, helps with SI-4767\n\nThis pull request changes a core aspect of the inliner, thus please be sure to re-check.\n\nAt least one aspect definitely needs improvement: the definition of `isJDKClass()`. Ideas are specially welcome about that.\n\nAs well as comments about any material effect on performance ( @gkossakowski comes to mind ).\n\nreview by @VladUreche\nreview by @dragos\n'
848,'','Eliminated some code in asSeenFrom.\nParaphrasing martin, BaseTypeSeqs are now computed lazily\nso the cycle "asSeenFrom -> generates BaseTypeSeq -> generates\nRefinement of baseType -> needs asSeenFrom" no longer takes\nplace.  Review by @odersky.'
847,'lrytz','SI-6028 Avoid needless symbol renaming in lambdalift\nPreserve names of all referenced free vars. This is achieved\nin a slightly roundabout manner:\n\n 1. they are renamed (as before this change)\n 2. the code that references them is lifted\n 3. the original names are restored.\n\nThe resulting natural beauty is evident in the [diff of t6028.check](https://github.com/retronym/scala/commit/22f2e355#diff-3).\n\nThis subsumes the treatment in 0e170e4 that ensured named parameter\ncalls cannot see mangled names; pos/t6028 confirms as much.\n\nReview by @lrytz'
846,'','Implicits to encourage more Name-dropping.\nThis creates implicits in cakes across the land from:\n\n  String => TermName\n  String => TypeName\n\nAnd also from:\n\n  Name => NameOps[Name]           // lower priority\n  TermName => NameOps[TermName]\n  TypeName => NameOps[TypeName]\n\nWhat this is all about, using "drop" as a motivating example,\nis that these should all work:\n\n  "abc" drop 1                      // "bc": String\n  ("abc": TermName) drop 1          // "bc": TermName\n  ("abc": TypeName) drop 1          // "bc": TypeName\n  (("abc": TypeName): Name) drop 1  // "bc": Name\n\nBut this should not:\n\n  ("bc": Name)  // ambiguity error\n\nThis requires drop not being directly on Name; peer implicits\nfrom String => TermName and String => TypeName; implicit\nclasses to install drop on TermName and TypeName; and a lower\npriority implicit class to allow ops on Names.\n\nReview by @xeno-by .'
845,'','Implicits to encourage more Name-dropping.\nThis creates implicits in cakes across the land from:\n\n  String => TermName\n  String => TypeName\n\nAnd also from:\n\n  Name => NameOps[Name]           // lower priority\n  TermName => NameOps[TermName]\n  TypeName => NameOps[TypeName]\n\nWhat this is all about, using "drop" as a motivating example,\nis that these should all work:\n\n  "abc" drop 1                      // "bc": String\n  ("abc": TermName) drop 1          // "bc": TermName\n  ("abc": TypeName) drop 1          // "bc": TypeName\n  (("abc": TypeName): Name) drop 1  // "bc": Name\n\nBut this should not:\n\n  ("bc": Name)  // ambiguity error\n\nThis requires drop not being named on String; peer implicits\nfrom String => TermName and String => TypeName; implicit\nclasses to install drop on TermName and TypeName; and a lower\npriority implicit class to allow ops on Names.\n\nReview by @xeno.by .'
844,'','Knocking off a few catch _ => warnings.\n'
843,'','SI-6036 yet again makes sense of magic symbols\nreview by @odersky '
842,'','SI-6036 missingHooks in reflexive unpickler\nreview by @odersky'
841,'','final touches to GenASM to become default JVM backend in M5\nreview by @dragos\n'
840,'',"STARR now includes source\nNot that it gives us full reproducibility, but it's a start.\n\nAlso STARR now uses pack libs.  Testing appears to work.\n\nReview by @lrytz @xeno-by @dragos\n\nespecially need to check IDE with this."
839,'','Fix to push-jars to use same sha fixing that pull uses.\nThis fixes the binary-repo-tools.sh so that both push and pull use the same mechanism of obtaining SHA.   This should fix the push script for windows.\n\n\nReview by @lrytz @xeno-by'
838,'',"SI-2442 sealedness for java enums non-experimental\nconsider java enums as sealed even when we're not running in experimental mode"
837,'paulp',"SI-6022 model type-test-implication better -- review by @paulp\nwe use subtyping as a model for implication between instanceof tests\ni.e., when S <:< T we assume x.isInstanceOf[S] implies x.isInstanceOf[T]\nunfortunately this is not true in general.\n\nSI-6022 expects instanceOfTpImplies(ProductClass.tpe, AnyRefClass.tpe), but\nProductClass.tpe <:< AnyRefClass.tpe does not hold because Product extends Any\n\nhowever, if x.isInstanceOf[Product] holds, so does x.isInstanceOf[AnyRef],\nand that's all we care about when modeling type tests"
836,'',"SI-6022 model type-test-implication better\nwe use subtyping as a model for implication between instanceof tests\ni.e., when S <:< T we assume x.isInstanceOf[S] implies x.isInstanceOf[T]\nunfortunately this is not true in general.\n\nSI-6022 expects instanceOfTpImplies(ProductClass.tpe, AnyRefClass.tpe), but\nProductClass.tpe <:< AnyRefClass.tpe does not hold because Product extends Any\n\nhowever, if x.isInstanceOf[Product] holds, so does x.isInstanceOf[AnyRef],\nand that's all we care about when modeling type tests"
835,'','Optimization in asSeenFrom.\nEliminated about half the allocations of AsSeenFromMap by examining the\narguments more closely. The impact is not what one might conclude from\nthat statistic, because those were the cheap asSeenFrom calls - but now\nthey are cheaper. Also,\n\n - worked in some eager vals rather than lazy ones.\n - changed hot-spot comparison to use eq\n - simplified annotationArgRewriter\n - elimnated separate tracking of capturedPre\n\nStatistics from compiling scala/collection/**.scala:\n\n  - 4209382 calls to asSeenFrom\n  - 1025945 maps created (instantiations of AsSeenFromMap)\n  - 1525649 maps avoided (these were instantiations before this patch)\n\nReview by most honorable performance-san @gkossakowski .'
834,'adriaanm','Fix SI-3836 not-really-ambiguous import detection.\nNormalize types before declaring that two imports are ambiguous,\nbecause they might be the same thing.  Review by @adriaanm.'
833,'','SI-5906 Binary search for SeqLike\nBinary search functionality based on binarySearch in java.util.Collections. Due to poor performance for linear sequences, I was expecting to implement this in IndexedSeqLike instead, but the precedent seemed to discourage that.'
832,'','Fix SI-3836 not-really-ambiguous import detection.\nNormalize types before declaring that two imports are ambiguous,\nbecause they might be the same thing.  Review by @moors.'
831,'','SI-6033 Closed. Provides implicit conversion from BigInteger to BigInt\nAdds an implicit conversion from java.math.BigInteger to BigInt. This way, \nBigDecimal (which also provides such a conversion) and BigInt are consistent.\n\nReview: ??? (who is responsible for the library (beyond collections, concurrent)?)\n'
830,'',"SI-5981, SI-5979, SI-5973, SI-5890 Closed. Maintenance to Try.\nreview by @axel22 and @phaller\n* Made some suggested changes to Try, including changing how we handle exceptions on certain methods, closing the above-referenced four tickets.\n* Added a transform method to Try which completes `this` Try by applying the partial function `f` to `this` if `this` is of type `Failure`, or conversely, by applying a partial function `s` if this is a `Success`. (There is an analogue on Future)\n* Moved NonFatal out of scala.concurrent and into scala.util.control and made it public (as it's sufficiently general to be used by more than just the concurrent package)\n* Added `ControlThrowable` and `NotImplementedError` to the list of fatal Throwables in NonFatal\n* Moved Either to scala.util, alongside of scala.util.Try, and added type aliases in the scala package object, so it's source compatible (this was discussed over lunch one day with Martin a few months ago)\n* Added implicit conversions to Try instead of extractors, because extractors are a bit too shallow for code that might already be using Try. For example, methods aren't 1-1 between Either and Try leaving a user to have to explicitly convert to a Try anyway, which is cumbersome.\n* Adds tests on Try\n* Adds a fair amount of documentation"
829,'','Fixed an error in the documentation for MapLike\nAs this trait is part of scala.collection.immuable.Map, this should be fairly high priority.  Please pull this documentation fix.'
828,'','SI-5974 make collection.convert.Wrappers serializable\nreview by @viktorklang'
827,'','enable attachments for symbols. fixes SI-5975\nfollow-up on #817\n\nreview by @dragos (only the stuff in Namers / NamesDefaults) and @xeno-by (symbol attachments).'
826,'','SI-5907, SI-5009 case-class copy defaults only for first param list\n`copy` no longer returns anonymous functions if there are multiple parameter lists, reverts most of 40e7cab7a2.\nCleaned up the special type completer for copy methods.\n\nreview by @paulp'
825,'','macro-based string interpolation formatter\nthe following feature implements a macro-based string interpolator.\nThis way, the format strings are compared with the types of the\nactual arguments. If they do not match, the compiler reports a\ntype error.\n\nReview: @xeno-by @cvogt'
824,'','[SI-4691, SI-6008] improve patmat analyses: irrefutable user-defined extractors, no-op type tests\nreview by @retronym\n\nSI-4691 exhaustivity: `unapply: Some` = irrefutable\n   overhauls treeMakersToConds in the process -- was getting a bit unwieldy\n\nSI-6008 use static knowledge of success of type tests\naugment the equality axioms to take into account that\na type test against the static type of a variable succeeds unless the variable is null\n\nfor exhaustivity we disregard null, so the type test always succeeds\nduring unreachability we model this knowledge as the obvious implication\n\n\nps: -Ypatmat-debug is a no-op for now, since it looks like the inliner fails to inline patmatDebug (/cc @magarciaEPFL)'
823,'','Adds `Type.resultType` to reflection API\nSeems to be quite an essential piece of functionality.\n\nGot requests for it from Paul back then, and now Daniel\nin his latest blog post has to painfully pattern match\nhis way to resultType.'
822,'','SI-5959 type equality now accounts for mirrors\nTypeRef(ThisType(<package1>), sym, args) should always be equal to\nTypeRef(ThisType(<package2>), sym, args) regardless of whether\npackage1 and package2 actually represent the same symbols of not.\n\nThis goes for subtyping (<:<) and type equality (=:=).\nHowever regular equality (==) and hashconsing is unaffected\nas per http://groups.google.com/group/scala-internals/browse_thread/thread/4bef4e6987bb68fe\n\nThis is done to account for the fact that mirrors share normal symbols,\nbut never share package symbols. Therefore at times it will occur that\nthe same types loaded by different mirrors appear different because of\nthe package symbols. More details: https://issues.scala-lang.org/browse/SI-5959.'
821,'',"SI-5830 switches: support guards, unreachability  -- review by @dragos\nturn switches with guards into guard-free switches by collecting all cases\nthat are (possibly) guarded by different guards but that switch on the same constant,\nand pushing the implied if-then-else into the collapsed case body\n\n```\ncase C if G1 => B1\ncase C if Gi => Bi\ncase C if GN => BN\n```\n\nbecomes\n\n```\ncase C => if (G1) B1\n     else if (Gi) Bi\n     else if (GN) BN\n     else default() // not necessary if GN == EmptyTree\n```\n\ndefault() is a jump to the default case; to enable this, we wrap a default() { } labeldef\naround the last case's body (the user-defined default or the synthetic case that throws the matcherror)\nso we can jump to the default case after the last guard is checked\n(assuming unreachability is checked, once we ended up in a non-default case,\none of the guards either matches or we go to the default case)\n\nthe unreachability analysis is minimal -- we simply check (after rewriting to guard-free form)\nthat:\n  - there are no duplicate cases\n  - the default case comes last\n\nmisc notes:\n  - can't jump in exception handlers (TODO: a more fine-grained analysis on when we need to jump)\n  - work around SI-6015 (test file run/t5830.scala crashed the inliner)\n  - propagate type of case body to label def of default case\n    (needed for existentials, see e.g., t2683)\n  - the default(){} LabelDef breaks SelectiveANFTransform -- workaround: don't write guarded switches in CPS code\n    (do the above transformation manually)"
820,'','SI-6013 Disallow deferred members from intermediate java parents.\n76c76b28f allowed for the fact that a Java method can override\na super class method without matching its type in a Scala sense;\nit need only match its type after erasure. However that change\nwent too far, and considered a concrete method in a base class\nto override a deferred method in a subclass.\n\nReview by @odersky, to double check the intent of 76c76b28f.'
819,'','SI-5959 type equality now accounts for mirrors\nTypeRef(ThisType(<package1>), sym, args) should always be equal to\nTypeRef(ThisType(<package2>), sym, args) regardless of whether\npackage1 and package2 actually represent the same symbols of not.\n\nSame goes for subtyping (<:<) and type equality (=:=).\n\nThis is done to account for the fact that mirrors share normal symbols,\nbut never share package symbols. Therefore at times it will occur that\nthe same types loaded by different mirrors appear different because of\nthe package symbols. More details: https://issues.scala-lang.org/browse/SI-5959.'
818,'','tags for AnyVal and AnyRef\n'
817,'',"enable attachments for symbols. fixes SI-5975, an ide bug with default args.\ngets rid of the global hash maps in Namers and NamesDefaults\n\nreview by @dragos. i assume there should not be memory leaks, the symbol attachments should get GC'd together with the symbol\n\nreview by @dotta to make sure i merge-squashed his code correctly\nreview by @xeno-by for symbol attachments\n"
816,'heathermiller','Scaladoc diagrams (again)\nReview by:\n@kzys, @heathermiller '
815,'','u.build now correctly invokes missing symbol hooks\nreview by @odersky, @adriaanm '
814,'',"Closes SI-5969.\nAssumption that we enter tryTwice when inferring\nthe right alternative with an empty buffer is\nwrong.\nIn this particular bug it manifested itself on\nif/then/else which share the same context and 'else'\nbranch was simply flushing the buffer with an\nerror from the 'then' branch.\n\nReview by @retronym, please (you were on the right track judging from the comments in the bug report)."
813,'','u.build now correctly invokes missing symbol hooks\nThis pull request relies on https://github.com/scala/scala/pull/810'
812,'','Improved Eclipse project files and documentation\nThe `reflect` project depends now on the `scala-library` project, plus a correction in the order of libraries for the `scala-compiler` project.\n\nUpdated the `README` with fixes for common issues with the Java compiler and the classpath checker.\n\nreview by @lrytz, @dgruntz'
811,'adriaanm','Closes SI-5687.\nRecover from early ErrorType assignment and\ndelay error reporting until refchecks,\nwhere it belongs. Review by @adriaanm.'
810,'','two pullrequests from this morning, combined to merge changes to starrs\nCombines https://github.com/scala/scala/pull/788 and https://github.com/scala/scala/pull/799'
809,'',"Fix SI-5929 - Verify error with finally and pattern match\nDon't enter all labels in a method when emitting a forward jump, since some\nlabels will be duplicated (if defined inside finally blocks). For each forward\njump, enter only the label that is needed for that jump.\n\nreview by @magarciaEPFL, @paulp."
808,'','better module classes support in the reflection API\nreview by @odersky '
807,'','adds a way to work with module classes without leaking details into the API\n'
806,'','[Backport] Fix for exponential compile time in specialization.\nBackport fix to 2.9.2, from commit 39f01d4f48e59c2037a3af759eb6d55d0da50e70 on paulp/scala. I ran the tests successfully and verified that the bug is not reproducible on the included testcase.\n\nNote that the original pull request (https://github.com/scala/scala/pull/801) is not yet merged.\n\nReview by @prokopec.'
805,'','ToolBox-independent DynamicProxy Redux\nThis commit set restores the DynamicProxy class, which was removed due to changes in the reflection API (it was not based on reflection, but would have needed to be ported to reflection).\n\nUnlike the previous version, which used dynamic compilation (ToolBoxes), this version uses only features available in reflect.jar. It supports the resolution of overloaded members and supports default-argument invocations. It does not support implicit arguments, explicit type arguments, or the invocation of multiple parameter list methods.\n\nI also added a bonus feature: by overriding a boolean member, the user can create a proxy that ignores the distinction between public and private members, allowing easy reflective access to private members.\n\nThis is a revised version with several fixes and improvements.'
804,'','moves reflective compiler into scala.tools.reflect\n'
803,'','performance improvements (10% to 20% depending on HDD vs SSD) in GenASM\nreview by @dragos\nreview by @gkossakowski\nreview by @paulp\n'
802,'',"SI-5489 Avoid accidentally adding members to Object in erasure.\n`Symbol#classBound` assumed that `refinedType` would return a\na type based on new refinement class symbol; but that isn't so\nduring erasure. Instead, it returns the first super class, into\nwhich we entered new members. Needless to say, the next run of the\nresident compiler didn't take kindly to these hijinks.\n\nTo remedy the situation, I've added (yet another) condition\non `phase.erasedTypes`.\n\nSome more analysis in the comments of [SI-5489](https://issues.scala-lang.org/browse/SI-5489)\n\nReview by @odersky"
801,'','Fix for exponential compile time in specialization.\nReview by @prokopec.'
800,'','SI-5932 Tone down non-sensible == warning with refinements.\nErrs on the side of avoiding false positives.\n\nReview by @paulp'
799,'','Fixes Si-6005\n'
798,'','SI-2807 Avoid catch all warning for Stable Id patterns\nReview by @dragos'
797,'','Reflection-Based DynamicProxy\nThis commit set restores the DynamicProxy class, which was removed due to changes in the reflection API (it was not based on reflection, but would have needed to be ported to reflection).\n\nUnlike the previous version, which used dynamic compilation (ToolBoxes), this version uses only features available in reflect.jar. It supports the resolution of overloaded members and supports default-argument invocations. It does not support implicit arguments, explicit type arguments, or the invocation of multiple parameter list methods.\n\nI also added a bonus feature: by overriding a boolean member, the user can create a proxy that ignores the distinction between public and private members, allowing easy reflective access to private members.'
796,'','Issue/5846,4597,4027,4112\nReview by @jsuereth'
795,'','Fix SI-5846 and SI-4027.\nReview by @jsuereth.\n\nFixes return types of `SortedMap.filterKeys` and `mapValues`.\n\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/161/console'
794,'','Fixed race condition that was caused by Statistics pushTimer.\n'
793,'','Renaming convertTo to to on GenTraversableOnce.\nReview by @axel22 and @odersky'
792,'','Split @milessabin HasRepr into IsTraversableOnce and IsTraversableLike t...\n...ype class-ish things.\n\nThis removes some of the sprawl of the pattern at the cost of slightly uglier usage syntax.\n\nReview by @alex22 and @milessabin'
791,'','Fix SI-5336.\nReview by @jsuereth.'
790,'','Fix SI-3326.\nThe heart of the problem - we want to retain the ordering when\nusing `++` on sorted maps.\n\nThere are 2 `++` overloads - a generic one in traversables and\na map-specific one in `MapLike` - which knows about the ordering.\n\nThe problem here is that the expected return type for the expression\nin which `++` appears drives the decision of the overload that needs\nto be taken.\nThe `collection.SortedMap` does not have `++` overridden to return\n`SortedMap`, but `immutable.Map` instead.\nThis is why `collection.SortedMap` used to resort to the generic\n`TraversableLike.++` which knows nothing about the ordering.\n\nTo avoid `collection.SortedMap`s resort to the more generic `TraverableLike.++`,\nwe override the `MapLike.++` overload in `collection.SortedMap` to return\nthe proper type `SortedMap`.\n\nReview by @jsuereth\nReview by @paulp\n\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/154/'
789,'',"Rename convertTo to to.   Hopefully this won't break any third-party lib...\n...raries.\n\n\nReview by @axel22 and @odersky"
788,'','Improves backward compatibility of manifests:\n'
787,'','Fix SI-5971.\nWhen using `AbstractTransformed` abstract inner class in views in order\nto force generating bridges, one must take care to push the corresponding\ncollection trait (such as `Iterable` or `Seq`) as far as possible to the\nleft in the linearization order -- otherwise, overridden methods from these\ntraits can override the already overridden methods in view. This was the\ncase with `takeWhile`.\n\nReview by @jsuereth\nReview by @paulp\n\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/152/consoleFull'
786,'','Fix SI-5986.\nHere we had an issue that RedBlack does not work the same way\nfor sets - which are not supposed to replace an element if\nit is the same (wrt equals) and maps - which should replace\nthe corresponding values.\n\nAdding an overwrite parameter which decides whether to overwrite\nadded keys if they are the same in the ordering.\n\nFix tests.\n\nReview by @phaller\nReview by @jsuereth'
785,'','Parallelize convertTo in parallel collection.\nReview by @jsuereth'
784,'','Revert pull request #749 (CPS: enable return expressions in CPS code if they are in tail position)\nThis reverts commit 0132464e7094b158731e950ee6998515871baf60, reversing\nchanges made to 764bd8ec4d8f12764082b1c52e0c2b859c550c0b.'
783,'','Revert pull request #720 (CPS: enable return expressions in CPS code if ...\n...they are in tail position)\n\nReverts commit 0ada0706746c9c603bf5bc8a0e6780e5783297cf.\nReverts commit 51c92f02229098d0b402a65a72267f7a17984022.\nReverts commit cdfbe8e39fbbec00c969cd74f117ae410b98b40b.\nReverts commit 796024c7429a03e974a7d8e1dc5c80b84f82467d.'
782,'','Test that closes SI-5839. Bug itself most probably fixed by #602\nProbably not necessary, but @adriaanm would you please give thumbs up for this one?'
781,'','Updated Eclipse project files for `asm`\nCorrected a small typo in linked source folders.'
780,'','Fix range positions when applying anonymous classes.\nThis will bring back our jenkins build from the eternity of failures.\n\nReview by @dragos or @odersky.'
779,'','Closes SI-5148.\nUnfortunately we have to wrap transform to catch all\nthe MissingRequirementErrors exceptions (wrapped in TypeErrors).\nThis is because we force the info of the symbol in a couple of\nplaces and we would have to catch all/some of them\n(and remove the duplicates as well which really becomes messy).\n\nReview by @axel22.'
778,'','patmat bugfixes and minor clean ups\nreview by @retronym, puh-lease'
777,'','SI-2796 Warn if early definitions are used with a trait.\nFor which they (currently) have no special meaning.\n\nReview by @hubertp (who once uttered "Yes, the early definition doesn\'t work for traits initialization ATM and I guess we should provide it.")'
776,'',"SI-5761: fix up #774 (missing check file)\nadd check file missing from #774\n\nI missed that the build bot hadn't built it yet\n\nreview by @hubertp"
775,'','Fix for SI-5977\nCloses SI-5977.\n\nReview by @adriaanm'
774,'','Added test for SI-5761.\nSeems that my cleanup of SI-4842 also fixed that one.\nReview by @paulp or @retronym.'
773,'','fix for SI-4935\n review by @VladUreche'
772,'','recovering optimized stability\nDiscussion in https://issues.scala-lang.org/browse/SI-5891 and also in https://issues.scala-lang.org/browse/SI-5442\n\nreview by @VladUreche\n'
771,'','SI-4176 A repeat dose of repeated parameter type sanitization.\n - During eta expansion, treat parameters of type A* as Seq[A]\n - Do the same for method/class parameters as referred to by an Ident.\n\nAlso fixes SI-5967, which shows up during pattern matching.\n\nReview by @paulp or @adriaanm.\n\nThanks to Ryan Hendrickson for the bug report and suggested fix.'
770,'','Statistics improvements and bug fixes.\nAdded compile-time option hotEnabled to Statistics that can be used to count very high frequency methods with 0 overhead for the disabled case. Fixed problem with weak maps that caused some timers to be discarded prematurely before they could be printed. Fixed problem with accounting for stacked timers.'
769,'','Minor followup on SI-4842: remove awkward condition. Review by @retronym\n'
768,'','emit JVM InnerClasses attribute for bean info classes\n\nThe corresponding fix for GenJVM is pending.\n\nreview by @VladUreche\nreview by @dragos\n'
767,'','SI-5968 Eliminate spurious exhaustiveness warning with singleton types.\nA singleton type is a type ripe for enumeration.\n\nReview by @adriaanm'
766,'','LongMap: Made life a bit less scary for those doing source archaeology.\n'
765,'','Small formatting/clarity enhancements in immutable HashSet.\n'
764,'','IntMap: Made life a bit less scary for those doing source archaeology.\n'
763,'','Small formatting/clarity enhancements in immutable HashMap.\n'
762,'','Adds missing closing curly brace to ScalaDoc code example.\n'
761,'','Added a key comment.\nThe commit message from f4d2678c42 works a lot better up close\nand personal with the change.'
760,'','SI-5966 Fix eta expansion for repeated parameters with zero arguments.\nReworks part of e33901 / SI-5610, which was inserting an <empty> tree\nas an argument in this case, which turns into a null in icode.\n\nReview by @lrytz'
759,'','Eclipse project files for library, reflect, fjbg & compiler\nThey are now in src/eclipse/. Removing the old ones from the root.\n\nTo use these project files you need to define the Eclipse *path variable*\n`SCALA_BASEDIR`, in `General/Workspace/Linked Resources`.\n\nThese projects have proper dependencies. The compiler depends on the library project, so you\nwill need both in the workspace. Any changes in the library will be picked up by the compiler project. Same for asm. The Sbt builder will hopefully be smart enough to recompile only the necessary files.'
758,'','Exported new packages in the MANIFEST file.\n'
757,'lrytz',"Don't just swallow `Throwables` while parsing bytecode. Print a warning\n..and go on.\n\nThis has caused hours of debugging, only to find out that 'package X does not have a member Y' were caused by a `NullPointerException`."
756,'','Fix SI-4809.\nReview by @phaller.'
755,'',"Fix SI-5284.\nThe problem was the false assumption that methods specialized\non their type parameter, such as this one:\n\n    class Foo[@spec(Int) T](val x: T) {\n      def bar[@spec(Int) S >: T](f: S => S) = f(x)\n    }\n\nhave their normalized versions (`bar$mIc$sp`) never called\nfrom the base specialization class `Foo`.\nThis meant that the implementation of `bar$mIc$sp` in `Foo`\nsimply threw an exception.\n\nThis assumption is not true, however. See this:\n\n    object Baz {\n      def apply[T]() = new Foo[T]\n    }\n\nCalling `Baz.apply[Int]()` will create an instance of the\nbase specialization class `Foo` at `Int`.\nCalling `bar` on this instance will be rewritten by\nspecialization to calling `bar$mIc$sp`, hence the error.\n\nSo, we have to emit a valid implementation for `bar`,\nobviously.\nProblem is, such an implementation would have conflicting\ntype bounds in the base specialization class `Foo`, since\nwe don't know if `T` is a subtype of `S = Int`.\nIn other words, we cannot emit:\n\n    def bar$mIc$sp(f: Int => Int) = f(x) // x: T\n\nwithout typechecking errors.\n\nHowever, notice that the bounds are valid if and only if\n`T = Int`. In the same time, invocations of `bar$mIc$sp` will only\nbe emitted in callsites where the type bounds hold.\nThis means we can cast the expressions in method applications\nto the required specialized type bound.\n\nThe following changes have been made:\n1) The decision of whether or not to create a normalized\nversion of the specialized method is not done on the\n`conflicting` relation anymore.\nInstead, it's done based on the `satisfiable` relation,\nwhich is true if there is possibly an instantiation of\nthe type parameters where the bounds hold.\n2) The `satisfiable` method has a new variant called\n`satisfiableConstraints`, which does unification to\nfigure out how the type parameters should be instantiated\nin order to satisfy the bounds.\n3) The `Duplicators` are changed to transform a tree\nusing the `castType` method which just returns the tree\nby default.\nIn specialization, the `castType` in `Duplicators` is overridden,\nand uses a map from type parameters to types.\nThis map is obtained by `satisfiableConstraints` from 2).\nIf the type of the expression is not equal to the expected type,\nand this map contains a mapping to the expected type, then\nthe tree is cast, as discussed above.\n\nAdditional tests added.\n\nReview by @dragos\nReview by @VladUreche\n\nBot output (although on another, non-cherry-picked branch):\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/127/consoleFull"
754,'','removes pre-M4 compatibility stubs for the IDE\n'
753,'','Making Actor Migration Tests deterministic.\nReview by: @phaller'
752,'','SI-2807 Resurrect and refine the promiscuous catch warning.\nThe previous incarnation didn\'t survive 4fb3473.\n\nThis version can be cleared by using a typed pattern: `catch { case _: Throwable => }`.\n\nThis is motivated by the recent appearance of such a catch in `util.Try`, and by battle\nscars left by one too many processes bravely but stupidly catching and logging OutOfMemoryErrors.\n\n-Y status has been skipped: this warning is enabled by default and can only be silenced\nwith use of a typed pattern.\n\nA third-time\'s-the-charm submission, that follows #730 and #745.\n\nSeal of approval needed by @odersky, "I agree this would be a good idea." doesn\'t convince the would be mergers.'
751,'','SI-5951 add `narrow` to the reflection API\nas per https://issues.scala-lang.org/browse/SI-5951'
750,'',"Fix for SI-5953, extension methods crasher.\nAs usual, .tpe -> .tpeHK. As a side note following an old theme,\nif symbols of type parameters knew that they were symbols of type\nparameters, they could call tpeHK themselves rather than every call\nsite having to do it. It's the operation which injects dummies which\nshould require explicit programmer action, not the operation which\nfaithfully reproduces the unapplied type. Were it that way, errors could\nbe caught much more quickly via ill-kindedness.\n\nSeems like an improvement over lurking compiler crashes at every call\nto tparam.tpe.\n\nReview by @adriaanm"
749,'','Backport of fix for CPS ticket 1681\nThis is a backport of the fix for CPS ticket 1681 (see commit bf4b982389dcd573e81155bfe233f70f1471b017). For the record, this has already been reviewed by @adriaanm.'
748,'','Updated scalacheck sources.\nTo current scalacheck head 7ffda752d8 except for this diff:\n\ndiff -rw src/scalacheck/org/scalacheck/Arbitrary.scala /s/scalacheck/src/main/scala/org/scalacheck/Arbitrary.scala\n13d12\n< import scala.reflect.ClassTag\n281c280\n<   implicit def arbArray[T](implicit a: Arbitrary[T], c: ClassTag[T]\n---\n>   implicit def arbArray[T](implicit a: Arbitrary[T], c: ClassManifest[T]\ndiff -rw src/scalacheck/org/scalacheck/Prop.scala /s/scalacheck/src/main/scala/org/scalacheck/Prop.scala\n63c63\n<   def mainCallsExit = false\n---\n>   def mainCallsExit = true\nOnly in /s/scalacheck/src/main/scala/org/scalacheck: ScalaCheckFramework.scala\ndiff -rw src/scalacheck/org/scalacheck/util/Buildable.scala /s/scalacheck/src/main/scala/org/scalacheck/util/Buildable.scala\n13d12\n< import scala.reflect.ClassTag\n34c33\n<   implicit def buildableArray[T](implicit cm: ClassTag[T]) =\n---\n>   implicit def buildableArray[T](implicit cm: ClassManifest[T]) ='
747,'','Address/workaround issue SI-3452 and related problems, try #2\nWorkaround issue SI-3452 (1) and fix some of the underlying bugs (2).\n(1) To workaround SI-3452, enable by default a warning (which was enabled by -Ycheck:genjvm) which omits faulty generic signatures. This was part of the previous pull request and nobody objected.\n(2) Address some of the underlying bugs, by changing some generated generic signatures (which were incorrect before): one is a problem with intersection types (see 34d8f03007e849f8600a479fe6ae41e1cb4153f6), the other a false mismatch between `Nothing` and `Nothing$`.\nNote that Paul Phillips had objections originally to how I solved the intersection types problem, and did not comment on it later: since the new behavior for generic signatures is simply coherent with the behavior of erasure, this should not be a problem.\n(3) Reenable -Xverify and update its docs.\n\nSome "related" cleanups are also included.\n\nThis pull request incorporates some feedback from scala-internals. It also supersedes https://github.com/scala/scala/pull/584, described in:\nhttps://issues.scala-lang.org/browse/SI-3452?focusedCommentId=57712#comment-57712\n\nReview by @magarciaEPFL\nReview by @gkossakowski'
746,'','Statistics reorganization\nStatistics were broken since the move to reflect.internal. They are now\nre-organized, made more robost and modular.'
745,'',"SI-2807 Resurrect and refine the promiscuous catch warning.\nThe previous incarnation didn't survive 4fb3473.\n\nThis version can be cleared by using a typed pattern: `catch { case _: Throwable => }`.\n\nThis is motivated by the recent appearance of such a catch in `util.Try`, and by battle\nscars left by one too many processes bravely but stupidly catching and logging OutOfMemoryErrors.\n\nThis is an alternative to #730, which enables the warning by default.\n\nIt doesn't attempt to remedy the instances of this warning throughout the Scala distribution -- these must be considered individually by people familiar with the code.\n\nReview by @jsuereth"
744,'','Sbt reflecton fix\n* Partest now working with SBT build on 0.11.3\n* Sha resolving fix-ups\n* Stop using external scalacheck for local version.\n* Better refactoring/split up of functionality for the build.\n\n\nReview by anyone interested.'
743,'dragos','Fix SI-4541.\nCatch type errors when duplicating trees.\nIn this case, to access a protected member from a specialized\nclass is an error, so we would have to make the member public\nanyway.\nBetter it is then to report an error and have the user make the\nfield public explicitly.\n\nReview by @dragos.'
742,'','Use `ThreadLocalRandom` in `TrieMap.size`.\nReview by @jsuereth.'
741,'','Fix SI-4954.\nOverride inner classes in `LinkedHashMap` that correspond\nto `filterKeys`, `mapValues` and `keys` to retain a proper\nordering of elements when they are transformed.\n\nreview by @phaller\nreview by @jsuereth'
740,'','Statistics reorganization\nStatistics were broken since the move to reflect.internal. They are now\nre-organized, made more robost and modular.\n\nReview by @lrytz, @adriaanm'
739,'','Adding copyInto and toVector methods to collections.\n* Added generic copyInto method for collections.  For any collection with a CanBuildFrom, can convert a generic collection into it using the builder.\n* Added specifici toVector method for collections.   This is more efficient than copyInto if the collection is a Vector.\n\nReview by @axel22'
738,'',"fixes checkinit, now it's for real\n"
737,'','enables reification of anonymous classes\n'
736,'',"Reverting the diagrams\nI'll debug the OOM and the slowdown in more detail and come back with another pull request.\nNo review."
735,'',"SI-4842 Forbid access to in-construction this in self-constructor args\nThe check was already in place for direct calls to the super constructor.\nWithout this additional check, ExplicitOuter crashes, as it doesn't create\nan $outer pointer for the constructor-arg scoped inner object, but expects\none to exist when transforming the Outer.this reference.\n\nreview by @hubertp\n\n - (how) should I report more than one such error per file?"
734,'',"SI-4842 Forbid access to outer this from constructor-local classes.\nIn the same spirit as SI-4166. In fact, this change takes over some of its error message turf.\n\nIn this case, it's more of an implementation restriction, as the generated classes don't get an `$outer` parameter (See `Symbol#{isClassLocalToConstructor, outerClass}`).\n\nreview by @adriaanm (or another member of the Wannabe NPEs...)\n\n - would it be more correct to add an `$outer` parameter for these? maybe the restriction was only intended for arguments to the super constructor, rather than the self constructor.\n - general question: which checks go into `Typers` vs `RefChecks`?"
733,'',"SI-4989 Reject super.x if an intermediate class declares x abstract.\nThis is in line with Java's treatment. Without this, an AbstractMethodError\nis thrown at runtime.\n\nReview by @hubertp\n\nDiscussion: https://groups.google.com/d/topic/scala-internals/1D9HEe-CIe0/discussion\n\nResubmission of #732 that excludes traits from the check."
732,'',"SI-4989 Reject super.x if an intermediate class declares x abstract.\nThis is in line with Java's treatment. Without this, an AbstractMethodError\nis thrown at runtime.\n\nReview by @hubertp\n\nDiscussion: https://groups.google.com/d/topic/scala-internals/1D9HEe-CIe0/discussion"
731,'','SI-5617 Better error message for "x overrides nothing".\n"It looks like you\'re trying to override a method", notes Clippy.\n\nreview by @hubertp and @soc'
730,'',"SI-2807 Resurrect and refine the promiscuous catch warning.\nThe previous incarnation didn't survive 4fb3473.\n\nThis version can be cleared by using a typed pattern: `catch { case _: Throwable => }`.\n\nThis is motivated by the recent appearance of such a catch in `util.Try`, and by battle\nscars left by one too many processes bravely but stupidly catching and logging OutOfMemoryErrors.\n\nI would really like to skip the -Y status and promote this to the default armory of warnings.\n\nReview by @paulp\n"
729,'','improves showRaw\naddresses concerns raised in http://groups.google.com/group/scala-user/browse_thread/thread/de5a5be2e083cf8e'
728,'','exposes extra tests for symbols as discussed on reflection meeting\nreview by @odersky'
727,'','classtag => classmanifest conversion no longer requires runtime universe\n'
726,'','improves showRaw\naddresses concerns raised in http://groups.google.com/group/scala-user/browse_thread/thread/de5a5be2e083cf8e'
725,'','Remove unused type parameter.\nThere should probably be a warning about non-overriding methods\nwhich have unreferenced type parameters.'
724,'','fixes SI-5912\n'
723,'dragos','Fix for java parser edge case.\nEmpty statements are A-OK.  Closes SI-5910.  Review by @dragos.'
722,'','fix compiler crash on BoundedWildcardType variance check\nThis was missing, causing compiler crashes in various examples whenever\na BoundedWildcardType got here.\n\nAn example of code that would crash the compiler before now is this:\n\n```\nabstract class Foo[T] extends Seq[T] {\n  def f[T2](a : T => T2) : T2\n}\n\nabstract class Bar[T] (collections : Iterable[Foo[_ <: T]] ) {\n  val lol = {\n    collections.zipWithIndex.foreach {\n      case (foo: Foo[_], i: Int) => {\n        foo.f((t:T) => Unit)\n      }\n    }\n  }\n}\n```'
721,'','Wip sensible deprecation msgs √\nThis is the new, improved one. Found overzealous backticking to be the cause earlier, although with a less than stellar failure message.'
720,'','CPS: enable return expressions in CPS code if they are in tail position\nAdds a stack of context trees to AnnotationChecker(s). Here, it is used to\nadapt the annotation of a return expression if the expected type is a CPS type.\n\nThe remove-tail-return transform is reasonably general, covering cases such as\ntry-catch-finally. Moreover, an error is thrown if, in a CPS method, a return\nis encountered which is not in a tail position such that it will be removed\nsubsequently.\n\nReview by @adriaanm or @TiarkRompf\n'
719,'','Adding JDK7 friendly build with new partialdist(-opt) tasks.\n* When running in JDK 7 issues a warning.\n* New partialdist, partialdist-opt tasks allow creating a distribution with no source/docs.\n\nreview/use by @paulp,  THIS TIME FOR REALZ.  '
718,'',"Diagrams in Scaladoc\nDamien's semester project on displaying diagrams in scaladoc. Big thanks fly out to Damien, for his wonderful work, to Ken McDonald for putting the project on the right track when we started out and to Heather for her great feedback and suggestions each time we discussed diagrams!\n\nEach commit was checked:\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/115/console\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/116/console\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/117/console\n\nReview by @kzys, @heathermiller and @pedrofurla. (there are changes in different parts of scaladoc, so please look at individual commits)"
717,'','Fix SI-5909.\nEmpty trie maps no longer fail when size is called.\n\nAlso, partest scalacheck test should now correctly report\nif a test failed.\nEvery line in the output of the scalacheck test must begin\nwith a `+`, and lines no longer wrap.'
716,'','removes pre-M4 compatibility stubs for the IDE\n'
715,'',"Adding JDK7 friendly build.\nEssentially this just disables swing if you're on JDK7 so you can actually build and use Scala.\n\nFOR REALZ this time.\n\nReview by @lrytz or @paulp"
714,'','scalacheck and partest\n'
713,'',"Fixups to Future task stack\nThis fixes a bug where _taskStack could batch a task\ninto the wrong executor, as previously commented in the\ncode.\n\nIt now uses the _taskStack machinery for the Future.apply\ndispatch in addition to callback dispatch, so we can batch\nFuture(body) as well.\n\nLess significantly, it micro-optimizes by combining some\ndifferent closures and Runnable into a Task object, so\nthere aren't as many objects created when storing and\ndispatching a callback. So it saves a bit of memory\nand runtime perhaps.\n\nReview by @axel22"
712,'odersky','Issue/hardening compiling with newer sources\nA bunch of changes to make the compiler more robust when sources in the Scala library are newer than the corresponding classfiles.\n\nMost changes affect the presentation compiler, but they would help in normal builds as well. I broke it down in several small self-contained commits.\n\nreview by @odersky.'
711,'TiarkRompf',"Don't crash if cpsParam is not on the classpath.\nWhen checking if a piece of code needs the continuations plugin, the cpsParam classes may not be on the class path. Assume it does not need it in that case."
710,'','removes pre-M4 compatibility stubs for the IDE\n'
709,'','A tribute to https://github.com/scala/scala/pull/414\n'
708,'',"fastlocker target for ant\ndoesn't build msil in locker.comp"
707,'','Wip sensible deprecation msgs √\nSome migration lube'
706,'','fixes a checkinit problem\n'
705,'',"Suppress non-local return unchecked warnings.\nThere doesn't seem to be any way to do that by adding\na synthetic annotation."
704,'','Breaks.break should return Nothing, not Unit\n'
703,'','Statistics reorganization\nStatistics were broken since the move to reflect.internal. They are now\nre-organized, made more robost and modular.\n\nReview by @lrytz, @adriaanm'
702,'adriaanm','Fix for reflection.  Review/Use by @adriaanm\n'
701,'','Using JDK7 now just disables Swing and causes nice warning to show up.\nReview by @paulp'
700,'','Fix libs in build\n\n* Forkjoin / FJBG  are now always built from source for locker/quick/strap.\n* MSIL is built with compiler sources.\n* TODO - remove fjbg/msil/forkjion from STARR in the future.\n\n\nReview by @lrytz and/or @heathermiller'
699,'',"SI-5162 Exclude super.foo from the erasure cast of SI-4283\nIf the target method is defined in Java, treat the super reference\nas an error, otherwise allow it in the knowledge that Scala loosens\nthe access restrictions on its generated classes.\n\nMoves the test for that bug out of pending-ville. It's sufficient\nto place Test in the empty package to exercise the right code paths.\n\nreview by @odersky"
698,'','SI-5696 Detect excess constructor argument lists.\nAn apply method fooled the usual mechanism.\n\nReview by @hubertp'
697,'',"SI-4270 Disqualify in scope implicits that are shadowed.\nIf an expression wouldn't type check explicitly, it shouldn't be\nallowed implicitly.\n\nEmploys `typedIdent`, which already does this sort of thing rather well,\ninstead of continuing to reimplement it in `Implicits`.\n\nRemove check for non-implicit synonym, which is subsumed by typing an `Ident`.\n\nAlso fixes SI-5376.\n\nTyping the `Ident` will be a touch slower, but I don't get consistent build times for `quick.comp` on my laptop at the best of times, so I couldn't determine if is a problem.\n\nResubmission of #692 that accommodates Scaladoc's usage of implicit search.\n\nReview by @adriaanm. "
696,'','An IntelliJ module for reflect.\n'
695,'','better unreachability for selections\nConsts are hashconsed modulo static-approximation-for-dynamic-value-equality\nthus, two value-equality tests in patterns should reuse the same ValueConst\nif and only if the tested values are guaranteed to be equal in all possible executions\n\nthe implementation uses unique types to track unique consts\nfor an Ident with a stable symbol, we simply use the corresponding singleton type\nfor a Select, we have to indirect some more: we store all the unique trees we\'ve encountered and a unique type for each of them; this unique type is then used to find the unique const that approximates the run-time value\n\nthis may seem roundabout, but we need to standardize on types for representing "value" tests,\nsince a type test against a singleton type must give rise to the same ValueConst\nas a value test using a tree that refers to the same symbol as the singleton type test\n(also, it\'s easier to go from values to types than vice versa)'
694,'','SI-4831 Fix ambiguous import detection for renamed imports.\nreview by @adriaanm'
693,'','SI-4831 Fix ambiguous import detection for renamed imports.\nreview by @adriaanm'
692,'',"SI-4270 Disqualify in scope implicits that are shadowed.\nIf an expression wouldn't type check explicitly, it shouldn't be\nallowed implicitly.\n\nEmploys `typedIdent`, which already does this sort of thing rather well,\ninstead of continuing to reimplement it in `Implicits`.\n\nRemove check for non-implicit synonym, which is subsumed by typing an `Ident`.\n\nAlso fixes SI-5376.\n\nTyping the `Ident` will be a touch slower, but I don't get consistent build times for `quick.comp` on my laptop at the best of times, so I couldn't determine if is a problem.\n\nReview by @adriaanm. "
691,'','tests for fixed bugs\n'
690,'','An IntelliJ module for reflect.\n'
689,'','An IntelliJ module for reflect.\nNo review.'
688,'','A quickfix for 09bf95675b\n'
687,'lrytz',"SI-5892 Don't apply implicit class members in class type param annots\n - Abuse `Context#inSelfSuperCall` for this purpose.\n - Inline `createNamer` into `completerOf(tree, typeParams)`, remove impossible case,\n   and tweak inSelfSuperCall.\n\nI originally tried this change in `Typers#typedClassDef`. Perhaps that also needs\nto be addressed, but I couldn't motivate that with a failing test.\n\nThis problem can lead to cyclic inheritance errors, as was seen in Scalala.\n\nReview by @lrytz"
686,'','A remedy for Illegal class modifiers in locker\nMore details here:\nhttp://groups.google.com/group/scala-internals/browse_thread/thread/fbd6d9f923f1cc89'
685,'','fixes a bug with bat files invocation from ant\nhttp://ant.apache.org/manual/Tasks/exec.html\nNote that .bat files cannot in general by executed directly.\nOne needs to execute the command shell executable cmd using the /c switch.'
684,'','The new reflection\n'
683,'','Reduce time spent in lubs\nReduce time spent in lubs by making depth more adaptive. It now takes into account separately the depth of the lub types and the maximal depth of theior base type sequences. It cuts depth more aggressively if it is the base types  instead of the types themselves that grow deep.\n\nThe old truncation behavior is retained under option -Xfull-lubs\n\nAnother change is that we now track depth more precisely, which should also help or at least allow better statistics.\n\nAlso added statistics that measure #lubs and time spent in them. (need statistics overhaul which will come in separate pull request. hand timings show that time spent in the single lub of the test file goes down from 10 to 1 sec. Still more room for improvement... '
682,'','The new reflection\n'
681,'','Avoids cyclic reference error in AddInterfaces.\nCompile Global or Typers twice in resident mode yielded a CyclicReference error, in phase erasure. The error was due to a cyclic call of the isDerivedValue method. Checking I noted that isDerivedValue is called very often, and mostly unneccessarily. I tightened the condition to not force the type of the class if it is a trait or package. This made the CyclicReference go away.\n\n2nd, corrected pull request widened criterion that enables validation of derived value classes. Previous version made two neg tests slip through.\n\nReview by @adriaanm'
680,'','Avoids cyclic reference error in AddInterfaces.\nCompile Global or Typers twice in resident mode yielded a CyclicReference error, in phase erasure. The error was due to a cyclic call of the isDerivedValue method. Checking, I noted that isDerivedValue is called very often, and mostly unneccessarily. I tightened the condition to not force the type of the class if it is a trait or package. This made the CyclicReference go away.\n\nReview by @dragos, @adriaanm'
679,'','Fix SI-5853.\nThis solves two issues.\n\nFirst, up to now the newly generated symbols for normalized\nmembers were not being added to the declaration list of the\nowner during `specialize`. Now they are.\n\nSecond, during `extmethods`, the extension methods generated\nget an additional curried parameter list for `$this`.\nTrouble was, after that, during `uncurry` and before `specialize`,\nthese curried parameter lists were merged into one list.\nSpecialization afterwards treats extension methods just\nlike normal methods and generates new symbols without the\ncurried parameter list.\nThe `extensionMethod` now takes this into account by checking\nif the first parameter of a potential extension method has\nthe name `$this`.\n\nReview by @dragos.\nReview by @odersky.'
678,'','counterpart in GenASM to 241c7606d0bf5f3209b9d549fb75\nThis is a straightforward *monkey see, monkey do* application to GenASM of a previous patch in GenJVM (holding the banner of code duplication). Believe me, it needs no review.'
677,'','Add the first iteration of the `util.hashing` package.\nMove `MurmurHash3` to `util.hashing`.\nMake the `class` private and retain a public companion\n`object`, and put the `MurmurHash3.Hashing` implementations\nfor various types in the companion.\n\nAdd a method which composes `ByteswapHashing` with some other hashing.\n\nRename `hashOf` to `hash`.\n\nFix chi-square test in a test-case.\n\nReview by @jsuereth.\n\nMoved a failing test that seems to use some other library version to pending - see comment there.'
676,'','Add the first iteration of the `util.hashing` package.\nMove `MurmurHash3` to `util.hashing`.\nMake the `class` private and retain a public companion\n`object`, and put the `MurmurHash3.Hashing` implementations\nfor various types in the companion.\n\nAdd a method which composes `ByteswapHashing` with some other hashing.\n\nRename `hashOf` to `hash`.\n\nFix chi-square test in a test-case.\n\nReview by @jsuereth.'
675,'','Add the first iteration of the `util.hashing` package.\nNext step is to move `MurmurHash3` to `util.hashing`,\nmake the `class` private and retain a public companion\n`object`, and put the `MurmurHash3.Hashing` implementations\nfor various types in the companion.\n\nReview by @jsuereth.'
674,'','Updates to primitive classes and classpath scripts.\n'
673,'','Fix SI-5880.\nAdd a ChiSquare test for the new hash code.\n\nReview by @retronym.'
672,'','Fixes SI-5857.\nOverride `min` and `max` in `Range` and `NumericRange`\nto check if a default `Ordering` for the numeric type\nin question is used.\nIf so, bypass traversal and compute the minimum or\nmaximum element.\n\nReview by @retronym.'
671,'','Fix SI-5867.\nOverride clone for unrolled buffer.\n\nReview by @jsuereth.\n'
670,'','Fix SI-5879.\nFix a bug where a key in an immutable hash map\nhave the corresponding value different in the iteration\nthan when doing lookup. This use to happen after calling\n`merge`.\n\nFix the order in which a key-value pair appears in\nthe collision resolution function - the first argument\nalways comes from the `this` hash map.\n\nDeprecate `merge` in favour of `merged`, as this is\na pure method.\nAs an added benefit, the syntax for invoking `merge`\nis now nicer.\n\nReview by @retronym.\nReview by @jsuereth.'
669,'','Fixes typos in scaladoc of Orderes.scala\nThe example code in this class could not be executed.\nReview by @vladureche'
668,'','Switching to the Akka-provided Unsafe detection\nFor SIP-14\n\nThis is to make sure that Scala works on Android and potentially more platforms.\n\nReview by: @axel22, @phaller, @heathermiller'
667,'','Add configuration for ExecutionContext\nThis adds configuration based on JVM system properties to ExecutionContexts. Patch submitted by @viktorklang \n\nReview by @axel22 and @heathermiller \n'
666,'','Fixes ticket SI-4935\nreview by @VladUreche\nreview by @paulp\n'
665,'','SI-5313 Revert to two traversals in substThisAndSym.\nPartially reverts 334872e.\n\nreview by @adriaanm or @paulp'
664,'','Revert "#653 -- no lub for statement exprs\' types"\nI should not have merged this pull request yet.\nI didn\'t notice we didn\'t have a full successful run of the test suite.\nIt looks like it breaks test/files/continuations-neg/lazy.scala and\ngiven the pending amount of changes, I prefer to have a stable master.\n\nThis reverts commit 037d3dcbc5896864aec0f9121eeda23fcc4cd610.'
663,'','scala-reflect.jar\nhttps://github.com/scala/scala/pull/662 with reflection bits moved into scala-reflect.jar'
662,'','The new reflection\nHighlights:\n* Architecture has undergone a dramatic rehash.\n* Universes and mirrors are now separate entities:\nuniverses host reflection artifacts (trees, symbols, types, etc),\nmirrors abstract loading of those artifacts (e.g. JavaMirror loads stuff\nusing a classloader and annotation unpickler, while GlobalMirror uses\ninternal compiler classreader to achieve the same goal).\n* No static reflection mirror is imposed on the user.\nOne is free to choose between lightweight mirrors and full-blown\nclassloader-based mirror (read below).\n* Public reflection API is split into scala.reflect.base and scala.reflect.api.\nThe former represents a minimalistic snapshot that is exactly enough to\nbuild reified trees and types. To build, but not to analyze - everything smart\n(for example, getting a type signature) is implemented in scala.reflect.api.\n* Both reflection domains have their own universe: scala.reflect.basis and\nscala.reflect.runtime.universe. The former is super lightweight and doesn\'t\ninvolve any classloaders, while the latter represents a stripped down compiler.\n* Classloader problems from 2.10.0-M3 are solved.\n* Exprs and type tags are now bound to a mirror upon creation.\n* However there is an easy way to migrate exprs and type tags between mirrors\nand even between universes.\n* This means that no classloader is imposed on the user of type tags and exprs.\nIf one doesn\'t like a classloader that\'s there (associated with tag\'s mirror),\none can create a custom mirror and migrate the tag or the expr to it.\n* There is a shortcut that works in most cases. Requesting a type tag from\na full-blown universe will create that tag in a mirror that corresponds to\nthe callsite classloader aka `getClass.getClassLoader`. This imposes no\nobligations on the programmer, since Type construction is lazy, so one\ncan always migrate a tag into a different mirror.\n\nMigration notes for 2.10.0-M3 users:\n* Incantations in Predef are gone, some of them have moved to scala.reflect.\n* Everything path-dependent requires implicit prefix (for example, to refer\nto a type tag, you need to explicitly specify the universe it belongs to,\ne.g. reflect.basis.TypeTag or reflect.runtime.universe.TypeTag).\n* Some of the functions have been renamed or moved around.\nThe rule of thumb is to look for anything non-trivial in scala.reflect.api.\nSome of tree build utils have been moved to Universe.build.\n* staticModule and staticClass have been moved from universes to mirrors\n* ClassTag.erasure => ClassTag.runtimeClass\n* For the sake of purity, type tags no longer have erasures.\nUse multiple context bounds (e.g. def foo[T: ru.TypeTag : ClassTag](...) = ...)\nif you\'re interested in having both erasures and types for type parameters.\n* reify now rolls back macro applications.\n* Runtime evaluation is now explicit, requires import scala.tools.reflect.Eval\nand scala-compiler.jar on the classpath.\n* Macro context now has separate universe and mirror fields.\n* Most of the useful stuff is declared in c.universe,\nso be sure to change your "import c.universe._" to "import c.mirror._".\n* Due to the changes in expressions and type tags, their regular factories\nare now really difficult to use. We acknowledge that macro users need to\nfrequently create exprs and tags, so we added old-style factories to context.\nBottom line: almost always prepend Expr(...)/TypeTag(...) with "c.".\n* Expr.eval has been renamed to Expr.splice.\n* Expr.value no longer splices (it can still be used to express cross-stage\npath-dependent types as specified in SIP-16).\n* c.reifyTree now has a mirror parameter that lets one customize the initial\nmirror the resulting Expr will be bound to. If you provide EmptyTree, then\nthe reifier will automatically pick a reasonable mirror (callsite classloader\nmirror for a full-blown universe and rootMirror for a basis universe).\nBottom line: this parameter should be EmptyTree in 99% of cases.\n* c.reifyErasure => c.reifyRuntimeClass.\n\nFuture work:\n* Today/tomorrow I will move scala.reflect.api, scala.reflect.internal,\nscala.reflect.runtime and scala.reflect.makro into scala-reflect.jar.\nThis is a new jar in Scala distribution and a new artifact in Maven.\n\nKnown issues:\n* API is really raw, need your feedback.\n* All reflection artifacts are now represented by abstract types.\nThis means that pattern matching against them will emit unchecked warnings.\nAdriaan is working on a patch that will fix that.\n* There is a noticeable performance degradation. We\'re working on fixing it.'
661,'','SI-5683 Fail gracefully when transposing a ragged type arg matrix.\nThe code used to do this, until `transpose` starting throwing IAE\nrather than AIOOBE.\n\nSymptomatic treatment only: The reported crasher now infers ill-kinded\ntype args and reports an error.\n\nreview by @adriaanm (who applied the band-aid that fell off 68aeeae)'
660,'','SI-5167 An impl class method should refer to its own parameter symbols.\nRather than those of the original method in the trait.\n\nIf they are shared, parameter renaming in the implementaion class\nis visible in the original method. This led to a crash in the resident\ncompiler when looking up the default argument getter.\n\nReview by @odersky\n\nDiscussion: https://groups.google.com/d/topic/scala-internals/sPjmxv-A2iE/discussion\n\nResubmission of #659 that accounts for erroneous trees, such as in the test `res/t687`.'
659,'','SI-5167 An impl class method should refer to its own parameter symbols.\nRather than those of the original method in the trait.\n\nIf they are shared, parameter renaming in the implementaion class\nis visible in the original method. This led to a crash in the resident\ncompiler when looking up the default argument getter.\n\nReview by @odersky\n\nDiscussion: https://groups.google.com/d/topic/scala-internals/sPjmxv-A2iE/discussion'
658,'','Fix for SI-5399.\nCloses t5399. Review by @adriaanm.'
657,'','Made parser less hostile to inspection.\nBy annotating all the boolean method arguments.'
656,'','The new reflection\nHighlights:\n* Architecture has undergone a dramatic rehash.\n* Universes and mirrors are now separate entities:\nuniverses host reflection artifacts (trees, symbols, types, etc),\nmirrors abstract loading of those artifacts (e.g. JavaMirror loads stuff\nusing a classloader and annotation unpickler, while GlobalMirror uses\ninternal compiler classreader to achieve the same goal).\n* No static reflection mirror is imposed on the user.\nOne is free to choose between lightweight mirrors and full-blown\nclassloader-based mirror (read below).\n* Public reflection API is split into scala.reflect.base and scala.reflect.api.\nThe former represents a minimalistic snapshot that is exactly enough to\nbuild reified trees and types. To build, but not to analyze - everything smart\n(for example, getting a type signature) is implemented in scala.reflect.api.\n* Both reflection domains have their own universe: scala.reflect.basis and\nscala.reflect.runtime.universe. The former is super lightweight and doesn\'t\ninvolve any classloaders, while the latter represents a stripped down compiler.\n* Classloader problems from 2.10.0-M3 are solved.\n* Exprs and type tags are now bound to a mirror upon creation.\n* However there is an easy way to migrate exprs and type tags between mirrors\nand even between universes.\n* This means that no classloader is imposed on the user of type tags and exprs.\nIf one doesn\'t like a classloader that\'s there (associated with tag\'s mirror),\none can create a custom mirror and migrate the tag or the expr to it.\n* There is a shortcut that works in most cases. Requesting a type tag from\na full-blown universe will create that tag in a mirror that corresponds to\nthe callsite classloader aka `getClass.getClassLoader`. This imposes no\nobligations on the programmer, since Type construction is lazy, so one\ncan always migrate a tag into a different mirror.\n\nMigration notes for 2.10.0-M3 users:\n* Incantations in Predef are gone, some of them have moved to scala.reflect.\n* Everything path-dependent requires implicit prefix (for example, to refer\nto a type tag, you need to explicitly specify the universe it belongs to,\ne.g. reflect.basis.TypeTag or reflect.runtime.universe.TypeTag).\n* Some of the functions have been renamed or moved around.\nThe rule of thumb is to look for anything non-trivial in scala.reflect.api.\nSome of tree build utils have been moved to Universe.build.\n* staticModule and staticClass have been moved from universes to mirrors\n* ClassTag.erasure => ClassTag.runtimeClass\n* For the sake of purity, type tags no longer have erasures.\nUse multiple context bounds (e.g. def foo[T: ru.TypeTag : ClassTag](...) = ...)\nif you\'re interested in having both erasures and types for type parameters.\n* reify now rolls back macro applications.\n* Runtime evaluation is now explicit, requires import scala.tools.reflect.Eval\nand scala-compiler.jar on the classpath.\n* Macro context now has separate universe and mirror fields.\n* Most of the useful stuff is declared in c.universe,\nso be sure to change your "import c.universe._" to "import c.mirror._".\n* Due to the changes in expressions and type tags, their regular factories\nare now really difficult to use. We acknowledge that macro users need to\nfrequently create exprs and tags, so we added old-style factories to context.\nBottom line: almost always prepend Expr(...)/TypeTag(...) with "c.".\n* Expr.eval has been renamed to Expr.splice.\n* Expr.value no longer splices (it can still be used to express cross-stage\npath-dependent types as specified in SIP-16).\n* c.reifyTree now has a mirror parameter that lets one customize the initial\nmirror the resulting Expr will be bound to. If you provide EmptyTree, then\nthe reifier will automatically pick a reasonable mirror (callsite classloader\nmirror for a full-blown universe and rootMirror for a basis universe).\nBottom line: this parameter should be EmptyTree in 99% of cases.\n* c.reifyErasure => c.reifyRuntimeClass.\n\nFuture work:\n* Today/tomorrow I will move scala.reflect.api, scala.reflect.internal,\nscala.reflect.runtime and scala.reflect.makro into scala-reflect.jar.\nThis is a new jar in Scala distribution and a new artifact in Maven.\n\nKnown issues:\n* API is really raw, need your feedback.\n* All reflection artifacts are now represented by abstract types.\nThis means that pattern matching against them will emit unchecked warnings.\nAdriaan is working on a patch that will fix that.\n* There is a noticeable performance degradation. We\'re working on fixing it.'
655,'','Implementing Hashing typeclass\nThe same pull request as the previous one (https://github.com/scala/scala/pull/652), to trigger the build bot again.\n\nreview by @jsuereth\nreview by @retronym'
654,'','GenASM-based fix for SI-4804. Fix of the same for GenJVM pending.\nreview by @dragos\nreview by @VladUreche\n'
653,'',"Don't compute least upper bounds for if-like expressions in statement positions ...\n...inside blocks.\n\nThis may save huge amount of time (Fixes SI-5862) for complicated lubs. I had to remove the a check in adapt for\nthe part that transforms `<expr>` into { `<expr>`; () } when the expected type is Unit. The reason is in the \ncode.\n\nAs a side effect, we get more warnings for pure expressions in statement positions (see the change in the test file).\n\nReview by @odersky, @adriaanm."
652,'','Add Hashing and Equality typeclasses.\nModify TrieMap to use hashing and equality.\n\nModify serialization in TrieMap appropriately.\n\nReview by @jsuereth @retronym'
651,'','Backport fix for SI-2196 to 2.9.x\nI think this fixes SI-2296, the inability to access java protected\nmembers from a trait which extends a java class. Counterexamples\nappreciated. Closes SI-2296. Review by @dragos.\n\ncherry-picked and adapted from f708b87e55.\n@dragos, please review the backport again.'
650,'',"Unreachability analysis for pattern matches\nAnalyze matches for unreachable cases.\n\nA case is unreachable if it implies its preceding cases.\nCall `C` the formula that is satisfiable if the considered case matches.\nCall `P` the formula that is satisfiable if the cases preceding it match.\nThe case is reachable if there is a model for `-P /\\ C`.\nThus, the case is unreachable if there is no model for `-(-P /\\ C)`,\nor, equivalently, `P \\/ -C`, or `C => P`.\n\nUnreachability needs a more precise model for type and value tests than exhaustivity.\nBefore, `{case _: Int => case 1 =>}` would be modeled as `X = Int \\/ X = 1.type`,\nand thus, the second case would be reachable if we can satisfy `X != Int /\\ X = 1.type`.\nOf course, the case isn't reachable, yet the formula is satisfiable, so we must augment\nour model to take into account that `X = 1.type => X = Int`.\n\nThis is done by `removeVarEq`, which models the following axioms about equality.\nIt does so to retain the meaning of equality after replacing `V = C` (variable = constant)\nby a literal (fresh symbol). For each variable:\n 1. a sealed type test must result in exactly one of its partitions being chosen\n    (the core of exhaustivity)\n 2. when a type test is true, tests of super types must also be true,\n    and unrelated type tests must be false\n\nFor example, `V : X ::= A | B | C`, and `A => B` (since `A extends B`).\nCoverage (1) is formulated as: `A \\/ B \\/ C`, and the implications of (2) are simply\n`V=A => V=B /\\ V=X`, `V=B => V=X`, `V=C => V=X`.\n\nExclusion for unrelated types typically results from matches such as `{case SomeConst =>\ncase OtherConst => }`. Here, `V=SomeConst.type => !V=OtherConst.type`. This is a\nconservative approximation. If these constants happen to be the same value dynamically\n(but the types don't tell us this), the last case is actually unreachable. Of course we\nmust err on the safe side.\n\nWe simplify the equality axioms as follows (in principle this could be done by the\nsolver, but it's easy to do before solving). If we've already excluded a pair of\nassignments of constants to a certain variable at some point, say `(-A \\/ -B)`, then\ndon't exclude the symmetric one `(-B \\/ -A)`. (Nor the positive implications `-B \\/ A`,\nor `-A \\/ B`, which would entail the equality axioms falsifying the whole formula.)\n\nTODO: We should also model dependencies between variables: if `V1` corresponds to\n`x: List[_]` and `V2` is `x.hd`, `V2` cannot be assigned at all when `V1 = null` or\n`V1 = Nil`. Right now this is implemented hackily by pruning counter-examples in exhaustivity.\nUnreachability would also benefit from a more faithful representation.\n\nI had to refactor some of the framework, but most of it is shared with exhaustivity. We\nmust allow approximating tree makers twice, sharing variables, but using different\napproximations for values not statically known. When considering reachability of a case,\nwe must assume, for example, that its unknown guard succeeds (otherwise it would wrongly\nbe considered unreachable), whereas unknown guards in the preceding cases must be\nconsidered to fail (otherwise we could never get to those case, and again, it would\nfalsely be considered unreachable).\n\nSince this analysis is relatively expensive, we give up when the CNF representation of the \nproposition that models reachability/exhaustivity would become too large. When compiling\nthe compiler itself, 11% of the matches are left behind. Furthermore, you may opt-out using\n`-Xno-patmat-analysis` (or by annotating the selector with @unchecked).\nWe hope to improve the performance in the near future.\n(An experimental Sat4J interface is in the works, but it turns out it's really the CNF\nexplosion that kills performance.) Finally, -Ystatistics has also been extended to\nprovide some numbers on time spent in the equality-rewrite, CNF generation, \nsolving and analyzing.\n\n"
649,'','allows printing .icode files after any optimiz phase\nMaking easier for bug reporters to tell us in which phase (they believe) the optimizer goes wrong.\n\nreview by @VladUreche\nreview by @dragos\n'
648,'',"More robust findScalaHome in bash scripts\nWhile looking for the latest solution for resolving script locations, for a start script for the incremental compiler, I saw SI-5792 and the problem with relative symlinks.\n\nThinking about this problem, multiple relative symlinks also wouldn't work with the current fix. For example:\n\n    relative/scala -> ../bin/scala\n    relative/again/scala -> ../scala\n\nHere's a more general solution for resolving symlinks, whether they're relative or absolute. It resolves by jumping through the directories on the way.\n\nReview by @paulp."
647,'',"unreachability\nAnalyze matches for unreachable cases.\n\nA case is unreachable if it implies its preceding cases.\nCall `C` the formula that is satisfiable if the considered case matches.\nCall `P` the formula that is satisfiable if the cases preceding it match.\nThe case is reachable if there is a model for `-P /\\ C`.\nThus, the case is unreachable if there is no model for `-(-P /\\ C)`,\nor, equivalently, `P \\/ -C`, or `C => P`.\n\nUnreachability needs a more precise model for type and value tests than exhaustivity.\nBefore, `{case _: Int => case 1 =>}` would be modeled as `X = Int \\/ X = 1.type`,\nand thus, the second case would be reachable if we can satisfy `X != Int /\\ X = 1.type`.\nOf course, the case isn't reachable, yet the formula is satisfiable, so we must augment\nour model to take into account that `X = 1.type => X = Int`.\n\nThis is done by `removeVarEq`, which models the following axioms about equality.\nIt does so to retain the meaning of equality after replacing `V = C` (variable = constant) by a literal (fresh symbol).\nFor each variable:\n 1. a sealed type test must result in exactly one of its partitions being chosen\n    (the core of exhaustivity)\n 2. when a type test is true, tests of super types must also be true, \n    and unrelated type tests must be false\n\nFor example, `V : X ::= A | B | C`, and `A => B` (since `A extends B`).\nCoverage (1) is formulated as: `A \\/ B \\/ C`, and the implications of (2) are simply\n`V=A => V=B /\\ V=X`, `V=B => V=X`, `V=C => V=X`.\n\nExclusion for unrelated types typically results from matches such as `{case SomeConst =>\ncase OtherConst => }`. Here, `V=SomeConst.type => !V=OtherConst.type`. This is a\nconservative approximation. If these constants happen to be the same value dynamically\n(but the types don't tell us this), the last case is actually unreachable. Of course we\nmust err on the safe side.\n\nWe simplify the equality axioms as follows (in principle this could be done by the\nsolver, but it's easy to do before solving). If we've already excluded a pair of\nassignments of constants to a certain variable at some point, say `(-A \\/ -B)`, then\ndon't exclude the symmetric one `(-B \\/ -A)`. (Nor the positive implications `-B \\/ A`,\nor `-A \\/ B`, which would entail the equality axioms falsifying the whole formula.)\n\nTODO: We should also model dependencies between variables: if `V1` corresponds to \n`x: List[_]` and `V2` is `x.hd`, `V2` cannot be assigned at all when `V1 = null` or \n`V1 = Nil`. Right now this is implemented hackily by pruning counter-examples in exhaustivity.\nUnreachability would also benefit from a more faithful representation.\n\nI had to refactor some of the framework, but most of it is shared with exhaustivity. We\nmust allow approximating tree makers twice, sharing variables, but using different\napproximations for values not statically known. When considering reachability of a case,\nwe must assume, for example, that its unknown guard succeeds (otherwise it would wrongly\nbe considered unreachable), whereas unknown guards in the preceding cases must be\nconsidered to fail (otherwise we could never get to those case, and again, it would\nfalsely be considered unreachable).\n\nSince this analysis is relatively expensive, you may opt-out using `-Xno-patmat-analysis`\n(or annotating the selector with @unchecked). We hope to improve the performance in the\nnear future. -Ystatistics has also been extended to provide some numbers on time spent in\nthe equality-rewrite, solving and analyzing.\n"
646,'','skipping unnecessary work in GenASM when emitting 1.5 classfiles\nreview by @dragos\nreview by @VladUreche'
645,'',"Partial redesign of incremental compiler invalidation.\nWe now do the right thing when packages are either newly created or deleted. Previously there was a problem when a new package was created inside a system package (and, unofrtunately, root is a system package). That's fixed now. We also approximate more tightly now when packages are newly created (iei the newly created symbol gets rescanned, instead of its owner).\n\nIncremental class invalidation: dealing with empty package.\n\nThe compiler can now also invalidate the empty package. Previously, no invalidation was done because empty was identified with root, which is considered a system package.\n\n(1) Fixed NPE when creating a new toplevel package in invalidation. (2) generalized interface to deal with multiple entries at a time.\n\nReview by @harrah, @pvlugter, @adriaanm"
644,'','new version of incremental compiler\nTake 2: Implemented functionality to invalidate classpath entries, to enable incremental compiles.'
643,'','Backport/fix interrupt req\n...e presentation compiler.(cherry picked from commit 0d70c22279daa78b3fe58b5ea1be7f87b7079834).\n\nReview by @hubertp.'
642,'','Backport for presentation compiler bug SI-5708\nCherry-picked from master. Review by @odersky, @hubertp.'
641,'',"Partial redesign of incremental compiler invalidation.\nWe now do the right thing when packages are either newly created or deleted. Previously there was a problem when a new package was created inside a system package (and, unfortunately, root is a system package). That's fixed now. We also approximate more tightly now when packages are newly created (ie. the newly created symbol gets rescanned, instead of its owner). \n\nReview by @harrah, @pvlugter, @adriaanm"
640,'','Implemented functionality to invalidate classpath entries\nThis should enable safe incremental compiles. Review by @harrah, or @pvlugter, or @paulp.'
639,'','Implemented functionality to invalidate classpath entries\nThis should enable safe incremental compiles. Review by @harrah, @pvlugter, @paulp.\n\n\n'
638,'','fix t5843\nreview by ?'
637,'','fix t5843\nreview by @paulp'
636,'','SI-5845 Advances the example from a crasher to an inference failure.\nThe inference failure itself seems like an instance of of SI-3346.\n\nBut dependent method types (which triggered the crash), can be employed\nto avoid inferring the type constructor CC.\n\n```\nclass Num[T] {\n  def mkOps = new Ops\n  class Ops { def +++(rhs: T) = () }\n}\n\nclass A {\n  implicit def infixOps[T](lhs: T)(implicit num: Num[T]): num.Ops = num.mkOps\n  implicit val n1: Num[Int] = new Num[Int] { }\n  5 +++ 5\n}\n```\n\nreview by @adriaanm'
635,'','fixes for exhaustivity\nuncovered by @dragos while building the eclipse plugin'
634,'','SI-4579 Yoke the power of lisp.scala as a stress for the optimizer.\nThe reported bug was fixed between 2.10.0-M1 and 2.10.0-M2.'
633,'',"Fix a NSDNHAO in extension methods.\nA bridge method, created when we override a method from\na superclass and refine the return type, was appearing\nas an overloaded alternative. (`erasure` doesn't create\nnew scopes, so the bridges it builds are visible at\nearlier phases.)\n\nThe problem was masked when compiling with specialization,\nwhich *does* create a new scope, shielding the code in\nquestion from the artefacts of erasure.\n\nTo fix the problem, we filter out bridge methods from\nthe overloaded alternatives returned by `.decl`, as would\nhappen internally in `.member`.\n\nResubmission of #632.\n\nreview by @odersky"
632,'','Fix a NSDNHAO in extension methods.\nIt is shown up by the overriding and compiling without specialization.\n\nReview by @paulp, @odersky\n\nDiscussion: https://groups.google.com/d/topic/scala-internals/8_sxnJhRfyA/discussion'
631,'odersky',"SI-5652 Mangle names of potentially public lambda lifted methods.\nThis can happen if they are accessed from an inner class. If a\nsubclass is happens to lift a public method to the same name,\na VerifyError ensues.\n\nThe enclosed tests:\n - demonstrate the absense of the VerifyError\n - show the names generated for the lifted methods (which are\n   unchanged if not called from an inner class, or if lifted\n   into a trait implementation class.)\n - ensure that the callers are rewritten to call the correct\n   method when multiple with the same name are lifted.\n\nIt's not ideal that this phase needs a priori knowledge of the\nlater phases to perform this mangling. A better fix would defer\nthis until the point when the methods are publicised, and leave\nthe unmangled private method in place and install an public,\nmangled forwarder.\n\nResubmission of #628; review by @paulp or @odersky."
630,'','Test case closes SI-5041.\n'
629,'','Test case closes SI-4911.\nThe unchecked warning departed sometime between 4afae5be...278a225.'
628,'',"SI-5652 Mangle names of potentially public lambda lifted methods.\nThis can happen if they are accessed from an inner class. If a\nsubclass is happens to lift a public method to the same name,\na VerifyError ensues.\n\nThe enclosed tests:\n - demonstrate the absense of the VerifyError\n - show the names generated for the lifted methods (which are\n   unchanged in the simple case)\n - ensure that the callers are rewritten to call the correct\n   method when multiple with the same name are lifted.\n\nIt's not ideal that this phase needs a priori knowledge of the\nlater phases to perform this mangling. A better fix would defer\nthis until the point when the methods are publicised, and leave\nthe unmangled private method in place and install an public,\nmangled forwarder.\n\nResubmission of #627, review by @paulp or @odersky."
627,'',"SI-5652 Mangle names of potentially public lambda lifted methods.\nThis can happen if they are accessed from an inner class. If a\nsubclass is happens to lift a public method to the same name,\na VerifyError ensues.\n\nThe enclosed tests:\n - demonstrate the absense of the VerifyError\n - show the names generated for the lifted methods (which are\n   unchanged in the simple case)\n - ensure that the callers are rewritten to call the correct\n   method when multiple with the same name are lifted.\n\nIt's not ideal that this phase needs a priori knowledge of the\nlater phases to perform this mangling. A better fix would defer\nthis until the point when the methods are publicised (where is that?),\nand leave the unmangled private method in place and install an public,\nmangled forwarder.\n\nreview by @paulp, @odersky. "
626,'','Test case closes SI-4818\nFixed between 2.10.0 M2 and M3, with both the old and new pattern matcher.'
625,'',"SI-5318 Make implicit divergence checking PolyType aware.\nReplaces the two active subclasses of `SymCollector` with\ndirect use of traversal methods of `Type`.\n\nWildcard free class type parameters, not just method type parameters,\nwhen stripping the core type of candidate implicits. The spec doesn't\nmake any such distinction, and the enclosed test, t5318c, crashes\nwithout this change."
624,'','Cleaning up some code introduced for the old presentation compiler long ...\n...time ago. Review by @dragos'
623,'',"don't error when not emitting required switch\nwe don't handle switches with guards, whereas the old patmat did\nto ease the transition, let's not error out and see how we can resolve this"
622,'','Removing non-deterministic actor migration tests.\nTesting these issues takes significant amounts of time so I am temporarely removing them from the master. The issue is not in the code but in the tests output order.'
621,'','Fixes SI-5085 and SI-4833.\nReview by @phaller.'
620,'','SI-5318 Make implicit divergence checking PolyType aware.\nReplaces the two active subclasses of `SymCollector`\nwith direct use of `Type#foreach` and `Type#typeSymbol`.\n\nResubmission of #589.'
619,'','Fixes SI-5805\nreview by @VladUreche\nreview by @dragos\n\nDiagnosis and explanation of fix at https://issues.scala-lang.org/browse/SI-5805 '
618,'','Fixes SI-5428.\nReview by @phaller.'
617,'','Move implicit ExecutionContext to be determined by lexical scope\nPort of a pull request originally submitted by @havocp.\n\n- declare the invariant that all app callbacks have an\n  associated ExecutionContext provided at the place\n  the callback is passed to a method on Future\n- always run callbacks in their associated EC\n- since all callbacks have their own EC, Promise\n  does not need one\n- "internal" callbacks don\'t need to defer execution either\n  since we know the ultimate app callback will do so,\n  therefore we can use an immediate executor for these\n\nReview by @axel22 @heathermiller '
616,'','Issue/5085\nReview by @phaller.'
615,'','Fixes SI-5441.\nReview by @extempore.'
614,'','Backport of the 2.10 continuations plugin to 2.9\n'
613,'',"Closes SI-5821.\nThis was an interesting one. Basically an erroneous\nimport was creating an erroneous symbol for Array (similary\nfor other symbols that were 'found' in this import) which was\nleading to all sorts of inconsistencies and spurious errors.\n\nThis wasn't a bug in ContextErrors but rather something that\nexisted for ages and was hidden from the general audience.\n\nReview by @paulp."
612,'','fix SI-5829: refinement typeref has a prefix\nreview by @xeno-by, please'
611,'','Fix to naming of file.\nThis should fix the nightly.\n\nReview by @vjovanov\n\n'
610,'','Added lock by default and did a minor amount of cleanup.  More to come h...\n...opefully.\n\n\nThis one gives a shout-out to @adriaanm who promised me cookies for this feature.'
609,'','Asm compiled once\n* Moved ASM sources to src/asm\n* New  ant task builds asm *ONCE*.  Build times improve by a few seconds\n* Fixed SBT build for new asm location.  SBT build still broken from actors-migration and partest\n\nReview by @magarciaEPFL\nTest in IDE by @dragos'
608,'','Fixing the build of actors migration kit\n\nReview by @jsuereth'
607,'','tests and misc improvements\n'
606,'','more tests for SI-3761\n'
605,'',"Add rate limiting to a keydown handler of a input element\nWe don't have to call textFilter on every events.\n\nYou can try it on http://8-p.info/tmp/scaladoc/library/index.html#package."
604,'','More info regarding SI-5044. Already discussed with @lrytz.\n'
603,'','Fixed issue where forkjoin analysis bombed with incompatible class chang...\n...e exception.\n\nNo review.'
602,'','Closes SI-5735. Review by @adriaanm.\n'
601,'','virtpatmat: treemaker approximation refactorings and exhaustivity\nWe check exhaustivity by representing a match as a formula in\nfinite-domain propositional logic (FDPL) that is false when\nthe match may fail. The variables in the formula represent\ntested trees in the match (type tests/value equality tests).\n\nThe approximation uses the same framework as the CSE analysis.\nA matrix of tree makers is turned into a DAG, where sharing\nrepresents the same value/type being tested.\n\nWe reduce FDPL to Boolean PL as follows.\nFor all assignments, V_i = c_i_j, we introduce a proposition\nP_i_j that is true iff V_i is equal to the constant c_i_j,\nfor a given i, and all j, P_i_j are mutually exclusive\n(a variable cannot have multiple values).\nIf the variable\'s domain is closed, we assert that one of P_i_j\nmust be true for each i and some j. The conjunction of these\npropositions constitutes the equality axioms.\n\nAfter going through negational normal form to conjunctive normal\nform, we use a small SAT solver (the DPLL algorithm) to find\na model under which the equational axioms hold but the match fails.\nThe formula: EqAxioms /\\ -MatchSucceeds.\nNote that match failure expresses nicely in CNF: the\nnegation of each case (which yields a disjunction) is anded.\n\nWe then turn this model into variable assignments\n(what\'s the variable (not) equal to, along with recursive\nassignments for its fields). Valid assignments (no ill-typed\nfield assignments) are then presented to the user as counter examples.\nA counter example is a value, a type test, a constructor call\nor a wildcard. We prune the example set and only report the\nmost general examples. (Finally, we sort the output to yield stable,\ni.e. testable, warning messages.)\n\nA match is only checked for exhaustivity when the type of the\nselector is "checkable" (has a sealed type or is a tuple\nwith at least one component of sealed type).\n\nWe consider statically known guard outcomes, but generally back\noff (don\'t check exhaustivity) when a match has guards\nor user-defined extractor calls. (Sometimes constant folding\nlets us statically decide a guard.)\nWe ignore possibly failing null checks (which are performed\nbefore calling extractors, for example), though this could\nbe done easily in the current framework. The problem is false\npositives. People don\'t usually put nulls in tuples or lists.\n\nTo improve the exhaustivity checks, we rewrite `List()` to Nil.\nTODO: more general rewrite of List(a, b, ..., z) to `a :: b :: ... :: z`.\nWhen presenting counter examples, we represent lists in the\nuser-friendly List(a,...,z) format. (Similarly for tuples.)\n\nThere are no exhaustivity checks for a match-defined PartialFunction.\n\nmisc notes:\n- fix pure case of dpll solver\n  impure set (symbol that occurs both as a positive and negative literal)\n  was always empty since I was looking for literals (which are not equal if positivity is not equal)\n  but should have been looking for symbols\n\n- FDPL -> BoolPL translation collects all syms in props\n  since propForEqualsTo generates an Or, must traverse the prop\n  rather than assuming only top-level Syms are relevant...\n\n  also, propForEqualsTo will not assume Or\'ing a whole domain is equivalent to True\n  (which it isn\'t, since the type test may fail in general)\n\n- improve counter example description\n  - treat as constructor call when we either have definite type information about a real class,\n    or we have no equality information at all, but the variable\'s type is a class\n    and we gathered constraints about its fields (typically when selector is a tuple)\n  - flatten a :: b :: ... :: Nil to List(a, b, ...)\n  - don\'t print tuple constructor names, so instead of "Tuple2(a, b)", say "(a, b)"\n\n- filter out more statically impossible subtypes\n  the static types convey more information than is actually checkable at run time\n  this is good, as it allows us to narrow down the subtypes of a sealed type,\n\n  however, when modeling the corresponding run-time checks we need to "erase" the\n  uncheckable parts (using existentials so that the types are still well-kinded),\n  so that we can use static subtyping as a sound model for dynamic type checks\n\n- experimental java enum handling seals enum class\n    before, we created a refinement class as the placeholder for the sealed children\n    it seems more direct to use the enum class for that\n    this way, the new pattern matcher\'s exhaustiveness checker just works for java enums'
600,'',"TreeMaker approximation refactorings and bug fixes\n- TypeTestTreeMaker subsumes the old TypeTestTM and TypeAndEqualityTM\n  its type- and equality-testing logic is configurable so that it can:\n    - generate trees (main purpose)\n    - check whether this tree maker is a pure type test\n    - generate the proposition that models this tree maker\n      (for exhaustivity and other analyses)\n\n- [CSE] subst binders of dropped tm's to stored ones\n  somehow the refactoring broke the replacement of the binder of dropped\n  treemakers by the binder of the reused treemaker\n\n  when replacing\n\n  TM1(x1 => ...) >> TM2(x2 => ...) >> TM3(x3 => ...) >>  ...\n  TM1'(x1' => ...) >> TM2'(x2' => ...) >> TM3(x3' => ...) >> ...\n\n  by\n\n  Memo1(x1 => ...) >> TM2(x2 => ...) >> Memo2(x3 => ...) >>  ...\n  Reuse(Memo2)...\n\n  you need to replace x1' and x2' by x1\n\n  since TM2 tested a shared condition but was not memo-ised,\n  that implies it simply passed x1 through to x3 unmodified,\n  and x2' can simply use the stored x1\n\n- type of first uniqued binder sets type of tree\n  when approximating a tree of treemakers as a DAG,\n  where sharing indicates the same value is tested,\n  use the type of the binder that was first used to\n  create a unique tree as the type of that tree,\n  and thus all trees used for the same binder in the future\n\n- track substitution of alternatives when approximating\n\n- error on unswitchable @switch annotated matches\n  if we can't turn a match (with more than two cases) into a switch,\n  but the user insists, emit an error\n\nmisc notes:\n- when all you need is nextBinder, FunTreeMaker is your guy\n- must pass flag to TypeTestTM for extractorarg test\n  case TypeTestTreeMaker(prevBinder, testedBinder, expectedTp, nextBinderTp)\n  (prevBinder eq testedBinder) does not imply it's a pure type test for an extractor call\n  note that the expected type for an extractor argument is not a type pattern,\n  thus we only do a classic type test -- the idea was to detect that case by noticing we're\n  being called with the same previous and tested binder, but that case also arises\n  for Typed patterns"
599,'',"SI-5779: Wrong warning message (comparing Number)\nProbably this bug won't exist in some future version of Scala.  \n\nIt's hardly a bug; more like a gnat.\n\nBoxesRuntime knows how to compare java.lang.Number, so we must not warn."
598,'',"SI-2405 Confer implicit privileges to renamed imports.\nYin and yang would be pleased: A fix in two parts.\n\n1. Use the name of the imported symbol, rather than the alias, in the generated `Select(qual, name)` tree.\n2. Do the opposite in `isQualifyingImplicit`, which performs one part of the shadowing check.\n\nBut there is still work to do. The second part of the shadowing check, `nonImplicitSynonymInScope`,\nfails to notice this case (irrespective of aliased imports).\n\n```scala\n  // Expecting shadowing #2. Alas, none is cast!\n  object Test1 {\n    object A { implicit val x: Int = 1 }\n    import A.x\n    def x: Int = 0\n    implicitly[Int]\n  }\n```\n\nI'm hitching the residual problem to [SI-4270](https://issues.scala-lang.org/browse/SI-4270?focusedCommentId=57823&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-57823)'s wagon."
597,'',"SI-2405 Confer implicit privileges to renamed imports.\nYin and yang would be pleased: A fix in two parts.\n\n1. Use the name of the imported symbol, rather than the alias, in the generated `Select(qual, name)` tree.\n2. Do the opposite in `isQualifyingImplicit`, which performs one part of the shadowing check.\n\nBut there is still work to do. The second part of the shadowing check, `nonImplicitSynonymInScope`,\nfails to notice this case (irrespective of aliased imports).\n\n```scala\n  // Expecting shadowing #2. Alas, none is cast!\n  object Test1 {\n    object A { implicit val x: Int = 1 }\n    import A.x\n    def x: Int = 0\n    implicitly[Int]\n  }\n```\n\nI'm hitching the residual problem to [SI-4270](https://issues.scala-lang.org/browse/SI-4270?focusedCommentId=57823&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-57823)'s wagon."
596,'','fix for SI-5672\nreview by @VladUreche'
595,'odersky','SI-3761: Overload resolution fails on by-name parameter\nMinimized. This version should help in review for correctness. No attempt is made to address holes in the spec or to correct indentation.\n\nWe saw Yellow Submarine over the weekend and I must have got carried away by the lyric, "There\'s nothing you can do that can\'t be done."\n\nWhen isAsSpecific checks if method m applies to args of types of\nformal params of m1, a by-name parameter was converted to its\nunderlying result type for the params (of m) but not the args (of m1).\nThis had the useful effect of making m(A) more specific than m(=>A),\nwhich is the specified prioritization for implicit views,\nbut also made m(=>A) and m(=>A, B*) ambiguous.  To handle this edge\ncase, the isCompatible test for A and =>A is made explicit, and\nby-name params are no longer converted.'
594,'odersky','Fixes SI-5603.\n'
593,'','SI-5760: Improve error message for package$Klass conflict with Klass\nAdded a clarification to DoubleDefError for when the previous symbol\nwas in the package object but current symbol is not.\n\nThis was actually supposed to be an opportunity to hack partest to\nrun the two-step failing compilation, but somebody beat me to it and my\nrebase failed.\n\nThe next hacking opportunity might be to add .pt script files!  The\npossibilities are endless.'
592,'',"Consider method-scoped companions in the implicit scope.\nFixes SI-4975.\n\nI'll reproduce a relevant snippet of dialogue from Namers#companionSymbolOf:\n\n```scala\n/** The companion class or companion module of `original`.\n   *  Calling .companionModule does not work for classes defined inside methods.\n   *\n   *  !!! Then why don't we fix companionModule? Does the presence of these\n   *  methods imply all the places in the compiler calling sym.companionModule are\n   *  bugs waiting to be reported? If not, why not? When exactly do we need to\n   *  call this method?\n   */\n  def companionSymbolOf(original: Symbol, ctx: Context): Symbol = {\n```\n\nThis was one such bug.\n\nHasn't been through a full build; delegating that to build-bot.\n\nReview by @adriaanm / @paulp\n  - performance ?"
591,'','Test case closes SI-3880.\nvirtpatmat ftw.'
590,'',"Pending test for SI-3899.\nThe super accessor for the Java varargs method impedes Uncurry's\nefforts to convert repeated arguments to an Array. I'm not sure how\nto fix that."
589,'',"Make implicit divergence checking PolyType aware.\nOnly a two-line patch, but probably needs a more experienced hand\nto rework it to ensure:\n  - it solves this problem completely\n  - it doesn't risk a cycle in SymCollector\n\nFixes SI-5318.\n\nReview, when time allows, by @adriaanm"
588,'','Don\'t hop to the first enclosing, non-silent context typing refinements\nCloses SI-5305.\n\nThis reverts a few lines of e5cfe47a19, which was a remedy for SI-3614 and SI-3856*. I added a test case for the former, the\nlatter was already tested. Both tests pass after this change, and they do so with the old and new pattern matcher.\n\nBut does this change still "avoid trees with null types in presentation compiler"? What was the intent of the context hopping in the first place?\n\n* Based on this comment: https://issues.scala-lang.org/browse/SI-3614?focusedCommentId=50477&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-50477, which elaborates further than the commit comment of e5cfe47a19.'
587,'','Fix @varargs forwarder generation in the presence of nested templates.\nMakes `newMembers` a Map[Symbol, Buffer[Tree]] to ensure we add the forwarders to the right template.\n\nCloses SI-5125.'
586,'','Fixes SI-5804.\nThe hash table initialSize method is now within\nthe the hashset and hashmap classes, and not in the companion.\nOverriding this method now yields hashmaps and hashsets\nof the proper initial capacity.\n\nReview by @phaller.'
585,'lrytz','SI-3761: Overload resolution fails on by-name parameter\nPreamble: passes ant test and ant nightly.  Build time is not slower. Tie-break by cbn is behind a -Yoption.\n\nFootnote: I tried retaining by-name during type inference, but that breaks a bound (in json.Parser, "null" ^^^ null becomes Parser[Nothing] instead of Parser[Null].  I don\'t see to the bottom there.  Continuing education.\n\nWhen isAsSpecific checks if method m applies to args of types of\nformal params of m1, a by-name parameter was converted to its\nunderlying result type for the params (of m) but not the args (of m1).\nThis had the useful effect of making m(A) more specific than m(=>A),\nbut also made m(=>A) and m(=>A, B*) ambiguous.  To handle this edge\ncase, the isCompatible test for A and =>A is made explicit, and\nby-name params are no longer converted.\n\nAn option -Yresolve-by-name is provided for the purpose of\nfavoring m(=>A) over m(A) when applied to (=>A).  This only happens\nfor "pass-by-name", when f(x: =>A) invokes g(x).  Because overload\nresolution does not normally consider the call site, this optional\nbehavior is not specified. (An analogous case under discussion,\nwhich is more specified: f(x: A) and f(y: B, C*) where B <: A,\nfor f(b) chooses the fixed-arity method, even though f(B) is more\nspecific than f(A); that is, the number of actual arguments is not\nan input to overload resolution.)\n\nThe mechanism for resolve-by-name is to convert cbn params to the\nunderlying type, which results in ties between m(A) and m(=>A),\nand then pick the method which exactly matches the call site with\nrespect to by-namedness.\n\nThe specified workaround for selecting overloaded f(=>A) is to\nput the definition in an interface (where it is not overloaded).'
584,'',"Address/workaround issue SI-3452 and related problems\nThe content is discussed in the bug tracker: https://issues.scala-lang.org/browse/SI-3452?focusedCommentId=57712#comment-57712\n\nThis pull request should therefore be reviewed by Paul Phillips. To express this, based on \nhttps://issues.scala-lang.org/browse/SI-4461?focusedCommentId=57692#comment-57692, I'm adding the following tags (sorry for the noise if it's not the correct way, I did not find relevant docs).\n\nreview by @extempore\nreview by @paulp"
583,'','Fix to Scaladoc keyboard shortcuts for Firefox\nTrivial patch should fix bug in Firefox. \n\nPreview URL, working in Firefox, Chrome, and Safari: http://lampwww.epfl.ch/~hmiller/scaladoc/library\n\nAnyone with IE, please now test the above URL and let me know if you have any issues.'
582,'',"Actually fixes SI-5055. Also adds keyboard shortcuts to Scaladoc- makes browsing fun again.\nMakes Scaladoc a zillion times less annoying to use-- no more uncontrollable anchoring to the top of the page (though it still anchors, now it's anchors more seldomly). Makes copying/pasting, page up/down, etc are once again possible in Scaladoc.\n\n### New keyboard shortcuts:\n- **Browse Scaladoc with arrow keys.** Search for something in the left side bar, hit the **down arrow**. Use the up/down arrow keys to move to packages/objects/classes/traits, and hit *Enter* to load the corresponding page in the right panel.\n- **Toggle between panes with tab key** Hitting the tab key will toggle between the text filter in the left pane, and the text filter in the right pane. \n- **Up arrow key overrides auto-focus in right pane** When the right pane's text filter is selected (and the input panel annoyingly sticks to the top of the page), pressing the **up arrow** will automatically scroll to the top. Nice when you want to read the API comments.\n- **Escape resets filters** (oldie but goodie).\n\nPreview here: http://lampwww.epfl.ch/~hmiller/scaladoc/library/\n\nRegarding review; since I'm responsible for the front-end of Scaladoc, I'm not sure who would review this."
581,'','Fix 4812\nRemove default arguments from parameter ValDefs in UnCurry.'
580,'','Fix 4812\nRemove default arguments from parameter ValDefs in UnCurry.'
579,'','Fix SI-4812\nbuild https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/21/'
578,'','better feedback for SI-5044\n'
577,'','Fix SI-2488\nbuild https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/22/'
576,'',"Issue/4717\nFixes SI-4717.\nA lazy val declared inside an anonymous class inside a specialized\ncontext no longer crashes Duplicators.\n\nPreviously, a duplicated lazy val was assigned to the wrong owner\nin Duplicators:\n\n    class Foo[@specialized(Boolean) A] {\n      def x[B >: A]: Unit = new Bounds[B] {\n        lazy val it = ???  // def or val okay\n      }\n    }\n\nAbove, the `it` in `$anon` in `x$mcZ$sp` had its owner set to `x$mcZ$sp`\ninstead of `$anon`. This crashed the typer when it had to retype its\nlazy accessor, because there was no `lazy var it` in `$anon`.\nFurthermore, the duplicated symbol wasn't being added to the list of\ndeclarations of `$anon`.\n\nChanges:\n1) `invalidate` in Duplicators takes an additional parameter which is\nthe new owner of the new symbol that has to be duplicated. If this parameter\nis set to `NoSymbol`, then the new owner is `context.owner`, as before.\n2) the newly created lazy val symbol is being added to the list of\ndeclarations of its new owner, provided that the owner is a class.\n\nReview by dragos.\n@mention dragos\nreview by @dragos"
575,'','Adding the Actor Migration Kit.\nKit consists of:\n    1) The StashingActor which adopts an interface similar to Akka.\n    2) Props mockup for creating Akka like code\n    3) Pattern mockup\n    4) Test cases for every step in the migration.\n    5) MigrationSystem which will paired on the Akka side.\n\n  Review of the code : @phaller\n  Review of the build: @jsuereth (scala-actors-migration.jar is the new jar containing the migration code)'
574,'','Fixes SI-4461.\nNo review.'
573,'','SIP-14: Hide private and stray members in futures API\n- hide object `concurrent.impl.Promise`\n- move `isFutureThrowable` to `concurrent.Future` trait\n- remove `concurrent.ConcurrentPackageObject`\n- remove `concurrent.handledFutureException` member\n- hide `concurrent.currentExecutionContext`\n- organize imports in `impl.Promise`\n- remove stray implicit conversion to create instances of `Duration`\n- move `concurrent.Await` object to its own file\n\nReview by @heathermiller '
572,'','Fix SI-5544\nType-check annotations in a context with a localDummy owner\n\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/19/'
571,'','Fix 4138\n'
570,'',"Issue/4717\nFixes SI-4717.\nA lazy val declared inside an anonymous class inside a specialized\ncontext no longer crashes Duplicators.\n\nPreviously, a duplicated lazy val was assigned to the wrong owner\nin Duplicators:\n\n    class Foo[@specialized(Boolean) A] {\n      def x[B >: A]: Unit = new Bounds[B] {\n        lazy val it = ???  // def or val okay\n      }\n    }\n\nAbove, the `it` in `$anon` in `x$mcZ$sp` had its owner set to `x$mcZ$sp`\ninstead of `$anon`. This crashed the typer when it had to retype its\nlazy accessor, because there was no `lazy var it` in `$anon`.\nFurthermore, the duplicated symbol wasn't being added to the list of\ndeclarations of `$anon`.\n\nChanges:\n1) `invalidate` in Duplicators takes an additional parameter which is\nthe new owner of the new symbol that has to be duplicated. If this parameter\nis set to `NoSymbol`, then the new owner is `context.owner`, as before.\n2) the newly created lazy val symbol is being added to the list of\ndeclarations of its new owner, provided that the owner is a class.\n\nReview by dragos.\n@mention dragos\nreview by @dragos"
569,'','SIP-14: clean ups and fixes by @viktorklang\nReview by @heathermiller and @axel22 '
568,'','Fixes SI-5801, error messages regression. Review by @adriaanm\n'
567,'','Test case for SI-3844 - fixed by #virtpatmat @adriaanm\n'
566,'','Fix SI-4928\nbetter error message when a parameter is first defined positionally, then with a named argument.\n\nbuild https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/15/'
565,'','better feedback for SI-5044\nbuild https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/16/'
564,'','fixes resetAttrs\n'
563,'','Added infrastructure to enable easy enrichment of GenTraversables.\nUpdated pull request.'
562,'',"A band-aid solution for SI-5803.\nSince ae5ff662, resetAttrs duplicates trees, which doesn't preserve ApplyConstructor.\nMy attempt to modify TreeCopier to do so proved trickier than expected.\n\nIn any case, ApplyConstructor is not long for this world, and is only used in tree printing\nto distinguish `new X` from regular Apply trees, so this should suffice pending full surgery."
561,'','An IntelliJ module for test files.\nThis enables resolve, autocompletion and the usual goodness\nwhen editing tests.\n\nAlso removes the sample configuration for the defunct dbc module.'
560,'','Fixes SI-5623 on SyncVar and deprecates set & unset. Review by @phaller.\nSecond go after an incomplete commit. All should pass.\n* adds `take` variant with timeout\n* necessarily deprecates `set` and `unset` methods on `SyncVar`'
559,'','Fixes SI-5623 on SyncVar and deprecates set & unset. Review by @phaller.\n* adds `take` variant with timeout\n* necessarily deprecates `set` and `unset` methods on `SyncVar`'
558,'','Fix SI-5259\nCalling the type checker on an Ident tree instead of using gen.mkAttributedRef assigns a SingleType to the tree.\n\nbuild: https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/13/'
557,'','Fix for SI-5610\nbuild: https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/14/'
556,'','Fixes SI-5788\nSome adjustments to how LabelDef duplication is handled in specialization.'
555,'','mutable.MapLike: override $mapNote to reflect actual require mutable api\nThe api needed to define a mutable.Map is different then the one\nneeded to define an immutable.Map. Prior to this patch the mutable one\nreflected the api needed for the immutable one causing confusion about\nwhat really needed to be defined.'
554,'','Enumeration#maxId: fix documentation to reflect reality\nmaxId is not really the "maximum id", but rather one past the max:\n\nscala> object Foo extends Enumeration {\n     |   val x = Value\n     |   val y = Value\n     | }\ndefined module Foo\n\nscala> Foo.maxId\nres0: Int = 2\n\nscala> Foo(2)\njava.util.NoSuchElementException: key not found: 2\n\tat scala.collection.MapLike$class.default(MapLike.scala:225)\n        ...\n\nscala> Foo(1)\nres2: Foo.Value = y'
553,'','Small documentation fixes & small fix to Scaladoc @see formatting\n* updates some old links to point to doc site\n* massaging of doc comments on `Try` so as to make them actually appear (on method `flatten`)\n* fixes formatting of "See also" Scaladoc tag for multi-line "See also"s'
552,'','Small documentation fixes & small fix to Scaladoc @see formatting\n* updates some some old links to point to doc site\n* massaging of doc comments on `Try` so as to make them actually appear (on method `flatten`)\n* fixes formatting of "See also" Scaladoc tag for multi-line "See also"s'
551,'','Better fix for SI-5676. Review by @paulp\n'
550,'','Closes SI-5796.\n'
549,'','fix SI-5384\nmake TreeInfo recognize constructor calls after named arguments transformation.\n\nbuild https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/10/'
548,'','suspend type vars in SubTypePair\'s equals\nSubTypePair\'s equals method calls =:= on the involved types,\nwhich mutates the TypeVars contained in them\nthis is undesirable since we\'re simply checking whether a subtype test is pending\n\nin addition to making subtyping "more correct" for type vars,\nit should avoid the stackoverflow that\'s been plaguing us\n(https://groups.google.com/d/topic/scala-internals/2gHzNjtB4xA/discussion)\n\nSubTypePair\'s equals method method is only called when subtype checking\nhits a recursion threshold (subsametypeRecursions >= LogPendingSubTypesThreshold)\n\n----\nhttps://raw.github.com/gist/2235522/1b198fadd1.buildlog certifies ant test-opt was run on 1b198fadd1'
547,'',"Specialize lazy vals (closes SI-5552)\nPreviously, specialized lazy vals would not work at all when used in\nspecialized classes, and would just return an uninitialized value.\nAfter this patch, they work in the same way as other specialized fields\ndo (i.e. a new specialized field is created, and the specialized class\nuses that instead of the base class' field).\n\nNote that there are still known problems with specialized lazy vals\n(for instance SI-4717) but it seemed to me that this was better than\nnothing."
546,'','Test case closes SI-5137.\nvirtpatmat strikes again.'
545,'','Changed AnyVal generation so that feature warnings are avoided and a mes...\n...sage\n\nhow to do template changes is included in the files.'
544,'',"Address doc comment rot in the standard library.\n- Match @param/@tparam names to the actual parameter name\n- Use @tparam for type parameters\n- Whitespace is required between `*` and `@`\n- Fix incorrect references to @define macros.\n- Use of monospace `` and {{{}}} (much more needed)\n- Remove `@param p1 ...` stubs, which appear in the generated docss.\n  - But, retainsed `@param p1` stubs, assuming they will be filtered from\n    the generated docs by SI-5795.\n- Avoid use of the shorthand `@param   doc for the solitary param`\n  (which works, but isn't recognized by the code inspection in IntelliJ\n  I used to sweep through the problems)\n\nThe remaining warnings from `ant docs` are spurious; \nan unintended consequence of documenting extension methods.\n\n  [scaladoc] /Users/jason/code/scala/src/library/scala/collection/TraversableOnce.scala:181: warning: Variable coll undefined in comment for method reduceOption in class Tuple2Zipped\n  [scaladoc]   def reduceOption[A1 >: A](op: (A1, A1) => A1): Option[A1] = reduceLeftOption(op)\n  [scaladoc]       ^"
543,'','Test for SI-5394.\n'
542,'',"Confirm extractor based pattern matches don't explode exponentially.\nCloses SI-1133, thanks virtpatmat."
541,'','NSDNHAO need not tell us in which version it resides.\nThis is done for all crashers now. Furthermore, that error report\nmakes it pretty clear that it\'s a compiler bug, not user error, so\n"this is a bug" seem like needless words.\n\nResisted the nostalgic temptation to remove the "an".'
540,'','A REPL pattern matching crasher that crashes no more.\nNot due to virtpatmat, mind you; it passes with -Xoldpatmat.\n\nCloses SI-4025.'
539,'',"Another bug bites virtpatmat's dust.\nTest case closes SI-5029.\n\nIn 2.9, one saw:\n\n```scala\ntest/files/pos/t5029.scala:2: error: unreachable code\n        (Vector(): Seq[_]) match { case List() => true; case Nil => false }\n                                                                    ^\n\n[[syntax trees at end of explicitouter]]// Scala source: t5029.scala\npackage <empty> {\n  final object Test extends java.lang.Object with ScalaObject {\n    def this(): object Test = {\n      Test.super.this();\n      ()\n    };\n    {\n      <synthetic> val temp1: Seq[_$1] = (scala.`package`.Vector().apply[Nothing](immutable.this.Nil): Seq[Any]);\n      if (temp1.isInstanceOf[List[A]]().&&(temp1.asInstanceOf[List[A]]().isInstanceOf[object Nil]()))\n        {\n          true\n        }\n      else\n        throw new MatchError(temp1)\n    }\n  }\n}\n```"
538,'','Fix SI-5009: case-class copy method now eta-expands over higher paramete...\n...r lists.\n\nExample: Given\n\n  case class C(a: Int)(b: Int)\n\nif you call (new C(1)(2)).copy(a = 10)), you get a function (f: Int => C) such\nthat (f.apply(20)) yields a (new C(10)(20)).\n\nbuild passes: https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/6/'
537,'',"Fix SI-5626.\nBy not replacing 'CaseClass.apply()' factor by 'new CaseClass()' when the class type 'CaseClass' is not accessible."
536,'','cherry-picking important macro fixes from topic/reflection\n'
535,'','Test case closes SI-5407\nIt still breaks as described in the ticket under -Xoldpatmat.'
534,'','Test case closes SI-4124.\nThis looks like a job for... virtpatmat!'
533,'','fixes a problem with an extractor object overloaded by a regular def\n'
532,'','Fix for unnecessary InnerClasses for top-level objects.\nMirror classes (with static forwarders) for top-level\r\nobjects would get unnecessary InnerClasses entries\r\nin some cases. See the following comment I introduced\r\nto the place I fixed:\r\n\r\nWe need to make sure that we do not confuse inner classes\r\nof the class  we mirror with inner classes of the class\r\nwe are mirroring. These two sets can be different as\r\nseen in this case:\r\n\r\n```scala\r\n class A {\r\n  class B\r\n  def b: B = new B\r\n }\r\n object C extends A\r\n```\r\n\r\nHere mirror class of C has a static forwarder for\r\n(inherited) method `b` therefore it refers to class `B`\r\nand needs InnerClasses entry. However, the real class\r\nfor `C` (named `C$`) is empty and does not refer to `B`\r\nthus does not need InnerClasses entry it.\r\n\r\nNOTE: This logic has been refactored in GenASM and\r\neverything is implemented in a much cleaner way by\r\nhaving two separate buffers.'
531,'','Move resolver and resolveEither to impl.Promise (SIP-14)\n'
530,'',"bridge to unapply[Seq] even smarter/prudent\ntake boolean unapply's into account, and, for good measure,\r\ncheck we're not dealing with an unapply outlaw (i.e., boolean nor option result)"
529,'','Fix for SI-5654.\nMore details as code comment and in the bug database.\r\n\r\nBuild passed https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/1/'
528,'','Test case closes SI-2435.\n'
527,'',"Forbid forward refs from self constructor invocations.\nPrevents the wheels falling off during later compiler phases,\r\nor, worse, during bytecode verification.\r\n\r\nCloses SI-4098.\r\n\r\nIt's passing `partest --all`. Please review the specificity of the pattern \r\nmatch: I'm assuming that:\r\n\r\n   `case Apply(Select(This(_), nme.CONSTRUCTOR), args)` \r\n\r\ncan only match a self constructor invocation."
526,'','Fixed SI-5708. Correctly compute accessibility for object members in the presentation compiler.\n'
525,'','Closes SI-5676. Review by @paulp\n'
524,'','SBT Build Fixes\nAt least now we can use SBT 0.11.3 to compile.  \r\n\r\nStill have to fix whatever partest reflection issues popped up.'
523,'','Restoring sanity to range positions build\n'
522,'',"Execute pending interrupt requests on pres. compiler shutdown\nDon't forget to execute pending interrupt requests when shutting down the presentation compiler."
521,'','Fixes SI-5640\nFixes the problem in ## computation in scala.runtime.BoxesRunTime.java.\r\nIt reverts part of the changes made in 58bb2d1bd2 (not the changes in the\r\ntest).'
520,'','removes redundant hash implementation from BoxesRunTime.java\nI have moved the comment which was in BoxesRunTime.java over to ScalaRunTime.scala. \r\nThere was one test which tested the implementation of the hash-methods in BoxesRunTime\r\ndirectly. I have changd that test so that it tests the hash methods provided in ScalaRunTime.\r\n'
519,'','imporved comment related to SI-5178\nsee 9f9932bd20'
518,'','Fixes SI-5328.  Iterator.patched failed when from=0.\nIt turns out iterator.patched forgot to drop replacement values if they were at the beginning.\r\nThis is because the index was advancing before checking to see if replaced elements should be\r\ndropped.   Moved this behavior to the beginning of next.'
517,'',"Fixes SI-5201. Adds flatten to TraversableViewLike.\nNote: This commit exposes a pretty rich type on flatten in views.  HOWEVER, because we don't\r\ncapture the higher kinded type of the underlying collection, it makes returning a more minimal type\r\npretty dang hard.  I can imagine a very breaking and painful change of capturing the underling\r\ncollection as a higher-kinded type as well as the current view type in a *ViewLike.scala.\r\n\r\nI hope this kind of issue, along with others, drives a rethink of our view API design."
516,'',"fix SI-1247: don't create a thunk for a by-name argument if the argument expression is a Function0 application itself\nOk, another try, had not expected those few lines to have changed in the last 5 days."
515,'','Added tests for SI-4190.\nTurns out SI-4190 was already fixed, this test just proves it.'
514,'',"fix SI-1247: don't create a thunk for a by-name argument if the argument expression is a Function0 application\nIn my quest to come up with a fix for SI-302 this is a by-product which seems useful independently of SI-302."
513,'','Issue/5564\nCatching typer errors in specialization.\r\n\r\nReview by plociniczak.'
512,'','Fixed positions in named default applications (no hyperlinking in conjunction with implicit arguments).\nAlso, removed even more code in the presentation compiler testing infrastructure. One less level of indirection, and a top-level object gone!\r\n\r\nIncludes a fix by Martin for `TypeTree.original` position handling.'
511,'','Test case for SI-5378\n'
510,'','Fixed typo discovered during code review.\n'
509,'','Fixes SI-5508. Review by @adriaanm\n'
508,'','New JVM backend to emit classfiles in format 1.6 and beyond\n\r\nAdditional documentation at The Scala Compiler Corner:\r\n  http://lamp.epfl.ch/~magarcia/ScalaCompilerCornerReloaded/2012Q2/GenASM.pdf\r\n\r\nMiguel'
507,'','Changes scala.math.signum to return negative zeros\n'
506,'','Lazy Vals Saga. 2nd edition.\nPerformance roughly stays the same or even better.\r\nSpeedup for quick.lib: 6%\r\nSpeedup for quick.comp: 2%'
505,'','Add test for t5564 in pending/pos\n'
504,'','Fixes SI-5344.\n'
503,'','Test case that closes SI-5542.\n All the credit goes to @adriaanm who moved patmat to its own phase.'
502,'','test for SI-4560\n'
501,'','test for SI-5534\n'
500,'','test for SI-4728\n'
499,'','test for SI-5503\n'
498,'','test for SI-5585\n'
497,'','test for SI-5521\n'
496,'','test for SI-5654\n'
495,'','test for SI-5610\n'
494,'','tests for SI-5726\n'
493,'','test for SI-5722\n'
492,'','GenASM\n'
491,'','Fixes SI-5629.\nAdds an additional argument to the unify method in\r\nspecialization - `tparams`. When this parameter is set\r\nto `true`, unification is done over type parameters in\r\npoly types as well.\r\n\r\nAdditionally, the unification in specialization now\r\nworks over type bounds.\r\n\r\nThis ensures that in the below example:\r\n\r\n    trait Foo[@specialized(Int) A] {\r\n      def bar[B <: A](b: B) {}\r\n    }\r\n\r\n    class IntFoo extends Foo[Int] {\r\n      override def bar[B <: Int](b: B) {}\r\n    }\r\n\r\nthe method `bar` gets correctly determined\r\nas a method that needs a special override\r\nfor its `bar$mcI$sp`.'
490,'','minor tag-related fixes\n'
489,'','Fixes SI-5199 through improved API docs\n'
488,'','Add test for t5579 in pending/pos\n'
487,'','Test case for SI-2066\n'
486,'','Add test files for t5639 in pending/pos\n'
485,'','Add test for t5695 in pending/run\n'
484,'','Add test for t5708 in pending/presentation\n'
483,'','Test case for SI-1557\n'
482,'','Add missing methods to GenTraversableLike.\n'
481,'','Add test file in pending/pos\n'
480,'',"Test case closes SI-4568.\nWhat's the opposite of regression? Progression!"
479,'',"Test that primitive arrays aren't accepted as a Java generic array.\nThey exercise both joint and separate compilation.\r\n\r\nThis resolves SI-750 (which was somewhat unfairly merged with another ticket).\r\n\r\nThe error message itself could do with refinement: in particular instance of the much beloved: found X, required X."
478,'',"Don't admit primitive arrays as a generic Java varargs param.\nThey were sneaking through as polymorphic Arrays and avoiding boxing.\r\n\r\nCloses SI-4216"
477,'','Test case closes SI-1785.\nFixed, presumably, in 008a781f4.'
476,'','Fixes SI-5514.\nThe acceptIf and acceptMatch parsers now check for end of input.\r\n\r\nReview by moors.'
475,'','Fixes si-5656.\n'
474,'','Fix for si-5577.\n'
473,'','Fix for si-5590.\n'
472,'','run patmat after typer, but not *right* after\nsbt needs that spot right after type for its phase xsbt-api\r\n\r\nhttps://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/65/console'
471,'','Fix for si-5018.\nMethods keySet, values and withDefault now return serializable collections.'
470,'','Fix SI-4976 partially\nIf a package have a package object, generate the package\'s "linearization"\r\nfrom the object.'
469,'','SI-5703: normalize refined types more\nto improve Array[T] java-interop with T[],\r\nnormalize Object with Object{} to Object\r\n\r\nsimilarly, fix #SI-5688 by flattening refined types in parents\r\n\r\nupdated check files to reflect flattening of refined types and updated position for refined types'
468,'',"SI-5720: Qual block doesn't update sym owner\nA one-line change to blockWithQualifier. The symptom is\r\nundefined tmp var symbols in the backend; lamba lift thinks\r\nthe tmp var is free and adds it to anonfun ctors."
467,'',"SIP-14 fixes\nClean ups and fixes from @viktorklang 's pull request #15 against `phaller/scala`. Review by @phaller."
466,'',"Fixes the backticks in use case signature crash\nSuggested by Simon in\r\nhttps://groups.google.com/forum/?hl=en&fromgroups#!topic/scala-internals/z7s1CCRCz74\r\n\r\nNow it eliminates backticks and gracefully bails out with an error\r\nmessage when it can't remove the wiki syntax."
465,'','Fixes SI-4478.\n- Replaced/simplified usages of "wrt".\r\n- Added backticks to $Coll definitions, so stuff like "immutable.Stack"\r\n  hopefully stops being interpreted as the end of a sentence and shown\r\n  like that in the summary line of ScalaDoc\'s method description.\r\n  See collection.immutable.Stack\'s sortBy.\r\n  Additionally, it looks nicer this way.\r\n- Fixes the typo mentioned in SI-5666.'
464,'','No one define sh_highlightDocument\nThis line was added on 2621ee63285808785159a3c24c9e5a5a723b8b9c but\r\nno one define sh_highlightDocument and syntax highlighting is done\r\non Scala-side.'
463,'','[SIP-17] Changes scaladoc of trait Dynamic\nThis change updates the documentation of trait Dynamic according to SIP-17 (and according to the implementation of dynamics in the compiler).\r\n\r\n@adriaanm Review\r\n'
462,'','Add a link to "z" in Scaladoc\nWe have index/index-z.html but there is no link in HTML.\r\n\r\n// Sorry, it\'s my bug (00da8a8f07b9ba21ee93a007dbf7c2961c355fd6).'
461,'','fix SI-5682\n'
460,'','Feature/tests pending\nPending tests for various tickets.'
459,'','move pattern match expansion to its own phase\nthis should fix existing issues with the presentation compiler, scaladoc, rangepos, reify,...\r\nthe only tricky thing was, you guessed it, cps\r\n\r\n"it\'s time for you to move out of typers, patmat"\r\n\r\nhttps://raw.github.com/gist/2235522/9df576db2d.buildlog'
458,'',"SI-5729: TypeVar experimentals iff -Xexperimental\nit used to also be enabled by -Yvirtpatmat, which is now on by default,\r\nbut this type hackery is no longer necessary to bootstrap under the new pattern matching scheme,\r\nso let's only turn it on when people are feeling -Xexperimental"
457,'','fixes typo in documentation of @cpsParam\n'
456,'',"Upgrade jQuery from 1.4.2 to 1.7.2\njQuery 1.4.2 uses event.layerX and event.layerY but these are\r\ndeprecated and WebKit logs a lot of warnings.\r\n\r\nAdditionally jquery.layout 1.3.0 RC 29.3 doesn't work correctly\r\nwith jQuery 1.7.2, then we have to upgrade it to 1.3.0 RC 30.5.\r\n\r\nhttp://bugs.jquery.com/ticket/10531"
455,'',"SIP-14 fixes\nClean ups and fixes from @viktorklang 's pull request #15 against `phaller/scala`. Review by @phaller."
454,'','Feature/future compat\nMostly tests for the scala.concurrent package, and a couple of bugfixes.'
453,'','Presentation Compiler tests for visibility of members.\nRemoved some unneeded indirection in the testing framework.'
452,'','Fixed `Setting.enabling` to properly disable dependent settings when the...\n... original setting is set to `false`.\r\n\r\nThis can be witnessed in the IDE, when explicitly setting the `-optimize` flag to false leads to setting all the dependent flags to true (`-Yinline`, `-Ydce`, `-Ycloselim`).'
451,'','Presentation Compiler tests for visibility of members.\nRemoved some unneeded indirection in the testing framework.'
450,'','Added infrastructure to enable easy enrichment of GenTraversables.\nAs discussed on [scala-internals](https://groups.google.com/d/topic/scala-internals/XRbObRJvOkU/discussion). Sample usage [here](https://gist.github.com/2500326). Motivating blog post [here](http://yz.mit.edu/wp/true-scala-complexity/).\r\n\r\nBuilds successfully and passes all tests.'
449,'','Removes @bridge methods.\nSee https://groups.google.com/forum/#!topic/scala-internals/kHNbXKoUj28\r\n\r\nWould be nice if someone could check if the now empty traits/classes are required anymore.'
448,'','Topic/quickfix\n'
447,'','fixes SI-5713\n'
446,'','essential information about macro expansion\n'
445,'',"SI-3755: catch exception thrown by adaptToNewrun\nsomeone who knows adaptToNewRun (@lrytz ?), please review\r\nI just added a try/catch to mimic what the other cases were doing\r\n\r\nit would be nice to have a test for this, but you'd need to involve the repl,\r\nas I couldn't trigger it using multiple scalac runs"
444,'','SI-5702 Pattern parser halts on star\nIn patterns, the parser halts when it sees stars.\r\nThis means it does not handle infix notation for a case class\r\nnamed "*".  This patch uses lookahead to decide whether to parse\r\n\'_\' \'*\' as a sequence pattern or as the start of infix.\r\n(For both normal and error cases, the tokens are always consumed\r\nimmediately.) Error messages are improved for _* (as a help to learners)\r\nand slightly improved recovery helps the parse continue.\r\nThe entry point for XML patterns is now distinct; otherwise,\r\nthe change is local to pattern3-simplepattern; the entry point\r\nfor simplepattern() is unchanged because it is commented\r\n"hook for IDE."'
443,'',"fix SI-5690 and clean up typedMatchAnonFun a bit\nyes, I know, uncurry still has all this duplicated code, that's up next\r\n"
442,'','cleaning up macros, one step at a time\n'
441,'','diagnostics for SI-5692\n'
440,'','fixes SI-5693\n'
439,'','removes Expr <-> Tree implicits\n'
438,'',"more virtpatmat fixes for the IDE\nthis is the best I can do to get M3 in shape for the IDE\r\nby RC1, there'll be a phase dedicated to translating matches and there will be no more flag-testing\r\n\r\nalso, double checked that all the commits have boarded the pull request before take-off"
437,'','Presentation Compiler test for hyperlinking inside patterns\nThis test ensures hyperlinking works inside and around pattern matching. The new virtual pattern matcher\r\nsynthesizes trees that are not properly nested, and whose positions make it impossible to retrieve the correct\r\ntree/symbol for a given position. Therefore, the current test is using the old pattern matcher. However,\r\nonce the virtual pattern matcher is fixed, remove the corresponding line from patmat.flags to re-enable virtpatmat.'
436,'','fixes SI-5706\n'
435,'','fixes SI-5707\n'
434,'','updated check file\nforgot to push before sending the pull request\r\n'
433,'','fixes SI-5704\n'
432,'','virtpatmat-related fixes to get the IDE to build\n'
431,'','Fix miscellaneous bug on documentation comments\n'
430,'','adds isStatic to Symbols API in macro context\n@paulp I think this is the place we should dump the contents of AbsSymbolInternal to'
429,'',"Fixes to OSGi version number based on IDE team's suggestions.\nneeds to be backported to 2.9.x - Note to self"
428,'','rolls back manifests\n'
427,'','poor dummy, what have they done to you\n'
426,'','restores manifests to their pre-2.10 state (rebased)\n'
425,'','Fix for SI-5471\n'
424,'','minor fixes to reification\n'
423,'','restores manifests to their pre-2.10 state\n'
422,'','Fix a documentation comment of Product(n)#productElement\nThis commit fixes SI-5168.\r\n\r\nHowever I think we should remove it from genprod because Product trait is a good place to write.'
421,'',"Scaladoc's tests should work with test/partest\nAfter @VladUreche's work, we can use test/partest with Scaladoc easily.\r\n\r\nThis commit will fix https://issues.scala-lang.org/browse/SI-5083.\r\n"
420,'','fixes SI-5689\n'
419,'','scala.reflect.api: Reporters => FrontEnds\n'
418,'','a deprecated method that I forgot to restore\n'
417,'','fixes SI-5680\n'
416,'','minor fix to macro tracing\n'
415,'','Closes SI-5677, Tiny typo in API comments of GenTraversableLike\nFixes a few misspellings of the word "cumulative".'
414,'','suppresses warnings introduced in a2115b2352\nlocker.lib:\r\n    [javac] Compiling 1 source file to C:\\Projects\\Kepler\\build\\locker\\classes\\library\r\n    [javac] C:\\Projects\\Kepler\\src\\library\\scala\\concurrent\\impl\\Unsafe.java:17: warning: sun.misc.Unsafe is Sun proprietary API and may be removed in a future release\r\n    [javac]     public final static sun.misc.Unsafe instance;\r\n    [javac]                                 ^\r\n    [javac] C:\\Projects\\Kepler\\src\\library\\scala\\concurrent\\impl\\Unsafe.java:20: warning: sun.misc.Unsafe is Sun proprietary API and may be removed in a future release\r\n    [javac]             sun.misc.Unsafe found = null;\r\n    [javac]                     ^\r\n    [javac] C:\\Projects\\Kepler\\src\\library\\scala\\concurrent\\impl\\Unsafe.java:21: warning: sun.misc.Unsafe is Sun proprietary API and may be removed in a future release\r\n    [javac]             for(Field field : sun.misc.Unsafe.class.getDeclaredFields()) {\r\n    [javac]                                       ^\r\n    [javac] C:\\Projects\\Kepler\\src\\library\\scala\\concurrent\\impl\\Unsafe.java:22: warning: sun.misc.Unsafe is Sun proprietary API and may be removed in a future release\r\n    [javac]               if (field.getType() == sun.misc.Unsafe.class) {\r\n    [javac]                                              ^\r\n    [javac] C:\\Projects\\Kepler\\src\\library\\scala\\concurrent\\impl\\Unsafe.java:24: warning: sun.misc.Unsafe is Sun proprietary API and may be removed in a future release\r\n    [javac]                 found = (sun.misc.Unsafe) field.get(null);\r\n    [javac]                                  ^\r\n    [javac] 5 warnings\r\n[propertyfile] Updating property file: C:\\Projects\\Kepler\\build\\locker\\classes\\library\\library.properties\r\n[stopwatch] [locker.lib.timer: 0.908 sec]'
413,'','All recent macro-related pull requests, merged together\n'
412,'','typo in doc\nSmall typo in a part that compare Either mechanism to Option one. It suppose it might be disturbing.'
411,'','adds a dummy mirror\n'
410,'','big fat error message, reloaded\n'
409,'','adds erasures to concrete type tags\n'
408,'',"Based on Adriaan's pull request 402\nhttps://github.com/scala/scala/pull/402\r\n\r\nNow it passes the stability check by disabling the code that changes the access rights in the inliner. We'll need a better mechanism for making fields public. See https://groups.google.com/forum/?hl=en&fromgroups#!topic/scala-internals/yGmOkBn9Gmk for more details."
407,'',"SIP-14 - Updates to scala.concurrent\n- Adds newest ForkJoinPool (jar already pushed to typesafe.artifactoryonline.com) \r\n- Includes @viktorklang 's updates (`NonFatal` extractor, optimizations of `DefaultPromise`)\r\n- Conforms to SIP-18 (adds necessary language imports)\r\n\r\nNote: this should be pulled in before the milestone, as the jar on artifactoryonline has already been updated."
406,'','big fat error message for default mirror failures\n'
405,'','removes obsolete macro tests\n'
404,'','implements reification of tough types\n'
403,'','change Application to App in scaladoc sample code\n'
402,'',"synthesize partialfun during typer\nsince the uncurry-approach to partialfun synth is way too brittle,\r\nwent back to synth during typer -- need to special-case CPS\r\n(can't type def applyOrElse in that case, luckily def apply works)\r\n\r\nhacky improvements to anf's virtpatmat-labeldef support\r\n\r\nonly generate switches of more than two cases (conveniently works around SI-5672)"
401,'','Made checkFeature conditionally run immediately. Adapted Macros to make ...\n...use of it.'
400,'','work around optimizer bug SI-5672\nthe optimizer generates wrong bytecode for switches in arguments\r\nvirtpatmat happily emits a switch for a one-case switch, whereas -Xoldpatmat did not\r\nthis is not the focus of this test, hence the temporary workaround'
399,'','workaround for inliner bug in run/t3835\n@vladureche is going to look at the underlying issue: https://issues.scala-lang.org/browse/SI-5672'
398,'',"Typesafe config 0.4.0\nDO NOT PULL immediately, because 0.4.0 has not synced to Maven Central yet (something is wrong with our sync).  Can check https://issues.sonatype.org/browse/OSSRH-3250 for status.\r\n\r\nI wanted to go ahead and get this pull request in the queue so people would be aware of it, but it is blocking on the maven central sync.\r\n\r\nI haven't tested this patch fully since the sync isn't done, but it looks simple enough, right? :-P\r\n\r\nThe release is available at https://oss.sonatype.org/content/repositories/releases/com/typesafe/config/ just not on central yet.\r\n"
397,'',"Repairing the nightly breakage\n - fixed the problem that caused docs.scalap to fail, breaking the nightly AGAIN\r\n - adapted scaladoc implicits tests for SIP18 and re-enabled them\r\n - fixed a problem with implicit members shadowing (suggested by Lukas)\r\n\r\nPlease don't merge until the testsuite is done:\r\nhttps://scala-webapps.epfl.ch/jenkins/view/scaladoc/job/scaladoc-implicits-nightly/34/console\r\n\r\n@lrytz Lukas, can you please check that docs.scalap and co are also run on checkin builds? The problem that broke the nightly seems to have slipped past the checkin builds -- and I imagine the checkin builds should do the same thing nightly does, right?"
396,'','restores some disabled macro tests, makes checkFeature synchronous when used for macros\n'
395,'',"Topic/sip18\nHere's the implementation of SIP 18, and a number of other improvements: Better printing of wildcard types. macro and then are deprecated. new scheme to enable macros."
394,'',"Topic/sip18\nHere's the implementation of SIP 18, together with changes how macros are enabled (no more -Xmacros), and deprecation of `then` and `macro` identifiers. There are also some improvements how types with wildcard args are printed: we can now print Tuple2[_, String], where before we needed an explicit existential."
393,'',"implemented DynamicProxy as portrayed by the Scala reflection team\nthis requires Adriaan's applyDynamic pull request, so please merge together or this one after applyDynamic"
392,'','SI-5663: Tweak warnings on case class equals\nRe-enable testing the sensibility of comparing instances\r\nof two case classes.  In particular, warn if we detect that\r\nthe two objects inherit from different case classes.  In\r\naddition, avoid emitting misleading warnings when comparing "new C".\r\n\r\nI\'ve put some thought into the test cases, but Paul will want to\r\nreview style and efficiency of the expressions in checkSensible.\r\n'
391,'','virtpatmat: cps edition\ntests are running at https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/19\r\n'
390,'','string interpolation: virtpatmat support\ntest suite run at https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/13'
389,'','implement SIP Dynamic\n\r\n\r\ntest run at: https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/12'
388,'','Improved formatting/display of documentation.\nMade the primary constructors private to prevent them from appearing in ScalaDoc.'
387,'','Adds test and check files for SI-5666. Covers common non-newable types.\n'
386,'','Scaladoc implicit conversions\nSee https://github.com/VladUreche/scala/tree/feature/doc-implicits for the history.\r\nSee https://scala-webapps.epfl.ch/jenkins/view/scaladoc/job/scaladoc-implicits-nightly/ for nightlies.\r\n\r\nMany thanks fly out to Adriaan for his help with implicit search!\r\n\r\nTHIS PASSES THE TESTSUITE: https://scala-webapps.epfl.ch/jenkins/view/scaladoc/job/scaladoc-implicits-nightly/30/consoleFull'
385,'','performance counter for macros expansions\n'
384,'','Fixes https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-rangpos/404\nWe have so many starr rebuilds flying around right now, that this guy will eventually reach starr without my help.'
383,'','Wip sip14 fixes\nFixes and tweaks for SIP-14. Added managed blockers, removed some duplicate methods, refactored a few methods, fixed fork join worker thread detection in the default execution context implementation, added some docs.'
382,'','Fixes https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-rangpos/404\n'
381,'','SI-5510: string interpolation: parser no longer hangs on unclosed string\nThis commit fixes bug 5510. After the invocation of either fetchToken or\r\nfetchStringPart it is checked now whether an ERROR token was read. \r\nIf so, added markers are popped from sepRegions.\r\n\r\nMoreover, an infinite loop occurring in the REPL was fixed. Could happen\r\nas the SU=\\u001A character is considered to be isUnicodeIdentifierPart \r\nby class Character.\r\n\r\nA neg-test has also been defined.\r\n\r\nHave taken away the -Xexperimental flag for string interpolation as \r\nSIP 11 has been accepted.\r\n'
380,'','Cache consistency checks for starr binary repo.\n* invalid jar files in cache are now corrected\r\n* downloading an invalid jar file causes the script to exit with an error\r\n* Ant will still continue in the event of one of these errors.'
379,'','fixes petty macro tests\n'
378,'','fixes petty macro tests\n'
377,'','New starr that knows about implicit classes. \nThis starr is needed do that stdlib can use them.'
376,'','Moving Duration DSL to a separate package.\nReverting to Java 6 time units.\r\n\r\nReview by: @phaller'
375,'',"Next generation of macros (updated, two commits)\n@odersky After updating my original SIP-16 pull request as discussed: http://groups.google.com/group/scala-internals/msg/abf3b2518a9af4ad, I've noticed that you submitted the implementation of SIP-13 last night.\r\n\r\nMy updated pull request has its history rewritten, so if you've already done some merging with it, you work might be screwed up. To mitigate that, I'm submitting this morning's update as a separate commit.\r\n\r\nBottom line: you have two SIP-16 pull requests to choose from (this one and the original one: https://github.com/scala/scala/pull/372). Pick one that you like best. If you don't care, use the original."
374,'','Fixes and clean ups for futures based on review by @viktorklang\n'
373,'','Topic/sip13\nImplementation for implicit classes. The next pull request will make this into a starr.'
372,'','Next generation of macros (updated, one commit)\nImplements SIP 16: Self-cleaning macros: http://bit.ly/wjjXTZ\r\n\r\nFeatures:\r\n* Macro defs\r\n* Reification\r\n* Type tags\r\n* Manifests aliased to type tags\r\n* Extended reflection API\r\n* Several hundred tests\r\n\r\nNot yet implemented:\r\n* Reification of refined types\r\n* Expr.value splicing\r\n* Named and default macro expansions\r\n* Intricacies of interaction between macros and implicits\r\n* Emission of debug information for macros (compliant with JSR-45)\r\n\r\nDedicated to Yuri Alekseyevich Gagarin'
371,'','util.Random.alphanumeric method moves to util.Random class\nI want to use util.Random.alphanumeric method to generate a password.\r\n\r\n```scala\r\nutil.Random.alphanumeric.take(8).mkString\r\n```\r\n\r\nhowever, this is not secure.\r\n\r\nso, I tried making alphanumeric possible to be called from java.security.SecureRandom.\r\n\r\n```scala\r\nimport util.Random._\r\nnew java.security.SecureRandom().alphanumeric.take(8).mkString\r\n```'
370,'','Changes scaladoc text in trait Dynamic\nThis commit changes the text in trait dynamic which explains, how methods\r\ninvocations, which are not natively supported, are rewritten.\r\n\r\nIn the current implementation they are rewritten to `x.applyDynamic("meth")(args)`.\r\n'
369,'','fix for get-scala-commit-* on Windows (tested with Windows 7)\n'
368,'',"Wip review sip14 √\nTHIS IS NOT CODE, THIS IS COMMENTS, SHOULDN'T BE MERGED, ONLY COMMENTED (for SIP-14)"
367,'','Fix memory leak related to default arguments in presentation compiler.\nThis bug exists for a long time, but was triggered / discovered only lately\r\nby the default argument of mkParams in 118aef558f.\r\n\r\nThis reverts the workaroud commit 19b6ad5ee4.\r\n\r\nThe fix is tested by test/files/presentation/memory-leaks which runs the\r\npresentation compiler several times on Typers.scala. I could not reproduce\r\nthe memory leak in a smaller test case.\r\n\r\nBuild: https://scala-webapps.epfl.ch/jenkins/job/scala-checkin-manual/9/console'
366,'','SI-5571: adds @volatile to field Enumeration.vsetDefined\nIn order to guarantee visibility of changes on field vset the field vsetDefined has to\r\nbe marked as volatile.\r\n'
365,'',"fix field init problem in NoStackTrace\nfailure observed on my machine, but did not repro during jenkins builds\r\ndon't know why, but this commit fixes the failure on my machine and should not adversely impact performance"
364,'','Bumped the number of samples of the memory leaks test to 50.\nThis should make it much more resilient against spikes. Also removed usedmem file dumps.'
363,'','SI-4540 Fix [RichDouble|RichFloat|RichLong].isValid[Byte|Short|Char|Int]...\n....\r\n\r\nThis commit fixes test cases mentioned in comment 03/Apr/12 to SI-4540.\r\nMethods are fixed in leaf classes RichDouble|RichFloat|RichLong.\r\nTheir superclasses are not modified.\r\n\r\nFile "is-valid-num.scala" contains commented tests of\r\nisValidLong|isValidFloat|isValidLong,\r\nbut they are not added anywhere now.'
362,'','Remove redundant BoxesRunTime.eqTypeCode(Number)\nSmall simplification of commit 87c9fc0df0f0e74d3a07f95634356d6425877091 .\r\nIts name was "Giving HotSpot a better chance at BoxesRunTime".\r\nThat commit added method eqTypeCode(Number), but it is equivalent to typeCode(Number).\r\nCHAR code is impossible in eqTypeCode(Number),\r\nbecause java.lang.Character is not subclass of java.lang.Number.'
361,'','make PresentationCompilerThread a daemon\nMark the PresentationCompilerThread as a daemon thread, as discussed in https://groups.google.com/forum/?fromgroups#!topic/scala-internals/n3D3n4ErtUo\r\n'
360,'','Issues/5632\n(as per email, backport of a tiny patch in case of new RC)'
359,'',"SI-4134: abstract override crasher if lacking super impl\nThis commit just changes the assert on a bad abstract super.m\r\nto a compiler error.  Probably it's the not that simple, right?\r\nIn this case, review is easy; but if it weren't, should I ask\r\non scala-internals or on the jira ticket?  By way of not\r\nwasting people's time?  I was just looking for small bugs as\r\nan excuse to look at code.\r\n\r\nThe example from the ticket is committed as a neg test.\r\nThe problem is that a super.m on an abstract override\r\nmember m has no concrete implementation, that is, the\r\ntrait T is not mixed in after a class C with a concrete m.\r\n\r\nThe error is noticed at phase mixin when the super accessor\r\nis added to the concrete mixer. (Pun alert?) When super.m\r\nis rebound, no concrete matching symbol is found up the\r\nlinearization.\r\n\r\nPreviously, it was asserted that such a symbol should\r\nbe found, but since this is our first opportunity to\r\ndetect that there is none, an error should be emitted\r\ninstead. The new message is of the form:\r\n\r\nMember method f of mixin trait T2 is missing a concrete super implementation.\r\n\r\nAdditionally, a couple of flag tests were changed to use isAbstractOverride."
358,'','Adding overloading resolution to reflection\nThis is an as yet provisional attempt to add overloading resolution to reflection. It should be combined with the refactoring that Paul undergoes. Paul, you can either merge this into master, or directly into your branch with the updated representations of reflect.api.Symbol. '
357,'','Iterator.++ memory leak \n\r\nWhen Iterator.++() concatenates an iterator with the result of a call-by-name function argument, the resulting compound iterator holds the \'self\' reference to the original iterator indefinitely.  Chaining many iterators together then causes every individual iterator to remain in memory even after all of its elements have been consumed.\r\n\r\nThis can be unpleasant if you are using this functionality to construct a compound iterator over individual functions that, for example, materialize data from disk.\r\n\r\nThis contrived snippet causes a heap OutOfMemoryError for me, but is fixed by modifying Iterator to use a boolean flag instead of an "eq self" check in order to determine whether the elements of the original iterator have already been exhausted.\r\n\r\n```scala\r\nobject IteratorOOM {\r\n    def main(args: Array[String]) {\r\n\r\n      var ctr = 0\r\n      iterExample.foreach{junkStringList =>\r\n        ctr += 1\r\n        if(ctr == 100) {\r\n          System.exit(0)\r\n        }\r\n        println("ctr = %d".format(ctr))}\r\n    }\r\n\r\n  def iterExample(): Iterator[List[String]] = {\r\n    val myList =\r\n      List.fill(2)(List.fill(1000000)("abcdefghijklmnopqrstuvwxyz"))\r\n    myList.iterator ++ iterExample\r\n  }\r\n}\r\n```\r\n\r\nThe patched version passes scala tests and handles "x ++ x", although it still suffers from the infinite recursion described in SI-3759.  Is there some other tricky corner case that requires doing the "eq self" instead of using a boolean flag?'
356,'','Fixed broken links in sources of scala/annotation\nThe links \r\nhttp://java.sun.com/docs/books/jvms/second_edition/html/Instructions2.doc14.html\r\nhttp://java.sun.com/docs/books/jvms/second_edition/html/Instructions2.doc8.html#lookupswitch\r\nin the scaladoc section of switch.scala are no longer valid. \r\n\r\nI replaced all those links in package scala.annotation by links on the docs.oracle.com site.\r\n\r\n'
355,'','fix checkinit build\n'
354,'','Add some ExecutionContext factories.\n'
353,'','Add tests for future combinators\nAdds tests for map, flatMap, filter, collect, foreach, recoverWith, zip, fallbackTo.'
352,'',"More fixes for ScalaNumericConversions.isValidXXX (related to SI-4540)\n...to SI-4540).\r\n\r\nNow there are 7 isValidXXX methods (for each primitive type).\r\n2 of them are abstract (isValidLong and isValidDouble). Other have default imolementation.\r\nHowever, BigInt, BigDecimal and all RichXXXX classes overrides them all for performance.\r\nThe full set of functions allows simplification of ScalaNumericConversions.unifiedPrimitiveEqual.\r\n\r\nThere are still doubts:\r\n1) This change hurts users that have implemented subclasses of ScalaNumberConversions.\r\n   They will have to implement isValidLong and isValidDouble.\r\n2) The specification of isValidDouble and isValidFloat on NaN arguments.\r\n   Now they return false, because NaN is a signal of invalid computations.\r\n   This may cause problems, though I don't see them now."
351,'','Added presentation memory leak test.\nThis test runs the presentation compiler 10 times over `Typers.scala` and records memory consumption. It uses a linear model to estimate memory consumption (a straight line that minimizes the distance between each point and the line). If the slope is above 1 (MB/typer run) the test fails.\r\n\r\nThere is some potential for flakiness, though a very similar test exists in the IDE nightlies for months now, and it never failed spuriously, while it did catch two memory leaks. I am willing to maintain and change or remove it if it turns out to be too unstable.'
350,'','avoid memory leak by avoiding default arg\nwe should fix this properly of course, but for now, this avoids leaking 11MB/run in test/files/presentation/memory-leaks (thanks to @dragos for providing the test and to git bisect for narrowing it down)'
349,'','Remedies Try/Either signature disparity for source compat. w/ Akka\n'
348,'','Feature/collection concurrent\nThe Java collection conversions merge conflict resolution.'
347,'','SI-5627 BigInt.equals(Number) and BigDecimal.equals(Number) \nThis is an attempt to fix the bug\r\nSI-5627 BigInt.equals(Number) and BigDecimal.equals(Number) should implement equality in mathematical sense.\r\n\r\nMethods "isValidDouble" and "isValidFloat" are added to to "BigInt" and "BigDecimal" classes.\r\n"BigInt" methods are implemented with attention to performance.\r\n"BigDecimal" methods are implemented stupidly.\r\n\r\nI tried to fix methods "BigInt.hashCode" and "BigDecimal.hashCode" too, but found a bug SI-5640.\r\nSo I removed "hashCode" fixes from this commit, until some discussions.'
346,'','Feature/import jars from maven\n* Ability to resolve dependency JARs from maven central\r\n* maven dependencies added to distribution in lib/ directory\r\n* Dependencies have to also be specified in pom files for now.  Will be better in sbt build.'
345,'',"(1 line) Fixes SI-5632 (deserialization of large HashTables)\nConverts HashTable threshold to long before multiplying by a large value.\r\n\r\nTest is very slow and requires giving partest more RAM. Rather than committing it, I'm attaching it as a gist. Whoever does the merge is more than welcome to commit it along with this patch…\r\n\r\nTest: https://gist.github.com/2257703\r\n\r\nIssue: https://issues.scala-lang.org/browse/SI-5632"
344,'','remove unnecessary classpath entry\n'
343,'','Add implicit source locations as discussed in SIP-19\n'
342,'','a newer, faster, more functional, partial function\ncontributed by Pavel Pavlov, refactored by me\r\ncould really use a review, though\r\n\r\nlibrary patch (which should be a drop-in replacement for the old partial fun),\r\nold pattern matcher and new pattern matcher synthesis of AbstractPartialFunction subclasses\r\n\r\nTODO: subclass AbstractTotalFunction when match is known to be exhaustive\r\n\r\n\r\nhttps://raw.github.com/gist/2235522/1890a4175d.buildlog certifies ant test.done was run on 1890a4175d'
341,'','Adds links to parallel collections overview in API docs\nNow that there\'s an extensive parallel collections overview on http://docs.scala-lang.org, API comments should link to it ("see also" field). This commit also fixes a couple of broken links on some sequential collection types.'
340,'','Feature/future compat\nThese changes go towards making scala.concurrent source compatible with akka Futures.'
339,'','SIP-11 String Interpolation Simplification\nChanged StringContext.f which implements the formatted string interpolator.\r\n\r\nAny \'%\' not in formatting position is left in the resulting string literally. \r\nHowever, instead of adding \'%s\' format holders and extending the args with \r\n"%" expressions, these \'%\' are replaced by \'%%\'. The formatter then converts\r\n\'%%\' (percent formatter) to the literal % (\\u0025). This also simplifies the\r\nspec.\r\n\r\nThe interpolation tests still pass.\r\n\r\nI am a git newbie -- therefore this pull request also contains the bugfix SI5614\r\nwhich I pulled some hours ago. \r\n\r\n'
338,'','Add JavaConversions and JavaConverters concurrent.Map support.\nThis required deprecating several old methods for converting ConcurrentMap.\r\nAlso, several new wrappers were introduced for concurrent.Map. Once we\r\nremove ConcurrentMap in 2.11, we can remove its corresponding wrappers and\r\nconversions in JavaConversions and JavaConverters.'
337,'','String interpolation bug fix\nThis change fixes a bug in class StringContext.scala.\r\nParts were not correctly added to the resulting string.\r\n\r\nThis commit includes a test case which covers the\r\nexample reported in the bug.\r\n\r\nCloses SI-5614.'
336,'','Rename ConcurrentTrieMap to concurrent.TrieMap.\nIntroduced the collection.concurrent package and introduced the\r\nconcurrent.Map trait there. Deprecated the mutable.ConcurrentMap trait.\r\n\r\nPending work - introduce the appropriate changes to JavaConversions\r\nand JavaConverters.'
335,'','[SI-4658] Make NumericRange# O(1) instead of O(n).\nIt makes me a bit nervous that NumericRange[Int] will\r\nget different wrong values in overflow situations compared\r\nto Range due to the missing toLong though.\r\n\r\nIt could probably need some investigation if reordering the\r\noperations can rule out wrong values, e. g. only fail when\r\nthe fold also fails.\r\n\r\nApart from that, it might make sense to just throw an exception\r\nif an overflow happens instead of silent overflow.'
334,'','Remove sbaz and references from master repository.\n * Removed references to SBAZ in documentation (not in examples yet, those are to clean up shortly)\r\n\r\nReview by @ValdUreche or maybe @lrytz.  Basically, someone who might know a bit about the build and can give me a second pair of eyes.'
333,'','Release fixes from 2.9.x\n* forward-ported fixes for cutting releases from 2.9.x'
332,'','Fixes SI-5373\nAnd finally adds support for testing models (ScaladocModelTest)'
331,'','Topic/virtpatmat\n'
330,'','Backport SI-4750\nBackports documentation enhancement plus single method on Regex object companion that enables quoting replacement strings.'
329,'',"Fix .empty and add .ofDim factory method.\nThis commit removes the (unused and unnecessary) elems* parameter\r\nfrom the 'empty' method. It also adds 'ofDim' which allows the\r\nuser to allocate a FlatArray of a given size without providing\r\nactual elements.\r\n\r\nThis fixes SI-5609."
328,'','Slight comment tweak for more colloquial English.\n'
327,'','Backport/large scope soe\nCherry pick of 09b1a31309c9cbf1394c317b87d2073d39a8cd56'
326,'','Scaladoc is now pointing to sources in github\nFor snapshots, it points to the exact commit, for releases it points to\r\nthe tag ("v" + maven version). The link now opens in a different tab,\r\nas opening in the same frame is not compatible with github (the page\r\ndoesn\'t load for some reason).\r\n\r\nLeft the repo url in test/review untouched because it points to the\r\nroot of all LAMP repos. But... is anyone still using that script?!?\r\n\r\nReview by @jsuereth'
325,'',"Close issue #SI-4488\nThe issue is closed as won't fix, but there are a few test cases\r\nwith respect to the model relevant to the issue. Also, correct\r\nsome typos."
324,'','2.9.x distro\nMgirating version fixes and updating release generation for lack of sbaz.'
323,'','virtpatmat improvements that would be nice to have for M3\n'
322,'','Adapted scaladoc test\n'
321,'','various virtpatmat improvements\nit would be amazingly awesome if these commits could end up in M3 (currently virtpatmat is quite broken)\r\nspeaking of which -- when are we releasing M3?'
320,'','Changing URLs for svn and issue tracking.\nReview by: @jsuereth'
319,'','Separated scaladoc from main build\n* test.scaladoc is no longer run along with the test suite\r\n* docs.* that invoke scaladoc will not fail unless started with\r\n    ant <target> -Dscaladoc.noFail="no"\r\n\r\nhopefully this is the last nightly scaladoc crashes...'
318,'','Undo the revert.\nreverts 3db29dde051614d976bca92a1cdeb109c9c0ab01 and 5af2bf54d21ac63236cd6e68586b2c38fa0f28c3\r\nrestores 19a48510c2e18430a35319c04dfe3bad7119f23f'
317,'',"SI-5543 Constructor default argument expr wrongly scoped\n\r\nThis is a fix of limited scope (pun unintended, but I'll take it).\r\n\r\nhttps://issues.scala-lang.org/browse/SI-5543\r\n\r\nOne line for the context bug, and a couple of lines to encapsulate detecting a default-getter for a ctor.\r\n\r\nThis change includes renaming init$default$ to init$$default$ to avoid collisions with default-getters for an ordinary method on the module named init.\r\n"
316,'','Scaladoc: improved usecases, display full signature. Closes #5291\nMakes the full signature of a use case member available, but still hidden under a drop-down menu.'
315,'',"minimalist refactoring to allow annotating trees\nnot tested for performance, but shouldn't add any memory overhead\r\n\r\nthis is meant to help provide support for macro's in the eclipse plugin,\r\nbut ironically I haven't verified this doesn't break eclipse -- I don't see how it would, though\r\n\r\nsee https://github.com/adriaanm/scala/commit/44362c557f for an example usage"
314,'','Fixed SI-5599\nEliminated the spurious warnings and made the code easier to follow.'
313,'','Increased the timeout from 5s to 60s\n.. to make the presentation compiler shutdown test more resilient on slow machines.'
312,'','Fixes SI-5593\nAfter hours of debugging and understanding all the root causes why\r\nscaladoc is rummaging through the current directory for classes, I\r\ndecided to treat the symptoms rather than the cause. I\'ll document\r\nthe decision here in case anyone is interested:\r\n - in order to find documentable entities, scaladoc exhaustively\r\nlooks at all the symbols starting from the root package and going\r\nall the way to the leaves, visiting all classes in the classpath\r\n - if the classpath is empty, scaladoc and scalac add "." as the\r\ndefault classpath. This leads to scaladoc going on a class hunting\r\nspree in the current directory. If it happens that the current\r\ndirectory contains package objects and they\'re not in the expected\r\npath (like scala.tools.nsc in build/quick/classes/.../nsc) errors\r\nstart to pop up\r\n - scalac is also affected by this, but to a more limited scope,\r\nsince it will lazily expand packages whenever necessary. To show\r\nthis, run the repl in the root directory of the scala source code,\r\nafter compiling scala:\r\n\r\nscala> import build.quick.classes.compiler.scala.tools.nsc._\r\nerror: error while loading package, class file \'./build/quick/classes/\r\ncompiler/scala/tools/nsc/package.class\' contains wrong package package\r\n\r\nThe cleanest solution I can see now is to look at the tree resulting\r\nfrom compilation and use it for guidance -- I will look into this.'
311,'',"disable version numbers on windows, they're broken.\n"
310,'','Feature/pc execution contexts\nDeprecated a parallel.Future, and privatized a few classes.'
309,'','SI-4771 Scala eats exit code when piping stdin\nFix for SI-4771 Scala eats exit code when piping stdin'
308,'',"Backport/fork join detection jdk 1.7\nJDK 7 changed the Vendor from Sun to Oracle; this backports the change that makes the fork-join detection aware of Sun's demise."
307,'','SI-4771 Scala eats exit code when piping stdin\nFix for SI-4771 Scala eats exit code when piping stdin.'
306,'','Backport/4895\nBackport fix for https://issues.scala-lang.org/browse/SI-4895\r\n'
305,'','Fixes SI-5593\nThe problem was the classpath was sneakily set to "." whenever no\r\nclasspath was given. Paul\'s comment says it all:\r\n\r\n/** [...]\r\n *\r\n *  - If -classpath or -cp is given, it is that\r\n *  - Otherwise, if CLASSPATH is set, it is that\r\n *  - If neither of those, then "." is used.\r\n */\r\n\r\nFixed for Scaladoc, if the classpath is empty, it stays empty. Scalac\r\nstill has the "." fallback classpath, as before, I\'m not touching that.'
304,'','Ticket/5063\nThis one also pulls in the value class constructor patch which is in the queue as a separate pull request. I was not able to disentangle the two. Need more git-fu for that.'
303,'','Value classes can now have private constructors (are widened automatically after type checking).\n'
302,'','Fix for SI-5591\n'
301,'',"Change apply method to use getOrElse\nThere's pattern matching on Options throughout the source code.  If this change makes sense, such changes could be implemented throughout the source."
300,'','Prepared actors hierarchy for migration.\nInternal nodes added so methods relevant to akka can be overridden.\r\n\r\nReview by: @phaller'
299,'','virtpatmat: jump-based codegen + tail calls + (partial)fun synthesis during typer (WIP) + more skolem-packing (WIP)\n- this introduces a new translation scheme as discussed on scala-internals\r\n- tail call support\r\n- instead of mangling trees during uncurry, synth a (partial)function subclass during typer when a function with match-body is encountered (this is work in progress)\r\n- pack skolems in branches of if/case before lubbing their types (otherwise we try to lub independently skolemized types) -- this is only enabled for virtpatmat, but is generally useful I believe (also, work in progress)\r\n\r\nthere are a couple of known problems with this version of virtpatmat, but I opted to ship it for this milestone so that people can try out the new codegen -- I should have fixes for the bugs I know of in a nightly later this week\r\n\r\nnone of the known problems arise unless -Yvirtpatmat, of course'
298,'','Issue/5054 usecase cleanup\nReady for merging'
297,'','Issue/5054 usecase cleanup\nMerged into develop, should merge well on trunk also.\r\n@paulp: when in doubt, include all tests :)'
296,'','Fixes SI-5248\n'
295,'','optimise flag should be shown in scalac.args info\n'
294,'','Yet another attempt to make the version a  good one\nThis fixes the git commit drift issue and gives us enough granularity\r\nto make releases at any time that are cronologically increasing.\r\n\r\nReview by @paulp'
293,'','Cleaned up Duration for the standard library.\n - Removed Timeout from the library. Each library should provide its own implementation of Timeout\r\n - Removed duration package object and replaced it with regular object\r\n - Removed usages of post Java 1.5 TimeUnit members\r\n - Added factory methods for FiniteDuration\r\n - Cleaned up some unnecessary comments\r\n - Merged duration DSL with Duration.scala file'
292,'','Cleaned up Duration for the standard library.\nMore specifically:\r\n - Removed Timeout from the library. Each library should provide its own implementation of Timeout\r\n - Removed duration package object and replaced it with regular object\r\n - Removed usages of post Java 1.5 TimeUnit members\r\n - Added factory methods for FiniteDuration\r\n - Cleaned up unnecessary comments\r\n - Merged duration dsl with the Duration.scala due to warnings with inner classes in package objects\r\n'
291,'','Issue/5054 usecase cleanup\nChanged the way usecases are documented in the library so we can display full signatures under usecases. For this I needed to make a few adjustments on how code blocks are handled -- this triggered a couple of bugs in the syntax highlighter, fixed.'
290,'','Cleaned up Duration for the standard library.\nMore specifically: \r\n\r\n - Removed Timeout from the library. Each library should provide its own implementation of Timeout\r\n - Removed duration package object and replaced it with regular object\r\n - Removed usages of post Java 1.5 TimeUnit members\r\n - Added factory methods for FiniteDuration\r\n - Cleaned up some unnecessary comments\r\n\r\nReview by @phaller'
289,'','SI-5189: refined GADT soundness fix\n- extrapolate GADT skolems: only complicate types when needed\r\n- make sure we only deskolemize GADT skolems after typedCase'
288,'','Separating Scala Actors from the Scala Library.\nScala actors are now in scala-actors.jar. Changes that were done are:\r\n\r\n  - Fixed partest to include actors library for various test usages\r\n  - Created the entry for the new jar in build.xml\r\n  - Added maven entries for scala actors\r\n\r\nReview by: @jsuereth'
287,'','Fix version on tag\ngit describe is useless in that situation, afaict.'
286,'','Added +: and :+ extractors to mirror append/prepend.\n* +: does head/tail decomposition on any Seq\r\n* :+ does init/last decomposition on any Seq\r\n* Both preserve specific Seq types.\r\n\r\nReview by @odersky'
285,'','Make release notes\nA tool for generating release notes (that are somewhat terrible, but better than nothing.\r\n\r\nreview by @paulp, if he wants to.'
284,'','Simplify check for transient fields in mixin.\n'
283,'','Master version fixin\nVERISON fixes, ported from 2.9.x branch into master.'
282,'','Feature/pc ctrie\nRenaming Ctrie to ConcurrentTrieMap.\r\n\r\nStill not clear if we will keep a standard list of aliases for long names and where exactly this will be, so there is no Ctrie alias right now.'
281,'','Adapted tools/verify-jar-cache to run on Ubuntu\n'
280,'','Remove confusing nightly.checkinit target\nIt was setting checkinit in optimise params'
279,'','Remove assert given the test. Fixes #SI-5572.\n'
278,'','SI-1118, finally.  Comments welcome!\n'
277,'',"Space/Tab cleanup script - run before committing\nRunning this script will transform tabs into a pair of spaces and will\r\neliminate trailing spaces. Use at your own risk!\r\n\r\nNOTE: I found it useful for cleaning up my commits -- this doesn't mean it belongs to trunk, but if you think it might be useful for others, pull it, if not, just close the pull request."
276,'','Feature/inheritdoc clean\nCleaned up and re-checked the inheritdoc feature'
275,'','create relative symlinks in ant scripts\n'
274,'','Feature/checkinit transient\n'
273,'','SI-5045 - allow for using Regex without implicit anchors\nCode changes to address SI-5045 (https://issues.scala-lang.org/browse/SI-5045)\r\n\r\n* Add trait NoImplictAnchors to override Regex.unapplySeq\r\n* Add .qr method to StringLike to create a Regex with NoImplicitAnchors\r\n* Add tests of above\r\n\r\nHave discussed in jira, scala-debate, and plan to raise the suggested change on scala-language.'
272,'','Feature/pc execution contexts\nFix for the failing checkinit build.'
271,'','2.9.x version fixin\nAttempt to fix version number issues in the Scala build.\r\n\r\nReview by @paulp and @dragos'
270,'','Removed "Todo: test" where a test exists.\n- Renamed test t960 to a more sensible name, because SI-960 is not related\r\n  to the test and I couldn\'t find a ticket number.\r\n- Some minor fixes to @deprecated like switched or missing versions.'
269,'',"Updated flow for creating new STARRs.\n* SHA1's are deleted when creating new STARR builds.\r\n* SHA1's are also deleted if new fjbg/forkjoin/jline jars are made.\r\n* Normal push/pull flow should continue as normal with less frustration.\r\n\r\nReview/use by @paulp"
268,'','SI-5189: sound GADT type inference\nthis bug has two aspects: \r\n\r\n1. inferConstrInstance used the wrong type to compute the variance (first two commits clean it up and fix the variance computation)\r\n\r\n2. adaptConstrPattern did not set the stage correctly for inferConstrInstance: need to approximate the expected type against which we do inference to reflect subsumption it method application (i.e., make the mismatch between dynamic and static types explicit, reflecting variance, using existential skolems)\r\n\r\nreview by everyone, especially @odersky'
267,'','Fixed SI-3569\n'
266,'','Closes #SI-5554\n'
265,'','Force .info before creating new synthetic syms\nCloses SI-5545. In the long run this should be generalized, as other\r\nphases might suffer from the same problem. Full explanation here:\r\nhttps://issues.scala-lang.org/browse/SI-5545'
264,'','Closes #5553, review by @dragos\n'
263,'',"Fix deadlocks occurring during presentation compiler shutdown.\nDuring shutdown, other threads can still post work items on the work queue. They will never be serviced,\r\nleading to clients waiting forever.\r\n\r\nThe fix is to replace the implementation of the queue with a 'always fail' implementation during shutdown.\r\nReview by @odersky.(cherry picked from commit 53fb61cba9f02c176f1aae80f0b270491fbbf91c)\r\n\r\n(removed the test because there are no presentation compiler tests in 2.9.x and it depends on test infrastructure that is not in place).\r\n\r\nConflicts:\r\n\r\n\tsrc/compiler/scala/tools/nsc/interactive/CompilerControl.scala"
262,'','#SI-5546 fixed: refine refined typing for getClass\n'
261,'','Fixes scaladoc rangepos\nBy making the comment tree node transparent. Reverts previous change\r\nin cfb04ef065. Will mark the bug 5527 as WONTFIX, because the effort\r\nof fixing leaking comments is too great.'
260,'','Make task support implementations public.\n'
259,'',"Fix deadlocks occurring during presentation compiler shutdown.\nDuring shutdown, other threads can still post work items on the work queue. They will never be serviced,\r\nleading to clients waiting forever. \r\n\r\nThe fix is to replace the implementation of the queue with a 'always fail' implementation during shutdown.\r\nReview by @odersky."
258,'','Fix for cps regression. \nCloses 5538. Closes 5445. (cherry picked from commit 9f5767dd31395cac0bc64c86c2cacf247b1924fa)'
257,'','Backports/SI-5380: non-local return of try expression\nThis is the backport of the two commits which I submitted for master (squashed into one commit):\r\n\r\nFixes SI-5380: non-local return of try expression\r\n(cherry picked from commit 02e260a8e67e2b2b6f876aafe76cd61248a89374)\r\n\r\nLift only *non-local* returns of try expressions.\r\n(cherry picked from commit edf3ae0b8c3688b5cacbe2f7e2ae826f5fbb7644)\r\n'
256,'','Backports/fix specialized tests\nDepending on the file order in the directory, PathSettings.srcSpecLib\r\ncould end up as "instrumented.jar.desired.sha1" instead of "instrumented.jar"\r\nwhich would cause all the specialized tests to fail.\r\n\r\nThe same goes for scalacheck.jar\r\n\r\n(cherry picked from commit 35934129f2593816c3d9a0a5d5786737868fed6c)'
255,'','Handle empty format specifiers in the formatting interpolator.\nf"${foo}" is treated like f"${foo}%s".'
254,'','Fix for cps regression. Closes SI-5538. Closes SI-5445.\n'
253,'','Backport/4835\nCherry-pick of the fix for SI-4835 (Stream iterators retain a reference to the head of the stream) from master to 2.9.  The only change necessary was removing the inheritance from AbstractIterator.\r\n'
252,'','Feature/pc execution contexts\n'
251,'',"the very last condition in `isStampedForInlining()` should side-effect\nThat's the way it was working before scala/scala@fc2866efee1bcf17aee18d427ed41e172f440f62 , and that behavior is brought back with this commit. The commit adds a comment in `isStampedForInlining()` making this explicit to simplify maintenance."
250,'','close IS-5321\nReview by @VladUreche .'
249,'','Fixes SI-5532\n'
248,'','Fixes SI-5380: non-local return of try expression\nI fixed my previous commit so that only try expressions inside *non-local* returns are lifted.'
247,'',"Better fix for memory leaks in the presentation compiler (take 2)\nThe explicit call to `perRunCaches.clearAll()` introduced subtle bugs since maps in `Namer` *are* needed between runs of the presentation compiler. For instance, `classAndNamerOfModule` was cleared when it was still needed, leading to spurious errors in pattern matches (claiming a case class was not a case class).\r\n\r\nI added a simple implementation of a `WeakHashMap`, and use it in SpecializedTypes. This fixes the memory leak without the explicit call to `clearAll` in the presentation compiler.\r\n\r\nA better implementation could go to the standard library, and I  plan to do that, but it requires a bit more effort to properly integrate it in the collection library. I'll prepare another pull request if that's desirable."
246,'','Added comments to local definitions. Closes 5527\nReproducing the problem programatically was a bit tricky, as it only occurs with scaladoc -- so please excuse the longer testcase.\r\nReview by @odersky'
245,'','Fixes SI-5530\n'
244,'','Fixes SI-5380: non-local return of try expression\n'
243,'','Fixed deploy script for nightly\n'
242,'','Workaround for scaladoc bug SI-5527\n'
241,'','Update pull-binary-libs.sh to cope with curl not installed\n'
240,'',"Added updated ForkJoinPool, w/ necessary updates to Scala Actors.\nThis commit includes Doug Lea's updates to ForkJoinPool, as of January\r\n25th, 2012. Details of the changes and performance improvements\r\navailable at: http://markmail.org/message/323vxzn6irkk5yrg.\r\nThe ForkJoinPool used in this commit comes from the most recent JSR166y.\r\n\r\nAdditionally, also included are minimal changes to parts of the Scala\r\nActors library which interface with the ForkJoinPool, as the\r\nForkJoinPool's interface has changed (prior to the release of Java 7)\r\nsince we last updated it for the Scala 2.8 release.\r\n\r\nOf note- this is part of the planned overhaul of scala.concurrent,\r\nand corresponds to ticket SI-5523.\r\n\r\nFor testing this was built on JDK 1.6, and passes all tests on both\r\nJDK 1.5 and 1.6.\r\n\r\nA new forkjoin.jar is necessary prior to applying these changes.\r\nUsing this source, the new jar can be built by running:\r\n\r\n    ant newforkjoin forkjoin.done\r\n\r\nThis creates a new forkjoin.jar in build/libs/. It must replace\r\nlib/forkjoin.jar."
239,'','Improvement to API docs: GenTraversableLike and List. Fixes SI-5522.\nTiny adjustment of wording in `slice` method on `GenTraversableLike` API docs. Additionally added example to `List` API docs.\r\n\r\nCloses [SI-5522](https://issues.scala-lang.org/browse/SI-5522)'
238,'','Added support for binary literals.\nJust a proof of concept. Needs discussion on the mailing list (and tests).'
237,'',"Better fix for memory leaks in the presentation compiler. \nSwitched to perRunCaches and call clearAll from the presentation compiler.\r\n\r\nThis should go in 2.9.2 (but depends on Paul's commit 455129b32d8634856917f9ecf67987567fb46723"
236,'','Fix snapshot version number\nsnapshots should have prettier versions now.'
235,'',"Incorrect parsing of -Xplugin\n# Commit Message\r\n\r\n-Xplugin value passed by the Eclipse IDE are incorrectly parsed when it contains whitespaces.\r\n\r\nAssume -Xplugin is given the value (in the Eclipse IDE)\r\n\r\n  C:\\Programs Files\\plugins\\Aplugin.jar C:\\Programs Files\\plugins\\Bplugin.jar\r\n\r\nCalling ``tryToSetFromPropertyValue`` with the above value will always result\r\nin a total mess, no matter what, because it will split the string at\r\nwhitespaces.\r\n\r\nThe proposed solution is to change the implementation of\r\n``tryToSetFromPropertyValue`` to use `,` (comma) as the splitting character\r\n\r\nFurther, I'm quite convinced that the current implementation of\r\n``MultiStringSetting.tryToSetFromPropertyValue`` has never worked, that is why I\r\ndid not create an overload of ``tryToSetFromPropertyValue`` where the splitting\r\ncharacter (or string) can be passed as argument.\r\n\r\nFor more information, there is also an Eclipse Scala IDE ticket associated to this issue:\r\n\r\n  http://scala-ide-portfolio.assembla.com/spaces/scala-ide/tickets/1000917\r\n\r\n# Note\r\n\r\nIdeally, this should also be merged in 2.9.x (and be available in the next 2.9.2 release)."
234,'',"Fix to nightly build.\nYou see shelling to other ant builds doesn't let us declare dependencies\r\non the primary build, so to ensure all tasks are run when needed,\r\nand that we don't slow everyone down with javadocs, we wind up\r\nwith a bit of spaghetti."
233,'','update api docs for @elidable to match the behaviour more closely.\nIt might not be correct English, but you get the idea.'
232,'','tests for error checks not yet exercised in test suite\n'
231,'','Change time constants in test to avoid failures.\n'
230,'','Add test for AbstractionFromVolatileTypeError.\n'
229,'','Add tests for QualifyingClassError.\n'
228,'','Add test for ConstructorPrefixError.\n'
227,'','Add test case for ParentInheritedTwiceError.\n'
226,'','Added test case for FinitaryError.\n'
225,'',"Don't populate the concreteSpecMethod set in presentation compiler runs.\nThis is safe because the presentation compiler never runs the tree transformer (where this map is needed). This is a source of serious memory leaks in the IDE, but it wasn't visible before because the IDE didn't run the info transformers far enough. Interestingly, this is not a leak in batch runs: each element of the set is removed when the tree is transformed.\r\n\r\nFor a nice graph of the effect of this change, see: http://i41.tinypic.com/xe0k7o.jpg"
224,'',"Close file descriptor leak in sys.process. (SI-5439)\nThis closes most file descriptor leaks in sys.process through\r\nthe simple expedient of making sure every InputStream being read\r\nby BasicIO is closed once there's nothing more to read.\r\n\r\nA single file descriptor leak would remain for the OutputStream\r\n(that is, that process stdin) of each Process, which is closed after the\r\nInputStream being read to feed it is closed. Special care is taken\r\nnot to close the calling process stdin.\r\n\r\nFix an additional non-reported by where sending data to a process\r\nthat had already terminated would result in an exception being thrown.\r\n\r\nFile descriptors can still leak in some conditions that must be\r\nhandled by user code -- document it so.\r\n\r\nBackports fix for SI-5439.\r\n"
223,'','Deprecate Refined Build Manager.\nIt contains bugs that we are no longer planning to work on, sbt is a recommended approach (see integration with scala-ide)'
222,'','Add 2 benchmarks for Ctries.\n'
221,'','Deploy fix 2.9.x\nFixes deployment to OSSRH for releases.'
220,'','Test for SI-5171\nRunning the test produces the following error in 2.9.1:\r\njava.lang.VerifyError: class com.restphone.IsList$ overrides final method canEqual.\r\n\r\nWorks fine in 2.10.0-M2'
219,'','Test for SI-5316\nCompiler NPE on 2.9.1 when implicit parameter not found'
218,'','Disallow eliding when Nothing is expected\nThis is a one-line tweak of Paul\'s edit to GenICode:\r\nhttps://issues.scala-lang.org/browse/SI-5215\r\n\r\nThe intention of the tweak is to disallow eliding the method call if the expected type is Nothing:\r\nval junk: Nothing = elided()\r\n\r\nThere may be more interesting expressions in which Nothing is expected or inferred.\r\n\r\nI added a "neg" test, "elide-to-nothing", following the conventions, I hope.\r\n\r\nRunning "ant test" completes successfully (and runs the new test) on Cygwin.\r\n\r\nI hope this helps, even if no one uses elidable this way.  It was a useful exercise to learn github.\r\n'
217,'','Added the SYNTHETIC flag for BRIDGE methods.\nThe Eclipse Java compiler complains about duplicate methods otherwise.'
216,'','Fix for SI-5215 part 2: generate return value when eliding method calls\n'
215,'','Removed dead code in RefChecks.\nCloses SI-5034.'
214,'','Second round of OSSRH deployment fixes\n* Generate src jars for all artifacts\r\n* Generate doc jars for all artifacts (inlcuding scaladoc on jline, WEEEE)\r\n* Use GPG and agent to sign artifacts\r\n* Embedded maven sucky deployment option.  Deploy times increase from 3 minutes to ~15.'
213,'','fixes SI-5506 (cps issue)\nbetter cps type propagation for polymorphic and multi argument list methods.'
212,'','Fix for SI-5215: scalac crash when @elidable used in trait\nThe elision is now done by not emitting method calls (it was done by removing the elidable methods).'
211,'',"Fix [@spec A] to correctly induce AnyRef specialization.\nWhile [@specialized A] already tries to include specialization,\r\na bug in specializedOn prevented this from happening: any empty\r\nlist could mean that the type var was unspecialized, or that it\r\nwas specialized on everything.\r\n\r\nThe fix is to have this function create the full list of symbols\r\nin the case where the @specialized annotation doesn't explicitly\r\ninclude any types.\r\n\r\nNOTE: Unlike last time, I rebuilt and ran all the tests so it should be OK."
210,'',"Fix [@spec A] to correctly induce AnyRef specialization.\nWhile [@specialized A] already tries to include specialization,\r\na bug in specializedOn prevented this from happening: any empty\r\nlist could mean that the type var was unspecialized, or that it\r\nwas specialized on everything.\r\n\r\nThe fix is to have this function create the full list of symbols\r\nin the case where the @specialized annotation doesn't explicitly\r\ninclude any types."
209,'','Fix race condition in scala-concurrent-tck test\nThis fixes a race condition in one of the future tests where a TimeoutException would be thrown non-deterministically.'
208,'','Fixed over-optimistic anyrefSpecCache (closes SI-5500).\nThe basic problem here was that generic type params were getting\r\nconfused between the various specialized subclasses. For instance,\r\ncalling typeParamsSubAnyRef(A, C2$mcLI$sp) might return the wrong\r\nspecialized type param, e.g. C2$mcLZ$sp.A$sp (note the Z instead\r\nof the I).\r\n\r\nThe fix is to cache with both the sym (A) and also the clazz\r\n(C2$mcLI$sp). This may resolve a whole host of other obscure\r\nAnyRef specialization problems.'
207,'','Closes #5497.\nChain contexts by sharing the error buffer, unless you explicitly create a silent context. Review by @odersky'
206,'',' Closes #5452.\nInstead of trying to track the fallback attempts we rely on the\r\n context state to inform us which fallback is the last one.\r\n setError cannot always be called in NoBestMethodAlternativeError\r\n because inferMethodAlternative relies on side-effects.\r\n Review by @paulp.'
205,'','Fixes miscellaneous macro bugs\n'
204,'','significantly faster Inliner, with extensive documentation.\nThe same inlining decisions are made as before, see -Ylog:inliner output in particular lines starting with "[log inliner] Inlining"\r\n\r\nreview by @VladUreche @dragos @paulp'
203,'','Move code to a better place.\n'
202,'',"Topic/virtpatmat\n- remove unused `tree` argument from typedCases\r\n- working type switch for try/catch\r\n- generate proper isDefinedAt for switches\r\n- PF's missing missingCase, cleaned up isDefinedAt gen (MatchMatcher)\r\n- avoid triggering virtualized matching in patmatvirtualiser.scala\r\n"
201,'',"Topic/virtpatmat\n- remove unused `tree` argument from typedCases\r\n- working type switch for try/catch\r\n- generate proper isDefinedAt for switches\r\n- PF's missing missingCase, cleaned up isDefinedAt gen (MatchMatcher)\r\n- avoid triggering virtualized matching in patmatvirtualiser.scala\r\n"
200,'',"Futures, promises and execution contexts\nThis one is a bit longer - it comprises the last two and a half months of work on the scala.concurrent package.\r\n\r\nWe've generally tried to abide the commit guidelines, but there are a few instances where we went back and forth with some features, first introducing some methods, and then removing them."
199,'','Prevent extaneous output in SI-5005\nIn case partest debug is on, the testcase SI-5005 outputs some extraneous new settings output and the check fails, fixed. Also cleaning up after redirecting err to out, to be a good test suite citizen.'
198,'',"Fix issue with @inline/final (closes SI-5005, I think)\nHere is the third pull request for this. I'm really sorry for the false starts... I'm still somewhat new to this contributing to Scala thing.\r\n\r\nThis pull has two commits: the change that fixes the issue, and some tests that Vlad cooked up to verify that it works. I can rebase the branch if you'd rather that but I know that people have different feelings about that so I figured I'd push it as-is first. Please let me know if you all notice anything else bad about this.\r\n\r\nVlad and I believe this does close SI-5005, although it means we will need to open 2 new tickets because of other bugs this fix exposes. But, all the tests pass so it is strictly an improvement."
197,'',"Synchronized test\nI used this test while working on SI-64 (transforming a method with synchronized body into a synchronized method), but as I'm not gonna finish that one, you might want to merge the test by itself.\r\n\r\nAll enabled tests pass. The disabled ones are failing because of the issue described in SUGGEST-11 (lazy vals locking on owner)"
196,'',"Close file descriptor leak in sys.process. (SI-5439)\nThis closes most file descriptor leaks in sys.process through\r\nthe simple expedient of making sure every InputStream being read\r\nby BasicIO is closed once there's nothing more to read.\r\n\r\nA single file descriptor leak would remain for the OutputStream\r\n(that is, that process stdin) of each Process, which is closed after the\r\nInputStream being read to feed it is closed. Special care is taken\r\nnot to close the calling process stdin.\r\n\r\nFix an additional non-reported by where sending data to a process\r\nthat had already terminated would result in an exception being thrown.\r\n\r\nFile descriptors can still leak in some conditions that must be\r\nhandled by user code. Documentation to that effect will follow.\r\n\r\nCloses SI-5439."
195,'','Apply the fix for si-5293 to hash maps.\nThis fix was previously only applied to hash sets.'
194,'','Makes multiline interpolation work finely\n'
193,'',"Improve handling of final and @inline in specialization.\nPreviously, the specialize phase removed FINAL from all specialized\r\nmethods, but left the @inline annotation alone, causing warnings. This\r\npatch does two things:\r\n\r\n 1. It only removes final from the original class' methods which are\r\n    overridden, while leaving it on the specialized subclasses' methods.\r\n\r\n 2. When removing final, it also removes @inline, to prevent spurious\r\n    warnings.\r\n\r\nThis was intended to fix SI-5005, however there are deeper problems\r\nwhich prevent inlining from working even with this fixed."
192,'','Feature/pc ctrie\n'
191,'','Feature/pc ctrie\n'
190,'','Leave final modifier on specialized methods (fixes SI-5005)\nThe "specialize" compiler phase currently removes the "final" modifier from methods which it creates specialized overrides from. This interferes with the correct functioning of the @inline annotation, as mentioned in SI-5005.\r\n\r\nIt turns out that leaving the final modifier on those methods doesn\'t (seem to) cause any problems with compilation. It also preserves the original author\'s intention (that no subclasses should be allowed to override the method). Currently you can override final methods in specialized classes, which is not a major bug, but it would be nice to "fix" this.\r\n\r\nThere may be reasons why leaving "final" on the parent class\' methods is a bad idea. If so, I can rework the patch.'
189,'','Preprocessing for reifees\n'
188,'',"Fix deployment for OSSRH\n* Modified repositories so we deploy snapshots/releases to sonatype's OSSRH\r\n* Changed server id so `~/.m2/settings.xml` now needs credentials for a server id `sonatype-nexus`\r\n\r\nDoes not sign artifacts yet, looking for better solution than one specified by Sonatype."
187,'','Fixes https://issues.scala-lang.org/browse/SI-5229\n'
186,'','Fixes https://issues.scala-lang.org/browse/SI-5453\nOriginally we thought that macros declared inside objects should not\r\nprovide _this to their bodies.\r\n\r\nHowever, it: 1) contradicts vanilla Scala rules, according to which\r\nboth class and object methods can use this, 2) imposes unnecessary\r\nburden on macro developers without providing any conveniences to us.\r\n\r\nReview by @odersky.'
185,'','reifyAnnotations\nAnnotations are now supported by the reifier:\r\n* AnnotationInfos from symbols get transformed back into mods.\r\n* AnnotatedTypes are retained and are reified along with AnnotationInfos.\r\n\r\nReification is no magic, and reification of annotations especially:\r\n* Annotations cannot refer to symbols defined inside the quasiquote.\r\n  This restriction is due to the fact that we need to erase locally defined\r\n  symbols before reifying to make subsequent reflective compilations succeed.\r\n  However, while doing that, we also need to make sure that we don\'t make\r\n  resulting ASTs non-compilable by removing essential information.\r\n  This is tricky, and it more or less works for TypeTrees, but\r\n  not for annotations that can contain arbitrary ASTs.\r\n  For more details look into the comments to Reifiers.scala.\r\n* Classfile annotations that contain array arguments and are applied to types,\r\n  i.e. the ones that generate AnnotatedTypes, cannot be reified.\r\n  This is because of limitations of manifest infrastructure.\r\n  Typechecking "Array(mirror.LiteralAnnotArg(...))" would require the compiler\r\n  to produce a manifest for a path-dependent type, which cannot be done now.\r\n\r\nReview by @odersky.'
184,'',"Make --help an alias for -help\nI'm tired of typing 'scalac --help' and it whining that I should have\r\ntyped 'scalac -help'"
183,'','Fixes https://issues.scala-lang.org/browse/SI-5453\nOriginally we thought that macros declared inside objects should not\r\nprovide _this to their bodies.\r\n\r\nHowever, it: 1) contradicts vanilla Scala rules, according to which\r\nboth class and object methods can use this, 2) imposes unnecessary\r\nburden on macro developers without providing any conveniences to us.\r\n\r\nReview by @odersky.'
182,'','Fixes https://issues.scala-lang.org/browse/SI-5451\nMacro implementations now get type arguments as TypeTrees, not Types.\r\n\r\nKeeping the situation with AnnotationInfos in mind, I decided to\r\ngo for the most future-proof solution. Another argument for this decision\r\nis that we will most likely have to support untyped macros.\r\n\r\nReview by @odersky.'
181,'','Added back `internal.Symbol.toplevelSymbol` to resurrect the IDE for trunk.\nOther methods like `encl` variants were kept, so I assume this could stay as well.'
180,'','Updated information about desugaring of macros\n'
179,'',"Removed Code.scala\nThis is a logical next step after deprecating and removing LiftCode:\r\nhttps://github.com/scala/scala/commit/ffc2389840852a120fecd772206d55db9a79f30e\r\n\r\nNow when Paul has uploaded a starr that doesn't need Code, Code$ and Code.lift\r\nwe can finally remove the last remaining pieces of the old reification logic."
178,'',"Remove alphanumeric characters from the major part of the Scala version ...\n...number.\r\n\r\nIn practice, this removes the 'v' in v2.10.0-M1-0168-g99844ebc10-2012-02-08. Why is this important, you ask? \r\nMany tools assume the version number to be composed of 3 numbers and a string qualifier. Eclipse is one of the \r\ntools that validates version numbers, and this string is used to stamp Scala IDE builds against Scala nightlies."
177,'','Fixed misplaced @usecase annotation\nThat was preventing the compiler API scaladoc from building...\r\n\r\nin both check-in and nightly when I added the compiler API build.\r\n'
176,'','read build.number for maven.deploy (version.* properties)\nthe nightly deployment of maven snapshots was broken by fbd5efe4\r\n(and not fixed by 58ab20ba)\r\n\r\nthis gets us a dx away from the previous local minimum,\r\nbut a proper fix should parse the output of git.describe and put it in\r\nversion.major, version.minor, version.patch and ...\r\n... version.suffix (though this property is ignored by the build script)\r\n\r\nwith this commit, these properties are again read from build.number,\r\nwhich thus needs to be kept in sync with the git tag'
175,'','fix maven publish version numbers\n'
174,'','Added the "nofail" flag to the scaladoc ant task\nTo use it, we need to update starr and then add nofail="yes" to the\r\nbuild.xml scaladoc tasks.\r\n\r\nAfter publishing the starr I\'ll change the build.xml script and have the scaladoc testing and building separate from the nightly build.'
173,'','Assorted fixes\nMultiple fixes that have been accumulated during my investigations of 5273.\r\nToo heterogeneous to describe here, too minor to split into changesets.'
172,'','Automatically fetch jars as needed\nUse mappers with uptodate and touch tasks to detect if any jars need to\r\nbe downloaded based on the modification time of the desired.sha1 files'
171,'','Feature/pc ctrie\nThis branch contains the modifications in parallel collections needed to support implementing parallel collections using concurrent collections, and one concurrent parallel collection implementation.'
170,'','Scaladoc @usecase annotation overriding / SI-5287 (previously rejected pull request)\nFrom now on, the usecases inherit the comments from their parents, such\r\nas the explanation and the annotations: @param, @tparam, @return, etc.\r\nAn example of usecase comment inheritance is:\r\n\r\n  /**\r\n   * The test function tests the parameter param for ...\r\n   *\r\n   * @param theParam the implicit parameter to be tested for ...\r\n   * @return the result of the test\r\n   *\r\n   *\r\n   *\r\n   * @usecase def test(): Bool\r\n   *\r\n   * The test function tests the parameter taken implicitly from scope.\r\n   * Example: `test()`\r\n   *\r\n   * @return the result of the test for the current scope\r\n   *\r\n   *\r\n   *\r\n   * @usecase def test(theParam: SomeType): Bool\r\n   *\r\n   * This takes the explicit value passed.\r\n   * Example: `test(3)`\r\n   *\r\n   * @param theParam the explicit parameter to be tested for ...\r\n   */\r\n  def test(implicit theParam: SomeType): Bool\r\n\r\nNotice both usecases override the explanation with their own examples.\r\nThe first usecase also overrides the "@return" annotation while the 2nd\r\nusecase overrides the "@param theParam" annotation. If they didn\'t\r\noverride the explanations and annotations, they would inherit the\r\nvalues from the actual implementation, def test(implicit ...)\r\n\r\nThis will be followed by @inheritdoc, which enables more fine-grained\r\ncontrol over comment inheritance. The full explanation of using comment\r\ninheritance and @inheritdoc and their interaction with variables is\r\ngiven at https://wiki.scala-lang.org/display/SW/Tags+and+Annotations\r\nin the "Comment inheritance" and "Inheritance Example" sections.'
169,'','Fixes https://issues.scala-lang.org/browse/SI-5272\n'
168,'','Fixes https://issues.scala-lang.org/browse/SI-5334\n'
167,'','Added a rootdoc page for the compiler API scaladoc\nrootdoc page = the first page when you open scaladoc'
166,'','added reference equality checks to improve structural sharing\nadded reference equality checks to updated0 and removed0 to prevent creation of a new map when updating an entry with the same value or removing an entry that was not present to begin with.\r\n\r\nThis is my first pull request ever, so If I did something wrong please let me know. The change is relatively simple and quite similar to what was done in scala.collection.immutable.HashSet in response to SI-4398:\r\n\r\n- In removed0, just check if there is a need to allocate a new array. If sub eq subNew there is obviously no need to do this, so just return this. I moved the creation of elemsNew since obviously it is not needed if I just return this.\r\n\r\n- In updated0 of HashMap1: if there is no merger and the value to be added is reference equal to the value already present, there is no need to do anything, so return this. I have to cast the old value and the new value to AnyRef to be able to make an eq comparison, but this should always be possible without any runtime cost, right? I am not sure if it is safe to do this if there is a merger.\r\n\r\nIn updated0 of HashTrieMap, just do the check if sub eq subNew like in removed0.'
165,'',"Replaced LiftCode with a function in MacroContext\nMajor cleanup of reification:\r\n* LiftCode phase has been removed\r\n* Code has been deprecated and will be removed as we roll a new starr\r\n* Logic related to type-directed lifting has been purged\r\n\r\nscala.reflect.macro.Context#reify now provides the same services\r\nas LiftCode provided (except that it returns Tree, not Code).\r\n\r\nFor testing purposes, I've retained the oh-so-convenient automagic lift.\r\ntest/files/codelib/code.jar now hosts Code.lift reimplemented in a macro,\r\nso that the tests can continue working as if nothing has happened."
164,'','Some fixes to scripts on Cygwin\nReview by @paulp, @jsuereth'
163,'','one less TODO and null check\n'
162,'','An IntelliJ module for the root directory.\nThis allows any file to be be edited, rather than just the ones under library, compiler, actors, ...'
161,'','Fix 2.9.2 scaladoc replacing nightlies in jenkins\nThis fixes the problem raised by Simon and Daniel in https://groups.google.com/group/scala-internals/browse_thread/thread/c2df2234943cba27 by only publishing the nightly docs if the version given in jenkins equals "master" (the trunk build)'
160,'','virtpatmat refactorings; new-style virtualization\nfactored out reusing treemakers (used by CSE) and optimizing codegen (no more scattered `if(optimizingCodeGen)` all over the place)\r\n\r\n__match determines match semantics; virtualization (TODO: have sentinel __match in Predef)'
159,'','Upgrades the reifier\n'
158,'',"Fix sbt build with trunk.\nThis was tricky to find as HLists and multiple chains of implicits are definitely not fun to debug.\r\nReporting ambiguous errors is influenced by the general error reporting,\r\ndon't look for implicit arguments if any of the preceding ones failed\r\n(kills performance, causes diverging implicits with HLists). Previously\r\nthrowing type errors handled that correctly but now we don't do that.\r\nFixed small but essential typo when typing implicit.\r\nReview by @dragos"
157,'','Hardens classToType logic\nReflection now correctly processes classes, objects and inner classes\r\nthat are declared in classes and objects.\r\n\r\nHowever classToType still crashes on compound types and local classes.\r\nFor more information on those, follow the links:\r\n* Compound types: https://issues.scala-lang.org/browse/SI-5430\r\n* Local classes: https://issues.scala-lang.org/browse/SI-5431\r\n\r\nFixes https://issues.scala-lang.org/browse/SI-5256.\r\nReview by @paulp, @odersky.'
156,'','Hardens reification against rare kinds of Constants\nImporters now correctly process constants that carry types and symbols.\r\nHowever, it is still impossible to reify classOf for a class/trait that\r\nis defined inside a quasiquote.\r\n\r\nTheoretically, this can be implemented, but will require attaching\r\noriginal trees to classOf constants, which needs much more effort.'
155,'','Yvirtpatmat switch improvements\nSummary: some further improvements to how Yvirtpatmat handles patterns that can be translated to switch tables. Fixed bug in fjbg on the way.\r\n\r\nCheck out individual commits for details.'
154,'','Tests for https://issues.scala-lang.org/browse/SI-5427\n'
153,'',"Introduce getAnnotations that triggers symbol completion\nDefault getter for annotations doesn't perform initialization, hence\r\nwe've faced the following bug: https://issues.scala-lang.org/browse/SI-5423.\r\n\r\nOne of the approaches to fixing it would be to auto-complete on getter,\r\nbut according to Martin we'd better not do that because of cycles.\r\n\r\nThat's why I'm just introducing a new, eager, variation of `annotations'\r\nand redirecting public API to it."
152,'',"Introduce getAnnotations that triggers symbol completion\nDefault getter for annotations doesn't perform initialization, hence\r\nwe've faced the following bug: https://issues.scala-lang.org/browse/SI-5423.\r\n\r\nOne of the approaches to fixing it would be to auto-complete on getter,\r\nbut according to Martin we'd better not do that because of cycles.\r\n\r\nThat's why I'm just introducing a new, eager, variation of `annotations'\r\nand redirecting public API to it.\r\n\r\nReview by @odersky."
151,'','Closes #4336.\nSome of the type params might already be instantiated if explicit type application is done.\r\nReview by @adriaanm'
150,'','Issue/5374\n'
149,'','Issue/4147\n'
148,'','Test for https://issues.scala-lang.org/browse/SI-5418\n'
147,'','-Yshow-symkinds: prints kinds next to symbol names\nThis very situational option proved to be very useful when debugging\r\nhttps://issues.scala-lang.org/browse/SI-5415\r\n\r\nWith the help of -Yshow-symkinds, it became possible to distinguish\r\na free var from a module symbol, which gave precise indication of the\r\nroot of the bug.'
146,'',"-Yshow-symkinds: prints kinds next to symbol names\nThis very situational option proved to be very useful when debugging\r\nhttps://issues.scala-lang.org/browse/SI-5415\r\n\r\nWith the help of -Yshow-symkinds, it became possible to distinguish\r\na free var from a module symbol, which gave precise indication of the\r\nroot of the bug.\r\n\r\nThis changeset also upgrades stringification of symbols and types, so\r\nI'd like to get a review by @paulp and @odersky."
145,'',"Performance improvements for CommentFactory.\nA few small improvements to the parsing steps of CommentFactory (both\r\nmain parsing and wiki format parsing), resulting in a 30% reduction\r\nof time spent in def parse, which gives me 5% reduction in docs.lib.\r\n\r\nTurn docBody into a StringBuilder, to improve concatenation speed. Make\r\nWikiParser and CharReader work with String instead of Array[String], to\r\nreduce copying of data. Get rid of the implicit conversion from String\r\nto Array[String].\r\n\r\nAlso, adjust a couple of regex to avoid expensive backtracking. The\r\nnew regex has a different semantics, which is arguably more correct\r\nthan the former one. There's absolutely no change in the generated\r\ndocs for Scala anyway."
144,'','Set fields in immutable hash maps and hash sets to vals.\nThis is part of an effort to make the immutable collections\r\n(more) thread safe. The `::` still has non-final member fields\r\nfor head and tail, but there is not much that can be done right\r\nnow about that, since these fields are used by list buffers.\r\n\r\nTried writing a test with unsafe initialization, but could not\r\ninvent a scenario which actually fails, at least on the JDK6.'
143,'','Added caching to binary resolution.\n* Duplicated binary repo cache in ~/.sbt/cache/scala/\r\n* Resolved to cache before copying to local dir if jar is misisng\r\n* Does *not* check SHA in cache currently\r\n\r\nNote: This uses the *same* cache as the SBT build, which is ideal.\r\n\r\n\r\nReview/use by @paulp'
142,'',"Add a split method with limit to Regex.\nAdds an overloaded split with a limit parameter that controls\r\nhow many times the splitting pattern may be applied, or whether\r\ntrailing empty strings should be returned or not. This mirrors\r\nJava's own split method on Matcher.\r\n\r\nCloses SI-5088."
141,'','Refine fix for SI-5374 - make list deserialization backward-compatible.\nThis is done by structurally serializing list nodes, but prepending a special\r\n`ListSerializationStart` symbol ahead of the list. If this symbol is not\r\nin the object input stream, the deserialization reverts to the old mode.\r\n\r\nNote there is not much to be done for list buffers - their serialization was\r\nbroken before, so legacy serialized list buffers are no longer deserializable.\r\nHowever, their serialVersionUID was changed to reflect this, so deserializing\r\na legacy list buffer should fail fast.'
140,'',"Wip fix 2.9 stability\nFixes the stability testing issues with 2.9.x.  One line was not copied correctly into STRAPP's build.\r\n\r\nReview by @paulp, @dcsobral"
139,'','Document regex replacement strings behavior.\nAll replacement methods use dolar signs to identify groups in the\r\nmatched string, and backslashes to escape characters. Document this\r\nbehavior, and provide a method that can be used to properly quote\r\nreplacement strings when this behavior is not desired.\r\n\r\nCloses SI-4750.'
138,'','Making reflection thread safe.\nThis is the first big installment towards getting there. Still missing are some meaningful tests. Also missing is the thread-safe hardening of Trees. None of the techniques applied so far seem to be a good fit for them.\r\n'
137,'','SI-5045 Regex.unapplySeq should use m.find(0) instead of m.matches\nFirst pull request was lost going from svn to github however there were concerns about changing existing behavior.\r\n\r\nThis pull request adds a trait to turn off the implicit matching behavior which can be added explicitly during instantiation or through a .qr method in StringLike.  An added benefit of this approach is having the type system keep straight which style of Regex is being used.'
136,'','Regex improvements\nThis adds findAllMatchIn to Regex to mirror other similar methods.\r\n\r\nIt also overloads StringLike\'s "r", adding a version that accepts\r\ngroup names.\r\n\r\nIt includes test cases for both methods.\r\n\r\nCloses SI-2460.'
135,'','Fix for SI-5375.\nChanged CompositeThrowable to inherit Exception instead of Throwable.\r\nA few minor fixes for the jdk1.5 parallel collection tasks.'
134,'','Scalac fork no longer dumps stacktraces on compilation errors\nCurrent behavior of scalacfork task is to fail the build when there are\r\ncompilation errors reported by scalac fork. So far, so good.\r\n\r\nHowever, this functionality is implemented by throwing sys.error, which\r\nmakes ant dump the entire stacktrace. This is annoying, since it almost\r\ncertainly scrolls the screen away of the error (hello, dear 1366x768)\r\nand buries it under a meaningless stacktrace.\r\n\r\nSurprisingly, there is a very simple fix that remedies the situation.\r\nCredit goes to @bakoyaro from SO: http://bit.ly/xdR306'
133,'',"Use context for storing errors instead of throwing type errors.\nUse context for buffering errors that cannot/shouldn't be reported in the given moment (instead of throwing type errors). This avoids previous problems where we were creating fake error trees in some incorrect places like in type completers in Namers etc. Implicits relied heavily on type errors being thrown but performance should stay the same due to some explicit checks/returns.\r\n\r\nSome of the problems involved how ambiguous error messages were collected/reported because it was very random (similarly for divergent implicits). This should be more explicit now. Reduced the number of unnecessary cyclic references being thrown (apart from those in Symbols/Types which don't have a context and need to stay for now as is).\r\n\r\nReview by @paulp, @odersky."
132,'',"SI-5405: Fix documentation error in scala.math.BigInt\nAs mentioned in https://issues.scala-lang.org/browse/SI-5405.\r\n\r\nThe documentation for a few of the functions in scala.math.BigInt has a copy-paste error. Here's a patch to fix the problems.\r\n"
131,'','Update for fix for SI-5377.\nConverting the buffer to another arraybuffer instead of to a list.'
130,'','Simplified emitSwitch in PatMatVirtualiser.\nSimplified emitSwitch method that does not emit\r\nforward jumps for switch tables. Instead, it\r\nemits Match trees that are of a shape that\r\ncan be directly translated to switch.\r\n\r\nThe backend takes care of the actual translation\r\nfrom Match trees into switch tables.\r\n\r\nAs a bonus, we emit more compact trees compared\r\nto the old implementation of emitSwitch.\r\n\r\nReview by @adriaanm.'
129,'','Issue/5262\nSI 5262 was fixed by the fix to SI 5374. These are the test files.'
128,'','Fix for SI-5374.\nLists are now serialized so that the entire list structure is serialized, including list nodes.\r\nThis is different from the previous behaviour where only the elements were serialized.\r\nList buffers are now optimized so that only the elements of the list are serialized, and\r\nnot the nodes of the internally maintained list.'
127,'','Temporarily disabling debug traces in macro tests\n'
126,'',"Made partest fully support locker-based distribs\nThis patch brings support for specialized and scalacheck tests,\r\nand finally makes it possible to run partest for locker.\r\n\r\nTo do that, you need to write your own partest script: http://bit.ly/wl9HaH,\r\nand keep another clone of your repository that would provide the classes\r\nfor running partest. That clone should then be build normally (ant build),\r\nand be used to transplant the stuff that isn't built by locker, namely:\r\npartest, actors, scalacheck, forkjoin, fjbg, msil and jline.\r\nFor more information take a look at my scavenger: http://bit.ly/AjMiud."
125,'','Fixed SI-4835 (scala.collection.immutable.StreamIterator[+A] has O(n) memory consumption) problem.\n'
124,'','Fixes SI-4929, with a test to verify.\nAlso fixes potential issue with Parsers.phrase not being reentrant; however, I was unable to actually reproduce this issue in practice. (The order in which lastNoSuccess was being set and compared seemed to guarantee that it would never actually be a problem).'
123,'',"2.9.x\nColladoc is implemented as an extension to Scaladoc overriding existing classes adding new functionality.\r\n\r\nTo allow injecting new functionality into Scaladoc output, some of the values in `scala.tools.nsc.doc.html.page.Index` and `scala.tools.nsc.doc.html.page.Template` classes had to be changed to methods to allow their overriding. Furthermore, small piece of code responsible for output rendering was separated into own method.\r\n\r\nThese changes don't affect existing Scaladoc functionality in any way."
122,'','Fixes a bug that messed up --classpath in partest\n'
121,'','A better REPL context classloader.\nPreviously, when using ThreadStoppingLineManager (ie, not using\r\n-Yrepl-sync), the parent classloader was installed as the thread\r\ncontext classloader. On my machine, this was null.\r\n\r\nNow, the behaviour is consistent with the thread-free line manager,\r\nand allows access to classes defined during the REPL session.\r\n\r\nCloses SI-5072'
120,'','Fix for problem in SBT that was caused by the too severe fix of type sou...\n...ndness problem t5120.'
119,'','Fixed windows bat file exit code and command chaining (finally)\nThe problem was, that executing the following command in the windows\r\nshell, always executed scala.bat regardless of the outcome of scalac.bat:\r\n\r\n  scalac.bat somefile.scala && scala.bat Test\r\n\r\nApparently exit codes are broken for windows bat files.\r\n\r\nImplementing the workaround suggested at\r\nhttp://stackoverflow.com/questions/4632891/exiting-batch-with-exit-b-x-where-x-1-acts-as-if-command-completed-successfu\r\nfixed the problem. Tested manually in Windows 7 64.'
118,'','Made the binary push script a bit friendlier for humans\npush script now outputs nice error messages.\r\n\r\npull script now pulls from the `tools/` directory.\r\n\r\nReview/use by @paulp'
117,'','further reduction in inlining time. This time, 40%\nTwo main improvements:\r\n  (a) an IClass is loaded via ICodeReader at most once.\r\n  (b) given that type-flow analysis results don\'t change for "external" methods (those loaded via ICodeReader), we can cache them.\r\n\r\nThe same inlining decisions are made as before, see -Ylog:inliner, with a focus on lines starting with "[log inliner] Inlining"\r\n\r\nreview by @VladUreche @dragos @paulp'
116,'','Progress with macros\nA short recap:\r\n* Macro expansion now works finely for instance macro invocations\r\n* Macros are now hidden behind -Fmacros\r\n* Bodies of macros now have "import _context._" in their preamble\r\n* Macros are now loaded from classpath, much like regular libraries\r\n* Macros can now override methods (in that case macro expansion\r\n  does not crash if macro is not found, it just falls back to super)\r\n\r\nReview by @odersky.'
115,'','Closes SI-5066\nreadLine("%s", "prompt") printed "WrappedArray(prompt)"\r\nreadLine("%s%s", "pro", "mpt") threw a MissingFormatArgumentException'
114,'','Fixes SI-5387: Improve Performance Of dropWhile in TraversableLike (now with test)\nThe predicate was evaluated repeatedly for every element, even every non-dropped one.\r\n\r\nnow with test.'
113,'','Fixes SI-5387: Improve Performance Of dropWhile in TraversableLike\nThe predicate was evaluated repeatedly for every element, even every non-dropped one.'
112,'','Fixed a bug SI-5377 (https://issues.scala-lang.org/browse/SI-5377) and Added test cases for SI-5377..\n'
111,'','Merge migration update\nThe @migration annotation can now be used like @deprecation.\r\nOld syntax is still supported, but deprecated.\r\n\r\nImprove wording and consistency of migration messages, migration\r\nwarnings also print the version in which the change occurred now.\r\n\r\nPartially fixes SI-4990.'
110,'',"Upgraded the implementation of showRaw\nNow showRaw no longer significantly lags behind -Yreify-copypaste.\r\nDidn't put very much effort into it, since quite soon LiftCode\r\nwill become a macro and we'll be able to reuse it in RawTreePrinter."
109,'','Fix check for number of arguments\nFix the test for number of arguments by passing all arguments instead\r\nof passing the argument list as a single argument.\r\n\r\nAdd positive and negative tests for it.'
108,'',"Improvement in specialization\nMake specialization pick up opportunities when the specialized\r\n method has additional (non-specialized) type parameters.\r\n\r\nThis fix comes from Stefan's desire to specialize HLists (see \r\ncorresponding test). review by @prokopec"
107,'','A string interpolation implementation of SIP-11.\nThis is  the complete implementation of SIP-11, in its version of 15-Jan-2012. For now, the interpolations are enabled only under the -Xexperimental flag.'
106,'','bringing down -Yinline time by 33%\nAfter inlining one ore more callsites, Inliner runs anew a type-flow analysis for the same method, ie. the previous solution is discarded although it\'s a subset of that needed after the inlining(s). Background in: http://lamp.epfl.ch/~magarcia/ScalaCompilerCornerReloaded/2011Q4/Inliner.pdf\r\n\r\nInstead, we invalidate only the fragment of the CFG affected by inlining (the basic block where inlining occurred and newly added basic blocks) and let the iterative dataflow analysis start from there. It reaches the fixpoint faster.\r\n\r\nThe inlining decisions thus made are exactly the same as with the slower version, see -Ylog:inliner, with a focus on lines starting with "[log inliner] Inlining"\r\n\r\nreview by @VladUreche @dragos @paulp'
105,'','Fixed a bug SI-5377 (https://issues.scala-lang.org/browse/SI-5377).\n'
104,'','Make AnyValManifest not a sealed class.\nScala+GWT has a whole new hierarchy of Manifests that\r\ndoes not use reflection. Every type in new hierarchy\r\nis a subtype of a type from old hierarchy. Sealed modifier\r\nintroduced in 2e92de4cd66532404081eec6b9e82c6f85b51434\r\nbreaks this scheme. Removing it so Scala+GWT can compile again.'
103,'','Preserve attribute order in inline XML\n'
102,'','Fixed instrumented.jar and scalacheck.jar location\nDepending on the file order in the directory, PathSettings.srcSpecLib\r\ncould end up as "instrumented.jar.desired.sha1" instead of "instrumented.jar"\r\nwhich would cause all the specialized tests to fail.\r\n\r\nThe same goes for scalacheck.jar'
101,'','Improve description of flatten, flatMap\nAdd examples and better explain the expected return type of the\r\nmethods flatMap and flatten.\r\n\r\nCloses SI-5371.'
100,'','Explain Function1 vs PartialFunction\nAdd an explanation in PartialFunction as to how it differs from Function1,\r\nwith examples of what it can do that Function1 cannot.\r\n\r\nMake it explicit that calling apply may throw exceptions in both of them,\r\neven in the case where isDefinedAt returns true.\r\n\r\nCloses SI-5370.'
99,'','Explain Function1 vs PartialFunction\nAdd an explanation in PartialFunction as to how it differs from Function1,\r\nwith examples of what it can do that Function1 cannot.\r\n\r\nMake it explicit that calling apply may throw exceptions in both of them,\r\neven in the case where isDefinedAt returns true.'
98,'','Cleanup after "Fixed equality and string representation of xml attribute...\n...s with null value"\r\n\r\nThis commit reverts the following two commits:\r\n5f2568e36b87d183fd4e4442d5c304db628846c4 - "Revert "Accept prefixed xml attributes with null value"\r\nb00002f9049c034510438881b4a4449d73fe2f54 - "Disabling some scaladoc tests."\r\nand fixes a scaladoc test broken by:\r\n4787f883604d1344257c0b40c15790c3dde477f2 - "Fixed equality and string representation of xml attributes with null value"'
97,'','Issue/4147\nMutable sorted sets implementation with tests.'
96,'',"Scaladoc tool merge from trunk\n\r\nMerged back into 2.9.x a bunch of commits to the scaladoc tool itself.\r\n\r\nMost notoriously left out were the commits that change use case, because the output was missing the method descriptions, and the template engine, which I couldn't get to work at all.\r\n"
95,'','Merge ??? from trunk\nAdded ??? and NotImplementedError because this seemed to be the\r\nopinion of the majority on the "Adding ??? to Predef?" thread on\r\nscala-internals. No review.\r\n\r\nThis change is pretty harmless, and if it\'s good enough for 2.10.0, it ought to be good enough for 2.9.2.'
94,'',"Merge migration warnings\n\r\nMerge new-style migration warnings. As far as I can tell without the binary checking too, it is binary compatible with 2.9.1. Some documentation updates leaked through in the merge, but I'm guessing this will make merging this easier if the overall documentation update is pulled in first."
93,'','Retain attribute order in inline XML\n'
92,'','Merge of library documentation from trunk\nThis is a merge of various commits in the past six months to trunk that updated API documentation.\r\n\r\nI avoided as much as possible including any commits that changed code as well, and eye-balled the ones that got through to ensure the code change was purely cosmetic.\r\n\r\nA few big documentation commits were left out because they included code changes, even though they looked like purely cosmetic ones. The task was hard enough as it was without adding that trouble to it, so, if you plan to commit documentation changes in the future, *do not touch code!*\r\n'
91,'','Backport of interface minimization to 2.9.x\nJust that. Specialized tests fail for me, with or without this commit.'
90,'','Fixing toIndexedSeq\nRemoved redundant type param that hampers inference'
89,'','Remove maven deply from epfl-publish script.\nThis is done by the separate scala-nightly-maven-deploy jenkins job, doing it here fails depending on the build machine (/home/linuxsoft/... is not available everywhere).'
88,'','Added toString to Codec class (uses Codec.name).\nAfter running "Implicitly[Codec]" I had to look up Codec in the scaladocs to see what field would describe the implicit Codec.  This pull request simply adds Codec.toString.'
87,'','Xml attribute fixes\n- Fixed equality and string representation of xml attributes with null value\r\n- Accept prefixed xml attributes with null value\r\n\r\nMore details can be found in the commit messages.'
86,'',"Fix for implicits problem SI 5354\nThe reason why the test case compiled without error is pretty  devious: When checking the `Foo.x' implicit, a CyclicReference error occurs which causes the alternative to be discarded. Why a CylicReference? Because the inferencer tries to decide whether the owner of `z` is a subclass of the owner od `x`. To do this, it computed the info of the owner of `z1`, which is not complete because no result type for `f1` was given. Hence a CyclicReference error.\r\n\r\nThe fix is twofold: (1) We make isNonBottomSubClass smarter so that it always returns false if the symbol in question is not a type; hence the info need not be computed. (2) It's dubious to swallow CyclicReference errors anywhere, but I deemed it too risky to propagate them. But at least the CyclicReference is now logged if -Ylog-implicit is true. This hopefully spares future maintainers the same detective work I had to go through when digging this out."
85,'','updated gitignore.SAMPLE, moved removed . from .project.SAMPLE to be in ...\n...line with the other files.'
84,'','Topic/capturing\nRefactoring of the ways free variables are boxed. This is essential to make progress with reify.'
83,'',"All projects can be locked now.\n* Added 'lock' key to write 'compile.lock' file to target dir.\r\n* Added 'unlock' key to delete 'compile.lock' file to target dir."
82,'',"Immutable TreeMap/TreeSet performance (SI-5331)\nAs discussed on the scala-internals mailing list. There are some further improvements related to performance and code.\r\n\r\nNote: This breaks test/files/run/t2873.scala, since it uses RedBlack#Empty for testing for the absence of a compiler bug. I don't know how to fix this test so that it still tests for the same compiler bug."
81,'','buildlocker for ant\nThis new command is more or less equivalent to regular "build".\r\nIt is capable of:\r\n1) automatically unlocking locker\r\n2) not building stuff that hasn\'t changed\r\n3) packing locker classes into JARs at build\\palo\\lib\r\n4) populating bin directory at build\\palo\\bin\r\n\r\nAll in all, buildlocker lets one work with locker as if it were quick.\r\nExcept that it is rebuilds quicker than quick by a factor of 2x.\r\n\r\nFastlocker does exactly the same, but without packing stuff into JARs.\r\nThis makes things even faster.\r\n\r\nOf course, both targets don\'t build anything except library and compiler,\r\nso they aren\'t appropriate for all workflows, but, it was useful for me!\r\n\r\nP.S. Good news: you can use partest with locker, but it\'s not obvious.\r\n\r\nFirst, you need to transplant missing stuff that is necessary to run partest.\r\nI did it by maintaining a parallel clone of my repository that is used only\r\nto produce partest dependencies (partest itself, scalap and library/actors).\r\n\r\nSecond, partest has to be switched into "testClasses" mode, which is tricky.\r\nI honestly tried to find out how to do this, but then fell back to a hack:\r\nhttps://gist.github.com/1525721.\r\n\r\nFinally, you need a special launcher (I haven\'t made friends with std script).\r\nThe launcher is quite simple and looks as follows: https://gist.github.com/1525720'
80,'','Fix SI-5341: PhaseAssembly.removeDanglingNodes removes elements from mutable.Map during iteration.\nThis has no performance impact. See the following for more information:\r\n\r\nhttps://issues.scala-lang.org/browse/SI-5341'
79,'','A handful of tests for closures under reification\n'
78,'','scalacheck now also has pre-scalacheck and its personal timer\n'
77,'','Addresses a bug in SimpleDateFormatter\nThe point is that in Windows with non-English locale the "MMMM" part turns into gibberish. SimpleDateFormatter asks the OS for a byte array that represents month name in system locale, and then transcodes these bytes into utf-8 regardless of the system encoding. On my laptop (with Russian locale) the result looks as following:\r\n\r\nbuild time: 25 ─хърсЁ№ 2011, 15:57:23\r\n\r\nJust in case you don\'t know Russian, this is a meaningless set of characters =)\r\n\r\nThe solution is to get these bytes from the crazy string produced by SimpleDateFormatter and create a new string that uses correct encoding. However, even if you do this in Ant (which requires writing a custom task), the result will not be perfect:\r\n\r\nbuild time: 25 Декабрь 2011, 15:57:23  \r\n\r\nNow these characters indeed say "December" in Russian, but the grammatical case of the word "Декабрь" doesn\'t agree with the numeral "25", so the entire printout isn\'t a correct Russian phrase.'
76,'',"fixes #5104 and related NaN ordering inconsistencies\nThe bug was caused by the inconsistency between j.l.Math.min() and\r\nj.l.Double.compareTo() wrt NaN (j.l.Math.min() considers NaN to be\r\nless than any other value while j.l.Double.compareTo() says it's\r\ngreater...)\r\n\r\nThe fix changes Ordering.{FloatOrdering,DoubleOrdering) to base\r\nit's results on primitive comparisons and math.{min,max} instead\r\nof j.l.{Float,Double}.compareTo()"
75,'',"optimizing codegen for virtpatmat\nhere's what I've been working on for the last month\r\n\r\n- better codegen (no more option-boxing, lighter footprint of required methods on the monad, better translation for alternatives, distinguishing guards and intermediate conditions)\r\n- sharing optimization (sharing is detected by hashconsing Conds that approximate the condition checked by a TreeMaker)\r\n- emitting switches (including sharing for alternatives)\r\n\r\nin benchmarking the compiler compiling itself and the library, -Yvirtpatmat -Ydead-code -Ycloselim slows the compiler down by 2% on my mac"
74,'','Tests for recently submitted SI-5334\n'
73,'','Documented emptyValDef field\nhttps://github.com/scala/scala/pull/71 done right'
72,'','Improvement to resetAttrs and reification\nHere are some changes to resetAttrs and reification which are useful independently of further progress.'
71,'','A couple of minor fixes\n'
70,'',"Feature/inheritdoc and proper usecase comment inheritance/override\nIt didn't merge properly into master, because git was skipping one commit along the way (no idea why git was simply skipping over it). Rebased on the latest master and everything works fine now.\r\n\r\n@paulp Do you use a tool to check for whitespace? If so, please let me know so I get a better pull request acceptance rate :p And btw, no, I can't see whether the pull request is not merging well, I'm not part of the scala organization :(\r\n\r\n"
69,'','Feature/inheritdoc\nAdded the @inheritdoc annotation that behaves similarely to Javadoc\r\nhttp://docs.oracle.com/javase/1.5.0/docs/tooldocs/windows/javadoc.html#{@inheritDoc}'
68,'','Made -Ystop-after:parser work correctly\nWithout this fix running a compiler with the aforementioned option\r\nleads to a crash (because namerPhase gets resolved to a NoPhase).'
67,'','Attempt to fix classloader issues\n@odersky writes: When doing reflect.mirror.ClassWithName("foo")\r\nin the REPL, we get a NullPointerException. It goes away if we have\r\nthis fallback in defaultClassLoader.\r\n\r\nNot sure it\'s the right fix, though.\r\n\r\nFixes SI-5226, review by @odersky'
66,'','Migrate SBT script into master\nMoves the SBT build into master so folks can start trying it out and ensuring that things work.\r\n\r\n* Modifies Partest for SBT hooks\r\n* Modifies "manmaker" so SBT can hook into it\r\n* Adds a new SBT build that should support general purpose Scala development\r\n\r\nReview Requests\r\n----------------------\r\nPartest hook Review by @paulp\r\nSBT build review by @harrah\r\n'
65,'','Rename .project to .project.SAMPLE\nThis should have been done a long time ago, when .classpath was renamed to .classpath.SAMPLE. Both files are needed to import the scala compiler in Eclipse, and having just one guarantees a broken project.'
64,'','Fixed "Definition Classes" in bug #5287\nand fixed usecase param, tparam and return overriding.\r\n\r\nLast one, I promise, I didn\'t notice it reversed the commit order in the webpage!\r\n'
63,'','Fixed "Definition Classes" in bug #5287\nand fixed usecase param, tparam and return overriding.'
62,'','Fix #5293 - changed the way hashcode is improved in hash sets.\nThe hash code is further improved by using a special value in the hash sets\r\ncalled a `seed`. For sequential hash tables, this value depends on the size\r\nof the hash table. It determines the number of bits the hashcode should be\r\nrotated. This ensures that hash tables with different sizes use different\r\nbits to compute the position of the element. This way traversing the elements\r\nof the source hash table will yield them in the order where they had similar\r\nhashcodes (and hence, positions) in the source table, but different ones in\r\nthe destination table.\r\n\r\nIdeally, in the future we want to be able to have a family of hash functions\r\nand assign a different hash function from that family to each hash table\r\ninstance. That would statistically almost completely eliminate the possibility\r\nthat the hash table element traversal causes excessive collisions.\r\n\r\nI should probably @mention extempore here.'
61,'','Fix #5293 - changed the way hashcode is improved in hash sets.\nThe hash code is further improved by using a special value in the hash sets\r\ncalled a `seed`. For sequential hash tables, this value depends on the size\r\nof the hash table. It determines the number of bits the hashcode should be\r\nrotated. This ensures that hash tables with different sizes use different\r\nbits to compute the position of the element. This way traversing the elements\r\nof the source hash table will yield them in the order where they had similar\r\nhashcodes (and hence, positions) in the source table, but different ones in\r\nthe destination table.\r\n\r\nIdeally, in the future we want to be able to have a family of hash functions\r\nand assign a different hash function from that family to each hash table\r\ninstance. That would statistically almost completely eliminate the possibility\r\nthat the hash table element traversal causes excessive collisions.\r\n\r\nI should probably @mention extempore here.'
60,'','unzip(3) on view now returns view.\n* Added unzip and unzip3 to TraversableViewLike\r\n* Added partest tests for unzip on views returning specific collection types.\r\n\r\nCloses SI-5053\r\nReview by @paulp'
59,'','Fixed "Definition Classes" in bug #5287\n'
58,'','Fixed the incorrect Definition Classes in SI-5287\n'
57,'','Improve quality of scalacheck range tests input and output.\nRemove some dead code, activate ByOne generator again, add generators\r\nfor inclusive ranges, add generators that concentrate on the boundaries,\r\nand add some print statements next to exceptions that might get eaten\r\nby out of memory errors.'
56,'',"Fix for SI-4929. Includes (previously failing) test case.\nThis uses thread-local variables, which is not ideal; however, I can't find any way to fix it otherwise that doesn't involve significant refactoring.\r\n\r\nI've created a new pull request because I believe my old one (https://github.com/scala/scala-minor-snafu/pull/3) might have been lost in the repo snafu; a branch in the new repo was created but it since seems to have disappeared. Apologies if this was unnecessary.\r\n"
55,'','typeParams now performs one more completion\nWhen tracking a problem in type inference during reflective compilation,\r\nMartin and I have discovered that under certain circumstances typeParams\r\ndoes not fully load the type.\r\n\r\nDuring a debugging session we found out that info first had the type of\r\nTopLevelCompleter, and after the load it was still not completed, having\r\nthe type of UnPickler$something$LazyTypeRef.\r\n\r\nAfter that discovery it became apparent that typeParams need to behave\r\nsimilarly to the info getter - allow for two completions, not just one.\r\n\r\nReview by @odersky, @adriaanm.'
54,'','Batch files no longer swallow exit codes\nUsually scripts like scala.bat and scalac.bat correctly propagate\r\nexit codes from underlying Java invocations. However, if you run these\r\nscripts as follows: "cmd /c scala ...", then errorlevel gets swallowed.\r\nThis simple patch fixes the aforementioned problem.\r\n\r\nFixes SI-5295, no review.'
53,'','Batch files no longer swallow exit codes\nUsually scripts like scala.bat and scalac.bat correctly propagate\r\nexit codes from underlying Java invocations. However, if you run these\r\nscripts as follows: "cmd /c scala ...", then errorlevel gets swallowed.\r\nThis simple patch fixes the aforementioned problem.\r\n\r\nFixes SI-5295, no review.'
52,'','Special treatment for package java in LiftCode\nBefore the fix classes from java.lang were reified as follows:\r\nSelect(\r\n  Select(Ident(staticModule("java").moduleClass), newTermName("lang")),\r\n  newTypeName("<class from java.lang>"))\r\n\r\nThat moduleClass thingie caused Typer to crash in the following manner:\r\nhttps://issues.scala-lang.org/browse/SI-5279.\r\n\r\nThat\'s why I adjust reifier to not emit the "moduleClass" part, so that\r\nthe stuff gets correctly processed by the typer.\r\n\r\nFixes SI-5279, review by @odersky.'
51,'','Clarify scala.collection.immutable.Map#withDefaultValue() docs.\nCopy the documentation from Map#withDefault() that get(), contains(),\r\niterator(), and keys() keys are not affected by withDefaultValue().'
50,'','Binary resolution limited.\nBinary library pull/push is limited to:\r\n- test/files\r\n- lib\r\n\r\nPart #2 of fixing resolution for general purpose usage.\r\n\r\nReview by @lrytz'
49,'','Migration improvements\nDon\'t show migration messages from 2.7 for people needing migration\r\nadvice for their 2.9 -> 2.10 move, but keep all the information\r\nfor developers needing it.\r\n\r\nXmigration accepts a specific version like -Xmigration:2.8 now.\r\nThis will show only migration warnings since that version.\r\n\r\nDefault for -Xmigration is "2.9".\r\n\r\nAdjusted tests, added some new. All tests pass.\r\n\r\nFixes SI-4990.'
48,'','Avoid calling apply twice on Range.foreach.\nOn micro-benchmarks, this resulted in slightly slower foreach loops\r\nfor small ranges (10-sized loops), but some gains for bigger loops\r\n(100-sized+). Small loops with Range are extremely slow compared to\r\nwhile loops anyway.\r\n\r\nMore importantly, it reduces the size of inlined code with -optimise,\r\nwhich increases the chance of inlining happening and of JVM further\r\nimproving upon it.\r\n\r\n\tFixes SI-5286'
47,'',"Ensure sha files don't go to production\nThis commit filters out the sha files that have been going into the\r\ndocs area of a distribution.  Really, I think examples might\r\nbelong in a separate project moreso than in the distro, but\r\nfor now just preventing the build information from leaking\r\ninto the distro is helpful.\r\n\r\nReview by: @lrytz"
46,'','Fixed #5054, #5287\nThe documents with use cases should be restructured like:\r\n\r\n  /**\r\n   * The full definition, either used with an implicit value or with an explicit one.\r\n   *\r\n   * Some more explanation on implicits...\r\n   *\r\n   * @param lost a lost parameter\r\n   * @return some integer\r\n   *\r\n   * @usecase def test(): Int\r\n   *\r\n   * This takes the implicit value in scope.\r\n   *\r\n   * Example: `test()`\r\n   *\r\n   * @usecase def test(explicit: Int): Int\r\n   *\r\n   * This takes the explicit value passed.\r\n   *\r\n   * Example: `test(3)`\r\n   */\r\n  def test(implicit lost: Int): Int'
45,'','Fixed use case signature problems in #5054\nThe flags attached to symbols depend on the order of access and this\r\naffects use cases. For a workaround, flags are copied from the full\r\nsignature, which is always correct. Closes #5054, will open another\r\nbug for the html itself.'
44,'','Fix reflective toolbox producing invalid bytecode\nWrapper method for AST undergoing a reflective compilation\r\nhas been incorrectly marked as static.\r\n\r\nThis was off the radars until one day the code being compiled declared\r\na top-level method. During flatten that method got hoisted into the\r\nwrapper module, and its invocation got translated into an instance\r\ncall upon the module. This led to static wrapper method trying to call\r\nan instance method, and that blew up the bytecode verifier. More info:\r\nhttps://issues.scala-lang.org/browse/SI-5266.\r\n\r\nFixes SI-5266, review by @odersky.'
43,'','Clean up standard/swing library by deprecating/moving code examples\nDeprecate scala/xml/include/sax/Main.scala.\r\nMove scala/swing/test/* to docs/examples.\r\n\r\nSaves 160KB in scala-swing.jar.\r\n\r\nFixes SI-4627.'
42,'','Migration message and version cleanup\nThe @migration annotation can now be used like @deprecation.\r\nOld syntax is still supported, but deprecated.\r\n\r\nImprove wording and consistency of migration messages, migration\r\nwarnings also print the version in which the change occurred now.\r\n\r\nPartially fixes SI-4990.'
41,'','Fix documentation error\nFix of scaladoc and sample code for https://issues.scala-lang.org/browse/SI-5113\r\n'
40,'','Migration rework #1:\n- The @migration annotation can now be used like @deprecation, old syntax is still supported, but deprecated.\r\n - Improved the wording and the consistency of most migration messages, migration warnings now also show the version the change occurred.\r\n - Adjusted test.\r\n - Partially fixes SI-4990.\r\n\r\nSome tests in specialized fail with "value integerBoxCount is not a member of object scala.runtime.BoxesRunTime", but it could also be my old machine I\'m currently testing on ...'
39,'','Reflective compiler now crashes properly\nAdjust toolbox to escalate errors reported during reflective compilation.\r\n\r\nWithout this functionality, errors get swallowed and lead to weirdness\r\nlike https://issues.scala-lang.org/browse/SI-5274. The only meaningful\r\npart of the output in the bug report linked above is the first line.\r\nSubsequent stack trace is at best useless and at worst misleading.\r\nNow the error report is much more sane: https://gist.github.com/1443232\r\n\r\nReview by @odersky.'
38,'','Moved example files from the standard library to docs/examples.\nNo reason we need to ship with three pictures of flowers and\r\none banana in the std lib. Fixes SI-4627.\r\n\r\nThis reduces the size of scala-swing.jar by ~140kb.'
37,'','Fixes the annoying spaces between name, type params and params in ScalaDoc\nThis time with the appropriate test fixes.'
36,'','Fix documentation typo.\n'
35,'','Fix documentation stutters.\n'
34,'','Update scaladoc links to collections overview.\nChange scaladoc links in collection classes to point at re-formatted\r\nCollections Overview on docs.scala-lang.org.  Fix minor typo:\r\ns/Ummutable/Immutable'
33,'','Changed scaladoc links in collection classes to point at re-formatted Collections overview\nAs per the suggestion from retronym, I updated the scaladoc links in the collection classes to point at the newly fancified Collections overview at docs.scala-lang.org (http://docs.scala-lang.org/overviews/collections/introduction.html).  Each link points to the relevant anchor in the overview.  \r\nI also fixed a typo: s/Ummutable/Immutable/.'
32,'','-Ydump-classes: the option to dump the generated bytecode\n-Ydump-classes option is intended to dump the compiler\r\ngenerated bytecode to the .class files in given directory.\r\nIt can be pretty useful for reflective compilation that utilizes\r\nin-memory classloaders, for example to check the files if compiler\r\nproduces invalid bytecode. In this case the dump helps to understand what\r\nexactly is wrong with the emitted class.\r\n\r\nThe option format is -Ydump-classes <dir>.'
31,'','Add a link to collections API overview into the scaladoc of collection classes\nRecently, on scala-debate, Martin Odersky wrote: "I think two of the things we need to do on the docs side is hide implementation details better in the ScalaDoc and put a link to the collections API overview\r\n\r\nhttp://www.scala-lang.org/docu/files/collections-api/collections.html\r\n\r\ninto the scaladoc of each collection class."\r\n\r\nI\'ve implemented the second suggestion. For the classes that have their own pages in the collections API overview, I\'ve added @see ("See also") links to their specific pages in the collections API overview. I used the existing @see from Array.scala as a model.'
30,'','Add link to collections API overview to scaladoc of collection classes (SI-5280)\nSee https://issues.scala-lang.org/browse/SI-5280\r\n\r\n\r\nRecently, on scala-debate, Martin Odersky wrote: "I think two of the things we need to do on the docs side is hide implementation details better in the ScalaDoc and put a link to the collections API overview\r\n\r\nhttp://www.scala-lang.org/docu/files/collections-api/collections.html\r\n\r\ninto the scaladoc of each collection class."\r\n\r\nI\'ve implemented the second suggestion. For the classes that have their own pages in the collections API overview, I\'ve added @see ("See also") links to their specific pages in the collections API overview. I used the existing @see from Array.scala as a model.'
29,'','Another test pack for reflection\nAlso see https://github.com/scala/scala/pull/25.'
28,'','A minor fix to -Yreify-copypaste.\nEmpty modifiers are now correctly printed out as "Modifiers()" instead of\r\nannoyingly verbose "Modifiers(Set(), newTermName(""), List())".\r\n\r\nNo review.'
27,'',"Fix path mangling for 'scala' shell script on MinGW/MSYS.\n"
26,'','Fix build on Windows.\na289465c70630719cbd3a74edf5502a156ef83c4 broke get-scala-revision.bat.'
25,'','Test pack for various flavors of reflection.\n'
24,'',"Reification of classes now produces trees that can be compiled and run.\nMultiple minor fixes to Martin's implementation of reflection infrastructure.\r\nDominating theme is allowing for the fact that compilation via reflection\r\ninvolves numerous exports/imports between various reflection universes.\r\n\r\nFixes SI-5230. Review by @odersky."
23,'',"Delegate to Java's implementation of signum for Long and Int.\nThe Java implementation is faster as it doesn't have branches.\r\n\r\njava.lang.Math includes implementations of signum for Double and Float,\r\nbut I didn't change the ones in scala.math because there is a difference\r\non how negative zero is handled."
22,'',"Add a mnemonic to help remember what's the difference between +:\nand :+, plus one for ++:."
21,'','Add withErrorMessage and withFailureMessage to Parsers.Parser,\nwhich can be used to reliably override the default no success\r\nmessages.'
20,'','Add filter/withFilter method to Parser\nComplements map and flatMap in for comprehensions. This is required when pattern matching is used on the\r\nresult of the generators.\r\n\r\nIt is implemented through a new filterWithError method on ParseResult.\r\n\r\nContributed by: Daniel C. Sobral'
19,'',"Test for SI-2856.\nAdding the test won't hurt, but waiting for Geoffrey (or someone else) to comment if this is completely fixed before closing it."
18,'','Test for SI-2080.\n'
17,'','Test for SI-3556.\nNot sure if this is completely fixed, because the compiler complains much earlier,\r\nbut I guess it cannot hurt to have it in place and recognize it early when this\r\nstarts moving again.'
16,'','Makes Range#sum an O(1) operation instead of an O(n) one.\nPartially fixes SI-4658. NumericRange stays slow, thanks to the brilliant idea that Numeric doesn\'t need a division operation.\r\n\r\nSome notes:\r\n\r\n - I did use `if` instead of `match` because I was not sure if there is a difference in performance especially with the work on the new pattern matcher.\r\n - I used `(len.toLong * (head + last) / 2)` instead of `(len.toLong * (head.toLong + last) / 2)` because I couldn\'t find a situation in which working with a Long here avoided an overflow error in the result. (There are no inputs where `head + last` would overflow but the result wouldn\'t.) The first one is more or less "overflow error compatible" to the slow O(n) way, while the second one produces different overflow errors. The only case where it avoided an overflow error was in Ranges with a single element, but the code before catches this, thanks to notnoop spotting it (https://github.com/scala/legacy-svn-scala/pull/83).'
15,'',"Added better warning message if you've forgotten to run pull-binary-libs...\n\r\n\r\nFixes the issue where someone checks out the scala repository fresh and ANT just issues a big old ugly error message rather than *telling* you that you have to run the pull-binary-deps.sh script.\r\n\r\nReview by @soundrabbit or @paulp"
14,'','Issue/5117\nMake Enumeration.ValueSet Serializable\r\n\r\nCloses SI-5117.\r\n\r\n(depends on https://github.com/scala/scala/pull/13)'
13,'','Enumeration and Enumeration.ValueSet improvements\n- Make Enumeration.ValueSet a SortedSet and back it by a BitSet\r\n- Add toBitMask and fromBitMask methods for value sets\r\n- Add an Ordering for the values\r\n- Deprecate names seq in the Enumeration constructor\r\n- Add + method to Value for easy ValueSet creation'
12,'','Improve performance of BitSet.size\nUsing java.lang.Long.bitCount for the size computation is a lot faster\r\nthan the previous Scala implementation. Closes SI-2196.'
11,'','Fixes the annoying spaces between name, type params and params ...\nin ScalaDoc.'
10,'','Tests for SI-3481.\nAll tests ran successfully except:\r\n\r\nscala/test/files/presentation/ide-bug-1000531\r\nscala/test/files/presentation/timeofday\r\nscala/test/files/presentation/properties\r\nscala/test/files/presentation/callcc-interpreter\r\n\r\nWhich failed with a TIMEOUT. I guess this is due to my slow machine and not related to the addition of a new test ...'
9,'','Makes it possible to use env(1) to run scala scripts, \nby dropping the requirement of a !# line when using env. This is how some other\r\nlanguages, such as ruby, are run.\r\n\r\nTypical usage:\r\n\r\n    #!/usr/bin/env scala\r\n    println("Hello, "+args(0)+"!")\r\n\r\nContributed by: Daniel C. Sobral'
8,'',"Re-enable RedBlack's ScalaCheck test, which was disabled at r21829.\nI haven't been able to find any reason for that reversal, but\r\nthis version is an improved version provided with SI-3796, which\r\nnever got committed along with the patch.\r\n\r\nThis version generates trees directly instead of using the methods\r\nunder test. It also puts an upper bound on tree size and, therefore,\r\nexecution time."
7,'','Fix typo on Regex documentation.\n'
6,'',"Example in scala.sys.process didn't match the text that describes it.\nFixed."
5,'',"reifyTree shouldn't emit plain TypeTree()'s, but rather their reified versions\nRelated to SI-5230, review by @odersky."
4,'','Improved BitSet implementations\n- Mutable and immutable BitSets now extend SortedSet, using a fixed\r\n  Ordering.Int and an efficient bit mask based rangeImpl()\r\n- fromArray methods in both implementations are deprecated in favor of\r\n  new fromBitMask and fromBitMaskNoCopy methods\r\n- New toBitMask method for converting bit sets back to Array[Long] bit\r\n  masks\r\n- immutable.BitSet uses a more efficient Builder, based on\r\n  mutable.BitSet (closes SI-4647)\r\n- Delete scala.tools.nsc.util.BitSet (not used anywhere)\r\n\r\nReview by @odersky'
3,'','Special treatment of emptyValDef in reify\nemptyValDef has special meaning in the compiler, so reify needs to preserve it by identity and not just by structure. Review by @xeno-by'
2,'','Fix part numbering in README\n'
1,'','Fix to AnnotationInfo position\nLazy annotation now return positions and one can also set them. Fixes a problem reported by Greg (no ticket created). Review by @gkossakowski'
4148,'','Fixes memory leak when using reflection\nReferences to Threads would be retained long after their termination if\r\nreflection is used in them. This led to a steady, long memory leak in\r\napplications using reflection in thread pools.\r\n\r\nCloses https://issues.scala-lang.org/browse/SI-8946\r\n\r\nMentioning @retronym @xeno-by \r\n'
4146,'',"SI-6519  PagedSeq is not lazy enough\nThis was actually an issue with `length` of all things--it wasn't stopping scanning when it was past the end of what was requested.  It'd just gratuitously read everything.\r\n\r\nAlso fixed an overflow bug with isDefinedAt along the way (start + index > Int.MaxValue would always return true despite never working)."
4145,'','SI-8924 No outer ref in LinearSeq iterator\nThe iterator for `LinearSeqLike` holds an outer pointer via\r\nthe call to `newBuilder`, which is used to empty the underlying\r\nsequence on `toList`.\r\n\r\nA better strategy is to use `these take 0` to create the empty\r\n`Seq`.  We can rely on `take 0` to mean the empty `Repr`.\r\n\r\nThe unit test confirms that a weak reference to the sequence\r\nis collectable after `seq.iterator.toList`.'
4144,'','SI-8951  SeqView and StreamView stack-overflow on index < 0 when flatMapped\nChecks and throws IndexOutOfBounds now.\r\n\r\nNo test, caught and checked by scala-collections-laws (line 405 presently).'
4143,'','SI-8695  SeqLike has unintuitive implementation of combinations\nClarified what `combinations` means in the docs.'
4142,'','SI-8783  MultiMap documentation for addBinding is incorrect\nFixed documentation to state that addBinding will not replace a `value` that is equal (according to ==).'
4141,'','SI-8970  hashCode of BigDecimal and Double do not match\nSwitched isValidDouble (binary equivalence) to isDecimalDouble (decimal expansion equivalence), as people generally do not care about the slew of extra decimal digits off the end of the binary approximation to a decimal fraction (decimal equivalence is the standard now).\r\n\r\nAdded minimal unit test to verify behavior.'
4139,'','SI-7965 Support calls to MethodHandle.{invoke,invokeExact}\nThese methods are "signature polymorphic", which means that compiler\r\nshould not:\r\n  1. adapt the arguments to `Object`\r\n  2. wrap the repeated parameters in an array\r\n  3. adapt the result type to `Object` if the enclosing expression\r\n     is a cast or if the application appears in the statement position\r\n     of a block.\r\n\r\nDispiritingly, my initial attempt to implement this touched the type\r\nchecker, uncurry, erasure, and the backend.\r\n\r\nHowever, I realized we could centralize handling of this in the typer\r\nif at each application we substituted the signature polymorphic\r\nsymbol with a clone that carried its implied signature, which is\r\nderived from the types of the arguments (typechecked without an\r\nexpected type) and position within and enclosing cast or block.\r\n\r\nThe test case requires Java 7+ to compile so is currently embedded\r\nin a conditionally compiled block of code in a run test.\r\n\r\nWe ought to create a partest category for modern JVMs so we can\r\nwrite such tests in a more natural style.\r\n\r\nHere\'s how this looks in bytecode. Note the `bipush` / `istore`\r\nbefore/after the invocation of `invokeExact`, and the descriptor\r\n`(LO$;I)I`.\r\n\r\n```\r\n% cat sandbox/poly-sig.scala && qscala Test && echo \':javap Test$#main\' | qscala\r\nimport java.lang.invoke._\r\n\r\nobject O {\r\n  def bar(x: Int): Int = -x\r\n}\r\n\r\nobject Test {\r\n  def main(args: Array[String]): Unit = {\r\n    def lookup(name: String, params: Array[Class[_]], ret: Class[_]) = {\r\n      val lookup = java.lang.invoke.MethodHandles.lookup\r\n      val mt = MethodType.methodType(ret, params)\r\n      lookup.findVirtual(O.getClass, name, mt)\r\n    }\r\n    def lookupBar = lookup("bar", Array(classOf[Int]), classOf[Int])\r\n\r\n    val barResult = lookupBar.invokeExact(O, 42).asInstanceOf[Int]\r\n    ()\r\n  }\r\n}\r\n\r\nscala> :javap Test$#main\r\n  public void main(java.lang.String[]);\r\n    descriptor: ([Ljava/lang/String;)V\r\n    flags: ACC_PUBLIC\r\n    Code:\r\n      stack=3, locals=3, args_size=2\r\n         0: aload_0\r\n         1: invokespecial #18                 // Method lookupBar$1:()Ljava/lang/invoke/MethodHandle;\r\n         4: getstatic     #23                 // Field O$.MODULE$:LO$;\r\n         7: bipush        42\r\n         9: invokevirtual #29                 // Method java/lang/invoke/MethodHandle.invokeExact:(LO$;I)I\r\n        12: istore_2\r\n        13: return\r\n      LocalVariableTable:\r\n        Start  Length  Slot  Name   Signature\r\n            0      14     0  this   LTest$;\r\n            0      14     1  args   [Ljava/lang/String;\r\n           13       0     2 barResult   I\r\n      LineNumberTable:\r\n        line 16: 0\r\n}\r\n```\r\n\r\nI\'ve run this test across our active JVMs:\r\n\r\n```\r\n% for v in 1.6 1.7 1.8; do java_use $v; pt --terse test/files/run/t7965.scala || break; done\r\njava version "1.6.0_65"\r\nJava(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)\r\nJava HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)\r\nSelected 1 tests drawn from specified tests\r\n\r\n.\r\n\r\n1/1 passed (elapsed time: 00:00:02)\r\nTest Run PASSED\r\njava version "1.7.0_71"\r\nJava(TM) SE Runtime Environment (build 1.7.0_71-b14)\r\nJava HotSpot(TM) 64-Bit Server VM (build 24.71-b01, mixed mode)\r\nSelected 1 tests drawn from specified tests\r\n\r\n.\r\n\r\n1/1 passed (elapsed time: 00:00:07)\r\nTest Run PASSED\r\njava version "1.8.0_25"\r\nJava(TM) SE Runtime Environment (build 1.8.0_25-b17)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\r\nSelected 1 tests drawn from specified tests\r\n\r\n.\r\n\r\n1/1 passed (elapsed time: 00:00:05)\r\nTest Run PASSED\r\n```'
4137,'','Convert Java throws clauses to @throws annotations\n'
4136,'',"Sharing GenBcode backend between scalac and dotty\nThis PR abstracts GenBcode implementation classes from existence of global using forwarders, which would have a different implementation in dotty.\r\n\r\nThe main class here is BackendInterface that defines everything that backend uses.\r\nWhile it would be good to have backend use less that 150 methods on `Symbol` this commit doesn't address this issue: it tries to not introduce any changes in behavior.\r\n\r\nIn order to not loose perfromance and not allocate options during pattern matching this implemtation relies on name-based pattern matching with preallocated objects, this makes BackendInterface non-thread safe, but as of now it is used only in single thread. If several threads will ever be used to transfrom AST to asm bytecode than each of threads will need to own its own instance of BackendInterface.\r\n\r\n@lrytz please have a look."
4133,'','SI-8976 MutableList.tail.iterator.size is length\nThis is fixed by capping the length of iterator.\r\n\r\nThat is OK because mutating the list by adding to it during\r\niteration is not allowed.\r\n\r\nA test is added that will no doubt be superseded by the QCC tests.\r\n(Quasi-Comprehensive Collections.)\r\n\r\nReview by @Ichoran '
4131,'','SI-8981 Tweak REPL help\nTweak colon command processing.\r\n\r\nFixes an unhelpful message about the ambiguity of colon.\r\n\r\nCurrently,\r\n```\r\nscala> :\r\n is ambiguous: did you mean :edit or :help or :history or :h? or :imports or :implicits or :javap or :line or :load or :paste or :power or :quit or :replay or :reset or :save or :sh or :settings or :silent or :type or :kind or :warnings?\r\n```\r\nAfter the fix, just show the help summary.'
4130,'','Let users specify a different location for build repos than user home\nThis change is helpful e.g. when setting up CI for Scala and it\'s important which directories are used by a build.\r\n\r\nBy default it uses .m2, .pax and .sbt/cache from user home (in general $HOME). Sometimes it\'s not possible to use this location and also changing a value of $HOME is not an option.\r\n\r\nThe required location should be specified both for ant\'s build.xml and used scripts.\r\nIn the first case specifying -Duser.home is all, what we need. But we can\'t just set _JAVA_OPTIONS\r\nas then partest tests fail due to the unexpected output (an additional \'Picked up java options (...)\' messages). We can set ANT_OPTS instead of this. The only problem was that OSGi JUnit tests (only they) were using $HOME anyway. I forced them to use -Duser.home by propagating this option in build.xml.\r\n\r\nbinary-repo-lib.sh is changed to use a special env variable or $HOME, when this variable is not set. Then we can do:\r\n\r\nexport SCALA_BUILD_REPOS_HOME=\\<some_dir\\>\r\nexport ANT_OPTS="$ANT_OPTS -Duser.home=$SCALA_BUILD_REPOS_HOME"\r\nant dist\r\n\r\nand it will create all directories .m2, .pax and .sbt/cache in a specified $SCALA_BUILD_REPOS_HOME directory.\r\n\r\nNote: maven\'s settings.xml should be located in this used $SCALA_BUILD_REPOS_HOME/.m2 and point to the repository like e.g. \\<some_dir\\>/.m2/repository'
4126,'','Upgrade Maven Gpg plugin from 1.3 to 1.5 version.\nHopefully, this will help with failing uploads to the JFrog repo that\r\nbreaks PR validation.'
4125,'',"SI-8944 A more resiliant naming scheme for case accessors\nCase class parameters that are less that public have an extra\r\naccessor method created to ensure universal pattern matchability.\r\nSee #4081 for more background.\r\n\r\nCurrently, this is given a fresh name based on the parameter name.\r\nHowever, this is fragile and the name can change based on unrelated\r\nedits higher up in the source file.\r\n\r\nThis commit switches to a stable naming scheme for these methods.\r\n\r\nA non-public case field `foo` has a corresponding accessor\r\n`foo$access$N`, where `N` is the index of the parameter within\r\nthe constructor parameter list.\r\n\r\nThe enclosed tests show a case that used to trigger a linkage\r\nerror under separate compilation that now works; shows that by\r\nchoosing the `foo$access$1` rather than `foo$1` we don't clash with\r\nlambda lifted methods in the class; and shows the names of the\r\naccessor methods as seen via Java reflection.\r\n\r\nJust submitting for a test run for now.\r\n\r\n/cc @gkossakowski who is usually has some good insights when it\r\ncomes to accessor naming schemes. This is one of the cross\r\ncompilation unit use cases that we have to deal with that Java\r\ndoesn't."
4122,'adriaanm','SI-7459 Handle pattern binders used as prefixes in TypeTrees.\nMatch translation was incorrect for:\n\n    case t => new t.C\n    case D(t) => new d.C\n\nWe would end up with Types in TypeTrees referring to the wrong\nsymbols, e.g:\n\n    // t7459a.scala\n    ((x0$1: this.LM) => {\n      case <synthetic> val x1: this.LM = x0$1;\n      case4(){\n       matchEnd3(new tttt.Node[Any]())\n      };\n      matchEnd3(x: Any){\n        x\n    }\n\nOr:\n    // t7459b.scala\n     ((x0$1: CC) => {\n       case <synthetic> val x1: CC = x0$1;\n       case4(){\n         if (x1.ne(null))\n           matchEnd3(new tttt.Node[Any]())\n         else\n           case5()\n       };\n\nThis commit:\n\n  - Changes `bindSubPats` to traverse types, as well as terms,\n    in search of references to bound symbols\n  - Changes `Substitution` to reuse `Tree#substituteSymbols` rather\n    than the home-brew substitution from `Tree`s to `Tree`s, if the\n    `to` trees are all `Ident`s\n\nI had to dance around the awkward handling of "swatches" (exception\nhandlers that can be implemented with JVM native type switches) by\nduplicating trees to avoid seeing the results of `substituteSymbols`\nin `caseDefs` after we abandon that approach if we detect the\npatterns are too complex late in the game.\n\nI also had to add an escape hatch for the "type selection from\nvolatile type" check in the type checker. Without this, the\ntranslation of `pos/t7459c.scala`:\n\n    case <synthetic> val x1: _$1 = (null: Test.Mirror[_]).universe;\n    case5(){\n      if (x1.isInstanceOf[Test.JavaUniverse])\n        {\n          <synthetic> val x2: _$1 with Test.JavaUniverse = (x1.asInstanceOf[_$1 with Test.JavaUniverse]: _$1 with Test.JavaUniverse);\n          matchEnd4({\n            val ju1: Test.JavaUniverse = x2;\n            val f: () => x2.Type = (() => (null: x2.TypeTag[Nothing]).tpe);\n\n.. triggers that error at `x2.TypeTag`.\n\nReview by @adriaanm. I think we can do better for 2.12 as we discussed in #3490.\nBut we should consider booking this progress.'
4112,'gkossakowski',"SI-8502 Improve resiliance to absent packages\nWhen unpickling a class, we create stub symbols for references\nto classes absent from the current classpath. If these references\nonly appear in method signatures that aren't called, we can\nproceed with compilation. This is in line with javac.\n\nWe're getting better at this, but there are still some gaps.\nThis bug is about the behaviour when a package is completely\nmissing, rather than just a single class within that package.\n\nTo make this work we have to add two special cases to the unpickler:\n\n  - When unpickling a `ThisType`, convert a `StubTermSymbol` into\n    a `StubTypeSymbol`. We hit this when unpickling\n    `ThisType(missingPackage)`.\n  - When unpickling a reference to `<owner>.name` where `<owner>`\n    is a stub symbol, don't call info on that owner, but rather\n    allow the enclosing code in `readSymbol` fall through to\n    create a stub for the member.\n\nThe test case was distilled from an a problem that a Spray user\nencountered when Akka was missing from the classpath.\n\nTwo existing test cases have progressed, and the checkfiles are\naccordingly updated.\n\nReview by @gkossakowski"
4107,'adriaanm','SI-7784 Allow a singleton type over a constant value defn.\nWhen typechecking a `SingletonTypeTree`, we must `deconst`\nthe type of the typechecked reference tree to avoid collapsing\n`a.type` into a constant type if `a` is a constant value definition.\n\nReview by @adriaanm\n\nThought this might be worth consideration in light of your SIP-23\nwork.'
4098,'Ichoran','SI-7128  copyToArray(xs, 0, 0) should not fail\nFixed all copyToArray methods to do exactly what the docs say\nthey do, with the least-suprise behavior of not throwing an\nexception if you ask to copy nothing (but would have copied\nout of range).\n\nIterator had an undocumented requirement for the target index\nto be in range regardless if anything happened; this has been\nremoved.'
4085,'adriaanm',"Suppress match analysis under -Xno-patmat-analysis\nNoSuppression doesn't suppress. FullSuppression does.\r\nNow using the latter when running under `-Xno-patmat-analysis`.\r\n\r\nI should really have tested. /me hides under a rock"
4082,'','Fix SI-8336: scala.util.Try: fold/toEither\nhttps://issues.scala-lang.org/browse/SI-8336 :\r\n\r\nWould be nice to be able fold `Try` when wrapping unsafe operation ; e.g.:\r\n\r\n```scala\r\nval msg = Try(inputStream.toInt).\r\n  fold("NumberFormatException for " + _, "Valid int: " + _)\r\n\r\nIn same spirit, having `Try` as `Either` could be useful.\r\n```'
4078,'adriaanm','Avoid the `CNF budget exceeded` exception via smarter translation into CNF.\nThe exhaustivity checks in the pattern matcher build a propositional\r\nformula that must be converted into conjunctive normal form (CNF) in\r\norder to be amenable to the following DPLL decision procedure.\r\nHowever, the simple conversion into CNF via negation normal form and\r\nShannon expansion that was used has exponential worst-case complexity\r\nand thus even simple problems could become untractable.\r\n\r\nA better approach is to use a transformation into an _equisatisfiable_\r\nCNF-formula (by generating auxiliary variables) that runs with linear\r\ncomplexity. The commonly known Tseitin transformation uses bi-\r\nimplication. I have choosen for an enhancement: the Plaisted\r\ntransformation which uses implication only, thus the resulting CNF\r\nformula has (on average) only half of the clauses of a Tseitin\r\ntransformation.\r\n\r\nThe Plaisted transformation uses the polarities of sub-expressions to\r\nfigure out which part of the bi-implication can be omitted. However,\r\nif all sub-expressions have positive polarity (e.g., after\r\ntransformation into negation normal form) then the conversion is\r\nrather simple and the pseudo-normalization via NNF increases chances\r\nonly one side of the bi-implication is needed.\r\n\r\nI implemented only optimizations that had a substantial\r\neffect on formula size:\r\n- formula simplification, extraction of multi argument operands\r\n- if a formula is already in CNF then the Tseitin/Plaisted\r\n  transformation is omitted\r\n- Plaisted via NNF\r\n- omitted: (sharing of sub-formulas is also not implemented)\r\n- omitted: (clause subsumption)\r\n\r\nReview by @adriaanm '
4061,'',"SI-8924 don't hold reference to list in iterator\nCurrent implementation of LinearSeqLike.iterator holds\r\nreference to complete sequence. This prevent garbage collecting\r\nof List elements while we keep reference to iterator somewhere.\r\n\r\nThis commit removes reference from Iterator implementation. This\r\nallow garbage collection of List while we iterating over its\r\nelements (when there is no other references to List in our program).\r\n\r\nTest program posted to https://issues.scala-lang.org/browse/SI-8924.\r\nIt is hard to turn it into unit test since it run relatively long,\r\ncreates GC pressure and run's out of memory on failure."
4060,'',"New classpath and sourcepath implementation\nNew classpath and sourcepath implementation\r\n\r\nIt's finished work started and abandoned by @gkossakowski\r\nRelated discussion: https://groups.google.com/forum/#!msg/scala-internals/xgb5YbKvQcw/7bcbsvKkzQkJ\r\n\r\nThe main goal of Grzegorz was to improve the efficiency of classpath. At the end it turned out that the efficiency improvement is not significant so Grzegorz stopped working on that. \r\n\r\nOn the other hand it was worth to continue these works due to several reasons:\r\n- it's possible to reduce memory consumption significantly\r\n- each possible efficiency improvement is important\r\n- the old classpath is maybe too complex because it was created when e.g. .NET was supported - it can be simpler\r\n\r\nThe most of the code written by Grzegorz has been rewritten.\r\n\r\nNew (flat) classpath has dedicated classes for various file types characteristic for Scala with JVM backend - what allows us to create more efficient, more low-level operations.\r\nTo reduce memory consumption there's added caching for jar/zip files. So that we can reuse existing instances, when we create entries for the same files once again.\r\n\r\nOne of the most important things took into account during creating this implementation was adding it as an optional feature, which can be marked as experimental and turned on using flag. At the beginning users will use an old classpath implementation by default and they will be able to use the new implementation when:\r\n- they will want to test it (feedback)\r\n- they will want to gain benefits which it provides\r\n\r\nI took into account also planned better support for JSR-223. So it supports for instance ManifestResources introduced here: https://github.com/scala/scala/pull/2238\r\nThere was no proper description what's going on with these changes and how to test them but @rjolly sent me some useful papers.\r\nThis particular type of classpath can be tested using e.g. command:\r\njrunscript -classpath scala-compiler.jar;scala-reflect.jar;scala-library.jar -l scala\r\nwhere scala-library.jar was modified using https://github.com/rjolly/jarlister\r\n\r\nI tested flat classpath in several ways:\r\n- First of all obviously all tests (there are added certain new ones especially for this implementation) pass and bootstrapping also works.\r\n\r\n- I built Scala IDE using my version of Scala and tested it with a very large codebase with about 100 projects. I turned off the closing of unused presentation compilers which I added lately. And after that I did certain custom operation which does a deep refresh of all projects (close projects, regenerate the workspace, open projects).\r\n\r\nThe flat classpath with turned on caching allowed me to reduce allocated memory in old gen from about 6GB (for current classpath) to about 750MB. So in the case of IDE and presentation compilers the gain is really significant.\r\n\r\n- The efficiency of both implementations in real use cases seems to be similar but probably it could be tested better. In small benchmarks the flat one was winning.\r\n\r\n- On the other hand there are situations when the gain is quite significant. When running a whole Scala's test suite:\r\n\r\nTests using a computer with SSD:\r\n\r\n| Time type:|      recursive classpath      | flat classpath|\r\n| ------------- |:-------------:| -----:|\r\n| avg of 4 repetitions     | 29 minutes 34 seconds | 27 minutes 15 seconds |\r\n| min     | 29 minutes 28 seconds     |   27 minutes 6 seconds |\r\n| max | 29 minutes 41 seconds      |    27 minutes 32 seconds |\r\n\r\nTests using other computer with the scala project directory moved to some external HDD connected via USB cable:\r\n\r\n| Time type:|      recursive classpath      | flat classpath|\r\n| ------------- |:-------------:| -----:|\r\n| avg of 4 repetitions     | 56 minutes 43 seconds | 52 minutes 38 seconds |\r\n| min     | 55 minutes 40 seconds     |   52 minutes 8 seconds |\r\n| max | 58 minutes 26 seconds      |    53 minutes 0 seconds |\r\n\r\nNote: I changed the classPath method in Global to the dynamic dispatch. And now there's returned a base class of the old and the new classpath with common interface based on a part of API of the old classpath. I tested it with sbt and there's no problem with compiling projects etc. Previously Grzegorz created certain hack for sbt's compiler interface where current classpath was calling the flat one, when it was needed. I changed this ugly solution to this mentioned dynamic dispatch and removed a hack. We can return to something like this, if it'd turn out that it's necessary.\r\n\r\nNote2: FYI, commits of Grzegorz don't compile - as it was one big hack with some files which were not pushed. All my commits compile and for all of them JUnit tests pass. The bootstrapping and partest tests wouldn't work for some first ones when cp implementation type would be set to flat (firstly I had to make it working). But for several last ones they work without problems so finally I even commited a change where the flat classpath is set as a default one.\r\n\r\nAnyway I squashed about 70 commits to just several ones trying by the way to preserve some way of thinking which is shown e.g. in the commit messages. \r\n\r\nLastly, the below disclaimer is required by the lawyers:\r\n\r\nTHIS PROGRAM IS SUBJECT TO THE TERMS OF THE BSD 3-CLAUSE LICENSE.\r\n\r\nTHE FOLLOWING DISCLAIMER APPLIES TO ALL SOFTWARE CODE AND OTHER MATERIALS CONTRIBUTED IN CONNECTION WITH THIS SOFTWARE:\r\nTHIS SOFTWARE IS LICENSED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY OF NON-INFRINGEMENT, ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\nOR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. THIS SOFTWARE MAY BE REDISTRIBUTED TO OTHERS ONLY BY EFFECTIVELY USING THIS OR\r\nANOTHER EQUIVALENT DISCLAIMER IN ADDITION TO ANY OTHER REQUIRED LICENSE TERMS.\r\nONLY THE SOFTWARE CODE AND OTHER MATERIALS CONTRIBUTED IN CONNECTION WITH THIS SOFTWARE, IF ANY, THAT ARE ATTACHED TO (OR OTHERWISE ACCOMPANY) THIS SUBMISSION (AND ORDINARY\r\nCOURSE CONTRIBUTIONS OF FUTURES PATCHES THERETO) ARE TO BE CONSIDERED A CONTRIBUTION. NO OTHER SOFTWARE CODE OR MATERIALS ARE A CONTRIBUTION."
4041,'',"SI-6723 Don't count `@inline` methods when computing the inline budget\nOtherwise the inlining budged exceeds when many `@inline` methods are\r\ninvoked. This triggers inline warnings for those that aren't inlined\r\nanymore."
3992,'',"Add composition and subst methods to =:= and <:<\nBoth scalaz.Leibniz and scalaz.Liskov have useful methods which are not\r\npresent in Predef.\r\n\r\nhttps://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Leibniz.scala\r\n\r\nhttps://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Liskov.scala\r\n\r\nI don't see a reason why some of the methods should not be present in\r\nscala-library itself, other than the implementations of these methods\r\nhave to be done carefully, since Predef uses the singleton trick. You\r\ncan read how scalaz makes a different trade-off on the Typelevel blog:\r\n\r\nhttp://typelevel.org/blog/2014/07/06/singleton_instance_trick_unsafe.html\r\n\r\nThis commit adds the following:\r\n\r\n* <:<#compose\r\n* <:<#andThen\r\n* <:<#subst\r\n\r\n* =:=#symm\r\n* =:=#compose\r\n* =:=#andThen\r\n* =:=#subst\r\n\r\nThis means equality is now an equivalence relation:\r\n\r\n* Reflexivity (already existed)\r\n* Symmetry\r\n* Transitivity\r\n\r\nI find these very useful when trying to do proofs of equality in Scala.\r\n\r\n---\r\n\r\nCarefully reviewing this code is important, all implementations are casts.\r\n\r\n@djspiewak\r\n\r\n@S11001001"
3934,'lrytz','FSC server port selected by argument\nDiscussed for example in https://issues.scala-lang.org/browse/SI-4504\r\n\r\nLogic is following: If the existing -server argument has form localhost:port and there is no server running, then a new server is started at the given port. Therefore fsc can be used as without the server argument but fixing the port where to connect and start. If server argument points to another host server is not started.'
