@relation large.json
@attribute id integer
@attribute owner string
@attribute content string
@data
2574,'','Custom logging override still produces default log file\nWhen a user overrides logging to use a custom one, the host override is too late and the default log still executes creating a default log file with at least 2 INFO entries in it.\r\n\r\nThis occurs because INFO is the default level.\r\n\r\nA solution is to ensure all logging entries before the user can override are below the default INFO level.'
2573,'','Throw from NServiceBus.MsmqUtilities.Convert will result in message loss\nFixed so when `NServiceBus.MsmqUtilities.Convert` throws the message will be sent to the error queue\r\n\r\n--\r\n\r\nClone of #2463'
2569,'','Changed link to class from the core to copy\nLinked files do not transfer over with the source package, whit result that acceptance tests for transports did not compile anymore'
2566,'','NSB 4 with Castle Windsor: Performance is slow while debugger is attached\n--\r\n\r\nCould we please have a backport of #1989 to NSB 4? We are using NSB 4 and are also running into this issue. It causes performance to run at about 1% of normal speed when a debugger is attached'
2563,'','TimeoutPersisterReceiver line 88 TimeoutsPersister null\nMy endpoint is configured as following:\r\n\r\n```C#\r\n       public void Customize(BusConfiguration configuration)\r\n        {\r\n            configuration.UseSerialization<JsonSerializer>();\r\n            configuration.EnableInstallers();\r\n            configuration.UsePersistence<MsmqPersistence>();\r\n            configuration.UseTransport<MsmqTransport>();\r\n        }\r\n```\r\n\r\nand the project uses NServiceBus.Host.exe.\r\n\r\nHow can I specify the TimeoutsPersister?\r\n'
2562,'','SyncOMatic update\n'
2561,'','External persistences are not configured correctly if excluded from assemblies to scan\nBlows up with\r\n\r\n```\r\n\r\nSystem.NullReferenceException was unhandled by user code\r\n  HResult=-2147467261\r\n  Message=Object reference not set to an instance of an object.\r\n  Source=NServiceBus.Core\r\n  StackTrace:\r\n       at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll(Object obj) in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.Core\\Timeout\\Hosting\\Windows\\TimeoutPersisterReceiver.cs:line 88\r\n       at System.Threading.Tasks.Task.InnerInvoke()\r\n       at System.Threading.Tasks.Task.Execute()\r\n  InnerException: \r\n\r\n\r\n```\r\n\r\nOriginally raised on the group: https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/particularsoftware/hvE59bwTehQ/v8HvkIySFl4J\r\n### Repro\r\n```\r\n class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var config = new BusConfiguration();\r\n\r\n            config.AssembliesToScan(typeof(Program).Assembly);\r\n\r\n            config.UsePersistence<RavenDBPersistence>();\r\n\r\n            using (var bus = Bus.Create(config))\r\n            {\r\n                bus.Start();\r\n                Console.ReadKey();\r\n            }\r\n        }\r\n    }'
2560,'',"INeedToInstallSomething code documentation\nDoco was urging implementing the generic version instead, but that's obsolete now."
2559,'','SyncOMatic update\n'
2558,'','Adding an explicit configuration API for users to set the host identifier\nThis is another take on #2529.\r\n\r\nThis attempt tries to simplify even further the API to set the default host identifier.\r\n\r\nHere is the proposed new API for end users:\r\n```c#\r\nbusConfiguration.UniquelyIdentifyRunningInstance()\r\n                                       .UsingNames(instanceName, hostName);\r\n// or\r\nbusConfiguration.UniquelyIdentifyRunningInstance()\r\n                                       UsingCustomIdentifier(hostId);\r\n```\r\n\r\nHere is how Azure would override the default host information:\r\n```c#\r\npublic class MyFeatureThatOverridesHostInformationDefaults : Feature\r\n{\r\n    public MyFeatureThatOverridesHostInformationDefaults()\r\n    {\r\n        EnableByDefault();\r\n        DependsOn("UnicastBus");\r\n        Defaults(s =>\r\n        {\r\n            s.SetDefault("NServiceBus.HostInformation.HostId", hostId);\r\n            s.SetDefault("NServiceBus.HostInformation.DisplayName", instanceName);\r\n            s.SetDefault("NServiceBus.HostInformation.Properties", new Dictionary<string, string>\r\n            {\r\n                {"RoleName", "My role name"},\r\n                {"RoleInstanceId", "the role instance id"},\r\n            });\r\n        });\r\n    }\r\n\r\n    protected override void Setup(FeatureConfigurationContext context)\r\n    {\r\n    }\r\n}\r\n```'
2557,'','split concrete type generation out of MessageMapper\nfixes #1621'
2556,'','Throw an exception when callbacks are used in SendOnly mode\nfixes #2476'
2555,'','MessageForwardingInCaseOfFaultConfig should not be required for sendonly\n--\r\n\r\nWhen configuring an endpoint as a SendOnly endpoint, in version 5.0.x the user didn\'t have to define the `MessageForwardingInCaseOfFaultConfig` configuration. However in 5.1.0 this is now required and the endpoint fails to start unless  it is specified.\r\n\r\n**Steps to repro**\r\n- Create a console application and install-package NServiceBus (version 5.0.0) \r\n- Add the following to configure it as send-only\r\n```c#\r\n static void Main(string[] args)\r\n {\r\n    var busConfiguration = new BusConfiguration();\r\n    busConfiguration.EndpointName("Sample.SendOnly.Client");\r\n    busConfiguration.UseSerialization<JsonSerializer>();\r\n    busConfiguration.UsePersistence<InMemoryPersistence>();\r\n    busConfiguration.EnableInstallers();\r\n\r\n    var bus = Bus.CreateSendOnly(busConfiguration);\r\n    Console.ReadLine();\r\n}\r\n```\r\n- Upgrade this endpoint to 5.1.0 and notice the configuration error\r\n\r\n**Workaround**\r\nEither add the config section, `MessageForwardingInCaseOfFaultConfig` to app.config or if you don\'t want to change the app.config, please add the following initialization via code.\r\n\r\n```c#\r\nusing NServiceBus.Config;\r\nusing NServiceBus.Config.ConfigurationSource;\r\n\r\nclass ConfigErrorQueue : IProvideConfiguration<MessageForwardingInCaseOfFaultConfig>\r\n{\r\n    public MessageForwardingInCaseOfFaultConfig GetConfiguration()\r\n    {\r\n        return new MessageForwardingInCaseOfFaultConfig\r\n        {\r\n            ErrorQueue = "error"\r\n        };\r\n    }\r\n}\r\n```\r\n--\r\n\r\nHi,\r\nI upgraded from NSB 5.0.1 to 5.1.0 today and now in my WCF web service I\'m getting an error stating: Faults forwarding requires an error queue to be specified. Please add a \'MessageForwardingInCaseOfFaultConfig\' section to your app.config\r\n---\r\nThis wasn\'t required on 5.0.1. This is the entire message:\r\n---\r\nSystem.Configuration.ConfigurationErrorsException occurred\r\n  HResult=-2146232062\r\n  Message=Faults forwarding requires an error queue to be specified. Please add a \'MessageForwardingInCaseOfFaultConfig\' section to your app.config\r\n or configure a global one using the powershell command: Set-NServiceBusLocalMachineSettings -ErrorQueue {address of error queue}\r\n  Source=NServiceBus.Core\r\n  BareMessage=Faults forwarding requires an error queue to be specified. Please add a \'MessageForwardingInCaseOfFaultConfig\' section to your app.config\r\n or configure a global one using the powershell command: Set-NServiceBusLocalMachineSettings -ErrorQueue {address of error queue}\r\n  Line=0\r\n  StackTrace:\r\n       at NServiceBus.Faults.ErrorQueueSettings.GetConfiguredErrorQueue(ReadOnlySettings settings) in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.Core\\Faults\\ErrorQueueSettings.cs:line 42\r\n  InnerException: \r\n---\r\nI don\'t have any issue with adding the configuration to the web.config but I normally prefer to avoid making web.config changes if I can\r\nTo reproduce:\r\nCreate WCF Service Application, install NSB version 5.0.1(along with NServiceBus.Log4Net and its dependent log4net package)\r\nAdd Global.asax\r\nCreate ISendOnlyBus Bus within Application_Start\r\nCall Bus.Send within WCF service class <-- builds and runs without issue\r\nThen...\r\nUpgrade to NSB 5.1.0 (the latest at the time of writing)\r\nObserve the error above'
2553,'SzymonPobiega','4.7.x NServiceBus.Core NuGet package does not contain Init.ps1 script\nNuGet Install-Package NServiceBus.Host fails for >=4.7.0 with the following error message:\r\n"Add-NServiceBusMessageForwardingInCaseOfFaultConfig : The term \'Add-NServiceBusMessageForwardingInCaseOfFaultConfig\' is not recognized as the name of a cmdlet, function, script file, or operable program. Check \r\nthe spelling of the name, or if a path was included, verify that the path is correct and try again."\r\n\r\nNote that 4.6.8 and earlier versions install fine with NuGet Install-Package\r\n\r\nI\'m using a clean install of VS2013 with Update 3 on Windows 8.1.\r\n\r\nHere is the full output from the error message onwards\r\n```\r\nPM> Install-Package NServiceBus.Host -Version 4.7.3\r\n(...)\r\nAdding \'NServiceBus.Host 4.7.3\' to ClassLibraryWithNServiceBus473.\r\nSuccessfully added \'NServiceBus.Host 4.7.3\' to ClassLibraryWithNServiceBus473.\r\nAdd-NServiceBusMessageForwardingInCaseOfFaultConfig : The term \'Add-NServiceBusMessageForwardingInCaseOfFaultConfig\' is not recognized as the name of a cmdlet, function, script file, or operable program. Check \r\nthe spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt C:\\users\\sveinfid\\documents\\visual studio 2013\\Projects\\ClassLibraryWithNServiceBus473\\packages\\NServiceBus.Host.4.7.3\\tools\\install.ps1:99 char:2\r\n+     Add-NServiceBusMessageForwardingInCaseOfFaultConfig $project.Name\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Add-NServiceBus...seOfFaultConfig:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n \r\nAdd-NServiceBusUnicastBusConfig : The term \'Add-NServiceBusUnicastBusConfig\' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path \r\nwas included, verify that the path is correct and try again.\r\nAt C:\\users\\sveinfid\\documents\\visual studio 2013\\Projects\\ClassLibraryWithNServiceBus473\\packages\\NServiceBus.Host.4.7.3\\tools\\install.ps1:100 char:2\r\n+     Add-NServiceBusUnicastBusConfig $project.Name\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Add-NServiceBusUnicastBusConfig:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n \r\nAdd-NServiceBusAuditConfig : The term \'Add-NServiceBusAuditConfig\' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was \r\nincluded, verify that the path is correct and try again.\r\nAt C:\\users\\sveinfid\\documents\\visual studio 2013\\Projects\\ClassLibraryWithNServiceBus473\\packages\\NServiceBus.Host.4.7.3\\tools\\install.ps1:101 char:5\r\n+     Add-NServiceBusAuditConfig $project.Name\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Add-NServiceBusAuditConfig:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n ```\r\n\r\n'
2552,'','Make the value 5 configurable\nThis test assumes that the default retry count is 5, https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.AcceptanceTests/Exceptions/When_handler_throws_serialization_exception.cs#L24, which is not the case for azure transports. We still have to default to 4 to stay backward compatible with retry values set into existing azure servicebus queues, please make this value configurable, similar to When_doing_flr_with_native_transactions'
2551,'',"Acceptance tests specific to msmq\nThese tests are specific to msmq and won't work for other transports https://github.com/Particular/NServiceBus/blob/develop/src and should be limited to msmq"
2548,'',"HostInformation not using RuntimeEnvironment\nShouldn't [HostInformation](https://github.com/Particular/NServiceBus/blob/33947a34659fbad5e9636873aefe7ab2a6077533/src/NServiceBus.Core/Hosting/HostInformation.cs) make use of `RuntimeEnvironment.MachineName` instead of Environment.MachineName ?"
2546,'','SyncOMatic update\n'
2545,'','SyncOMatic update\n'
2544,'','When sending a message from a IFindSagas.FindBy should not attempt to set saga headers\nSince the saga instance does not exist at that point there is no point attempting to set the `OriginatingSagaId` and `OriginatingSagaType` headers\r\n\r\n--\r\n\r\nfixed by https://github.com/Particular/NServiceBus/commit/2971df48e7ffaffc41332835d1b9f33bba281df0'
2543,'','SyncOMatic update\n'
2542,'','SyncOMatic update\n'
2541,'','test\nsome test'
2537,'','SLR is not applied to messages that fail to be processed by the Satellites\nAt the moment, when a satellite processes a message and it exceptions, then after FLR, the message is sent to the error queue, even if the Second Level Retries are configured.\r\n\r\nThere is no indication that the message is forwarded to the error queue. \r\n\r\n**Steps to Repro**\r\n1. Have RavenDB running and have a Saga endpoint start up\r\n2. Stop RavenDB and then trigger a message that will request a timeout\r\n3. Notice that the message will be sent to the error queue\r\n'
2536,'','SyncOMatic update\n'
2535,'','SyncOMatic update\n'
2534,'','SyncOMatic update\n'
2533,'','SyncOMatic update\n'
2532,'','SyncOMatic update\n'
2530,'','When transport is configured via INeedInitialization, it does not work, defaults to MSMQ. \nThis is an endpoint generated by ServiceMatrix.\r\nIt configures the transport in a class that implements `INeedInitialization`.\r\n\r\n```c#\r\npublic class TransportConfig : INeedInitialization\r\n{\r\n\tpublic void Customize(BusConfiguration config)\r\n\t{\r\n\t\tconfig.UseTransport<NServiceBus.RabbitMQTransport>();\r\n\t}\r\n}\r\n```\r\n\r\nAnd here are the nuget packages being referenced:\r\n\r\n```xml\r\n<packages>\r\n  <package id="NServiceBus" version="5.0.2" targetFramework="net451" />\r\n  <package id="NServiceBus.Host" version="5.0.2" targetFramework="net451" />\r\n  <package id="NServiceBus.RabbitMQ" version="2.0.1" targetFramework="net451" />\r\n  <package id="RabbitMQ.Client" version="3.3.5" targetFramework="net451" />\r\n</packages>\r\n```\r\n\r\nHowever, the code doesn\'t fail, but simply defaults to MSMQ without a warning to the user. \r\nWhen the user has explicitly configured the transport and the dependencies for the transport are not met, we need to throw an exception and not default to using MSMQ.\r\n\r\n![screen shot 2014-10-26 at 8 39 03 am](https://cloud.githubusercontent.com/assets/854553/4783430/57db52f2-5d26-11e4-91ab-1b5dbb21b2d4.png)\r\n\r\n\r\n \r\n'
2529,'','WIP - Made host info configurable\n@SimonCropp @johnsimons @yvesgoeleven what about something like this to allow users to control the host info at config time?\r\n\r\n'
2528,'','NServiceBus platform tools not working with RabbitMQ\nNone of the v5.0 tools appear to monitor, debug or control applications running over RabbitMQ transport.\r\n\r\nThe documentation available on the Particular.net website give incorrect classnames and instructions for re-configuring these tools.\r\n'
2527,'','ServiceControl install and configuration for RabbitMQ incorrect - not working\nDocumentation here doesn\'t work - likely because the RabbitMQ transport classnames changed:\r\nhttp://docs.particular.net/servicecontrol/multi-transport-support\r\n\r\nI did try to make the adjustment to the names in the command as follows:\r\nservicecontrol.exe --install -serviceName="Particular.ServiceControl" -displayName="Particular ServiceControl" -d="ServiceControl/TransportType==NServiceBus.RabbitMQTransport, NServiceBus.Transports.RabbitMQ" -d="NServiceBus/Transport==host=localhost;username=guest;password=notmypasswd"\r\n\r\nIt didn\'t work and now it appears nothing in the documentation is correct in this area. We need some answers on how to properly re-direct all the NServiceBus Platform tools to use RabbitMQ transport and point them at a RabbitMQ host.\r\n\r\nThe below error stacktrace after using the corrected classnames for RabbitMQ in the --install commande:\r\n2014-10-24 15:41:27.6715|1|Warn|NServiceBus.Configure|Could not enumerate all types for \'NServiceBus.Transports.RabbitMQ, Version=2.0.0.0, Culture=neu\r\ntral, PublicKeyToken=9fc386479f8a226c\'.\r\nExceptions:\r\nSystem.TypeLoadException: Method \'get_Address\' in type \'NServiceBus.Transports.RabbitMQ.CallbackQueueCreator\' from assembly \'NServiceBus.Transports.Ra\r\nbbitMQ, Version=2.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\' does not have an implementation.\r\nSystem.TypeLoadException: Could not load type \'NServiceBus.Transports.ConfigureTransport\' from assembly \'NServiceBus.Core, Version=4.6.5.0, Culture=ne\r\nutral, PublicKeyToken=9fc386479f8a226c\'.\r\nSystem.TypeLoadException: Could not load type \'NServiceBus.Pipeline.Contexts.IncomingContext\' from assembly \'NServiceBus.Core, Version=4.6.5.0, Cultur\r\ne=neutral, PublicKeyToken=9fc386479f8a226c\'.\r\nSystem.TypeLoadException: Could not load type \'NServiceBus.Pipeline.RegisterStep\' from assembly \'NServiceBus.Core, Version=4.6.5.0, Culture=neutral, P\r\nublicKeyToken=9fc386479f8a226c\'.\r\nSystem.TypeLoadException: Could not load type \'NServiceBus.Pipeline.Contexts.OutgoingContext\' from assembly \'NServiceBus.Core, Version=4.6.5.0, Cultur\r\ne=neutral, PublicKeyToken=9fc386479f8a226c\'.\r\nSystem.TypeLoadException: Could not load type \'NServiceBus.Pipeline.RegisterStep\' from assembly \'NServiceBus.Core, Version=4.6.5.0, Culture=neutral, P\r\nublicKeyToken=9fc386479f8a226c\'.\r\nSystem.TypeLoadException: Method \'Init\' in type \'NServiceBus.Transports.RabbitMQ.RabbitMqDequeueStrategy\' from assembly \'NServiceBus.Transports.Rabbit\r\nMQ, Version=2.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\' does not have an implementation.\r\nSystem.TypeLoadException: Method \'Publish\' in type \'NServiceBus.Transports.RabbitMQ.RabbitMqMessagePublisher\' from assembly \'NServiceBus.Transports.Ra\r\nbbitMQ, Version=2.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\' does not have an implementation.\r\nSystem.TypeLoadException: Method \'Send\' in type \'NServiceBus.Transports.RabbitMQ.RabbitMqMessageSender\' from assembly \'NServiceBus.Transports.RabbitMQ\r\n, Version=2.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\' does not have an implementation.\r\nSystem.TypeLoadException: Method \'CreateQueueIfNecessary\' in type \'NServiceBus.Transports.RabbitMQ.RabbitMqQueueCreator\' from assembly \'NServiceBus.Tr\r\nansports.RabbitMQ, Version=2.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\' does not have an implementation.\r\nSystem.TypeLoadException: Method \'Subscribe\' in type \'NServiceBus.Transports.RabbitMQ.RabbitMqSubscriptionManager\' from assembly \'NServiceBus.Transpor\r\nts.RabbitMQ, Version=2.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\' does not have an implementation.\r\n\r\n\r\n'
2526,'','Provide capability for Features to put values from configSection into settingsHolder\nProvide capability for Features to put values from configSection into settingsHolder before settingHolders becomes read-only, but after user is no longer capable of changing configSection settings.\r\n\r\n/cc @yvesgoeleven '
2523,'','Reply from SagaNotFound V4\nWIP'
2522,'','add When_reply_from_a_finder\n'
2520,'','Fixing bug in distributor not notified about worker ready when handling message of to SLR\nRelated to this change in distributor\r\n\r\n* Added raising FinishedMessageProcessing when handing msg off to SLR\r\n* Moved raising StartedMessageProcessing so that it is invoked even for messages without ID\r\n\r\nRelated to https://github.com/Particular/NServiceBus.Distributor.Msmq/pull/22'
2517,'','NServicebus and transient queues\nI whas wondering does NServicebus has support for RabbitMq transient queues / exchanges ?\r\nI mean persistence is great and all but i also need a very fast in memory queue.\r\n\r\n'
2516,'','Suppress saganotfound for timeouts\nThis fixes #2515 '
2515,'','Timeout messages should not invoke SagaNotFound handler\nIn the following scenarios timeouts for completed sagas can still be fired:\r\n- When a timeout is already retrieved from storage and queued up to be executed;\r\n- When the deletion of all timeouts misses to delete all of them due to stale indexes in Raven;\r\n\r\nIn the above circumstances, `ISagaNotFound` handlers should not be invoked\r\n\r\n--\r\n\r\nConsider this scenario:\r\n1. Saga is started and requests a timeout\r\n2. Saga is currently processing a message while the timeout message is dispatched to it.\r\n3. The message that was being processed completes and also marks the saga as complete\r\n4. Now, in this case, the timeout message that is waiting in the input queue will now invoke any implemented SagaNotFound handler.\r\n\r\n```c#\r\npublic class TestTimeoutSaga : Saga<TestTimeoutSagaData>,\r\n        IAmStartedByMessages<StartSaga>,\r\n        IHandleMessages<ProcessSomething>,\r\n        IHandleTimeouts<ActionForSagaNotCompleteTimeout>,\r\n        IHandleSagaNotFound\r\n\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<ProcessSomething>(message => message.MessageId).ToSaga(data => data.MessageId);\r\n    }\r\n\r\n    public void Handle(StartSaga message)\r\n    {\r\n        Console.WriteLine("Received message StartSaga");\r\n        Data.MessageId = message.MessageId;\r\n        RequestTimeout(DateTime.UtcNow.AddSeconds(4), new ActionForSagaNotCompleteTimeout());\r\n        Bus.SendLocal(new ProcessSomething()\r\n        {\r\n            MessageId = message.MessageId\r\n        });\r\n        Console.WriteLine("StartSaga was successfuly processed.");\r\n    }\r\n\r\n    public void Handle(ProcessSomething message)\r\n    {\r\n        Console.WriteLine("Received ProcessSomething command");\r\n        System.Threading.Thread.Sleep(6000);\r\n        Console.WriteLine("*** !!! SAGA COMPLETE !!! ***");\r\n        MarkAsComplete();\r\n        Console.WriteLine("The ProcessSomething command was successfuly processed.  ");\r\n    }\r\n\r\n    public void Timeout(ActionForSagaNotCompleteTimeout state)\r\n    {\r\n        Console.WriteLine("*** timeout received -- going to mark the saga as COMPLETE!! !!! ***");\r\n        MarkAsComplete();\r\n    }\r\n\r\n    public void Handle(object message)\r\n    {\r\n        // Do other processing / compensating action\r\n        Console.WriteLine("Invoked SagaNotFound -- type: {0}", message.GetType());\r\n    }\r\n}\r\n```\r\n\r\n**Proposal**\r\n1. When marking a saga as complete, we clear any pending timeouts by design.\r\n2. Taking that approach, we should safely be able to ignore any already dispatched timeout messages. \r\nand not invoke SagaNotFound handler.\r\n\r\n**Workaround**\r\nIn the SagaNotFound handler, check for the message type and then ignore  or inspect the message headers to see if its a saga timeout message by checking, `Headers.IsSagaTimeoutMessage`\r\n\r\n```c#\r\n\r\npublic void Handle(object message)\r\n{\r\n    if (message is ActionForSagaNotCompleteTimeout)\r\n    {\r\n        Console.WriteLine("Ignoring the timeout message as saga has been completed");\r\n        // This is a timeout message that ends up in the saga queue and the saga is now complete.\r\n        // Safe to ignore\r\n        return;\r\n    }\r\n\r\n    // Do other processing / compensating action\r\n    Console.WriteLine("Invoked SagaNotFound -- type: {0}", message.GetType());\r\n} \r\n``` \r\n--\r\n\r\nRelated DeskCase: https://nservicebus.desk.com/agent/case/7406'
2514,'',"Unable to disable Critical Time Monitoring\n(From [StackOverflow question](http://stackoverflow.com/questions/26286121/does-nservicebus-v5-0-require-performance-counters))\r\n\r\nv5 appears to require performance counters by default. I do not want to install them with my service. I tried a suggested workaround to disable them with `config.DisableFeature<CriticalTimeMonitoring>();` but this didn't work.\r\n\r\nTo reproduce, pull the [SQL Server Samples source code](https://github.com/Particular/NServiceBus.SqlServer.Samples) and run on a host without any performance counter changes. You should fail with the following message:\r\n>System.InvalidOperationException was unhandled Message: An unhandled exception of type 'System.InvalidOperationException' occurred in mscorlib.dll Additional information: NServiceBus performance counter for Critical Time is not set up correctly. Please run Install-NServiceBusPerformanceCounters cmdlet to rectify this problem.\r\n\r\nAdd the line to  `config.DisableFeature<CriticalTimeMonitoring>();` and run again. You should see the same error message. I expect to not see this error message with the configuration change. My team verified the problem on multiple machines."
2513,'','Implementation of DataBus definition\nAddresses https://github.com/Particular/NServiceBus/issues/2507\r\nPlease review @SimonCropp @johnsimons @indualagarsamy @andreasohlund @yvesgoeleven \r\n'
2512,'','RabbitMq transport  no IRoutingTopology settings ??\nOk i\'m trying to change our transport layer from msmq to rabbitMq.\r\n\r\nwhat i did so far :\r\n\r\nI added to types to scan :\r\n```\r\n NServiceBus.Features.RabbitMqTransport\r\n```\r\n\r\n\r\nConfigure looks like:\r\n```\r\n    Configure.With(typesToScan)\r\n    .ConfigureAs(RoleType.PublisherAndSubscriber, container)\r\n    .UseTransport <NServiceBus.RabbitMQ>\r\n```\r\n\r\ni Added connectionstring to app.config:\r\n```\r\n  <add name="NServiceBus/Transport" connectionString="host=localhost;username=blabla;password=blablat">\r\n```\r\n\r\nWhen i start the host without the install option i get this ConfigurationErrorException.\r\n\r\nNo explicit settings or default found for service NServiceBus.Transports.RabbitMQ.Routing.IRoutingTopology, please configure one explicitly\r\n\r\nAnd really i cant seem to find any good reason why this is.\r\n\r\n'
2509,'','Moved RetryPolicy check to FaultManager\nThis allows us to keep the notification error stream as typed exceptions.\r\nFixed issue with notifications acceptance test would sometimes miss events.\r\nReusing default SLR settings for both config section and FaultManager.\r\nAdded validation rules to SecondLevelRetriesConfig section.'
2508,'','AcceptanceTestFramework: Fix the scoping of the tests to be test specific and not global\nRaised by @indualagarsamy\r\nMigrated from by https://github.com/Particular/ServiceControl/issues/327\r\n\r\nAdding the `IWantToRunWhenTheBusStartsAndStops` behavior to one of the unit tests broke the rest of the tests. \r\nhttps://github.com/Particular/ServiceControl/commit/1def8c6739cb6f4aea35192092b43aa93d2e03e2\r\nFix the `DefaultServer` class to define scope better and be test specific than global.\r\n\r\ncc / @andreasohlund \r\n\r\n'
2507,'SeanFeldman',"DataBus is looking for FileShareDatabusPath when it should not\n--\r\n\r\nSummary of the issue:\r\n\r\nAzureDataBusPersistence is a feature, which depends on DataBus feature, that registers BlobStorageDatabus in the container in it's setup method\r\n\r\nDataBus validates if an IDatabus is already registered, and if not tries to register FileShareDataBus, and goes to check for FileShareDataBusPath also in it's setup method\r\n\r\nBecause of the feature dependency, DataBus will run, and blow up, before AzureDataBusPersistence gets a chance to register the implemenation to the container\r\n\r\nChange we will make\r\n\r\n* Add an extension method UseDataBus<T>, which both sets a variable in the settingsholder that signals a custom databus, as well as enable the custom databus feature\r\n* Change DataBus setup to only register FileShareDataBus if the custom databus setting is not there"
2506,'','Correct defaults for suppressing the ambient tx\nFixes https://github.com/Particular/NServiceBus/issues/2481'
2504,'','Modified MessageHasBeenSentToErrorQueue stream data to not include a typed exception since we do not have it all the time, fixes #2503\n'
2503,'',"ErrorsNotifications.MessageSentToErrorQueue does not contain original exception\nWhen SLR exceeds its retries the message is sent to the error queue.\r\n\r\nAt that time the exception instance does not exist :disappointed: \r\n\r\nSo this means that our ErrorsNotifications event stream cannot have the exception as a type.\r\n\r\nAt the moment I hard coded the instance (I know I'm a bad boy!), see https://github.com/Particular/NServiceBus/blob/95509f6186585d4fe3f210e944aab5dfa71e0b1b/src/NServiceBus.Core/SecondLevelRetries/SecondLevelRetriesProcessor.cs#L66\r\n\r\nI guess the only way is to have the exception as a string ?\r\n\r\n@SzymonPobiega @andreasohlund @SimonCropp \r\nThoughts?"
2502,'','Remove redundant new() constraint from Saga.RequestTimeout\nSince an instance is being passed in then there is no need for a `new()` constraint\r\n```\r\nRequestTimeout<TTimeoutMessageType>(DateTime at, TTimeoutMessageType timeoutMessage)\r\nRequestTimeout<TTimeoutMessageType>(TimeSpan within, TTimeoutMessageType timeoutMessage)\r\n```'
2501,'','passing null messageConstructor parameter to ReplyToOriginator will result in a null message being sent\n`ReplyToOriginator<TMessage>(Action<TMessage> messageConstructor)` incorrectly did a null parameter check whichc resulted in a null being passed ass a message.\r\n\r\n--\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/27c7fb712c991cf4307e37486895f86fa1e8aafa/src/NServiceBus.Core/Saga/Saga.cs#L182  will result in a `ArgumentNullException` in https://github.com/Particular/NServiceBus/blob/27c7fb712c991cf4307e37486895f86fa1e8aafa/src/NServiceBus.Core/Unicast/Messages/LogicalMessageFactory.cs#L40'
2500,'','Added way to override MSMQ TimeToReachQueue setting, fixes #2103\n'
2499,'','better QueueNotFoundException handling\nfixes #1669'
2498,'','Obsolete Saga.RequestTimeout(Action<TTimeoutMessageType>)\nfixes #2491'
2497,'','load successful types from ReflectionTypeLoadException\nfixes #2056'
2496,'','make staticOutgoingHeaders a ConcurrentDictionary\nfixes #1976'
2495,'','Prevent saga id to be changed\nfixes #1235'
2494,'','use WindowsIdentity.GetCurrent for header\nfixes #2031'
2493,'','Use the delegate builder to avoid reflection in the databus\nfixes #1798'
2492,'','make ThroughputLimiter disposable\nfixes #1665'
2491,'','Obsolete Saga.RequestTimeout(Action<TTimeoutMessageType>)\nBoth have `new()` constraints and hence cannot be an interface. No need to construct an instance when the consumer can do this themselves. \r\n\r\n```\r\nRequestTimeout<TTimeoutMessageType>(TimeSpan within, Action<TTimeoutMessageType> messageConstructor) where TTimeoutMessageType : new()\r\nRequestTimeout<TTimeoutMessageType>(DateTime at, Action<TTimeoutMessageType> action) where TTimeoutMessageType : new()\r\n```'
2490,'','What is endpointVersion\nHello,\r\n\r\nMore of a question than an issue. What does "endpointVersion" buy you, per se? There may be clients, or other endpoints, depending on certain other configurations, and a way of keeping that all straight?\r\n\r\nOtherwise, the documentation is sparse on the subject, recommendations, use cases, etc.\r\n\r\nThank you...\r\n\r\nBest regards.'
2489,'',"v2 to v5 Migration path questions\nHello,\r\n\r\nI'm not sure I see the migration path from:\r\n\r\n```C#\r\nConfigure.WithWeb()\r\n.Log4Net()\r\n.DefaultBuilder()\r\n.XmlSerializer()\r\n.MsmqTransport()\r\n.IsTransactional(true)\r\n.PurgeOnStartup(false)\r\n.MsmqSubscriptionStorage()\r\n.UnicastBus()\r\n.CreateBus()\r\n.Start();\r\n```\r\n\r\nI see that things have been migrated towards more of a configuration, BusConfiguration, paradigm. That's all well and good, but I want to identify the migration path(s) from these.\r\n\r\nIf you please.\r\n\r\nThank you..."
2488,'',"Log4Net obsolete log4net references\nHello,\r\n\r\nWhat do we do for logging, the migration path needs catching up. I get the following, in spite of what the NSB L4N dependencies advertise:\r\n\r\nAttempting to resolve dependency 'NServiceBus (≥ 5.0.0 && < 6.0.0)'.\r\nAttempting to resolve dependency 'Log4Net (≥ 2.0.0 && < 3.0.0)'.\r\nInstalling 'log4net 2.0.0'.\r\nSuccessfully installed 'log4net 2.0.0'.\r\n'NServiceBus.Log4Net 1.0.0' already installed.\r\nInstall failed. Rolling back...\r\nUpdating 'log4net 1.2.10' to 'log4net 2.0.0' failed. Unable to find a version of 'Common.Logging.Log4Net' that is compatible with 'log4net 2.0.0'.\r\n\r\nThank you...\r\n\r\nBest regards."
2487,'','improve performance of InMemoryTimeoutPersister\nAn ~4x improvement in the performance of `InMemoryTimeoutPersister`'
2484,'','Added ability to specify time to wait before raising critical time for timeout outages, fixes #1228\n@andreasohlund can you review?\r\nIs this what you were after ?'
2483,'','Added support to register custom serializers, fixes #2464\nWe now support two possible was to register a custom serializer.\r\n\r\nA user can either `config.UseSerialization(type of definition)` or  `config.UseSerialization(type of serializerImplementation)`\r\n\r\nThere are breaking changes but those are on purpose since the API was broken and unusable from an external consumer.'
2482,'','OrderConfirm of existing Saga throws 2 times Duplex reply and also throws SagaNotFoundHandler\nHi,\r\nI am seeing a SagaNotFoundHandler exception when my OrderConfirm Message arrives even though active saga is waiting for this message. ConfigureHowToFindSaga() is configured correctly.\r\n\r\nThis is what I observed the DEBUG log.\r\n\r\n1. Received InitialOrder request to the endpoint   - Creates a Saga OrderProcessingSaga\r\n2.Replied "SuccessfullyProcessedReply" message to the client (Duplex reply). Saga is still open and waiting for OrderConfirm\r\n3. Received OrderConfirm request.\r\n4. PropertySagaFinder found the Saga and Replied "SuccessfullyProcessedReply" to the client (Duplex reply) for the confirm request. \r\n5. then throws SagaNotFoundHandler for message OrderConfirm  (Same NServiceBus.CorrelationId:ce2bb861-b7e7-4f91-9f42-a3c40114778e)\r\n6. Posted one more "SuccessfullyProcessedReply" for the same transaction with different message id.\r\n7. After Step 6, Saga post a Confirmmessage to backend handler and marked as complete when it get successful reply from handler. This step works fine. No issues.\r\n\r\nStep 5 & 6 - I am not able to get whats going on this steps.\r\n\r\nSo when do I get 2 times duplex reply? I am getting SagaNotFoundHandler even though it is processed successfully. Interestingly all these steps are executed by only one thread.\r\n \r\nI am unit testing in my local and I posted only message. Not other through traffic.\r\n\r\nI am attaching the DEBUG logs herewith. Any help would be much appreciated.\r\n\r\n===============================================================================\r\n\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Unicast.Behaviors.MessageHandlingLoggingBehavior: Received message with ID ce2bb861-b7e7-4f91-9f42-a3c40114778e from sender InputQueue@mySystem\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: ImpersonateSenderBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: AuditBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: ForwardBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: UnitOfWorkBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: ApplyIncomingTransportMessageMutatorsBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: RaiseMessageReceivedBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: RemoveIncomingHeadersBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: ExtractLogicalMessagesBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: CallbackInvocationBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: ExecuteLogicalMessagesBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: ApplyIncomingMessageMutatorsBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: DataBusReceiveBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: LoadHandlersBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: SetCurrentMessageBeingHandledBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: AuditInvokedSagaBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: SagaPersistenceBehavior\r\n[2014-10-14 16:46:35,135][30] DEBUG NServiceBus.Sagas.SagaPersistenceBehavior: The following finders:PropertySagaFinder`2;HeaderSagaIdFinder`1 was allocated to message of type MyNameSpace.OrderConfirmRequest\r\n[2014-10-14 16:46:35,213][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: InvokeHandlersBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: MultiSendValidatorBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: MultiMessageBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: SendValidatorBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: SagaSendBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: MutateOutgoingMessageBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: DataBusSendBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: CreatePhysicalMessageBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: SerializeMessagesBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: MutateOutgoingPhysicalMessageBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: DispatchMessageToTransportBehavior\r\n[2014-10-14 16:46:35,353][30] DEBUG NServiceBus.Unicast.Behaviors.DispatchMessageToTransportBehavior: Sending message MyNameSpace.SuccessfullyProcessedReply with ID 0fc35e2b-c461-4d6c-b57c-a3c4011477cf to destination InputQueue@mySystem.\r\nToString() of the message yields: NServiceBus.Unicast.Messages.LogicalMessage\r\nMessage headers:\r\nNServiceBus.MessageId:0fc35e2b-c461-4d6c-b57c-a3c4011477cf, NServiceBus.CorrelationId:ce2bb861-b7e7-4f91-9f42-a3c40114778e, NServiceBus.OriginatingEndpoint:MyEndpoint, $.diagnostics.originating.hostid:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, NServiceBus.MessageIntent:Send, NServiceBus.Version:4.6.1, NServiceBus.TimeSent:2014-10-14 21:46:35:353760 Z, NServiceBus.OriginatingMachine:MyMachineName, NServiceBus.OriginatingSagaId:b8406cc4-18b3-4705-a6ce-a3c401145b3f, NServiceBus.OriginatingSagaType:MyNamespace.OrderProcessingSaga, MyNamespace.Core Version=2.0.1.1736, Culture=neutral, PublicKeyToken=null, NServiceBus.ContentType:text/xml, NServiceBus.EnclosedMessageTypes:MyNameSpace.SuccessfullyProcessedReply, MyNamespace, Version=2.0.1.1736, Culture=neutral, PublicKeyToken=null, NServiceBus.RelatedTo:ce2bb861-b7e7-4f91-9f42-a3c40114778e, NServiceBus.ConversationId:6a15dbaa-c9a3-49a4-9bf8-a3c40114778e, WinIdName:, CorrId:ce2bb861-b7e7-4f91-9f42-a3c40114778e\\0\r\n[2014-10-14 16:46:35,416][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: SetCurrentMessageBeingHandledBehavior\r\n[2014-10-14 16:46:35,416][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: AuditInvokedSagaBehavior\r\n[2014-10-14 16:46:35,416][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: SagaPersistenceBehavior\r\n[2014-10-14 16:46:35,431][30] DEBUG NServiceBus.Sagas.SagaPersistenceBehavior: The following finders:PropertySagaFinder`2;HeaderSagaIdFinder`1 was allocated to message of type MyNameSpace.OrderConfirmRequest\r\n[2014-10-14 16:46:35,494][30] INFO  NServiceBus.Sagas.SagaPersistenceBehavior: Could not find a saga for the message type MyNameSpace.OrderConfirmRequest. Going to invoke SagaNotFoundHandlers.\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Sagas.SagaPersistenceBehavior: Invoking SagaNotFoundHandler: MyNamespace.SagaNotFoundHandler\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: MultiSendValidatorBehavior\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: MultiMessageBehavior\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: SendValidatorBehavior\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: SagaSendBehavior\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: MutateOutgoingMessageBehavior\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: DataBusSendBehavior\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: CreatePhysicalMessageBehavior\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: SerializeMessagesBehavior\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: MutateOutgoingPhysicalMessageBehavior\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Pipeline.BehaviorChain`1: DispatchMessageToTransportBehavior\r\n[2014-10-14 16:46:35,494][30] DEBUG NServiceBus.Unicast.Behaviors.DispatchMessageToTransportBehavior: Sending message MyNameSpace.SuccessfullyProcessedReply with ID be803580-46e4-42cf-8d97-a3c4011477fa to destination InputQueue@mySystem.\r\nToString() of the message yields: NServiceBus.Unicast.Messages.LogicalMessage\r\nMessage headers:\r\nNServiceBus.MessageId:be803580-46e4-42cf-8d97-a3c4011477fa, NServiceBus.CorrelationId:ce2bb861-b7e7-4f91-9f42-a3c40114778e, NServiceBus.OriginatingEndpoint:MyEndpoint, $.diagnostics.originating.hostid:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, NServiceBus.MessageIntent:Send, NServiceBus.Version:4.6.1, NServiceBus.TimeSent:2014-10-14 21:46:35:494383 Z, NServiceBus.OriginatingMachine:MyMachineName, NServiceBus.ContentType:text/xml, NServiceBus.EnclosedMessageTypes:MyNameSpace.SuccessfullyProcessedReply, MyNamespace, Version=2.0.1.1736, Culture=neutral, PublicKeyToken=null, NServiceBus.RelatedTo:ce2bb861-b7e7-4f91-9f42-a3c40114778e, NServiceBus.ConversationId:6a15dbaa-c9a3-49a4-9bf8-a3c40114778e, WinIdName:, CorrId:ce2bb861-b7e7-4f91-9f42-a3c40114778e\\0\r\n\r\n=============================================================================='
2481,'','DisableDistributedTransactions should default the ambient transaction to off\nDouble negative in distributed transaction configuration logic was causing distributed transactions to always be on even when disabled by consumer'
2480,'','Change callback so they fire on replies only\n--\r\n\r\nFixes #2252 \r\n'
2476,'','Throw an exception when callbacks are used in SendOnly mode\nSince you need to be receiving in order to fire the callbacks.\r\n\r\nRaised by user on the Google group:\r\n\r\nhttps://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/particularsoftware/eakHoEDyg9Y/tsNNmrsxmOwJ'
2475,'','Ninject error since upgrading to version 5\nI\'m getting a Ninject error ever since upgrading to 5.  It\'s in a web app, bus is configured in NinjectWebCommon as below:\r\n\r\n            LogManager.Use<Log4NetFactory>();\r\n\r\n            var busConfig = new BusConfiguration();\r\n\r\n            busConfig.UseSerialization<JsonSerializer>();\r\n            busConfig.Transactions().Enable();\r\n            busConfig.AssembliesToScan(AllAssemblies.Matching("K."));\r\n            busConfig.EndpointName("K.Web");\r\n            busConfig.PurgeOnStartup(false);\r\n            busConfig.UseContainer<NinjectBuilder>(c => c.ExistingKernel(kernel));\r\n            busConfig.UseTransport<MsmqTransport>();\r\n            busConfig.PurgeOnStartup(false);\r\n            busConfig.UsePersistence<MsmqPersistence>();\r\n\r\n            using (var bus = Bus.Create(busConfig))\r\n            {\r\n                bus.Start();\r\n            }\r\n\r\nThe error I\'m getting is:  \r\n\r\n    [InvalidOperationException: Error loading Ninject component IPlanner\r\n    No such component has been registered in the kernel\'s component container.\r\n\r\n    Suggestions:\r\n      1) If you have created a custom subclass for KernelBase, ensure that you have properly\r\n         implemented the AddComponents() method.\r\n      2) Ensure that you have not removed the component from the container via a call to RemoveAll().\r\n      3) Ensure you have not accidentally created more than one kernel.\r\n    ]\r\n       Ninject.Components.ComponentContainer.Get(Type component) +437\r\n       Ninject.Components.ComponentContainer.Get() +112\r\n       Ninject.KernelBase.Inject(Object instance, IParameter[] parameters) +168\r\n       Ninject.Web.Common.Bootstrapper.Initialize(Func`1 createKernelCallback) +318\r\n\r\nAny ideas why this may be occurring?  I\'ve tried to migrate the configuration using the obsolete messages, but much of your documentation uses the old syntax so I\'m not quite sure if it\'s correct.'
2474,'','Performance counter can hang\nNow doing the performance counter check (`counter.CounterType`) in a time-bombed thread that if it doesn\'t return within 2 seconds we mark the counter as not "healthy".\r\n\r\n--\r\n\r\nThis commit attempts to deal with the issues raised by users that when performance counter are newed up can hang the process.\r\nThis seem to occur mostly when running NServiceBus in IISExpress 8.\r\n\r\n\r\nTook this opportunity to also refactor the performance code to centralise it all in the PerformanceCounterHelper class.\r\n\r\nHopefully this fixes #2047 '
2473,'','Adding a new Rx BusNotifications API\nStreams added in this release:\r\n\r\n- `MessageHasFailedAFirstLevelRetryAttempt`\r\n- `MessageHasBeenSentToSecondLevelRetries`\r\n- `MessageSentToErrorQueue`'
2472,'','Failure to convert to TransportMessage should result in ErrorQueue\nrelated to #2463 '
2471,'',"Configure.With() obsoletes are unclear\nWe're getting reports of users getting stuck upgrading v4 => v5 and it seems that the obsolete messages are missleading.\r\n\r\nThe `With(string probeDirectory)` is really good \r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Configure_Obsolete.cs#L187\r\n\r\nBut the others are not. Suggest that we update them all to be more inline with the probe dir one?\r\n\r\nShould we include this into 5.0.1?"
2470,'',"Any way in self-hosting to disable performance counters?\nI'm running v4.6.5.0 on Windows 10 Preview and when self-hosting the PerformanceCounter initialization hangs forever.\r\n\r\nTransportReceiver.InitializePerformanceCounters();\r\n\r\n(web app hosted by IIS Express)"
2467,'','Better exception when performance counter instance name limit is reached\nFixes #2352'
2466,'','Add a non generic sends to IBus\nbased on this issue https://github.com/Particular/NServiceBus/issues/2244#issuecomment-57316205\r\n\r\nIt can be done at the moment with some black magic reflection but forcing that upon our users is a pain.\r\n\r\nNote that these can be extension method to avoid changing the interface\r\n\r\n * `ICallback SendLocal<T>(Action<T> messageConstructor);`\r\n * `void Reply<T>(Action<T> messageConstructor);`\r\n * `void Publish<T>(Action<T> messageConstructor);`\r\n * `ICallback Send<T>(Action<T> messageConstructor);`\r\n * `ICallback Send<T>(string destination, Action<T> messageConstructor);`\r\n * `ICallback Send<T>(Address address, Action<T> messageConstructor);`\r\n * `ICallback Send<T>(string destination, string correlationId, Action<T> messageConstructor);`\r\n * `ICallback Send<T>(Address address, string correlationId, Action<T> messageConstructor);`'
2465,'','Added support to register custom serializers, fixes #2464\nWe now support two possible was to register a custom serializer.\r\n\r\nA user can either `config.UseSerialization(type of definition)` or  `config.UseSerialization(type of serializerImplementation)`\r\n\r\nThere are breaking changes but those are on purpose since the API was broken and unusable from an external consumer.\r\n\r\n@andreasohlund @SimonCropp please review'
2464,'','Impossible to register a custom IMessageSerializer\nNow support two possible was to register a custom serializer.\r\n\r\nA user can either `config.UseSerialization(type of definition)` or  `config.UseSerialization(type of serializerImplementation)`\r\n\r\n--\r\n\r\nWe currently provide:\r\n```c#\r\nconfiguration.UseSerialization(type)\r\n```\r\nThe type expected is `SerializationDefinition`.\r\n`SerializationDefinition` includes an internal method called `ProvidedByFeature` which unfortunately makes it impossible for anyone to register their own custom `IMessageSerializer` :disappointed: \r\n\r\nThe proposal is to instead of type being of `SerializationDefinition`, we should instead enforce it to be of type `IMessageSerializer`.'
2463,'','Throw from NServiceBus.MsmqUtilities.Convert will result in message loss\nFixed so when `NServiceBus.MsmqUtilities.Convert` throws the message will be sent to the error queue\r\n\r\n--\r\n\r\nso here https://github.com/Particular/NServiceBus/blob/75ecd61f6cc62bb681d333610df7636420bbafd2/src/NServiceBus.Core/Transports/Msmq/MsmqDequeueStrategy.cs#L311 we catch and return a `new TransportMessage(Guid.Empty.ToString(), null);` \r\n\r\n        static TransportMessage ConvertMessage(Message message)\r\n        {\r\n            try\r\n            {\r\n                return NServiceBus.MsmqUtilities.Convert(message);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Logger.Error("Error in converting message to TransportMessage.", ex);\r\n\r\n                return new TransportMessage(Guid.Empty.ToString(), null);\r\n            }\r\n        }\r\n\r\nThe assumption is that `NServiceBus.MsmqUtilities.Convert` will not throw https://github.com/Particular/NServiceBus/commit/d2c107ab87abace85f6ef2e7ca1c1282025a5e04#commitcomment-5035667. but that is clearly not true.\r\n\r\n * `NServiceBus.MsmqUtilities.Convert` is a non-trivial amount of code so any bug we have could result in an exception. \r\n * corruption of headers would result in `DeserializeMessageHeaders` throwing https://github.com/Particular/NServiceBus/blob/75ecd61f6cc62bb681d333610df7636420bbafd2/src/NServiceBus.Core/Transports/Msmq/MsmqUtilities.cs#L208\r\n * A bad address could result in `GetIndependentAddressForQueue` throwing https://github.com/Particular/NServiceBus/blob/75ecd61f6cc62bb681d333610df7636420bbafd2/src/NServiceBus.Core/Transports/Msmq/MsmqUtilities.cs#L131\r\n\r\nany of these scenarios will result in the message being lost'
2462,'','allow retries when handler throws SerializationException\nfixes #2384'
2459,'','SLR seem to fire an extra time then the configured\n```xml \r\n<TransportConfig MaxRetries="3"/>\r\n<SecondLevelRetriesConfig NumberOfRetries="2" />\r\n```\r\n\r\nWith the config above, the handler ends up retrying 9 times instead of 6!\r\n\r\n'
2457,'','Removed all the host related projects\nAs of 5.1 the Host will be on a seprarate repo/release cycle'
2456,'',"Wrong dependencies on the v4.X packages for users with -DependencyVersion Highest\nSince all v4.x packages (except 4.7) has:\r\n\r\n`NServiceBus.Interfaces (≥ 4.X.Y)`\r\n\r\nThis means that when we released v5 of the interfaces all v4 packages are broken.\r\n\r\nThis is what will happen:\r\n\r\n```\r\nPM> install-package nservicebus -version 4.6.3 -DependencyVersion Highest\r\nAttempting to resolve dependency 'NServiceBus.Interfaces (≥ 4.6.3)'.\r\nAttempting to resolve dependency 'NServiceBus (≥ 5.0.0)'.\r\ninstall-package : Circular dependency detected 'NServiceBus 4.6.3 => NServiceBus.Interfaces 5.0.0 => NServiceBus 5.0.1'.\r\nAt line:1 char:1\r\n+ install-package nservicebus -version 4.6.3 -DependencyVersion Highest\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], InvalidOperationException\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PowerShell.Commands.InstallPackageCommand\r\n```\r\n\r\n### Workaround\r\n\r\n`Install-Package NServiceBus -version 4.6.3 -DependencyVersion Lowest`\r\n\r\n### Proposed fix\r\n\r\nChange the version range from  >= => [4.6.3, 5.0.0)\r\n\r\nSince this only effects users with a non default DependencyVersion we treat this as a patch but bundle it the next time we have to patch v4\r\n\r\n"
2455,'','Introduced the concept of ErrorSubscribers\nThis will fix issue #1378'
2454,'',"NServiceBus Host Invoking Another Main Console Project in VS Solution\nI am seeing somthing strange after upgrading from version 4.2 to 4.6.5 (or 4.7).\r\n\r\nI have a main console project in my solution that has no reference to NserviceBus or to the Endpoint Services I've created. Now when I start an instance of  any the Endpoints, the main on this console project is being called.\r\n\r\nRunning VS2013."
2453,'','Hosting NSB under Owin in WebApp derives EndpointName incorrectly\nSteps to reproduce:\r\n\r\n* Create a new MVC Empty WebApp with Owin\r\n* Initialize NSB v5 (probably also previous versions) in the Startup class (example below)\r\n* Start the webapp\r\n\r\nDerived name will be System.Web\r\n\r\nThe EndpointHelper assumes that a webapp is running under HttpApplication, if this is not the case it lookes for the entry point. With owin the entry point is the System.Web assembly.\r\n\r\n![2014-10-09 11_02_59-databases](https://cloud.githubusercontent.com/assets/174258/4573521/637c3a2c-4f93-11e4-92bc-7905ba3e32e1.jpg)\r\n\r\nWorkaround: Specify Endpoint name explicitely.\r\n\r\n````\r\nusing Microsoft.Owin;\r\nusing Microsoft.Owin.BuilderProperties;\r\nusing NServiceBus;\r\nusing NServiceBus.Features;\r\nusing NServiceBus.Persistence;\r\nusing Owin;\r\n\r\n[assembly: OwinStartupAttribute(typeof(MvcApplication1.Startup))]\r\n\r\nnamespace MvcApplication1\r\n{\r\n    public partial class Startup\r\n    {\r\n        public static IBus Bus { get; private set; }\r\n\r\n        public void Configuration(IAppBuilder app)\r\n        {\r\n            var properties = new AppProperties(app.Properties);\r\n            var token = properties.OnAppDisposing;\r\n\r\n            var configuration = new BusConfiguration();\r\n\r\n            configuration.ScaleOut().UseSingleBrokerQueue();\r\n\r\n            configuration.DisableFeature<AutoSubscribe>();\r\n            configuration.UsePersistence<RavenDBPersistence>();\r\n\r\n            Bus = NServiceBus.Bus.Create(configuration).Start();\r\n\r\n            token.Register(() => Bus.Dispose());\r\n        }\r\n    }\r\n}\r\n````\r\n\r\nExpected behavior: Endpoint name should be MvcApplication1\r\n'
2452,'','Make exception tests work in debug mode\nremove `#if (!DEBUG)` from `...NServiceBus.AcceptanceTests\\Exceptions\\...` and hack the stack trace so it still verifies'
2451,'johnsimons',"Callback doesn't contain message\nResponse message can now be accessed from callback.\r\n\r\nThis bug affect version 5 only.\r\n\r\nIn prior versions it was possible to access the reply message from a callback, this seem to be broken in v5.\r\n\r\nThe following acceptance test passes against v4.6 but fails for v5:\r\n```c#\r\npublic class When_using_callback_to_get_message : NServiceBusAcceptanceTest\r\n{\r\n    [Test]\r\n    public void Should_receive_message()\r\n    {\r\n        var context = new Context();\r\n\r\n        Scenario.Define(context)\r\n            .WithEndpoint<EndpointWithLocalCallback>(b => b.Given(\r\n                (bus, c) => bus.SendLocal(new MyRequest()).Register(r =>\r\n                {\r\n                    c.Reply = (MyReply)r.Messages.Single();\r\n                    c.CallbackFired = true;\r\n                })))\r\n            .Done(c => c.CallbackFired)\r\n            .Run();\r\n\r\n        Assert.IsNotNull(context.Reply);\r\n    }\r\n\r\n    public class Context : ScenarioContext\r\n    {\r\n        public bool CallbackFired { get; set; }\r\n        public MyReply Reply { get; set; }\r\n    }\r\n\r\n    public class EndpointWithLocalCallback : EndpointConfigurationBuilder\r\n    {\r\n        public EndpointWithLocalCallback()\r\n        {\r\n            EndpointSetup<DefaultServer>();\r\n        }\r\n\r\n        public class MyRequestHandler : IHandleMessages<MyRequest>\r\n        {\r\n            public IBus Bus { get; set; }\r\n\r\n            public void Handle(MyRequest request)\r\n            {\r\n                Bus.Reply(new MyReply());\r\n            }\r\n        }\r\n    }\r\n\r\n    [Serializable]\r\n    public class MyRequest : IMessage { }\r\n\r\n    [Serializable]\r\n    public class MyReply : IMessage { }\r\n}\r\n```"
2448,'','Allow for multiple implementations of IOutboxStorage\nCurrently there is only one `IOutboxStorage` which works well in scenarios where both user data and system data (sagas, timeouts) are stored in one storage (e.g. via NHibernate) but can cause problems for situations when NSB persistence is not coupled to user data but rather to transport (e.g. EventStore). \r\n\r\nIn such case one could use `EnableFeature` to enable just the Outbox from NHibernate persistence suite and use `UsePersistence` to select proper persistence for sagas & timeouts etc. (e.g. EventStore) but that would result in incorrect behaviour when processing messages by Sagas.\r\n\r\nSome potentially common scenarios that are unsupported by current design of Outbox:\r\n\r\nTransport  | System Data | User Data\r\n--- | --- | ---\r\nRabbitMQ  | RavenDB | SQLServer\r\nEventStore | RavenDB | SQLServer\r\nEventStore | EventStore | SQLServer\r\n\r\n'
2447,'','Use Exception.ToString in headers\nStore `Exception.ToString()` instead of `Exception.StackTrace` inside the `NServiceBus.ExceptionInfo.StackTrace` header\r\n\r\n--\r\n\r\n### Default\r\n\r\nReplace the value written to `NServiceBus.ExceptionInfo.StackTrace` with `Exception.ToString`\r\n\r\n### Legacy\r\n\r\nForce exception headers back to `legacy mode` ie keep original headers and use `Exception.StackTrace` in `NServiceBus.ExceptionInfo.StackTrace`.\r\n\r\nEnabled by setting the `NServiceBus/Headers/UseLegacyExceptionStackTrace` AppSetting to `true`.\r\n\r\nCopy of https://github.com/Particular/NServiceBus/pull/2436'
2446,'',"Saga with both IAmStartedByMessages and IHandleTimeouts for same message causes timeout to fire for empty saga\nMessages handled by a saga that contains a explicit saga id should not be allowed to create a new saga if the given saga can't be found in storage. The saga loader has now been modified to check for the existence of the saga id header and also check that the message is directed to the specific saga by comparing the saga type with the saga type header.\r\n\r\n--\r\n\r\n## To verify\r\n```\r\npublic class MySaga : Saga<MySagaData>,\r\n    IAmStartedByMessages<SagaInitiateMessage>,\r\n    IAmStartedByMessages<MyTimeout>,\r\n    IHandleTimeouts<MyTimeout>\r\n{\r\n    public void Handle(SagaInitiateMessage message)\r\n    {\r\n        Data.MyProp = 100;\r\n        RequestTimeout<MyTimeout>(TimeSpan.FromSeconds(25));\r\n        //after this delete the saga data from raven but dont delete the timeout\r\n    }\r\n\r\n    public void Timeout(MyTimeout state)\r\n    {\r\n        var dictionary = Bus.CurrentMessageContext.Headers;\r\n        // the timeout will fire but the saga data will be empty\r\n        // have a look in the headers. the timeout is associated with an exiting saga. ie no this one\r\n        //Note the MyProp value here will be 0 and the id will be a new guid\r\n        Debug.WriteLine(Data.MyProp);\r\n    }\r\n\r\n    public void Handle(MyTimeout message)\r\n    {\r\n        Debug.WriteLine(Data.MyProp);\r\n    }\r\n}\r\n```\r\n\r\nworking repro here https://github.com/Particular/BugsRepro/tree/master/TimeoutAfterComplete"
2443,'',"Annyoing interface obsoletion\nHy folks\r\n\r\nOk the title is a bit exagerated ;). But imagine how annoying it is when you are new to NSB, read a slightly outdated article but want to use NSB v5. Now when you discover the interfaces inside VS the following happens (example IWantCustomLogging):\r\n\r\n * IWantCustomLogging forwards to NServiceBus.Hosting.Profiles.IConfigureLogging\r\n * There is another IConfigureLogging which points to NServiceBus.Hosting.Profiles.IConfigureLogging\r\n * the IConfigureLogging mentions that I should use Customize(BusConfiguration). \r\n\r\nWouldn't it be more helpful to rewrite the obsoletion messages for the old interfaces to directly point to the new way?"
2440,'',"When_handling_current_message_later\nWhen_handling_current_message_later.Should_not_execute_subsequent_headers is pretty vulnerable when it comes to retries & messages left over from previous tests (in asb f.E.)\r\n\r\nContext.FirstHandlerInvocationCount++; without context identification makes it a bit flaky\r\n\r\nThe fact that it is colocated with a test that can only take 10 seconds (which is far less than default retry timeout), doesn't make it better either"
2439,'','Remove Add-BindingRedirect from nuget install\nNot needed since we are locking assembly version number to major'
2438,'','Expose set headers in downstream handlers, fixes #529\n'
2436,'','Use Exception.ToString in headers\nStore `Exception.ToString()` instead of `Exception.StackTrace` inside the `NServiceBus.ExceptionInfo.StackTrace` header\r\n\r\n--\r\n\r\n### Default\r\n\r\nReplace the value written to `NServiceBus.ExceptionInfo.StackTrace` with `Exception.ToString`\r\n\r\n### Legacy\r\n\r\nForce exception headers back to `legacy mode` ie keep original headers and use `Exception.StackTrace` in `NServiceBus.ExceptionInfo.StackTrace`.\r\n\r\nEnabled by setting the `NServiceBus/Headers/UseLegacyExceptionStackTrace` AppSetting to `true`.\r\n\r\n\r\n'
2435,'','Raven ConnectionString: Timeout and RetryCount\nHi, is there a way to specify the Timeout and Retry parameters as like Oracle connection string? Due a intermittent network glitch, our test NSB was not able to access test ravendb for 10~15mins. But by the time, NSB endpoint got shutdown. We end up in restarting it every time. Definitely Network need to be fixed. But  is there a way to specify timeout and retry count in through configuration and NSB reconnects automatically?'
2434,'','Extended IManagedMessageFailures to include numberOfAttempts\nRefactored FaultManager to create proper error messages in case FLR is disabled.'
2432,'','Introduce new headers with less time precission to better support integration scenarios\nRaised by Adam Tybor on the NSB group:\r\n\r\nhttps://groups.google.com/forum/#!topic/particularsoftware/v3Il2mJwF6Q\r\n\r\n```\r\nWhat is the reason for using such a high precision non standard format in the date time of header fields?\r\n\r\nThis is actually causing us some grief for zero benefit.\r\n\r\n1) These dates and times are set using DateTime.UTCNow which doesn\'t even have accuracy to the millisecond level, let alone anything more precise than that.\r\nFrom MSDN\r\nhttp://msdn.microsoft.com/en-us/library/bb882581(v=vs.110).aspx\r\nIt is possible to display very small fractional units of a second, such as ten thousandths of a second or hundred-thousandths of a second. However, these values may not be meaningful. The precision of date and time values depends on the resolution of the system clock. On Windows NT 3.5 and later, and Windows Vista operating systems, the clock\'s resolution is approximately 10-15 milliseconds.\r\n\r\nAlso, in order to make good use of these you would need to ensure your clocks across all your machines are lock step in sync.  Highly unlikely at the millisecond level, I think even Google Spanner still has up to 10ms of clock skew.\r\n\r\n2) This format has problems being parsed by other platforms, for example Java can\'t handle arbitrary fractions of seconds, it can only handle milliseconds, I think newer versions can handle nanoseconds, but it cannot handle microseconds.  This forces us to manually truncate date and time so java can accurately consume this which can be painful with some of our Ops Tools.  This SO thread answers what we saw as an issue consuming these timestamps on other platforms.\r\n\r\nI would propose a standard timestamp format that can be more easily worked with across other platforms. "2014-09-27T17:05:53,341Z" where fractions is only milliseconds.\r\n\r\n```\r\n\r\n## The plan\r\n\r\n1. Go through headers with datetimes and add new ones\r\n2. Use the `2014-09-27T17:05:53,341Z` format\r\n3. Update ServiceControl to check for the new headers'
2431,'','Remove the logging from init.ps1\nIt creates noise in the package manager console\r\n\r\n--\r\nEg: https://github.com/Particular/NServiceBus/blob/develop/packaging/nuget/tools/init.ps1#L37'
2430,'','Fix polarity error causing timeouts not to be periodically cleaned up\n'
2429,'','Fix polarity error causing timeouts not to be periodically cleaned up\n'
2428,'','Fix polarity error causing timeouts not to be periodically cleaned up\n'
2427,'','Fix polarity error causing timeouts not to be periodically cleaned up\n'
2426,'','Fix polarity error causing timeouts not to be periodically cleaned up\n'
2425,'','Bring Init() to contract of all persisters?\nCurrently only `ISubscriptionStorage` has a method `void Init()` while all other persisters (Sagas, Timeouts etc) do not.\r\n\r\nIt is only logical that if a persistence technology requires some sort of initialization (setting a schema for example) it would be also required by all persisters in one form or another. Not everything makes sense to do from the encapsulating Feature logic.\r\n\r\nWhat are your thoughts @andreasohlund @SimonCropp @johnsimons  ?'
2424,'','Fix polarity error causing timeouts not to be periodically cleaned up\n'
2423,'','Fix polarity error causing timeouts not to be periodically cleaned up\n'
2422,'','Fixing polarity error causing timeouts to get skipped\n'
2418,'','Move config stuff to separate files\nFollowing up a conversation @ NSBCon: is there any way to move, e.g., UnicastBus config, to a different file, as supported by the .Net configuration framework via the configSource attribute.\r\nThe requirement is to be able to easily manage differences among environments, such as prod, qa, test, etc..'
2417,'','Make ReplyToOptions public\nThe transports needs it to determine if the message is a reply or not'
2416,'',"Metamodel for sagas\nThis pull adds a saga metamodel that paves the way for many of the planned saga features.\r\n\r\nThe main thing with this pull is that mapped properties are now automatically unique. The inmemory persister is already modified to support this:\r\n\r\nhttps://github.com/Particular/NServiceBus/pull/2416/files#diff-17e8d72500928dcb599bc890835658eeR80\r\n\r\nSince the other persisters needs to be modified to look at the metamodel we need to wait until v6 before we can fully complete this. (I'll raise separate issues for those modifications)\r\n\r\nI've also killed off  the brittle `with_sagas` tests that are now either covered by real unit tests or acceptance tests.\r\n\r\nNext step after this pull is to fix:\r\n\r\nhttps://github.com/Particular/NServiceBus/issues/2080\r\nhttps://github.com/Particular/NServiceBus/issues/2442\r\nhttps://github.com/Particular/NServiceBus/issues/313\r\nhttps://github.com/Particular/NServiceBus/issues/313\r\n\r\nwhich all should be quite a bit easier after this.\r\n\r\nI'll rebase after the review is complete"
2415,'',"Upgraded NService Bus 3.0.3.32 to 4.6.4, the old version saga can't  expire.\nWe updated NService Bus from 3.0.3.32 to 4.6.4. The old version saga stop work.\r\n\r\nHow do we handle old data when we upgraded?  \r\n\r\n"
2414,'','trying to download NServiceBus.Integration.Webservice again higher NServiceBus version\nDear NService Bus,\r\n\r\nI am trying to download NServiceBus.Integration.Webservice - but this seems to want ot download my NService bus to 3.3.11. Although this package is linked to this version - is there a version I can run agains version 4.2 or 4.6.6?'
2413,'','Should throw an error Definition does not have a public empty constructor\nFor Transport, Logging and Persistence definitions.\r\n\r\n--\r\n\r\nsince this `UseTransportExtensions.UseTransport<T>()` has a `new()` constraint\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Transport/Config/UseTransportExtensions.cs#L15\r\n\r\nthen this `UseTransportExtensions.UseTransport(Type)` \r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Transport/Config/UseTransportExtensions.cs#L28  should also verify that the type has a public constructor.'
2411,'','Acceptance test improvements\nWIP'
2409,'',"Differences in NHibernate Sagadata storage between 2.5 and 4.6\nWe are upgrading a heap of services from 2.5 to 4.6.4\r\n\r\nWe are using NHibernate and sql2012.\r\n\r\nWe have an enum in our sagadata storing status.\r\n\r\nin 2.5 it's persists as a string and in 4.6 it's storing as an int.\r\n\r\nIs there anyway to force nhibernate to store it as a string so we can migrate data easily?\r\n\r\nCheers,\r\nMatt\r\n"
2408,'',"When_sending_with_custom_IDataBus should use unique file name\nTo prevent this issue\r\n```\r\n[NServiceBus.AcceptanceTests.DataBus.When_sending_with_custom_IDataBus.Should_receive_the_message_the_correctly] [Test Error Output]\r\nBson - Started @ 9/23/2014 11:44:22 AM\r\nXml - Started @ 9/23/2014 11:44:22 AM\r\nJson - Started @ 9/23/2014 11:44:22 AM\r\nBinary - Started @ 9/23/2014 11:44:22 AM\r\nStopping endpoint: DataBus.Sender.WhenSendingWithCustomIdatabus.Json\r\nStopping endpoint: DataBus.Receiver.WhenSendingWithCustomIdatabus.Json\r\n2014-09-23 11:44:30.517 ERROR NServiceBus.AcceptanceTesting.Support.EndpointRunner Failed to start endpoint DataBus.Sender.WhenSendingWithCustomIdatabus.Xml\r\nSystem.IO.IOException: The process cannot access the file 'Y:\\BuildAgent\\temp\\buildTmp\\MyDataBus.txt' because it is being used by another process.\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at NServiceBus.AcceptanceTests.DataBus.MyDataBus.Put(Stream stream, TimeSpan timeToBeReceived) in y:\\BuildAgent\\work\\7292bb915dd8fc2\\src\\NServiceBus.NHibernate.AcceptanceTests\\App_Packages\\NSB.AcceptanceTests.5.0.0\\DataBus\\When_sending_with_custom_IDataBus.cs:line 94\r\n   at NServiceBus.DataBusSendBehavior.Invoke(OutgoingContext context, Action next) in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.Core\\DataBus\\DataBusSendBehavior.cs:line 53\r\n   at NServiceBus.PopulateAutoCorrelationHeadersForRepliesBehavior.Invoke(OutgoingContext context, Action next) in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.Core\\Sagas\\PopulateAutoCorrelationHeadersForRepliesBehavior.cs:line 46\r\n   at NServiceBus.MutateOutgoingMessageBehavior.Invoke(OutgoingContext context, Action next) in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.Core\\MessageMutator\\MutateOutgoingMessageBehavior.cs:line 28\r\n   at NServiceBus.Pipeline.PipelineExecutor.Execute[T](BehaviorChain`1 pipelineAction, T context) in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 127\r\n   at NServiceBus.Pipeline.PipelineExecutor.InvokeSendPipeline(DeliveryOptions deliveryOptions, LogicalMessage message) in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 114\r\n   at NServiceBus.Unicast.UnicastBus.SendMessage(SendOptions sendOptions, LogicalMessage message) in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 611\r\n   at NServiceBus.AcceptanceTesting.Support.EndpointRunner.Start() in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.AcceptanceTesting\\Support\\EndpointRunner.cs:line 120\r\nStopping endpoint: DataBus.Sender.WhenSendingWithCustomIdatabus.Bson\r\n```"
2407,'SzymonPobiega',"FeatureStartupTasks are stopped too late\n--\r\nFor example the outbox cleaner for NH now and then blows up with:\r\n\r\n```\r\nNHibernatePersistence - Started @ 9/22/2014 5:26:18 PM\r\nUnhandled exception in remote appdomain: System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'PipelineExecutor'.\r\n   at NServiceBus.Pipeline.PipelineExecutor.get_CurrentContext() in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 51\r\n   at NServiceBus.Persistence.NHibernate.DbConnectionProvider.TryGetConnection(IDbConnection& connection, String connectionString) in y:\\BuildAgent\\work\\7292bb915dd8fc2\\src\\NServiceBus.NHibernate\\SharedSession\\DbConnectionProvider.cs:line 21\r\n   at NServiceBus.Persistence.NHibernate.StorageSessionProvider.OpenSession() in y:\\BuildAgent\\work\\7292bb915dd8fc2\\src\\NServiceBus.NHibernate\\SharedSession\\StorageSessionProvider.cs:line 50\r\n   at NServiceBus.Outbox.OutboxPersister.RemoveEntriesOlderThan(DateTime dateTime) in y:\\BuildAgent\\work\\7292bb915dd8fc2\\src\\NServiceBus.NHibernate\\Outbox\\OutboxPersister.cs:line 91\r\n   at NServiceBus.Features.NHibernateOutboxStorage.OutboxCleaner.PerformCleanup(Object state) in y:\\BuildAgent\\work\\7292bb915dd8fc2\\src\\NServiceBus.NHibernate\\Outbox\\NHibernateOutboxStorage.cs:line 83\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.TimerQueueTimer.CallCallback()\r\n   at System.Threading.TimerQueueTimer.Fire()\r\n   at System.Threading.TimerQueue.FireNextTimers()\r\n```\r\n\r\nAfter looking at the code it seems to be stopping the tasks before it disposes the builder but there seems to be a race condition where the PipelineExecutor gets disposed before and causes a blow up on endpoint stop."
2406,'',"Improve InMemoryTimeoutPersister read performance\nLooks like it's possible to improve `InMemoryTimeoutPersister` read performance by using `SortedSet<>`, however that's not part of the framework so not sure it would worth the effort?\r\n\r\nEither way, keeping and iterating over an unordered list is the worst possible way of implementing this logic. We could at the very least (no pun intended) implement a sort-on-add\r\n\r\n@SimonCropp @andreasohlund @johnsimons "
2403,'','Suggestion to have IHandleSagaNotFound<T> where T: IMessage\nMany developers currently handle SagaNotFound messages using switch/case in their handler. It would be very useful to handle this event more message-specific. \r\n\r\nIn this case T is the message type, that should be received and processed by a Saga but the Saga was not found. We then can send some meaningful response to a client, saying, for example, "XXX has expired". This is useful when we heavily using timeout messages that expire some process but there is a change for the client to respond on the running process when it does not exist any more.'
2402,'','Add a new Configure.With overload that takes assembliesToSkip only\nHi,\r\n\r\nI have quiet a few dlls in the bin folder and NSB startup time is not great. I have improved that by providing NSB with an explicit list of assemblies but that required me to copy and paste some of the NSB code.  It would be nice if that was not required.\r\n\r\n```\r\n private static IEnumerable<Assembly> GetAssembliesToScan()\r\n        {\r\n            var binFolder = GetPathToBinFolder();\r\n            var files = new DirectoryInfo(binFolder).GetFiles("*.dll")\r\n                                                    .Where(fi => !fi.Name.StartsWith("MyNameSpace") && \r\n                                                                 !fi.Name.StartsWith("NServiceBus"))\r\n                                                    .Select(fi => fi.Name)\r\n                                                    .ToArray();\r\n\r\n            return Configure.GetAssembliesInDirectory(binFolder, files);\r\n        }\r\n\r\n        private static string GetPathToBinFolder()\r\n        {\r\n            return HttpRuntime.AppDomainAppId != null ? HttpRuntime.BinDirectory : AppDomain.CurrentDomain.BaseDirectory;\r\n        }\r\n```'
2401,'',"v4.6.5 has an incorrect assembly version\nIt's now 4.6.5 , should be 4.6.0\r\n\r\nThis needs to be hotfixed since it will force users to add asm redirect when upgrading from 4.6.X to 4.6.5"
2400,'','Remove permutation from the acpt test endpoint names\nToday we have:\r\n\r\nBasic.CorrelationEndpoint.WhenSendingWithNoCorrelationId.MsmqTransport\r\n\r\nWe can skip the last part to shorten the name since we no longer do "permutations"\r\n'
2399,'','Make the stacktrace asserts less brittle\nThe acceptance tests now breaks every time we add or remove a behavior. It also breaks all downstream components that modify the pipeline.\r\n\r\nWe should make the tests more smart to look at the structure of the pipeline and check the stacktrace based on that.\r\n\r\nThis needs to be fixed before the next release since it would "re-break" at least RabbitMQ when we update'
2398,'','* Add acceptance tests for the various combinations of Handler, MessageM...\nWIP DO NOT MERGE\r\n\r\n* [x] Add acceptance tests for the various combinations of Handler, MessageModule and UOW exceptions\r\n  * [x] Verify root exception type\r\n  * [x] Verify exceptions types when it is an `AggregateException` when multiple occur\r\n  * [x] Verify stack traces are not corrupted\r\n* [x] Add acceptance tests for `SerializationExcepition`\r\n  * [x] Verify stack trace is not corrupted\r\n* [x] Extract out common code from `ManageMessageFailuresWithoutSlr.SetExceptionHeaders` and `FaultManager.SetExceptionHeaders` to a helper method\r\n* [x] Remove StackTracePreserver\r\n* [x] Remove `Try Ctach` from `BehaviorChain.Invoke`. no longer needed with `AggregateException` approach\r\n* [x] Obsolete and remove usages of `TransportMessageHandlingFailedException`. this will remove the need for double handling of both `AggregateException` and `TransportMessageHandlingFailedException`\r\n* [x] Make sure to log an error if errors a thrown in OnFailedMessageProcessing '
2397,'jdrat2000','Symantec antivirus detects nservicebus.host.exe as a threat\nSee customer feedback:\r\n\r\n> Last night our enterprise symantec installation identified nservicebus.host.exe as a potential virus and uninstalled all windows services from the servers running nservicebus.\r\n> The identified threat was: "SONAR.SuspLaunch2"\r\n> Once we removed the false hit, the windows services came back up and started processing messages again.\r\n\r\n(Desk case 6919)'
2396,'','Added a wrapper for the IAuditMessages\nCertain containers do not allow multiple registrations for the same interface impl.'
2395,'',"Log for publishing events doesn't include target endpoint.\n--\r\n\r\nWhen publishing an event the log looks like this:\r\n\r\n```\r\n2014-09-17 11:11:42 [Debug] Sending message Messages.Events.MyEvent with ID c5971f37-7fd4-461d-a360-a3a900b87cc8 to destination .\r\n```\r\n\r\nNotice the last part: `destination .` Shouldn't there be something before the dot?"
2393,'','fix Should_encrypt_and_decrypt_for_expired_key test\nThe keys are too similar and hence can sometimes fail'
2392,'','SqlServer Transport - Multi DB queues - providing config in code\n\r\nOn behalf of Ross Berkuta\r\n\r\nform support case https://nservicebus.desk.com/agent/case/6908\r\n\r\nOur application uses NServiceBus with SqlServer transport. We would like to send messages to queues in different databases\r\nhttps://github.com/Particular/NServiceBus.SqlServer/releases/tag/1.2.0\r\n\r\nThe example shows how to configure queue/connection string pairs in app.config. Unfortunately we cannot use this approach, because in our case, connection strings become available at runtime only.\r\nIs there a way to specify queue/connection string configuration programmatically, let’s say in IConfigureThisEndpoint.Configure method?\r\n\r\n'
2391,'','Split containers to separate repos\n'
2387,'','Removed the msmq queuename shortening\nSince it add more problems then it solves.'
2386,'','Shortening folder names for acceptance tests\n'
2385,'','should we fix IntegrationTests\nSo none of https://github.com/Particular/NServiceBus/tree/develop/IntegrationTests have been updated to V5. They are aso still using ripple (which doesnt even exist in the repo anymore)\r\n\r\nDo we abandon (delete) these now or fix them?\r\n\r\n@indualagarsamy thoughts? do u see them as valuable '
2384,'','If handler throws a SerializationException then retries are ignored\n--\r\n\r\nWe abort early for SerializationExceptions\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Unicast/Transport/TransportReceiver.cs#L341\r\n\r\nThe reason being if a message fails to deserialize we dont want to retry.\r\n\r\nHowever if a handler throws a SerializationException then that will hit the same exception handling path and the handler will not be retried'
2383,'',"The host doesn't seem to honor config.AssembliesToScan if there are failures\nWhen there are assemblies that fail to scan we blow up here because the scanner is set to throw:\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/master/src/NServiceBus.Core/Hosting/GenericHost.cs#L46\r\n\r\nthis means that even if the user excluded those failed asms\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/master/src/NServiceBus.Core/Hosting/GenericHost.cs#L181\r\n\r\n the host won't start."
2382,'','remove DefaultRetryPolicy\n'
2381,'','DataBusReceiveBehavior.cache and  DataBusSendBehavior.cache are static state\nHence the list databus property conventions will be shared across all bus instances.\r\n\r\nThe fix would be to extract out that cache to a single instance class in the container\r\n\r\nAlso note that the GetDataBusProperties of both classes have the exact same code and have an in memory cache of the same data. So there would be perf and memory benefits as well\r\n'
2380,'','remove CommonObjectBuilder.Synchronized\nfixes #2376'
2379,'','Remove stack trace tweaks v5\n'
2378,'johnsimons','Saga config still static\nThe Saga feature still has 8 static fields. Which means any state in these is share across all bus instances.'
2377,'','Remove Sagas.GetSagaTypeForSagaEntityType and Sagas.GetSagaDataTypes\nNo longer used\r\n'
2376,'','Obsolete CommonObjectBuilder.Synchronized \nSmartClients should perform their own synchronization\r\n'
2375,'','Remove DefaultRetryPolicy.RetryPolicy\nSo nothing sets it and it a a static pointer to `DefaultRetryPolicy.Validate`.  So assuming its usage was refactored away?'
2374,'SimonCropp','DefaultRetryPolicy.NumberOfRetries and DefaultRetryPolicy.TimeIncrease are static\nWhich means they are global (last one wins) across all bus instances'
2373,'','InnerException details lost in error headers\nWhen exception details are written to the error headers the `InnerException` type is captured. \r\n\r\nHowever the `Message` and the `StackTrace` of `InnerException` are not captured. \r\n\r\nSame goes for the nested `InnerExceptions` and `StackTrace` of `AggregateException` '
2371,'','When adding more than one package with nuget it is very easy to "corrupt" the VS project\nSteps to repoduce:\r\n\r\n* create an empty class library project;\r\n* add, via nuget, a reference to "NServiceBus.Host";\r\n* do not close the nuget dialog;\r\n* search for another package, whatever, e.g. "Radical", add a reference to it:\r\n* close the nuget dialog;\r\n\r\nthe following warning is shown by VS:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1325611/4245394/0410d2c6-3a37-11e4-901e-7d6086438013.png)\r\n\r\nAll the choices lead to a currupted VS project, the issue is, at least seems:\r\n\r\n1 our powershell cmdlet modifies the project file to add the "Start external project" command to execute the Host;\r\n2 the second reference modifies the the project file adding a new reference;\r\n\r\nconflict. I suppose we should "save" the project after step 1.'
2370,'',"Issue2356\nfix + test for issue #2356. I've just replaced `type.Name` to `type.SerializationFriendlyName()` method that already exsists."
2369,'','Deserialization of Queue stored on top of Saga.Data is broken\nIf you try to use a System.collection.generic.queue within saga data the information within the queue is being serialized and stored inside ravendb but on deserialization e.g. once the saga gets another message it will fail.\r\n\r\nOther collections like disctionary, lists, hashset, tuple works fine.\r\n\r\nStep to reproduce:\r\ncreate a saga data like:\r\n```\r\npublic class mydata : ContainSagaData\r\n{\r\n       public Queue<string> queue { get; set; }\r\n}\r\n```\r\nat the starting message populate the queue\r\n```\r\n if (Data.queue == null)\r\n                Data.queue = new Queue<string>();\r\nData.queue.Enqueue("aaa");\r\n```\r\nif you call the same saga with some other message it will fail on deserialization of the Data.queue '
2367,'',"Persistence no longer required for SendOnly endpoints\n--\r\n\r\nWhen eg running RabbitMQ in sendonly mode\r\n\r\n```\r\nvar config = new BusConfiguration();\r\nconfig.UseTransport<RabbitMQTransport>();\r\nvar sendOnly = Bus.CreateSendOnly(config);\r\n```\r\n\r\nThrows https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Persistence/PersistenceStartup.cs\r\n\r\nI think the same problem exists for a regular endpoint that doesn't use any persistences, eg a rabbit with timeout management disabled and no sagas in scanned types.\r\n\r\nI think this check needs to be lazy in some way.\r\n\r\n"
2366,'','MessageModule.HandleError should log an Error when it throws\nWhen `HandleEndMessage` or `HandleBeginMessage` throw an `Error` is logged\r\n\r\nHowever when `HandleError` is called a `Warn` is logged.'
2365,'','Exception detail in header is lost if handler throws an AggregateException\n--\r\n\r\nWhen a Handler throws an `AggregateException`. \r\n\r\n    class Handler : IHandleMessages<Message>\r\n    {\r\n        public void Handle(Message message)\r\n        {\r\n            try\r\n            {\r\n                MethodThatThrows();\r\n            }\r\n            catch (Exception exception)\r\n            {\r\n                throw new AggregateException("My Exception", exception);\r\n            }\r\n        }\r\n\r\n        void MethodThatThrows()\r\n        {\r\n            throw new Exception("My Inner Exception");\r\n        }\r\n    }\r\n\r\n`TransportReceiver` does a `GetBaseException` \r\n```\r\nif (ex is AggregateException)\r\n{\r\n       ex = ex.GetBaseException();\r\n}\r\n```\r\nWhich will unwrap the `AggregateException` converting it to the instance of `Exception("My Inner Exception");`. And hence `Exception("My Inner Exception");` will be passed to `IManageMessageFailures` instead of the correct `AggregateException("My Exception", exception);`\r\n\r\nNote that we also do the same thing (`ex = ex.GetBaseException();`) again in `FirstLevelRetries` so it needs to be fixed in two locations'
2363,'','FLR is always performed even if max retries is set to 0\nWe need to check for max retries == 0 in here but also pass the exception in.\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/master/src/NServiceBus.Core/Unicast/Transport/FirstLevelRetries.cs#L19\r\n\r\nThis was observed during a debugging session with @SimonCropp and the first action here would be to create a failing acceptance test'
2362,'','remove stack trace tweaks\nWIP DO NOT MERGE\r\n\r\n* [x] Add acceptance tests for the various combinations of Handler, MessageModule and UOW exceptions\r\n  * [x] Verify root exception type\r\n  * [x] Verify exceptions types when it is an `AggregateException` when multiple occur\r\n  * [x] Verify stack traces are not corrupted\r\n* [x] Add acceptance tests for `SerializationExcepition`\r\n  * [x] Verify stack trace is not corrupted\r\n* [x] Extract out common code from `ManageMessageFailuresWithoutSlr.SetExceptionHeaders` and `FaultManager.SetExceptionHeaders` to a helper method\r\n* [x] Remove StackTracePreserver\r\n* [x] Remove `Try Ctach` from `BehaviorChain.Invoke`. no longer needed with `AggregateException` approach\r\n* [x] Obsolete and remove usages of `TransportMessageHandlingFailedException`. this will remove the need for double handling of both `AggregateException` and `TransportMessageHandlingFailedException`\r\n* [x] Make sure to log an error if errors a thrown in OnFailedMessageProcessing '
2361,'','Paket\nWe try to evaluate if Paket is already able to be used in different OSS projects.\r\n\r\nThis is how it might look like in NServiceBus.\r\n\r\n"Paket install" performs the package restore.\r\n\r\nWIP - Please do not merge. It\'s only for discussion.\r\n\r\n/cc @agross'
2360,'johnsimons','re add IMessageDispatcherFactory with valid obsolete message\nsooo\r\n\r\n> replacement == use the pipeline and replace the HandlerDisaptch step\r\n'
2359,'','fix GatewayProfileHandler error messages\nSo the errors here make no mention of the gateway being externalised \r\n\r\nhttps://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Hosting.Windows/Profiles/Handlers/GatewayProfileHandler.cs\r\n\r\n```\r\nMultiSite Profile is obsolete as Gateway is a feature now, you can use Feature.Enable<Gateway> to turn it on\r\n```\r\nShould also fix the obsolete here https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Hosting.Windows/Profiles/MultiSite.cs'
2358,'','Fix message in DispatchMessageToTransportBehavior\nSo the message here is clearly wrong https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Unicast/Behaviors/DispatchMessageToTransportBehavior.cs#L106\r\n\r\n```\r\nNo message publisher has been registered. If you\'re using a transport without \r\nnative support for pub/sub please enable the message driven publishing feature \r\nby calling: Feature.Enable<MessageDrivenPublisher>() in your configuration");\r\n```\r\nWhat should it be'
2357,'','NSB Beta5 - Problem processing timeouts from sagas from previous version\n**Steps to reproduce**\r\nMake sure to use RavenDB 2.5 (In this test, I am running `2.5.0, Build version: 2916`)\r\n1. In the attached sample, run the `SagaTimeoutTest_v4_4_0 project`. This will request 10 timeouts and wait for 30 seconds and shut down.\r\n2. Then start the `SagaTimeoutTest_v5_0_0` endpoint.\r\n3. The sagas should process the requested timeouts, but unfortunately, nothing happens.\r\n\r\nNOTE: Running the same scenario using `SagaTimeoutTest_v4_6_4` endpoint results in an startup error.\r\n```\r\nException when starting endpoint.\r\nAutofac.Core.DependencyResolutionException: An exception was thrown while execut\r\ning a resolve operation. See the InnerException for details. ---> The RavenDB se\r\nrver you have specified is detected to be Product version: 2.5.0 / 6dce79a, Buil\r\nd version: 2916. NServiceBus requires RavenDB version 2.0 to operate correctly.\r\nPlease update your RavenDB server.\r\n\r\nFurther instructions can be found at:http://particular.net/articles/using-ravend\r\nb-in-nservicebus-installing (See inner exception for details.) ---> System.Inval\r\nidOperationException: The RavenDB server you have specified is detected to be Pr\r\noduct version: 2.5.0 / 6dce79a, Build version: 2916. NServiceBus requires RavenD\r\nB version 2.0 to operate correctly. Please update your RavenDB server.\r\n```\r\n\r\nThe same scenario works correct between 4.4.0 and 4.5.0.'
2356,'',"Add XmlMessageSerializer support for generic types.\n--\r\nI'm using NSB 4.6.4 and would like to have generic message and generic message handler. I have found a way to achieve that except one thing. I looks like XmlMessageSerialize can't deserialize generic type.\r\n\r\nCode:\r\n\r\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Server, IWantToRunWhenBusStartsAndStops, IWantCustomInitialization\r\n    {\r\n        public IBus Bus { get; set; }\r\n\r\n        void IWantCustomInitialization.Init()\r\n        {\r\n            Configure.With()\r\n                .DefaultBuilder()\r\n                .InMemorySagaPersister()\r\n                .InMemorySubscriptionStorage()\r\n                .UseInMemoryGatewayDeduplication()\r\n                .UseInMemoryGatewayPersister()\r\n                .UseInMemoryTimeoutPersister();\r\n\r\n            Configure.TypesToScan.Add(typeof(Command<>).MakeGenericType(typeof(int)));\r\n            Configure.TypesToScan.Add(typeof(CommandHandler<>).MakeGenericType(typeof(int)));\r\n        }\r\n\r\n        public void Start()\r\n        {\r\n            this.Bus.SendLocal(new Command<int>());\r\n        }\r\n\r\n        public void Stop()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class Command<T> : ICommand\r\n    {\r\n    }\r\n\r\n    public class CommandHandler<T> : IHandleMessages<Command<T>>\r\n    {\r\n        public void Handle(Command<T> message)\r\n        {\r\n        }\r\n    }\r\n\r\nException:\r\n\r\n    2014-09-08 18:19:13,526 [17] ERROR NServiceBus.Unicast.Transport.TransportReceiver [(null)] <(null)> - Failed to deserialize message with ID: a9b8d0db-e7e9-4027-8f61-a3a0012de714\r\n    System.Runtime.Serialization.SerializationException: An error occurred while attempting to extract logical messages from transport message NServiceBus.TransportMessage ---> System.Xml.XmlException: Znak '`' o wartości szesnastkowej 0x60 nie może wchodzić w skład nazwy. wiersz 3, pozycja 9.\r\n       w System.Xml.XmlTextReaderImpl.Throw(Exception e)\r\n       w System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)\r\n       w System.Xml.XmlTextReaderImpl.Throw(Int32 pos, String res, String[] args)\r\n       w System.Xml.XmlTextReaderImpl.ParseElement()\r\n       w System.Xml.XmlTextReaderImpl.ParseElementContent()\r\n       w System.Xml.XmlTextReaderImpl.Read()\r\n       w System.Xml.XmlLoader.LoadNode(Boolean skipOverWhitespace)\r\n       w System.Xml.XmlLoader.LoadDocSequence(XmlDocument parentDoc)\r\n       w System.Xml.XmlLoader.Load(XmlDocument doc, XmlReader reader, Boolean preserveWhitespace)\r\n       w System.Xml.XmlDocument.Load(XmlReader reader)\r\n       w NServiceBus.Serializers.XML.XmlMessageSerializer.Deserialize(Stream stream, IList`1 messageTypesToDeserialize) w c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Serializers\\XML\\XmlMessageSerializer.cs:wiersz 292\r\n       w NServiceBus.Unicast.Messages.ExtractLogicalMessagesBehavior.Extract(TransportMessage physicalMessage) w c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Messages\\ExtractLogicalMessagesBehavior.cs:wiersz 98\r\n       w NServiceBus.Unicast.Messages.ExtractLogicalMessagesBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) w c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Messages\\ExtractLogicalMessagesBehavior.cs:wiersz 52\r\n       --- Koniec śladu stosu wyjątków wewnętrznych ---\r\n       w NServiceBus.Unicast.Messages.ExtractLogicalMessagesBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) w c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Messages\\ExtractLogicalMessagesBehavior.cs:wiersz 59\r\n       w NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) w c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:wiersz 51\r\n       w NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) w c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:wiersz 64\r\n       w NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass2.<InvokeNext>b__0() w c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:wiersz 51\r\n       w NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) w c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\UnitOfWork\\UnitOfWorkBehavior.cs:wiersz 24"
2355,'','remove stack trace hack\n'
2354,'','Hotfix 4.6.5\n@andreasohlund @SimonCropp please review.\r\n\r\nThis PR fixes 2 of the issues assigned to 4.6.5'
2353,'johnsimons','Timeouts and deferred messages are delivered to local worker queue, not distributor main queue\n**In NServiceBus 4.6.3, in a clustered distributor setup, timeouts and deferred messages are delivered to local queue on workers and not to clustered queue.**\r\n\r\nTimeout messages and deferred messages are delivered directly to a specific local queue (on the server which requested the timeout/deferring) and not to the clustered queue. This bypasses the regular path which involves removing a message from the storage queue and deliver the destination queue on the worker. The worker does not know this and reports back that it is ready to handle a new message after handling the timeout message, which causes the storage queue to grow.\r\n\r\nSee [question on StackOverflow](http://stackoverflow.com/questions/25684256/increasing-number-of-messages-in-storage-queues-after-saga-timeouts) for more information'
2352,'','Throw better exception when endpoint name maxes out endpoint name can max out PerformanceCounters\n--\r\n\r\nSo here\r\n```\r\nbool SetupCounter(string counterName, ref PerformanceCounter counter)\r\n{\r\n    try\r\n    {\r\n        counter = new PerformanceCounter(CategoryName, counterName, receiveAddress.Queue, false);\r\n```\r\n\r\nif we have a long endpoint name we get\r\n```\r\nSystem.InvalidOperationException occurred\r\n  _HResult=-2146233079\r\n  _message=Instance names used for writing to custom counters must be 127 characters or less.\r\n  HResult=-2146233079\r\n  IsTransient=false\r\n  Message=Instance names used for writing to custom counters must be 127 characters or less.\r\n  Source=System\r\n  StackTrace:\r\n       at System.Diagnostics.SharedPerformanceCounter..ctor(String catName, String counterName, String instanceName, PerformanceCounterInstanceLifetime lifetime)\r\n  InnerException: \r\n```'
2351,'','Fixed obsolete warning replacement to use BusConfiguration instead of Configure.With()\n**Still left to convert:**\r\n\r\n- [x] https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Logging/LogManager.cs#L64\r\n- [x] https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Obsoletes.cs#L425 (not sure how to pass in the connection string)\r\n- [x] https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Obsoletes.cs#L436-440 (not sure how to pass in both the connection string and default document store)\r\n- [x] https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Obsoletes.cs#L450 (not sure how to pass in the connection string)\r\n- [x] https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Obsoletes.cs#L461-465 (not sure how to pass in both the connection string and document store)\r\n- [x] https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Persistence/Msmq/SubscriptionStorage/ConfigureMsmqSubscriptionStorage_Obsolete.cs#L17 (not sure how to set the queue name)\r\n- [x] https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Persistence/Msmq/SubscriptionStorage/ConfigureMsmqSubscriptionStorage_Obsolete.cs#L23 (not sure how to set the queue name)\r\n- [ ] https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core.Tests/Config/When_using_convention_based_messages.cs - Is this even needed ? \r\n'
2350,'','Set local address a different way to avoid race condition\nReview please\r\n\r\nLocalAddress was set before the transport had a chance to set override it because of constructor invocation order. \r\n\r\nThis is a breaking change for at least the sql transport'
2349,'','Suffix the builders with "Builder"\nTo avoid clashing namespace issues\r\n\r\n\r\nPlease review'
2348,'','CompletionResult not found \nI\'m getting this error message when i\'m trying to return a CompletionResult to my UI\r\n\r\nThis morning i was on 4.6.1 and was working then upgraded to 4.6.4.\r\n\r\n```\r\nCould not find Metadata for \'NServiceBus.CompletionResult\'.\r\nPlease ensure the following:\r\n1. \'NServiceBus.CompletionResult\' is included in initial scanning see File Scanning: http://particular.net/articles/the-nservicebus-host\r\n2. \'NServiceBus.CompletionResult\' implements either \'IMessage\', \'IEvent\' or \'ICommand\' or alternatively, if you don\'t want to implement an interface, you can use \'Unobtrusive Mode\' see: http://particular.net/articles/unobtrusive-mode-messages\r\n```\r\n\r\nCode\r\n\r\n```\r\nprivate void Reply(ResponseCode responseCode)\r\n{\r\n\tvar returnMessage = new CompletionResult { ErrorCode = (int)responseCode };\r\n\tBus.Reply(returnMessage);\r\n}\r\n```\r\n\r\nEndpointConfig.cs\r\nWe currently had CompletionResult in the DefiningMessages config\r\n```\r\n\tConfigure\r\n\t\t.With()\r\n\t\t...\r\n\t\t.DefiningCommandsAs(t => t.Namespace != null && t.Namespace.EndsWith("Messages.Commands"))\r\n\t\t.DefiningEventsAs(t => t.Namespace != null && t.Namespace.EndsWith("Messages.Events"))\r\n\t\t.DefiningMessagesAs(t => t.Namespace != null && (t.Namespace.EndsWith("Messages.RequestResponses") || (t == typeof(CompletionResult))))\r\n```\r\n\r\n\r\n'
2347,'','DataBus Impersonation\nUser feedback:\r\n\r\n> DataBus will read and write to some resource. Typically the resource is some file share that is secured with Windows Credentials. Actually the Databus today is a Windows folder. While we can run the process as a specific user this is no always the case. For example I have a send only endpoint that is hosted by inetinfo.exe of things. The last thing I want to do is try to change this process identity. Rather I would like a way to impersonate for just the Databus persistence.\r\n>\r\n> I would imagine someone has thought about this. Of course if I chose a different persistence location like Redis then I would need a username and password and I would have to write my own DataBus implementation. But I think it might be a usefull feature on the existing FileShare Databus implementation.\r\n \r\n\r\n* See user feedback Desk case 6521'
2346,'','NSB 4.6.4 Log Directory configuration\nHi,\r\n\r\nI\'m trying to configure the logging directory to output to a "\\Logs\\" directory underneath the default AppDomain.CurrentDomain.BaseDirectory setting.\r\n\r\nFollowing these instructions (http://docs.particular.net/nservicebus/logging-in-nservicebus#changing-settings-via-code) i can\'t seem to learn how to do it. It\'s seems the LogManager has significantly changed in v5.\r\n\r\nHow does this work in 4.6.4?\r\n\r\nI\'d rather not have to manually new up the complete settings as per this (http://docs.particular.net/nservicebus/logging-in-nservicebus#log4net) \r\n\r\nis there an easier way? Does normal log4net xml config still work? I have a RollingFileAppender I\'m using in nsb2.5 that i\'d like to replicate.\r\n\r\nCheers,\r\nMatt\r\n\r\n'
2345,'','Internalize serializers\nPlease review'
2344,'','MSMQ windows service restart causes process crash\nWhen running with MSMQ as the transport, if the MSMQ windows service is restarted the following exception is thrown and the process crashes:\r\n```\r\n2014-09-03 10:04:48.388 ERROR NServiceBus Error in receiving messages.\r\nSystem.InvalidOperationException: Failed to peek messages from [DIRECT=OS:JOHNPC\r\n2\\private$\\Orders.Sender.Retries]. ---> System.Messaging.MessageQueueException:\r\nMessage Queue service is not available.\r\n   at System.Messaging.MessageQueue.AsynchronousRequest.End()\r\n   at System.Messaging.MessageQueue.EndAsyncOperation(IAsyncResult asyncResult)\r\n   at System.Messaging.MessageQueue.EndPeek(IAsyncResult asyncResult)\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.<>c__DisplayClass8.<OnPeek\r\nCompleted>b__3() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Msmq\r\n\\MsmqDequeueStrategy.cs:line 153\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.CallPeekWithExceptionHandl\r\ning(Action action) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Ms\r\nmq\\MsmqDequeueStrategy.cs:line 269\r\n   --- End of inner exception stack trace ---\r\n2014-09-03 10:04:48.388 ERROR NServiceBus Error in receiving messages.\r\nSystem.InvalidOperationException: Failed to peek messages from [DIRECT=OS:JOHNPC\r\n2\\private$\\Orders.Sender.Timeouts]. ---> System.Messaging.MessageQueueException:\r\n Message Queue service is not available.\r\n   at System.Messaging.MessageQueue.AsynchronousRequest.End()\r\n   at System.Messaging.MessageQueue.EndAsyncOperation(IAsyncResult asyncResult)\r\n   at System.Messaging.MessageQueue.EndPeek(IAsyncResult asyncResult)\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.<>c__DisplayClass8.<OnPeek\r\nCompleted>b__3() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Msmq\r\n\\MsmqDequeueStrategy.cs:line 153\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.CallPeekWithExceptionHandl\r\ning(Action action) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Ms\r\nmq\\MsmqDequeueStrategy.cs:line 269\r\n   --- End of inner exception stack trace ---\r\n2014-09-03 10:04:48.388 ERROR NServiceBus Error in receiving messages.\r\nSystem.InvalidOperationException: Failed to peek messages from [DIRECT=OS:JOHNPC\r\n2\\private$\\Orders.Sender]. ---> System.Messaging.MessageQueueException: Message\r\nQueue service is not available.\r\n   at System.Messaging.MessageQueue.AsynchronousRequest.End()\r\n   at System.Messaging.MessageQueue.EndAsyncOperation(IAsyncResult asyncResult)\r\n   at System.Messaging.MessageQueue.EndPeek(IAsyncResult asyncResult)\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.<>c__DisplayClass8.<OnPeek\r\nCompleted>b__3() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Msmq\r\n\\MsmqDequeueStrategy.cs:line 153\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.CallPeekWithExceptionHandl\r\ning(Action action) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Ms\r\nmq\\MsmqDequeueStrategy.cs:line 269\r\n   --- End of inner exception stack trace ---\r\n2014-09-03 10:04:48.388 ERROR NServiceBus Error in receiving messages.\r\nSystem.InvalidOperationException: Failed to peek messages from [DIRECT=OS:JOHNPC\r\n2\\private$\\Orders.Sender.TimeoutsDispatcher]. ---> System.Messaging.MessageQueue\r\nException: Message Queue service is not available.\r\n   at System.Messaging.MessageQueue.AsynchronousRequest.End()\r\n   at System.Messaging.MessageQueue.EndAsyncOperation(IAsyncResult asyncResult)\r\n   at System.Messaging.MessageQueue.EndPeek(IAsyncResult asyncResult)\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.<>c__DisplayClass8.<OnPeek\r\nCompleted>b__3() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Msmq\r\n\\MsmqDequeueStrategy.cs:line 153\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.CallPeekWithExceptionHandl\r\ning(Action action) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Ms\r\nmq\\MsmqDequeueStrategy.cs:line 269\r\n   --- End of inner exception stack trace ---\r\n\r\nProcess is terminated due to StackOverflowException.\r\n```'
2343,'SimonCropp','Unity builder fails on the IWantToRunWhenConfigurationIsComplete registration\nThis is a v5 beta issue\r\n\r\nThe way the core registers type seems to break unity:\r\n\r\nhttp://builds.particular.net/viewLog.html?buildId=53897&buildTypeId=NServiceBusUnityContaine_2AcceptanceTests&tab=buildLog#_focus=27&state=27'
2339,'',"Beta 3 No SLA exception\nBrand new host endpoint using Beta 3 throws because it can't extract SLA information.\r\n\r\n1) Is this really required?\r\n2) Exception message still says ConfigurationBuilder:\r\n\r\n    System.Exception: Could not extract SLA from settings or attribute. Please either call ConfigurationBuilder.EnableSla or  add a EndpointSLAAttribute to your IConfigureThisEndpoint."
2338,'','Bad generated EndpointConfig in V5 Beta 3\nWhen installing NServcieBus.Host package from Beta 3, this was the generated EndpointConfig:\r\n\r\n\tnamespace Nsb5Playground\r\n\t{\r\n\t\tusing NServiceBus;\r\n\r\n\t\t/*\r\n\t\t\tThis class configures this endpoint as a Server. More information about how to configure the NServiceBus host\r\n\t\t\tcan be found here: http://particular.net/articles/the-nservicebus-host\r\n\t\t*/\r\n\t\tpublic class EndpointConfig : IConfigureThisEndpoint, AsA_Server\r\n\t\t{\r\n\t\t\tpublic void Customize(ConfigurationBuilder builder)\r\n\t\t\t{\r\n\t\t\t\tbuilder.UsePersistence<PLEASE_SELECT_ONE>();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\nNotice ConfigurationBuilder in the Customize method, which is apparently defunct and replaced with BusConfiguration, so a lot of text goes red.\r\n\r\nAlso, just a thought - the PLEASE_SELECT_ONE is a real drag. Are there "really good reasons" why this is necessary?'
2337,'',' Fix for slow debugging when using castle windsor: #1989\nThe fix mimics the way Castle:s registration API does when registering properties. So this code:\r\n\r\n            NServiceBus.Configure.Component<MsmqMessageSender>(DependencyLifecycle.InstancePerCall)\r\n                .ConfigureProperty(t => t.Settings, settings);\r\n\r\nWill now be the same as:\r\n\r\n\t\t\tContainer.Register(Component.For<MsmqMessageSender>().LifeStyle.Transient)\r\n\t\t\t\t                   .DependsOn(\r\n\t\t\t\t\t                   Dependency.OnValue("Settings", settings))\r\n'
2335,'','Introduce ISendOnlyBus\nFixes https://github.com/Particular/NServiceBus/issues/2328\r\n\r\n@SimonCropp @johnsimons please review'
2334,'','add sendonly AcceptanceTests\nfor https://github.com/Particular/NServiceBus/issues/2285'
2333,'','MsmqSubscriptionStorage should be IDisposable\nsince it has a `MessageQueue` field which is `IDisposable`'
2331,'','remove usages of address\nWIP\r\n\r\n@andreasohlund what do u think?\r\n\r\n'
2330,'','Provide saga type name when logging a SagaNotFound message\n--\r\nWhen I saga cannot be found it would be great to know what type of saga cannot be found. Now I receive the following info:\r\n\r\n    2014-08-25 13:23:23.1601 INFO Could not find a saga for the message type NServiceBus.Pipeline.Behaviors.LogicalMessage with id da9b0785-48b4-45f7-aa6a-a39200dca7ab. Going to invoke SagaNotFoundHandlers.\r\n\r\nSo it would be great if to know which saga could not be found.'
2329,'','PerformanceMonitorUsersInstaller is broken for non english OSs\nIn `PerformanceMonitorUsersInstaller` we have hardcoded the group name to "Performance Monitor Users", which means that for non English OSs, that will not work.\r\n\r\nSee https://github.com/Particular/NServiceBus/blob/f50a5d23b69dec4b62ae3e981d5ee65e811e2220/src/NServiceBus.Core/Monitoring/PerformanceMonitorUsersInstaller.cs#L43-L50'
2328,'',"Introduce ISendOnlyBus\nTo simplify the api by not exposing `IBus` methods not relevant for a sendonly bus\r\n\r\n--\r\n\r\nor if you wan't a send only bus\r\n\r\n```\r\nvar config = new BusConfiguration();\r\n\r\nconfig.UseTransport<RabbitMq>();\r\n\r\nusing(ISendOnlyBus bus = Bus.CreateSendOnly(config))\r\n{\r\n     ///bus.Start() won't be available to you\r\n     ///bus.Defer won't be able to you , and a few others\r\n}\r\n```\r\n\r\nWith this change send only operations is no longer supported when using the NServiceBus host. Users should use the NServiceBus bootstrap package instead to self host"
2327,'','Introduce Bus.Create(new BusConfiguration())\n--\r\n\r\nNew syntax\r\n\r\n```\r\nvar config = new BusConfiguration();\r\n\r\nconfig.UseTransport<RabbitMQTransport>();\r\n\r\nusing(var bus = Bus.Create(config))\r\n{\r\n   bus.Start();\r\n}\r\n```\r\n\r\nOld syntax:\r\n\r\n```\r\nusing(var bus = Configure.With(b=>b.UseTransport<RabbitMQ>()).CreateBus())\r\n{\r\n   bus.Start();\r\n}\r\n```\r\n'
2324,'','Remove configure.createbus\nNew syntax\r\n\r\n```\r\nvar config = new BusConfiguration();\r\n\r\nconfig.UseTransport<RabbitMq>();\r\n\r\nusing(IBus bus = Bus.Create(config))\r\n{\r\n   bus.Start();\r\n}\r\n```'
2323,'','add obsoletes for TransportMessageHelpers.GetNumberOfRetries\nSo `TransportMessageHelpers.GetNumberOfRetries` is a public documented api in both 3 and 4.\r\n\r\nShould there be an equivalent in v5? at the very least we should have better obsoletes '
2322,'','dont include types in NSB in message conventions\nfixes #2319'
2321,'','Add multi encryption key support\n'
2320,'','Configure.With now take an instance of the configuration builder\nThis avoids using lambdas which is easier and more discoverable for new users. It also creates a more intuitive flow.\r\n\r\nOld syntax:\r\n\r\n```\r\nvar config = Configure.With(b=>b.UsePersitence<MyPersistence>());\r\n```\r\n\r\nNew syntax:\r\n\r\n```\r\nvar builder = new ConfigurationBuilder();\r\n\r\nbuilder.UsePersitence<MyPersistence>();\r\n\r\nvar config = Configure.With(builder); \r\n```'
2319,'','Convention based .DefiningMessagesAs causes an exception when following pattern in docs\nDocs here: http://docs.particular.net/nservicebus/unobtrusive-mode-messages suggest that you should use a namespace convention for detecting messages. This is cool and I like this convention however if you follow the convention for events/commands and apply the same convention to messages (eg `.DefiningMessagesAs(t => t.Namespace != null &&  t.Namespace.EndsWith(".Messages"))` it exceptions with the following:\r\n\r\n```\r\nAn exception of type \'System.NotSupportedException\' occurred in NServiceBus.Core.dll but was not handled in user code\r\n\r\nAdditional information: IDictionary<T, K> is not a supported property type for serialization, use Dictionary<T,K> instead. Type: NServiceBus.Unicast.UnicastBus Property: MessageDispatcherMappings. Consider using a concrete Dictionary<T, K> instead, where T and K cannot be of type \'System.Object\'\r\n```\r\n\r\nI think either the docs should be updated to note this issue and suggest a better pattern or the code should exclude NServiceBus.*.Messages and Unicast.Messages from the scan types.'
2317,'','less fluent conventions\nless fluenty API for conventions\r\nbetter use of ConcurrentDictionary in ConventionCache\r\nremove redundant methods from Conventions\r\nDont expose lambdas from Conventions, only expose methods that call the\r\nconventions\r\nremove need to huge conventions constructor'
2316,'','How to configure TimeoutPersisterReceiver.SecondsToSleepBetweenPolls \nso according to this http://docs.particular.net/nservicebus/configure_timeout_polling_interval you configure `SecondsToSleepBetweenPolls` by setting it directly on `TimeoutPersisterReceiver` inside a `IWantToRunWhenBusStartsAndStops`. \r\n\r\nThis is problematic since `TimeoutPersisterReceiver` is now internal. \r\n\r\nSo do we add an explicit config API for `SecondsToSleepBetweenPolls`?'
2315,'','Verify keys are not too similar\n--\r\n\r\nFor reference here are the SO articles \r\n\r\n * http://stackoverflow.com/questions/1556683/does-rijndael-always-throw-an-exception-if-the-password-isnt-correct\r\n * http://stackoverflow.com/questions/5812232/c-sharp-aes-rijndael-detecting-invalid-passwords'
2314,'','Created a endpoint template for publishers\nThis means that all publishers will trace the found subscribers and that\r\nwill hopefully help us fix our flaky tests'
2313,'','Work out what should be in the core vrs the host\nSo there are some remaining types that i am unsure about\r\n\r\n * `EndpointNameAttribute`\r\n * `EndpointSLAAttribute`\r\n * `IConfigureThisEndpoint`\r\n\r\nfor ref https://github.com/Particular/NServiceBus/pull/2231\r\n\r\nlets discuss after the next sync'
2312,'','move AssemblyListExtensions to test project\nso `AssemblyListExtensions` seems to be only used by itself and tests.\r\n\r\nHas its usage been refactored away? can it be removed?'
2311,'','add multi decryption key support\n'
2310,'','Added more tests to show the details of #2018\nRepro for #2018'
2309,'','Trace subscriber list for message driven pubsub\nAlso added more tracing to one of the flaky pubsub test so that we can\r\nfigure out what the root cause is\r\n\r\nPlease review @SimonCropp '
2308,'','Trace subscriber list for message driven pubsub\n@SimonCropp please review and pull if possible'
2307,'','A different option to expose fine tune customizations\n@SimonCropp\'s PR #2304 is definitely a step forward in simplifying the nesting with lambdas but why not take it even one step further and get rid of the lambda all together.\r\n\r\nSo in this PR here is what I came up with for the Serializers:\r\n```c#\r\nConfigure.With(b => {\r\n    b.UseSerialization<Xml>()\r\n      .DontWrapRawXml()\r\n      .Namespace("Foo"));\r\n\r\n});\r\n```\r\nSo this way is also leaning on #2305.'
2305,'','Remove fluent from ConfigurationBuilder\nAs discussed our fluent API is not really very "fluenty".'
2304,'','move over to extending the SerializationDefinition\nWIP\r\n\r\nmeans we dont have this api problem\r\n\r\n\r\n        Configure.With(b => b.UseSerialization<Json>(c => c.XmlSettings(\r\n            settings => settings.DontWrapRawXml())));\r\n\r\nnew api would be\r\n\r\n    Configure.With(b => b.UseSerialization<Xml>(c => c.DontWrapRawXml()));\r\n\r\nthoughts?'
2303,'','Add multiple encryption key support\n--\r\nrelated to #2287'
2302,'','Support to create instances of interface for Saga testing, fixes #2249\nWith the removal of `bus.CreateInstance()` it is no longer possible to create an interface instance in the Saga testing framework.\r\n\r\nThis addresses that issue by adding a new method (`WhenHandling`) that allows the user to test interface message types.\r\n\r\n--\r\n\r\nAn example on how to use the new API:\r\n```c#\r\n[Test]\r\npublic void SagaThatIsStartedWithInterface()\r\n{\r\n    Test.Saga<MySagaWithInterface>()\r\n        .ExpectSend<Command>()\r\n        .WhenHandling<StartsSagaWithInterface>(m => m.Name = "John");\r\n}\r\n\r\npublic class MySagaWithInterface : Saga<MySagaWithInterface.MySagaDataWithInterface>,\r\n    IAmStartedByMessages<StartsSagaWithInterface>\r\n{\r\n    public class MySagaDataWithInterface : ContainSagaData\r\n    {\r\n            \r\n    }\r\n\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaDataWithInterface> mapper)\r\n    {\r\n    }\r\n\r\n    public void Handle(StartsSagaWithInterface message)\r\n    {\r\n        if (message.Name == "John")\r\n        {\r\n            Bus.Send<SayHello>(null);\r\n        }\r\n    }\r\n}\r\n\r\npublic interface StartsSagaWithInterface: IEvent\r\n{\r\n    string Name { get; set; }\r\n}\r\n\r\npublic class SayHello : ICommand\r\n{\r\n}\r\n```\r\n'
2300,'johnsimons','Raven check needs to include an upper bound range\nNServiceBus ships with RavenDB Client v2 embedded as part of the core.\r\nAs highlighted previously in [this discussion](https://groups.google.com/forum/#!msg/particularsoftware/GEBLo3U6kw0/Oi0FmNLVB1sJ) a new nuget/dll was released to work against RavenDB v2.5.\r\n\r\nSo currently anyone using NServiceBus v4 with RavenDB v2.5 Server need to be running the new [integration package](https://github.com/Particular/NServiceBus.RavenDB/releases/tag/1.0.0) otherwise them may lose messages!\r\n\r\nTo ensure that the correct version of the RavenDB integration is being used we need to modify the Raven check that we do in the Core to restrict the upper bound version to be < 2.5'
2299,'','Finishing off ConfigurationBuilder changes\n- [ ] ~~Introduce new IConfigureBus~~\r\n- [ ] ~~Obsolete INeedInitialization~~\r\n- [x] Passing ConfigurationBuilder to INeedInitialization\r\n- [x] Obsolete Configure.Configurer\r\n- [x] Add a RegisterComponent to ConfigurationBuilder\r\n- [x] Move Configure.Pipeline to ConfigurationBuilder'
2298,'','Finish removing MsmqMessageQueueConfig \nSo here https://github.com/Particular/NServiceBus/commit/91bb1d173b3c47376795d23a8ad6b35dcb0d77e6 `MsmqMessageQueueConfig` was made obsolete with "removal in v6".\r\n\r\nHowever it is still used here https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Transports/Msmq/Config/MsmqTransport.cs#L31\r\n\r\nSo do we finish removing it? \r\n\r\nNote that  marking `MsmqMessageQueueConfig` would have in no way communicated the "intent for removal" to the user since they would not be using `MsmqMessageQueueConfig` at compile time.'
2297,'','Processing started/ended is now available on the pipeline.\nCorresponding headers are now only set when moving the message to the\r\naudit queue.'
2296,'','Throw and Warn for InMemory storage\nWith the change in v5 to make the InMemory storage the default storage, we have put in place a way to warn the user if they have not explicitly configured the persistence themselves.\r\n\r\nThe way we have done this is to log a WARN to the log.\r\nI find this warning message very much invisible, it scrolls through too quickly.\r\n\r\nSo assuming the user sees that warning and follows our advice and configures a different Persistence, this means that now they have to setup their workstation with a durable storage eg raven or sql.\r\n\r\nSo even though the first experience using NServiceBus was a nice one, as soon as they going to make their code Production ready, they now have to setup their workstation.\r\n\r\nLeft todo:\r\n\r\n- [x] Throw exception if not storage is selected\r\n- [x] Change the code we add to the EndpointConfig.cs by default (see comment below)'
2295,'','Moved SendOnly mode to ConfigurationBuilder\nThis also fixes #2101 and #1372\r\n\r\n### New usage of sendonly\r\nNServiceBus Host:\r\n```c#\r\npublic class Endpoint : IConfigureThisEndpoint {\r\n    public void Customize(ConfigurationBuilder builder)\r\n    {\r\n        builder.UseTransport<Msmq>()\r\n            .SendOnly();\r\n    }\r\n}\r\n```\r\n\r\nSelf Hosting:\r\n```c#\r\nvar bus = Configure.With(\r\n    b => b.UseTransport<Msmq>()\r\n        .UseSerialization<Xml>()\r\n        .SendOnly())\r\n    .CreateBus();\r\n```'
2294,'',"Moved the feature prereq checks to run after the setting has been locked...\nThis one is good to go\r\n\r\n@johnsimons this is slightly different from what we discussed but I realized that the main issue is that prereqs is checked to early. I now moved them to run after settings has been locked. I still see the potential need to have the setup to return false to allow for a final chance to abort but I think that can be a separate pull and I argue that we can keep the prereqs as is since they now seem to be correct?\r\n\r\nThis change highlighted an issue that I don't see a fix for. Since prereqs can only be checked when settings are locked and defaults only can be executed as long as settings are NOT locked. This means that there is always a chance that the feature decides to not go ahead with the setup and in that case defaults would remain applied. I argue that we have to leave it this way since the order seems to be correct and that we need to avoid code that assumes those defaults to be in place. Ie only code in the setup of the feature it self can assume default to be there.\r\n\r\nThoughts?\r\n\r\n(I've ignored the test that checks for this - https://github.com/Particular/NServiceBus/commit/94d70b7f33d9137cf46012048a7855754b169f65#diff-79016c895ef1d7bb88e05108cbae5a8bR45)\r\n\r\nPotential fix for #2277"
2293,'','Added Encoding extension point to JsonMessageSerializer\n--\r\n\r\n`CreateJsonReader` and `CreateJsonWriter` methods are not overridable outside of NServiceBus code due to the fact that Newtonsoft.Json is merged and internalized. \r\n\r\nThis extension point is necessary for EventStore transport to work because ES uses non-default encoding (UTF8 without BOM).'
2292,'','Use persistence\n'
2291,'','Moved UseTransport to use ConfigurationBuilder\nQuite a few changes here:\r\n- Moved UseTransport extension methods to be instance based on ConfigurationBuilder\r\n- Deleted `IConfigureTransport` and instead moved that "logic" into the `TransportDefinition`\r\n- Modified the `ConfigureTransport` so that derived classes can add their extra configuration\r\n\r\n### Migrate existing transports to this new model\r\n1. Move the code in `ConfigureTransport.InternalConfigure` to `TransportDefinition.Configure`\r\n2. Rename `protected override void Setup(FeatureConfigurationContext context)` to `protected override void Configure(FeatureConfigurationContext context, string connectionString)`\r\n'
2289,'andreasohlund','split sla from critical time\n'
2288,'',"Move IConfigureThisEndpoint out of the core\n--\r\n\r\nIt's only used by the host(s)"
2287,'',"Enable users to switch encryption keys without message loss\nSince the dawn of time we've only supported 1 encryption key in the ootb encryption(AES) and this makes it close to impossible to switch keys without losing data, messages in SLR, or ERROR queues would have the wrong key and fail to decrypt.\r\n\r\nThe users only options is either  to not switch keys which is no good in terms of security best practices or implement their own ISecurityService\r\n\r\nThe proposed solution is to allow for secondary keys that we fall back to if decryption fails. This way users can add new primary keys (used to encrypt) but still keep the old key(s) around long enough to be able to process messages in SLR or the error queue.\r\n\r\nThis bug needs to be backported to all supported versions (v3.3 and up)"
2286,'','InMemorySagaPersister should use a concurrent dictionary\n'
2285,'','Add sendonly acceptance test\n'
2284,'','Moved Performance monitoring and SLA to be a ConfigurationBuilder exension\nOld code\r\n\r\n        Configure.With()\r\n            .EnablePerformanceCounters();\r\n        Configure.With()\r\n            .SetEndpointSLA(TimeSpan.FromMinutes(3));\r\n\r\nNew code\r\n\r\n        Configure.With(b => b.EnableSLAPerformanceCounter());\r\n        Configure.With(b => b.EnableSLAPerformanceCounter(TimeSpan.FromMinutes(3)));'
2283,'','Move Outbox and Transaction to ConfigurationBuilder\n'
2282,'','Container.RegisterSingleton should take an instance of T not an object\n'
2281,'','move DurableMessaging to a configbuilder extension\n'
2279,'','Moved Performance monotoring and SLA to be a ConfigurationBuilder exension\n'
2278,'','Moved License configuration API to be a ConfigurationBuilder extension\nOld code\r\n```\r\nConfigure.With().LicensePath("PathToLicense");\r\n//or\r\nConfigure.With().License("YourCustomLicenseText");\r\n```\r\nNew code\r\n```\r\nConfigure.With(builder => builder.LicensePath("PathToLicense"));\r\n//or\r\nConfigure.With(builder => builder.License("YourCustomLicenseText"));\r\n```'
2277,'',"Feature improvements\nWe running into a few **ORDER** issues yet again :facepunch: \r\n\r\n## Proposed changes\r\n1. Invoke features marked as `EnabledByDefault` last;\r\n2. Change the signature of `Feature.Setup` to return a `bool`, `true` means that the feature is activated, `false` means the feature decided to not activate itself because eg certain requirements are not meant;\r\n\r\n## Here are a few rules to mitigate these issues:\r\n- `Prerequisite` should not do `Gets` on `Settings`;\r\n- `Defaults` should only assign settings, **do not read settings in `Defaults`**;\r\n- Return `false` from `Setup` when runtime requirements are not meant, eg user has explicitly configured an impl of `IManageMessageFailures` hence we do not need to configure the default one;\r\n- Throw configuration exceptions from `Setup` if `Feature` can't be initialized, eg user has not provided a valid error queue name in the config file;\r\n\r\n"
2276,'','Made MessageForwardingInCaseOfFault a feature\n### Usage before change:\r\n```c#\r\nconfigure.UnicastBus()\r\n               .MessageForwardingInCaseOfFault();\r\n```\r\n### Usage after change:\r\nCall is not required any more, this is the default behavior.'
2275,'','remove func for endpoint name\nand endpoint version'
2274,'','instance EndpointHelper\none less static state'
2273,'','Removed the check for callbacks with id == correlation id to avoid mem leaks\nWe check for message intent == reply instead since that is more correct.'
2272,'','Obsolete UsingTransport<T>()\nIn order to provide a single configuration api regardless of hosting model we should obsolete the `UsingTransport<T>` host specific config api and guide users to:\r\n\r\n```\r\nclass MyEndpoint: IConfigureThisEndpoint\r\n{\r\n\tpublic void Init(ConfigurationBuilder builder)\r\n\t{\r\n\t\tbuilder.UseTransport<RabbitMQ>();\r\n\t}\r\n}\r\n\r\n```\r\n\r\nOld api:\r\n\r\n```\r\n\r\nclass MyEndpoint: IConfigureThisEndpoint, UsingTransport<RabbitMQ>\r\n{\r\n\tpublic void Init(ConfigurationBuilder builder)\r\n\t{\r\n\t\t\r\n\t}\r\n}\r\n\r\n```'
2271,'','Moved InMemoryFaultManagement to ConfigurationBuilder\n### Usage before change:\r\n```c#\r\nconfigure.UnicastBus()\r\n               .InMemoryFaultManagement();\r\n```\r\n### Usage after change:\r\n```c#\r\nConfigure.With(builder => builder.InMemoryFaultManagement());\r\n```'
2270,'','Converted EncryptionService to be a ConfigurationBuilder exension\n\r\n### RijndaelEncryption\r\n\r\nThis code\r\n```\r\nConfigure.With()\r\n            .RijndaelEncryptionService();\r\n```\r\nBecomes this\r\n```\r\nConfigure.With(builder => builder.RijndaelEncryptionService());\r\n```\r\n### Custom IEncryptionService\r\n\r\nThis code\r\n```\r\nConfigure.With()\r\n            .Configurer.ConfigureComponent<IEncryptionService>(() => new MyCustomEncryptionService(), DependencyLifecycle.SingleInstance);\r\n```\r\nBecomes this\r\n```\r\nConfigure.With(configBuilder => configBuilder.RegisterEncryptionService(builder => new MyCustomEncryptionService()));\r\n```'
2269,'',"Move profiles to host\n--\r\n\r\n### Work done\r\n- [x] Moved all host profile code into a source only nuget package so that @yvesgoeleven can reference it from the Azure host\r\n- [x] Modified the signature of `IHandleProfile<T>.ProfileActivated(Configure)` to `IHandleProfile<T>.ProfileActivated(ConfigurationBuilder)`\r\n- [x] Marked `IHandleProfile<T>.ProfileActivated(Configure)` as obsolete\r\n- [ ] Migrate all `IHandleProfile<T>.ProfileActivated(Configure)` to new signature\r\n\r\n### Migration plan\r\n1. Reference the host assembly\r\n1. Add the new `IHandleProfile<T>.ProfileActivated(ConfigurationBuilder)` signature to any implementation of  `IHandleProfile<T>'\r\n1. Update the code to use the new `ConfigurationBuilder`\r\n"
2268,'andreasohlund','What should !HasBuilder do?\nin Configure this\r\n\r\n            if (!HasBuilder())\r\n            {\r\n                this.DefaultBuilder();\r\n            }\r\n\r\nresults in this being called\r\n\r\n        public static Configure DefaultBuilder(this Configure config)\r\n        {\r\n           throw new NotImplementedException();\r\n        }\r\n\r\nWhich is obviously problematic'
2267,'','Moved WcfManager and WcfServiceHost to the host\nThese 2 classes do not really belong in the core.'
2266,'','Moved Configure.EnableInstallers to ConfigurationBuilder.EnableInstallers\n### Usage before change:\r\n```c#\r\nconfigure.UnicastBus()\r\n               .CreateBus()\r\n               .Start(() => Configure.Instance.ForInstallationOn<Windows>().Install());\r\n```\r\n### Usage after change:\r\n```c#\r\nConfigure.With(builder => builder.EnableInstallers());\r\n```'
2265,'','Moved RijndaelEncryptionService to a ConfigurationBuilder extension\n'
2264,'','move DoNotCreateQueues to config builder\nOld code\r\n```\r\nConfigure.With().DoNotCreateQueues();\r\n```\r\nNew code\r\n```\r\nConfigure.With(builder => builder.DoNotCreateQueues());\r\n```'
2263,'','Moved DoNotCreateQueues to a ConfigurationBuilder extension\nOld code\r\n```c#\r\nconfig.DoNotCreateQueues();\r\n```\r\nNew code\r\n```c#\r\nConfigure.With(c => c.DoNotCreateQueues())\r\n```\r\n'
2262,'','make purging a config builder ext\nfixes https://github.com/Particular/NServiceBus/issues/2259'
2261,'','Moved Roles into the Host\nThe extension points `IConfigureRole`, `IConfigureRole<T>` and `IRole` no longer exist.\r\n\r\n`AsA_Client` and `AsA_Server` can still be used. \r\n\r\n`AsA_Publisher` has been deprecated and should be replaced with `AsA_Server` '
2260,'','Move roles into host\n'
2259,'','Moved PurgeOnStartup to be a ConfigurationBuilder extension\nOld code\r\n```        \r\nConfigure.With()\r\n    .PurgeOnStartup(true);\r\n```\r\nNew code\r\n```\r\nConfigure.With(builder => builder.PurgeOnStartup(true));\r\n```'
2258,'',"Obsolete the role As_aPublisher role\nIt's not doing anything in v5 so it should be obsoleted with a remove in v6. Make it obsolete as error in v5"
2257,'','Moved FileShareDataBus to a ConfigurationBuilder extension\nOld code\r\n```\r\nvar configure = Configure.With()\r\n            .FileShareDataBus(databusPath);\r\n```\r\nNew code\r\n```\r\nvar configure = Configure.With(b => b.FileShareDataBus(databusPath));\r\n```'
2256,'','make fileshare feature use configuration builder\nfixes https://github.com/Particular/NServiceBus/issues/2257'
2255,'andreasohlund','Feature Defaults lambda should only run if feature is to be enabled\n```c#\r\nclass DF : Feature\r\n{\r\n    public DF()\r\n    {\r\n        Defaults(); // This lambda should only execute is the feature is going to be enabled\r\n    }\r\n\r\n    protected override void Setup(FeatureConfigurationContext context)\r\n    {\r\n            \r\n    }\r\n}\r\n```'
2254,'','Moved  DefineCriticalErrorAction to be a ConfigurationBuilder extension\nOld Code\r\n```\r\nvar configure = Configure.With()\r\n    .DefineCriticalErrorAction((s, exception) =>\r\n    {\r\n        // custom exception handling\r\n    });\r\n```\r\n\r\nNew code\r\n\r\n```\r\nvar configure = Configure.With(builder =>\r\n{\r\n    builder.DefineCriticalErrorAction((s, exception) =>\r\n    {\r\n        // custom exception handling\r\n    });\r\n});\r\n```'
2253,'','make CriticalError a feature\nfixes https://github.com/Particular/NServiceBus/issues/2254'
2252,'andreasohlund',"Callbacks, CorrelationId and MessageId\nI open this issue to discuss something which I stumbled over regarding callback invocations in combination with message id and correlation id. Let me give you some background:\r\n\r\nWe built a bridge which transforms MSMQ message and puts them on ActiveMQ broker. The bridge uses a stateless design. In order to have a stateless design we need to encode the MSMQ queue names on the correlation id for request / response type communication. We essentially do the following : \r\n\r\nCorrelationId = CorrelationId_BridgeMarker_ReplyToQueue. \r\n\r\nOur first implementation which receives messages on ActiveMQ and puts them into MSMQ did not only set the correlation id on the transport message headers but also set the message id equal to the correlation id. Let me explain why:\r\n\r\nWhen we receive a message from ActiveMQ this could potentially start a saga. The message id of the message which started the saga is saved to the saga data in order to be able to use that message id again in the future to do a ReplyToOriginator (so essentially that message id becomes the correlation id).\r\n\r\nBut with this implementation in place the following happens when we do register callbacks on MSMQ side:\r\n\r\nbus.Send<Request>().Register<reply>();\r\n\r\nthe callback is registered internally in messageIdToAsyncResultLookup on the unicast bus. When on ActiveMQ someone replies and the bridge blindly sets the message id the callback is never invoked because of the following check in the CallbackInvocationBehavior:\r\n\r\n            if (transportMessage.CorrelationId == transportMessage.Id) //to make sure that we don't fire callbacks when doing send locals\r\n            {\r\n                return false;\r\n            }\r\n\r\nAs the commend says this check is because you don't want to fire callbacks in case of SendLocal. So if the comment is correct (and assuming it is) in our case and in case of a SendLocal this will introduce a memory leak. The lookup table will not be cleared. I currently changed our bridge to not override the MessageId in case of a message type (NOT event or command). This solves our problem currently. But I was wondering is this check really necessary?\r\n\r\nI would argue that the callback invocation behavior shouldn't need to compare against the message id. The fact that there is a callback registered should be prioritized. This would lead to the following implementation:\r\n\r\n            if (transportMessage.CorrelationId == null)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            BusAsyncResult busAsyncResult;\r\n\r\n            if (!UnicastBus.messageIdToAsyncResultLookup.TryRemove(transportMessage.CorrelationId, out busAsyncResult))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            // ... omitted\r\n\r\nOr is this check here because a SendLocal<Request>().Register<Reply>() will immidiately receive again the Request message type on the ReceivePhysicalMessageContext?\r\n\r\nThanks for the discussion."
2251,'','Any plan to allow nested properties on Saga mapping?\nSomething like:\r\n\r\n`ConfigureMapping<SomeMessage>(msg =>msg.Property1.NestedProperty).ToSaga(saga => saga.SomeId);`\r\n\r\nSource:\r\nhttps://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/particularsoftware/cLYG1a_Bwc4/OX9af0d9W7gJ\r\n'
2250,'johnsimons','Make sure MsmqWorkerAvailabilityManager is thread safe on .NET 4 in NSB 3.3.9\n`MsmqWorkerAvailabilityManager.ClearAvailabilityForWorker()` throws "System.InvalidOperationException: Property ResponseQueue was not retrieved when receiving the message. Ensure that the PropertyFilter is set correctly" if you put some stress on it with NSB 3.3.9 on .NET 4+.\r\n\r\nThe problem is that Microsoft made almost everything on MessageQueue NOT thread safe between .NET 3.5 and .NET 4. \r\n\r\n3.5 docu: http://msdn.microsoft.com/en-us/library/system.messaging.messagequeue(v=vs.90).aspx vs\r\n4 docu: http://msdn.microsoft.com/en-us/library/system.messaging.messagequeue(v=vs.100).aspx\r\n\r\nThose changes by Microsoft makes the MsmqWorkerAvailabilityManager implementation in 3.3.9 not safe, as it needs locking to work. The proposed fix, which fixes the repro, is basically to revert  @7de28f8f1dbfdf39a810800b841b0df49f02aac6. Bad luck on that one, @andreasohlund. :)\r\n\r\nCheck out repro, available [here](https://github.com/janovesk/nsb-msmqdotnet4bug).\r\n'
2249,'','No way to pass an interface message to a saga during testing \nAs part of this https://github.com/Particular/NServiceBus/issues/2244 and this https://github.com/Particular/NServiceBus/issues/1607 `Bus.CreateInstance` was removed.\r\n\r\nThere is a problematic side effect of this in that now it will no longer possible for someone to, as part of unit testing, create an instance of an interface message and pass that to a saga for execution.\r\n\r\nWe effectively need a the saga equivalent to  [Handler&lt;T&gt;.OnMessage](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Testing/Handler.cs#L214)\r\n\r\n    public void OnMessage<TMessage>(Action<TMessage> initializeMessage = null)\r\n'
2248,'',"Stacktrace on failed messages is incomplete\n--\r\nAfter upgrading from 4.4.2, all we get for a stack trace when an exception happens in a message handler is:\r\n\r\n - NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 62\r\n - NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.C\r\nore\\UnitOfWork\\UnitOfWorkBehavior.cs:line 24\r\n\r\nIt's pretty clear that this is a consequence of the badly-judged implementation of avoiding deeply-nested stack traces (d4795bd99164d29a7559b2826e4eed5451418678).  I also see that further changes were made in this area a few weeks later to avoid the bad practice of doing catch (Exception e) { throw e; } but that code has not made it into a 4.6 branch release.  It would be nice if you did -- my only alternative right now seems to be to wrap all handlers with a try/catch block and do my own error logging.\r\n"
2247,'','Errors when subscribing to MessageFailed from ServiceControl\nI am trying to implement an NServiceBus handler that subscribes to message failures and then emails a system administrator. I got everything up and running by adding the following configuration to my handler:\r\n`<MessageEndpointMappings>\r\n      <add Messages="ServiceControl.Contracts.MessageFailures.MessageFailed,ServiceControl.Contracts" Endpoint="Particular.ServiceControl" />\r\n</MessageEndpointMappings>`\r\n\r\nI added a reference to ServiceControl.Contracts.dll, which (as I understand it) is the public contract that should be used for integrations.\r\n\r\nThis works fine, and I am able to handle the MessageFailed type properly. The problem is that ServiceControl is also delivering messages of type MessageFailedRepeatedly to my handler because MessageFailedRepeatedly inherits from MessageFailed. Since ServiceControl.Contracts.dll does not include MessageFailedRepeatedly, I get deserialization exceptions from this endpoint when a MessageFailedRepeatedly event comes in.\r\n\r\nIt seems like ServiceControl.Contracts.dll should either include MessageFailedRepeatedly, or else MessageFailedRepeatedly should not inherit from MessageFailed.\r\n\r\nAny suggestions on how I can work around this problem?'
2246,'','MsmqDequeueStrategy is now internal but was used as an extension point\nSo here https://github.com/Particular/NServiceBus/commit/fa06edfd755d785f80d2874495e7d6c945d04fab we made `MsmqDequeueStrategy` internal\r\n\r\nThis is problematic since in a sample provided to a client here  https://github.com/Particular/NServiceBus.SqlServer.Samples/blob/master/SqlBridge/SqlBridge/MsmqReceiver.cs#L30  we use MsmqDequeueStrategy. Since this was an official "this is how we recommend you solve this problem" we cant really make it internal without having a new story.\r\n\r\n@indualagarsamy @andreasohlund I believe you were involved in the initial sample provided the client. Do you remember enough of the problem to possibly solve it given the new APIs in v4? '
2244,'','Remove Bus.CreateInstance \nSo where previously this was used\r\n\r\n```\r\nBus.Publish(Bus.CreateInstance<OrderCancelled>(o =>\r\n    {\r\n        o.OrderNumber = message.OrderNumber;\r\n        o.ClientId = message.ClientId;\r\n    }));\r\n```\r\n\r\nNow this is used\r\n\r\n```\r\nBus.Publish<OrderCancelled>(o =>\r\n    {\r\n        o.OrderNumber = message.OrderNumber;\r\n        o.ClientId = message.ClientId;\r\n    });\r\n```\r\n\r\n--\r\n\r\nAs part of version 4 `Bus.CreateInstance` was obsoleted https://github.com/Particular/NServiceBus/issues/1607\r\n\r\nIn version 5 the `Bus.CreateInstance` is actually removed.\r\n\r\nFixed in this commit https://github.com/Particular/NServiceBus/commit/32dc37545fee2426fa40b5a39d1ce55600df5180'
2243,'','NullReferenceException for what seems like correct usage of the persistence API\nSo this \r\n\r\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Publisher, UsingTransport<Msmq>, INeedInitialization\r\n    {\r\n        public void Customize(ConfigurationBuilder builder)\r\n        {\r\n            builder.Conventions(UnobtrusiveMessageConventions.Init);\r\n        }\r\n\r\n        public void Init(Configure config)\r\n        {\r\n            config.UsePersistence<NHibernate>(c => c.For(Storage.Subscriptions));\r\n        }\r\n    }\r\n\r\nresults in \r\n\r\n```\r\nSystem.NullReferenceException occurred\r\n  HResult=-2147467261\r\n  Message=Object reference not set to an instance of an object.\r\n  Source=NServiceBus.Core\r\n  StackTrace:\r\n       at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll(Object obj) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Timeout\\Hosting\\Windows\\TimeoutPersisterReceiver.cs:line 83\r\n  InnerException: \r\n```\r\n\r\nThe correct config usage is \r\n\r\n        public void Init(Configure config)\r\n        {\r\n            config.UsePersistence<NHibernate>(c => c.For(Storage.Subscriptions));\r\n            config.UsePersistence<InMemory>();\r\n        }\r\n\r\nThis is a fail in two ways\r\n\r\n1. The null ref in no way leads the user to the correct usage\r\n2. the precedence order is inverted from the convention used by the rest of the config.\r\n\r\nAlso what would seem to be the correct order \r\n\r\n            config.UsePersistence<InMemory>();\r\n            config.UsePersistence<NHibernate>(c => c.For(Storage.Subscriptions));\r\n\r\nResults in \r\n```\r\nSystem.Exception occurred\r\n  Message=Failed to enable storage for Subscriptions provided by persistence NHibernate since its already been enabled for persistence InMemory\r\n  Source=NServiceBus.Core\r\n  StackTrace:\r\n       at NServiceBus.Persistence.EnabledPersistences.ClaimStorages(Type definitionType, List`1 storagesToEnable) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Persistence\\EnabledPersistences.cs:line 27\r\n  InnerException: \r\n```'
2242,'','Incorrect combo of AsA_Publisher and For(Storage.Timeouts) results in incorrect error message\nSo this\r\n\r\n```\r\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Publisher, UsingTransport<Msmq>, INeedInitialization\r\n    {\r\n        public void Customize(ConfigurationBuilder builder)\r\n        {\r\n            builder.Conventions(UnobtrusiveMessageConventions.Init);\r\n        }\r\n\r\n        public void Init(Configure config)\r\n        {\r\n            config.UsePersistence<NHibernate>(c => c.For(Storage.Timeouts));\r\n        }\r\n    }\r\n```\r\nresults in this \r\n```\r\nSystem.InvalidOperationException occurred\r\n  HResult=-2146233079\r\n  Message=Subscription message from VideoStore.ECommerce@RETINA arrived at this endpoint, yet this endpoint is not configured to be a publisher. To avoid this warning make this endpoint a publisher by configuring a subscription storage or using the AsA_Publisher role.\r\n  Source=NServiceBus.Core\r\n  StackTrace:\r\n       at NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.SubscriptionReceiverBehavior.Invoke(IncomingContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Subscriptions\\MessageDrivenSubscriptions\\SubscriptionReceiverBehavior.cs:line 62\r\n  InnerException: \r\n```\r\n'
2241,'','AccessViolationException causes endpoint to crash\nso causing a AccessViolationException  with this\r\n```\r\nvar ptr = new IntPtr(42);\r\nMarshal.StructureToPtr(42, ptr, true);\r\n```\r\nIn a handler will cause the endpoint to crash\r\n\r\nRepro here https://github.com/Particular/BugsRepro/tree/master/DodgyExceptionRepro\r\n\r\nReason here http://stackoverflow.com/questions/12581202/why-accessviolationexception-cannot-be-caught-by-net4-0  essentially it is "by desgin" \r\n\r\n>  You cannot catch exceptions that indicate a corrupted state. This is because there\'s pretty much no guarantee that you can do anything at all when a corrupted state exception is thrown. There is practically no reason to want a process with corrupted state to continue executing.\r\n\r\nWorkarounds here http://stackoverflow.com/questions/3469368/how-to-handle-accessviolationexception\r\n\r\nSo do we just document this as a "known issue"?'
2240,'','A discussion of the current config API in v5\nSo in v4 a config story might look like this\r\n\r\n    class UnobtrusiveMessageConventions : IWantToRunBeforeConfiguration\r\n    {\r\n        public void Init()\r\n        {\r\n            Configure.Instance\r\n                     .DefiningMessagesAs(t => t.Namespace != null && t.Namespace.StartsWith("VideoStore") && t.Namespace.EndsWith("RequestResponse"));\r\n        }\r\n    }\r\n\r\n    class EndpointConfig : IConfigureThisEndpoint, IWantCustomInitialization\r\n    {\r\n        public void Init()\r\n        {\r\n            Configure.With()\r\n                .UseNHibernateTimeoutPersister();\r\n        }\r\n    }\r\n\r\nor this \r\n\r\n    class EndpointConfig : IConfigureThisEndpoint, IWantCustomInitialization\r\n    {\r\n        public void Init()\r\n        {\r\n            Configure.With()\r\n                .DefiningMessagesAs(t => t.Namespace != null && t.Namespace.StartsWith("VideoStore") && t.Namespace.EndsWith("RequestResponse"));\r\n                .UseNHibernateTimeoutPersister();\r\n        }\r\n    }\r\n\r\nthe new API  in the v5 beta would be \r\n\r\n\tclass EndpointConfig : IConfigureThisEndpoint, INeedInitialization\r\n    {\r\n        public void Customize(ConfigurationBuilder builder)\r\n        {\r\n            builder.Conventions(c => c\r\n                .DefiningMessagesAs(t => t.Namespace != null && t.Namespace.StartsWith("VideoStore") && t.Namespace.EndsWith("RequestResponse")));\r\n        }\r\n\r\n\t    public void Init(Configure config)\r\n\t    {\r\n            config.UsePersistence<NHibernate>();\r\n\t    }\r\n    }\r\n\r\n\r\n## The differences\r\n\r\nSo what do people think of the following? \r\n\r\n### No more "unobtrusive configuration"\r\n\r\nSo in v4 it was possible to do "true unobtrusive configuration". By that I mean you could implement `IWantToRunBeforeConfiguration`, do any configuration, then have that picked up by NSB  assembly/type scanning and it would be applied. In v5 this is no longer possible. The closest that can be achieve is a helper method that is explicitly called from within the `IConfigureThisEndpoint.Customize`.\r\n\r\n### A split forced split of the configuration code\r\n\r\nWith the new v5 approach we are forcing people to split their configuration code between two methods. There is problematic since there is no way someone can guess at what types of configuration should be in each method. The fact that this split is needed is an implementation detail that should not be inflicted on the user.\r\n\r\n### The extension points are split over two interfaces\r\n\r\nThe configuration story is split across two interfaces `IConfigureThisEndpoint` and `INeedInitialization`. Which is strange when most people will need to implement both. Also the naming of `INeedInitialization` in no way implies it should be used to manipulate the configuration on the endpoint.  \r\n\r\n### The extension points are split over two assemblies \r\n\r\nThe configuration story is split across two assemblies `NServiceBus.Core.dll` and `NServiceBus.Host.exe` which is very confusing.\r\n\r\n### There can only be one IConfigureThisEndpoint but there can be multiple INeedInitialization\r\n\r\nIs this by design? If these interfaces will most likely always be paired why the difference?\r\n\r\n### IConfigureThisEndpoint  must exist on the EndpointConfig class but INeedInitialization can exist anywhere\r\n\r\nAgain. Is this by design? If these interfaces will most likely always be paired why the difference?\r\n\r\n\r\n\r\n'
2238,'','If index is stale we may miss timeouts\nI have been looking at [this](https://groups.google.com/d/msg/particularsoftware/0GAI9oqmp74/ldcTruIq9MAJ) issue reported in the mailing list.\r\n\r\nSo to summarise the issue, the user is using the Scheduler API and creates to schedule tasks, one that runs every 5secs and another one that runs every 1min.\r\nEvery so often the 5sec schedule task stops from reoccurring.\r\n\r\nHere are the [logs](https://groups.google.com/group/particularsoftware/attach/c583cdf531a6f969/Flyt.TiosCtcAgent-log.txt?part=4)\r\n\r\nAnd here is one of the timeouts stored in Raven:\r\n```json\r\n{\r\n  "Destination": {\r\n    "Queue": "Flyt.TiosCtcAgent",\r\n    "Machine": "GMBSANNTID"\r\n  },\r\n  "SagaId": "00000000-0000-0000-0000-000000000000",\r\n  "State": "PD94bWwgdmVyc2lvbj0iMS4wIiA/Pg0KPE1lc3NhZ2VzIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zPSJodHRwOi8vdGVtcHVyaS5uZXQvTlNlcnZpY2VCdXMuU2NoZWR1bGluZy5NZXNzYWdlcyI+CjxTY2hlZHVsZWRUYXNrPgo8VGFza0lkPmU2YjZlN2NmLTlmYjMtNDhiZS1iZGUwLTc0NmJhZmE3MmRlNzwvVGFza0lkPgo8TmFtZT5Cb290c3RyYXA8L05hbWU+CjxFdmVyeT5QVDVTPC9FdmVyeT4KPC9TY2hlZHVsZWRUYXNrPgo8L01lc3NhZ2VzPg0K",\r\n  "Time": "2014-05-21T08:18:00.2114720Z",\r\n  "CorrelationId": "2f849e22-d760-4ce6-846b-a33200a9b784\\\\0",\r\n  "OwningTimeoutManager": "Flyt.TiosCtcAgent",\r\n  "Headers": {\r\n    "NServiceBus.MessageId": "2f849e22-d760-4ce6-846b-a33200a9b784",\r\n    "NServiceBus.CorrelationId": "2f849e22-d760-4ce6-846b-a33200a9b784",\r\n    "NServiceBus.OriginatingEndpoint": "Flyt.TiosCtcAgent",\r\n    "$.diagnostics.originating.hostid": "522caf7d3f53a790fdcc328b6cb0d627",\r\n    "NServiceBus.MessageIntent": "Send",\r\n    "NServiceBus.Version": "4.4.2",\r\n    "NServiceBus.TimeSent": "2014-05-21 08:17:55:211472 Z",\r\n    "NServiceBus.OriginatingMachine": "GMBSANNTID",\r\n    "NServiceBus.ContentType": "text/xml",\r\n    "NServiceBus.EnclosedMessageTypes": "NServiceBus.Scheduling.Messages.ScheduledTask, NServiceBus.Core, Version=4.4.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c",\r\n    "CorrId": "2f849e22-d760-4ce6-846b-a33200a9b784\\\\0",\r\n    "WinIdName": "GMBDOMENE1\\\\sanntidintegrasjon",\r\n    "NServiceBus.RelatedTo": "5da0ead5-1701-4e2e-9b43-a33200a9b16e",\r\n    "NServiceBus.ConversationId": "a00caaba-1eab-48a7-854f-a33100a5c243",\r\n    "NServiceBus.IsDeferredMessage": "True",\r\n    "NServiceBus.Temporary.DelayDeliveryWith": "00:00:05",\r\n    "NServiceBus.Timeout.Expire": "2014-05-21 08:18:00:211472 Z",\r\n    "NServiceBus.Timeout.RouteExpiredTimeoutTo": "Flyt.TiosCtcAgent@GMBSANNTID",\r\n    "NServiceBus.Timeout.ReplyToAddress": "Flyt.TiosCtcAgent@GMBSANNTID"\r\n  }\r\n}\r\n```\r\n\r\nThe only explanation I have is if the index is stale, we could end-up skipping over timeouts.\r\n@synhershko has actually identified this issue in the https://github.com/Particular/NServiceBus.RavenDB repo and has fixed it.\r\n\r\nI cannot replicate this myself, but the index staleness is definitely a possibility and that would explain the entries I can see in the log file.\r\n'
2237,'','Timeouts could be delayed for longer then required\nSome timeouts could be delayed firing for a maximum of 2mins'
2236,'','Hotfix 4.6.3: Prompter response to timeouts in some cases\n'
2235,'',"Don't lose timeouts\nBackwards port of the fix to #2133 \r\n\r\n/cc @johnsimons @SimonCropp @andreasohlund "
2234,'',"Fixes #2133: Stop losing timeouts\nSimplify querying for timeouts, and introduce cleaning-up abilities to guarantee we don't skip any timeouts\r\n\r\n1. One simple query is getting executed with a 1024 page size and with a projection to make sure we minimize traffic while still getting one stable, sorted page of results\r\n\r\n2. nextTimeToRunQuery is only used to control subsequent executions. So we set it to immediate if we know the page of results is not the last one (we have more than 1024 results, or the results were stale). When new messages come in this wait time is invalidated and query is run again (and again, until results are not stale or we found no results at all).\r\n\r\n3. We don't care about duplicates since TryRemove is getting called by the dispatcher later, and it does a lookup by ID. This provides us the deduplication that we need.\r\n\r\n4. While this simple query, without paging, should provide assurance that no timeouts are being skipped while querying, in some rare edge cases this can still happen. We can either change `TimeoutPersisterReceiver` to take Eventually Consistent stores into account and invalidate the startSlice when needed, or have each individual such store take this up upon itself. For this PR we chose the latter, and use periodical cleanup process to make sure no timeouts are missed in the long run.\r\n\r\nThe defaults I wired to the gap and timing auto-props may require a bit more thinking, but overall I'm happy with this change now.\r\n\r\nAlso pending thorough discussion on timeouts SLA - do we rather fire timeouts late than miss firing any (taking into account the previous implementation was firing missed timeouts after a restart).\r\n\r\n/cc @andreasohlund @SimonCropp @johnsimons @udidahan @dannycohen "
2233,'','Add a role for UsingPersistence\nJust to be consistent with UsingTransport'
2231,'','quarantine endpoint attributes\nSince the attributes are not valid extension points for the core they should only exist in the host assembly'
2230,'','Add upper bound restriction to nugets\nCurrently our satellite nugets do not have an upper bound restriction:\r\n![image](https://cloud.githubusercontent.com/assets/122651/3579202/5fabe2e4-0bb9-11e4-89b0-f3f66d75ffe6.png)\r\n\r\nWe should make sure that there is an upper bound restriction on all out satellite nugets.\r\nIn this case it should be `< 6.0.0`'
2229,'','Improve error reporting in TimeoutPersisterReceiver\nWhen the timeout persister logs a warning about a failure it will now include the exception in the log entry'
2228,'',"If index is stale we may miss timeouts, fixes #2133\nSimplify querying for timeouts, and introduce cleaning-up abilities to guarantee we don't skip any timeouts\r\n\r\nFurther avoid duplicates by better cleanup logic\r\n\r\nAdding failing tests demonstrating skipped timeouts"
2227,'','Nuget NServiceBus.NLog is not available\nNlog integration has been moved to a stand alone nuget \'NServiceBus.NLog\'. Please use `Install the \'NServiceBus.NLog\' nuget and run \'NLogConfigurator.Configure\'.` instead. Will be removed in version 6.0.0.", true)]'
2226,'johnsimons','IgnoreMachineName flag is not taken into account when calculating hashcode\n'
2225,'','Ensuring users use the new builder pattern when configuring the bus when using our host\n'
2224,'','remove IStartableBus\nWIP'
2223,'','How do we enforce users to use the new Builder in the Customize method instead of Configure.With()?\nWith the recent changes in v5.0.0, we have the Customize method as part of `IConfigureThisEndpoint`:\r\n\r\n```c#\r\n public class EndpointConfig : IConfigureThisEndpoint, AsA_Server\r\n    {\r\n        public void Customize(ConfigurationBuilder builder)\r\n        {\r\n        }\r\n    }\r\n```\r\n\r\nIf users want to pass in a different container, how can we enforce the user to call it as \r\n```c#\r\n public void Customize(ConfigurationBuilder builder)\r\n        {\r\n            builder.UseContainer<Spring>();\r\n        }\r\n```\r\ninstead of:\r\n\r\n```c#\r\n public void Customize(ConfigurationBuilder builder)\r\n        {\r\n          Configure.With(t => t.UseContainer<Spring>());\r\n        }\r\n```\r\n\r\n**Proposed Solution**\r\nIn debug mode, we walk the stack and realize that if Configure.With is being called from within IConfigureThisEndpoint, then we throw a reasonable exception to use the `Builder` instead of `Configure.With()`\r\n'
2222,'','MsmqSubscriptionStorage not working in SendOnly Mode (v4.x)\nDue to StorageInitializer not been "Started" because\r\nIWantToRunWhenBusStartsAndStops.Start is only called on UnicastBus.Start.'
2221,'yvesgoeleven',"InvokeHandlersBehavior skips handler invocation under certain conditions\nIf I understand correctly: if a message arrives at an endpoint that hosts a saga, but the message is not intended to be delivered at said saga, it skips it anyway. Because if there is a saga, with NotFound = true, it skips... yet context.MessageHandler is not the saga instance but another handler\r\n\r\nDiscovered in test When_receiving_a_message_that_completes_the_saga.Should_ignore_messages_afterwards\r\nwhere a second handler is used to validate that the test has completed (while the saga doesn't get that message), yet the second handler is never invoked and test just waits for timeout.\r\n\r\n"
2219,'andreasohlund','Added ProcessingMachine and OriginatingMachine headers back\nSee https://github.com/Particular/NServiceBus/commit/71379d58cdd79d468127be8dcbf1e2b24706a5fe'
2218,'','Remove statics from Address class\nQuite a few things to do to pull this off:\r\n\r\n- [x] Removed the static `Address.OverridePublicReturnAddress`\r\n  Introduced new API to support this scenario:\r\n  ```c#\r\n    var config = Configure.With(o =>\r\n            {\r\n                o.OverridePublicReturnAddress(new Address("Foo", "mydomain.com.au"));\r\n            });\r\n   ```\r\n\r\n- [x] Remove `Address.InitializeLocalAddress`\r\n  Moved this feature to `ConfigureTransport<T>`\r\n\r\n- [x] Remove Address.Local\r\n  Instead we expose the local address for the endpoint in the `Configure`\r\n\r\n- [ ] Remove Address.OverrideDefaultMachine\r\n  The plan is to ignore the machine part of the address till is relevant (when we sending messages)\r\n  But is actually difficult because we use it to do equality in `Address` class.\r\n  The plan is to move it to `ConfigureTransport<T>`\r\n\r\n- [ ] Remove Address.IgnoreMachineName \r\n  This is used by the SqlServer transport\r\n  The plan is to move it to `ConfigureTransport<T>`, but once again this changes the comparison logic in the `Address` class'
2217,'',"Existing v4 < ScheduledTask need to be upgraded to v5\nMy queue has messages with EnclosedMessageType: \r\n\r\n    NServiceBus.Scheduling.Messages.ScheduledTask, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n\r\nOn receive MessageMetadataRegistry.GetMessageMetadata is trying to resolve this type at\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Messages/MessageMetadataRegistry.cs#L53\r\n\r\nblowing up with a FileLoadException stating that the assembly couldn't be loaded"
2216,'','Exceptions logged as INFO\nIn TransportReceiver.cs I found that the EndPorcess() has Logger.Info("Failed to process message", ex).\r\n\r\nWhy is that so? Can\'t we log that exception as an Error? Let me know asap.'
2215,'','Should saganotfound logic return and not run next ?\nin the SagaPersistenceBehavior, the logic that handle saga not found marks a saga as not found and then does a return:\r\n```c#\r\nif (!Features.Sagas.ShouldMessageStartSaga(sagaInstanceState.SagaType, context.IncomingLogicalMessage.MessageType))\r\n{\r\n    sagaInstanceState.MarkAsNotFound();\r\n\r\n    InvokeSagaNotFoundHandlers();\r\n    return;\r\n}\r\n```\r\n\r\nbut then later on we are checking sagaInstanceState.NotFound\r\nbut that code will never be reached right?\r\nso, should we be doing a "return" after InvokeSagaNotFoundHandlers(); ?'
2214,'','Should IHandleSagaNotFound messages be audit?\nIf a user has implemented `IHandleSagaNotFound`, should those messages be audit if audit is turned on ?\r\n\r\nAt the moment in v4 we are not doing that.\r\nAnd in v5 we do it but that is just a side effect that may not work all the time.\r\n\r\n@udidahan @andreasohlund thoughts?'
2213,'',"Modifying the reply address of messages as part of sending messages out\nWe recently received the following question in the mailing list:\r\n> We recently upgraded from NServiceBus 4.1 to 4.6.  We are implementing the IMutateOutgoingTransportMessages interface in order to update the replyToAddress to the fully qualified domain name of the server (serverName@x.y.com, rather than just serverName).  As of NServiceBus 4.6, this transport message mutator is no longer working on outgoing subscription messages (it does appear to be working on other types of transport messages, though).  After comparing the NServiceBus source code for the method MessageDrivenSubscriptionManager.SendSubscribeMessageWithRetries, I've found that there is no longer a call to 'InvokeOutgoingTransportMessagesMutators(new object[0], subscriptionMessage);' when sending the subscription message (or any similar call).  Was this change intentional, and if so, how do I go about modifying my outgoing subscription messages in NServiceBus 4.6 and future versions?  \r\n\r\nThis is still supported using the static `Address.OverridePublicReturnAddress`, however as part of our hunt to exterminate statics, I wonder if this should be supported in a more intuitive way?\r\n\r\nI was thinking something like:\r\n```c#\r\nclass OverridePublicReturnAddress : INeedInitialization\r\n{\r\n    public void Init(Configure config)\r\n    {\r\n        config.OverridePublicReturnAddress(...);\r\n    }\r\n}\r\n```"
2212,'','Refactoring & minor changes\nReviewed the code for Pipeline and made a few small changes (cleanup), added 2 tests for edge case scenarios, and simplified logic for [PipelineBuilder] (https://github.com/seanfeldman/NServiceBus/blob/30ba741eab63c0d5f8005e691c2f3aa448ec1107/src/NServiceBus.Core/Pipeline/PipelineBuilder.cs#L28) Incoming & Outgoing Behaviors'
2210,'','Turned on warn as error for xmldoc and started fixing the errors\nShould be green now'
2209,'','Enabled xmldoc as error for the testing library\nEnabled xmldocs warning as error and made most types internal'
2208,'','Xmldoc testing\nEnabling xmldocs + made most of it internal'
2207,'','BehaviorContext.TryGet<T> returns false if it cant cast to type\n--\r\n\r\nDoco says \r\n\r\n```xml<returns><code>true</code> if found, otherwise <code>false</code>.</returns>```\r\n\r\nCode says\r\n```c#\r\n            object value;\r\n            if (stash.TryGetValue(key, out value))\r\n            {\r\n                result = (T) value;\r\n                return true;\r\n            }\r\n\r\n            if (parentContext != null)\r\n            {\r\n                return parentContext.TryGet(key, out result);\r\n            }\r\n\r\n            if (typeof(T).IsValueType)\r\n            {\r\n                result = default(T);\r\n                return true; // <-- discrepancy\r\n            }\r\n\r\n            result = default(T);\r\n            return false; // <-- discrepancy\r\n```'
2206,'','move Interop.Msmq into a class file\nInterop.Msmq => extract a.cs file'
2205,'andreasohlund','move testing framework to a new repo\nthis will allow us to version properly'
2203,'','move over to all constructor injection\nat the moment we are not consistent. ans also spring has issues when u mix them https://github.com/Particular/NServiceBus/issues/1179'
2201,'','Remove topshelf\n'
2198,'',"Feature prereqs now requires a reason to enable better diagnostics\nMakes sure we're specifying a description for prereqs so that we can show it when it's not fullfilled"
2197,'','Refactoring WellKnownBehavior to be be typed\nAs per discussion with John after Pipeline presentation.'
2196,'','Container extensions\nRefactoring the containers Api to introduce definition classes'
2195,'','internalise IScheduler\nsee https://github.com/Particular/NServiceBus/pull/2192\r\n\r\nThis is not a public extension point so it being removed from the public API'
2194,'','Removing the gateway since its now a separate nuget.\nAs part of this pull a new option of DependsOn has been added to allow features to add non\r\nstrongly typed dependencieseparate nuget.\r\n\r\nCloses #1603'
2193,'','Make DefaultScheduler single instance\ncurrently is it instance per call but this seems unecessary give  its state '
2192,'','Make Scheduler API instance based\n--\r\n\r\nSo this code \r\n```\r\npublic class ScheduleMyTasks : IWantToRunWhenBusStartsAndStops\r\n{\r\n    IBus bus;\r\n\r\n    public ScheduleMyTasks(IBus bus)\r\n    {\r\n        this.bus = bus;\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n        // To send a message every 5 minutes\r\n        Schedule.Every(TimeSpan.FromMinutes(5))\r\n            .Action(() => bus.SendLocal(new MyMessage()));\r\n\r\n        // Name a schedule task and invoke it every 5 minutes\r\n        Schedule.Every(TimeSpan.FromMinutes(5))\r\n            .Action("Task name", () => bus.SendLocal(new MyMessage()));\r\n    }\r\n}\r\n```\r\n\r\nWould now look like this \r\n\r\n```\r\npublic class ScheduleMyTasks : IWantToRunWhenBusStartsAndStops\r\n{\r\n    IBus bus;\r\n    Schedule schedule;\r\n\r\n    public ScheduleMyTasks(IBus bus, Schedule schedule)\r\n    {\r\n        this.bus = bus;\r\n        this.schedule = schedule;\r\n    }\r\n\r\n    public void Start()\r\n    {      \r\n        // To send a message every 5 minutes\r\n        schedule.Every(TimeSpan.FromMinutes(5), () => bus.SendLocal(new MyMessage()));\r\n\r\n        // Name a schedule task and invoke it every 5 minutes\r\n        schedule.Every(TimeSpan.FromMinutes(5), "Task name", () => bus.SendLocal(new MyMessage()));\r\n    }\r\n}\r\n```'
2191,'','Remove IMessageModule in favour of IManageUnitsOfWork\nThis completes the work started in #896 where `IMessageModule` was marked as obsolete.\r\n\r\n'
2190,'','finish removing MessageModule\n'
2189,'','Update nuget code gen\n'
2188,'andreasohlund','Added better obsolete for the removed static Configure.Features\nFixes https://github.com/Particular/NServiceBus/issues/2186'
2187,'','Configuration time\n'
2186,'andreasohlund','Re-add the static Configure.Features\nAnd add a ObsoleteEx that guides users to either:\r\n\r\nconfig.EnableFeature<T>() or config.DisableFeature<T>()\r\n\r\nThe existing instance based .Features() needs to be renamed and split as mentioned above'
2185,'','Moved the AuditInvokedSaga behavior to the Saga persistence behavior.\nObsoleting the `NServiceBus.InvokeSagas` header as of 5.1\r\n\r\nMoved the AuditInvokedSaga behavior to the Saga persistence behavior.\r\nFixes #2183'
2184,'','Improved persistence config\n'
2183,'','Cleanup the AuditInvokedSagaBehavior in the pipeline.\n**Proposed changes:**\r\n- Obsolete the `NServiceBus.InvokedSagas` header `NServiceBus.InvokedSagas`https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Headers.cs#L43-47\r\n- Move the `AuditInvokedSagaBehavior` implementation to the SagaPersistence behavior and remove the behavior\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Sagas/AuditInvokedSagaBehavior.cs\r\n\r\n- In SagaPersistence Behavior, add:\r\n```c#\r\n[ObsoleteEx] -- Obsolete this method\r\n        void LogSaga(ActiveSagaInstance saga, IncomingContext context)\r\n        {\r\n\r\n            var audit = string.Format("{0}:{1}", saga.SagaType.FullName, saga.Instance.Entity.Id);\r\n\r\n            string header;\r\n\r\n            if (context.IncomingLogicalMessage.Headers.TryGetValue(Headers.InvokedSagas, out header))\r\n            {\r\n                context.IncomingLogicalMessage.Headers[Headers.InvokedSagas] += string.Format(";{0}", audit);\r\n            }\r\n            else\r\n            {\r\n                context.IncomingLogicalMessage.Headers[Headers.InvokedSagas] = audit;\r\n            }\r\n        }\r\n```\r\n\r\n- Call the `LogSaga` method here: https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Sagas/SagaPersistenceBehavior.cs#L70\r\n\r\ncc @johnsimons @andreasohlund '
2182,'','Scale out on RabbitMQ causes duplicate deliveries to handlers\n I’ve noticed that the NSB scale out feature defaults to true on RabbitMQ. This causes funky behavior with the fanout exchange being used in the conventional routing topology. For instance, if Message1 is subscribed to on machine1 and machine2, the routing will end up looking like\r\n```\r\n            +---------+                                                       \r\n         +-->Message1 +--------------+                                        \r\n         |  +---------+              |     \u2009                                  \r\n         |                           |                                        \r\n         |                           |                                        \r\n+-----------------+        +-------------------+                              \r\n|Message1_machine1|        | Message1_machine2 |                              \r\n+--------+--------+        +---------+---------+                              \r\n```                                                                              \r\n                                                                              \r\n                                                                              \r\nEach message gets delived to both subscribers, which I doubt was the intention of the scale out feature. Seems that the scaleout feature should be disabled for transports that support completing consumers already.'
2181,'','ReplyToAddress is now a header to avoid leaning on the transports to transfer them explicitly\n@johnsimons review please'
2180,'','Obsoleted the IWantToRunBeforeConfiguration api since its no longer needed\nReplacement is to either use a `INeedInitalization` or go with a Feature where a `Default(s=>..)` can be setup in the constructor of the feature.\r\n'
2179,'',"Not trivial to implement IWantCustomInitialization when used in host process\nThe default implementation for configure.With uses private fields to initialize itself, https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Hosting.Windows/GenericHost.cs#L128, but if you have to implement IWantCustomInitialization as a user (which is likely as you have to do it now to set endpointname or conventions as well) you cannot access these and you're on your own to figure out what it should be."
2178,'','Obsoleting the IFinalizeConfiguration interface in favor of features\n'
2177,'','Conventions refactor\nNew conventions API:\r\n```c#\r\nConfigure.With(o => o.Conventions(c => c.DefiningCommandsAs(...)\r\n                                                                  .DefiningEncryptedPropertiesAs(...)));\r\n```\r\n\r\nMoved the conventions to be defined in the `Configure.With(lambda)`\r\n\r\nHave also remove the conventions from the test library so users do not need to worry about that when testing.'
2176,'andreasohlund','Specifying the container to use is sensitive to the order\nNew api:\r\n\r\n`Configure.With(c=>c.UseBuilder<StructureMapBuilder>())`\r\n\r\nOld api:\r\n\r\n`Configure.With().StructureMapBuilder()`\r\n\r\nor\r\n\r\n`Configure.With().UsingBuilder<StructureMapBuilder>()`\r\n\r\nWith this in place the builder is available when needed'
2175,'distantcam','Patch V3 to support "non array wrapped" messages\nIn version 3.3.8 and JSON we have hard coded the assumption that messages will be wrapped in an array \r\n\r\nhttps://github.com/Particular/NServiceBus/blob/3.3.8/src/impl/Serializers/NServiceBus.Serializers.Json/JsonMessageSerializerBase.cs#L53\r\n\r\n    public object[] Deserialize(Stream stream)\r\n    {\r\n        JsonSerializer jsonSerializer = JsonSerializer.Create(JsonSerializerSettings);\r\n        jsonSerializer.ContractResolver = new MessageContractResolver(_messageMapper);\r\n        JsonReader reader = CreateJsonReader(stream);\r\n        return jsonSerializer.Deserialize<object[]>(reader);\r\n    }\r\n\r\nThis was fixed in version 4 as part of this commit\r\nhttps://github.com/Particular/NServiceBus/commit/4b82fa17f54277e3392ac336554e08703a0d6f69\r\n\r\nThe problem is that in v4 if you enable `Configure.Serialization.DontWrapSingleMessages();` and communicate with a v3 endpoint you will get \r\n\r\n    Received an empty message - ignoring.\r\n\r\nAnd the message is sent to the error log. The reason is that while v4 know how to handle the "non array wrapped" message v3 does not\r\n\r\nAlso in v5 we want to not wrap any message in arrays.  \r\n\r\nSo we need to patch 3.3.8 to remove the assumption on messages being wrapped in an array.\r\n\r\nA test harness sln for replicating these issue is here https://github.com/Particular/BugsRepro/tree/master/ArrayWrappingTests'
2174,'','Introducing .UseSerialization<T> so that we can guide users better\nPlease review '
2173,'','Pipeline Registrations cleanup\n- Moved the saga related behavior registration to the saga feature instead of the PipelineBuilder. Relates to #2071\r\n- Fixed the names and descriptions for the pipeline registrations.\r\n- Merged the RecomeIncomingHeadersBehavior into the SagaBehavior\r\n- Renamed step for deserialization\r\n'
2172,'','WIP - Moved the saga related behavior registration to the saga feature\n- Moved the saga related behavior registration to the saga feature instead of the PipelineBuilder. Relates to https://github.com/Particular/NServiceBus/issues/2071\r\n- Fixed the names and descriptions for the pipeline registrations.\r\n\r\nWhat remains?\r\nFix/remove complicated failing unit tests'
2171,'',"Inner DatabusProperties are not deserialized.\nGiven these message structures:\r\n\r\n```\r\n    public class SimpleMessage : IMessage\r\n    {\r\n        public DataBusProperty<string> Payload { get; set; }\r\n    }\r\n\r\n    public class ComplexMessage : IMessage\r\n    {\r\n        public MessagePart Part { get; set; }\r\n    }\r\n\r\n    public class MessagePart\r\n    {\r\n        public DataBusProperty<string> Payload { get; set; }\r\n    }\r\n```\r\n\r\n```SimpleMessage.Payload.Value``` will be correctly deserialized.  ```ComplexMessage.MessagePart.Payload.Value``` will not (it'll be null).  This is a critical issue for me because I need to model a serializable model of email in order to send to Mailgun (and HTTP-based email service).  According to this Tweet by @andreasohlund, this has been a known issue for some time:\r\n\r\nhttps://twitter.com/andreasohlund/status/276439235194650625\r\n\r\nIn the meanwhile, I can get by flattening my email attachments to the root and only allowing a single attachment, but I'm not happy about that solution."
2170,'','Stopped requiring the timeout id to be set by the persister\nRelated to https://github.com/Particular/NServiceBus/issues/2169'
2168,'','Remove UnicastBus.Start(Action)\nThe `Action` parameter overload of UnicastBus.Start(Action)` has been removed\r\n\r\n--\r\n\r\nSo this \r\n```\r\nconfigure.UnicastBus()\r\n.CreateBus()\r\n.Start(() => RunMyCustomAction);\r\n```\r\nCan now be achieved with this\r\n```\r\nvar startableBus = configure.CreateBus();\r\nRunMyCustomAction();\r\nvar bus = startableBus.Start();\r\n```\r\n Also see [Remove ForInstallationOn<T>, Windows and IEnvironment](https://github.com/Particular/NServiceBus/issues/2167)'
2167,'','Remove ForInstallationOn<T>, Windows and IEnvironment\nThis was an overly complex approach to running installers. As such it has been simplified\r\n\r\n--\r\n\r\n * `IEnvironment` removed\r\n * The generic part of `INeedToInstallSomething<T>` removed so the interface is no `INeedToInstallSomething`\r\n * The `Windows` implementation of `IEnvironment` removed\r\n * `ForInstallationOn` is removed. So this\r\n```\r\nconfigure.UnicastBus()\r\n.CreateBus()\r\n.Start(() => Configure.Instance.ForInstallationOn<Windows>().Install());\r\n```\r\n   will become this\r\n```\r\nvar configure = Configure.With();\r\nvar bus = configure.CreateBus();\r\nconfigure.EnableInstallers();\r\nbus.Start();\r\n```\r\n'
2166,'','Access internal helpers from persistence libs\nThis for example (RegistryReader): https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Utils/RegistryReader.cs\r\n\r\nWas deprecated and is now hidden, but the RavenDB persistence makes use of it. Can we expose it in some way that persistence / transport libs can reuse and avoid code duplication?\r\n'
2165,'','install refactor\n'
2164,'','Test framework does not honor "Configure Property"\ngiven the following gist:\r\nhttps://gist.github.com/Romiko/9b16a183753095d579bb\r\n\r\nit appears that the ConfigureProperty calls at lines 28 and 30 in the Initialize.cs file are not respected.'
2163,'','Azure onprem behind corporate proxy doesn\'t seem to work.\nI am trying to get a very simple POC working, but for the life of me can\'t seem to get a NServiceBus (version 4.0.30319) service hosted on premise to connect to azure service bus hosted in the cloud. I am in a corporate environment behind a firewall and going via a proxy server and have the following configuration and code:\r\n\r\n**App.Config**\r\n```\r\n<configSections>\r\n    ...\r\n    <section name="MessageForwardingInCaseOfFaultConfig" type="NServiceBus.Config.MessageForwardingInCaseOfFaultConfig, NServiceBus.Core" />\r\n    <section name="UnicastBusConfig" type="NServiceBus.Config.UnicastBusConfig, NServiceBus.Core" />\r\n    <section name="AuditConfig" type="NServiceBus.Config.AuditConfig, NServiceBus.Core" />\r\n    <section name="AzureServiceBusQueueConfig" type="NServiceBus.Config.AzureServiceBusQueueConfig, NServiceBus.Azure.Transports.WindowsAzureServiceBus" />\r\n    ...\r\n</configSections>\r\n...\r\n<MessageForwardingInCaseOfFaultConfig ErrorQueue="error" />\r\n\r\n<AuditConfig QueueName="audit" />\r\n\r\n<UnicastBusConfig>\r\n    <MessageEndpointMappings />\r\n</UnicastBusConfig>\r\n\r\n<AzureServiceBusQueueConfig\r\n  ConnectionString="Endpoint=sb://<my_host>.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=<my_shared_key>"\r\n  ConnectivityMode="Http"\r\n/>\r\n...\r\n<system.net>\r\n    <defaultProxy enabled="true" useDefaultCredentials="true">\r\n        <proxy bypassonlocal="True" usesystemdefault="True" />\r\n    </defaultProxy>\r\n</system.net>\r\n```\r\n\r\n**EndpointConfig.cs**\r\n```\r\npublic class EndpointConfig : IConfigureThisEndpoint, AsA_Server, UsingTransport<AzureServiceBus>\r\n{\r\n\r\n}\r\n```\r\n\r\nThe host starts up and works just fine when there is no proxy involved, but as soon as I try and run the host in an environment which contains a proxy it stops working. I should mention that using the Azure Service Bus directly does work, so not too sure why this would be the case. For obvious reasons I would like to use NServiceBus though :).\r\n\r\nI did try to use fiddler to try and determine what is going on, but by throwing fiddler into the mix caused the exact same symptoms as what we were experiencing when using our corporate proxy. I can produce some wireshark logs if required, just not sure where to upload these or send them.\r\n'
2162,'',"Hotfix 4.6.2: Avoid skipping timeouts with the RavenDB persister\nSimplify querying for timeouts, and introduce cleaning-up abilities to guarantee we don't skip any timeouts\r\n\r\n@andreasohlund @johnsimons please review"
2161,'','Add diagnostics to features\nWe need to add diagnostics for the features'
2160,'','A few improvements to Outbox\n- [x] warning if dtc is on\r\n- [x] Added enabling restrictions to outbox'
2159,'','When Outbox is enabled, warn if MSDTC is on\nNeed to log a warning in the log if user has MSDTC service on their machine.\r\n\r\nThe warning message:\r\n```\r\nWe have detected that MSDTC service is running on your machine.\r\nBecause you have configured this endpoint to run with Outbox enabled we recommend turning MSDTC off to ensure that the Outbox behavior is working as expected and no other resources are are enlisting in distributed transactions.\r\n```'
2158,'','Add restrictions to Outbox\nOutbox can only be enabled by default for:\r\n- RabbitMQ\r\n- Azure ServiceBus\r\n- Azure Storage Queues\r\n\r\nFor MSMQ and SQL it is a double opt-in.\r\nTo do this the user needs to explicitly add to their appsettings the following key:\r\n```xml\r\n<appSettings>\r\n    <add key="NServiceBus/Outbox" value="true"/>\r\n</appSettings>\r\n```\r\n'
2157,'','Obsolete Address static fields\nSo `Address` currently has several static fields\r\nhttps://github.com/Particular/NServiceBus/blob/1f26f63ae2ca15fa340e14de6d6e873c36955f87/src/NServiceBus.Core/Address.cs\r\n\r\nthese will all cause issue when we try to move to a multi endpoint world'
2156,'','re-apply GitVersionTask to ReturnToSourceQueue\nSo I hacked this https://github.com/Particular/NServiceBus/commit/ae7e53366e26fd0307eac8e8c1305963058daa8e\r\nto get the build working.\r\nhttps://builds.particular.net/viewLog.html?buildId=47040&tab=buildResultsDiv&buildTypeId=NServiceBusCore_Build\r\n\r\n need to work out how to re-apply versioing to ReturnToSourceQueue'
2155,'','ilmerge core into ReturnToSourceQueue\nso it can be a single exe'
2154,'','convert EncryptionMessageMutator to a behaviour \n'
2153,'','Remove compat properties from WireEncryptedString \nSo this https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/WireEncryptedString.cs#L61\r\n\r\ncontains\r\n\r\n        //**** we need to duplicate to make versions > 3.2.7 backwards compatible with 2.X\r\n\r\n        /// <summary>\r\n        /// Only kept for backwards compatibility reasons\r\n        /// </summary>\r\n        public string EncryptedBase64Value { get; set; }\r\n\r\n        /// <summary>\r\n        /// Only kept for backwards compatibility reasons\r\n        /// </summary>\r\n        public string Base64Iv { get; set; }\r\n        \r\n        //****\r\n\r\nI assume these props can now be deleted'
2152,'','Better use of new constraints\nless reflection == good'
2151,'',"Adding outbox cleanup support for the inmemory persister\n@johnsimons thoughts?\r\n\r\nI'm not sure about if the default should be in the core?"
2150,'','Remove IBus static extension methods\nas part of the "avoid thread statics" we should remove the `IBus` extension methods eg `GetMessageHeader`'
2149,'','IMutateOutgoingTransportMessages should be passed the business message (eg IMessage)\nWhile currently it passes `LogicalMessage`'
2148,'','Add tests for IAuthorizeSubscriptions\n'
2147,'','Add tests for IConfigureLogging\n'
2146,'','Add tests for IRouteMessagesToEndpoints\nNo test for `IRouteMessagesToEndpoints` use or verify `messageToSend` '
2144,'','When starting NSB 4.6.1 on Asp.net MVC, RavenDB (403) Forbidden\nGetting following exception when Starting NSB on an ASP.NET MVC Instance, at Configure.With()....ForMvc()...RavenPersistence().RavenSubscriptionStorage()....\r\n.UnicastBus()\r\n             .LoadMessageHandlers()\r\n.CreateBus()\r\n\r\nAnd http://xx:8080 is up n running.\r\n\r\nSystem.WebException "The remote server returned an error: (403) Forbidden."\r\n```\r\n   at System.Net.HttpWebRequest.GetResponse()\r\n   at Raven.Client.Connection.HttpJsonRequest.ReadJsonInternal(Func`1 getResponse) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonRequest.cs:line 341\r\n   at Raven.Client.Connection.HttpJsonRequest.ReadResponseJson() in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonRequest.cs:line 244\r\n   at Raven.Client.Connection.ServerClient.DirectPut(RavenJObject metadata, String key, Nullable`1 etag, RavenJObject document, String operationUrl) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.cs:line 398\r\n   at Raven.Client.Connection.ServerClient.<>c__DisplayClass13.<Put>b__12(String u) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.cs:line 333\r\n   at Raven.Client.Connection.ReplicationInformer.TryOperation[T](Func`2 operation, String operationUrl, Boolean avoidThrowing, T& result) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ReplicationInformer.cs:line 564\r\n   at Raven.Client.Connection.ReplicationInformer.ExecuteWithReplication[T](String method, String primaryUrl, Int32 currentRequest, Int32 currentReadStripingBase, Func`2 operation) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ReplicationInformer.cs:line 523\r\n   at Raven.Client.Connection.ServerClient.ExecuteWithReplication[T](String method, Func`2 operation) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.cs:line 174\r\n   at Raven.Client.Connection.ServerClient.Put(String key, Nullable`1 etag, RavenJObject document, RavenJObject metadata) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.cs:line 333\r\n```\r\n\r\n![image](https://cloud.githubusercontent.com/assets/641348/3138484/cdb11e02-e892-11e3-8a28-b661b042d8a5.png)\r\n\r\n   '
2143,'SimonCropp','Add support for mapping Sagas to message expressions\n--\r\n\r\nfor #943\r\n\r\nreplaces https://github.com/Particular/NServiceBus/pull/1959\r\n\r\nnow this is supported \r\n\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<TestSagaData> mapper)\r\n    {\r\n        mapper.ConfigureMapping<OtherMessage>(m => m.Part1 + "_"+m.Part2)\r\n            .ToSaga(s => s.Key);\r\n    }\r\n\r\n'
2142,'','Adding NuGet packages to a VB.Net project\nWhen adding a reference via NuGet to a VB.Net project the EndpointConfig created class is in C#'
2141,'','Improved sendonly\nWIP (not even compiling)\r\n\r\n@johnsimons this is what I had in mind regarding the feature tasks. \r\n\r\nIn short a bus is always started but can now be started in send only mode.\r\n\r\nSo instead of Configure.With().SendOnly()  users would call Configure.With().CreateBus().StartInSendOnlyMode()\r\n\r\nThoughts?\r\n\r\ncc @SimonCropp '
2140,'','Converting the databus to a feature to try out the new feature api\nIncluding the startup support. @johnsimons what do you think?\r\n\r\nI think we should change the feature activator to execute each startup task on a diff thread just like we do with all the other "I want to run when the bus starts"\r\n\r\ncc @SimonCropp '
2139,'','log warning if incorrect logging/config order\nfixes #1484 \r\n\r\nnot great but is the best i can think of since logging has to be static '
2138,'','Saga mapping\nfixes #2137  and #2136\r\n'
2137,'','Make ConfigureHowToFindSaga abstract\nToo many people forget to override this method. As such it will now be abstract.\r\n\r\n--\r\n\r\n\r\nOld saga mapping\r\n```\r\npublic class MySaga : Saga<MySagaData>,\r\n                    IAmStartedByMessages<Message1>,\r\n                    IHandleMessages<Message2>\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<Message2>(m => m.SomeID)\r\n            .ToSaga(s => s.SomeID);\r\n    }\r\n\r\n... Handle methods\r\n}\r\n```\r\n\r\nNew Saga mapping\r\n```\r\npublic class MySaga : Saga<MySagaData>,\r\n                    IAmStartedByMessages<Message1>,\r\n                    IHandleMessages<Message2>\r\n{\r\n\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n    {\r\n        mapper.ConfigureMapping<Message2>(s => s.SomeID)\r\n            .ToSaga(m => m.SomeID);\r\n    }\r\n\r\n... Handle methods\r\n}\r\n```\r\n'
2136,'','Remove empty constructor requirement from Saga\nby using `FormatterServices.GetUninitializedObject`'
2135,'','Add an abstract method to Saga for Unique prop\nIt\'s way too easy to forget a `Unique` attribute, and apparently it\'s not obvious enough of an error that sometimes it even makes it into production that way.\r\n\r\nSo the plan to make this more obvious is to add something like:\r\n```c#\r\npublic override string GetUniqueProperty()\r\n{\r\n   return "OrderId"; //This could be an Expression so it is fully typed \r\n}\r\n```\r\n\r\nThis means that we would get rid of the `Unique` attribute'
2134,'','Saga - new Interface to run a method when the Saga is created for the first time\nIs it possible to have an interface that can extend a SAGA e.g.\r\n```\r\ninterface IRunWhenSagaIsCreated\r\n{\r\n  void Initialize();\r\n}\r\n```\r\n\r\nI want to use this pattern, when I have sagas only handling one message type. So that when I initialize timeouts, I do not need to do this:\r\n```\r\n if (string.IsNullOrEmpty(Data.AccessionId))\r\n            {\r\n                Data.AccessionId = message.AccessionNumber;\r\n                RequestTimeout<DicomNormalOrderExpiredTimeout>(TimeToWait);\r\n            }\r\n```\r\nSo then the code would be\r\n```\r\nInitialize()\r\n{\r\n                Data.AccessionId = message.AccessionNumber\r\n                RequestTimeout<DicomNormalOrderExpiredTimeout>(TimeToWait);\r\n}\r\n```\r\nSo no need for an if statement.\r\n\r\nIt is also a nice place to put RequestTime wiring. As it is guaranteed to be called only once, if that is what you want. It is also nice when initializing the unique key.'
2133,'synhershko','If index is stale we may miss timeouts\nI have been looking at [this](https://groups.google.com/d/msg/particularsoftware/0GAI9oqmp74/ldcTruIq9MAJ) issue reported in the mailing list.\r\n\r\nSo to summarise the issue, the user is using the Scheduler API and creates to schedule tasks, one that runs every 5secs and another one that runs every 1min.\r\nEvery so often the 5sec schedule task stops from reoccurring.\r\n\r\nHere are the [logs](https://groups.google.com/group/particularsoftware/attach/c583cdf531a6f969/Flyt.TiosCtcAgent-log.txt?part=4)\r\n\r\nAnd here is one of the timeouts stored in Raven:\r\n```json\r\n{\r\n  "Destination": {\r\n    "Queue": "Flyt.TiosCtcAgent",\r\n    "Machine": "GMBSANNTID"\r\n  },\r\n  "SagaId": "00000000-0000-0000-0000-000000000000",\r\n  "State": "PD94bWwgdmVyc2lvbj0iMS4wIiA/Pg0KPE1lc3NhZ2VzIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zPSJodHRwOi8vdGVtcHVyaS5uZXQvTlNlcnZpY2VCdXMuU2NoZWR1bGluZy5NZXNzYWdlcyI+CjxTY2hlZHVsZWRUYXNrPgo8VGFza0lkPmU2YjZlN2NmLTlmYjMtNDhiZS1iZGUwLTc0NmJhZmE3MmRlNzwvVGFza0lkPgo8TmFtZT5Cb290c3RyYXA8L05hbWU+CjxFdmVyeT5QVDVTPC9FdmVyeT4KPC9TY2hlZHVsZWRUYXNrPgo8L01lc3NhZ2VzPg0K",\r\n  "Time": "2014-05-21T08:18:00.2114720Z",\r\n  "CorrelationId": "2f849e22-d760-4ce6-846b-a33200a9b784\\\\0",\r\n  "OwningTimeoutManager": "Flyt.TiosCtcAgent",\r\n  "Headers": {\r\n    "NServiceBus.MessageId": "2f849e22-d760-4ce6-846b-a33200a9b784",\r\n    "NServiceBus.CorrelationId": "2f849e22-d760-4ce6-846b-a33200a9b784",\r\n    "NServiceBus.OriginatingEndpoint": "Flyt.TiosCtcAgent",\r\n    "$.diagnostics.originating.hostid": "522caf7d3f53a790fdcc328b6cb0d627",\r\n    "NServiceBus.MessageIntent": "Send",\r\n    "NServiceBus.Version": "4.4.2",\r\n    "NServiceBus.TimeSent": "2014-05-21 08:17:55:211472 Z",\r\n    "NServiceBus.OriginatingMachine": "GMBSANNTID",\r\n    "NServiceBus.ContentType": "text/xml",\r\n    "NServiceBus.EnclosedMessageTypes": "NServiceBus.Scheduling.Messages.ScheduledTask, NServiceBus.Core, Version=4.4.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c",\r\n    "CorrId": "2f849e22-d760-4ce6-846b-a33200a9b784\\\\0",\r\n    "WinIdName": "GMBDOMENE1\\\\sanntidintegrasjon",\r\n    "NServiceBus.RelatedTo": "5da0ead5-1701-4e2e-9b43-a33200a9b16e",\r\n    "NServiceBus.ConversationId": "a00caaba-1eab-48a7-854f-a33100a5c243",\r\n    "NServiceBus.IsDeferredMessage": "True",\r\n    "NServiceBus.Temporary.DelayDeliveryWith": "00:00:05",\r\n    "NServiceBus.Timeout.Expire": "2014-05-21 08:18:00:211472 Z",\r\n    "NServiceBus.Timeout.RouteExpiredTimeoutTo": "Flyt.TiosCtcAgent@GMBSANNTID",\r\n    "NServiceBus.Timeout.ReplyToAddress": "Flyt.TiosCtcAgent@GMBSANNTID"\r\n  }\r\n}\r\n```\r\n\r\nThe only explanation I have is if the index is stale, we could end-up skipping over timeouts.\r\n@synhershko has actually identified this issue in the https://github.com/Particular/NServiceBus.RavenDB repo and has fixed it.\r\n\r\nI cannot replicate this myself, but the index staleness is definitely a possibility and that would explain the entries I can see in the log file.\r\n\r\n'
2130,'','remove some uses of config.instance\n'
2129,'','New feature api\nGood to go as soon as we get to green tests\r\n\r\n\r\ncc @SimonCropp @johnsimons  \r\n'
2128,'','Send: Cant find queue destination using web.config - UnicastBusConfig\nWhen Sending a Command from a Web Instance (WS) where Queue mappings are defined in the web.config one receives following Exception,\r\n\r\n```\r\nObject reference not set to an instance of an object.\r\n   at NServiceBus.Transports.Msmq.MsmqUtilities.GetFullPath(Address value) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqUtilities.cs:line 27\r\n   at NServiceBus.Transports.Msmq.MsmqMessageSender.Send(TransportMessage message, Address address) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqMessageSender.cs:line 38\r\n   at NServiceBus.Unicast.Behaviors.DispatchMessageToTransportBehavior.Invoke(SendPhysicalMessageContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\DispatchMessageToTransportBehavior.cs:line 73\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 51   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 34\r\n   at NServiceBus.Pipeline.PipelineExecutor.Execute[T](BehaviorChain`1 pipelineAction, T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 139\r\n   at NServiceBus.Unicast.Behaviors.CreatePhysicalMessageBehavior.Invoke(SendLogicalMessagesContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\CreatePhysicalMessageBehavior.cs:line 57\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 51   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 34\r\n   at NServiceBus.Pipeline.PipelineExecutor.Execute[T](BehaviorChain`1 pipelineAction, T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 139\r\n   at NServiceBus.Pipeline.PipelineExecutor.InvokeSendPipeline(SendOptions sendOptions, IEnumerable`1 messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 78\r\n   at NServiceBus.Unicast.UnicastBus.SendMessages(SendOptions sendOptions, List`1 messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 725\r\n   at LegalServices.Core.ServiceBusManager.SendCommand(Object[] commands) in c:\\Halan\\ITQ\\02.Projects\\Legal\\03.Development\\Web\\LegalServices\\Core\\ServiceBusManager.cs:line 72\r\n```\r\n\r\nAnd when one specifies the Queue in the Send method, it all works just fine.\r\n```\r\nBus.Send(new Address("QUEUENAME", "localhost"), cmd);\r\n```\r\n\r\nAlso using a Console Application having same app.config configuration and NSB version, works as expected.\r\n\r\nOnly difference between Console / Web is how NSB is initiated, \r\nConsole Using,\r\n```\r\n...\r\n    .CreateBus()\r\n    .Start();\r\n```\r\nAnd web, \r\n```\r\n...\r\n     .SendOnly();\r\n```\r\n\r\nWould seem that the web.config is not parsed (correctly), any way to debug on what Mappings has been read from the Config?\r\n\r\n\r\nNSB Version: 4.6.0'
2127,'','SyncOMatic update\n'
2126,'','remove StackTracePreserver\nfixes https://github.com/Particular/NServiceBus/issues/1245'
2125,'',"Merge branch 'hotfix-4.6.1'\n"
2124,'','Pass delivery options to the transport\nWith this in place we can control EnlistInReceiveTransaction. \r\n\r\nLeft to do:\r\n\r\n- [x] Add test for EnlistInReceiveTransaction\r\n- [x] Fix the audit issue'
2123,'',"Can't find Pipeline.RegisterBehavior\nUsing NSB 4.6.1 (from NuGet), \r\n\r\nWhen trying to inherit from RegisterBehavior class, it can not be found in NServiceBus.Pipeline.\r\nAnd when using Object Browser viewing NServiceBus.Core the Pipeline namespace is empty."
2122,'','RavenSagaPersister warning on load by non-unique\nProvides a "pit of success" developer feedback when they forget to mark properties with the [Unique] attribute. Fixes #2121.'
2121,'',"Raven SagaPersister: Log warning on attempting to GetByQuery\nIt's way too easy to forget a [Unique] attribute, and apparently it's not obvious enough of an error that sometimes it even makes it into production that way. See [Charlie Barker's blog](http://dualbotic.com/DB/blog/?p=320) and this [StackOverflow question](http://stackoverflow.com/questions/23785779/existing-saga-instances-after-applying-the-unique-attribute-to-icontainsagadat/23790801#23790801)."
2120,'','Split NLog and Log4net into own repos and add sensible logging defaults\nWIP'
2118,'',"Issue connecting to prod RavenDB in an AD domain\nCustomer report - 5060,\r\n\r\nScenario:\r\n- NServiceBus RavenDB is installed on a production server joined to an AD environment;\r\n- NServiceBus Endpoint is installed on a different server jpoined to the same domain;\r\n- the Endpoint is correctly configured to access RavenDB using a valid connection string in the config file;\r\n- The Endpoint is using Windows Authentication to connect to RavenDB via a Domain account;\r\n\r\nAt endpoint startup hapèpens that the connection to RavenDB cannot be established, thus the endpoint fails to set timeout persistance, subscriptions and so on.\r\n\r\nThe first thing we tries is to move to the ApiKey auth and everything worked as expected stating the RavenDB wan correctly running and no third party issues were influencing the communication.\r\n\r\nDigging deeper we discovered in the logs the following:\r\n\r\n2014-05-07 12:58:52,246 [1] INFO    NServiceBus.Persistence.Raven.RavenUserInstaller [(null)] <(null)> - Adding user '<domain>\\<usr>' to raven. Instance:'http://ip:port',   Database:'<db-name>'.\r\n2014-05-07 12:58:52,261 [1] WARN  NServiceBus.Persistence.Raven.RavenUserInstaller [(null)] <(null)> - Failed to add user to raven. Processing will continue\r\n\r\nbasically the endpoint at startup tries to add a user that is already defined on the server and fails, I can repro on my side the issue using a server hosted on Azure, frem that point on each attempt to connect to RavenDB return a HTTP500.\r\n\r\nI think that we should not try to create the RavenDB user."
2117,'','make subscriptions a behavior\n'
2116,'','remove MessageDrivenSubscriptionManager.ClientSubscribed \n`MessageDrivenSubscriptionManager.ClientSubscribed` was only intended for internal test verification purposes. Since this is no longer required it has been removed'
2115,'','Merge the core\n'
2113,'','Merge the Core\nThe NSB interfaces dll was created to allow people to have a smaller dependency when creating a messages assembly. With the introduction of unobtrusive messages that is no longer required. As such `NServiceBus.dll` will be merged into `NServiceBus.Core.dll`. Also the `NServiceBus.Interfaces` nuget will be deprecated.\r\n\r\n--\r\n\r\n## How the NServiceBus.Interfaces nuget will be deprecated\r\n\r\nWhen V5 is release a stub nuget for NServiceBus.Interfaces will be released. Located here https://github.com/Particular/NServiceBus/blob/develop/packaging/NServiceBus.Interfaces.5.0.0.nupkg\r\n\r\nThis nuget has a `install.ps1` that contains the following \r\n\r\n```\r\nparam($installPath, $toolsPath, $package, $project)\r\n\r\n\r\n# Need to load MSBuild assembly if it\'s not loaded yet.\r\nAdd-Type -AssemblyName \'Microsoft.Build, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\'\r\n  \r\n# Grab the loaded MSBuild project for the project\r\n$buildProject = [Microsoft.Build.Evaluation.ProjectCollection]::GlobalProjectCollection.GetLoadedProjects($project.FullName) | Select-Object -First 1\r\n\r\n$TargetFrameworkVersion = $buildProject.GetProperty("TargetFrameworkVersion") \r\nif ($buildProject.GetProperty("TargetFrameworkVersion").EvaluatedValue -eq "v4.0"){\r\n\tthrow "Please upgrade the project to .net 4.5 or higher before running this package"\r\n}\r\n\r\nwrite-host "NServiceBus.Interfaces has been deprecated an is no longer required" -foregroundcolor DarkRed \r\nwrite-host "Removing NServiceBus.Interfaces..." -foregroundcolor DarkRed \r\n\r\nuninstall-package NServiceBus.Interfaces -ProjectName $project.Name\r\n```\r\n\r\nFor all of the below scenarios result in v5 of `NServiceBus` installed and **no `NServiceBus.Interface` installed**\r\n\r\n### On a project with no NSB\r\n\r\n#### Install NServiceBus.Interfaces v5 \r\n\r\n    Install-Package NServiceBus.Interfaces\r\n\r\n#### Install NServiceBus v5 \r\n\r\n    Install-Package NServiceBus.Interfaces\r\n\r\n### On a project with an earlier version of NSB\r\n\r\n### Update `NServiceBus.Interface` to v5 a project with v4.x of NSB installed\r\n\r\n    Install-Package NServiceBus.Interfaces -Version 4.6.1\r\n    Install-Package NServiceBus -Version 4.6.1\r\n\tUpdate-Package NServiceBus.Interfaces\r\n\r\n### Install `NServiceBus.Interface` v5 on a project with v4.x of NSB installed\r\n\r\n    Install-Package NServiceBus.Interfaces -Version 4.6.1\r\n    Install-Package NServiceBus -Version 4.6.1\r\n\tInstall-Package NServiceBus.Interfaces\r\n\r\n### Update `NServiceBus` to v5 a project with v4.x of NSB installed\r\n\r\n    Install-Package NServiceBus.Interfaces -Version 4.6.1\r\n    Install-Package NServiceBus -Version 4.6.1\r\n\tUpdate-Package NServiceBus\r\n\r\n### Install `NServiceBus` v5 on a project with v4.x of NSB installed\r\n\r\n    Install-Package NServiceBus.Interfaces -Version 4.6.1\r\n    Install-Package NServiceBus -Version 4.6.1\r\n\tInstall-Package NServiceBus\r\n\r\n### Update all on a project with v4.x of NSB installed\r\n\r\n    Install-Package NServiceBus.Interfaces -Version 4.6.1\r\n    Install-Package NServiceBus -Version 4.6.1\r\n\tUpdate-Package\r\n\r\n\r\n\r\nTo replicate these tests copy the following nugets to a local directory and use that as a nuget package source.\r\n\r\n * the hacked `NServiceBus.Interfaces` https://github.com/Particular/NServiceBus/blob/develop/packaging/NServiceBus.Interfaces.5.0.0.nupkg\r\n * v5 `NServiceBus` (get it from the build server and hack the version to be 5.0)\r\n * v4.6.1  `NServiceBus` http://www.nuget.org/packages/NServiceBus/4.6.1\r\n * v4.6.1  `NServiceBus.Interfaces`  http://www.nuget.org/packages/NServiceBus.Interfaces/4.6.1'
2112,'','Decryption issues\nWhen testing the serviceconnect scenario with the videostore sample, I noticed that encrypted properties behave a bit weird when decrypted in the EncryptionMessageMutator.\r\n\r\n1. I question why they are decrypted to begin with, I feel we should never do that (at least not automatically), encrypted properties should be validated by comparing with other encrypted values.\r\n2. Null values are not allowed\r\n3. if there is unencrypted data in the encrypted property it blows up with an argument out of range exception, that could be nicer\r\n\r\n'
2111,'',"Creating Wcf services without modifying app.config\nCurrently, if a `WcfService` subclass is not configured in app.config, the service host won't start, because there is no base address specified.\r\n\r\nI would prefer to configure a base address for all services, and have the addresses for each service generated automatically.\r\n"
2110,'','Pipeline new registration API\nI\'ve completely redesigned the registration API.\r\nStill fixing little things but here is a sample of what it looks like:\r\n\r\n```c#\r\nclass OutboxDeduplicationRegistration: RegisterBehavior{\r\n    public OutboxDeduplicationRegistration()\r\n        : base("OutboxDeduplication", typeof(OutboxDeduplicationBehavior), "Deduplication for the outbox feature")\r\n    {\r\n        InsertAfter(WellKnownBehavior.ChildContainer);\r\n        InsertBefore(WellKnownBehavior.UnitOfWork);\r\n    }\r\n}\r\n\r\nclass OutboxRecorderRegistration : RegisterBehavior\r\n{\r\n    public OutboxRecorderRegistration()\r\n        : base("OutboxRecorder", typeof(OutboxRecordBehavior), "Records all action to the outbox storage")\r\n    {\r\n        InsertBefore(WellKnownBehavior.IncomingTransportMessageMutators);\r\n        InsertAfter(WellKnownBehavior.UnitOfWork);\r\n    }\r\n}\r\n```\r\n\r\nAnd these need to be explicit registrations, eg:\r\n```c#\r\npublic class PipelineConfig : INeedInitializatiob\r\n{\r\n    public void Init()\r\n    {\r\n        Configure.Pipeline.Register<OutboxDeduplicationRegistration>();\r\n        Configure.Pipeline.Register<OutboxRecorderRegistration>();\r\n        Configure.Pipeline.Replace(WellKnownBehavior.DispatchMessageToTransport, typeof(OutboxSendBehavior), "Sending behavior with a delay sending until all business transactions are committed to the outbox storage");\r\n    }\r\n}\r\n```\r\n\r\nor from the bootstrapper:\r\n```c#\r\nclass EndpointConfig :  IConfigureThisEndpoint, AsA_Publisher, IWantCustomInitialization\r\n    {\r\n        public void Init()\r\n        {\r\n            Configure.Pipeline.Register<OutboxDeduplicationRegistration>();\r\n            Configure.Pipeline.Replace(WellKnownBehavior.DispatchMessageToTransport, typeof(OutboxSendBehavior), "Sending behavior with a delay sending until all business transactions are committed to the outbox storage");\r\n            Configure.With()\r\n                .DefaultBuilder()\r\n                ...\r\n        }\r\n    }\r\n```\r\n\r\nThoughts so far?'
2109,'','ObjectDisposedException after an InMemory.Raise\nwe have a customer reporting the following scenario:\r\n\r\nThe issue occurred publishing in-memory, even though it did not throw any exception right there and then.\r\nBut when trying to do Bus.Publish in another transaction after the in-memory had occurred "most" of the time an ObjectDisposedExcetion is raised.\r\n\r\nit started happening after upgrading from version 4.3.3 to 4.5.1 cause, in 4.3.3, they had an issue regarding InMemory.Raise not being wrapped in a child container.\r\n\r\nThey are using Unity but they thought this issue #1871 InMemory.Raise throws when using CastleWindsorBuilder would solve it. And yes indeed they got rid of the initial problem when doing InMemory.Raise.\r\n\r\nBut now there is a strange error that occurs randomly and on different occasions.\r\n\r\nStack trace: ObjectDisposedException: "Cannot access a disposed object. Object name: \'CommonObjectBuilder\'."\r\n\r\nfirst occurence of a thrown exception was here --> y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\ObjectBuilder\\Common\\CommonObjectBuilder.cs Line number: ( 164,1): NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Build(Type typeToBuild) y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipe Line number: (\\BehaviorChain.cs:,1): NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipe Line number: (\\Pipe,1): NServiceBus.Pipeline.PipelineExecutor.Execute[T](BehaviorChain`1 pipelineAction, T context) y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipe Line number: (\\Pipe,1): NServiceBus.Pipeline.PipelineExecutor.InvokeSendPipeline(SendOptions sendOptions, IEnumerable`1 messages) y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs Line number: ( 323,1): NServiceBus.Unicast.UnicastBus.Publish[T](T[] messages)'
2108,'','Publicly expose the current FLR and SLR count\nAs a user I want to able, from the code running in my handler, to retrieve the current retry count (both of FLR and SLR) and the max retry so to determine how to behave if the current retry is the last one.\r\n\r\nBasically as a user I want to know something like: this is the last attempt, if it fails the message will be delivered to the error queue.\r\n\r\nAn amazing approach would be if this can be handled using the pipeline:\r\n\r\n    class Interceptor : IFailedMessageHandler<MyMessageType>\r\n    \x1e\x1d{\r\n        void Handle( ... ) // this is called just before sending the message to the error queue\r\n    }'
2107,'','update to 4.5\nfor #2078'
2106,'','Unable to install service remotely via NServiceBus.Host.exe as of v4.6.1\nWith previous versions (v4.5.1 was the last one I tried), I was always able to install my services remotely via PowerShell 3.0 (as part of a TeamCity build -- my build user has admin rights), using the following: \r\n```\r\nInvoke-Command -ComputerName myremotemachine {\r\n   c:\\myinstallpath\\NServiceBus.Host.exe /install /serviceName:MyServiceName /instance:Instance1\r\n}\r\n```\r\n\r\nAfter updating to v4.6.1, this command hangs and never returns.\r\nWhen I look at the log file on my remote server, it shows what looks like startup behavior (all of my components getting registered, my sagas getting setup, even timeouts executing), but my service never actually gets installed.\r\n\r\nWhen I log on to my remote server and run that same install command locally (minus the Invoke-Command part), everything works fine -- it installs, then I have to start the service separately, which matches my pre-v4.6.1 experience.\r\n\r\nAfter rolling back to v4.5.1, everything is fine again. '
2105,'','Change IMessageSerializer.Serialize to take a single message\nIn version 5 multi-message sends is being removed. So serialization of an array of messages is no longer required.\r\n\r\nNote that deserialization to an array is still required for backwards compatibility with earlier versions of NSB'
2104,'','Obsolete SerializationSettings WrapSingleMessages and DontWrapSingleMessages\nIn version 5 multi-message sends is being removed. So Wrapping messages is no longer required. It only remains for compatibility with 3.0 endpoints'
2103,'','Expose a way to set TTRQ for MSMQ\nMsmq in workgroup mode requires TTRQ to be set when sending.\r\n\r\nhttp://serverfault.com/questions/480285/how-to-change-default-msmq-time-to-reach-queue-time\r\n\r\nExposed a key on the connection string `...;TimeToReachQueue=12:00:00;`  where the value is a parsable timespan.'
2102,'',"Standardise extension methods to configure persistences\n--\r\n\r\nAt the moment we have no standard for persistence implementations to implement the extension methods to configure the persistence eg:\r\n- PersistenceForTimeouts\r\n- UseInMemoryTimeoutPersister\r\n- UseNHIbernateTimeoutPersister\r\n\r\nNew api:\r\n\r\n```\r\nconfig.UsePersitence<T>() \r\n```\r\nWhere T can be any of: `InMemory` , `NHibernate` , `RavenDB` , `MSMQ`.\r\n\r\nMore than one persitence can be specified and storages will sign up for storage types they support in the order they are called.\r\n\r\nEg:\r\n\r\n```\r\nconfig.UsePersitence<RavenDB>();\r\nconfig.UsePersitence<InMemory>();\r\n```  \r\n\r\nWill run RavenDB for everything except the Outbox which RavenDB doesn't support yet.\r\n\r\nTo get fine grained control over storages used supported storages use:\r\n\r\n```\r\nconfig.UsePersitence<RavenDB>(c=>c.For(Storage.Timeouts,Storage.Sagas));\r\nconfig.UsePersitence<InMemory>();\r\n```  \r\n"
2101,'',"Roles are mandatory but we don't support SendOnly\nTo get sendonly working when using the host you need to do the following:\r\n\r\n```\r\npublic class EndpointConfig : IConfigureThisEndpoint, IWantCustomInitialization, SendOnly\r\n    {\r\n\t    public void Init()\r\n\t    {\r\n\t        Configure.With()\r\n\t            .DefaultBuilder()\r\n\t            .UseTransport<Msmq>()\r\n\t            .UnicastBus()\r\n\t            .SendOnly();\r\n\t    }\r\n    }\r\n\r\n    public class SendOnlyRoleHandler : IConfigureRole<SendOnly>\r\n    {\r\n        public ConfigUnicastBus ConfigureRole(IConfigureThisEndpoint specifier)\r\n        {            \r\n            return Configure.Instance.UnicastBus();\r\n        }\r\n    }\r\n\r\n    public interface SendOnly : IRole\r\n    {\r\n    }\r\n```\r\n\r\nWe need to either:\r\n\r\n1. Create a sendonly role\r\n2. Remove the requirement to specify a role"
2100,'','Incoming/Outgoing pipeline\nMerging pipeline contexts so we end-up only with an Incoming and an Outgoing pipeline'
2099,'','RavenUserInstaller should check if connection string has username supplied\nWe should only add the current user to raven authorization if the connection string does not have a supplied account.\r\nif the connection string has something like:\r\n`Url=https://domain/;Database= serviceBus;user=john;password=….;`\r\nthen we should not do anything here'
2097,'','Remove UnicastBus.NoSubscribersForMessage event \n--\r\n\r\nIs it just me or does anyone else think that this public event does not belong in the UnicastBus?\r\n\r\nAlso, this event does not work for transports that support pub/sub natively so it is a confusing API to have exposed publicly.\r\n\r\nCan we remove it?'
2096,'',"Autofac 3.0.0 leaks memory\nWhen child containers is used. Fix is to upgrade Autofac to 3.0.1\r\n\r\nFrom [Autofac Release Notes](https://code.google.com/p/autofac/wiki/ReleaseNotes)\r\n\r\n> Rollback of  Issue 397  (Nested lifetime scopes aren't disposed when the parent is disposed) due to memory leak.\r\n\r\nported from https://github.com/Particular/NServiceBus/issues/1708"
2095,'','replace ISaga with non generic base class "Saga"\n`ISaga` looks like an extension point. But in reality it is an internal concern which allows the framework to gain access to a non-generic version of the sagadata. See #1762\r\n\r\nSo `ISaga` (#1762) and `ISaga<T>` (#1765)  were obsoleted\r\n\r\nThe replacement for the is a non-generic base class `Saga`. This class is a legitimating extension point, although most scenarios would still use `Saga<T>`. All functionality of `Saga<T>` will be pushed up to `Saga`. `Saga<T>` will now inherit from `Saga`.'
2094,'SzymonPobiega','Incorrect logging when Retries are disabled\n--\r\n\r\nWhen both SLR and FLR are disable the logging is incorrect in two ways\r\n\r\n *  Incorrectly reports that FLR has failed when no retry was done\r\n\r\n```\r\n2014-05-06 08:34:09.544 +10:00 [Error] Message with \'"9320cdcc-6f7a-41c0-a046-a323008d3352"\' id has failed FLR and will be moved to the configured error queue.\r\n```\r\n\r\n *  Exception is reported as Info and error does not contain exception information\r\n\r\nThere are two log entries. The first one is an info which actually contains the exception details. The second is an error which does not contain the exception details. This is problematic because if the user is only monitoring warnings and above (a common scenario) they will not be able to see the exception information.\r\n\r\n```\r\n2014-05-06 08:34:09.472 +10:00 [Information] Failed to process message System.Exception: Foo .....\r\n2014-05-06 08:34:09.544 +10:00 [Error] Message with \'"9320cdcc-6f7a-41c0-a046-a323008d3352"\' id has failed FLR and will be moved to the configured error queue.\r\n```\r\n\r\nRepro here https://github.com/Particular/BugsRepro/tree/master/DisabledRetryRepro'
2093,'','remove MessageIntentEnum.Init\n'
2092,'','remove UnicastBus.DisableMessageHandling\n'
2091,'','remove IPersistSagas\nNot used for anything.'
2090,'','Remove IConfigurable interface on Saga\nWith the removal of `ISaga` and `ISaga<T>` the `IConfigurable` interface is redundant.\r\n'
2089,'','IContainSagaData needs a default ctor\nSince the impl of `IContainSagaData` needs a default ctor should we explicitly express that in the Saga class?\r\n\r\nSo the idea is to add new() to it:\r\n```c#\r\npublic abstract class Saga<T> : IConfigurable, ISaga<T> where T : IContainSagaData, new()\r\n```\r\n\r\n@andreasohlund @SimonCropp thoughts?'
2088,'','Remove Bus.Subscribe Predicate overloads\nSince the Predicate is executed at the subscriber side it is not efficient. Also this is a confusing API since\r\nconsumer often, incorrectly, believe it is publisher side filtering. Instead create a Handler that does this \r\nfiltering logic and then, optionally, calls `DoNotContinueDispatchingCurrentMessageToHandlers`. This \r\nHandler should be ordered to run before other handlers.\r\n\r\nrelated to https://github.com/Particular/NServiceBus/issues/1546'
2087,'','Closes #2067\nFixes deserialization issues with the KeyValuePair type when it is used outside of dictionaries'
2086,'','Nservicebus 4.6 - what version of RavenDb.Client tools from Nuget should I be referencing\nI am getting the following error when I use the service control sage plugin.  I also have a reference to the latest ravendb client tools and I think that is the issue, just a educated guess.  What version should I be pulling down for 4.6\r\nUrl: "/bulk_docs"\r\nSystem.FormatException: Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).'
2084,'','InMemory transport removal\n--\r\n\r\nReasons\r\n\r\nSo there are several confusion of this API\r\n\r\n * Do Mutators run?\r\n * Is it run in the same transaction?\r\n * can complex+deep messages be sent? do they need to be serialized?\r\n * does encryption run? should they?\r\n * are databus properties supported?\r\n * can a saga be started from InMemory?\r\n * does the inMemory handler get an isolated set of headers or are they shared with the original message?\r\n * of the standard message actions (Send, Publish, Reply, Return, Timeout) what ones does InMemory support?\r\n * do FLR and SLR come into play?\r\n * confusion over the fact that domain events are a different concept to normal NSB message but they exist on the same API?\r\n * is a child builder created. ie will the handler for new message have an isolated CI scope?\r\n'
2082,'','Remove this.Bus() extension method for IHandleMessages implementations\n--\r\n\r\nCurrently this\r\n\r\n    public static class MessageHandlerExtensionMethods\r\n    {\r\n        public static IBus Bus<T>(this IHandleMessages<T> handler)\r\n        {\r\n            return ExtensionMethods.Bus;\r\n        }\r\n    }\r\n\r\nSupports this \r\n\r\n    public class RequestDataMessageHandler : IHandleMessages<RequestDataMessage>\r\n    {\r\n       public void Handle(RequestDataMessage message)\r\n       {\r\n           this.Bus().Reply(response);\r\n       }\r\n    }\r\n\r\nMoving forward into a "less statics world" this will cause issue  to it is being removed.\r\n\r\nThe alternative is to inject the IBus\r\n\r\n    public class RequestDataMessageHandler : IHandleMessages<RequestDataMessage>;\r\n        {\r\n            IBus bus;\r\n        public RequestDataMessageHandler(IBus bus)\r\n        {\r\n            this.bus = bus;\r\n        }\r\n       public void Handle(RequestDataMessage message)\r\n       {\r\n           bus.Reply(response);\r\n       }\r\n    }'
2081,'','Remove impersonation\n--\r\n\r\nrelated to https://github.com/Particular/NServiceBus/issues/1642 and https://github.com/Particular/NServiceBus/issues/1104'
2079,'','Re-Add CLS Compliance\nTurns out some of our consumers actually need this \r\n\r\nPartially reverts https://github.com/Particular/NServiceBus/issues/1313\r\n\r\nThe difference is non CLS Compliant members will be marked as such. So assemblies will be "CLS Compliant with exceptions"'
2078,'SimonCropp','Move to .net 4.5\nThe reasons for doing this are as follows\r\n\r\n- Allows some better optimization in the core via the use of new APIs provided in 4.5 \r\n- Some of our Satellite dependencies are already moving 4.5. For example Unity\r\n- 4.5 was release in mid 2012 so it has been out for reasonable amount of time\r\n- Less testing surface area\r\n- Also allows us to take advantages of the other various improvements in 4.5 http://msdn.microsoft.com/en-us/library/ms171868(v=vs.110).aspx#core\r\n\r\nWhat this means for consumers\r\n\r\n- The new minimum Visual Studio version will be Visual Studio 2012\r\n- The new minimum server OS will be 2008 \r\n- The new minimum desktop OS will be Vista SP2 \r\n- All assemblies (and nugets) that depend on the core will be upgraded to 4.5\r\n\r\nNote the earlier versions of NServiceBus will still be compatible and supported for .net 4\r\n\r\nFor more information on .net 4.5 see \r\n\r\n * .NET Framework 4.5 – Core New Features and Improvements http://msdn.microsoft.com/en-us/library/ms171868(v=vs.110).aspx#core\r\n * .NET Framework System Requirements http://msdn.microsoft.com/en-us/library/8z6watww%28v=vs.110%29.aspx\r\n\r\n--'
2077,'','Mark HasCompleted as obsolete\n'
2076,'',"What is Address.InitializeLocalAddress(..) for?\n@andreasohlund and @yvesgoeleven \r\n\r\nI'm still unsure what the business case is for a user to modify the input queue using `Address.InitializeLocalAddress(..)`.\r\n\r\nCan you please explain why would I use `Address.InitializeLocalAddress(..)` instead of fluent API `DefineEndpointName` ?"
2075,'','Testing w/ Machine Specification NServiceBus.Testing.Test.Bus is null\n\tpublic class test\r\n\t{\r\n\t\tEstablish context = () =>\r\n\t\t{\r\n\t\t\tNServiceBus.Testing.Test.Initialize();\r\n\t\t\tvar bus = NServiceBus.Testing.Test.Bus;\r\n\t\t};\r\n\t\r\n\t\tBecause of = () => NServiceBus.Testing.Test.Handler( bus=> new TestWorker(bus) )\r\n\t\t\t.ExpectPublish<TestEvent>( x => x.Success == true )\r\n\t\t\t.OnMessage<TestCommand>( message => message.TestString = "test" );\r\n\t\r\n\t\tIt should_pass = () => true.ShouldBeTrue();\r\n\t}\r\n\r\nThe important piece is the EstablishContext:\r\n\r\n\tEstablish context = () =>\r\n\t{\r\n\t    NServiceBus.Testing.Test.Initialize();\r\n\t    var bus = NServiceBus.Testing.Test.Bus;\r\n\t};\r\n\r\nafter the call to Initialize bus is null.'
2073,'','Obsolete the CompletionMessage.Messages\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus/CompletionResult.cs#L19\r\n\r\nAnd replace it with a .Message property instead'
2072,'',"NRE when sending a message that has no routing\nWhen an endpoint tries to send a message and if no routing information has been specified in the configuration, then the endpoint throws an unfriendly exception.\r\n\r\n--\r\n\r\nRaised by @HEskandari\r\nMigrated from by https://github.com/Particular/NServiceBus.SqlServer/issues/19\r\n\r\nI'm creating a collection of message to endpoint mapping in code (MessageEndpointMappingCollection) and found out that when I try to send a specific message type using Bus.Send(new MyMessage()) and the message routing is not configured I got the following exception. As soon as I added the missing mapping, it worked just fine. My expectation was to have a more meaningful error message.\r\n\r\nI'm using the following versions:\r\n\r\nNServiceBus 4.3.3\r\nNServiceBus.NHibernate 4.3.0\r\nNServiceBus.SqlServer 1.0.5\r\n\r\n```\r\nNServiceBus.Unicast.Queuing.FailedToSendMessageException was unhandled by user code\r\n  HResult=-2146233088\r\n  Message=Failed to send message.\r\n  Source=NServiceBus.Transports.SQLServer\r\n  StackTrace:\r\n       at NServiceBus.Transports.SQLServer.SqlServerMessageSender.ThrowFailedToSendException(Address address, Exception ex) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\SqlServer\\NServiceBus.SqlServer\\SqlServerMessageSender.cs:line 109\r\n       at NServiceBus.Transports.SQLServer.SqlServerMessageSender.Send(TransportMessage message, Address address) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\SqlServer\\NServiceBus.SqlServer\\SqlServerMessageSender.cs:line 91\r\n       at NServiceBus.Unicast.Behaviors.DispatchMessageToTransportBehavior.Invoke(SendPhysicalMessageContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\DispatchMessageToTransportBehavior.cs:line 74\r\n       at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n       at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n       at NServiceBus.MessageMutator.MutateOutgoingPhysicalMessageBehavior.Invoke(SendPhysicalMessageContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\MessageMutator\\MutateOutgoingPhysicalMessageBehavior.cs:line 19\r\n       at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n       at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n       at NServiceBus.Unicast.Behaviors.SerializeMessagesBehavior.Invoke(SendPhysicalMessageContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\SerializeMessagesBehavior.cs:line 40\r\n       at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n       at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 15\r\n       at NServiceBus.Pipeline.PipelineFactory.Execute[T](BehaviorChain`1 pipelineAction, T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 166\r\n       at NServiceBus.Pipeline.PipelineFactory.InvokeSendPipeline(SendOptions sendOptions, TransportMessage physicalMessage) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 130\r\n       at NServiceBus.Unicast.Behaviors.CreatePhysicalMessageBehavior.Invoke(SendLogicalMessagesContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\CreatePhysicalMessageBehavior.cs:line 52\r\n       at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n       at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n       at NServiceBus.Unicast.Behaviors.MultiMessageBehavior.Invoke(SendLogicalMessagesContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\MultiMessageBehavior.cs:line 19\r\n       at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n       at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n       at NServiceBus.Unicast.Behaviors.MultiSendValidatorBehavior.Invoke(SendLogicalMessagesContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\MultiSendValidatorBehavior.cs:line 33\r\n       at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n       at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 15\r\n       at NServiceBus.Pipeline.PipelineFactory.Execute[T](BehaviorChain`1 pipelineAction, T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 166\r\n       at NServiceBus.Pipeline.PipelineFactory.InvokeSendPipeline(SendOptions sendOptions, IEnumerable`1 messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 97\r\n       at NServiceBus.Unicast.UnicastBus.InvokeSendPipeline(SendOptions sendOptions, List`1 messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 731\r\n       at NServiceBus.Unicast.UnicastBus.SendMessages(SendOptions sendOptions, List`1 messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 707\r\n       at NServiceBus.Unicast.UnicastBus.Send(Object[] messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 553\r\n       at NServiceBus.Unicast.UnicastBus.Send(Object message) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 537\r\n       at ServicesPortal.Web.Integration.Tibco.Services.IntegrationService.SendShippingSchedule(ShippingScheduleMessage message) in c:\\Projects\\PWCS\\ServicesPortal.Web\\Integration\\Tibco\\Services\\IntegrationService.svc.cs:line 71\r\n       at SyncInvokeSendShippingSchedule(Object , Object[] , Object[] )\r\n       at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke(Object instance, Object[] inputs, Object[]& outputs)\r\n       at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin(MessageRpc& rpc)\r\n  InnerException: System.NullReferenceException\r\n       HResult=-2147467261\r\n       Message=Object reference not set to an instance of an object.\r\n       Source=NServiceBus.Transports.SQLServer\r\n       StackTrace:\r\n            at NServiceBus.Transports.SQLServer.SqlServerMessageSender.Send(TransportMessage message, Address address) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\SqlServer\\NServiceBus.SqlServer\\SqlServerMessageSender.cs:line 66\r\n       InnerException: \r\n```\r\n"
2071,'','when sagas are not enabled SagaPersistenceBehavior is injected into the pipeline\n'
2070,'','better handling of missing Feature.Enable<Sagas>\nso if a user forgets to have this line `Feature.Enable<Sagas>();` but still has a saga no guidance is given as to why that saga is not executed\r\n\r\nIn fact there is misinformation\r\n\r\n    Could not find a saga for the message type "Message1". Going to invoke SagaNotFoundHandlers.'
2069,'',"shutdown worker gracefully - after current work has completed\nIssue in response to:\r\nhttps://groups.google.com/forum/#!topic/particularsoftware/7r1A9imDikg\r\n\r\n[quote]\r\nSo after some investigation Rabbit and Sql in certain circumstances may not do a graceful shutdown, so I'll be releasing some hotfixes soon to address these issues.\r\n[/quote]\r\n\r\nWithout graceful shutdown message handlers that are not idempotent can have negative side effects."
2068,'synhershko',"Ignore unknown properties when deserializing (XML)\nAs discussed with @johnsimons @SimonCropp @gbiellem , we shouldn't error when deserializing XML messages that contain properties that do not exist in the target class.\r\n\r\nThis is to bring it in par with the JSON deserializer"
2067,'synhershko','Failure in deserializing KeyValuePair[] with XML serializer\n```C#\r\n  public interface IMyEvent : IEvent\r\n  {\r\n    KeyValuePair<string, string>[] FailureArgs { get; set; }\r\n  }\r\n```\r\n\r\n```C#\r\n  public class Publisher : IWantToRunWhenBusStartsAndStops\r\n  {\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Start() {\r\n      Bus.Publish<IAgreementSignFailed>(x => {\r\n        x.FailureArgs = new [] {\r\n          new KeyValuePair<string, string>("Arg0", "Value0"),\r\n          new KeyValuePair<string, string>("Arg0", "Value0")\r\n        };\r\n      });\r\n    }\r\n\r\n    public void Stop() {\r\n    }\r\n  }\r\n```\r\n\r\n```C#\r\n  class AgreementSignFailedHandler : IHandleMessages<IAgreementSignFailed>\r\n  {\r\n    public void Handle(IAgreementSignFailed message) {\r\n      Console.WriteLine(message.AgreementId.ToString());\r\n    }\r\n  }\r\n```\r\n\r\nWill fail because the XML deserializer doesn\'t know how to handle KeyValuePair[]'
2066,'','Issue 1893\n'
2065,'','Assembly scanner improvements\n- Allow to configure the Assembly scanner to not throw exceptions\r\n- If we find a valid `IEndpointConfig`, we should skip scanning\r\n- If there are errors, but if we can find endpoint config, we continue, but don\'t pass in bad assemblies.\r\nSo only do this if there are no errors:\r\n```c#\r\n if (arguments.ScannedAssemblies.Count > 0 -- && no errors)\r\n {\r\n serviceCommandLine.AddRange(arguments.ScannedAssemblies.Select(assembly =>    String.Format(@"/scannedAssemblies:""{0}""", assembly)));\r\n }\r\n```\r\n- The host should not throw, so that we can still start the endpoint `AppDomain` so that any binding redirects kick in'
2064,'','NServiceBus Host 4.5.0 causing assembly scanning exception\nAfter upgrading to 4.5, I\'ve started to get an exception with the NServiceBus Host:\r\n\r\n```\r\nUnhandled Exception: System.Exception: Could not enumerate all types for \'C:\\Ser\r\nvices\\Server\\FluentNHibernate.dll\'.\r\n\r\n   at NServiceBus.Hosting.Helpers.AssemblyScanner.ScanAssembly(String assemblyPa\r\nth, AssemblyScannerResults results) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\N\r\nServiceBus.Core\\Hosting\\Helpers\\AssemblyScanner.cs:line 149\r\n   at NServiceBus.Hosting.Helpers.AssemblyScanner.GetScannableAssemblies() in c:\r\n\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Hosting\\Helpers\\AssemblyS\r\ncanner.cs:line 81\r\n   at NServiceBus.Hosting.Windows.Program.Main(String[] args) in c:\\BuildAgent\\w\r\nork\\31f8c64a6e8a2d7c\\src\\NServiceBus.Hosting.Windows\\Program.cs:line 37\r\n```\r\n\r\nI\'ve added an EndpointConfigurationType to NServiceBus.Host.exe.config to try and prevent it from scanning assemblies, but it doesn\'t seem to help:\r\n\r\n```\r\n<?xml version="1.0" encoding="utf-8" ?>\r\n<configuration>\r\n  <appSettings>\r\n    <add key="EndpointConfigurationType" value="Kangaroom.Server.EndpointConfig, Kangaroom.Server"/>\r\n  </appSettings>\r\n    <startup>\r\n    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.1" />\r\n  </startup>\r\n</configuration>\r\n```\r\n'
2061,'',"Registry trial license cannot be written using default LocalSystem\nThe trial license won't work if NServiceBus is running as LocalSystem\r\nHere is the error:\r\n```\r\n2014-04-17 14:29:21,257 [4] FATAL NServiceBus.Licensing.LicenseManager [(null)] <(null)> - Could not access registry for the current user sid. Please ensure that the license has been properly installed.\r\n```\r\n\r\nAnd this is on purpose because LocalSystem does not have a HKCU, see https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Licensing/LicenseManager.cs#L53"
2060,'',"Roslyn C# compiler can't consume extension methods from NServiceBus.Core\nThe recently previewed C# 6.0 compiler (https://roslyn.codeplex.com/) has a known breaking-change that requires assemblies define extension methods to have an assembly-level System.Runtime.CompilerServices.ExtensionAttribute.  The NServiceBus.Core assembly does not seem to contain this attribute.  Would it be feasible to add this attribute?\r\n  \r\nFWIW, the lack of this attribute will also prevent all versions of the Visual Basic.NET from consuming these extension methods."
2059,'','Set console.title when using nservicebus host\nIt would be nice to setup `Console.Title` when using NServiceBus.Host in order to know which endpoint it is. Just look to that page: http://docs.particular.net/NServiceBus/full-duplex-sample-v3 - the endpoint name is hidden in the path.'
2058,'indualagarsamy',"When starting a new NServiceBus Host as a standard user, exception occurs during the check for license\n**Steps to repro**\r\n1. Create a NSB host (which is not started as administrator)\r\n2. Run the nservicebus.host /install to create the queues and make it run as a user who is a Standard User. \r\n3. The service fails to start. See the following exception:\r\n\r\n```\r\n2014-04-16 12:09:29,107 [5] INFO  NServiceBus.Configure [(null)] <(null)> - Invocation of NServiceBus.IWantToRunBeforeConfiguration completed in 0.08 s\r\n2014-04-16 12:09:29,270 [5] INFO  NServiceBus.Configure [(null)] <(null)> - Invocation of NServiceBus.Config.INeedInitialization completed in 0.00 s\r\n2014-04-16 12:09:29,278 [5] FATAL NServiceBus.Hosting.GenericHost [(null)] <(null)> - Exception when starting endpoint.\r\nSystem.Exception: Failed to access 'HKEY_LOCAL_MACHINE : SOFTWARE\\ParticularSoftware : License'. Do you have permission to write to this key? ---> System.UnauthorizedAccessException: Access to the registry key 'HKEY_LOCAL_MACHINE\\SOFTWARE\\ParticularSoftware' is denied.\r\n   at Microsoft.Win32.RegistryKey.Win32Error(Int32 errorCode, String str)\r\n   at Microsoft.Win32.RegistryKey.CreateSubKeyInternal(String subkey, RegistryKeyPermissionCheck permissionCheck, Object registrySecurityObj, RegistryOptions registryOptions)\r\n   at Microsoft.Win32.RegistryKey.CreateSubKey(String subkey, RegistryKeyPermissionCheck permissionCheck)\r\n   at Particular.Licensing.RegistryLicenseStore.TryReadLicense(String& license) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\App_Packages\\Particular.Licensing\\RegistryLicenseStore.cs:line 27\r\n   --- End of inner exception stack trace ---\r\n   at Particular.Licensing.RegistryLicenseStore.TryReadLicense(String& license) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\App_Packages\\Particular.Licensing\\RegistryLicenseStore.cs:line 53\r\n   at NServiceBus.Licensing.LicenseManager.GetExistingLicense() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Licensing\\LicenseManager.cs:line 125\r\n   at NServiceBus.Licensing.LicenseManager.InitializeLicense() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Licensing\\LicenseManager.cs:line 82\r\n   at NServiceBus.Licensing.LicenseInitializer.Init() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Licensing\\LicenseInitializer.cs:line 12\r\n   at NServiceBus.Configure.<>c__DisplayClass23`1.<ActivateAndInvoke>b__20(Type t) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Configure.cs:line 555\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Configure.ActivateAndInvoke[T](Action`1 action, Nullable`1 thresholdForWarning) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Configure.cs:line 561\r\n   at NServiceBus.Configure.Initialize() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Configure.cs:line 352\r\n   at NServiceBus.Configure.CreateBus() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Configure.cs:line 297\r\n   at NServiceBus.Hosting.GenericHost.Start() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 72\r\n\r\n```\r\n\r\n"
2057,'johnsimons','EndpointConfig.cs can get overwritten\nWhen `IConfigureThisEndpoint` implementation is in a different project `EndpointConfig.cs` content gets replaced with the default empty template.\r\n\r\nTo replicate this create a VS solution with 2 2 projects and in proj1 add:\r\n```c#\r\npublic abstract class BaseClass : IConfigureThisEndpoint, IWantCustomInitialization\r\n{\r\n    public void Init()\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nAnd in proj2 add:\r\n```c#\r\npublic class EndpointConfig : BaseClass, AsA_Server\r\n{ \r\n}\r\n```'
2056,'',"Handle ReflectionTypeLoadException better (included successfully loaded types)\n--\r\n\r\nWhen a `ReflectionTypeLoadException` occurs, you log the error but don't include the types that were loaded successfully. Please use this code instead:\r\n\r\n    Configure::GetAllowedTypes(params Assembly[] assemblies):\r\n\r\nin the catch, add this line of code:\r\n\r\n    types.AddRange(e.Types);\r\n\r\n"
2055,'','Change property injection to ctor injection\nIn order to reverse the container responsibility and free us from owing the container we need to stop modifying container defaults to support our internals.\r\n\r\nBecause property injection is not support OOTB in most containers we cannot rely on it for our internal classes, therefore I think is time to change our impl to use ctor injection.\r\n'
2054,'','Prevent exception from being thrown when selecting assemblies to scan.\nThis resolves #2053. Exception when calling System.Reflection.Assembly.Load(...), during selecting assemblies to scan for the endpoint, should not go unhandled.'
2053,'','ActivationException on Assemblies to Scan Selection\nWhen starting NServiceBus (4.4.2), during the process of selecting assemblies to scan, an unhandled exception can be thrown if an assembly exists in the current directory (or sub-directory of the current directory) that has a name/namespace that System.Reflection.Assembly.Load cannot handle.\r\n\r\nThis issue occurred as follows: On one of our development servers running an NServiceBus endpoint, we have ServiceControl (1.0.0-Beta7.15), which uses NServiceBus.Host.exe version 4.4.2 and uses embedded RavenDB. This morning the machine stopped unexpectedly. When the machine came back up, the ServiceControl service failed to start, with the following stack trace dump:\r\n\r\n```\r\nUnhandled Exception: Microsoft.Practices.ServiceLocation.ActivationException: Activation error occured while trying to get instance of type WindowsHost, key "Particular.ServiceControl.EndpointConfig, ServiceControl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ---> System.IO.FileNotFoundException: Could not load file or assembly \'1318669970.6%2bKPg23SbWD0MPCu3zZmiw%3d%3d.nodebug, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\' or one of its dependencies. The system cannot find the file specified.\r\n   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\r\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\r\n   at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean forIntrospection)\r\n   at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection)\r\n   at System.Reflection.Assembly.Load(String assemblyString)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at NServiceBus.Hosting.GenericHost..ctor(IConfigureThisEndpoint specifier, String[] args, List`1 defaultProfiles, String endpointName, IEnumerable`1 scannableAssembliesFullName) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 49\r\n   at NServiceBus.Hosting.Windows.WindowsHost..ctor(Type endpointType, String[]args, String endpointName, Boolean runOtherInstallers, IEnumerable`1 scannableAssembliesFullName) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Hosting.Windows\\WindowsHost.cs:line 26\r\n   at NServiceBus.Hosting.Windows.HostServiceLocator.DoGetInstance(Type serviceType, String key) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Hosting.Windows\\HostServiceLocator.cs:line 31\r\n   at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key) in c:\\Home\\Chris\\Projects\\CommonServiceLocator\\main\\Microsoft.Practices.ServiceLocation\\ServiceLocatorImplBase.cs:line 49\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key) in c:\\Home\\Chris\\Projects\\CommonServiceLocator\\main\\Microsoft.Practices.ServiceLocation\\ServiceLocatorImplBase.cs:line 57\r\n   at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance[TService](String key) in c:\\Home\\Chris\\Projects\\CommonServiceLocator\\main\\Microsoft.Practices.ServiceLocation\\ServiceLocatorImplBase.cs:line 103\r\n   at Topshelf.Internal.ServiceController`1.BuildInstance() in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\ServiceController.cs:line 93\r\n   at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter) in :line 0   at NServiceBus.Hosting.Windows.Program.Main(String[] args) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Hosting.Windows\\Program.cs:line 150\r\n```\r\n\r\nApparently, in between the normal running of the service and the unexpected restart, the following 2 files were created by the embedded RavenDB runtime:\r\n```\r\nC:\\Program Files (x86)\\Particular Software\\ServiceControl\\Raven\\CompiledIndexCache\\1318669970.6%2bKPg23SbWD0MPCu3zZmiw%3d%3d.nodebug.dll\r\nand\r\nC:\\Program Files (x86)\\Particular Software\\ServiceControl\\Raven\\CompiledIndexCache\\1318669970.6%2bKPg23SbWD0MPCu3zZmiw%3d%3d.nodebug.dll.cs\r\n```\r\nThe above DLL assembly is what is causing the unhandled exception.'
2052,'','Address\n'
2051,'andreasohlund','Workers use the wrong reply to address\nThe reply to address of the workers are wrongly rewritten the distributors control address instead of the main address\r\n \r\nThis was broken in 4.4.2 by this change:\r\n\r\nhttps://github.com/Particular/NServiceBus/commit/54a1da36b96500ac9807ed85828a5698bb607519\r\n'
2050,'andreasohlund','MutateIncomingMessages and MutateOutgoingMessages not honouring replacement of instance\nThis PR fixes issue #1980 \r\n\r\n@SimonCropp @andreasohlund should this go into 4.5 ?'
2048,'',"Remove the support for running workers and distributor on the same box\nThe code we have to generate unique input queues for workers running locally for demo purposes I constantly confusing users.  It's time to kill it.\r\n\r\nFull context:\r\nhttps://groups.google.com/forum/m/?utm_medium=email&utm_source=footer#!msg/particularsoftware/mBeAWMQ5JOE/KsE5gS4DL8UJ\r\n"
2047,'','PerformanceCounters causes indefinite hang on bus start\n--\r\n\r\nOn my machine only, having PerformanceCounters installed hangs the bus start. Removing them using `[Diagnostics.PerformanceCounterCategory]::Delete("NServiceBus")` makes it not hang. I downloaded the current source code (4.6) and debugged my way down to find the offending code which seems to be in the `NServiceBus.Unicast.Transport.Monitoring.ReceivePerformanceDiagnostics` class and the `SetupCounter(..)` method. The line where it hangs is\r\n`var t = counter.CounterType;`\r\n\r\nI have also tried the same code on a colleague\'s machine and it works there (with PerformanceCounters installed), but not on my machine, despite using the same version of visual studio and IIS Express.\r\n\r\n### Context\r\n- OS: Windows 7 Professional SP1\r\n- IDE: Visual Studio 2012 Professional Update 4\r\n- ProjectType: MVC5\r\n- Web Server: IIS Express 8\r\n- Configuration called at Application_Start:\r\n```\r\n            Configure.Serialization.Xml();\r\n            Configure.Transactions.Enable();\r\n            Configure.Features.Enable<Sagas>();\r\n\r\n            Configure.With()\r\n                     .Log4Net()\r\n                     .StructureMapBuilder(container)\r\n                     .PurgeOnStartup(false)\r\n                     .UnicastBus()\r\n                     .ImpersonateSender(true)\r\n                     .LoadMessageHandlers()\r\n                     .CreateBus()\r\n                     .Start();\r\n```'
2046,'','Null reference when replying from Saga not found handler\n@andreasohlund @SimonCropp \r\n\r\nDo we include this in v4.5?'
2045,'','"Extend Trial" button is broken\nWhen running NSB in a clean environment, and the trial has expired, this is shown:\r\n\r\n![trialcapture](https://cloud.githubusercontent.com/assets/212252/2657957/61df4a90-c002-11e3-849c-f7442876c2b8.JPG)\r\n\r\nHowever, clicking on "Extend Trial" opens a browser pointing to http://particular.net/extend-your-trial-14 , which doesn\'t exist (404)\r\n\r\n/cc @sfarmar @andreasohlund @dannycohen '
2044,'johnsimons','Null reference when replying from Saga not found handler\nBefore NServiceBus 4.4.2, I was able to send replies from within the saga not found handler with no problem. This code has been working since NServiceBus 4.0 and last working on 4.3.1. When I simply update to NServiceBus 4.4.2, I get this error. It may be worth noting, I am using the Ninject Builder.\r\n\r\nWhen tracing the NSB code, I see the null ref is the "Entity" property in this code block in the SagaSendBehavior.cs file/class"\r\n```\r\nif (context.TryGet(out saga))\r\n{\r\n    context.MessageToSend.Headers[Headers.OriginatingSagaId] = saga.Instance.Entity.Id.ToString();\r\n    context.MessageToSend.Headers[Headers.OriginatingSagaType] = saga.SagaType.AssemblyQualifiedName;\r\n\r\n}\r\n```\r\n\r\nFrom what I understand, there should really be no saga in context, since the saga cannot be found. In all cases when I get this exception, there really should be no saga available to handle the message, so it is correct to call the saga not found handler.\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Sagas.SagaSendBehavior.Invoke(SendLogicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Sagas\\SagaSendBehavior.cs:line 19\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Unicast.Behaviors.SendValidatorBehavior.Invoke(SendLogicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\SendValidatorBehavior.cs:line 17\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 24\r\n   at NServiceBus.Pipeline.PipelineExecutor.Execute[T](BehaviorChain`1 pipelineAction, T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 137\r\n   at NServiceBus.Pipeline.PipelineExecutor.InvokeSendPipeline(SendOptions sendOptions, LogicalMessage message) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 90\r\n   at NServiceBus.Unicast.Behaviors.MultiMessageBehavior.Invoke(SendLogicalMessagesContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\MultiMessageBehavior.cs:line 19\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Unicast.Behaviors.MultiSendValidatorBehavior.Invoke(SendLogicalMessagesContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\MultiSendValidatorBehavior.cs:line 36\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 24\r\n   at NServiceBus.Pipeline.PipelineExecutor.Execute[T](BehaviorChain`1 pipelineAction, T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 137\r\n   at NServiceBus.Pipeline.PipelineExecutor.InvokeSendPipeline(SendOptions sendOptions, IEnumerable`1 messages) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 79\r\n   at NServiceBus.Unicast.UnicastBus.InvokeSendPipeline(SendOptions sendOptions, List`1 messages) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 749\r\n   at NServiceBus.Unicast.UnicastBus.SendMessages(SendOptions sendOptions, List`1 messages) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 725\r\n   at NServiceBus.Unicast.UnicastBus.Reply(Object[] messages) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 476\r\n   at NServiceBus.Unicast.UnicastBus.Reply(Object message) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 481\r\n   at MyProject.Handlers.SagaNotFoundHandler.Handle(Object message) in c:\\_projects\\MyProject\\source\\MyProject\\Handlers\\SagaNotFoundHandler.cs:line 67\r\n   at NServiceBus.Sagas.SagaPersistenceBehavior.InvokeSagaNotFoundHandlers() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Sagas\\SagaPersistenceBehavior.cs:line 110\r\n   at NServiceBus.Sagas.SagaPersistenceBehavior.Invoke(HandlerInvocationContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Sagas\\SagaPersistenceBehavior.cs:line 51\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Sagas.AuditInvokedSagaBehavior.Invoke(HandlerInvocationContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Sagas\\AuditInvokedSagaBehavior.cs:line 14\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Unicast.Behaviors.SetCurrentMessageBeingHandledBehavior.Invoke(HandlerInvocationContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\SetCurrentMessageBeingHandledBehavior.cs:line 21\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 24\r\n   at NServiceBus.Pipeline.PipelineExecutor.Execute[T](BehaviorChain`1 pipelineAction, T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 137\r\n   at NServiceBus.Pipeline.PipelineExecutor.InvokeHandlerPipeline(MessageHandler handler) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 69\r\n   at NServiceBus.Unicast.Behaviors.LoadHandlersBehavior.Invoke(ReceiveLogicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\LoadHandlersBehavior.cs:line 45\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.DataBus.DataBusReceiveBehavior.Invoke(ReceiveLogicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\DataBus\\DataBusReceiveBehavior.cs:line 68\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.MessageMutator.ApplyIncomingMessageMutatorsBehavior.Invoke(ReceiveLogicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\MessageMutator\\ApplyIncomingMessageMutatorsBehavior.cs:line 25\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 24\r\n   at NServiceBus.Pipeline.PipelineExecutor.Execute[T](BehaviorChain`1 pipelineAction, T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 137\r\n   at NServiceBus.Pipeline.PipelineExecutor.InvokeLogicalMessagePipeline(LogicalMessage message) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 60\r\n   at NServiceBus.Unicast.Messages.ExecuteLogicalMessagesBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Messages\\ExecuteLogicalMessagesBehavior.cs:line 30\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Unicast.Behaviors.CallbackInvocationBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\CallbackInvocationBehavior.cs:line 26\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Unicast.Messages.ExtractLogicalMessagesBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Messages\\ExtractLogicalMessagesBehavior.cs:line 58\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Sagas.RemoveIncomingHeadersBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Sagas\\RemoveIncomingHeadersBehavior.cs:line 23\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Unicast.Behaviors.RaiseMessageReceivedBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\RaiseMessageReceivedBehavior.cs:line 18\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.MessageMutator.ApplyIncomingTransportMessageMutatorsBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\MessageMutator\\ApplyIncomingTransportMessageMutatorsBehavior.cs:line 22\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\UnitOfWork\\UnitOfWorkBehavior.cs:line 24\r\n```\r\n\r\nThe object handler in the IHandleSagaNotFound derived class (SagaNotFoundHandler):\r\n```\r\n        public void Handle(object message)\r\n        {\r\n            var command = message as IMyCommand;\r\n\r\n            if (command == null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            var initializeCommandReply = new InitializeCommandReply\r\n            {\r\n                Result = InitializeCommandStatusResult.Failed,\r\n                Message = "No process/saga could be found to route the command to.",\r\n                TransactionId = command.TransactionId\r\n            };\r\n\r\n            this.bus.Reply(initializeCommandReply); // line 67\r\n        }\r\n```'
2043,'',"Can't test Saga without parameter-less ctor\nSaga function takes an instance of a saga but still requires\r\nparameter-less constructor"
2042,'','Structuremap 3 integration\nThe current NServiceBus.Structuremap package is not compatible with Structuremap 3.'
2041,'','Removed dead Testing.Handler code\nassertions private member not populated by any code'
2040,'','Add Configure.Property<T>\nAdd the Property&lt;T&gt; method on the static Configure class so that we can call:\r\n\r\nConfigure.Property&lt;Saga&gt;(s => s.Foo, bar);\r\n\r\nInstead of Configure.Instance.Configurer.ConfigureProperty&lt;Saga&gt;(s => s.Foo, bar);\r\n'
2039,'',"Duplicated log entries in the console\nHi,\r\n\r\nWe are using NLog for logging and I'm wondering if there is a way to disable the internal NSB console logger. Now we have every message duplicated. I tired https://groups.yahoo.com/neo/groups/nservicebus/conversations/topics/6225 but it did not work.  To configure NLog we use: SetLoggingLibrary.NLog();\r\n\r\n![logging](https://cloud.githubusercontent.com/assets/347637/2586975/65bad712-ba10-11e3-913b-324c999cfef0.png)\r\n\r\n\r\nThanks\r\n\r\nPawel"
2038,'',"MsmqTransport Obsolete Message is Misleading\nThe obsolete message for MsmqTransport appears to be incorrect:\r\n\r\n'NServiceBus.ConfigureMsmqMessageQueue.MsmqTransport(NServiceBus.Configure)' is obsolete: 'Please use UsingTransport\\<Msmq\\> on your IConfigureThisEndpoint class or the other option is using the fluent API **.UseTransport\\<Msmq\\>()** Will be treated as an error from version 5.4.0. Will be removed in version 6.4.0.'\t\r\n\r\nI believe the bold text should read *MsmqTransport(NServiceBus.Configure)*."
2037,'','InvalidOperationException under heavy load with StructureMap and Unity containers\nWe\'ve had a couple of reports of exceptions under heavy load.  One when using StructureMap, the other when using Unity.  They are slightly diffrent but per @johnsimons  request, I am combining them into a single issue.\r\n\r\n### StructureMap Issue \r\n(case 4525)\r\nWe have a very high volume service handling events raised by a central\r\npublisher. Several hundred times a day the below error is raised. This\r\njust started happening a few days ago. We are running version 3.2.8 and\r\nare currently in the process of updating to the latest.\r\n```\r\nSystem.InvalidOperationException: Collection was modified; enumeration\r\noperation may not execute.\r\nat System.Collections.Generic.Dictionary`2.Enumerator.MoveNext()\r\nat StructureMap.StringExtensions.Each[T](IEnumerable`1 enumerable,\r\nAction`1 action) in c:\\code\\structuremap\\Source\\StructureMap\\Extensions.cs:line\r\n10\r\nat StructureMap.InstanceFactory.Clone() in c:\\code\\structuremap\\Source\\\r\nStructureMap\\InstanceFactory.cs:line 137\r\nat StructureMap.PipelineGraph.ToNestedGraph() in\r\nc:\\code\\structuremap\\Source\\StructureMap\\PipelineGraph.cs:line 102\r\nat StructureMap.Container.GetNestedContainer() in\r\nc:\\code\\structuremap\\Source\\StructureMap\\Container.cs:line 441\r\nat NServiceBus.ObjectBuilder.StructureMap.StructureMapObjectBuilder.\r\nBuildChildContainer()\r\nat NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.\r\nNServiceBus.ObjectBuilder.IBuilder.CreateChildBuilder()\r\nat NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object\r\nsender, TransportMessageReceivedEventArgs e)\r\nat System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\nat NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.\r\nOnTransportMessageReceived(TransportMessage msg)\r\n```\r\n\r\n### Unity Issue\r\n (case 4135)\r\nIt seems there\'s an issues when using a Unity 2.x container and starting\r\nsatellites. We use a lot of injection in our handlers and in our production\r\nenvironment we see that the parallel tasks for starting satellites poses an\r\nissue on startup. In special the second level retry processor satellite.\r\nThe results in the second level retry processor not starting correctly and\r\nnot handling its queue.\r\n\r\nAny ideas on how to solve this?\r\n\r\nHelpful information to include\r\nProduct name: NServiceBus\r\nVersion: 4.0.4\r\nStacktrace:\r\n```\r\n2014-02-25 16:25:25,726 [21] DEBUG NServiceBus.Satellites.SatelliteLauncher\r\n[(null)] - Starting 1/3\r\n\'NServiceBus.SecondLevelRetries.SecondLevelRetriesProcessor,\r\nNServiceBus.Core, Version=4.0.0.0, Culture=neutral,\r\nPublicKeyToken=9fc386479f8a226c\' satellite\r\n2014-02-25 16:25:25,726 [22] DEBUG NServiceBus.Unicast.UnicastBus [(null)]\r\n- Started\r\nNServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.StorageInitializer,\r\nNServiceBus.Core, Version=4.0.0.0, Culture=neutral,\r\nPublicKeyToken=9fc386479f8a226c.\r\n2014-02-25 16:25:25,742 [8] DEBUG\r\nPms.Framework.Unity.UnityServiceHostFactory [(null)] - Creating service\r\nhost for server AdminService with Uri\'s\r\nhttp://----.com/services/application/AdminService.svc,\r\n2014-02-25 16:25:25,742 [21] ERROR NServiceBus.Unicast.UnicastBus [(null)]\r\n- System.AggregateException: One or more errors occurred. --->\r\nMicrosoft.Practices.Unity.ResolutionFailedException: Resolution of the\r\ndependency failed, type =\r\n"NServiceBus.Unicast.Transport.TransportReceiver", name = "(none)".\r\nException occurred while: while resolving.\r\nException is: InvalidOperationException - Collection was modified;\r\nenumeration operation may not execute.\r\n-----------------------------------------------\r\nAt the time of the exception, the container was:\r\n\r\nResolving NServiceBus.Unicast.Transport.TransportReceiver,(none)\r\n---> System.InvalidOperationException: Collection was modified;\r\nenumeration operation may not execute.\r\nat System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource\r\nresource)\r\nat\r\nSystem.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext()\r\nat\r\nMicrosoft.Practices.Unity.UnityContainer.FillTypeRegistrationDictionary(IDictionary`2\r\ntypeRegistrations)\r\nat Microsoft.Practices.Unity.UnityContainer.get_Registrations()\r\nat\r\nMicrosoft.Practices.Unity.UnityContainerExtensions.IsRegistered(IUnityContainer\r\ncontainer, Type typeToCheck, String nameToCheck)\r\nat\r\nMicrosoft.Practices.Unity.UnityContainerExtensions.IsRegistered(IUnityContainer\r\ncontainer, Type typeToCheck)\r\nat\r\nNServiceBus.ObjectBuilder.Unity.PropertyInjectionBuilderStrategy.PreBuildUp(IBuilderContext\r\ncontext)\r\nat\r\nMicrosoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext\r\ncontext)\r\nat Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object\r\nexisting, String name, IEnumerable`1 resolverOverrides)\r\n--- End of inner exception stack trace ---\r\nat Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object\r\nexisting, String name, IEnumerable`1 resolverOverrides)\r\nat Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name,\r\nResolverOverride[] resolverOverrides)\r\nat\r\nMicrosoft.Practices.Unity.UnityContainerExtensions.Resolve(IUnityContainer\r\ncontainer, Type t, ResolverOverride[] overrides)\r\nat NServiceBus.ObjectBuilder.Unity.UnityObjectBuilder.Build(Type\r\ntypeToBuild)\r\nat\r\nNServiceBus.ObjectBuilder.Common.CommonObjectBuilder.NServiceBus.ObjectBuilder.IBuilder.Build[T]()\r\nat\r\nNServiceBus.Satellites.SatelliteLauncher.<>c__DisplayClass4.<Start>b__2(Int32\r\nindex)\r\nat System.Threading.Tasks.Parallel.<>c__DisplayClassf`1.<ForWorker>b__c()\r\nat System.Threading.Tasks.Task.InnerInvoke()\r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)\r\nat\r\nSystem.Threading.Tasks.Task.<>c__DisplayClass11.<ExecuteSelfReplicating>b__10(Object\r\nparam0)\r\n--- End of inner exception stack trace ---\r\nat System.Threading.Tasks.Task.ThrowIfExceptional(Boolean\r\nincludeTaskCanceledExceptions)\r\nat System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,\r\nCancellationToken cancellationToken)\r\nat System.Threading.Tasks.Task.Wait()\r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32\r\nfromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1\r\nbody, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit,\r\nAction`1 localFinally)\r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32\r\ntoExclusive, Action`1 body)\r\nat NServiceBus.Satellites.SatelliteLauncher.Start()\r\nat NServiceBus.Unicast.UnicastBus.<>c__DisplayClass18.<Start>b__16()\r\n---> (Inner Exception #0)\r\nMicrosoft.Practices.Unity.ResolutionFailedException: Resolution of the\r\ndependency failed, type =\r\n"NServiceBus.Unicast.Transport.TransportReceiver", name = "(none)".\r\nException occurred while: while resolving.\r\nException is: InvalidOperationException - Collection was modified;\r\nenumeration operation may not execute.\r\n-----------------------------------------------\r\nAt the time of the exception, the container was:\r\n\r\nResolving NServiceBus.Unicast.Transport.TransportReceiver,(none)\r\n---> System.InvalidOperationException: Collection was modified;\r\nenumeration operation may not execute.\r\nat System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource\r\nresource)\r\nat\r\nSystem.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext()\r\nat\r\nMicrosoft.Practices.Unity.UnityContainer.FillTypeRegistrationDictionary(IDictionary`2\r\ntypeRegistrations)\r\nat Microsoft.Practices.Unity.UnityContainer.get_Registrations()\r\nat\r\nMicrosoft.Practices.Unity.UnityContainerExtensions.IsRegistered(IUnityContainer\r\ncontainer, Type typeToCheck, String nameToCheck)\r\nat\r\nMicrosoft.Practices.Unity.UnityContainerExtensions.IsRegistered(IUnityContainer\r\ncontainer, Type typeToCheck)\r\nat\r\nNServiceBus.ObjectBuilder.Unity.PropertyInjectionBuilderStrategy.PreBuildUp(IBuilderContext\r\ncontext)\r\nat\r\nMicrosoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext\r\ncontext)\r\nat Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object\r\nexisting, String name, IEnumerable`1 resolverOverrides)\r\n--- End of inner exception stack trace ---\r\nat Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object\r\nexisting, String name, IEnumerable`1 resolverOverrides)\r\nat Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name,\r\nResolverOverride[] resolverOverrides)\r\nat\r\nMicrosoft.Practices.Unity.UnityContainerExtensions.Resolve(IUnityContainer\r\ncontainer, Type t, ResolverOverride[] overrides)\r\nat NServiceBus.ObjectBuilder.Unity.UnityObjectBuilder.Build(Type\r\ntypeToBuild)\r\nat\r\nNServiceBus.ObjectBuilder.Common.CommonObjectBuilder.NServiceBus.ObjectBuilder.IBuilder.Build[T]()\r\nat\r\nNServiceBus.Satellites.SatelliteLauncher.<>c__DisplayClass4.<Start>b__2(Int32\r\nindex)\r\nat System.Threading.Tasks.Parallel.<>c__DisplayClassf`1.<ForWorker>b__c()\r\nat System.Threading.Tasks.Task.InnerInvoke()\r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)\r\nat\r\nSystem.Threading.Tasks.Task.<>c__DisplayClass11.<ExecuteSelfReplicating>b__10(Object\r\nparam0)<---\r\ncould not be started.\r\n```'
2036,'','LicenseExpirationChecker.HasLicenseDateExpired throws exception\n```\r\nUnhandled Exception: System.ArgumentOutOfRangeException: The added or subtracted value results in an un-representable Da\r\nteTime.\r\nParameter name: value\r\n   at System.DateTime.AddTicks(Int64 value)\r\n   at Particular.Licensing.LicenseExpirationChecker.HasLicenseDateExpired(DateTime licenseDate) in c:\\Projects\\NServiceB\r\nus\\src\\NServiceBus.Core\\App_Packages\\Particular.Licensing\\LicenseExpirationChecker.cs:line 28\r\n   at Particular.Licensing.LicenseExpirationChecker.HasLicenseExpired(License license) in c:\\Projects\\NServiceBus\\src\\NS\r\nerviceBus.Core\\App_Packages\\Particular.Licensing\\LicenseExpirationChecker.cs:line 9\r\n   at NServiceBus.Licensing.LicenseManager.InitializeLicense() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Licensing\r\n\\LicenseManager.cs:line 99\r\n   at NServiceBus.Licensing.LicenseInitializer.Init() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Licensing\\LicenseI\r\nnitializer.cs:line 10\r\n   at NServiceBus.Configure.<Initialize>b__10(INeedInitialization t) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Con\r\nfigure.cs:line 350\r\n   at NServiceBus.Configure.<>c__DisplayClass23`1.<ActivateAndInvoke>b__20(Type t) in c:\\Projects\\NServiceBus\\src\\NServi\r\nceBus.Core\\Configure.cs:line 555\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Configure.ForAllTypes[T](Action`1 action) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Configure.cs\r\n:line 379\r\n   at NServiceBus.Configure.ActivateAndInvoke[T](Action`1 action, Nullable`1 thresholdForWarning) in c:\\Projects\\NServic\r\neBus\\src\\NServiceBus.Core\\Configure.cs:line 549\r\n   at NServiceBus.Configure.Initialize() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Configure.cs:line 350\r\n   at NServiceBus.Configure.CreateBus() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Configure.cs:line 295\r\n   at Runner.Program.Main(String[] args) in c:\\Projects\\NServiceBus\\src\\NServiceBus.PerformanceTests\\Program.cs:line 116\r\n```\r\n\r\nThis happens because I have a `expiration="9999-12-31T23:59:59.9999999"`'
2034,'','Distributor restart causes dropping of available workers\nThis fixes #2033 '
2033,'',"MSMQDistributor unable to continue work after a restart.\nUsing NServiceBus 4.4.2 with NServiceBus.Distributor.MSMQ.\r\n\r\nWhen using the new MSMQDistributor and MSMQWorker profiles, the distributor no longer sends messages to the workers after it has been restarted. When a message is received it clears out the storage queue and doesn't process the message. When the worker is restarted it works as expected.\r\n\r\nSteps to reproduce:\r\n1. Start an instance of an endpoint with NServiceBus.MSMQDistributor\r\n2. Start an instance of that endpoint with NServiceBus.MSMQWorker.\r\n3. Restart the Distributor instance.\r\n4. Send a messages to the distributor.\r\n"
2031,'','Fall back to using WindowsIdentity.GetCurrent when IIS is impersonating \nif `Thread.CurrentPrincipal.Identity` is null (which can happen in IIS impersonation) fall back to using `WindowsIdentity.GetCurrent()` instead of `Thread.CurrentPrincipal.Identity`\r\n\r\n--\r\n\r\nAs pointed out here https://groups.google.com/forum/#!topic/particularsoftware/lA7qYOMrqbU\r\n\r\nWe previously used `Thread.CurrentPrincipal.Identity` to add `Headers.WindowsIdentityName`\r\n\r\nFor reference: http://stackoverflow.com/questions/18205458/why-do-thread-currentprincipal-identity-and-windowsidentity-getcurrent-differ'
2030,'','Add null Principal checks to WindowsIdentityEnricher\n`Thread.CurrentPrincipal` is now checked for null\r\n\r\n--\r\n\r\nAs pointed out here https://groups.google.com/forum/#!topic/particularsoftware/lA7qYOMrqbU\r\n\r\n`Thread.CurrentPrincipal` can return null. \r\n\r\nConfirmed by decompiling and looking at the internal implementation \r\n```\r\ninternal IPrincipal GetThreadPrincipal()\r\n{\r\n    if (this._DefaultPrincipal == null)\r\n    {\r\n        switch (this._PrincipalPolicy)\r\n        {\r\n            case PrincipalPolicy.UnauthenticatedPrincipal:\r\n                return new GenericPrincipal(new GenericIdentity("", ""), new string[] { "" });\r\n\r\n            case PrincipalPolicy.NoPrincipal:\r\n                return null;\r\n\r\n            case PrincipalPolicy.WindowsPrincipal:\r\n                return new WindowsPrincipal(WindowsIdentity.GetCurrent());\r\n        }\r\n        return null;\r\n    }\r\n    return this._DefaultPrincipal;\r\n}\r\n```\r\n\r\nSo here \r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Impersonation/Windows/WindowsIdentityEnricher.cs\r\n\r\nWe need to null check `Thread.CurrentPrincipal.Identity.Name`\r\n'
2029,'','Profile "NServiceBus.MSMQWorker" not reporting for duty with distributor\nWe noticed NSB 4.4.2 the Worker profile interface has been deprecated.\r\n\r\nAs we use the IHandleProfile<Worker> interface for only worker specific scenarios, after changing over to MSMQWorker and invoking NServiceBus host with NServiceBus.Integration NServiceBus.MSMQWorker profiles we have noticed that after the initial "Hey distributor, I am available for work, got 10 slots" there is no more begging for additional graft (no sign of "Worker checked in with available capacity: X)".\r\n\r\nWhen we are using the depreciated "Worker" interface, everything is fine.\r\nHas anyone seen this before? Am I missing something...\r\n\r\n'
2027,'','Adding a new project for development only powershells\nReview please'
2025,'','Website hosted in azure emulator hangs when performance counters are defined on machine\nWhen a webrole is hosted in the azure emulator on a machine that has the performance counters installed the following line never returns & the process hangs\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Transport/Monitoring/ReceivePerformanceDiagnostics.cs#L100\r\n\r\nPS: it works fine for workerroles or when the website is run outside the emulator, workaround is to delete performance counters'
2024,'',"Error with autosubscriber during service installation: System.ObjectDisposedException: Cannot access a disposed object\nHi, \r\n\r\nWe recently updated some of our endpoints to NServiceBus 4.4.2 and got the following error during installation, which we don't see when we roll back to 4.3.3:\r\n\r\n```\r\n2014-03-19 10:40:08.3178|FATAL|NServiceBus|NServiceBus.AutomaticSubscriptions.AutoSubscriber, NServiceBus.Core, Version=4.4.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c could not be started.\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'CommonObjectBuilder'.\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Build[T]() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\ObjectBuilder\\Common\\CommonObjectBuilder.cs:line 159\r\n   at NServiceBus.Unicast.UnicastBus.Subscribe(Type messageType, Predicate`1 condition) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 387\r\n   at NServiceBus.AutomaticSubscriptions.AutoSubscriber.Start() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\AutomaticSubscriptions\\AutoSubscriber.cs:line 24\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass1d.<Start>b__1b() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 826\r\n```\r\n\r\nI can reproduce the issue on my sample Subscriber endpoint here, using the following install command:\r\nhttps://github.com/killthrush/random-detritus/tree/master/NServiceBusRepro\r\n\r\n```\r\nNServiceBus.Host.exe NServiceBus.Production /install /serviceName:foobar /displayName:foobar\r\n```\r\n\r\nAny thoughts on why this broke all of a sudden?\r\n\r\nThanks!"
2023,'andreasohlund','Update the license dialog to the new platform design\nThis depends on the license pull \r\n\r\nhttps://github.com/Particular/NServiceBus/pull/2022'
2022,'andreasohlund','Platform licensing\nAdded the platform wide licensing\r\n\r\nAlso fixes #1968 '
2021,'',"Fix Acceptance test When_using_a_message_with_TimeToBeReceived_has_expired\nThe acceptence test When_using_a_message_with_TimeToBeReceived_has_expired uses Bus.Defer to send a message after 5 seconds assuming this will extend beyond the 1 second TTL defined on it. That's not the case though as the TTL will simple be set again when the message is sent back by the timeoutmanager, giving the test a second to process the message anyway."
2020,'','Saga testing issues\nI think there are some friction points with the saga testing (even as it is now). I can\'t do an empty ExpectNotSend or an empty ExpectNotSendLocal. I think the following changes may need to be made.\r\n \r\n```public Saga<T> ExpectNotSend<TMessage>(Func<TMessage, bool> check)```\r\n \r\nshould be:\r\n \r\n```public Saga<T> ExpectNotSend<TMessage>(Func<TMessage, bool> check = null)```\r\n \r\nand \r\n \r\n```public Saga<T> ExpectNotSendLocal<TMessage>(Func<TMessage, bool> check)```\r\n \r\nshould be \r\n \r\n```public Saga<T> ExpectNotSendLocal<TMessage>(Func<TMessage, bool> check = null)```\r\n \r\nPlease check if there are other methods that are missing the "= null".'
2019,'','Remove ReturnToSourceQueue\nUsers should use SC+ SI/SP or pure powershell\r\n\r\nRelevant docs issue: https://github.com/Particular/docs.particular.net/issues/249\r\n'
2017,'','Are we un-necessarily wrapping the QueueNotFound exception?\nSo, in \r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Behaviors/DispatchMessageToTransportBehavior.cs#L83-88\r\nwe are catching a `QueueNotFoundException` and throwing a `ConfigurationErrorsException`\r\n\r\n**Proposed Code**:\r\n```c#\r\ncatch (QueueNotFoundException ex)\r\n            {\r\n                Log.ErrorFormat("The destination queue {0} could not be found. You may have misconfigured the destination for this kind of message ({1}) " +\r\n                                "in the MessageEndpointMappings of the UnicastBusConfig section in your configuration file. " +\r\n                                "It may also be the case that the given queue just hasn\'t been created yet, or has been deleted.", ex.Queue, messageDescription);\r\n                throw;\r\n            }\r\n```\r\n\r\n@andreasohlund @johnsimons - thoughts?\r\ncc @SimonCropp '
2014,'','High cpu reported when running the distributor with 10 threads\n2-4 is usually the optimum. Let see if we can repro\r\n\r\nOriginal question on the group: https://groups.google.com/forum/#!msg/particularsoftware/bRuh8wyOSZU/ZztGZAk3d3MJ'
2013,'andreasohlund','SyncOMatic update\n'
2012,'','Remove the warning when a 4.x endpoint receives an event from a 3.x pub, when the event is an interface. \n- Relates to #1834\r\n- Refactored the MessageMetadataRegistry class. \r\n- Facilitated to remove the un-necessary warning which is displayed when a 3.x endpoint publishes an event which is an interface, where the 3.x endpoint added an __impl to the event type in the header. '
2011,'','Unify the behaviour around performance counters\nin [PerformanceCounterInitializer](https://github.com/Particular/NServiceBus/blob/7404ac1b19653461453560efca3b704cfb86b88c/src/NServiceBus.Core/Unicast/Monitoring/PerformanceCounterInitializer.cs#L64) we throw an exception if the counters are not installed, while in [ReceivePerformanceDiagnostics](https://github.com/Particular/NServiceBus/blob/7404ac1b19653461453560efca3b704cfb86b88c/src/NServiceBus.Core/Unicast/Transport/Monitoring/ReceivePerformanceDiagnostics.cs) we raise a warning. \r\n\r\nPropose we raise a warning if the counters are not required in production scenarios\r\n\r\n'
2009,'','check Threshold  for String.Empty\nfixes #1972'
2008,'','Store and reset SynchronizationContext\nfixes #2001\r\n\r\n@andreasohlund @indualagarsamy code review please'
2007,'','use BinaryFormatter InMemorySagaPersister\nSo currently `InMemorySagaPersister` uses the `JsonMessageSerializer` for doing a deep clone\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Persistence/InMemory/SagaPersister/InMemorySagaPersister.cs#L124\r\n\r\nShouldnt we be using a raw `BinaryFormatter`?\r\n\r\n * Faster\r\n * Less likely to hit serialization issues\r\n * less memory\r\n * no mixing of "message serialization" and "saga persistence" concerns.\r\n\r\nAlso the two methods exposed in `JsonMessageSerializer` that `InMemorySagaPersister` uses are not used anywhere else.'
2006,'','should the license dialog should be blocking?\nrelated to #2005 \r\n\r\nWe popup the dialog from any app. So console, form, web etc. This means the dialog cant be modal. But this is a mismatch in the blocking nature of the dialog. ie the dialog blocks thread until it is closed. If for some reason the user doesnt notice the dialog or the app (browser, console or form) opens in front, then the app will be locked until either the use notices the dialog or restarts the app\r\n\r\nSo should the license dialog be thread blocking?'
2005,'','Trial popup not visible\nWhen running [NServiceBus Azure Sample](https://github.com/Particular/NServiceBus.Azure.Samples/tree/master/VideoStore.AzureStorageQueues.Cloud) with trial license expired, no popup shows up. When running web role manually w/o Azure emulator, popup is visible. \r\n\r\nPossibly related to issue #2001.'
2004,'','NServiceBus 4.4.2 Is the posted version correct, i.e. DLL versions did not change\nWe also ran into the issue that the 4.4.2 release fixes.  I uninstalled NServiceBus 4.4 and installed 4.4.2.  From my vantage point the DLLs look the same.  The version on the files is 4.4. and when I do a binary diff on the core, host and nservice.dll they are identical.\r\n\r\nAm I missing something.  I am reluctant to go through the process of upgrading our servers and developer machines based on this.\r\n\r\nAny input you can provide would be greatly appreciated, as we have command line parameters in our console app which will not work with the temporary hack of enclosing the console app command line statement in quotes.  \r\n'
2003,'aleksandr-samila','Setup New Event Tracking for NuGet Install\nRelated #1953 \r\n\r\nGoogle Analytics is currently tracking NuGet installs incorrectly because the installer sends multiple pings to the \'configuring your machine\' URL instead of just one per machine.\r\n\r\nThe issue has been fixed by the dev team but, after the platform launch, users won\'t be able to install the entire platform via NuGet. So, instead of directing users to the \'configure your machine\' URL, successful NSB installers will be directed to:\r\n\r\nhttp://particular.net/download-the-particular-service-platform\r\n\r\nWhere they will be "encouraged" to download the entire platform.\r\n\r\nPlease add Event Tracking to the new URL and track "NuGet Installs" so it appears in the Events dashboard in Google Analytics along with website installs (MSI). Udi is only interested in seeing those two stats (no versions, no partial installs, etc.).\r\n\r\n@sfarmar @aleksandr-samila '
2002,'','Remove redundant tools\nhttps://github.com/Particular/NServiceBus/tree/develop/tools'
2001,'SimonCropp','Trial dialog corrupting SynchronizationContext\nSo when we show a windows form dialog it will set  (or overwrite) the `SynchronizationContext.Current`. This will result in callbacks being executed on `SynchronizationContext` of the dialog and not the `SynchronizationContext` of the executing process..\r\n\r\nSo the proposal for fixing this is to \r\n\r\n * store `SynchronizationContext.Current`\r\n * show license dialog\r\n * pass the stored `SynchronizationContext` back to `SynchronizationContext.SetSynchronizationContext`\r\n\r\nThoughts?'
2000,'','Improve logging of queue names on startup exceptions\nWhen and endpoint starts and fails, logging only indicates and very general error for example..The queue does not exist or you do not have sufficient permissions to perform the operation.  Full stack trace below. \r\n\r\nIn this case a customer, desk case 4156, was getting this error troubleshooting the startup on a cluster instance.   It turned out the problem was simply a missing queue.\r\n\r\nCould the logging be improved to include the name of the queue?   \r\n```\r\n2014-02-28 09:38:46,410 [5] FATAL NServiceBus.Satellites.SatelliteLauncher - Satellite NServiceBus.Distributor.DistributorSatellite, NServiceBus.Core, Version=4.2.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c failed to start.\r\nSystem.Messaging.MessageQueueException (0x80004005): The queue does not exist or you do not have sufficient permissions to perform the operation.\r\n   at System.Messaging.MessageQueue.MQCacheableInfo.get_Transactional()\r\n   at System.Messaging.MessageQueue.get_Transactional()\r\n   at NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.Start() in :line 0\r\n   at NServiceBus.Satellites.SatelliteLauncher.StartSatellite(SatelliteContext context) in :line 0\r\n```'
1998,'indualagarsamy','Removed throttling / falling back to basic licensing mode when license expires\nFixes #1991 \r\nWhen a license expires, since we continue to use the trial license (expiration date), the distributor max nodes is not affected. \r\n\r\n@andreasohlund @SimonCropp @johnsimons - please review. '
1997,'',"Fix typo 'make sure' was repeated\n"
1996,'','SyncOMatic update\n'
1995,'',"NServiceBus 4.4.1 with NHibernate: SchemaUpdate - Unsuccessful\nError report from a customer.\r\nNServiceBus 4.4.1 with NHibernate -> when the enpoint is initializing there is an error in de logfile:\r\n```\r\nERROR 2014-03-04 10:34:28,239 [1] SchemaUpdate - Unsuccessful: create index TimeoutEntity_SagaIdIdx on TimeoutEntity (SagaId)\r\nSystem.Data.SqlClient.SqlException (0x80131904): The operation failed because an index or statistics with name 'TimeoutEntity_SagaIdIdx' already exists on table 'TimeoutEntity'.\r\nat System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\nat System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\nat System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\nat System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\nat System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)\r\nat System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)\r\nat System.Data.SqlClient.SqlCommand.ExecuteNonQuery()\r\nat NHibernate.Tool.hbm2ddl.SchemaUpdate.Execute(Action`1 scriptAction, Boolean doUpdate)\r\nClientConnectionId:2d0cb57a-24e1-43dd-bbea-040434c0ca41\r\nDEBUG 2014-03-04 10:34:28,246 [1] SchemaUpdate - create index TimeoutEntity_EndpointIdx on TimeoutEntity (Time, Endpoint)\r\nERROR 2014-03-04 10:34:28,315 [1] SchemaUpdate - Unsuccessful: create index TimeoutEntity_EndpointIdx on TimeoutEntity (Time, Endpoint)\r\nSystem.Data.SqlClient.SqlException (0x80131904): The operation failed because an index or statistics with name 'TimeoutEntity_EndpointIdx' already exists on table 'TimeoutEntity'.\r\nat System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\nat System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\nat System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\nat System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\nat System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)\r\nat System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)\r\nat System.Data.SqlClient.SqlCommand.ExecuteNonQuery()\r\nat NHibernate.Tool.hbm2ddl.SchemaUpdate.Execute(Action`1 scriptAction, Boolean doUpdate)\r\nClientConnectionId:2d0cb57a-24e1-43dd-bbea-040434c0ca41\r\n```"
1994,'indualagarsamy','Implement new license behavior. Fixes #1993\nFixes #1993 \r\n\r\nRefactored some files:\r\n- renamed LicenseDowngrader to LicenseExpirationChecker and removed ExpiryChecker class.\r\n- cleaned up the unit tests, resetting the registry key. '
1993,'indualagarsamy','Implement new license behavior \nIntroduce new behaviour when no valid license is found\r\n\r\n- [x] Log a critical error on startup if no valid license is found\r\n- [x] Log a critical error for each message processed if in debug mode\r\n- [x] Set a header on audit messages only - The header will be called, `$.diagnostics.license.expired` and the value will be either  `true` or `false`\r\n- [x] The current dialog will still be shown in debug mode just like today\r\n\r\nRelates to #1991 '
1992,'',"Implementation of IScheduledTaskStorage can't really be swapped\nBecause `ScheduleTask` has an `Action` as the delegate to call at a schedule, I don't think there is much point in having `IScheduledTaskStorage` abstraction since an `Action` cannot be serialized and I can't come up with other implementations apart from the current default implementation (`InMemoryScheduledTaskStorage`).\r\n\r\n@andreasohlund @SimonCropp @indualagarsamy do you see a reason to keep this abstraction around?\r\n"
1991,'indualagarsamy','Change unlicensed behaviour to be even more safe for production\n## Relax current behaviour\r\n\r\n- [x] Remove the 1 msg/s throttling\r\n- [x] Remove the MaxWorkerNodes limitation from the distributor (please confirm @udidahan )\r\n\r\n## Introduce new behaviour when no valid license is found\r\nRelates to #1993 \r\n'
1990,'','Update ScheduledTask.cs\nIn order to support TaskSchedulerPersistency other then to InMemoery there is a need for the ScheduledTask to be serialazable for binary formatter to be able to persist it to storage other then the build in InMemory storage'
1989,'','Performance is slow while debugger is attached\n--\r\n\r\nI\'m experiencing very slow performance when I\'m running a NSB 4 host while the debugger is attached. \r\n\r\nA bus.Publish takes around 100ms to complete, using inmemory subscription storage. A message handler takes about 80-90ms. If I detach the debugger the times go down to about 0-1ms. As soon as I attach a debugger again it slows down again.\r\n\r\nAFAIK, I don\'t get the same behavior using NSB 3 and earlier.\r\n\r\nI\'m using VS2013 on a Win 8.1 machine. \r\nThere are no breakpoints set. \r\n"Enable Just my code" is checked.\r\n\r\nmsvsmon uses a lot of cpu while the process runs.\r\n\r\nAlso, if I put a message on a queue, it takes several seconds before the first message is handled, even if the process is "warmed" up.'
1988,'SimonCropp','Self hosting DefineEndpointName not respected when the transport is MSMQ\nI\'m self hosting the bus in a Console Application and if I use "DefineEndpointName" the name is not respected if the Transport is MSMQ.\r\nFor example using DefineEndpointName( "My" ) creates the followin queues:\r\n\r\nMy.timeouts\r\nMy.timeoutsdispatcher\r\nConsoleApplication1\r\n\r\nif I change the transport to Azure, for example, leaving all the rest of the code unchanged queues are created as expected.\r\n\r\n.m'
1987,'','SyncOMatic update\n'
1986,'','SyncOMatic update\n'
1985,'','Set the correct host id and displayname if running as a windows service\nModify the NSB host to detect if running as a winservice and generate the host id as Guid(Machine+ServiceName)\r\n\r\nAlso set the display name to {servicename}-{machine}'
1984,'','For sagas with a single IAmStartedByMessages we can skip the Load saga\nWe can add a performance improvement to the Sagas.\r\n\r\nSo the trick is to check if the saga only implements **one** `IAmStartedByMessages` and if it does then skip the attempt to load the saga because we know we want to start a new saga instance.'
1983,'','Obsolete IBus.InMemory\nSee https://github.com/Particular/NServiceBus/issues/2084 for parent issue'
1982,'','NServiceBus, using Azure storage, and object as property on SagaData causes problem...\nUsing NServiceBus 4.4.1, with azure storage and not raven. \r\n\r\nWhat I did:\r\n\r\nWhen defining a saga, I added an object "User" as a property of my ContainSagaData entity.\r\n\r\n\r\npublic class MySaga:ContainSagaData\r\n{\r\npublic string MyUserId {get;set;}\r\npublic User MyUser {get;set;}\r\n}\r\n\r\nWhen executed, it appears to fail silently and is in an endless loop of retries (Bypasses maximum retries , which I have set to 3.)\r\n\r\nIt wasn\'t until I ran it in the debugger and looked at the trace output did I find the problem (note no exceptions were generated in the debugger).\r\n\r\nA first chance exception of type \'System.AggregateException\' occurred in NServiceBus.Core.dll\r\nNServiceBus.Host.exe Information: 0 : Failed to process message\r\nNServiceBus.Host.exe Information: 0 : System.NotSupportedException: The property type \'User\' is not supported in windows azure table storage\r\n   at NServiceBus.SagaPersisters.Azure.AzureSagaPersister.ToDictionaryTableEntity(Object entity, String partitionKey, String rowkey, IEnumerable`1 properties) in c:\\BuildAgent\\work\\ba77a0c29cee2af1\\src\\NServiceBus.Azure\\SagaPersisters\\Azure\\AzureSagaPersister.cs:line 202\r\n   at NServiceBus.SagaPersisters.Azure.AzureSagaPersister.AddObjectToBatch(TableBatchOperation batch, Object entity, String partitionKey, String rowkey) in c:\\BuildAgent\\work\\ba77a0c29cee2af1\\src\\NServiceBus.Azure\\SagaPersisters\\Azure\\AzureSagaPersister.cs:line 189\r\n   at NServiceBus.SagaPersisters.Azure.AzureSagaPersister.Persist(IContainSagaData saga) in c:\\BuildAgent\\work\\ba77a0c29cee2af1\\src\\NServiceBus.Azure\\SagaPersisters\\Azure\\AzureSagaPersister.cs:line 178\r\n   at NServiceBus.SagaPersisters.Azure.AzureSagaPersister.Save(IContainSagaData saga) in c:\\BuildAgent\\work\\ba77a0c29cee2af1\\src\\NServiceBus.Azure\\SagaPersisters\\Azure\\AzureSagaPersister.cs:line 41\r\n   at NServiceBus.Sagas.SagaPersistenceBehavior.Invoke(HandlerInvocationContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Sagas\\SagaPersistenceBehavior.cs:line 94\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Sagas.AuditInvokedSagaBehavior.Invoke(HandlerInvocationContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Sagas\\AuditInvokedSagaBehavior.cs:line 18\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Unicast.Behaviors.SetCurrentMessageBeingHandledBehavior.Invoke(HandlerInvocationContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\SetCurrentMessageBeingHandledBehavior.cs:line 21\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 25\r\n   at NServiceBus.Pipeline.PipelineExecutor.Execute[T](BehaviorChain`1 pipelineAction, T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 137\r\n   at NServiceBus.Pipeline.PipelineExecutor.InvokeHandlerPipeline(MessageHandler handler) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 71\r\n   at NServiceBus.Unicast.Behaviors.LoadHandlersBehavior.Invoke(ReceiveLogicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\LoadHandlersBehavior.cs:line 45\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.DataBus.DataBusReceiveBehavior.Invoke(ReceiveLogicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\DataBus\\DataBusReceiveBehavior.cs:line 69\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Pipeline.MessageMutator.ApplyIncomingMessageMutatorsBehavior.Invoke(ReceiveLogicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\MessageMutator\\ApplyIncomingMessageMutatorsBehavior.cs:line 26\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 25\r\n   at NServiceBus.Pipeline.PipelineExecutor.Execute[T](BehaviorChain`1 pipelineAction, T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 137\r\n   at NServiceBus.Pipeline.PipelineExecutor.InvokeLogicalMessagePipeline(LogicalMessage message) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineExecutor.cs:line 61\r\n   at NServiceBus.Unicast.Messages.ExecuteLogicalMessagesBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Messages\\ExecuteLogicalMessagesBehavior.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Unicast.Behaviors.CallbackInvocationBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\CallbackInvocationBehavior.cs:line 27\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Unicast.Messages.ExtractLogicalMessagesBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Messages\\ExtractLogicalMessagesBehavior.cs:line 59\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Sagas.RemoveIncomingHeadersBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Sagas\\RemoveIncomingHeadersBehavior.cs:line 24\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.Unicast.Behaviors.RaiseMessageReceivedBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\RaiseMessageReceivedBehavior.cs:line 19\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.MessageMutator.ApplyIncomingTransportMessageMutatorsBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\MessageMutator\\ApplyIncomingTransportMessageMutatorsBehavior.cs:line 23\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 39\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 38\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\UnitOfWork\\UnitOfWorkBehavior.cs:line 24\r\nNServiceBus.Host.exe Information: 0 : Polling for timeouts at 02/27/2014 11:23:55.\r\n\r\nSo it\'s obvious that Azure cannot store the saga data to it\'s storage tables, which I have changed, but thought I would the fact it was failing in an endless loop of retries.\r\n\r\n'
1981,'','NServiceBus, using Azure storage, and object as property on SagaData causes problem...\nUsing NServiceBus 4.4.1, with azure storage and not raven.\r\n\r\nWhat I did:\r\n\r\nWhen defining a saga, I added an object "User" as a property of my ContainSagaData entity.\r\npublic class MySaga:ContainSagaData\r\n{\r\n\r\n}\r\n\r\n'
1980,'','IMutateIncomingMessages not taken into account when handling messages\nHooked up a custom Mutator through IMutateIncomingMessages, which updates a property on the message (everything is fine so far). Now, when it gets to the handler, the old (not mutated) message is processed.\r\n\r\nIncoming mutators work for us in v4.1.1 and broke after updating to v4.4.1 (not sure about the version in between).\r\n\r\nThe mutator returns a new instance of the message based on the original one.'
1979,'yvesgoeleven','Subscriptions pointing to wrong queue when local address is overriden\nThey point to the endpointname instead of the override. It was caused by logic related to the distributor that always changed the replyto header of subscription messages to the endpoint name.\r\nRelates to #1925\r\n\r\nIt was discovered by investigating a windows azure related issue:  https://github.com/Particular/NServiceBus.Azure/issues/122 '
1978,'','SyncOMatic update\n'
1977,'yvesgoeleven','Add unit test for host information\nessential test the bug that was fixed by this commit\r\nhttps://github.com/Particular/NServiceBus/commit/6678625d000bef35ff6ccb3f210efec17f72d2bb'
1976,'','IBus.OutgoingHeaders updates can cause InvalidOperationException\nChange `IBus.OutgoingHeaders` to a `ConcurrentDictionary`\r\n\r\n--\r\n\r\nBecause the framework allows a user to modify `IBus.OutgoingHeaders` during runtime and those headers are global, an InvalidOperationException (Collection was modified; enumeration operation may not execute.) can be thrown during enumeration of those headers dictionary.\r\n\r\nSo a possible solution is to make a copy of the dictionary every time before enumerating it.\r\n\r\nThe code in question is https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Behaviors/CreatePhysicalMessageBehavior.cs#L37'
1973,'','Use Raven native id assignment to improve saga inserts perf\n### Description\r\n\r\nAs part of fine tuning SC to handle a high volume of messages we have identified a bottleneck on our ravenDB saga persistence.\r\n\r\nThe issue is that **we** auto gen our own docs ids and those ids are not the ideal for Raven inserts, which causes the insertions to get slower as the data grows.\r\n\r\nSo the solution is to let Raven auto gen its own ids using HiLo.\r\n\r\n### Implementation\r\n\r\nLooking at the current code base, one way I see us moving forward with this is to have a in-memory mapping of `NSB id <-> Raven id`.\r\nSo when we instantiate `RavenSagaPersister` we perform a query to initialize this in-memory mapping and then we keep it up to date on all inserts/deletes\r\nThis would be actually quite simple to spike?\r\n\r\n@andreasohlund thoughts?\r\n\r\n\r\n'
1972,'','log4net.Core.Level.ToString not found\nIf you configure your endpoint to use log4net like this:\r\n\r\n            XmlConfigurator.Configure();\r\n            Configure.With()\r\n                .Log4Net()\r\n                .AutofacBuilder(container)\r\n                .FileShareDataBus(BasePath)\r\n                .RavenSubscriptionStorage()\r\n                .UseRavenTimeoutPersister()\r\n                .UnicastBus();\r\n\r\nAnd you have a NServiceBus.Config.Logging configSection defined (but not used):\r\n```xml\r\n<section name="Logging" type="NServiceBus.Config.Logging, NServiceBus.Core" />\r\n```\r\n\r\nYou will get an exception like this:\r\n```\r\nUnhandled Exception: System.MissingFieldException: Field \'log4net.Core.Level.ToString\' not found.\r\n   at System.RuntimeType.InvokeMember(String name, BindingFlags bindingFlags, Binder binder, Object target, Object[] providedArgs, ParameterModifier[] modifiers\r\n, CultureInfo culture, String[] namedParams)\r\n   at NServiceBus.Logging.Internal.ReflectionExtensions.GetStaticField(Type type\r\n, String fieldName, Boolean ignoreCase) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Logging\\Internal\\ReflectionExtensions.cs:line 26\r\n   at NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetConfigurator.Configure(Object appenderForNServiceBusToLogTo, String thresholdForNServiceBusToLogWith) in\r\n y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Logging\\Loggers\\Log4NetAdapter\\Log4NetConfigurator.cs:line 40\r\n   at NServiceBus.SetLoggingLibrary.Log4Net(Configure config, Object appenderSkeleton) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\SetLoggingLibrary.cs:line 55\r\n   at NServiceBus.Hosting.Windows.LoggingHandlers.ProductionLoggingHandler.NServiceBus.IConfigureLogging.Configure(IConfigureThisEndpoint specifier) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Hosting.Windows\\LoggingHandlers\\Prod\r\nuctionLoggingHandler.cs:line 23\r\n   at NServiceBus.Hosting.GenericHost.PerformConfiguration() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 117\r\n   at NServiceBus.Hosting.GenericHost.Start() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 67\r\n   at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event,\r\n Object parameter) in :line 0   at NServiceBus.Hosting.Windows.Program.Main(String[] args) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Hosting.Window\r\n```'
1971,'','RavenDB ResourceManagerId collision\nGiven the following thread in the Goggle Group: https://groups.google.com/forum/#!msg/particularsoftware/gd8YR0aF2Xs/ZTMAeJe9qMwJ\r\nwhat can happen is that if 2 or more RavenDB server are involved in the same transaction, distributed transaction, the transaction fails due to the fact that all the servers tries to register with the DTC using the same resource manager identifier.\r\n\r\nCould be interesting, if possibile, at least for our RavenDB installation change the default identifier so to reduce the possibility of a collision.\r\n\r\nComments?\r\n.m'
1970,'','Gateway: Channels not resolved through ioc\nActivator.CreateInstance is used to create channel receivers and senders, which makes injection of infrastructure harder'
1969,'','Gateway: Receiver registration does not take ChannelTypeAttribute into account\nSender does, but receiver does not'
1968,'andreasohlund','Make sure that the release data we stamp assemblies with is stable per Major.Minor\nIn order to be able to provide hotfixes for older versions we need to keep the date stable within the same Major.Minor (ie use the date of the first release).\r\n\r\nThis will be solved by this GFV feature:\r\n\r\nhttps://github.com/Particular/GitFlowVersion/issues/84'
1967,'',"When disconnecting workers from distributor add logging to both distributor and worker.\nI am investigating the new feature in  pull request https://github.com/Particular/NServiceBus/pull/1743.   The cmdlet works as designed it would seem.  However, it doesn't log anything in the distributor or the worker when it is disconnected but just silently stops the worker from participating.  This can be confusing as the service remains running but just doesn't process any messages.  \r\n\r\n\r\n"
1966,'',"In distributor situation, errant direct messages to worker cause extry ready message buildup in distributor\nCustomer pointed out that they were running a distributor with N workers.  A configuration error was causing excessive ready messages... many hundreds in some cases.  This had the effect of bringing down workers endpoint do to storage issues.   \r\n\r\nTurns out in this case what caused it was a configuration error that had senders accidentally sending messages to workers directly... not through the distributor as they should have.  The workers sent ready messages to the distributor for more work leading to a snowball effect of sorts.  \r\n\r\nNot sure I'd call this a bug but would it make sense to safeguard against this behavior?  Perhaps messages not from the distributor could cause a warning or exception and the storage queue could enforce some unique constraint by worker and throw and exceptions?  \r\n\r\nThe desk case number for this was 3968.  Customer was on 4.04.  "
1965,'',"Provide icon to NServiceBus.Host.exe\nIt would be nice if you setup application icon in nservicebus.host.exe. This icon could simplify recognizing if this app on my task bar is `nservicebus.host.exe` or maybe `ConsoleApplication11.exe`. The same when I'm looking for `nservicebus.host.exe` in windows explorer."
1964,'yvesgoeleven',"Failure to configure bus from command line application\nI have a simple console application that configures a bus (MSMQ) and sends a single message. Between version 4.3.4 and 4.4.0 the application has stopped working with the exception in the stack trace below.\r\n\r\nNote that this only happens when running from a command window. It does not happen when running from visual studio (using host process or not). In both cases I am running in a non-elevated context.\r\n\r\nIn case it is down to user error, here is the guts of the bus configuration code that is failing:\r\n\r\n```C#\r\nConfigure.Serialization.Xml();\r\nbus = Configure.With()\r\n    .Log4Net()\r\n    .DefaultBuilder()\r\n    .UseTransport<Msmq>()\r\n    .UnicastBus()\r\n    .SendOnly();\r\n```\r\n\r\nHere is the exception:\r\n\r\n```\r\nUnhandled Exception: Autofac.Core.DependencyResolutionException: An exception was thrown while invoking the constructor 'Void .ctor()' on type 'UnicastBus'. ---> Index was outside the bounds of the array. (See inner exception for details.) ---> System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at NServiceBus.Unicast.UnicastBus..ctor() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 41\r\n   at lambda_method(Closure , Object[] )\r\n   at Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Instantiate() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   --- End of inner exception stack trace ---\r\n   at Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Instantiate() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Activators.Reflection.ReflectionActivator.ActivateInstance(IComponentContext context, IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(Guid id, Func`1 creator) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Resolving.InstanceLookup.Execute() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.ResolutionExtensions.ResolveService(IComponentContext context, Service service, IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Activators.Reflection.AutowiringPropertyInjector.InjectProperties(IComponentContext context, Object instance, Boolean overrideSetValues) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Registration.ComponentRegistration.RaiseActivating(IComponentContext context, IEnumerable`1 parameters, Object& instance) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Resolving.InstanceLookup.Execute() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Autofac.Features.Collections.CollectionRegistrationSource.<>c__DisplayClass4.<RegistrationsFor>b__0(IComponentContext c, IEnumerable`1 p) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Activators.Delegate.DelegateActivator.ActivateInstance(IComponentContext context, IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Resolving.InstanceLookup.Execute() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.Core.Resolving.ResolveOperation.Execute(IComponentRegistration registration, IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at Autofac.ResolutionExtensions.ResolveService(IComponentContext context, Service service, IEnumerable`1 parameters) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Scheduling\\ScheduledTask.cs:line 0\r\n   at NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.ResolveAll(IComponentContext container, Type componentType) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\ObjectBuilder\\Autofac\\AutofacObjectBuilder.cs:line 192\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.BuildAll[T]() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\ObjectBuilder\\Common\\CommonObjectBuilder.cs:line 179\r\n   at NServiceBus.Configure.Initialize() in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Configure.cs:line 368\r\n   at NServiceBus.ConfigureExtensions.SendOnly(Configure config) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Config\\ConfigureExtensions.cs:line 19\r\n   at DtcTest1.Program.CreateBus() in c:\\dev\\src\\DtcTest1\\DtcTest1\\Program.cs:line 19\r\n   at DtcTest1.Program.Main(String[] args) in c:\\dev\\src\\DtcTest1\\DtcTest1\\Program.cs:line 32\r\n```"
1962,'','NServiceBus Gateway: ServicePointManager\nDoes the gateway take into account http connection limitations?\r\n\r\n<http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.defaultconnectionlimit.aspx>\r\n\r\nSince we expose a http endpoint: “The maximum number of concurrent connections allowed by a ServicePoint <http://msdn.microsoft.com/en-us/library/system.net.servicepoint.aspx> object. The default value is 2.”\r\n\r\nCan this be a bootleneck for the gateway or it is already taken into account and handled?\r\n\r\n.m'
1961,'','Send with no message mappings results in NullRefException\n```\r\nSystem.NullReferenceException occurred\r\n  HResult=-2147467261\r\n  Message=Object reference not set to an instance of an object.\r\n  Source=NServiceBus.Core\r\n  StackTrace:\r\n       at NServiceBus.Transports.Msmq.MsmqUtilities.GetFullPath(Address value) in \r\nc:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqUtilities.cs:line 27\r\n  InnerException: \r\n```\r\nWe need a better error message'
1960,'','Configure.Instance.UnicastBus().ForwardReceivedMessagesTo("FooBar"); throws exception\nThe following code throws:\r\n```\r\nSystem.ArgumentException was unhandled by user code\r\n  HResult=-2147024809\r\n  Message=Object of type \'System.String\' cannot be converted to type \'NServiceBus.Address\'.\r\n  Source=mscorlib\r\n  StackTrace:\r\n       at System.RuntimeType.TryChangeType(Object value, Binder binder, CultureInfo culture, Boolean needsSpecialCast)\r\n       at System.Reflection.MethodBase.CheckArguments(Object[] parameters, Binder binder, BindingFlags invokeAttr, CultureInfo culture, Signature sig)\r\n       at System.Reflection.RuntimeMethodInfo.InvokeArgumentsCheck(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n       at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n       at System.Reflection.RuntimePropertyInfo.SetValue(Object obj, Object value, Object[] index)\r\n       at NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.SetPropertyValue(Object instance, String propertyName, Object value) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\ObjectBuilder\\Autofac\\AutofacObjectBuilder.cs:line 145\r\n       at NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.<>c__DisplayClass4.<ConfigureProperty>b__3(Object sender, ActivatingEventArgs`1 e) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\ObjectBuilder\\Autofac\\AutofacObjectBuilder.cs:line 117\r\n       at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\n       at Autofac.Core.Registration.ComponentRegistration.RaiseActivating(IComponentContext context, IEnumerable`1 parameters, Object& instance) in y:\\B....\r\n```\r\n\r\n```c#\r\nclass Foo: INeedInitialization\r\n{\r\n    public void Init()\r\n    {\r\n        Configure.Instance.UnicastBus().ForwardReceivedMessagesTo("FooBar");\r\n    }\r\n}\r\n```'
1959,'',"Use a Func<> instead of Expression when mapping message to saga. #943\nThis a proposal for #943.\r\n\r\nAll tests in NServiceBus.Core.Tests pass. I haven't tested it live yet though.\r\n\r\nWhat do you think?"
1958,'','Allow to specify execution order for INeedInitialization implementations\n'
1956,'','When upgrading the NServiceBus.Host nuget it hacks the app.config\n* using the fluent API and have NSB things in the app.config \r\n* upgrade NServiceBus.Host\r\n* result is lots of NSB config in my app.config that conflicts with my fluent config effectively breaking my solution.\r\n\r\nNServiceBus.Host should not hack app.config on a nuget upgrade'
1955,'','Move IHost and GenericHost into NServiceBus.Hosting.Windows\nSince nothing uses them in the core it makes not sense keeping it there '
1954,'','Document mandatory headers for transport interop\nI think it would be good to document the mandatory headers for NServiceBus in order to properly interop with NSB. For example if you send a message with RabbitMQ without any headers but proper content nothing happens. For example here is a fairly primitive java application which publishes a message to a fanout exchange in Rabbit:\r\n\r\n````\r\npackage ch.danielmarbach.rabbitmq2nservicebus;\r\n\r\nimport java.io.IOException;\r\nimport java.util.UUID;\r\n\r\nimport com.rabbitmq.client.AMQP;\r\nimport com.rabbitmq.client.AMQP.BasicProperties;\r\nimport com.rabbitmq.client.Channel;\r\nimport com.rabbitmq.client.Connection;\r\nimport com.rabbitmq.client.ConnectionFactory;\r\n\r\npublic class WarehouseRaid implements Runnable {\r\n\tprivate volatile boolean run = true;\r\n\tprivate final static String QUEUE_NAME = "Earth.Native";\r\n\tprivate final static String EXCHANGE_NAME = "Messages.Events:PoliceOfficerDied";\r\n\r\n\t@Override\r\n\tpublic void run() {\r\n\t\tConnection connection = null;\r\n\t\tChannel channel = null;\r\n\t\ttry {\r\n\t\t\tConnectionFactory factory = new ConnectionFactory();\r\n\t\t\tfactory.setUri("amqp://brokers:5672");\r\n\r\n\t\t\tconnection = factory.newConnection();\r\n\t\t\tchannel = connection.createChannel();\r\n\r\n\t\t\tchannel.queueDeclare(QUEUE_NAME, false, false, false, null);\r\n\t\t\tchannel.exchangeDeclare(EXCHANGE_NAME, "fanout", true);\r\n\t\t\tchannel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "");\r\n\r\n\t\t\tint numberOfOfficers = 1;\r\n\r\n\t\t\twhile (run) {\r\n\t\t\t\tBasicProperties props = new AMQP.BasicProperties().builder()\r\n\t\t\t\t\t\t.messageId(UUID.randomUUID().toString()).build();\r\n\r\n\t\t\t\tString message = String\r\n\t\t\t\t\t\t.format("<?xml version=\\"1.0\\" ?>"\r\n\t\t\t\t\t\t\t\t+ "<PoliceOfficerDied xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns=\\"http://tempuri.net/Messages.Events\\">"\r\n\t\t\t\t\t\t\t\t+ "<Identification>%s</Identification>"\r\n\t\t\t\t\t\t\t\t+ "<Name>Nick Walker the %sth</Name>"\r\n\t\t\t\t\t\t\t\t+ "</PoliceOfficerDied>", UUID.randomUUID()\r\n\t\t\t\t\t\t\t\t.toString(), numberOfOfficers++);\r\n\r\n\t\t\t\tchannel.basicPublish(EXCHANGE_NAME, "", props,\r\n\t\t\t\t\t\tmessage.getBytes());\r\n\r\n\t\t\t\tThread.sleep(5000);\r\n\t\t\t}\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\tSystem.err.println("WarehouseRaid thread caught exception: " + e);\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(1);\r\n\t\t} finally {\r\n\t\t\ttry {\r\n\t\t\t\tchannel.close();\r\n\t\t\t\tconnection.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void abort() {\r\n\t\trun = false;\r\n\t}\r\n\r\n}\r\n````\r\nIt gets properly "fanedout" to all queues but not consumed by the NSB endpoint.\r\n\r\nI wasn\'t sure where to raise the issue because I have only had this issue yet with Rabbit. But I think it would be good to have for each non MSMQ transport the required headers documented. '
1953,'andreasohlund','Improve the experience for first time users installing NServiceBus via NuGet\nThis only applies to new users. If we detect that NServiceBus/the platform is already installed on their machine we do nothing. Existing installs can be detected in 2 ways:\r\n\r\n1. The ["MachinePrepared"]( https://github.com/Particular/NServiceBus/blob/77c1b837b2b08898268fddda0ef235e4aa7f8961/packaging/nuget/tools/init.ps1#L19) regkey\r\n2. The platform installer hasn\'t been installed (will be introduced when the PI is ready - TBD sync with the PI specs)\r\n\r\n## Scenarios\r\n\r\n### New user joining an existing team opening up the solution for the first time\r\ninit.ps1 will detect this and pop this page in the vs browser:\r\nhttp://particular.net/download-the-particular-service-platform?version={nservicebus version}\r\n\r\n### New user opening up a downloaded sample\r\ninit.ps1 will detect that this and pop this page in the vs browser:\r\nhttp://particular.net/download-the-particular-service-platform?version={nservicebus version}&sample={name of sample}\r\n\r\n* Name of the sample will be parsed from the path.\r\n\r\n### New user installing NServiceBus into a fresh solution\r\n`install.ps1` will detect this and pop this page in the vs browser:\r\nhttp://particular.net/download-the-particular-service-platform?version={nservicebus version}?install=true\r\n\r\n## Notes\r\n\r\n* init.ps1 will only be invoked if the package manager console is loaded (which I think is the default in vs2013)  - https://connect.microsoft.com/VisualStudio/feedback/details/762468/nuget-doesnt-run-init-ps1-script-when-opening-solution\r\n\r\n* Note that the "MachinePrepared" key is written [once per major minor](https://github.com/Particular/NServiceBus/blob/77c1b837b2b08898268fddda0ef235e4aa7f8961/packaging/nuget/tools/init.ps1#L28), We should change that to be once per machine {TBD - new issue}'
1952,'','Disposing Castle Windsor Container results in "NServiceBus. Cannot access a disposed object." error\nWhen disposing the windsor container that NServiceBus used, the following exception gets thrown:\r\nSystem.ObjectDisposedException : Cannot access a disposed object.\r\nObject name: \'TransportReceiver\'.\r\n\r\nIn order to reproduce please have a look at this gist.\r\nhttps://gist.github.com/bholdt/8839622\r\n\r\nStack Trace:\r\n```\r\nat NServiceBus.Unicast.Transport.TransportReceiver.Stop() in TransportReceiver.cs: line 233\r\nat NServiceBus.Unicast.UnicastBus.InnerShutdown() in UnicastBus.cs: line 959\r\nat NServiceBus.Unicast.UnicastBus.Dispose() in InitMessageAuditer.cs: line 0\r\nat Castle.MicroKernel.ComponentActivator.AbstractComponentActivator.ApplyConcerns(IEnumerable`1 steps, Object instance)\r\nat Castle.MicroKernel.ComponentActivator.AbstractComponentActivator.Destroy(Object instance)\r\nat Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.Release(Object instance)\r\nat Castle.MicroKernel.Burden.Release()\r\nat Castle.MicroKernel.Lifestyle.SingletonLifestyleManager.Dispose()\r\nat Castle.MicroKernel.DefaultKernel.DisposeHandlers()\r\nat Castle.MicroKernel.DefaultKernel.Dispose()\r\n```'
1951,'','`get-help about_NServiceBus` fails\n```\r\nPM> get-help about_NServiceBus\r\nget-help : Get-Help could not find about_NServiceBus in a help file in this \r\nsession. To download updated help topics type: "Update-Help". To get help online, \r\nsearch for the help topic in the TechNet library at \r\nhttp://go.microsoft.com/fwlink/?LinkID=107116.\r\nAt line:1 char:1\r\n+ get-help about_NServiceBus\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ResourceUnavailable: (:) [Get-Help], HelpNotFoundException\r\n    + FullyQualifiedErrorId : HelpNotFound,Microsoft.PowerShell.Commands.GetHelpCommand\r\n ```'
1950,'',"Too much noise in the `Package Manager Console` \nSo I am using different versions of NSB in various projects. Whenever i open the `Package Manager Console`  i get all these lines\r\n\r\n```\r\n\r\nType 'get-help about_NServiceBus' to see all available NServiceBus commands.\r\n\r\nType 'get-help about_NServiceBus' to see all available NServiceBus commands.\r\n\r\n\r\nType 'get-help about_NServiceBus' to see all available NServiceBus commands.\r\n\r\n\r\nType 'get-help about_NServiceBus' to see all available NServiceBus commands.\r\n\r\n\r\nType 'get-help about_NServiceBus' to see all available NServiceBus commands.\r\n\r\n\r\nType 'get-help about_NServiceBus' to see all available NServiceBus commands.\r\n```\r\n\r\nMore annoying than helpful if you ask me."
1949,'',"Split TransportConnection/Transaction from StorageConnection/Transaction\nTo support certain no-DTC scenario's, we need to be able to control the scope of the transport connection & transaction from the ones used for storage.\r\n\r\nWith DTC = current behavior\r\nNo DTC, single connection = same transaction, different connection scope\r\nNo DTC, outbox = different transactions (Required, Suppress, New), different connection scope\r\nNo Tx = current behavior"
1948,'','Do not configure logging if already configured.\nThe default logging handlers inside the host are run last. So, if you implement your own logging handler, any configuration you do will be overridden by the default.\r\n\r\nThis fix adds a check to see if any logging framework has already been configured. If yes, the default handler will do nothing.\r\n\r\n'
1947,'','Exceptions during startup is no longer logged in 4.3.0\nIf you use the regular host and an exception is thrown in either IWantCustomInitialization or INeedInitialization (and probably others), no error is logged. Instead, the service just dies with no indication of what the error was. This makes it quite difficult to troubleshoot errors when the host runs as a service.\r\n\r\nThis used to be logged as a fatal error in NSB 3.3.'
1946,'','Improve exceptions when sagas don\'t implement necessary IHandleTimeouts<T>\nWhen I\'m writing a saga that requests timeouts, I may forget to implement the corresponding ```IHandleTimeouts<T>``` interface. When this happens, the exception that is raised happens at timeout expiry and makes it difficult for me to understand what I did wrong. \r\n\r\nI would like a descriptive exception to be thrown at the time **when I request the timeout** - something with a message like: "You have requested a timeout containing the type {type} but your saga {saga type} doesn\'t implement IHandleTimeouts<{type}> which is necessary for the timeout to be dispatched back to your saga."\r\n\r\n'
1945,'','Clean up "Receive channel started" log entry\nThe tostring of this https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Gateway/Channels/Channel.cs#L12\r\n\r\nresults in this being logged\r\n```\r\n2014-02-04 17:13:19,645 [12] INFO  NServiceBus.Gateway.Receiving.GatewayReceiver [(null)] <(null)> - Receive channel started: \r\nhttp,http://localhost:25894/subtractminor/NumberOfWorkerThreads=1Default=True\r\n```\r\n\r\nWe should format that a little better'
1944,'','Minimum `TimeToBeReceived` is applied to all message when doing a multi-message send\nSo here https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Behaviors/CreatePhysicalMessageBehavior.cs#L50 we do this \r\n\r\n    toSend.TimeToBeReceived = messageDefinitions.Min(md => md.TimeToBeReceived);\r\n\r\nEffectively taking the minimum `TimeToBeReceived` for all messages being "group" sent and apply it to all messages.\r\n\r\nI would consider this a bug. If `TimeToBeReceived` is a "message level feature" and not a  "transaction level feature" then we should respect it at the message level and not make assumptions about the users intent.\r\n\r\nIf we decide this is by deign then it needs to be documented. '
1943,'johnsimons','Cant Send in 4.2 and Return in 3.x\nWhen a 3.X endpoint does a `Bus.Return` that targets a 4.2.0 endpoint the v4 endpoint can\'t process the message. This makes it wire incompatible.\r\n\r\n\r\nrepro https://github.com/Particular/BugsRepro/tree/master/1943MissingCompletionMessage\r\n\r\nSo in a 4.2 endpoint \r\n\r\n```\r\nBus.Send("Returner", new Message())\r\n  .Register<int>(i => Debug.WriteLine(i));\r\n```\r\n\r\nand in a  3.3.8 endpoint\r\n\r\n        public void Handle(Message message)\r\n        {\r\n            Bus.Return(5);\r\n        }\r\n\r\nresults in \r\n\r\n```\r\nSystem.TypeLoadException occurred\r\n  HResult=-2146233054\r\n  Message=Could not determine type for node: \'CompletionMessage\'.\r\n  Source=NServiceBus.Core\r\n  TypeName=""\r\n  StackTrace:\r\n       at NServiceBus.Serializers.XML.XmlMessageSerializer.InferNodeType(XmlNode node, Object parent) in :line 0\r\n  InnerException: \r\n```\r\n\r\nwhich then bubbles\r\n```\r\nSystem.Runtime.Serialization.SerializationException occurred\r\n  HResult=-2146233076\r\n  Message=An error occurred while attempting to extract logical messages from transport message NServiceBus.TransportMessage\r\n  Source=NServiceBus.Core\r\n  StackTrace:\r\n       at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n  InnerException: System.TypeLoadException\r\n       HResult=-2146233054\r\n       Message=Could not determine type for node: \'CompletionMessage\'.\r\n       Source=NServiceBus.Core\r\n       TypeName=""\r\n       StackTrace:\r\n            at NServiceBus.Serializers.XML.XmlMessageSerializer.InferNodeType(XmlNode node, Object parent) in :line 0\r\n            at NServiceBus.Serializers.XML.XmlMessageSerializer.Process(XmlNode node, Object parent, Type nodeType) in :line 0\r\n            at NServiceBus.Serializers.XML.XmlMessageSerializer.Deserialize(Stream stream, IList`1 messageTypesToDeserialize) in :line 0\r\n            at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Extract(TransportMessage m) in :line 0\r\n            at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n       InnerException: \r\n```\r\n\r\nAlso if we switch to the Json serializer we get \r\n```\r\nCould not find type \'NServiceBus.Unicast.Transport.CompletionMessage\' in assembly \r\n\'NServiceBus.Core, Version=4.2.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\'.\r\n```'
1940,'synhershko','Better error message when we cant contact storage\nSo here https://groups.google.com/forum/#!topic/particularsoftware/vp-xLuk3AyE a user was running a sample and got\r\n\r\n```\r\nStacktrace:   at System.Net.HttpWebRequest.GetResponse()\r\nat Raven.Client.Connection.HttpJsonRequest.ReadJsonInternal(Func`1 getResponse) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonRequest.cs:line 341\r\nat Raven.Client.Connection.HttpJsonRequest.ReadResponseJson() in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonRequest.cs:line 239\r\nat Raven.Client.Connection.ServerClient.DirectQuery(String index, IndexQuery query, String operationUrl, String[] includes, Boolean metadataOnly, Boolean includeEntries) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.cs:line 957\r\nat Raven.Client.Connection.ServerClient.<>c__DisplayClass53.<Query>b__52(String u) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.cs:line 917\r\nat Raven.Client.Connection.ReplicationInformer.TryOperation[T](Func`2 operation, String operationUrl, Boolean avoidThrowing, T& result) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ReplicationInformer.cs:line 559\r\nat Raven.Client.Connection.ReplicationInformer.ExecuteWithReplication[T](String method, String primaryUrl, Int32 currentRequest, Int32 currentReadStripingBase, Func`2 operation) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ReplicationInformer.cs:line 525\r\nat Raven.Client.Connection.ServerClient.ExecuteWithReplication[T](String method, Func`2 operation) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.cs:line 174\r\nat Raven.Client.Connection.ServerClient.Query(String index, IndexQuery query, String[] includes, Boolean metadataOnly, Boolean indexEntriesOnly) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.cs:line 917\r\nat Raven.Client.Document.AbstractDocumentQuery`2.ExecuteActualQuery() in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Document\\AbstractDocumentQuery.cs:line 535\r\nat Raven.Client.Document.AbstractDocumentQuery`2.InitSync() in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Document\\AbstractDocumentQuery.cs:line 518\r\nat Raven.Client.Document.AbstractDocumentQuery`2.get_QueryResult() in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Document\\AbstractDocumentQuery.cs:line 505\r\nat Raven.Client.Linq.RavenQueryProviderProcessor`1.ExecuteQuery[TProjection]() in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Linq\\RavenQueryProviderProcessor.cs:line 1425\r\nat Raven.Client.Linq.RavenQueryProviderProcessor`1.Execute(Expression expression) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Linq\\RavenQueryProviderProcessor.cs:line 1398\r\nat Raven.Client.Linq.RavenQueryProvider`1.Execute(Expression expression) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Linq\\RavenQueryProvider.cs:line 135\r\nat Raven.Client.Linq.RavenQueryProvider`1.System.Linq.IQueryProvider.Execute(Expression expression) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Linq\\RavenQueryProvider.cs:line 190\r\nat Raven.Client.Linq.RavenQueryInspector`1.GetEnumerator() in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Linq\\RavenQueryInspector.cs:line 99\r\nat System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\nat System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\nat NServiceBus.Persistence.Raven.TimeoutPersister.RavenTimeoutPersistence.GetNextChunk(DateTime startSlice, DateTime& nextTimeToRunQuery) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Persistence\\Raven\\TimeoutPersister\\RavenTimeoutPersistence.cs:line 97\r\nat NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll(Object obj) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Timeout\\Hosting\\Windows\\TimeoutPersisterReceiver.cs:line 79\r\nat System.Threading.Tasks.Task.Execute()\r\nException:  An exception of type \'System.Net.WebException\' occurred in NServiceBus.Core.dll but was not handled in user code : "Unable to connect to the remote server"\r\n```\r\n\r\nWe really should give a better message than `Unable to connect to the remote server` when we cant contact to storage. '
1938,'','When both MsmqTransportConfig and TransportConfig is defined in the configuration, no errors or warnings are displayed for the obsoleted MsmqTransportConfig\n`MsmqTransportConfig` was obsoleted from version 4.0. It was replaced with `TransportConfig`. To guide the users, when the app.config had MsmqTransportConfig defined, an useful message was being displayed. However, if both the configurations are defined, the user is not warned about the MsmqTransportConfig\r\n\r\n--\r\n\r\n**Steps to repro**\r\n1. Generate an NServiceBus.Host endpoint\r\n2. Add both `TransportConfig` and `MsmqTransportConfig` in app.config\r\n3. Notice that there are no warnings / exceptions when run in the debugger\r\n4. Remove the `TransportConfig` and see that the message is now displayed.\r\n\r\n**Offending Code**\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Transport/Config/Bootstrapper.cs#L41'
1937,'johnsimons',"Abort the startup if we encounter a assembly scanning error\nSince we now detect and don't even try to load non .net asm we can now blow up and stop the endpoint from starting.\r\n\r\nWe should make sure we create a good exception message telling the user:\r\n\r\n* The assembly that failed\r\n* The inner loader ex\r\n* Tell them how to asm redirect\r\n* Give them the syntax for the redirect (since we know the versions)\r\n\r\nWe also need a option to opt in to the old behaviour just to be safe. \r\n\r\nThis also needs to work for the host (since the host passes the list of asms)"
1936,'','Should not be throwing TypeLoadException\nSo here https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/XML/XmlMessageSerializer.cs#L459 we throw a TypeLoadException\r\n\r\nThis is wrong since \r\n\r\n> TypeLoadException is thrown when the common language runtime cannot find the assembly, the type within the assembly, or cannot load the type.\r\n\r\nIt is not the runtime that is failing to find the type but us. \r\n\r\nThis can cause issue with debugging since people are used to debugging TypeLoadException  in a certain way. For example they be justified in looking at the [typename property](http://msdn.microsoft.com/en-us/library/system.typeloadexception.typename(v=vs.110).aspx) to help with debugging. In our case it would be empty. \r\n\r\nSince we dont expect anyone to be explicitly catching this exception case there is no value using a custom exception. Hence we should change this to just be an `Exception`'
1935,'','Work out why Should_start_the_saga_when_set_up_to_start_for_the_base_event fails on the build server\nSo Should_start_the_saga_when_set_up_to_start_for_the_base_event is ocnsitently failing on the build server\r\n\r\nIt first started failing in this build https://builds.particular.net/viewLog.html?buildId=34843&tab=buildResultsDiv&buildTypeId=NServiceBus_2RunAcceptanceTestsForMsmq  which was triggered by this change https://github.com/Particular/NServiceBus/commit/8ea2921df822f16449ad488fd2272384a8945649 which would seem to imply it was previously working due to a side effect of the test naming. ie it was sharing some state. \r\n\r\nSince this test passes in isolation on several different dev machines for now this test has been excluded to we can progress with the 4.4 release. '
1934,'johnsimons','NServiceBus.Testing - Running the test in Full duplex results in System.Argument exception\n**Steps to repro**\r\n1. Convert the full duplex sample to use version `4.4.0-Alpha0001-0002`\r\n2. Execute the unit test in the `MyServer.Tests` project\r\n3. The test fails, notice the below exception:\r\n\r\n````\r\nSystem.ArgumentException : The handler object created does not implement IHandleMessages<T>.\r\nParameter name: handlerCreationCallback\r\n   at NServiceBus.Testing.Test.Handler(Func`2\xa0handlerCreationCallback) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Testing\\Test.cs: line 211\r\n   at MyServer.Tests.Tests.TestHandler() in Tests.cs: line 21\r\n````'
1933,'','SendOnly endpoints API reboot\nThe current API to configure NServiceBus in SendOnly mode is problematic to put it nicely.\r\n\r\nSo currently a user configure the bus as SendOnly (btw, there should be no "bus" in SendOnly mode!) in the following manner:\r\n\r\n```c#\r\nIBus bus = Configure.With()\r\n    .DefaultBuilder()\r\n    .UseTransport<Msmq>()\r\n    .UnicastBus()\r\n    .SendOnly();\r\n\r\nbus.Send("SendOnlyDestination@someserver", new TestMessage());\r\n```\r\n\r\nThis looks ok however it soon starts to fail because `IBus` interface has lots of methods that do not apply to SendOnly mode, eg:\r\n```c#\r\nbus.Defer(TimeSpan.FromHours(1), new TestMessage());\r\nbus.Publish(new MyEvent());\r\nbus.Subscribe(typeof(MyEvent));\r\nbus.DoNotContinueDispatchingCurrentMessageToHandlers();\r\nbus.HandleCurrentMessageLater();\r\nbus.Reply(new TestMessage());\r\nbus.SendLocal(new TestMessage());\r\n...\r\n```\r\n\r\nand the list keeps on going.'
1932,'','Added DisplayInstanceIdentifier to HostInformation\nThe `HostInformation` class needs 3 default pieces of information about a host:\r\n- HostId -> the unique identifier of an endpoint host instance\r\n- DisplayName -> This is the `Environment.MachineName` for most scenarios except in Azure it will be RoleInstance\r\n- DisplayInstanceIdentifier -> This is a string that uniquely identifies an endpoint instance, eg ProcessId or path to exe or windows service name, this is to be displayed on UIs, such as SP and SI'
1931,'','Add tests to cover the `HostDisplayName` changes\nsee this change https://github.com/Particular/NServiceBus/commit/f959e8cdd6f23eb03f2dd6ca865b83dadfcb660e'
1927,'','Relates to #1925\nProblem in #1925 was that we refactored and removed the outgoing message mutators from being invoked. See here:\r\nhttps://github.com/Particular/NServiceBus/commit/33c8b81737cf7a768766bc76f8dc924c1aed8077#diff-1df1836ac4e373d2c1200c94c56ce852R48\r\n\r\nMade changes after chatting with @SimonCropp.'
1926,'','Unable to use NHibernate persistence, when running with the Master profile\nWhen an NServiceBus host is started using the Master node profile, even if there is initialization code to use NHibernate persistence, the host tries to use RavenDB as the persistence\r\n\r\n--\r\n\r\n**Steps to repro**\r\n- In the Scaleout sample, add NHibernate persistence to Orders.Handler project.\r\n    \r\n    ````xml \r\n    <connectionStrings>\r\n        <add name="NServiceBus/Persistence" connectionString="Data Source=.\\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />\r\n      </connectionStrings>\r\n    \r\n      <appSettings>\r\n        <!-- dialect is defaulted to MsSql2008Dialect, if needed change accordingly -->\r\n        <add key="NServiceBus/Persistence/NHibernate/dialect" value="NHibernate.Dialect.MsSql2008Dialect" />\r\n        <!-- other optional settings examples -->\r\n        <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider" />\r\n        <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver" />\r\n      </appSettings>\r\n    ````\r\n    \r\n    ````c# \r\n     class InitNHPersistence : INeedInitialization\r\n        {\r\n            public void Init()\r\n            {\r\n                Configure.Instance\r\n                   .UseNHibernateSubscriptionPersister() // subscription storage using NHibernate\r\n                        .UseNHibernateTimeoutPersister() // Timeout Persistance using NHibernate\r\n                        .UseNHibernateSagaPersister(); // Saga Persistance using NHibernate\r\n           \r\n            }\r\n        }\r\n    ````\r\n\r\n-  Run it with `NServiceBus.Integration NServiceBus.Master`\r\n- Notice the exception\r\n\r\n````\r\nAn exception of type \'System.Configuration.ConfigurationErrorsException\' occurred in NServiceBus.Core.dll but was not handled in user code\r\n\r\nAdditional information: Raven connectionstring (Data Source=.\\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True) could not be parsed. Please ensure the connectionstring is valid, see http://ravendb.net/docs/client-api/connecting-to-a-ravendb-datastore#using-a-connection-string\r\n\r\nIf there is a handler for this exception, the program may be safely continued.\r\n````\r\n\r\n**NOTE-** Run the same with `NServiceBus.Integration NServiceBus.Distributor` and the endpoint starts as expected.'
1925,'indualagarsamy','When using NServiceBus version 4.3.x and an event is sent through a Distributor it is incorrectly received by multiple workers instead of just one. \nWhen using the distributor in version `4.3.x`, and the workers are subscribing to an event, having the message mapping for the event in the app.config of the worker causes each worker to handle the event, instead of just one worker.\r\n\r\n**If you are affected by this bug:**\r\n\r\n * Update your distributor/worker endpoints to the the 4.3.4 hotfix release.\r\n * Inspect the current subscription entries for the publisher. Remove any extra subscription entries that are already registered for the workers for the event. \r\n * Restart your endpoint. \r\n\r\n## How to delete your subscription entries when using RavenDB persistence:\r\n\r\n### 1 Open the Raven Management Studio\r\n\r\nBrowse to your RavenDB url. if RavenDB is installed using the default ports the url is either http://servername:8080 or http://servername:8081, otherwise use the appropriate port number.\r\n\r\n### 2 Find the correct database\r\n\r\nIdentify the database of the publisher endpoint (the database name matches the endpoint name) and double click to open the database.\r\n![image](https://f.cloud.github.com/assets/854553/2084411/46442fb6-8e21-11e3-9f9b-63e31f53fa50.png)\r\n\r\n### 3 Identify the subscription\r\n\r\nYou will see the subscriptions list. If there are multiple subscription documents, Identify the subscription document based on the event type.  For example,  `Example.Messages.Events.MyEvent` as specified in the `MessageType` column.\r\n![image](https://f.cloud.github.com/assets/854553/2084414/64545a8a-8e21-11e3-9e40-cbb97e469881.png)\r\n\r\n### 4 Delete the erroneous subscribers\r\nDouble click on the document to open the subscription list. Select the worker nodes that have been erroneously subscribed to the event and press delete.\r\n![image](https://f.cloud.github.com/assets/854553/2090460/d49c60a8-8e94-11e3-902f-08c0cd922bb1.png)\r\n\r\nOnce the entries are removed, click on Save to save the document.\r\n![image](https://f.cloud.github.com/assets/854553/2090480/0e41d9dc-8e95-11e3-8aa6-1c9f8b881d49.png)\r\n\r\n## How to delete your subscription entries when using NHibernate persistence:\r\n\r\n### 1 Find your Database in SQL Management Studio\r\n\r\nUsing Microsoft SQL Management Studio, connect to the appropriate persistence database specified in the `NServiceBus/Persistence` connection string in the app.config of the endpoint\r\n\r\n```xml\r\n<connectionStrings>\r\n <add name="NServiceBus/Persistence" connectionString="Data Source=.\\SQLEXPRESS;Initial Catalog=NSERVICEBUS;Integrated Security=True" />\r\n</connectionStrings>\r\n```\r\n\r\n### 2 Delete the erroneous subscribers\r\nFind out the erroneous subscribers by running\r\n```sql\r\nselect * \r\n    FROM [NServiceBus].[dbo].[Subscription]\r\n    where TypeName=\'Example.Messages.Events.MyEvent\'\r\n```\r\n\r\nTo clear out the subscriptions for the event `Example.Messages.Events.MyEvent`, delete the subscription entries for the workers. For example:\r\n\r\n```sql\r\ndelete\r\n    FROM [NServiceBus].[dbo].[Subscription]\r\n    where TypeName=\'Example.Messages.Events.MyEvent\'\r\n    and SubscriberEndpoint in (\'Example.NServiceBus.Worker@machine1\', \'Example.NServiceBus.Worker@machine2\')\r\n```\r\n\r\n--\r\n\r\nI have a Publisher, Distributor and two Workers.  The Workers are configured to enlist with the Distributor and subscribe to the events published by the Publisher.\r\n\r\nExpected outcome would be that when Publishing an Event the Distributor would load balance this event between the two workers.\r\n\r\nActual outcome is that both Workers are receiving the event, and in the Subscription table(using NServiceBus.NHibernate) for the Publisher there is an entry with the endpoint of both Workers thus appears that the Distributor is being bypassed.\r\n\r\nSample Solution: https://dl.dropboxusercontent.com/u/8748846/Example.NServiceBus.zip\r\n\r\nSee the discussioin here for further context of issue: https://groups.google.com/forum/#!topic/particularsoftware/2-634cVL5Lw'
1923,'',"Mailgun Endpoint Implementation\nI have an endpoint/messages implementation that sends emails through Mailgun (a RESTful SMTP service).  I think it would be useful for the community since there's a lot of folks who use Mailgun (e.g. most people who are using Rackspace as their hosting provider).\r\n\r\nWhat's the right way to get it out there?  Add it to the NSB samples?  Do it as my own personal NuGet package?\r\n\r\nThanks for any help you can provide."
1922,'',"Turned on AggressivelyCacheFor in GetSubscriberAddressesForMessage.\nThis will give a small performance boost to raven subscriptions storage.\r\n\r\nBy running PubSub.ps1 I saw on my machine a small increase in throughput (about 100 more).\r\nI think this will be even higher if Raven is not on the local machine.\r\n\r\nI'm caching for 30secs, maybe that is too much ?\r\n\r\n//cc @indualagarsamy @andreasohlund @SimonCropp "
1921,'','Msmq: add support for long queue names\nToo long queuenames result in System.Messaging.MessageQueueException (0x80004005): Format name buffer supplied to the API was too small to fit the format name\r\n\r\nWhen exceeding max length, we should make use of the deterministic guid builder to replace the queue name, so that it keeps working'
1918,'','PubSub running performance tests\nI get the following exception when running PubSub.ps1:\r\n```\r\nUnhandled Exception: Raven.Client.Exceptions.NonAuthoritativeInformationException: Document Subscriptions/bba8ece5-a307-\r\nc852-7de5-4d5c5e80a1ef returned Non Authoritative Information (probably modified by a transaction in progress) and Allow\r\nNonAuthoritativeInformation  is set to false\r\n   at Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity[T](JsonDocument documentFound) in c:\\Builds\\Ra\r\nvenDB-Stable\\Raven.Client.Lightweight\\Document\\InMemoryDocumentSessionOperations.cs:line 335\r\n   at Raven.Client.Document.SessionOperations.MultiLoadOperation.<Complete>b__4[T](JsonDocument document) in c:\\Builds\\R\r\navenDB-Stable\\Raven.Client.Lightweight\\Document\\SessionOperations\\MultiLoadOperation.cs:line 71\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Raven.Client.Document.SessionOperations.MultiLoadOperation.Complete[T]() in c:\\Builds\\RavenDB-Stable\\Raven.Client.\r\nLightweight\\Document\\SessionOperations\\MultiLoadOperation.cs:line 70\r\n   at Raven.Client.Document.DocumentSession.LoadInternal[T](String[] ids) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Light\r\nweight\\Document\\DocumentSession.cs:line 347\r\n   at NServiceBus.Persistence.Raven.SubscriptionStorage.RavenSubscriptionStorage.GetSubscriptions(IEnumerable`1 messageT\r\nypes, IDocumentSession session) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Persistence\\Raven\\SubscriptionStorage\\Ra\r\nvenSubscriptionStorage.cs:line 87\r\n   at NServiceBus.Persistence.Raven.SubscriptionStorage.RavenSubscriptionStorage.NServiceBus.Unicast.Subscriptions.Messa\r\ngeDrivenSubscriptions.ISubscriptionStorage.Subscribe(Address client, IEnumerable`1 messageTypes) in c:\\Projects\\NService\r\nBus\\src\\NServiceBus.Core\\Persistence\\Raven\\SubscriptionStorage\\RavenSubscriptionStorage.cs:line 30\r\n   at PubSubTestCase.Run() in c:\\Projects\\NServiceBus\\src\\NServiceBus.PerformanceTests\\PubSub\\PubSubTestCase.cs:line 101\r\n\r\n   at Runner.Program.Main(String[] args) in c:\\Projects\\NServiceBus\\src\\NServiceBus.PerformanceTests\\Program.cs:line 32\r\nPS C:\\Projects\\NServiceBus\\src\\NServiceBus.PerformanceTests\\TestSuites> .\\PubSub.ps1\r\n```'
1917,'','NServiceBus.Host32 assembly name\nIt would be nice for 32-bit NServiceBus host assemlby ("NServiceBus.Host32") to have the same assembly name as the AnyCpu build ("NserviceBus.Host"). This makes it easier to use the same endpoint assemblies in both 32-bit and 64-bit processes. The output file name could remain "NServiceBus.Host32.exe" just as long as the assembly name of the x86 build is the same as the AnyCpu build.'
1915,'',"JsonMessageSerializerBase - TypeNameHandling.None\nThe serializer method has different serializerSettings than the deserializer. This means the serializer has TypeNameHandling = TypeNameHandling.Auto but the deserializer has the TypeNameHandling = TypeNameHandling.None\r\n\r\nSo the deserializer can't benefit from the special json attributes $type, which has been created by the serializer, and causes the deserialization to fail.\r\n\r\nThe deserializer has the following condition\r\n\r\nvar requiresDynamicDeserialization = mostConcreteType != null && mostConcreteType.IsInterface\r\n\r\nIn my case looks the event as following\r\n\r\nIMyInterface\r\n  - MyBaseClassProperty\r\n\r\nSo MyBaseClassProperty is an abstract class and can represent multiple concrete types. Because the event it self is an interface you are turning the TypeNameHandling to None. MyBaseClassProperty requires the TypeNameHandling = Auto to be able to deserialize.\r\n"
1914,'','JsonMessageSerializerBase - TypeNameHandling.None\nThe serialize method has the TypeNameHandling.Auto but the deserialize method uses TypeNameHandling.None\r\n\r\nThis makes no sense and it causes the the deserialization to fail, because the deserializer does not benefit from the special json attribute $type which has been created during the serialization. '
1913,'','Capture host specific information and make it accessible\nWe are now capturing host specific information in a class called `HostInformation`.\r\n\r\nThis then is exposed as a property of the `UnicastBus`.\r\n\r\n### Overriding HostId and/or DisplayName\r\n```c#\r\nclass OverrideHostInformation : IWantToRunWhenConfigurationIsComplete\r\n{\r\n    public UnicastBus UnicastBus { get; set; }\r\n\r\n    public void Run()\r\n    {\r\n        var hostInformation = new HostInformation(myNewDetermisiticGuid, "My new display name");\r\n\r\n        hostInformation.Properties.Add("Another", "FooBar");\r\n        hostInformation.Properties.Add("Special", "I\'m amazing");\r\n\r\n        UnicastBus.HostInformation = hostInformation;\r\n    }\r\n}\r\n```\r\n\r\n### Adding extra properties\r\n```c#\r\nclass OverrideHostInformation : IWantToRunWhenConfigurationIsComplete\r\n{\r\n    public UnicastBus UnicastBus { get; set; }\r\n\r\n    public void Run()\r\n    {\r\n        UnicastBus.HostInformation.Properties.Add("Another", "FooBar");\r\n        UnicastBus.HostInformation.Properties.Add("Special", "I\'m amazing");\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n'
1912,'','Stop using message mutators for internal purposes\nMutators are for end users only'
1911,'','Fixes #1909 -  NServiceBus fails to shut down if `IWantToRunWhenBusStartsAndStops.Start` throws\n--\r\n\r\nStarts a task that will perform a `Parallel.ForEach` of `IWantToRunWhenBusStartsAndStops.Start`.\r\n`Parallel.ForEach` will block until all iterations are completed or one of them fails. The continuation ensures the exception is observed and marked as handled.'
1910,'andreasohlund',"V4.3 subscribers fail to subscribe to v3.X publishers\nVersion 4.3.0 introduced a bug where the NServiceBus.Version header didn't get populated for the control messages containing the subscribe/unsubscribe requests. This meant that our mutators didn't mutate them correctly causing the requests to be misinterpreted.\r\n\r\nEffected transports: Msmq, SqlServer\r\n\r\nRepro\r\n\r\n * Clone this https://github.com/gbiellem/PubSubRepro\r\n * Set as startup MyPublisher (3.3.8), Subscriber1 (4.3) and Subscriber2 (4.3)\r\n * Start\r\n * Press Enter in  the publisher\r\n * Message not received by subscribers"
1909,'',"NServiceBus fails to shut down if `IWantToRunWhenBusStartsAndStops.Start` throws\n--\r\n\r\nDiscovered on develop branch while testing shutdown issues in 4.3.2\r\n\r\nThere's a dead lock between [`RaiseCriticalError`](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/UnicastBus.cs#L806) called in a task that calls `Bus.Shutdown`, which awaits it to be completed [here](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/UnicastBus.cs#L822) (the task awaits itself to be completed)\r\n\r\nSTR\r\n- create a `IWantToRunWhenBusStartsAndStops` implementation that throws any exception from `Start`\r\n- try to shut down the bus"
1908,'','When custom hosting and starting up a distributor, an Invalid Operation Exception is thrown, if the app.config contains an empty UnicastBusConfig section\nWhen attempting to start a distributor that is self hosted, if the app.config contains an empty UnicastBusConfig section, then an Invalid Operation exception is thrown.\r\n\r\n--\r\n\r\n**Steps to repro**\r\n1. In the Scale out sample, change the Orders.Handler to a console application and remove references to NServiceBus.Host. \r\n2. Add nuget reference to `NServiceBus.Distributor.Msmq`\r\n3. Add a new file called `Program.cs` and add the proper initialization as shown and start the endpoint.\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Configure.With()\r\n                .DefaultBuilder()\r\n                .RunMSMQDistributor(false)\r\n                .CreateBus()\r\n                .Start(() => Configure.Instance.ForInstallationOn<Windows>().Install());\r\n\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n \r\nNotice the following exception:\r\n\r\n````\r\nAn unhandled exception of type \'System.InvalidOperationException\' occurred in NServiceBus.Core.dll\r\n\r\nAdditional information: Cannot configure properties for a type that hasn\'t been configured yet: NServiceBus.Unicast.Behaviors.ForwardBehavior\r\n````\r\n\r\n**Workaround**\r\nRemove the  UnicastBusConfig section from app.config\r\n\r\n````xml\r\n <section name="UnicastBusConfig" type="NServiceBus.Config.UnicastBusConfig, NServiceBus.Core" />\r\n\r\nand \r\n\r\n <UnicastBusConfig>\r\n    <MessageEndpointMappings />\r\n  </UnicastBusConfig>\r\n````'
1907,'','After installing NSB w/ nuget opening the VS solution continues to open a web page in VS\nEach time I open a specific solution, Visual Studio opens a page whose url is:\r\n\r\nhttp://particular.net/articles/preparing-your-machine-to-run-nservicebus?dtc=true&msmq=true&raven=true&perfcounter=true&installer=nservicebus&method=nuget&version=nsb-version-here\r\n\r\nit happens after adding NSB to the solution via the nugget package manager.\r\n\r\n.m'
1905,'andreasohlund','Add `OriginatingHostId` and `ProcessingHostId` headers that represent the current "host"\nWe currently have the `ProcessingMachine` and `OriginatingMachine` headers. These do not accurately reflect all concepts of a "Host". For example when hosting in Azure.\r\n\r\nSo the headers `OriginatingHostId`, `HostId` and `HostDisplayName` have been added to be environment agnostic where "machine" does not make sense.\r\n\r\nThe headers `ProcessingMachine` and `OriginatingMachine` have been marked as obsolete and will be removed in 5.0.'
1904,'','Fixes #1900 - Gateway unable to receive large messages from slow sites due to transaction rollback\nGateway sender and receiver share transaction timeout config.'
1903,'nulltoken','Add a meta test to make sure behaviors are public\nTo prevent us from releasing behaviors that can\'t be replaced we should enforce the following.\r\n\r\n# Rule\r\n\r\nAll types implementing IBehavior should have at least the following attributes:\r\n\r\n```\r\n\r\n[Obsolete("This is a prototype API. May change in minor version releases.")]\r\n[EditorBrowsable(EditorBrowsableState.Never)]\r\n\r\n\r\n```'
1902,'','A `Stop` and `Start` of the Bus causes a `NullReferenceException` inside event subscriptions\n--\r\n\r\nI was getting a nullreference exception in the unicast bus so I thought to see what happened in the file.\r\n\r\nI noticed that you subscribe to events in the setter of the Transport property. But you release the events in InnerShutDown.\r\n\r\nYou can do 2 things:\r\n\r\n1) Change this in the setter:\r\n\r\n```\r\nset\r\n{\r\n\tif (transport != null)\r\n\t{\r\n\t\ttransport.StartedMessageProcessing -= TransportStartedMessageProcessing;\r\n\t\ttransport.TransportMessageReceived -= TransportMessageReceived;\r\n\t\ttransport.FinishedMessageProcessing -= TransportFinishedMessageProcessing;\r\n\t\ttransport.FailedMessageProcessing -= TransportFailedMessageProcessing;\r\n\t}\r\n\r\n\ttransport = value;\r\n\r\n\ttransport.StartedMessageProcessing += TransportStartedMessageProcessing;\r\n\ttransport.TransportMessageReceived += TransportMessageReceived;\r\n\ttransport.FinishedMessageProcessing += TransportFinishedMessageProcessing;\r\n\ttransport.FailedMessageProcessing += TransportFailedMessageProcessing;\r\n}\r\n```\r\n\r\n2) If 1 is never allowed, please add this:\r\n\r\n```\r\nset\r\n{\r\n\tif (transport != null)\r\n\t{\r\n\t\tthrow new NotSupportedException("Once the Transport property is set, it can never be changed");\r\n\t}\r\n\r\n\ttransport = value;\r\n\r\n\ttransport.StartedMessageProcessing += TransportStartedMessageProcessing;\r\n\ttransport.TransportMessageReceived += TransportMessageReceived;\r\n\ttransport.FinishedMessageProcessing += TransportFinishedMessageProcessing;\r\n\ttransport.FailedMessageProcessing += TransportFailedMessageProcessing;\r\n}\r\n```'
1901,'',"How to achieve the unified certification with NServiceBus\nHi!\r\n    I have several mvc websites, and now I want to integrate them together. Each website has it's authority mechanism, users of different website have different roles. And can you give me some proposal how to achieve the unified certification and sso with NServiceBus. Thank you. "
1900,'','Gateway unable to receive large messages from slow sites due to transaction rollback\nA fixed 30 second transaction timeout in `DefaultTransactionScope` [here](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Gateway/Receiving/IdempotentChannelReceiver.cs#L88) and [here](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Gateway/Receiving/SingleCallChannelReceiver.cs#L94) is causing transaction rollbacks on the receiving end.\r\n\r\nIf a gateway sender is slow (eg 128k/s upload), large messages and/or databus properties are being rejected by the receiver due to transaction timeouts. Should this be using `GatewayConfig.TransactionTimeout` like the sender [here](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Gateway/Sending/GatewaySender.cs#L74)?'
1899,'','reduce Dict lookups\nfixes #1627'
1898,'','Service cannot be stopped\nWe are testing a migration to Windows Server 2012 R2. We use the NServiceBus.Host to host the endpoints as a windows service.\r\n\r\nSince we are running on Windows Server 2012 R2, we cannot get the service to stop without killing the process.\r\n\r\nWhen I start a service, it takes more than 30 seconds to start (which is "normal", we rather have a large startup time then lazy-loading when the speed is actually important). In the log we see these messages:\r\n\r\n```\r\n2014-01-14 14:04:26,336 [21] INFO  MyCompany.Config.EndpointConfigBase [(null)] <(null)> - [MyCompany.Config.EndpointConfigBase] Endpoint \'MyEndpoint\' is started\r\n2014-01-14 14:04:26,336 [21] DEBUG NServiceBus.Unicast.UnicastBus [(null)] <(null)> - Started MyCompany.MyEndpoint.EndpointConfig, MyCompany.MyEndpoint, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null.\r\n2014-01-14 14:04:26,336 [17] DEBUG NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver [(null)] <(null)> - Polling next retrieval is at 01/14/2014 14:05:26.\r\n2014-01-14 14:04:26,352 [20] DEBUG NServiceBus.Unicast.UnicastBus [(null)] <(null)> - Started NServiceBus.AutomaticSubscriptions.AutoSubscriber, NServiceBus.Core, Version=4.3.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n2014-01-14 14:05:27,193 [17] DEBUG NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver [(null)] <(null)> - Polling for timeouts at 01/14/2014 14:05:27.\r\n2014-01-14 14:05:27,193 [17] DEBUG NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver [(null)] <(null)> - Polling next retrieval is at 01/14/2014 14:06:27.\r\n2014-01-14 14:06:28,098 [17] DEBUG NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver [(null)] <(null)> - Polling for timeouts at 01/14/2014 14:06:28.\r\n2014-01-14 14:06:28,098 [17] DEBUG NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver [(null)] <(null)> - Polling next retrieval is at 01/14/2014 14:07:28.\r\n```\r\n\r\nAs you can see, the service is actually running and polling. However when I try to stop via net stop [servicename]:\r\n\r\n```\r\nThe service could not be controlled in its present state.\r\n\r\nMore help is available by typing NET HELPMSG 2189.\r\n```\r\n\r\nWhen I try to do it via the services console:\r\n\r\n```\r\n---------------------------\r\nServices\r\n---------------------------\r\nWindows could not stop the [servicename] service on Local Computer.\r\n\r\nError 1061: The service cannot accept control messages at this time.\r\n---------------------------\r\nOK   \r\n---------------------------\r\n\r\n```\r\n\r\nDo you have any idea why this is happening on Windows Server 2012 R2?'
1897,'','Clear MSMQ connection cache\n'
1896,'','Publisher endpoint fails to publish when destination queue is removed then recreated\nSTR\r\n\r\n1. Open latest MSMQ PubSub sample solution\r\n2. Modify `MyPublisher.EndpointConfig` to use `MsmqSubscriptionStorage()`\r\n3. F5 & wait until all queues have been created & subscription messages are in mypublisher.subscriptions queue\r\n4. publish a few messages (all is good at this point)\r\n5. Shut down Subscriber2 endpoint in VS (keep MyPublisher running)\r\n6. Delete subscriber2 queue\r\n7. Restart Subscriber2 endpoint & wait for queue to be created again\r\n8. Publish a few messages (nothing is received by Subscriber2 endpoint any more)\r\n'
1895,'','Dispose of stream only once\nStream already disposed of by `using` in `DataReceivedOnChannel`\r\nSee comments in #1890\r\n'
1894,'',"Fixes #1827 - SingleCallChannelReceiver doesn't work with unity\nAdd factory to resolve gateway channel receivers. Create & register `Func<IReceiveMessagesFromSites>`\r\n\r\nEdit: Not tested with Unity. Tested with DefaultBuilder()"
1893,'SimonCropp','When a message is forwarded to the error queue, the stack trace of the exception is too large\nWhen a message is forwarded to the error queue, the stack trace that is stored in the header information for the message in the error queue is currently too long. We should include the inner exception that caused the problem instead of the entire stack trace which includes the entire pipeline steps.\r\n\r\n--\r\n\r\n**Steps to repro**\r\n1. Run the error handling sample and send a message to the error queue\r\n2. Inspect the message headers using a tool like QueueExplorer for the exception details. \r\n\r\n\r\n'
1892,'','If MaxRetries=0, SLR is not called\nWhen a user sets MaxRetries to 0, SLR is not executed even though is enabled'
1891,'',"Aren't these acceptance tests contradicting (and I wonder why they turn green on some transports)\nThis test says that the transport should not initiate a retry when MaxRetries is set to 0\r\n\r\n When_message_fails_with_retries_set_to_0.Should_not_retry_the_message\r\n\r\nWhile this test says that  When_messages_fails_flr.Should_be_moved_to_slr\t\r\n\r\nBut, this test sets c.MaxRetries = 0; //to skip the FLR (so it says)\r\n\r\nYet FLR will never be invoked to check for forwarding to SLR if the transport behaves as specified in the first test.\r\n\r\nWhich one is wrong? And why does it turn green for other transports?"
1890,'','clean up gateway headers\n'
1889,'johnsimons','Timeout messages can incorrectly end up in error queue after Bus restart\nWhen the bus is restarted using `Bus.Start()`, `Bus.Shutdown()` then `Bus.Start()` timeout messages can throw an exception and end up in the error queue.\r\n\r\nIf a saga message handler requests any timeouts, the message being handled is rolled back and always ends up in error queue.\r\n\r\n--\r\n\r\n`TimeoutPushed.BeginInvoke` throws `System.ArgumentException` saying *The delegate must have only one target.* inside  `DefaultTimeoutManager.PushTimeout()`\r\n\r\nThis is because `TimeoutPersisterReceiver.Stop` does not unsubscribe from `TimeoutManager.TimeoutPushed` event\r\n\r\nStack trace below:\r\n```\r\nNServiceBus.Core.dll!NServiceBus.Timeout.Core.DefaultTimeoutManager.PushTimeout(NServiceBus.Timeout.Core.TimeoutData timeout) Line 42 + 0x8a bytes\tC# \t\r\nNServiceBus.Core.dll!NServiceBus.Timeout.Hosting.Windows.TimeoutMessageProcessor.HandleInternal(NServiceBus.TransportMessage message) Line 121\tC# \t\r\nNServiceBus.Core.dll!NServiceBus.Timeout.Hosting.Windows.TimeoutMessageProcessor.Handle(NServiceBus.TransportMessage message) Line 52\tC#\r\nNServiceBus.Core.dll!NServiceBus.Satellites.SatelliteLauncher.HandleMessageReceived(object sender, NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs e, NServiceBus.Satellites.ISatellite satellite) Line 92 + 0x20 bytes\tC#\r\nNServiceBus.Core.dll!NServiceBus.Satellites.SatelliteLauncher.StartSatellite.AnonymousMethod__7(object o, NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs e) Line 107 + 0x37 bytes\tC# \t\r\nNServiceBus.Core.dll!NServiceBus.Unicast.Transport.TransportReceiver.OnTransportMessageReceived(NServiceBus.TransportMessage msg) Line 453 + 0x33 bytes\tC# \t\r\nNServiceBus.Core.dll!NServiceBus.Unicast.Transport.TransportReceiver.ProcessMessage(NServiceBus.TransportMessage message) Line 351 + 0xc bytes\tC# \t\r\nNServiceBus.Core.dll!NServiceBus.Unicast.Transport.TransportReceiver.TryProcess(NServiceBus.TransportMessage message) Line 260\tC# \t\r\nNServiceBus.Core.dll!NServiceBus.Transports.Msmq.MsmqDequeueStrategy.ProcessMessage(NServiceBus.TransportMessage message) Line 288 + 0x11 bytes\tC# \t\r\nNServiceBus.Core.dll!NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Action() Line 239 + 0xc bytes\tC#\r\n mscorlib.dll!System.Threading.Tasks.Task.InnerInvoke() + 0x49 bytes\t\r\n mscorlib.dll!System.Threading.Tasks.Task.Execute() + 0x2e bytes\t\r\n// lines removed for brevity\r\n System.Threading.ContextCallback callback, object state) + 0x41 bytes\t\r\n mscorlib.dll!System.Threading.ThreadHelper.ThreadStart(object obj) + 0x4e bytes\t\r\n \t[Native to Managed Transition]\t\r\n kernel32.dll!@BaseThreadInitThunk@12()  + 0x12 bytes\t\r\n ntdll.dll!___RtlUserThreadStart@8()  + 0x27 bytes\t\r\n ntdll.dll!__RtlUserThreadStart@8()  + 0x1b bytes\t\r\n```'
1888,'','Manual manipulating the Gateway Ack to be `false` will result in a `true` Ack\nIf a `false` is passed in the Ack header `AutoAck` will still be set to `true`\r\n\r\n--\r\n\r\nDue to this has this\r\n\r\n    return new CallInfo\r\n    {\r\n        ClientId = clientId,\r\n        Type = type,\r\n        Headers = headers,\r\n        Data = receivedData.Data,\r\n        AutoAck = headers.ContainsKey(GatewayHeaders.AutoAck)\r\n    };'
1887,'','SendOnly endpoints do not show license dialog\nBecause we now charge for sendonly endpoints we need to ensure the license dialog is displayed for sendonly endpoints'
1886,'','DefaultRetryPolicy should be internal\nwe are leaking implementation here \r\n\r\ncalls to  `DefaultRetryPolicy.NumberOfRetries` or `DefaultRetryPolicy.TimeIncrease` will have an effect but we are not properly guarding them from invalid input.\r\n\r\nAlso calls to `DefaultRetryPolicy.RetryPolicy` will only work once  and only if done very early in configuration.'
1885,'johnsimons','When self hosting messages are lost after `IStartableBus.Shutdown()` followed with `IStartableBus.Start()`\nWhen self hosting, all messages are lost after restarting the bus (ie calling `Shutdown` followed by `Start` on `IStartableBus`.\r\n\r\nMessages are removed from the queue but no handlers are called.\r\n\r\n--\r\n\r\n### Workaround\r\n\r\n```\r\nprivate static void SubscribeToEvent(IStartableBus bus, string eventName, string methodName)\r\n{\r\n\tvar unicastBus = (UnicastBus)bus;\r\n\tvar transportType = unicastBus.Transport.GetType();\r\n\tvar eventInfo = transportType.GetEvent(eventName);\r\n\r\n\tvar handler = unicastBus.GetType().GetMethod(methodName, BindingFlags.NonPublic | BindingFlags.Instance);\r\n\tvar d = Delegate.CreateDelegate(eventInfo.EventHandlerType, bus, handler);\r\n\r\n\tobject[] methodArgs = { d };\r\n\tvar removeHandler = eventInfo.GetRemoveMethod();\r\n\tremoveHandler.Invoke(unicastBus.Transport, methodArgs);\r\n\r\n\tvar addHandler = eventInfo.GetAddMethod();\r\n\taddHandler.Invoke(unicastBus.Transport, methodArgs);\r\n}\r\n\r\nStartableBus.Start(() =>\r\n\t{\r\n\t\tSubscribeToEvent(StartableBus, "StartedMessageProcessing", "TransportStartedMessageProcessing");\r\n\t\tSubscribeToEvent(StartableBus, "TransportMessageReceived", "TransportMessageReceived");\r\n\t\tSubscribeToEvent(StartableBus, "FinishedMessageProcessing", "TransportFinishedMessageProcessing");\r\n\t\tSubscribeToEvent(StartableBus, "FailedMessageProcessing", "TransportFailedMessageProcessing");\r\n\t});\r\n```\r\n\r\n### Reproduced\r\n\r\nReproduced on latest MSMQ gateway sample by modifying `SiteB.Program`\r\n\r\n```\r\nnamespace SiteB\r\n{\r\n    using System;\r\n    using NServiceBus;\r\n\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            var bus = Configure.With()\r\n                .DefaultBuilder()\r\n                .UseTransport<Msmq>()\r\n                .UnicastBus()\r\n                .FileShareDataBus(".\\\\databus")\r\n                .UseInMemoryTimeoutPersister()\r\n                .RunGateway() //this line configures the gateway\r\n\r\n                    // This tells NServiceBus to use memory to persist & deduplicate messages arriving from NServiceBus v3.X.\r\n                    // If omitted, RavenDB will be used by default. Required for backwards compatibility\r\n                    .UseInMemoryGatewayPersister()\r\n\r\n                    // This tells NServiceBus to use memory to deduplicate message ids arriving from NServiceBus v4.X.\r\n                    // If omitted, RavenDB will be used by default\r\n                    .UseInMemoryGatewayDeduplication()\r\n\r\n                // Uncomment lines below to use NHibernate persister & deduplication for gateway messages\r\n                // (create a new database called gateway in \\SQLEXPRESS - see App.config for connection strings and other settings)\r\n                //    .UseNHibernateGatewayPersister()\r\n                //    .UseNHibernateGatewayDeduplication()\r\n\r\n                .CreateBus();\r\n\r\n\t\t\tbus.Start();\r\n\t\t\tbus.Shutdown(); //  <= added this and line below\r\n\t        bus.Start();\r\n\r\n            Console.WriteLine("Waiting for price updates from the headquarter - press any key to exit");\r\n\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHaven\'t tested on any other transports but I think this will be the case across all transports.\r\n\r\n`PipelineFactory.InvokeReceivePhysicalMessagePipeline();` is never called after the restart'
1884,'','Autofac.Core.DependencyResolutionException - Using Bus.Send...\nI am getting an error "Autofac.Core.DependencyResolutionException" when trying to Bus.Send from my MVC Controller.  Not sure why.  \r\n\r\nGroup Discussion Here:\r\nhttps://groups.google.com/forum/#!topic/particularsoftware/_CsIr5pJjsU\r\n\r\nGitHub - Repro Here:\r\nhttps://github.com/brianstanforth/NServiceBusIssue\r\n'
1883,'','Add SupportsDtc to transport definition so that acceptence tests can ignore this transport while testing dtc specific concerns\nAdd SupportsDtc to transport definition so that acceptence tests can ignore this transport while testing dtc specific concerns'
1882,'',"Race condition can make acceptence test fail: When_two_sagas_subscribe_to_the_same_event.Should_invoke_all_handlers_on_all_sagas\nIf subscription goes to slow, the saga's can miss the publish. Change the acceptence test to use the same wait mechanism as the pub sub tests"
1881,'','When_messages_fails_flr.Should_be_moved_to_slr cannot handle old messages\nThis test works fine first time, but messages can linger on the queue for subsequent tests due to the exception thrown. Change the test so that it can handle that case'
1880,'','Acceptance test When_publishing_an_event.Should_be_delivered_to_allsubscribers depends on msmq\nThis acceptance test depends on msmq and will thus fail when msmq is not the transport under test'
1879,'','Acceptance test When_sending_a_message_via_the_gateway.Should_process_message assumes xml serializer\nThis acceptance test assumes the xml serializer is used, which is not the case for the azure transports by default. Either the test should set the serializer to xml or check which serializer is set and pass in the correct test message, or we should make the gateway smarter so that it can switch between formats itself'
1878,'',"Acceptance test When_using_master.Master_and_workers_should_receive_messages depends on MSMQ\nThis test depends on msmq as well as the distributor, it probably doesn't belong in the acceptence tests for the other transports? (At least I see no point in having a distributor for remote queues & brokers)"
1877,'',"Acceptance test issue with When_publishing_an_event_with_only_local_messagehandlers\nThe centralized_pubsub test has the same issue as the message_driven_subscriptions test, it doesnt subscribe to the handler for IEvent. See https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.AcceptanceTests/PubSub/When_publishing_an_event_with_only_local_messagehandlers.cs#L72\r\n\r\nreason is MessageHandlerRegistry.GetMessageTypes filters out IEvent as it doesnt comply to the rule ´IsEventTypeAction = t => typeof(IEvent).IsAssignableFrom(t) && typeof(IEvent) != t´\r\n\r\nthe message_driven_subscriptions test works around this issue by adding another handler for the specific type EventHandledByLocalEndpoint \r\n\r\nIsn't this the workaround wrong? As a user I would add an explicit subscribe call for IEvent...\r\n\r\nAnd if it's not wrong, can it be done for the centralized_pubsub test as well?"
1876,'',"Fix LicenseInstaller UX\n### Customer feedback:\r\n\r\n> LicenseInstaller should not be so poor to user. It definitely might be more user-friendly and inform user that license is installed correctly.\r\n\r\n### Details:\r\n\r\nFrom customer email:\r\n\r\n> Some remarks on Installation Procedure and first tests (Ordering)\r\n\r\n> 1. Downloading and installation of infrastructure for NSB passes OK.\r\n\r\n> 2. To License Installation I choose Method 1: LicenseInstaller.exe Call. (capture7.jpg)\r\n> I have read instruction and realized that there are some different methods for License Installation: \r\n> Registry Key updates among them. Residing in the \\bin-directory is also possible. \r\nI can guess that in my case if I don't define the folder with executables, the most probably LicenseInstaller will modify Registry Keys.\r\n> Running LicenseInstaller.exe I could catch a blinking screen appearing for a short while and... no additional info.\r\n> I ran it again with the same effect. 'Probably it's OK' - I supposed. With no confirmation from the Installer side !\r\n\r\n\r\n\r\n"
1875,'','NullReferenceException when doing a send and no mapping is configured\nThis case is now explicitly detected and a better exception is thrown.\r\n\r\n--\r\n\r\nSo this \r\n\r\n```\r\nConfigure.Serialization.Json();\r\nvar bus = Configure.With()\r\n                .DefaultBuilder()\r\n                .UseTransport<Msmq>()\r\n                .InMemorySagaPersister()\r\n                .UnicastBus()\r\n                .CreateBus()\r\n                .Start(() => Configure.Instance.ForInstallationOn<Windows>().Install());\r\nbus.Send(new MyMessage());\r\nConsole.ReadLine();\r\n```\r\nWith no mapping configured for `MyMessage`\r\n\r\nWill result in a `NullReferenceException` with the following stack trace\r\n\r\n```\r\n   at NServiceBus.Transports.Msmq.MsmqUtilities.GetFullPath(Address value) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqUtilities.cs:line 27\r\n   at NServiceBus.Transports.Msmq.MsmqMessageSender.Send(TransportMessage message, Address address) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqMessageSender.cs:line 38\r\n   at NServiceBus.Unicast.Behaviors.DispatchMessageToTransportBehavior.Invoke(SendPhysicalMessageContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\DispatchMessageToTransportBehavior.cs:line 76\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.MessageMutator.MutateOutgoingPhysicalMessageBehavior.Invoke(SendPhysicalMessageContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\MessageMutator\\MutateOutgoingPhysicalMessageBehavior.cs:line 19\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Unicast.Behaviors.SerializeMessagesBehavior.Invoke(SendPhysicalMessageContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\SerializeMessagesBehavior.cs:line 40\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 15\r\n   at NServiceBus.Pipeline.PipelineFactory.Execute[T](BehaviorChain`1 pipelineAction, T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 166\r\n   at NServiceBus.Pipeline.PipelineFactory.InvokeSendPipeline(SendOptions sendOptions, TransportMessage physicalMessage) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 130\r\n   at NServiceBus.Unicast.Behaviors.CreatePhysicalMessageBehavior.Invoke(SendLogicalMessagesContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\CreatePhysicalMessageBehavior.cs:line 52\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Unicast.Behaviors.MultiMessageBehavior.Invoke(SendLogicalMessagesContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\MultiMessageBehavior.cs:line 19\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Unicast.Behaviors.MultiSendValidatorBehavior.Invoke(SendLogicalMessagesContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\MultiSendValidatorBehavior.cs:line 33\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 15\r\n   at NServiceBus.Pipeline.PipelineFactory.Execute[T](BehaviorChain`1 pipelineAction, T context) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 166\r\n   at NServiceBus.Pipeline.PipelineFactory.InvokeSendPipeline(SendOptions sendOptions, IEnumerable`1 messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 97\r\n   at NServiceBus.Unicast.UnicastBus.InvokeSendPipeline(SendOptions sendOptions, List`1 messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 728\r\n   at NServiceBus.Unicast.UnicastBus.SendMessages(SendOptions sendOptions, List`1 messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 704\r\n   at NServiceBus.Unicast.UnicastBus.Send(Object[] messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 550\r\n   at NServiceBus.Unicast.UnicastBus.Send(Object message) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 534\r\n```\r\n\r\nWe should give a better exception'
1874,'','Timeout when setting up the DTC\nSometime our automated installer testing fails with:\r\n\r\nMSDTC status is NOT Running. Changing status...\r\n\r\nCustom action failed: System.ServiceProcess.TimeoutException: Time out has expired and the operation has not been completed.\r\n   at System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus desiredStatus, TimeSpan timeout)\r\n   at NServiceBus.Setup.Windows.ProcessUtil.ChangeServiceStatus(ServiceController controller, ServiceControllerStatus status, Action changeStatus)\r\n   at NServiceBus.Setup.Windows.Dtc.DtcSetup.StartDtcIfNecessary()\r\n   at Particular.CustomActions.CustomActions.<>c__DisplayClassa.<InstallDtc>b__8()\r\n   at Particular.CustomActions.CustomActions.CaptureOut(Action execute, Session session)\r\n   at Particular.CustomActions.CustomActions.InstallDtc(Session session)\r\n\r\nNot sure if there is anything we can do here\r\n\r\nFull install log (see artifacts)\r\n\r\nhttp://builds.particular.net/viewLog.html?buildId=32064&buildTypeId=ServiceInsight_2TestInstaller&tab=buildLog\r\n\r\ncc @gbiellem'
1873,'','Make acceptance test base class partial so that transports can add teardown logic\nThe total amount of queues/topics created during the acceptancetests exceeds the amount of resource allowed in a servicebus namespace (with the current settings), the acceptance tests for this transport should be allowed to clean up after each test so that we stay within the limits of 1 namespace'
1872,'johnsimons','Raise a critical exception if `IWantToRunWhenBusStartsAndStops` `Start` or `Stop` throws an exception\nCurrently if the `IWantToRunWhenBusStartsAndStops` methods `Start` or `Stop` throw an exception the endpoint still starts.\r\n\r\nThis can hides critical issues from the user.\r\n\r\nWe now raise a critical exception that will shutdown the bus.'
1871,'indualagarsamy','InMemory.Raise throws when using CastleWindsorBuilder\nDue to the pipeline not wrapping `InMemory.Raise` in a child container an exception can be thrown\r\n\r\n    InvalidOperationException: Scope was not available. Did you forget to call container.BeginScope()?\r\n\r\n--\r\n\r\nhttps://gist.github.com/kijanawoodard/8118380\r\n\r\nhttps://groups.google.com/forum/#!topic/particularsoftware/PjedMvIwG0U\r\n\r\n'
1870,'','Rename PipelineOverride\nThe following example is not overriding anything:\r\n```c#\r\nclass RavenUnitOfWorkBehaviorPipelineOverride:PipelineOverride\r\n{\r\n       public override void Override(BehaviorList<ReceiveLogicalMessageContext> behaviorList)\r\n       {\r\n           behaviorList.Add<RavenUnitOfWorkBehavior>();\r\n       }\r\n}\r\n```\r\n\r\nI suggest we call it `PipelineRegistration` and modify the interface to:\r\n```c#\r\npublic interface IRegistration\r\n{\r\n    void Modify(BehaviorList<HandlerInvocationContext> behaviorList);\r\n\r\n    void Modify(BehaviorList<ReceiveLogicalMessageContext> behaviorList);\r\n\r\n    void Modify(BehaviorList<ReceivePhysicalMessageContext> behaviorList);\r\n\r\n    void Modify(BehaviorList<SendLogicalMessageContext> behaviorList);\r\n\r\n    void Modify(BehaviorList<SendLogicalMessagesContext> behaviorList);\r\n\r\n    void Modify(BehaviorList<SendPhysicalMessageContext> behaviorList);\r\n}\r\n```\r\n\r\nTo be honest, I would make this "registrations" explicit, something like:\r\n```c#\r\nConfigure.Pipeline...\r\n```\r\nThis way the consumer is in charge of order which currently is non deterministic.\r\n'
1869,'','LicenseManager info statement regarding max throughtput could be improved\nWhen starting an endpoint with a standard license, the endpoint displays information about the license. It displays the configuration value of 0 for MaxThroughputPerSecond, which essentially means unlimited.\r\n\r\nIt would be nice for the  `Unlimited` or `Max` instead of `0`\r\n\r\n````\r\n2013-12-20 11:00:10,777 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - MaxThroughputPerSecond 0\r\n````'
1868,'',"Pipeline executed during unittesting?\nLooks like the pipeline is invoked during unittesting\r\n\r\nhttp://groups.yahoo.com/neo/groups/nservicebus/conversations/topics/20906\r\n\r\nThat isn't normal is it?"
1866,'','Message info duplication?\nAn event is saved with message intent (once as an enumeration numeric representation and once as string) and message ID duplicated:\r\n\r\n```\r\n{\r\n  "IdForCorrelation": null,\r\n  "Id": "69a42358-5c2d-4530-81f7-a2980149efce",\r\n  "MessageIntent": 2,\r\n  "ReplyToAddress": "addr",\r\n  "TimeToBeReceived": "10675199.02:48:05.4775807",\r\n  "Headers": {\r\n    "NServiceBus.MessageId": "69a42358-5c2d-4530-81f7-a2980149efce",\r\n    "NServiceBus.CorrelationId": "9530906e-683e-4b57-adb3-a2980149efd3",\r\n    "NServiceBus.MessageIntent": "Publish",\r\n```'
1865,'','Should we start making things immutable?\nWe already make assumptions that certain things wont change but our API does not reflect that\r\n\r\nFor example\r\n\r\n * [MessageMetadata class]( https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Messages/MessageMetadata.cs) where people can incorrectly set properties\r\n'
1864,'','Introduce a context.Global["key"] feature on our pipeline context\nTo avoid code like this:\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/4b8dba5f6976540243e29971f617d2ba42285b83/src/NServiceBus.AcceptanceTests/Audit/When_using_a_custom_audit_behavior.cs#L63'
1863,'','Set DoNotWrapHandlersExecutionInATransactionScope automatically when Disabling transactions\nWhen you call Disable on transactions, your call is still wrapped in a transactionscope\r\n\r\nSo to get rid of all transactional behavior you need to do both\r\n\r\n```\r\nConfigure.Transactions.Advanced(a => a.DoNotWrapHandlersExecutionInATransactionScope());\r\nConfigure.Transactions.Disable();\r\n```\r\n\r\nWould be better to remove the scope automatically'
1861,'indualagarsamy','When using Azure ServiceBus, not passing in the endpoint address for subscriptions causes a null reference exception.\nWhen we fixed issue #1837 in version `4.3.1`, a check was added to ignore the address count and call the `SubscriptionManager.Subscribe` passing in null as the endpoint address for brokered transports with centralized pub sub support. While it works for ActiveMQ and RabbitMQ, the azure transport expects an address. Passing in null causes a NRE.\r\n\r\n--\r\n**Reason**:\r\nThe endpoint address contains namespace information necessary for the transport. \r\n\r\n**Offending code:**\r\nhttps://github.com/Particular/NServiceBus/blob/e5a5dece716f1cd5020fac7f1f32f8e876bb89c2/src/NServiceBus.Core/Unicast/UnicastBus.cs#L374-385\r\n\r\n**Proposed Solution**\r\n\r\n````c#\r\nif (TransportDefinition.HasSupportForCentralizedPubSub && !IsAzureTransport())\r\n{   \r\n    // We are dealing with a brokered transport wired for auto pub/sub.\r\n    SubscriptionManager.Subscribe(messageType, null);\r\n    return;\r\n}\r\n\r\n[ObsoleteEx(RemoveInVersion = "5.0")]\r\nbool IsAzureTransport()\r\n{\r\n     return TransportDefinition.GetType().Name.ToLower().Contains("azure");\r\n}\r\n\r\n````\r\n\r\n'
1860,'',"We're now handling a message 6 times where we used to do it 5 times\nNotice the equals sign here:\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/455ba1c92585211c81c61cbbdf9ead28cdff80ac/src/NServiceBus.Core/Unicast/Transport/Transactional/TransactionalTransport.cs#L343\r\n\r\nAnd the lack of equals here:\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/master/src/NServiceBus.Core/Unicast/Transport/FirstLevelRetries.cs#L26\r\n\r\nAnd as ASB is configured to move to it's own deadletterqueue at the 6th attempt, message will move there instead of to our error queue\r\n\r\nShould I bump ASB settings to 7 or should I add the equals sign? Note changing the ASB setting to 7 requires users to physically delete the queues and recreate them as this is a queue level setting that cannot be changed.\r\n"
1859,'','NServiceBus fails to shutdown (4.3.0)\n*NB: Unfortunately we haven\'t been able to produce a reproduction yet for this but thought it was worth flagging.*\r\n\r\nWe have noticed that when unprocessed messages are left in the queue (MSMQ in our case) and a new version of our implementation is deployed, if those messages can\'t be processed (including sagas) for whatever reason, NServiceBus will **not** shutdown.\r\n\r\nIn interactive mode, when pressing CTRL-C, NSB states "initiating shutdown" but then (in our case) continued to perform timeout polling regardless. Pressing CTRL-C from this point on-wards had no effect whatsoever. No other errors/messages were logged.\r\n\r\nTo resolve the issue we cleared the appropriate queues and then NSB behaved as expected. Obviously this wouldn\'t have been an option on production! ;-)'
1858,'','Improve output of ReturnToSourceQueue error messages\nIn relation to Issue #1857 the pull request:\r\n\r\n1. fixes the display of the "no message found" error (commit 3cb3385)\r\n2. adds an error message if the header search fails (commit 0529655)\r\n3. adds a progress indicator for the header search (commit 2c8d924)\r\n'
1857,'',"ReturnToSourceQueue error message incorrectly formatted\nFix the incorrect message:\r\n\r\n    No message found with ID 'NServiceBus.MessageId'. Going to check headers of all messages for one with 'NServiceBus.MessageId' or 'NServiceBus.CorrelationId'.\r\n\r\n--\r\n\r\nActual values should be used instead of these placeholders.\r\n\r\nThis issue is in the current version. Creating a branch to fix this."
1856,'andreasohlund','Feature pipeline config\n'
1855,'','Make the type inclusion in our json serializer configurable\nFor users that want to share messages using *.cs files instead the json serializer will prevent this since it includes the $type info. We need to provide a way to opt out of this to allow the message class to reside in different assemblies on the sending vs receiving sidfe'
1854,'','Added audit queue exclusion configuration\nSpike implementation which enables exclusion of messages from audit queue as discussed with Andreas and Remo. This is open for discussion and includes no tests yet!\r\n\r\nConfigure the behaviour with Configure.Features.Audit(f => { f.ExcludeFromAudit(...); f.ExcludeMessageTypeFromAudit(...);});'
1853,'','Can not Load Symbols, NSB 4.3\nSeems as there is a problem with loading symbols for NServiceBus.Core.dll/pdb v4.3\r\n\r\nVS2012: A matching symbol file was not found in this folder.\r\n\r\nWhen selecting the packages/NSB4.3.0/lib/folder'
1852,'johnsimons','Read license from a version agnostic location, so that existing licenses need not be re-installed for newer releases\nOur current way of handling licenses in the registry is wrong since it looks for a subkey containing the {major}.{minor}. This means that users that have installed a 4.2/4.3 license will have to reinstall it again for 4.4 even though the license it self is valid for 4.4\r\n\r\n--\r\n- [x] Update the license installer to put licenses in the HKLM\\ParticularSoftware\\NServiceBus\r\n- [x] Update the licenseinstaller.exe according to the above (#1850)\r\n- [x] Modify the core to read license from the new location (HKLM\\ParticularSoftware\\NServiceBus)\r\n- [x] Modify the core to read license from the old locations as well (4.0, 4.1, 4.2, 4.3)\r\n- [ ] Send email to all customers with instruction to reinstall their license (to make it end up in the correct location)\r\n- [x] Update init.ps to use package version instead of the cmdlet (#1849 )'
1851,'johnsimons','Bus failing to publish interface-defined event when messageConstructor not defined\nWhen publishing using interface-defined events and when the messageConstructor not defined, an exception is thrown and the event is not published.\r\n\r\n--\r\nI came across an error situation which should have been a lot quicker to identify the root cause.\r\n\r\nUsing NServiceBus.Core 4.3.0 and NServiceBus.RabbitMQ 3.2.1\r\nI have an event ITestEvent with one property.  I\'m also using Unobtrusive mode (have been for ages, this isn\'t a new message type).\r\nIf my commandhandler executes the following code it all works as expected:\r\n```cs\r\npublic override void Handle(TestCommand command)\r\n{\r\n    LogTo.Info("Processing a {0} command...", command.GetType().Name);\r\n    Bus.Publish<ITestEvent>(e => e.TestId = Guid.NewGuid());\r\n}\r\n```\r\nbut if my commandhandler executes the following code (forgetting to specify the messageConstructor for the event):\r\n```cs\r\npublic override void Handle(TestCommand command)\r\n{\r\n    LogTo.Info("Processing a {0} command...", command.GetType().Name);\r\n    Bus.Publish<ITestEvent>();  // oops, forgot to set the event properties\r\n}\r\n```\r\nthen I get the following error log:\r\n```\r\nNServiceBus.Unicast.Transport.TransportReceiver - "Failed to process message" with exception \r\nSystem.Exception: Could not find Metadata for \'System.Object\'.\r\nPlease ensure the following:\r\n1. \'System.Object\' is included in initial scanning see File Scanning: http://particular.net/articles/the-nservicebus-host\r\n2. \'System.Object\' implements either \'IMessage\', \'IEvent\' or \'ICommand\' or alternatively, if you don\'t want to implement an interface, you can use \'Unobtrusive Mode\' see: http://particular.net/articles/unobtrusive-mode-messages\r\n   at NServiceBus.Unicast.Messages.MessageMetadataRegistry.GetMessageDefinition(Type messageType) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Messages\\MessageMetadataRegistry.cs:line 18\r\n   at NServiceBus.Unicast.Messages.LogicalMessageFactory.<CreateMultiple>b__0(Object m) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Messages\\LogicalMessageFactory.cs:line 53\r\n   at System.Linq.Enumerable.WhereSelectListIterator`2.MoveNext()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at NServiceBus.Unicast.Messages.LogicalMessageFactory.CreateMultiple(IEnumerable`1 messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Messages\\LogicalMessageFactory.cs:line 48\r\n   at NServiceBus.Unicast.UnicastBus.Publish[T](T[] messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 305\r\n   at NServiceBus.Unicast.UnicastBus.Publish[T](T message) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 276\r\n   at NServiceBus.Unicast.UnicastBus.Publish[T](T[] messages) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 295\r\n   at NServiceBus.Unicast.UnicastBus.Publish[T]() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 284\r\n   at Xero.PostOffice.Test5.TestCommandHandler.Handle(TestCommand command) in c:\\Dev\\temp\\Xero.PostOffice.Test5\\Xero.PostOffice.Test5\\TestCommandHandler.cs:line 19\r\n   at lambda_method(Closure , Object , Object )\r\n   at NServiceBus.Unicast.HandlerInvocationCache.Invoke(Object handler, Object message, Dictionary`2 dictionary) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\HandlerInvocationCache.cs:line 61\r\n   at NServiceBus.Unicast.HandlerInvocationCache.InvokeHandle(Object handler, Object message) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\HandlerInvocationCache.cs:line 22\r\n   at NServiceBus.Unicast.Behaviors.LoadHandlersBehavior.<Invoke>b__1(Object handlerInstance, Object message) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\Behaviors\\LoadHandlersBehavior.cs:line 38\r\n\tSNIP\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\UnitOfWork\\UnitOfWorkBehavior.cs:line 20\r\n```\r\n\r\nSo two questions:\r\n1) My ITestEvent should only ever be published when all its properties have been specified - is there a way to enforce this?\r\n2) Regardless, the error message isn\'t at all helpful - the error isn\'t a bad inheritance chain or unobtrusive msg settings, it\'s that I forgot to set the event properties.  The error message is misleading.'
1850,'johnsimons','Update InstallLicense.exe to read version from license file\nInstead of using Assembly version, we should read the version from the license.xml file.\r\n\r\nThis is needs to be done to fix #1845'
1849,'johnsimons','Update init.ps1 to use package version\nInstead of using `Get-NServiceBusVersion` cmdlet we should be using `$package.Version`\r\n\r\nSee https://github.com/Particular/NServiceBus/blob/develop/packaging/nuget/tools/init.ps1#L21\r\n\r\nThis is needs to be done to fix #1845'
1848,'','Testing of Bus.Defer\nAdded invocation expectations for both versions of Bus.Defer on Test & Saga classes'
1847,'',"Generic catch in DefaultRetryPolicy\nSo in here \r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/SecondLevelRetries/DefaultRetryPolicy.cs#L44\r\n\r\nwe have \r\n\r\n    static bool HasReachedMaxTime(TransportMessage message)\r\n    {\r\n        var timestampHeader = TransportMessageHelpers.GetHeader(message, SecondLevelRetriesHeaders.RetriesTimestamp);\r\n\r\n        if (String.IsNullOrEmpty(timestampHeader))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        try\r\n        {\r\n            var handledAt = DateTimeExtensions.ToUtcDateTime(timestampHeader);\r\n\r\n            if (DateTime.UtcNow > handledAt.AddDays(1))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        catch (Exception)\r\n        {\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\nMy issue is with the generic catch\r\n\r\nI was discussing this with @indualagarsamy  and I cant understand why it would ever be a good idea to swallow all exceptions here. We already check if the header exists. So if for some strange reason the header is not match `yyyy-MM-dd HH:mm:ss:ffffff Z` shouldn't the message be considered invalid and pushed to the error queue?\r\n\r\nOr am I missing something and the catch is legit??"
1846,'andreasohlund','remove test InMemoryDataBus classes\nuse the real implementation instead'
1845,'johnsimons',"Remove Get-NServiceBusVersion commandlet\nGet-NServiceBusVersion commandlet reported the version of `NServiceBus.Powershell.dll` and not the version of the NSB within the solution. NServiceBus.Powershell dll has been separated from the core in order that it could be released independantly of the core if need be. This commandlet does not make sense, as we can have multiple endpoints referencing different versions of NServiceBus on the same machine.\r\n\r\n--\r\n**Steps to repro:**\r\nI have nsb 4.2 installed via MSI while working in VS i've downloaded via nuget v4.3, Get-NServiceBusVersion reports back:\r\n\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n4      2      0      -1      \r\n\r\nwhile the reference assembly of the project shows v4.3 of the assembly.\r\n "
1843,'yvesgoeleven','Transport cannot check if queues need to be created or not.\nAs ConfigureQueueCreation.DontCreateQueues is internal, making it public but decorated with [EditorBrowsable(EditorBrowsableState.Advanced)]'
1842,'','NLog Logger parameters\nWhen using NLog and providing Message and Exception, the Exception is not written out.\r\n'
1841,'','Fix typo in the license dialog\nThe trial expiration dialog has a typo in the explanation text.\r\n\r\n--\r\nAfter trial expires, the user is presented with the following dialog.\r\nIt has a typo\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1721806/33b3bfba-622f-11e3-8fbe-9fbbb7383de8.png)\r\n'
1840,'','Trial expiry window no longer popping up when running in the emulator\nIn NSB 4.3 the trial expiry window is no longer popping up when running in the emulator, making the process hang and not allowing you to select a license either.\r\n\r\n--\r\n\r\ncopied from https://github.com/Particular/NServiceBus.Azure/issues/84'
1839,'','EncryptionMessageMutator is encryptiong lazy loaded EF code-first properties\nWith NServiceBus 4.3, we have observed performance degradation in terms of the delay measured as the time from a raising an event to the time handling it\r\n\r\nWe are using NServiceBus for domain events (InMemory) in which we are passing reference to the entity raising the event (e.g. bus.InMemory.Raise(new ScheduleExceptionActivated(ScheduleException, this));\r\n\r\nAll our entities are part of the EF Code First model and are partly loaded due to EF lazy load feature. \r\n\r\nAfter investigation I believe that the reasons for performance degradation lies in EncryptionMessageMutator that is loading all entity properties from the database. This in our case takes 15 sec or more. \r\n\r\nI do not know how this worked in previous versions but I have strong believe that it did not load all properties of the given entity. Furthermore, I do not see any point for encrypting messages with InMemory persistence.'
1837,'','Invalid operation exception, when trying to auto subscribe to events when using Brokered transports\nWhen using brokered transports that offer support for centralized pub/sub like `RabbitMQ` and `ActiveMQ`, the `EndpointMappings` to specify event subscriptions are not needed. However, without it, an InvalidOperation exception was being thrown.\r\n\r\n--\r\n**Steps to Repro**\r\n1. Have a pub/sub sample that uses RabbitMQ as transport\r\n2. Add the appropriate assembly redirects for the correct version of NServiceBus.Core and NServiceBus.Host\r\n3. Remove the `EndpointMessageMappings` in the unicast bus section for the subscriber.\r\n4. Notice the error upon startup:\r\n\r\n````\r\n2013-12-09 10:46:09,043 [23] ERROR NServiceBus.Unicast.UnicastBus [(null)] <(null)> - System.InvalidOperationException: No destination could be found for message type Messages.Events.IGotRadarStatistics. Check the <MessageEndpointMappings>\r\nsection of the configuration of this endpoint for an entry either for this specific message type or for its assembly.\r\n   at NServiceBus.Unicast.UnicastBus.Subscribe(Type messageType, Predicate`1 condition) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 377\r\n   at NServiceBus.Unicast.UnicastBus.Subscribe(Type messageType) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 328\r\n   at NServiceBus.AutomaticSubscriptions.AutoSubscriber.Start() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\AutomaticSubscriptions\\AutoSubscriber.cs:line 24\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass1f.<Start>b__1d() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 786 could not be started.\r\n````\r\n\r\n**Workaround**\r\nAdd the message mappings in app.config.\r\n\r\n**NOTE**: This used to work in version `4.2`'
1836,'','NServiceBus Reply Message (No handlers could be found...)\nI noticed a similar behavior as described here:\r\n\r\nhttp://stackoverflow.com/questions/12379586/nservicebus-reply-message-warning\r\n\r\nWe are using ActiveMQ and NService Bus:\r\nWe have a client that Sends a message to the bus and consumes the Reply. This works as expected and the client gets the result without any error but the message is still not consumed and finally ends in the error queue after some retries.\r\n\r\nError message:\r\nSystem.InvalidOperationException: No handlers could be found for message type: ch.curabill.msp.service.checkAddressResponse at NServiceBus.Pipeline.Behaviors.LoadHandlersBehavior.Invoke(BehaviorContext context, Action next) in :line 0 at \r\n\r\nIs this a bug or do i miss something?'
1835,'','v 4.3 ServiceLocator is failing w/o assembly binding directive\nWith v4.3 it looks like assembly binding has to be in place (bellow) or NSB fails with exception thrown by service locator.\r\n\r\n1. This is an undesired way of handling things - another thing to remember when upgrading\r\n2. When projects are updated to 4.3, web.config is updated, but app.config files are not. Below block is missing.\r\n\r\n```\r\n  <runtime>\r\n    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name="NServiceBus.Core" publicKeyToken="9fc386479f8a226c" culture="neutral" />\r\n        <bindingRedirect oldVersion="0.0.0.0-4.3.0.0" newVersion="4.3.0.0" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name="NServiceBus" publicKeyToken="9fc386479f8a226c" culture="neutral" />\r\n        <bindingRedirect oldVersion="0.0.0.0-4.3.0.0" newVersion="4.3.0.0" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n  </runtime>\r\n```'
1834,'',"NServicebus 4.2 logs warning about message not found in registry\nHi we have recently upgraded to NSB 4.2 from 3.5.\r\n\r\nAfter the upgrade NSB logs a warning\r\n\r\n    Message header 'SomeNamespace.ISomeEvent__impl, NServiceBus.Scheduling.Messages__impl, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' was mapped to type  'SomeNamespace.ISomeEvent__impl' but that type was not found in the message registry, please make sure the same message registration conventions are used in all endpoints, specially if you are using unobtrusive mode. MessageId: 37cbec38-7957-4b7a-b313-804f6ed3b6fd\\37679827\r\n\r\nIf i debug i can see we have a entry in message registry for SomeNamespace.ISomeEvent But the type it looks for is SomeNamespace.ISomeEvent__impl.\r\n\r\nWe have not changed our unobtrusive settings after the upgrade, so question is what has changed?\r\n\r\nI can see the logging has changed in change set 5f1c72ba, seems the file has been renamed or something so cant seem to see full history.\r\n\r\nHave we always had the problem, but only recently logging behavior in NSB has changed?\r\n\r\nAlso open on SO\r\nhttp://stackoverflow.com/questions/20394590/nservicebus-4-2-logs-warning-about-message-not-found-in-registry\r\n\r\n"
1833,'','Fix for #1832\n1. Removed method `GetSagaTypeToStartIfMessageNotFoundByFinder` which was not being called at all!\r\n2. `ShouldMessageStartSaga` will return true if the message type that is tied to the saga is an assignable type to the message type being evaluated.\r\n3. Added an acceptance test for this scenario.  \r\n\r\nAlso need to investigate why the above method is no longer being called and if there are any other side effects!! \r\n\r\n@andreasohlund @SimonCropp - code review please!\r\n\r\nPR against master to show just the changes being made for this fix!'
1832,'','Saga is not started, when using a base class event to start the saga\nWhen you specify a base event in the `IAmStartedByMessages<T>` and a derived event is being published the saga does not start.\r\n\r\n--\r\n\r\n**Steps to repro:**\r\n1. Have a message class hierarchy where there is a base event and an event derived from the base event\r\n2. Publish the derived event.\r\n3. Have a message handler that subscribes to the base event\r\n4. Have a saga that is also started by the base event.\r\n\r\n````c#\r\npublic class BaseEventSaga : Saga<BaseEventSagaData>, IAmStartedByMessages<IBaseEvent>\r\n    {\r\n\r\n        public void Handle(IBaseEvent message)\r\n        {\r\n            Console.WriteLine("Base Event received -- {0}", message.Name);\r\n            MarkAsComplete();\r\n        }\r\n````\r\n\r\nNote that while the message handler gets invoked as expected, the saga is not started and returns an error message:\r\n\r\n````\r\n2013-12-05 10:05:30,591 [8] WARN  NServiceBus.Sagas.SagaPersistenceBehavior [(null)] <(null)> - \r\nCould not find a saga for the message type Messages.Events.IDerivedEvent with id e0728670-851f-4b52-a170-a28b00a64c0e. Going to invoke SagaNotFoundHandlers.\r\n````\r\n\r\n\r\n'
1831,'andreasohlund','delay loading of license\nto give fluent API a chance to configure it'
1830,'','[WIP] Raven missing methods btw 2.0 and 2.5\n@SimonCropp can you take a look at the exception when the saga is completed.\r\n\r\nTo repro just open up the TimeoutManagerSample and hit S to start a saga'
1829,'','Test that show issue #1827\nIt looks this problem affects UnityObjectBuilder, WindsorObjectBuilder and NinjectObjectBuilder.'
1828,'',"Intermittently sagas don't complete when dealing with out of order messages when using Raven as persistence\n**Steps to repro**\r\n1. Run the attached sample.\r\n2. Press enter on the client, this will send two commands to two endpoints and each of which publishes an event\r\n3. A subscriber has both a generic handler and a saga that gets started by either event, when both events are received saga should complete. But sometimes, Raven has left over of the sagas.\r\n4. Keep pressing enter to generate a lot of messages. \r\n\r\n**Version used:** `4.3 - Beta 1.20`\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1669925/3682c58c-5c86-11e3-82eb-aeca82336143.png)\r\n\r\n**Repro in**:\r\nhttps://github.com/Particular/BugsRepro/tree/master/NServiceBus%204.3%20Bugs/1828\r\n"
1827,'',"SingleCallChannelReceiver doesn't work with unity\n`SingleCallChannelReceiver` doesn't work with `UnityBuilder`.\r\n\r\nLogs with `UnityBuilder`:\r\n\r\n    2013-12-02 10:04:43.9703 DEBUG NServiceBus.Gateway.Receiving.IdempotentChannelReceiver Received message of type SingleCallSubmit for client id: 4e5cde3c-b09e-4943-8379-b5a5f88d589e \r\n    2013-12-02 10:04:43.9863 DEBUG NServiceBus.Gateway.Channels.Http.HttpChannelReceiver Sending HTTP 200 response. \r\n    2013-12-02 10:04:44.0143 DEBUG NServiceBus.Gateway.Channels.Http.HttpChannelReceiver Http request processing complete.\r\n\r\nWhen I change builder from `UnityBuilder` to `DefaultBuilder` log looks like this:\r\n\r\n    2013-12-02 10:18:44.5661 DEBUG NServiceBus.Gateway Received message of type SingleCallSubmit for client id: 9a85fc19-dd91-411d-9f82-2f7c793236ed \r\n    2013-12-02 10:18:44.6111 INFO NServiceBus.Gateway.Receiving.GatewayReceiver Sending message to Notifications \r\n    2013-12-02 10:18:45.0402 DEBUG NServiceBus.Gateway.Channels.Http.HttpChannelReceiver Sending HTTP 200 response. \r\n    2013-12-02 10:18:45.0722 DEBUG NServiceBus.Gateway.Channels.Http.HttpChannelReceiver Http request processing complete. \r\n\r\nIt looks like this line: https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Gateway/Receiving/GatewayReceiver.cs#L64 resolve `IdempotentChannelReceiver` when you use Unity and `SingleCallChannelReceiver` when you use default builder"
1826,'','KeyNotFoundException when sending over http message without headers.\nWhen I send message over http to gateway without headers I receive the following exception:\r\n\r\n    ERROR Unexpected error System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n       at System.ThrowHelper.ThrowKeyNotFoundException()\r\n       at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n       at NServiceBus.Gateway.Receiving.IdempotentChannelReceiver.GetCallInfo(DataReceivedOnChannelArgs receivedData) in :line 0\r\n       at NServiceBus.Gateway.Receiving.IdempotentChannelReceiver.DataReceivedOnChannel(Object sender, DataReceivedOnChannelArgs e) in :line 0\r\n       at NServiceBus.Gateway.Channels.Http.HttpChannelReceiver.Handle(HttpListenerContext context) in :line 0'
1825,'','Intermittent Unhandled exception in MsmqDequeueStrategy when processing messages in basic license mode\n**Steps to repro:**\r\n**NOTE:** Make sure to run under the basic 1 licensing so only 1 message will be processed in a second.\r\n1. Run the scale out sample (converted to `4.3-Beta1.12`)\r\n2. Run the Orders.Handler as a distributor, so you can run 2 workers.\r\n3. Send a lot of orders from the orders.client. \r\n4. As the distributor processes the messages to both workers, see the unhandled exception popup:\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1652749/109e64c8-5b20-11e3-8965-a5f1b79866ef.png)\r\n'
1824,'','split extract and execute messages\n'
1823,'johnsimons','Check for royalty free license expiry\nAdd grace period only if date less than DateTime.MaxValue'
1822,'johnsimons',"ExpiryChecker.IsExpired doesn't work well with royalty free licenses\nRoyalty free license has an expiry date of 31/12/9999 12:00:00 AM\r\nAfter adding the one day grace period, an `OutOfRangeException` is thrown by `ExpiryChecker.IsExpired`\r\n"
1821,'','Request Response between sites is not finding the registered callback\nDue to message `CorrelationId` not being sent\r\n\r\n--\r\n\r\n**Relates to:**\r\nhttps://github.com/Particular/NServiceBus/issues/1411\r\n\r\n**Steps to repro**\r\nDownload the repro from 1411 and upgrade it to 4.3.\r\n\r\nAlthough the correlation no longer has the `\\0`:\r\n\r\n\r\nIn **4.3** - the callback is not received, and the code exceptions with:\r\n````\r\nSystem.InvalidOperationException: No handlers could be found for message type: M\r\nessages.Answer\r\n   at NServiceBus.Unicast.Behaviors.LoadHandlersBehavior.Invoke(ReceiveLogicalMe\r\nssageContext context, Action next) in c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NS\r\nerviceBus.Core\\Unicast\\Behaviors\\LoadHandlersBehavior.cs:line 30\r\n````\r\nIn **4.2** - Although the call back is received, the following exception is thrown:\r\n\r\n````\r\n2013-11-29 19:06:46,245 [26] DEBUG NServiceBus.Pipeline.Behaviors.MessageHandlin\r\ngLoggingBehavior [(null)] <(null)> - Received message with ID c70bdd68-a09d-4975\r\n-834f-a285013af82d from sender Site1.gateway@SELENE\r\nThe answer to your question is 42.\r\nAll done.\r\n2013-11-29 19:06:46,410 [26] INFO  NServiceBus.Unicast.Transport.TransportReceiv\r\ner [(null)] <(null)> - Failed to process message\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present i\r\nn the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at NServiceBus.Pipeline.Behaviors.LoadedMessageHandlers.GetHandlersFor(Type m\r\nessageType) in :line 0\r\n   at NServiceBus.Sagas.SagaPersistenceBehavior.<DetectSagas>d__0.MoveNext() in\r\n:line 0\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at NServiceBus.Sagas.SagaPersistenceBehavior.Invoke(BehaviorContext context,\r\nAction next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.LoadHandlersBehavior.Invoke(BehaviorContext\r\n context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.CallbackInvocationBehavior.Invoke(BehaviorC\r\nontext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingMessageMutatorsBehavior.Invoke\r\n(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(Behav\r\niorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.RaiseMessageReceivedBehavior.Invoke(Behavio\r\nrContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingTransportMessageMutatorsBehavi\r\nor.Invoke(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(BehaviorContext context,\r\nAction next) in :line 0\r\n2013-11-29 19:06:46,433 [27] DEBUG NServiceBus.Pipeline.Behaviors.MessageHandlin\r\ngLoggingBehavior [(null)] <(null)> - Received message with ID c70bdd68-a09d-4975\r\n-834f-a285013af82d from sender Site1.gateway@SELENE\r\n2013-11-29 19:06:46,545 [27] INFO  NServiceBus.Unicast.Transport.TransportReceiv\r\ner [(null)] <(null)> - Failed to process message\r\nSystem.InvalidOperationException: No handlers could be found for message type: M\r\nessages.Answer\r\n   at NServiceBus.Pipeline.Behaviors.LoadHandlersBehavior.Invoke(BehaviorContext\r\n context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.CallbackInvocationBehavior.Invoke(BehaviorC\r\nontext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingMessageMutatorsBehavior.Invoke\r\n(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(Behav\r\niorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.RaiseMessageReceivedBehavior.Invoke(Behavio\r\nrContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingTransportMessageMutatorsBehavi\r\nor.Invoke(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(BehaviorContext context,\r\nAction next) in :line 0\r\n2013-11-29 19:06:46,560 [28] DEBUG NServiceBus.Pipeline.Behaviors.MessageHandlin\r\ngLoggingBehavior [(null)] <(null)> - Received message with ID c70bdd68-a09d-4975\r\n-834f-a285013af82d from sender Site1.gateway@SELENE\r\n2013-11-29 19:06:46,672 [28] INFO  NServiceBus.Unicast.Transport.TransportReceiv\r\ner [(null)] <(null)> - Failed to process message\r\nSystem.InvalidOperationException: No handlers could be found for message type: M\r\nessages.Answer\r\n   at NServiceBus.Pipeline.Behaviors.LoadHandlersBehavior.Invoke(BehaviorContext\r\n context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.CallbackInvocationBehavior.Invoke(BehaviorC\r\nontext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingMessageMutatorsBehavior.Invoke\r\n(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(Behav\r\niorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.RaiseMessageReceivedBehavior.Invoke(Behavio\r\nrContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingTransportMessageMutatorsBehavi\r\nor.Invoke(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(BehaviorContext context,\r\nAction next) in :line 0\r\n2013-11-29 19:06:46,687 [29] DEBUG NServiceBus.Pipeline.Behaviors.MessageHandlin\r\ngLoggingBehavior [(null)] <(null)> - Received message with ID c70bdd68-a09d-4975\r\n-834f-a285013af82d from sender Site1.gateway@SELENE\r\n2013-11-29 19:06:46,798 [29] INFO  NServiceBus.Unicast.Transport.TransportReceiv\r\ner [(null)] <(null)> - Failed to process message\r\nSystem.InvalidOperationException: No handlers could be found for message type: M\r\nessages.Answer\r\n   at NServiceBus.Pipeline.Behaviors.LoadHandlersBehavior.Invoke(BehaviorContext\r\n context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.CallbackInvocationBehavior.Invoke(BehaviorC\r\nontext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingMessageMutatorsBehavior.Invoke\r\n(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(Behav\r\niorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.RaiseMessageReceivedBehavior.Invoke(Behavio\r\nrContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingTransportMessageMutatorsBehavi\r\nor.Invoke(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(BehaviorContext context,\r\nAction next) in :line 0\r\n2013-11-29 19:06:46,812 [30] DEBUG NServiceBus.Pipeline.Behaviors.MessageHandlin\r\ngLoggingBehavior [(null)] <(null)> - Received message with ID c70bdd68-a09d-4975\r\n-834f-a285013af82d from sender Site1.gateway@SELENE\r\n2013-11-29 19:06:46,921 [30] INFO  NServiceBus.Unicast.Transport.TransportReceiv\r\ner [(null)] <(null)> - Failed to process message\r\nSystem.InvalidOperationException: No handlers could be found for message type: M\r\nessages.Answer\r\n   at NServiceBus.Pipeline.Behaviors.LoadHandlersBehavior.Invoke(BehaviorContext\r\n context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.CallbackInvocationBehavior.Invoke(BehaviorC\r\nontext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingMessageMutatorsBehavior.Invoke\r\n(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(Behav\r\niorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.RaiseMessageReceivedBehavior.Invoke(Behavio\r\nrContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingTransportMessageMutatorsBehavi\r\nor.Invoke(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(BehaviorContext context,\r\nAction next) in :line 0\r\n2013-11-29 19:06:46,935 [31] ERROR NServiceBus.Faults.InMemory.FaultManager [(nu\r\nll)] <(null)> - Message processing always fails for message with ID c70bdd68-a09\r\nd-4975-834f-a285013af82d.\r\nSystem.InvalidOperationException: No handlers could be found for message type: M\r\nessages.Answer\r\n   at NServiceBus.Pipeline.Behaviors.LoadHandlersBehavior.Invoke(BehaviorContext\r\n context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.CallbackInvocationBehavior.Invoke(BehaviorC\r\nontext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingMessageMutatorsBehavior.Invoke\r\n(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(Behav\r\niorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.RaiseMessageReceivedBehavior.Invoke(Behavio\r\nrContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingTransportMessageMutatorsBehavi\r\nor.Invoke(BehaviorContext context, Action next) in :line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in\r\n:line 0\r\n   at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() i\r\nn :line 0\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(BehaviorContext context,\r\nAction next) in :line 0\r\n````\r\n'
1820,'indualagarsamy','Bus.Defer does not work when passed a date time with DateTime.Now.AddSeconds\nDue to the use of local time instead of universal time.\r\n\r\n--\r\n\r\n**Steps to repro**\r\n\r\n1. Run the timeout sample\r\n2. Press D to defer the message.\r\n\r\nNOTE: \r\nIf you change both these to use `UtcNow` instead of `Now`, it works as expected.\r\n````c#\r\n void DeferMessage()\r\n        {\r\n            Console.WriteLine(string.Format("{0} - {1}", DateTime.Now.ToLongTimeString(), "Sending a message to be processed at a later time"));\r\n            Bus.SendLocal(new DeferredMessage\r\n                              {\r\n                                  ProcessAt = DateTime.Now.AddSeconds(10)\r\n                              });\r\n        }\r\n````\r\n\r\n````c#\r\n public void Handle(DeferredMessage message)\r\n        {\r\n            if(DateTime.Now < message.ProcessAt)\r\n            {\r\n                LogMessage("Message will be processed at " + message.ProcessAt.ToLongTimeString());\r\n\r\n                Bus.Defer(message.ProcessAt, message);\r\n                return;\r\n            }\r\n\r\n            LogMessage("Deferred message processed");\r\n        }\r\n````\r\n\r\n**NOTE:** This used to work in the previous versions.\r\n\r\nNotice that it does not defer properly. \r\n![image](https://f.cloud.github.com/assets/854553/1647977/c44929de-5960-11e3-9dd0-8600aff164f2.png)\r\n\r\n\r\n**Repro**\r\nhttps://www.dropbox.com/sh/ghrr6c4wcuqpmce/7K3V01X2Rn\r\n'
1819,'johnsimons','When using unobtrusive mode, saga timeouts are triggered, it does not find the TimeoutHandlers and instead SagaNotFound handlers are invoked\nDue to the static `ExtensionMethods.CurrentMessageBeingHandled` not being correctly handled int he pipeline\r\n\r\n--\r\n\r\n**Steps to repro** (Use the unobtrusive sample)\r\n1. Send a start saga message from a 4.3 client endpoint\r\n2. Run a 4.3 server endpoint. Have the saga request a timeout. Notice that when the saga timeout occurs, it invokes the Saga not found.\r\n\r\n**Repro**\r\nhttps://www.dropbox.com/sh/wmay9ngy8dxpwv5/mDGukTPPg3\r\n\r\nNOTE: It does not work in either saga persistence (default / NH 4.3 beta1)\r\nand works when using 4.2 version of NServiceBus in Server endpoint.\r\n\r\nI used the unobtrusive sample. \r\n\r\n**Saga Code**\r\n````c#\r\nnamespace Server.Saga\r\n{\r\n    public class SimpleSaga : Saga<SimpleSagaData>,\r\n        IAmStartedByMessages<StartSaga>,\r\n        IHandleTimeouts<MyTimeOutState>,\r\n        IHandleTimeouts<MyTimeOutState2>\r\n    {\r\n        public void Handle(StartSaga message)\r\n        {\r\n            Data.OrderId = message.OrderId;\r\n            var someState = new Random().Next(10);\r\n            LogMessage("Requesting a custom timeout v3.0 style, SomeValue: " + someState);\r\n            LogMessage("Requesting a custom timeout v3.0 style, State: " + SomeState.InitialState);\r\n            LogMessage("Requesting a custom timeout v3.0 style, Name: " + SomeState.FinalState);\r\n\r\n            RequestTimeout<MyTimeOutState>(TimeSpan.FromSeconds(5));\r\n            RequestTimeout<MyTimeOutState2>(new DateTime(2013, 10, 14, 23, 08, 0, DateTimeKind.Local));\r\n\r\n        }\r\n\r\n        public override void ConfigureHowToFindSaga()\r\n        {\r\n            ConfigureMapping<StartSaga>(message => message.OrderId).ToSaga(sagaData => sagaData.OrderId);\r\n        }\r\n\r\n        void LogMessage(string message)\r\n        {\r\n            Console.WriteLine(string.Format("{0} - {1}", DateTime.Now.ToLongTimeString(),message));\r\n        }\r\n\r\n        public void Timeout(MyTimeOutState state)\r\n        {\r\n            LogMessage("v3.0 Timeout fired, with SomeValue: " + state.SomeValue);\r\n            LogMessage("v3.0 Timeout fired, with State: " + state.State);\r\n            LogMessage("v3.0 Timeout fired, with Name: " + state.Name);\r\n\r\n            LogMessage("Marking the saga as complete");\r\n            ReplyToOriginator<Response>(m=> { m.ResponseId = Guid.NewGuid(); });\r\n            MarkAsComplete();\r\n        }\r\n\r\n        public void Timeout(MyTimeOutState2 state2)\r\n        {\r\n            LogMessage("MyTimeoutState2 fired -- " + DateTime.Now.ToString());\r\n        }\r\n    }\r\n}\r\n````\r\n\r\n**Timeouts**\r\n````c#\r\nnamespace Server.Timeout.Classes\r\n{\r\n\r\n    public enum SomeState\r\n    {\r\n        InitialState, \r\n        FinalState\r\n    }\r\n\r\n    public class MyTimeOutState\r\n    {\r\n        public int SomeValue { get; set; }\r\n        public  SomeState State {get; set;}\r\n        public SomeState Name { get; set; }\r\n    }\r\n\r\n    public class MyTimeOutState2\r\n    {\r\n    }\r\n}\r\n````\r\n\r\n**SagaData**\r\n````c#\r\nusing System;\r\nusing NServiceBus.Saga;\r\n\r\nnamespace Server.Saga\r\n{\r\n    public class SimpleSagaData : IContainSagaData\r\n    {\r\n        public virtual Guid Id { get; set; }\r\n        public virtual string Originator { get; set; }\r\n        public virtual string OriginalMessageId { get; set; }\r\n\r\n        [Unique]\r\n        public virtual Guid OrderId { get; set; }\r\n    }\r\n}\r\n````\r\n**Start Saga Command**\r\n````c#\r\nnamespace Commands\r\n{\r\n    public class StartSaga\r\n    {\r\n        public Guid OrderId { get; set; }\r\n    }\r\n}\r\n````\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1647818/5e19fd7a-5954-11e3-968c-44a282779cc9.png)'
1818,'johnsimons','NullReferenceException after enabling gateway without gatewayconfig in app.config\nDue to a missing null check on `GatewayConfig`\r\n\r\n--\r\n\r\nAfter I enabled gateway feature I received the following exception:\r\n\r\n```\r\n    System.AggregateException: One or more errors occurred. ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n       at NServiceBus.Gateway.Sending.GatewaySender.<GetReceiverCustomization>b__0(TransportReceiver transport) in :line 0\r\n       at NServiceBus.Satellites.SatelliteLauncher.<>c__DisplayClass4.<Start>b__2(Int32 index) in :line 0\r\n       at System.Threading.Tasks.Parallel.<>c__DisplayClassf`1.<ForWorker>b__c()\r\n       at System.Threading.Tasks.Task.InnerInvoke()\r\n       at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)\r\n       at System.Threading.Tasks.Task.<>c__DisplayClass11.<ExecuteSelfReplicating>b__10(Object param0)\r\n       --- End of inner exception stack trace ---\r\n       at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n       at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n       at System.Threading.Tasks.Task.Wait()\r\n       at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n       at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, Action`1 body)\r\n       at NServiceBus.Satellites.SatelliteLauncher.Start() in :line 0\r\n       at NServiceBus.Unicast.UnicastBus.Start(Action startupAction) in :line 0\r\n       at NServiceBus.Unicast.UnicastBus.Start() in :line 0\r\n       at NServiceBus.Hosting.GenericHost.Start() in :line 0\r\n       at NServiceBus.Hosting.Windows.WindowsHost.Start() in :line 0\r\n       at NServiceBus.Hosting.Windows.Program.<>c__DisplayClassd.<Main>b__5(WindowsHost service) in :line 0\r\n       at Topshelf.Internal.ControllerDelegates`1.StartActionObject(Object obj) in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\ControllerDelegates.cs:line 17\r\n       at Topshelf.Internal.IsolatedServiceControllerWrapper`1.<>c__DisplayClass2.<set_StartAction>b__1(TService service) in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\IsolatedServiceControllerWrapper.cs:line 65\r\n       at Topshelf.Internal.ServiceController`1.<.cctor>b__1(ServiceController`1 sc) in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\ServiceController.cs:line 35\r\n       at Magnum.StateMachine.LambdaAction`1.Execute(T instance, Event event, Object parameter) in :line 0\r\n       at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter) in :line 0\r\n    ---> (Inner Exception #0) System.NullReferenceException: Object reference not set to an instance of an object.\r\n       at NServiceBus.Gateway.Sending.GatewaySender.<GetReceiverCustomization>b__0(TransportReceiver transport) in :line 0\r\n       at NServiceBus.Satellites.SatelliteLauncher.<>c__DisplayClass4.<Start>b__2(Int32 index) in :line 0\r\n       at System.Threading.Tasks.Parallel.<>c__DisplayClassf`1.<ForWorker>b__c()\r\n       at System.Threading.Tasks.Task.InnerInvoke()\r\n       at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)\r\n       at System.Threading.Tasks.Task.<>c__DisplayClass11.<ExecuteSelfReplicating>b__10(Object param0)<---\r\n```\r\n\r\nI have no `GatewayConfig` in my endpoint app.config'
1817,'','Add ability to toggle message validation checks\nAdded MessagingBestPractices.TurnOffAllChecks'
1816,'','NServiceBus.Host.exe endpointName install changes from 3.3.5 to 4.2\nHi,\r\n\r\nIf I in 3.3.5 installed a service with \r\n.\\NServiceBus.Host.exe /install nservicebus.integration nservicebus.performancecounters /servicename:"MyService"\r\n\r\nIt ended up as a service with the following path. \r\n"...NServiceBus.Host.exe" -service nservicebus.integration nservicebus.performancecounters /serviceName:MyService /endpointName:MyService"\r\n\r\nWhich I guess is correct according the following information http://support.nservicebus.com/customer/portal/articles/862420-how-to-specify-your-input-queue-name- \r\nIf I install it in the same way in 4.2 it ends up without /endpointName specified. Is this intended? \r\n"...NServiceBus.Host.exe" -service nservicebus.integration nservicebus.performancecounters /serviceName:MyService"'
1814,'andreasohlund','ncrunch cannot build licenseinstaller\nncrunch fails because x86 debug/release configurations not defined in project file'
1813,'',"Incorrectly shutting down of the pipeline \nCausing `ObjectDisposedException`\r\n\r\n--\r\n\r\nOn a busy system with messages in the queue if you issue a shutdown of the host the following are raised:\r\n```\r\n2013-11-29 14:59:47,254 [11] INFO  NServiceBus.Unicast.UnicastBus [(null)] <(null)> - Initiating shutdown.\r\n2013-11-29 14:59:47,303 [13] INFO  NServiceBus.Satellites.SatelliteLauncher [(null)] <(null)> - Stopped 3/3 'NServiceBus.SecondLevelRetries.SecondLevelRetriesProcessor, NServiceBus.Core, Version=4.3.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-11-29 14:59:47,393 [63] ERROR NServiceBus.Unicast.Transport.TransportReceiver [(null)] <(null)> - Failed raising 'finished message processing' event.\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'PipelineFactory'.\r\n   at NServiceBus.Pipeline.PipelineFactory.ThrowIfDisposed()\r\n   at NServiceBus.Pipeline.PipelineFactory.CompletePhysicalMessagePipelineContext() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 52\r\n   at NServiceBus.Unicast.UnicastBus.TransportFinishedMessageProcessing(Object sender, FinishedMessageProcessingEventArgs e) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1030\r\n   at NServiceBus.Unicast.Transport.TransportReceiver.OnFinishedMessageProcessing(TransportMessage msg) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Transport\\TransportReceiver.cs:line 435\r\n2013-11-29 14:59:47,428 [11] INFO  NServiceBus.Satellites.SatelliteLauncher [(null)] <(null)> - Stopped 1/3 'NServiceBus.Timeout.Hosting.Windows.TimeoutMessageProcessor, NServiceBus.Core, Version=4.3.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-11-29 14:59:47,446 [63] INFO  NServiceBus.Unicast.Transport.TransportReceiver [(null)] <(null)> - Failed to process message\r\nSystem.AggregateException: One or more errors occurred. ---> System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'BehaviorContextStacker'.\r\n   at NServiceBus.Pipeline.BehaviorContextStacker.ThrowIfDisposed()\r\n   at NServiceBus.Pipeline.BehaviorContextStacker.Pop() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorContextStacker.cs:line 31\r\n   at NServiceBus.Pipeline.PipelineFactory.Execute[T](BehaviorChain`1 pipelineAction, T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 169\r\n   at NServiceBus.Pipeline.PipelineFactory.InvokeLogicalMessagePipeline(LogicalMessage message) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 68\r\n   at NServiceBus.Unicast.Messages.ExtractLogicalMessagesBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Messages\\ExtractLogicalMessagesBehavior.cs:line 67\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Unicast.Behaviors.RaiseMessageReceivedBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Behaviors\\RaiseMessageReceivedBehavior.cs:line 15\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.MessageMutator.ApplyIncomingTransportMessageMutatorsBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\MessageMutator\\ApplyIncomingTransportMessageMutatorsBehavior.cs:line 18\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\UnitOfWork\\UnitOfWorkBehavior.cs:line 20\r\n   --- End of inner exception stack trace ---\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.AppendEndExceptionsAndRethrow(Exception parentException) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\UnitOfWork\\UnitOfWorkBehavior.cs:line 51\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\UnitOfWork\\UnitOfWorkBehavior.cs:line 29\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Unicast.Behaviors.ForwardBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Behaviors\\ForwardBehavior.cs:line 21\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Audit.AuditBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Audit\\AuditBehavior.cs:line 13\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Unicast.Behaviors.ImpersonateSenderBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Behaviors\\ImpersonateSenderBehavior.cs:line 33\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Unicast.Behaviors.MessageHandlingLoggingBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Behaviors\\MessageHandlingLoggingBehavior.cs:line 21\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Unicast.Behaviors.ChildContainerBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Behaviors\\ChildContainerBehavior.cs:line 14\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 15\r\n   at NServiceBus.Pipeline.PipelineFactory.InvokeReceivePhysicalMessagePipeline() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 48\r\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1015\r\n   at NServiceBus.Unicast.Transport.TransportReceiver.OnTransportMessageReceived(TransportMessage msg) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Transport\\TransportReceiver.cs:line 453   at NServiceBus.Unicast.Transport.TransportReceiver.ProcessMessage(TransportMessage message) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Transport\\TransportReceiver.cs:line 382\r\n   at NServiceBus.Unicast.Transport.TransportReceiver.TryProcess(TransportMessage message) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Transport\\TransportReceiver.cs:line 258\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.ProcessMessage(TransportMessage message) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqDequeueStrategy.cs:line 288\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Action() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqDequeueStrategy.cs:line 239\r\n---> (Inner Exception #0) System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'BehaviorContextStacker'.\r\n   at NServiceBus.Pipeline.BehaviorContextStacker.ThrowIfDisposed()\r\n   at NServiceBus.Pipeline.BehaviorContextStacker.Pop() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorContextStacker.cs:line 31\r\n   at NServiceBus.Pipeline.PipelineFactory.Execute[T](BehaviorChain`1 pipelineAction, T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 169\r\n   at NServiceBus.Pipeline.PipelineFactory.InvokeLogicalMessagePipeline(LogicalMessage message) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 68\r\n   at NServiceBus.Unicast.Messages.ExtractLogicalMessagesBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Messages\\ExtractLogicalMessagesBehavior.cs:line 67\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Unicast.Behaviors.RaiseMessageReceivedBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Behaviors\\RaiseMessageReceivedBehavior.cs:line 15\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.MessageMutator.ApplyIncomingTransportMessageMutatorsBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\MessageMutator\\ApplyIncomingTransportMessageMutatorsBehavior.cs:line 18\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(ReceivePhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\UnitOfWork\\UnitOfWorkBehavior.cs:line 20<---\r\n\r\n---> (Inner Exception #1) System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'PipelineFactory'.\r\n   at NServiceBus.Pipeline.PipelineFactory.ThrowIfDisposed()\r\n   at NServiceBus.Pipeline.PipelineFactory.get_CurrentContext() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 134\r\n   at NServiceBus.Unicast.UnicastBus.get_CurrentMessageContext() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 903\r\n   at NServiceBus.Unicast.Monitoring.ProcessingStatistics.End(Exception ex) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Monitoring\\ProcessingStatistics.cs:line 36\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.AppendEndExceptionsAndRethrow(Exception parentException) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\UnitOfWork\\UnitOfWorkBehavior.cs:line 44<---\r\n\r\n2013-11-29 14:59:47,761 [21] ERROR NServiceBus.Unicast.Transport.TransportReceiver [(null)] <(null)> - Failed raising 'started message processing' event.\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'PipelineFactory'.\r\n   at NServiceBus.Pipeline.PipelineFactory.ThrowIfDisposed()\r\n   at NServiceBus.Pipeline.PipelineFactory.PreparePhysicalMessagePipelineContext(TransportMessage message, Boolean messageHandlingDisabled) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 22\r\n   at NServiceBus.Unicast.UnicastBus.TransportStartedMessageProcessing(Object sender, StartedMessageProcessingEventArgs e) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 999\r\n   at NServiceBus.Unicast.Transport.TransportReceiver.OnStartedMessageProcessing(TransportMessage msg) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Transport\\TransportReceiver.cs:line 417\r\n2013-11-29 14:59:47,779 [24] ERROR NServiceBus.Unicast.Transport.TransportReceiver [(null)] <(null)> - Failed raising 'started message processing' event.\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'PipelineFactory'.\r\n   at NServiceBus.Pipeline.PipelineFactory.ThrowIfDisposed()\r\n   at NServiceBus.Pipeline.PipelineFactory.PreparePhysicalMessagePipelineContext(TransportMessage message, Boolean messageHandlingDisabled) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 22\r\n   at NServiceBus.Unicast.UnicastBus.TransportStartedMessageProcessing(Object sender, StartedMessageProcessingEventArgs e) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 999\r\n   at NServiceBus.Unicast.Transport.TransportReceiver.OnStartedMessageProcessing(TransportMessage msg) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Transport\\TransportReceiver.cs:line 417\r\n```"
1812,'','IWantToRunWhenBusStartsAndStops.Stop not being called\n`IWantToRunWhenBusStartsAndStops.Stop()` not being called on shutdown'
1811,'',"Shutdown doesn't complete\n```\r\ns2013-11-29 14:12:25,179 [14] INFO  NServiceBus.Scheduling.DefaultScheduler [(nu\r\nll)] <(null)> - Could not find any scheduled task b403a7c0-96e1-407d-8a34-d6acf5\r\n9ac2d1 with with Id. The DefaultScheduler does not persist tasks between restart\r\ns.\r\n2:12:25 PM - Saga start message sent\r\nd2:12:26 PM - Sending a message to be processed at a later time\r\n2:12:26 PM - Message will be processed at 2:12:36 PM\r\n2:12:35 PM - Timeout fired, with state: 1 - SagaId:5bccced8-02a0-47bd-98fa-a2850\r\n0ea1fdc\r\n2:12:35 PM - Marking the saga as complete, be aware that this will remove the do\r\ncument from the storage (RavenDB) - SagaId:5bccced8-02a0-47bd-98fa-a28500ea1fdc\r\n2:12:36 PM - Deferred message processed\r\n2013-11-29 14:12:42,282 [9] INFO  NServiceBus.Unicast.UnicastBus [(null)] <(null\r\n)> - Initiating shutdown.\r\n```\r\n"
1810,'','Installing host throws exception\nDue to incorrect Dispose order\r\n\r\n--\r\n\r\n\r\n```\r\nNServiceBus.Host.exe -install\r\nInitializing the installer in the Install AppDomain\r\nExecuting the NServiceBus installers\r\nFailed to execute installers: System.ObjectDisposedException: Instances cannot be resolved and nested lifetimes cannot be created from this LifetimeScope as it\r\nhas already been disposed.\r\n   at Autofac.Core.Lifetime.LifetimeScope.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters)\r\n   at Autofac.ResolutionExtensions.ResolveService(IComponentContext context, Service service, IEnumerable`1 parameters)\r\n   at NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.Build(Type typeToBuild) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\ObjectBuilder\\Autofac\\AutofacObjectBuilder.cs:line 57\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Build[T]() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\ObjectBuilder\\Common\\CommonObjectBuilder.cs:line 159\r\n   at NServiceBus.Unicast.UnicastBus.get_PipelineFactory() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1135\r\n   at NServiceBus.Unicast.UnicastBus.DisposeManaged() in c:\\Projects\\NServiceBus\r\n\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 879\r\n   at NServiceBus.Unicast.UnicastBus.Dispose()\r\n   at Autofac.Core.Disposer.Dispose(Boolean disposing)\r\n   at Autofac.Util.Disposable.Dispose()\r\n   at Autofac.Core.Lifetime.LifetimeScope.Dispose(Boolean disposing)\r\n   at Autofac.Util.Disposable.Dispose()\r\n   at Autofac.Core.Container.Dispose(Boolean disposing)\r\n   at Autofac.Util.Disposable.Dispose()\r\n   at NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.Dispose()\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.DisposeManaged() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\ObjectBuilder\\Common\\CommonObjectBuilder.cs:line 153\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Dispose()\r\n   at NServiceBus.Hosting.Windows.Installers.WindowsInstaller.RunInstall() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Hosting.Windows\\Installers\\WindowsInstaller.cs:line 39\r\n\r\nRunning a transacted installation.\r\n\r\nBeginning the Install phase of the installation.\r\nInstalling service MyServerWithSLR...\r\nService MyServerWithSLR has been successfully installed.\r\nCreating EventLog source MyServerWithSLR in log Application...\r\n\r\nThe Install phase completed successfully, and the Commit phase is beginning.\r\n\r\nThe Commit phase completed successfully.\r\n\r\nThe transacted install has completed.\r\n```'
1809,'','Test.CreateInstance<T> fails with System.ArgumentException\n```\r\n[TestFixture]\r\npublic class Test\r\n{\r\n\t[TestFixtureSetUp]\r\n\tpublic void FixtureSetUp()\r\n\t{\r\n\t\tTest.Initialize();\r\n\t}\r\n\r\n\t[Test]\r\n\tpublic void Handler()\r\n\t{\r\n\t\tvar message = Test.CreateInstance<IMyMessage>(); <= fails here\r\n\t\tTest.Handler<MyHandler>()\r\n\t\t\t.ExpectSendToSites<SomeMessage>((m, a) => true)\r\n\t\t\t.OnMessage(message);\r\n\t}\r\n}\r\n```\r\n```\r\nSystem.ArgumentException : Could not find a concrete type mapped to IMyMessage\r\n   at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance(Type t) in :line 0#0\r\n   at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance[T]() in :line 0#1\r\n   at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance[T](Action`1 action) in :line 0#2\r\n   at NServiceBus.Testing.Test.CreateInstance[TMessage](Action`1 action)\r\n```\r\nWorkaround:\r\n`Test.Initialize(AllAssemblies.Except("NServiceBus.Testing"));`'
1808,'','Get building with NCrunch\nChanged RippleRestoreTarget to run during BeforeBuildDependsOn instead of BuildDependsOn\r\nCopied GitFlowVersion.exe to ncrunch build folder'
1807,'johnsimons','Setting Up NServiceBus Registry Entries\nThis fixes an issue setting up NServiceBus Registry entries when running them for the first time. \r\nThis never happened and users see the "Setup Screen" every time because the MachinePreparedKey was never created due to wrong concatenation (powershell was throwing an exception that was swallowed: cannot concat int32.)'
1806,'SimonCropp',"NServiceBus Version is not being updated\nWe've added a fix for #1041 a while back that we need to hardcode the NServiceBus version.\r\nSee https://github.com/Particular/NServiceBus/commit/790e5d8ce72da6ad5f9023787d24483b2c4c7693#diff-8\r\n\r\nThis version was being updated as part of the build script, which doesn't exist now.\r\n\r\nSo, how do we do this now?"
1805,'','need a PS cmdlet for Get-NServiceBusLicense\nWhen i install a machine-wide license using the PS module, there is a) no indication the install was successful and b) no way of determining what license(s) are actually installed.\r\n\r\nTypical behaviour for PS is that creating or installing something will output the result.\r\neg\r\n```powershell\r\nC:\\dev> new-item d:\\temp\\foobar.txt -type file\r\n\r\n    Directory: D:\\temp\r\n\r\nMode           LastWriteTime       Length Name\r\n----           -------------       ------ ----\r\n-a---  28/11/2013 12:01 p.m.            0 foobar.txt\r\n```\r\n\r\nInstall-NServiceBusLicense should give some feedback the install was successful but I don\'t get anything.\r\n\r\nThis is made worse by there being no way to determine via PS what licenses are installed.\r\nIdeally there would be a Get-NServiceBusLicense cmdlet which would retrieve all the installed licenses (and their properties) - this would make it easy to see what machine-wide licenses have been installed. \r\nAnd/or a command like "Test-NServiceBusLicense -version 4.1".  But Get-NServiceBusLicense would be more useful.'
1804,'','Deserialization private setters\nIt would be nice when you could set this setting on the DefaultContractResolver\r\n\r\ndefaultContractResolver.DefaultMembersSearchFlags |= BindingFlags.NonPublic\r\n\r\nby default. So If the message has private setters you would be able to set them using the Json.'
1803,'','FLR error message q => queue\nThere is a typo in the FLR failure error message.\r\n\r\nMessage has failed FLR and will be moved to the configured error q\r\n\r\n'
1802,'','add behaviour list manipulation\n@johnsimons code review please'
1801,'','Broke disabling and enabling message handling in UnicastBus.DisableMessageHandling\n--\r\n\r\nSo in here https://github.com/Particular/NServiceBus/blob/4.0.0/src/NServiceBus.Core/Unicast/UnicastBus.cs#L55 we used to support disabling **and enabling** message handling\r\n\r\n        public virtual bool DisableMessageHandling\r\n        {\r\n            set { disableMessageHandling = value; }\r\n        }\r\n        private bool disableMessageHandling;\r\n\r\nWe broke the enable part this in the pipeline refactoring by ignoring the value passed in https://github.com/Particular/NServiceBus/blob/1950b01f5ef9f56aba24c1ead43c7eb3e07d01ad/src/NServiceBus.Core/Unicast/UnicastBus.cs#L37\r\n\r\n        public virtual bool DisableMessageHandling\r\n        {\r\n            set\r\n            {\r\n                PipelineFactory.DisableLogicalMessageHandling();\r\n            }\r\n        }'
1800,'',"Unity.WebAPI strong named and Unity < 3.0.0.0\nWe use in our project the nuget package Unity.WebAPI 5.1 which is now strong named. This package has a dependency to \r\n\r\nUnity > 3.0.1304.1\r\n\r\nNServiceBus has a dependency to \r\n\r\nUnity > 2.1.505.2 && < 3.0.0.0\r\n\r\nSo I'm actually not able to use the newest Unity.WebAPI package, which is required to be able to compile because of the strong named version.\r\n\r\n"
1799,'SimonCropp','Create a pipeline bootstrapper class\nSomething like:\r\n\r\n```c#\r\npublic class MyPipelineAugmentation: BootstrapPipeline {\r\n\r\n   public MyPipelineAugmentation(){\r\n      \r\n      SagaPipeline.Add(typeof(NewBehaviour));\r\n\r\n      OutgoingPipeline.InsertAfter<ExistingBehaviour>(typeof(AnotherBehaviour))\r\n   }\r\n}\r\n```'
1798,'','Use the delegate builder to avoid reflection in the databus\nhttps://github.com/Particular/NServiceBus/pull/1792#discussion_r7873495'
1797,'SimonCropp','Provide a hook to manipulate the pipelines\nNeeded for the saga state changes. We\'ll keep it internal witha InternalsVisibleTo("ServiceControl.Plugin.SagaStateChanges")\r\n\r\n\r\nCopy paste from our design call (please update @SimonCropp )\r\n\r\n```\r\n\r\nclass SagaStateChangeReceivePipelineHook :  PipelineHook<ReceivePhysicalMessageContext>\r\n{\r\n    override void FullControl(ICollection<IBehavior> currentPipeline)\r\n    {\r\n        currentPipeline.Replace<HanlerInvokeBehavior>(typeof(MyOwnCoolHandlerDispatcher));\r\n    \t\r\n    \tcurrentPipeline.AddAfter|Before<SagaReceiveBehavior>(new OutboxReceiveBehavior());\r\n    }\r\n}\r\n\r\n\r\n```\r\n'
1796,'',"AuditQueue OverrideTimeToBeReceived not working\nIt looks like we have 2 message forwarder behaviours:\r\n- ForwardBehavior\r\n- AuditBehavior\r\n\r\nHowever the AuditBehavior reads its settings from AuditConfig, while the ForwardBehavior reads it from UnicastBusConfig.\r\n\r\nThis doesn't seem to be right and it is actually broken because according to the doco for [timetobereceived](http://msdn.microsoft.com/en-us/library/vstudio/system.messaging.message.timetobereceived.aspx)\r\n>When several messages are sent in a single transaction, Message Queuing uses the TimeToBeReceived property of the first message.\r\n\r\nthis was raised in the groups, see https://groups.google.com/d/msgid/particularsoftware/770bf6bc-2b21-4646-abb1-67d853c2280d%40googlegroups.com"
1795,'johnsimons','WIP - Non dtc operations\nJust to get the build going and allow for easier code reviews'
1794,'','Added a failing acceptance test for #1753\nThe same acceptance test will work, if the subscriptions are added manually, i.e. if Subscriber1 added \r\n\r\n````c#\r\nbus.Subscribe<DerivedEvent1>();\r\nbus.Subscribe<DerivedEvent2>();\r\n````\r\n\r\nThis indicates a problem with autosubscribe.\r\n                 '
1792,'','Header cleanup\nFixes #1787\r\n\r\nCode review please'
1791,'','Remove DelegateFactory\n--\r\n\r\n * [x] Remove the various LateBound delegates. No need for custom types and `Action` and `Func` will do\r\n * [x] Remove `DelegateFactory.Create(MethodInfo method)` and `DelegateFactory.CreateParameterExpressions` they are not used anywhere.\r\n\r\nrelated to #1675 '
1790,'','Create NHibernate Role\nRaised by @udidahan\r\nMigrated from by https://github.com/Particular/NServiceBus/issues/482\r\n\r\nMakes it easy for users to specify NHibernate persistence for everything.'
1789,'','StubBus SendToSites implementation calls wrong ProcessInvocation\n`siteKeys, messages` were treated as `params object[]` during call to `ProcessInvocation`'
1788,'',"Bus.InMemory events now expect either unobtrusive conventions or IEvent interface markers\n--\r\n\r\n**Steps to repro:**\r\n1. Declare a POCO for the inmemory event (not derived from IEvent), eg AuditMessageReceived \r\n https://github.com/Particular/ServiceControl/blob/develop/src/ServiceControl/Contracts/Operations/AuditMessageReceived.cs\r\n2. In a message handler, do an - in memory raise for the above event.\r\nhttps://github.com/Particular/ServiceControl/blob/develop/src/ServiceControl/Infrastructure/Satellites/AuditMessageImportSatellite.cs#L15\r\n\r\nNotice the exception:\r\n````\r\nA first chance exception of type 'System.Exception' occurred in NServiceBus.Core.dll\r\nAn exception of type 'System.Exception' occurred in NServiceBus.Core.dll but was not handled in user code\r\nAdditional information: Could not find Metadata for 'ServiceControl.Contracts.Operations.AuditMessageReceived'.\r\nPlease ensure the following:\r\n1. 'ServiceControl.Contracts.Operations.AuditMessageReceived' is included in initial scanning see File Scanning: http://particular.net/articles/the-nservicebus-host\r\n2. 'ServiceControl.Contracts.Operations.AuditMessageReceived' implements either 'IMessage', 'IEvent' or 'ICommand' or alternatively, if you don't want to implement an interface, you can use 'Unobtrusive Mode' see: http://particular.net/articles/unobtrusive-mode-messages\r\n````\r\n\r\nNOTE: This used to work in 4.2 without adding any marker interfaces to the POCOs for in-memory events."
1787,'andreasohlund','Headers not taken from correct location when doing an Bus.InMemory.Raise\n--\r\n\r\n**Steps to repro**\r\n1. Have a satellite process a transport message and raise an in-memory event in the handler.\r\n2. Notice exception, when trying to raise the event:\r\n\r\n````xml\r\n<HeaderInfo>\r\n\t\t<Key>NServiceBus.ExceptionInfo.StackTrace</Key>\r\n\t\t<Value>System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.MessageHeaders.MessageHeaderManager.GetHeader(Object message, String key) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\MessageHeaders\\MessageHeaderManager.cs:line 40\r\n   at NServiceBus.MessageHeaders.Bootstrapper.&lt;Run&gt;b__0(Object msg, String key) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\MessageHeaders\\Bootstrapper.cs:line 15\r\n   at NServiceBus.ExtensionMethods.GetMessageHeader(IBus bus, Object msg, String key) in c:\\Dev\\NServiceBus\\src\\NServiceBus\\ExtensionMethods.cs:line 53\r\n   at NServiceBus.Unicast.BackwardCompatibility.SetIsSagaMessageHeaderForV3XMessages.MutateIncoming(Object message) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\BackwardCompatibility\\SetIsSagaMessageHeaderForV3XMessages.cs:line 13\r\n   at NServiceBus.Pipeline.MessageMutator.ApplyIncomingMessageMutatorsBehavior.Invoke(LogicalMessageContext context, Action next) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\MessageMutator\\ApplyIncomingMessageMutatorsBehavior.cs:line 19\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 15\r\n   at NServiceBus.Pipeline.PipelineFactory.InvokeLogicalMessagePipeline(LogicalMessage message) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 73\r\n   at NServiceBus.Unicast.UnicastBus.Raise[T](T event) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 909\r\n   at NServiceBus.Unicast.UnicastBus.Raise[T](Action`1 messageConstructor) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 914\r\n   at ServiceBus.Management.Infrastructure.Satellites.AuditMessageImportSatellite.Handle(TransportMessage message) in c:\\Dev\\ServiceControl\\src\\ServiceControl\\Infrastructure\\Satellites\\AuditMessageImportSatellite.cs:line 15\r\n   at NServiceBus.Satellites.SatelliteLauncher.HandleMessageReceived(Object sender, TransportMessageReceivedEventArgs e, ISatellite satellite) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Satellites\\SatelliteLauncher.cs:line 92\r\n   at NServiceBus.Satellites.SatelliteLauncher.&lt;&gt;c__DisplayClass9.&lt;StartSatellite&gt;b__7(Object o, TransportMessageReceivedEventArgs e) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Satellites\\SatelliteLauncher.cs:line 107\r\n   at NServiceBus.Unicast.Transport.TransportReceiver.OnTransportMessageReceived(TransportMessage msg) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Transport\\TransportReceiver.cs:line 453   at NServiceBus.Unicast.Transport.TransportReceiver.ProcessMessage(TransportMessage message) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Transport\\TransportReceiver.cs:line 390\r\n   at NServiceBus.Unicast.Transport.TransportReceiver.TryProcess(TransportMessage message) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Unicast\\Transport\\TransportReceiver.cs:line 260\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.ProcessMessage(TransportMessage message) in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqDequeueStrategy.cs:line 288\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Action() in c:\\Dev\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqDequeueStrategy.cs:line 208</Value>\r\n</HeaderInfo>\r\n````\r\n\r\nThe source for the NRE is that Bus.CurrentContext in this code is null:\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/MessageHeaders/MessageHeaderManager.cs#L40\r\n'
1786,'','Refactor function TryGetEndpointConfigurationTypeFromScannedAssemblies\nRelates to #1785 \r\n\r\nThis is the function from `EndpointTypeDeterminer.cs`\r\n\r\n````c#\r\nbool TryGetEndpointConfigurationTypeFromScannedAssemblies(out Type type)\r\n{\r\n    var endpoints = ScanAssembliesForEndpoints().ToList();\r\n    if (!endpoints.Any())\r\n    {\r\n        Console.Out.WriteLine(assemblyScannerResults.FormattedErrors());\r\n        type = null;\r\n        return false;\r\n    }\r\n\r\n    AssertThatNotMoreThanOneEndpointIsDefined(endpoints);\r\n    type = endpoints.First();\r\n    return true;\r\n}\r\n````\r\n\r\nAs @SimonCropp puts it, this code is dodgy!\r\n1. In the case where we dont find an endpoint, all the errors are written out without any context. Before writing out the exceptions, there needs to be some context on what action was being performed.\r\n2. They are written to Console.Out instead of to the log!!!\r\n\r\n'
1785,'',"Assembly load errors should be logged as part of the core.\nDebugging https://github.com/Particular/NServiceBus.RabbitMQ/issues/10 and  discussing the issue with @SimonCropp: \r\n\r\nThe code that writes out the assembly load errors is present in the NServiceBus.Host.\r\nHowever, this is useful as part of the core.\r\n\r\nAlso, In the above issue, the endpoint had a proper type that implements `IConfigureThisEndpoint`, but the assembly load had issues, however they weren't logged. Were they logged, it would've made the above issue easy to fix, i.e. add the correct assembly redirects.\r\n\r\n````c#\r\nbool TryGetEndpointConfigurationTypeFromScannedAssemblies(out Type type)\r\n{\r\n    var endpoints = ScanAssembliesForEndpoints().ToList();\r\n    if (!endpoints.Any())\r\n    {\r\n        Console.Out.WriteLine(assemblyScannerResults.FormattedErrors());\r\n        type = null;\r\n        return false;\r\n    }\r\n\r\n    AssertThatNotMoreThanOneEndpointIsDefined(endpoints);\r\n    type = endpoints.First();\r\n    return true;\r\n}\r\n````\r\n\r\n"
1784,'indualagarsamy','VideoStore Sample does not compile on 4.2. release\nRepro:\r\n\r\n1. Installed 4.0.3\r\n* Opened VideoStore.MSMQ\r\n* Successfully compiled (build all)\r\n* Uninstalled 4.0.3\r\n* Installed 4.2.0\r\n* Opened VideoStore.MSMQ\r\n* Clicked "rebuild solution"\r\n* Receiving 5 errors for: ```Error\t4\tThe type or namespace name \'AspNet\' does not exist in the namespace \'Microsoft\' (are you missing an assembly reference?)```\r\n* References indicate that the following packages / dlls are not available for the solution:\r\n\r\n![image](https://f.cloud.github.com/assets/3889023/1558192/f25ed930-4f70-11e3-8246-b615ce87bef2.png)\r\n\r\n* Note that VS Package Manager is set to allow auto-downloads:\r\n\r\n![image](https://f.cloud.github.com/assets/3889023/1558196/3a379ec2-4f71-11e3-9d4c-32953890df0e.png)\r\n\r\n'
1783,'andreasohlund','Core 4.3 breaks the sqlserver acceptance tests\nhttp://builds.particular.net/viewLog.html?buildId=27755&tab=buildResultsDiv&buildTypeId=NServiceBusSqlServer_2RunAcceptanceTests'
1782,'','Make PowerShell dll clr v2\nSince the PowerShell dll has no dependencies we should downgrade it to clr v2 so it works with PS v2 out of the box. '
1781,'','Set auto correlated saga properties automatically on incoming messages\nA lot of work to pull this off:\r\n\r\n- [ ] Clean-up all those caches in `Sagas.cs`\r\n- [ ] Implement a saga metadata model\r\n- ...'
1780,'','Obsolete IConfigureHowToFindSagaWithMessage as it is not required\n`IConfigureHowToFindSagaWithMessage` is not an extension point.\r\n\r\nWe are newing it [here](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Sagas/Sagas.cs#L435)\r\nand then manually injecting it ( :poop: :confused: :poop: ) [here](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Sagas/Sagas.cs#L304)'
1778,'',"Unable to build tag branch 4.2.0\nIt looks like the 4.2.0 tag branch is being compiled as version 4.3.0 so some of the obsolete classes, `IMessageCreator` specifically, are causing the build to fail because they are treated as an error in 4.3.0. \r\n\r\nThe specific error I'm getting is when compiling `NserviceBus.Core`:\r\n`Error\t61\t'NServiceBus.IMessageCreator' is obsolete: 'No longer required since the IBus batch operations have been trimmed Will be removed in version 5.0.0.'\tX:\\NServiceBus\\src\\NServiceBus.Core\\MessageInterfaces\\IMessageMapper.cs\t14\t22\tNServiceBus.Core\r\n`"
1777,'',"Unable to build tag branch 4.2.0\nWhen I build, NServiceBus.Core fails with\r\n`Error\t61\t'NServiceBus.IMessageCreator' is obsolete: 'No longer required since the IBus batch operations have been trimmed Will be removed in version 5.0.0.'\tX:\\NServiceBus\\src\\NServiceBus.Core\\MessageInterfaces\\IMessageMapper.cs\t14\t22\tNServiceBus.Core`\r\n\r\nDo I need to change something so that the `ObsoleteEx` is not treated as an error?"
1776,'','RavenUserInstaller exception NSB 4.2, RavenDB 2.5.2700 and 2.0.2300\nI have upgraded a host from NSB 3.3 to 4.2. \r\n\r\nThe host connects to a Raven 2.5.2700 database to retrieve its configuration. Then it connects to a Raven 2.0.2300 database to store raven persistence data. This setup worked with NSB 3.3, but now when I establishing a connection to the persistence database I receive the following warning:\r\n\r\nWARN  NServiceBus.Persistence.Raven.RavenUserInstaller [(null)] <(null)> - Failed to add user to raven. Processing will continue\r\n\r\nStacktrace:\r\nSystem.MissingMethodException: Method not found: \'Raven.Abstractions.Data.JsonDocument Raven.Client.Connection.IDatabaseCommands.Get(System.String)\'.at NServiceBus.Persistence.Raven.RavenUserInstaller.AddUserToDatabase(String identity, DocumentStore documentStore)   at NServiceBus.Persistence.Raven.RavenUserInstaller.Install(String identity) in :line 0\r\n\r\nThe issue seems to be that the host has a dependency to RavenDB.Client version 2.5.2700 and NServiceBus.Core version 4.2 has a dependency to RavenDB.Client version 2.0.3. \r\n\r\nIs it possible to solve this issue without downgrading the host dependency to version 2.0.3?\r\n\r\nI have tried to establish connections to following raven database versions for persistence but without any luck:\r\n•\t2.5.2700\r\n•\t2.0.2300\r\n•\t2.0.2375\r\n\r\nI have also set the RavenDB service setting “Raven/AnonymousAccess” to "All” but are still receiving the warning. With the service set to “All” can I neglect the warning?\r\n'
1775,'','Drop GetGenericArguments() output checks against null\nFix #1771\r\n\r\nThe two additional commits can be easily dropped if you feel they do not bring any value.\r\n\r\n/cc @SimonCropp'
1774,'andreasohlund','Bus.InMemory.Raise now requires the message to be an IEvent\nAs discovered in servicepulse Bus.InMemory.Raise now requires the message to be an IEvent'
1772,'',"Master branch (4.2.0) doesn't build from source\nPowerShell.Tests project fails to build"
1771,'','GetGenericArguments does not return null\nso `Type.GetGenericArguments` `Returns an empty array if the current type is not a generic type.` http://msdn.microsoft.com/en-us/library/system.type.getgenericarguments(v=vs.110).aspx  \r\n\r\nYet gere we have logic based on the value being null https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Serializers.XML.XsdGenerator/ComplexType.cs#L104\r\n\r\n        private static bool IsKeyValuePair(Type t)\r\n        {\r\n            var args = t.GetGenericArguments();\r\n            if (args == null)\r\n                return false;\r\n            if (args.Length != 2)\r\n                return false;\r\n            return (typeof(KeyValuePair<,>).MakeGenericType(args) == t);\r\n        }\r\n\r\nAlso here https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Serializers.XML.XsdGenerator/Repository.cs#L58 and here https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Utils/Reflection/ExtensionMethods.cs#L77'
1770,'andreasohlund','Trim potential trailing forward slashes from Xml namespaces\nFix #1769'
1769,'','XmlSerializationSettings.Namespace doesn\'t guard against trailing forward slashes\nConfiguring an endpoint with a namespace ending with a forward slash...\r\n\r\n```csharp\r\nConfigure.Serialization.Xml(x => x.Namespace("http://acme.com/"));\r\n```\r\n\r\nActually leads to generate a message with two forward slashes as part of the message (`xmlns="http://acme.com//Messages"`)\r\n\r\n```xml\r\n<?xml version="1.0" ?>\r\n<Messages xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://acme.com//Messages">\r\n<Request>\r\n<SaySomething>Hello NServiceBus!</SaySomething>\r\n</Request>\r\n</Messages>\r\n```\r\n\r\nThe documentation does indeed hints at this by specifying a `http://tempuri.net` namespace without a trailing forward slash.\r\n\r\nMaybe should some normalization be performed, here?'
1768,'',"issue #1737 NullReferenceException MessageMapper\nGenericTypeDefintions can't be mapped except we use constraints\r\n\r\nfor #1737 "
1767,'','Obsolete UnicastBus.SkipDeserialization\nUsers should be writing satellites instead.\r\n\r\n--\r\n\r\nObsoletes https://github.com/Particular/NServiceBus/issues/1758'
1766,'','MessageConventions cannot be changed once set\nSimple repro\r\n\r\n        [Test]\r\n        public void Should_be_able_to_override_Conventions()\r\n        {\r\n            MessageConventionExtensions.IsCommandTypeAction = type => type == typeof(MyCommand1);\r\n            Assert.IsTrue(MessageConventionExtensions.IsCommand(new MyCommand1()));\r\n            Assert.IsFalse(MessageConventionExtensions.IsCommand(new MyCommand2()));\r\n            MessageConventionExtensions.IsCommandTypeAction = type => type == typeof(MyCommand2);\r\n            Assert.IsFalse(MessageConventionExtensions.IsCommand(new MyCommand1()));\r\n            Assert.IsTrue(MessageConventionExtensions.IsCommand(new MyCommand2()));\r\n        }\r\n\r\n        public class MyCommand1{}\r\n        public class MyCommand2{}\r\n\r\nThe reason is that the `ConventionCache` only caches the convention on the first use\r\n\r\n\r\n        class ConventionCache\r\n        {\r\n            IDictionary<Type, bool> cache = new ConcurrentDictionary<Type, bool>();\r\n\r\n            public bool ApplyConvention(Type type, Func<Type, bool> action)\r\n            {\r\n                bool result;\r\n\r\n                if (cache.TryGetValue(type, out result))\r\n                {\r\n                    return result;\r\n                }\r\n\r\n                result = action(type);\r\n\r\n                cache[type] = result;\r\n\r\n                return result;\r\n            }\r\n        }'
1765,'','Obsolete ISaga<T>\nGiven:\r\n```c#\r\npublic struct MySaga : ISaga<MySaga.FooData>, IAmStartedByMessages<StartSagaMessage2>\r\n{\r\n    public void Timeout(object state)\r\n    {\r\n\r\n    }\r\n\r\n    public bool Completed\r\n    {\r\n        get { return false; }\r\n    }\r\n\r\n    public IContainSagaData Entity\r\n    {\r\n        get { return Data; }\r\n        set { Data = (FooData)value; }\r\n    }\r\n\r\n    public IBus Bus { get; set; }\r\n\r\n    public FooData Data { get; set; }\r\n\r\n    public void Handle(StartSagaMessage2 message)\r\n    {\r\n        Console.Out.WriteLine("It Worked");\r\n    }\r\n\r\n    public class FooData : ContainSagaData\r\n    {\r\n            \r\n    }\r\n}\r\n```\r\n\r\nWe get:\r\n```\r\n2013-11-11 16:55:33,805 [28] INFO  NServiceBus.Unicast.Transport.TransportReceiver [(null)] <(null)> - Failed to process message\r\nSystem.InvalidOperationException: No handlers could be found for message type: MyServer.Saga.StartSagaMessage2\r\n   at NServiceBus.Pipeline.Behaviors.LoadHandlersBehavior.Invoke(LogicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\Behaviors\\LoadHandlersBehavior.cs:line 31\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingMessageMutatorsBehavior.Invoke(LogicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\Behaviors\\ApplyIncomingMessageMutatorsBehavior.cs:line 20\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.Invoke(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 15\r\n   at NServiceBus.Pipeline.PipelineFactory.InvokeLogicalMessagePipeline(LogicalMessage message) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\PipelineFactory.cs:line 66\r\n   at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(PhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\Behaviors\\ExtractLogicalMessagesBehavior.cs:line 70\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line28\r\n   at NServiceBus.Pipeline.Behaviors.RaiseMessageReceivedBehavior.Invoke(PhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\Behaviors\\RaiseMessageReceivedBehavior.cs:line 13\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.Behaviors.ApplyIncomingTransportMessageMutatorsBehavior.Invoke(PhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\Behaviors\\ApplyIncomingTransportMessageMutatorsBehavior.cs:line 17\r\n   at NServiceBus.Pipeline.BehaviorChain`1.InvokeNext(T context) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line 28\r\n   at NServiceBus.Pipeline.BehaviorChain`1.<>c__DisplayClass1.<InvokeNext>b__0() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Pipeline\\BehaviorChain.cs:line28\r\n   at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(PhysicalMessageContext context, Action next) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\UnitOfWork\\UnitOfWorkBehavior.cs:line 19\r\n```'
1763,'','Obsolete ExtensionMethods.IsGenericallyEquivalent for removal\nNot used internally by NServiceBus and as such will be removed '
1762,'','Obsolete ISaga\nAccording to the doco:\r\n```\r\n/// <summary>\r\n/// Implement this interface if you want to write a saga with minimal infrastructure support.\r\n/// It is recommended you inherit the abstract class <see cref="Saga{T}"/> to get the most functionality.\r\n/// </summary>\r\n```\r\nsee https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus/Saga/ISaga.cs#L8\r\n\r\nBut if we try to implement a saga using just that interface:\r\n```c#\r\npublic class MySaga : ISaga, IAmStartedByMessages<StartSagaMessage2>\r\n{\r\n    public void Timeout(object state)\r\n    {\r\n\r\n    }\r\n\r\n    public bool Completed\r\n    {\r\n        get { return false; }\r\n    }\r\n\r\n    public IContainSagaData Entity { get; set; }\r\n\r\n    public IBus Bus { get; set; }\r\n    public void Handle(StartSagaMessage2 message)\r\n    {\r\n        Console.Out.WriteLine("It Worked");\r\n    }\r\n}\r\n```\r\n\r\nWe get an exception:\r\n```\r\nSystem.NullReferenceException was unhandled by user code\r\n  HResult=-2147467261\r\n  Message=Object reference not set to an instance of an object.\r\n  Source=NServiceBus.Core\r\n  StackTrace:\r\n       at NServiceBus.Features.Sagas.ConfigureSaga(Type t) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Sagas\\Sagas.cs:line 251\r\n       at NServiceBus.Features.Sagas.FindAndConfigureSagasIn(IEnumerable`1 types) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Sagas\\Sagas.cs:line 45\r\n       at NServiceBus.Features.Sagas.Initialize() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Sagas\\Sagas.cs:line 18\r\n       at NServiceBus.Features.FeatureInitializer.<>c__DisplayClass3.<InitializeFeatures>b__2(Type t) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Features\\Support\\FeatureInitializer.cs:line 61\r\n       at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n       at NServiceBus.Configure.ForAllTypes[T](Action`1 action) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Configure.cs:line 379\r\n       at NServiceBus.Features.FeatureInitializer.InitializeFeatures() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Features\\Support\\FeatureInitializer.cs:line 44\r\n       at NServiceBus.Features.FeatureInitializer.FinalizeConfiguration() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Features\\Support\\FeatureInitializer.cs:line 36\r\n       at NServiceBus.Configure.<Initialize>b__13(IFinalizeConfiguration t) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Configure.cs:line 359\r\n       at NServiceBus.Configure.<>c__DisplayClass23`1.<ActivateAndInvoke>b__20(Type t) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Configure.cs:line 555\r\n       at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n       at NServiceBus.Configure.ForAllTypes[T](Action`1 action) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Configure.cs:line 379\r\n       at NServiceBus.Configure.ActivateAndInvoke[T](Action`1 action, Nullable`1 thresholdForWarning) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Configure.cs:line 549\r\n       at NServiceBus.Configure.Initialize() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Configure.cs:line 359\r\n       at NServiceBus.Configure.CreateBus() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Configure.cs:line 295\r\n       at NServiceBus.Hosting.GenericHost.Start() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 69\r\n       at NServiceBus.Hosting.Windows.WindowsHost.Start() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Hosting.Windows\\WindowsHost.cs:line 52\r\n       at NServiceBus.Hosting.Windows.Program.<>c__DisplayClassd.<Main>b__5(WindowsHost service) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Hosting.Windows\\Program.cs:line 81\r\n       at Topshelf.Internal.ControllerDelegates`1.StartActionObject(Object obj) in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\ControllerDelegates.cs:line 17\r\n       at Topshelf.Internal.IsolatedServiceControllerWrapper`1.<>c__DisplayClass2.<set_StartAction>b__1(TService service) in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\IsolatedServiceControllerWrapper.cs:line 65\r\n       at Topshelf.Internal.ServiceController`1.<.cctor>b__1(ServiceController`1 sc) in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\ServiceController.cs:line 35\r\n       at Magnum.StateMachine.LambdaAction`1.Execute(T instance, Event event, Object parameter) in :line 0\r\n       at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter) in :line 0\r\n  InnerException: \r\n```\r\n\r\nThe issue is that we expect a Data property (see https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Sagas/Sagas.cs#L292).\r\n\r\nSo the question is should we support this or not?\r\n\r\nAnd if not what is the point of that interface?\r\n'
1761,'','Obsolete HasCompleted interface\nThere is no point separating this interface from the actual `ISaga` one.\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus/Saga/HasCompleted.cs'
1760,'','if control message dont deserialize\nbut sill invoke CallbackInvocationBehavior\r\nfixes #1752'
1759,'johnsimons','Ilmerge not correctly updating pdbs\nCaused difficulty debugging and stepping through NServicebus assemblies\r\n\r\n--\r\n\r\nUsing NServiceBus.Host and below endpoint config\r\n\r\n```\r\npublic class EndpointConfig : IConfigureThisEndpoint,\r\n                    AsA_Server, IWantCustomInitialization\r\n{\r\n\tpublic void Init()\r\n\t{\r\n\t\tConfigure.With()\r\n\t\t\t.DefaultBuilder()\r\n\t\t\t.UseInMemoryTimeoutPersister();\r\n\t}\r\n}\r\n```\r\n\r\nI used to be able to step into source of `Configure.With()` and `DefaultBuilder` in 4.0.4 by downloading master branch source and placing it in C:\\BuildAgent\\Work\\d4de8921a0aabf04 ...\r\n\r\nAfter upgrading to 4.2.0, downloaded the new master branch source and placed in C:\\BuildAgent\\Work\\31f8c64a6e8a2d7c but can\'t step into it.\r\n\r\nmostly get language:unknown and "Source not available"'
1758,'','if SkipDeserialization is set CallbackInvocationBehavior wont be invoked\nSo if someone calls this https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/ConfigureUnicastBus.cs\r\n\r\n        public ConfigUnicastBus SkipDeserialization()\r\n        {\r\n            busConfig.ConfigureProperty(b => b.SkipDeserialization, true);\r\n            extractLogicalMessagesConfig.ConfigureProperty(b => b.SkipDeserialization, true);\r\n            return this;\r\n        }\r\n\r\nThen this will come into play\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Pipeline/Behaviors/ExtractLogicalMessagesBehavior.cs#L38 \r\n\r\n            if (SkipDeserialization || UnicastBus.SkipDeserialization)\r\n            {\r\n                return;\r\n            }\r\n\r\nAnd `next()` will not be called and the next behavior (`CallbackInvocationBehavior`) will not be invoked\r\n\r\n\r\n@andreasohlund is this the desired behaviour?'
1757,'','classes in NServiceBus.Unicast.BackwardCompatibility should be flagged for future removal\n--\r\n\r\n`MutateMessageContentTypeOfIncomingTransportMessages` and \r\n`SetIsSagaMessageHeaderForV3XMessages` are for backwards compat with version 3.\r\n\r\nTo remind us to remove them in v5 they should be marked with an \r\n\r\n    [ObsoleteEx(RemoveInVersion = "5.0", TreatAsErrorFromVersion = "5.0", Message = "Exist only for compatibility between V4 and V3. No longer needed in V5")]'
1756,'','New Distributor xml configuration\nAs part of #1732 we are going to:\r\n- Remove DistributorControlAddress as that can be automatically computed, DistributorDataAddress + "distributor.control".\r\n- Merge `MasterNodeConfig` with new separate `DistributorConfig`\r\n\r\n#### Proposed new config section\r\n```xml\r\n<DistributorConfig\r\n    Node="localhost"\r\n    QueueName="orders.handler">\r\n</DistributorConfig>\r\n```\r\nThe above configuration will result in:\r\n- DistributorControlAddress = "orders.handler.distributor.control@localhost"\r\n- DistributorDataAddress = "orders.handler@localhost"\r\n\r\n\r\n\r\n'
1755,'johnsimons','What is the point of DistributorControlAddress ?\nIn our current config we ask the user to provide us with the `DistributorControlAddress`.\r\n```xml\r\n<UnicastBusConfig\r\n    DistributorControlAddress="orders.handler.distributor.control@localhost"\r\n    DistributorDataAddress="orders.handler@localhost">\r\n</UnicastBusConfig>\r\n``` \r\n\r\nBut there is no way for the user to configure the distributor control address!\r\n\r\nSo what is the point of bothering the user with an extra string?\r\n\r\nWe are hardcoding the distributor control address to be `DistributorDataAddress` + "distributor.control".\r\n\r\nShould I remove this requirement as part of #1732 ?'
1754,'','Simplify license\nalso fixes #1720 \r\n\r\nended up with a 120kb smaller NServiceBus.Core.dll :)\r\n\r\n@andreasohlund @johnsimons code review?'
1753,'','Subscriber only attempts to subscribe to one of the listed endpoints, if the type has a base event\n**Steps to repro**\r\n1. Have two different events that derive from a base event\r\n2. Have two different publishing endpoints that each publish the derived event\r\n3. Add a subscriber that subscribes to both these events, and have a message handler for the base event.\r\n4. Notice that the subscriber upon startup sends the subscription request to only one endpoint. (and there are two listed in the app.config)\r\n\r\n````xml\r\n<UnicastBusConfig DistributorControlAddress="" DistributorDataAddress="" ForwardReceivedMessagesTo="">\r\n    <MessageEndpointMappings>\r\n      <add Messages="Messages.ILienDocumentPublishedEvent, Messages" Endpoint="LienPublishHandler" />\r\n      <add Messages="Messages.ILoanDocumentPublishedEvent, Messages" Endpoint="LoanPublishHandler" />\r\n    </MessageEndpointMappings>\r\n  </UnicastBusConfig>\r\n````\r\n\r\n````\r\n2013-11-08 15:12:54,649 [13] INFO  NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.MessageDrivenSubscriptionManager [(null)] <(null)> - Subscribing\r\n to Messages.IDocumentPublishedEvent, Messages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null at publisher queue LienPublishHandler@SELENE\r\n````\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1505074/9e369da8-48cb-11e3-92d2-f8bff8d09c27.png)\r\n \r\n**Related discussion:**\r\nhttps://groups.google.com/forum/#!msg/particularsoftware/dNBAwquQ-OQ/pZZx7Vg-OCEJ\r\nThere is a zip file attached in the discussion with the repro.\r\n\r\n**Workaround**\r\nAdd a manual subscription entry on the publisher.\r\n\r\nIssue also relates to #1652 and #1583 '
1752,'SimonCropp',"Control Messages causing deserialization exception\nDue to incorrectly attempting to deserialization them. \r\n\r\nWill now skip deserialization and continue the pipeline.\r\n\r\n--\r\n\r\n**Steps to repro**:\r\n1. Modify the full duplex sample to make the Client run v4.2 and the Server run in version 3.3.5\r\n2. In the Server project, in the `RequestDataMessageHandler` in the handle method add `Bus.Return(0);` \r\n3. Send a message from the client to the server and notice the exception.\r\n\r\n\r\n**Exception**: \r\n\r\n    2013-11-08 13:49:14,367 [14] ERROR NServiceBus.Unicast.Transport.TransportReceiv\r\n    er [(null)] <(null)> - Failed to serialize message with ID: 51254742-c23f-4cac-9e64-a83ddb1e085b\\134254\r\n    System.Runtime.Serialization.SerializationException: An error occurred while attempting to extract logical messages from transport message NServiceBus.Transport\r\n    Message ---> System.TypeLoadException: Could not determine type for node: 'CompletionMessage'.\r\n       at NServiceBus.Serializers.XML.XmlMessageSerializer.InferNodeType(XmlNode node, Object parent) in :line 0\r\n       at NServiceBus.Serializers.XML.XmlMessageSerializer.Process(XmlNode node, Object parent, Type nodeType) in :line 0\r\n       at NServiceBus.Serializers.XML.XmlMessageSerializer.Deserialize(Stream stream, IList`1 messageTypesToDeserialize) in :line 0\r\n       at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Extract(TransportMessage m) in :line 0\r\n       at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n       --- End of inner exception stack trace ---\r\n       at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n       at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n       at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() in :line 0\r\n       at NServiceBus.Pipeline.Behaviors.RaiseMessageReceivedBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n       at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n       at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() in :line 0\r\n       at NServiceBus.Pipeline.Behaviors.ApplyIncomingTransportMessageMutatorsBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n       at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n       at NServiceBus.Pipeline.BehaviorChain.<>c__DisplayClass1.<InvokeNext>b__0() in :line 0\r\n       at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1504602/3def27d0-48c1-11e3-8d13-f50b21a90426.png)"
1751,'','Issue with new assembly scanner\nSee https://github.com/Particular/NServiceBus.Azure/issues/70 , not all dependent assemblies seem to be picked up by the scanner.'
1750,'andreasohlund','Outgoing pipelines\n@SimonCropp @indualagarsamy @johnsimons here is the pull for outgoing pipelines. Please review!'
1749,'',"Add BITS as a gateway channel\nBITS = [Background Intelligent Transfer Service](http://msdn.microsoft.com/en-us/library/bb968799.aspx)\r\n\r\nI'd be very interested to gauge support for this in gateway v1/v2, and start a general talking point.\r\n\r\nI see BITS being useful for sites with a very slow or unreliable internet connection, where pushing messages over HTTP using the full network bandwidth may be undesirable.\r\n\r\nIt could also work for sites behind NAT (as a pull channel), when HTTP ports can't be opened for some reason.\r\n\r\nMajor BITS features\r\n- download/upload auto-resume\r\n- only uses idle bandwidth"
1748,'','Exception rethrow reset stacktrace causing debugging difficulty \nException patching is required before rethrowing\r\n\r\n--\r\n\r\nHere https://github.com/Particular/NServiceBus/blob/Issue_1732/src/NServiceBus.Core/Unicast/Transport/TransportReceiver.cs#L351 we are resetting the stacktrace.\r\n\r\nThis means the only way to figure out where the exception occurs is by putting a breakpoint in that code.'
1747,'',"DTC install fails on Win 2003 R2 x64 SP2 from x86 process\n`SOFTWARE\\Wow6432Node\\Microsoft\\MSDTC\\Security` doesn't exist on a fully patched Server 2003 R2 x64\r\nso registry key was always NULL. May also fix #1690\r\n\r\nTested on\r\n- 2003 R2 x86 SP2 with all critical updates\r\n- 2003 R2 x64 SP2 with all critical updates\r\n- 2012 R2"
1746,'','Schedule Reflection/ExtensionMethods for removal\nTo avoid polluting CLR types with our own convenience extension methods.\r\n\r\n--\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Utils/Reflection/ExtensionMethods.cs\r\n\r\n\r\n'
1745,'','Performance improvements EncryptionMessageMutator\nPerformance improvements for `IsSystemType` and reflection for `EncryptionMessageMutator` (issue #1630)\r\n\r\nWhen doing 1,000,000 messages, both changes combined will bring boost the performance of `EncryptionMessageMutator` from ~208 sec. to ~18 sec.\r\n\r\nThe most significant improvement is the cache in `IsSystemType`.\r\n\r\nThis PR replaces and includes my previous attempt and addresses the code reviews done by the Particular team.\r\n\r\nA note on the review:\r\n\r\nI tried indexing `IsSystemType` by `Assembly` but the repeated call to `.Assembly` causes significant overhead. Indexing by type takes up a bit more memory but is faster.'
1744,'','add a mechanism to warn people about a impending license expiry\n'
1743,'johnsimons','Support disconnecting workers from a running distributor\nWork to be done:\r\n- [x] Modify `DistributorReadyMessageProcessor` to keep track of active workers\r\n- [x] Implement a Powershell cmdlet that sends a control message to the Distributor control queue to disconnect a worker\r\n- [x] Introduce worker sessionid so we can differentiate between control messages that are from disconnected worker and hence should be ignored vs active worker ones \r\n- [x] Make `IWorkerAvailabilityManager` backward compatible\r\n- [x] Document new `IWorkerAvailabilityManager` methods\r\n- [x] Create a new Distributor project\r\n- [x] Mark Distributer in Core as obsolete + any public classes related to it\r\n- [x] Update ScaleOut sample to use new Distributor\r\n- [x] Add AcceptanceTests for the Distributor\r\n- [x] Add nuget package for new assembly\r\n- [x] ~~Modify UnicastBus so that it reads MasterNodeAddress from somewhere so that we can set it from the new assembly~~ Added workaround instead\r\n\r\nThis will hopefully close:\r\n- #1732 \r\n- #978 '
1741,'','Introducing Sub pipelines for logical messages and message handlers\n'
1740,'','Why are transactions disabled on AsA_Client?\nI did never even think of Server/Client making a difference to transactions. Just found out now...'
1739,'','TimeoutMessages and ScheduledTasks are filling the audit queues\nCurrently we have the issues with 4.0.3 that TimeoutMessages and ScheduledTasks messages are moved to the audit queue. This is filling our audit queues unnecessary. Is there a possible way to influence this behavior? \r\n\r\n@andreasohlund Told me that should be fixed in latest version. Is that true?'
1737,'',"MessageMapper.Initialize NullReferenceException due to incorrect treatment of generic types\nIf in the domain the following abstract class is defined, the bus will during the startup cause a NullReferenceException\r\n\r\n--\r\n```\r\npublic abstract class TaskDataCommandBase<T> : ICommand where T : BaseTaskData\r\n{\r\n\tpublic T TaskData { get; set; }\r\n\r\n\tprotected TaskDataCommandBase()\r\n\t{\r\n\t}\r\n\r\n\tprotected TaskDataCommandBase(T taskData)\r\n\t{\r\n\t\tthis.TaskData = taskData;\r\n\t}\r\n}\r\n```\r\n\r\nThe problem here is when the method  `GetTypeName(Type t)` gets the property T TaskData as input, the `t.FullName` is then null. ContainsKey using null causes the exception. Here the stacktrace\r\n\r\n\r\n```\r\n[ArgumentNullException: Value cannot be null.\r\nParameter name: key]\r\n   System.Collections.Generic.Dictionary`2.FindEntry(TKey key) +11064477\r\n   System.Collections.Generic.Dictionary`2.ContainsKey(TKey key) +4\r\n   NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.InitType(Type t, ModuleBuilder moduleBuilder) in :0\r\n   NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.InitType(Type t, ModuleBuilder moduleBuilder) in :0\r\n   NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.Initialize(IEnumerable`1 types) in :0\r\n   NServiceBus.Serializers.XML.Config.MessageTypesInitializer.Run() in :0\r\n   NServiceBus.Configure.<Initialize>b__14(IWantToRunWhenConfigurationIsComplete o) in :0\r\n   System.Collections.Generic.List`1.ForEach(Action`1 action) +10996297\r\n   NServiceBus.Configure.Initialize() in :0\r\n   NServiceBus.Configure.CreateBus() in :0\r\n```\r\n\r\nJust to make it clear, I can't actually go on with the development, because the bus is not able to start.\r\n\r\nThe minimum I expect is to check for abstract classes, because it makes no sense to map them. This should be an easy fix."
1736,'','log4net NullReferenceExceptions \nIn Version 5 log4net is no longer embedded inside NServiceBus\r\n\r\n--\r\n\r\nNServiceBus 4.1.1 produces actually during startup a lot of NullReferenceExceptions because of the following issue\r\n\r\nUsing dynamic methods with log4net causes NullReferenceException in StackFrameItem\r\nhttps://issues.apache.org/jira/browse/LOG4NET-393\r\n\r\nYou should update the log4net library'
1735,'','When an endpoint does not use Gateway, but NHibernateGateway Persistence is defined, an unfriendly exception is thrown\n**Steps to repro**\r\n\r\n1. Use the pub/sub sample\r\n2. Add NHibernate to the publisher\r\n\r\n        install-package NServiceBus.NHibernate MyPublisher\r\n\r\n3. Modify app.config as below:\r\n\r\n         <connectionStrings>\r\n        <add name="NServiceBus/Persistence" connectionString="Data Source=.\\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />\r\n         </connectionStrings>\r\n        <appSettings>\r\n        <!-- dialect is defaulted to MsSql2008Dialect, if needed change accordingly -->\r\n        <add key="NServiceBus/Persistence/NHibernate/dialect" value="NHibernate.Dialect.MsSql2008Dialect" />\r\n        <!-- other optional settings examples -->\r\n        <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider" />\r\n        <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver" />\r\n        </appSettings>\r\n        \r\n4. Add a class to specify NH persistence which includes the Gateway.\r\n\r\n         public class ConfigureNHibernateSubscriptionStorage : IWantCustomInitialization\r\n        {\r\n            public void Init()\r\n            {\r\n                NServiceBus.Configure.Instance\r\n                    .UseNHibernateSubscriptionPersister()\r\n                    .UseNHibernateTimeoutPersister()\r\n                    .UseNHibernateSagaPersister()\r\n                    .UseNHibernateGatewayPersister();\r\n            }\r\n        }\r\n\r\n5. Start the endpoint and notice the exception\r\n    ![image](https://f.cloud.github.com/assets/854553/1477668/6b084936-465f-11e3-8821-4e137b823616.png)\r\n\r\n**NOTE:** Either removing `.UseNHibernateGatewayPersister()` or starting the endpoint with `NServiceBus.MultiSite` profile will work as expected.'
1734,'','Updated windows registry key in init.ps1 powershell script.\nUpdated path to NServiceBus key in windows registry in init.ps1 powershell script.\r\n\r\nIt caused annoying error "missing key" in powershell console while opening solution in Visual Studio'
1733,'','Master\n'
1732,'johnsimons','Support disconnecting workers from a running distributor\nAdd the ability to send a control message to the distributor telling it to disconnect a given worker. When a worker is disconnected no work will be sent to it and ready messages for that worker will be ignored until it reconnects with a new "worker-session-id". \r\n'
1731,'andreasohlund','Complete a spike for non-dtc ops using RavenDB\n'
1729,'','UnicastBus has a public transport field and a public Transport property which is not cls complient\nNeed to obsolete `transport` with the intent of making it private eventually. '
1728,'','"Comparison to integral constant is useless" in XmlMessageSerializer\nSo `XmlMessageSerializer` gives the following warning \r\n\r\n   Warning\t3\tComparison to integral constant is useless; the constant is outside the range of type \'char\'\tC:\\Code\\NServiceBus\\src\\NServiceBus.Core\\Serializers\\XML\\XmlMessageSerializer.cs\t1189\t25\tNServiceBus.Core\r\n\r\nfor this code\r\n\r\n    if (c == 0x9 || c == 0xA || c == 0xD\r\n            || (0x20 <= c && c <= 0xD7FF)\r\n            || (0xE000 <= c && c <= 0xFFFD)\r\n            || (0x10000 <= c && c <= 0x10ffff)'
1727,'SimonCropp','NServiceBus.Host package sets the wrong startup project\ninstall-package NServiceBus.Host \r\n\r\nSets the "Start external program" to: \r\n\r\nc:\\users\\andreas.ohlund\\documents\\visual studio 2012\\Projects\\Plugin42\\Plugin42\\bin\\Debug\\(NServiceBus.Host 4.2.0.Id).exe\r\n\r\nshould be:\r\n\r\nc:\\users\\andreas.ohlund\\documents\\visual studio 2012\\Projects\\Plugin42\\Plugin42\\bin\\Debug\\NServiceBus.Host.exe'
1726,'sfarmar','Samples should use nuget for non particular references\neg Gateway Sample should not reference nhibernate.dll in binaries https://github.com/Particular/NServiceBus/blob/develop/Samples/Gateway/SiteB/SiteB.csproj#L41\r\n\r\nwill suffice for now to fix in develop and fix the zip file'
1725,'','Remove CLS Compliant from ObjectBuilder.Spring \nSpring is not CLS Compliant so no point making ObjectBuilder.Spring CLS Compliant'
1724,'','Transport Samples have incorrect assembly bindings\n**Steps to repro:**\r\n1. Install the 4.2 installer\r\n2. Inspect the samples directory\r\nInspect the app.config in the VideoStore samples for the `ActiveMQ`, `RabbitMQ` and `SqlServer` transports for the assembly redirects.\r\n\r\nNotice `4.1.0.0` instead of `4.2.0.0`\r\n\r\n````xml\r\n   <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name="NServiceBus.Core" publicKeyToken="9fc386479f8a226c" culture="neutral" />\r\n        <bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name="NServiceBus" publicKeyToken="9fc386479f8a226c" culture="neutral" />\r\n        <bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n````'
1723,'',"Gateway sample installed with the 4.2 installer does not compile\n**Steps to repro**\r\n1. Open the gateway sample installed by the 4.2 installer\r\n2. Hit F5\r\n\r\nInstaller used: `Particular.NServiceBus-4.2.0-Beta2.exe`\r\n\r\n**Notice the below errors:**\r\n\r\n````\r\n2>C:\\Program Files (x86)\\Particular Software\\NServiceBus\\v4.2\\Samples\\Gateway\\SiteA\\CustomResponder\\Inspectors\\AuditInspector.cs(16,17,16,46): error CS0619: 'NServiceBus.Unicast.UnicastBus.ForwardReceivedMessagesTo' is obsolete: 'Will be removed in version 5.0.0.'\r\n2>C:\\Program Files (x86)\\Particular Software\\NServiceBus\\v4.2\\Samples\\Gateway\\SiteA\\CustomResponder\\Inspectors\\AuditInspector.cs(19,75,19,104): error CS0619: 'NServiceBus.Unicast.UnicastBus.ForwardReceivedMessagesTo' is obsolete: 'Will be removed in version 5.0.0.'\r\n========== Build: 1 succeeded, 1 failed, 3 up-to-date, 0 skipped ==========\r\n````"
1721,'',"Provide hooks to allow ServiceControl to inject the auditing behavior into the pipeline\nTo make this easier we should also create subpipelines for each message handler (since sagas is just a MH that happens to have state). This pipeline will be needed when we introduce capturing of debug messages.\r\n\r\nFor now we'll just do a internals visible to ServiceControl.EndpointPlugin since we want to keep users from using it for a while longer."
1720,'SimonCropp','Simplify the license validation\nTo make it easier for users we should skip checking binary versions and instead do:\r\n\r\n 1. Add release date into the binaries as an assmbly attribute\r\n 2. Modify the check to: `if UpgradeProtectionExpiryDate>= Now OR UpgradeProtectionExpiryDate >= ReleaseDateOfBinaries => ok `\r\n   \r\n\r\n'
1719,'',"Symbols can't be loaded for nservicebus assemblies\nLooks like there is an issue with the pdb's in the core package, see the conversation below https://github.com/Particular/NServiceBus.Azure/issues/61#issuecomment-27471209\r\n\r\nI have the same issue, can step into azure related files just fine, but nothing from the core, any ideas?"
1718,'SimonCropp','Bus.Inmemory.Raise causes exceptions\n**Steps to repro**\r\n1. Take the current 4.1.1 VideoStore.MSMQ Sample and replace all of the NServiceBus references to use the latest 4.2 version\r\n2. Click on submit order on the website\r\n3. Notice the exception:\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1440740/523c0a4c-419f-11e3-8ae0-19269c37678e.png)\r\n'
1717,'johnsimons','If persistence is disabled in the fluent configuration but persistence key is present in the config file, persistence is enabled\nThe logic should be disabled and give a warning that configs are not consistent.\r\n\r\nRelated to https://github.com/Particular/NServiceBus/issues/1716'
1716,'','When using the SqlServer transport, disabling the timeout manager results in a raven exception\nI have the following configuration\r\n\r\n        {\r\n            XmlConfigurator.ConfigureAndWatch(new FileInfo(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile));\r\n            \r\n            NServiceBus.SetLoggingLibrary.Log4Net();\r\n\r\n            var builder = new ContainerBuilder();\r\n\r\n            builder\r\n                .RegisterAssemblyTypes(GetAllAssemblies())\r\n                .Where(t => t.GetCustomAttributes(typeof(IocInjectionAttribute), false).Any())\r\n                .AsSelf()\r\n                .AsImplementedInterfaces();\r\n\r\n            NServiceBus.Configure\r\n                .With()\r\n                .UseTransport<SqlServer>()\r\n                .AutofacBuilder(builder.Build())\r\n                .UnicastBus();\r\n\r\n            NServiceBus.Configure.Features.Disable<NServiceBus.Features.Audit>();\r\n            NServiceBus.Configure.Features.Disable<NServiceBus.Features.Sagas>();\r\n        }\r\n\r\nWhich is failing with with the Raven related error as shown bellow.\r\n\r\n\r\n{"Connection string name: \'code\' could not be parsed, unknown option: \'source\'"}\r\n\r\n   at Raven.Abstractions.Data.ConnectionStringParser`1.ProcessConnectionStringOption(NetworkCredential networkCredentials, String key, String value) in c:\\Builds\\RavenDB-Stable\\Raven.Abstractions\\Data\\ConnectionStringParser.cs:line 143\r\n   at Raven.Abstractions.Data.ConnectionStringParser`1.Parse() in c:\\Builds\\RavenDB-Stable\\Raven.Abstractions\\Data\\ConnectionStringParser.cs:line 157\r\n   at Raven.Client.Document.DocumentStore.ParseConnectionString(String connString) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Document\\DocumentStore.cs:line 206\r\n   at NServiceBus.ConfigureRavenPersistence.RavenPersistenceWithConnectionString(Configure config, String connectionStringValue, String database)\r\n   at NServiceBus.ConfigureRavenPersistence.RavenPersistence(Configure config)\r\n   at NServiceBus.ConfigureTimeoutManager.UseRavenTimeoutPersister(Configure config)\r\n   at NServiceBus.ConfigureRavenPersistence.<RegisterDefaults>b__5()\r\n   at NServiceBus.Config.InfrastructureServices.Enable[T]()\r\n   at NServiceBus.Features.TimeoutManager.Initialize()\r\n   at NServiceBus.Features.FeatureInitializer.<>c__DisplayClass3.<InitializeFeatures>b__2(Type t)\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Configure.ForAllTypes[T](Action`1 action)\r\n   at NServiceBus.Features.FeatureInitializer.InitializeFeatures()\r\n   at NServiceBus.Features.FeatureInitializer.FinalizeConfiguration()\r\n   at NServiceBus.Configure.<Initialize>b__13(IFinalizeConfiguration t)\r\n   at NServiceBus.Configure.<>c__DisplayClass23`1.<ActivateAndInvoke>b__20(Type t)\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Configure.ForAllTypes[T](Action`1 action)\r\n   at NServiceBus.Configure.ActivateAndInvoke[T](Action`1 action, Nullable`1 thresholdForWarning)\r\n   at NServiceBus.Configure.Initialize()\r\n   at NServiceBus.Configure.CreateBus()\r\n   at NServiceBus.Hosting.GenericHost.Start()\r\n   at NServiceBus.Hosting.Windows.WindowsHost.Start()\r\n   at NServiceBus.Hosting.Windows.Program.<>c__DisplayClassd.<Main>b__5(WindowsHost service)\r\n   at Topshelf.Internal.ControllerDelegates`1.StartActionObject(Object obj)\r\n   at Topshelf.Internal.IsolatedServiceControllerWrapper`1.<>c__DisplayClass2.<set_StartAction>b__1(TService service)\r\n   at Topshelf.Internal.ServiceController`1.<.cctor>b__1(ServiceController`1 sc)\r\n   at Magnum.StateMachine.LambdaAction`1.Execute(T instance, Event event, Object parameter)\r\n   at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter)\r\n\r\nI don\'t want support for sagas in this endpoint so I did not add these to the config:\r\n\r\n                .UseNHibernateTimeoutPersister()\r\n                .UseNHibernateSagaPersister()\r\n\r\nIf I add them and even after disabling the saga support:\r\n\r\nNServiceBus.Configure.Features.Disable<NServiceBus.Features.Sagas>();\r\n\r\nI still get the timeout queries in the log:\r\n\r\n2013-10-25 17:22:33,620 [15] INFO NHibernate.Loader.Loader - SELECT this_.Id as y0_, this_.Time as y1_ FROM TimeoutEntity this_ WHERE this_.Endpoint = @p0 and (this_.Time >= @p1 and this_.Time <= @p2) ORDER BY this_.Time asc\r\n2013-10-25 17:22:33,760 [15] INFO NHibernate.Loader.Loader - SELECT TOP (@p0)  this_.Id as Id0_0_, this_.Destination as Destinat2_0_0_, this_.SagaId as SagaId0_0_, this_.State as State0_0_, this_.Time as Time0_0_, this_.CorrelationId as Correlat6_0_0_, this_.Headers as Headers0_0_, this_.Endpoint as Endpoint0_0_ FROM TimeoutEntity this_ WHERE this_.Endpoint = @p1 and this_.Time > @p2 ORDER BY this_.Time asc\r\n\r\nNot sure, but something does not look right here.\r\n\r\nThanks'
1714,'johnsimons','Lack of 32-bit host in NServiceBus.Host32 package\nThe `NServiceBus.Host32` package 4.1.1 does not contain `NServiceBus.Host32.exe`, but `NServiceBus.Host.exe`\r\n\r\nThe output from `CorFlags` illustrates the issue\r\n\r\n    CLR Header: 2.5\r\n    PE        : PE32\r\n    CorFlags  : 9\r\n    ILONLY    : 1\r\n    32BIT     : 0\r\n    Signed    : 1'
1713,'andreasohlund','SagaPipeline - Saga is not started, when an event is published\n--\r\n**Steps to repro:**\r\n1. Have a client publish an event\r\n2. Have a server, that starts a saga when the event is published.\r\n3. See that instead of starting the saga, a Saga not found message is displayed and the saga is not started.\r\n\r\nI modified the 3.3.8 sample (converted to 4.1) to do the following.\r\n1. Client sends a request, Server replies with a response. Server also sends a command to the client\r\n2. Client upon receiving the command, publishes an event\r\n3. Server is listening to the event and should start a saga.\r\n\r\nThis scenario works with 4.1.1 and not with the binaries from the branch.\r\n\r\n**Server**\r\n    \r\n    public class RequestMessageHandler : IHandleMessages<Request>\r\n    {\r\n        public IBus Bus { get; set; }\r\n\r\n        public void Handle(Request message)\r\n        {\r\n            Console.WriteLine("Request received with id:" + message.RequestId);\r\n\r\n            Bus.Reply(new Response\r\n                          {\r\n                              ResponseId = message.RequestId\r\n                          });\r\n\r\n            Bus.Send(new DoSomethingCommand(){CommandId =  Guid.NewGuid() });\r\n        }\r\n    }\r\n\r\n**Client**\r\n\r\n    class DoSomethingHandler : IHandleMessages<DoSomethingCommand>\r\n    {\r\n        public IBus Bus { get; set; }\r\n        public void Handle(DoSomethingCommand message)\r\n        {\r\n            Console.WriteLine("Command Received");\r\n            Bus.Publish<SomethingHappenedEvent>(m => { m.OrderId = message.CommandId; });\r\n        }\r\n    }\r\n\r\n**Server - Saga -- This Saga does not start!**\r\n\r\n    public class SagaStartedByEvent : Saga<SagaStartedByEventData>,\r\n        IAmStartedByMessages<SomethingHappenedEvent>,\r\n        IHandleTimeouts<ReadyToInstall>\r\n    {\r\n        public void Handle(SomethingHappenedEvent message)\r\n        {\r\n            Data.OrderId = message.OrderId;\r\n            var someState = new Random().Next(10);\r\n            LogMessage("Requesting a custom timeout v3.0 style ReadyToInstall ");\r\n         \r\n            RequestTimeout<ReadyToInstall>(TimeSpan.FromSeconds(5));\r\n   \r\n        }\r\n\r\n        void LogMessage(string message)\r\n        {\r\n            Console.WriteLine(string.Format("{0} - {1}", DateTime.Now.ToLongTimeString(),message));\r\n        }\r\n\r\n        public void Timeout(ReadyToInstall state)\r\n        {\r\n            LogMessage("Received the ReadyToInstall timeout -- Marking the saga as complete");\r\n            ReplyToOriginator<Response>(m => { m.ResponseId = Guid.NewGuid(); });\r\n            MarkAsComplete();\r\n        }\r\n    }\r\n\r\n    public class ReadyToInstall\r\n    {\r\n    }\r\n'
1712,'SimonCropp','Remove dependency T4\nT4 Scaffolding are not adding much value. Also there are compatibility issues with Visual Studio 2013'
1710,'','When installer is run on Server OS-es, instead of failing, should inform the user that installer is for Dev Boxes only.\nIf attempting to run the installer on Server OS-es, the installer should inform the user with a message:\r\n1. To run the powershell commandlets and provide the link to installing using powershell 2. Inform the user that the installer is for dev boxes only.\r\n\r\n'
1709,'','Upgrade to Autofac 3.1.5\n'
1708,'',"Autofac 3.0.0 leaks memory\nWhen child containers is used. Fix is to upgrade Autofac to 3.0.1\r\n\r\nFrom [Autofac Release Notes](https://code.google.com/p/autofac/wiki/ReleaseNotes)\r\n\r\n> Rollback of  Issue 397  (Nested lifetime scopes aren't disposed when the parent is disposed) due to memory leak.\r\n"
1707,'','Remove UnicastBus.DisableMessageHandling \n--\r\n\r\nso `UnicastBus.DisableMessageHandling` https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/UnicastBus.cs#L51 \r\n\r\n * not tested\r\n * not documented http://particular.net/Search?q=DisableMessageHandling&button=\r\n * does not exist on `IUnicastBus`\r\n * does not exist on the interwebs https://www.google.com.au/search?q=DisableMessageHandling#q=%22DisableMessageHandling%22\r\n\r\nCan we delete this?'
1706,'SimonCropp','SagaPipeline: Endpoint fails to process client subscription messages\n**Steps to repro:**\r\n\r\n1. Take the pub/sub sample from 4.1.1 and convert the publisher to use the new binaries from the SagaPipeline branch from the build server:\r\n\r\n    ````c#\r\n\r\n    install-package NServiceBus.Interfaces -version 4.2.0-PullRequest-1614 -pre MyPublisher\r\n\r\n    install-package NServiceBus -version 4.2.0-PullRequest-1614 -pre MyPublisher\r\n\r\n    install-package NServiceBus.Host -version 4.2.0-PullRequest-1614 -pre MyPublisher\r\n\r\n    ````\r\n\r\n2. Leave the subscribers to be as they are referencing 4.1.1 \r\n3. Clear out RavenDB persistence if you have already run this sample prior \r\n4. Start the sample and notice the exception in the publisher:\r\n\r\n```\r\n<HeaderInfo>\r\n\t<Key>NServiceBus.ExceptionInfo.StackTrace</Key>\r\n\t<Value>System.Exception: An error occurred while attempting to invoke the following behavior chain: NServiceBus.Pipeline.BehaviorChain ---&gt; System.AggregateException:\r\nOne or more errors occurred. ---&gt; System.InvalidOperationException: Queue empty.\r\n     at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\r\n     at System.Collections.Generic.Queue`1.Dequeue()\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.InvokeHandlersBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Sagas.SagaPersistenceBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.LoadHandlersBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.CallbackInvocationBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.ApplyIncomingMessageMutatorsBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.ExtractLogicalMessagesBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.RaiseMessageReceivedBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.ApplyIncomingTransportMessageMutatorsBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     --- End of inner exception stack trace ---\r\n     at NServiceBus.UnitOfWork.UnitOfWorkBehavior.AppendEndExceptionsAndRethrow(Exception parentException) in :line 0\r\n     at NServiceBus.UnitOfWork.UnitOfWorkBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.ForwardBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.AuditBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.ImpersonateSenderBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.&lt;&gt;c__DisplayClass3.&lt;InvokeNext&gt;b__1() in :line 0\r\n     at NServiceBus.Pipeline.Behaviors.MessageHandlingLoggingBehavior.Invoke(BehaviorContext context, Action next) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.InvokeNext(BehaviorContext context) in :line 0\r\n     at NServiceBus.Pipeline.BehaviorChain.Invoke(BehaviorContext context) in :line 0\r\n     --- End of inner exception stack trace ---\r\n     at NServiceBus.Unicast.Transport.TransportReceiver.ProcessMessage(TransportMessage message) in :line 0\r\n     at NServiceBus.Unicast.Transport.TransportReceiver.TryProcess(TransportMessage message) in :line 0\r\n     at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.ProcessMessage(TransportMessage message) in :line 0\r\n     at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Action() in :line 0</Value>\r\n  \t</HeaderInfo>\r\n```'
1704,'','IUnicastBus.ClientSubscribed is broken\nSee conversation here \r\nhttps://github.com/Particular/NServiceBus/commit/8d0d83056cec30f6bf136d0d59c97289c5ac5224#diff-ef1305519c12a7d084c9e6090815521aR20'
1701,'','Figure out where the Stepping over logs come from that seem to be occuring since 4.1\nThis slows down debugging by about 2 minutes per process. Users who have Just My Code enabled are not impacted, but it seriously slows us down when developing & testing'
1700,'','Could not load file or assembly "System.Core, Version=2.0.5.0"\nCopied from https://github.com/Fody/Costura/issues/30\r\n\r\nScenario\r\n\r\n * Application references `System.Core 4.0.0.0`\r\n * Application references LibraryX\r\n * LibraryX references `System.Core 2.0.5.0`\r\n * Application attempts to load LibraryX \r\n\r\nThe following Exception can occur \r\n\r\n```\r\n{"Could not load file or assembly \'System.Core, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e, Retargetable=Yes\' or one of its dependencies. \r\nThe system cannot find the file specified.": "System.Core, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e, Retargetable=Yes"}\r\n```\r\n\r\nThe reason is that for the .net is incorrectly firing a [AppDomain.AssemblyResolve](http://msdn.microsoft.com/en-us/library/system.appdomain.assemblyresolve.aspx)  for `System.Core 2.0.5.0`. This should not be happening since `System.Core 2.0.5.0` should be automatically redirected to `System.Core 4.0.0.0`.'
1699,'indualagarsamy','Messages processed by the Gateway satellite are being forwarded to the audit queue causing duplicates in the audit queue.\n--\r\n**Steps to Reproduce**\r\n1. Run the gateway sample and click the `Send Price update command` button from the website\r\n2. Inspect the audit queue\r\n3. Notice that there are two messages for `PriceUpdateReceived`. One of the messages is the result of the Headquarter processing the message and this is correct and the message headers have the correct `NServiceBus.ProcessingStarted` and `NServiceBus.ProcessingEnded` stats. However, there is also another message and this is because the gateway satellite processed the `Bus.Reply<PriceUpdateReceived>` and this one does not have any stats.  This is because UoWs are not run for satellites.\r\n\r\nWe should not be auditing messages that are processed by our satellites meant for internal use.\r\n\r\nThe following code is responsible for this behavior: \r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Gateway/Sending/GatewaySender.cs#L109-110\r\n\r\nWe had this in 3.3.8 as well:\r\nhttps://github.com/Particular/NServiceBus/blob/3.3.8/src/gateway/NServiceBus.Gateway/Sending/GatewaySender.cs#L108-109\r\n\r\n'
1698,'','ProcessingStatistics seem to not get recorded for some messages when using Gateway\n**Steps to repro:**\r\n1. Run the gateway sample and send a command from the web to initiate a message flow\r\n2. Inspect the messages in the Audit queue\r\n3. Inspect the message type `PriceUpdateReceived` and its headers. Notice that it does not have the `NServiceBus.ProcessingStarted` and `NServiceBus.ProcessingEnded`\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Monitoring/ProcessingStatistics.cs\r\n\r\nHere are the headers that this message has in the audit queue:\r\n\r\n````xml\r\n<?xml version="1.0"?>\r\n<ArrayOfHeaderInfo xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.MessageId</Key>\r\n    <Value>e6abcdc1-2a89-4d28-abe5-a25f00d31a09</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.CorrelationId</Key>\r\n    <Value>6d060bef-11ec-4959-8806-a25f00d317b3</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.OriginatingEndpoint</Key>\r\n    <Value>SiteA</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.OriginatingMachine</Key>\r\n    <Value>SELENE</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.MessageIntent</Key>\r\n    <Value>Send</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.ContentType</Key>\r\n    <Value>text/xml</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.EnclosedMessageTypes</Key>\r\n    <Value>Headquarter.Messages.PriceUpdateReceived, Headquarter.Messages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>CorrId</Key>\r\n    <Value>6d060bef-11ec-4959-8806-a25f00d317b3\\0</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>WinIdName</Key>\r\n    <Value />\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.Version</Key>\r\n    <Value>4.0.0</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.TimeSent</Key>\r\n    <Value>2013-10-22 19:48:35:898513 Z</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.RelatedTo</Key>\r\n    <Value>6d060bef-11ec-4959-8806-a25f00d317b3</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.ConversationId</Key>\r\n    <Value>c34a7d1a-02f3-416b-9e57-a25f00d317c2</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.To</Key>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.OriginatingSite</Key>\r\n    <Value>http,http://localhost:25899/SiteA/NumberOfWorkerThreads=1Default=True</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.Header.RouteTo</Key>\r\n    <Value>SiteA.gateway@SELENE</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.Gateway.LegacyMode</Key>\r\n    <Value>True</Value>\r\n  </HeaderInfo>\r\n  <HeaderInfo>\r\n    <Key>NServiceBus.OriginatingAddress</Key>\r\n    <Value>SiteA@SELENE</Value>\r\n  </HeaderInfo>\r\n</ArrayOfHeaderInfo>\r\n````'
1697,'','When a gateway endpoint receives a command from the web, the `NServiceBus.TimeSent` header value is not being recorded.\n**Steps to repro:**\r\n1. Run the gateway sample\r\n2. Send a request from the web client\r\n3. The headquarter endpoint handles the messages\r\n4. Inspect the audit queue for the `UpdatePrice` message and the headers. Notice that it is missing `NServiceBus.TimeSent` key\r\n5. Inspect the `PriceUpdated` message and the headers. Notice that the `NServiceBus.TimeSent` is present.\r\n\r\nThe `NServiceBus.TimeSent` is currently being added by an outgoing mutator. And since the command is being sent by the web, this is not being done.\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Monitoring/SentTimeMutator.cs#L16\r\n'
1696,'','nuget Install-Package NServiceBus.Host fails on windows 2008 r2 64 bit\nThis was reproduced on windows 2008 r2 64 bit\r\nVisual Studio 2010\r\n4.1.0\r\n\r\nThe script errors are IE blocking scripting (errrgh)\r\n\r\nThe error is MSMQ failure\r\n\r\n```\r\nPM> Install-Package NServiceBus.Host\r\nAttempting to resolve dependency \'NServiceBus (≥ 4.1.0)\'.\r\nAttempting to resolve dependency \'NServiceBus.Interfaces (≥ 4.1.0)\'.\r\nYou are downloading NServiceBus.Interfaces from NServiceBus Ltd, the license agreement to which is available at http://particular.net/LicenseAgreement. Check the package for additional dependencies, which may come with their own license agreement(s). Your use of the package and dependencies constitutes your acceptance of their license agreements. If you do not accept the license agreement(s), then delete the relevant components from your device.\r\nSuccessfully installed \'NServiceBus.Interfaces 4.1.0\'.\r\nYou are downloading NServiceBus from NServiceBus Ltd, the license agreement to which is available at http://particular.net/LicenseAgreement. Check the package for additional dependencies, which may come with their own license agreement(s). Your use of the package and dependencies constitutes your acceptance of their license agreements. If you do not accept the license agreement(s), then delete the relevant components from your device.\r\nSuccessfully installed \'NServiceBus 4.1.0\'.\r\n\r\nType \'get-help about_NServiceBus\' to see all available NServiceBus commands.\r\n\r\nMsmq is not installed or correctly setup.\r\nNew-ItemProperty : Cannot find path \'HKCU:\\SOFTWARE\\NServiceBus\\4.1\' because it does not exist.\r\nAt C:\\users\\nsbuser\\documents\\visual studio 2012\\Projects\\ClassLibrary1\\packages\\NServiceBus.4.1.0\\tools\\init.ps1:76 char:1\r\n+ New-ItemProperty -Path $nserviceBusVersionPath -Name $machinePreparedKey -Proper ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (HKCU:\\SOFTWARE\\NServiceBus\\4.1:String) [New-ItemProperty], ItemNotFoundException\r\n    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.NewItemPropertyCommand\r\n \r\nYou are downloading NServiceBus.Host from NServiceBus Ltd, the license agreement to which is available at http://particular.net/LicenseAgreement. Check the package for additional dependencies, which may come with their own license agreement(s). Your use of the package and dependencies constitutes your acceptance of their license agreements. If you do not accept the license agreement(s), then delete the relevant components from your device.\r\nSuccessfully installed \'NServiceBus.Host 4.1.0\'.\r\nSuccessfully added \'NServiceBus.Interfaces 4.1.0\' to ClassLibrary1.\r\nSuccessfully added \'NServiceBus 4.1.0\' to ClassLibrary1.\r\nSuccessfully added \'NServiceBus.Host 4.1.0\' to ClassLibrary1.\r\nAdded EndpointConfig output at EndpointConfig.cs\r\n\r\nPM>\r\n```\r\n\r\n\r\nand this is after msmq is installed:\r\n\r\n4.1.1\r\n\r\n```\r\nPM> Install-Package NServiceBus.Host\r\nAttempting to resolve dependency \'NServiceBus (≥ 4.1.1)\'.\r\nAttempting to resolve dependency \'NServiceBus.Interfaces (≥ 4.1.1)\'.\r\nInstalling \'NServiceBus.Interfaces 4.1.1\'.\r\nYou are downloading NServiceBus.Interfaces from NServiceBus Ltd, the license agreement to which is available at http://particular.net/LicenseAgreement. Check the package for additional dependencies, which may come with their own license agreement(s). Your use of the package and dependencies constitutes your acceptance of their license agreements. If you do not accept the license agreement(s), then delete the relevant components from your device.\r\nSuccessfully installed \'NServiceBus.Interfaces 4.1.1\'.\r\nInstalling \'NServiceBus 4.1.1\'.\r\nYou are downloading NServiceBus from NServiceBus Ltd, the license agreement to which is available at http://particular.net/LicenseAgreement. Check the package for additional dependencies, which may come with their own license agreement(s). Your use of the package and dependencies constitutes your acceptance of their license agreements. If you do not accept the license agreement(s), then delete the relevant components from your device.\r\nSuccessfully installed \'NServiceBus 4.1.1\'.\r\n\r\nType \'get-help about_NServiceBus\' to see all available NServiceBus commands.\r\n\r\nPerformance counters are not installed.\r\nRavenDB is not installed. We checked port 8080 and 8081.\r\nNew-ItemProperty : Cannot find path \'HKCU:\\SOFTWARE\\NServiceBus\\4.1\' because it does not exist.\r\nAt C:\\Users\\nsbuser\\Documents\\Visual Studio 2010\\Projects\\ClassLibrary2\\packages\\NServiceBus.4.1.1\\tools\\init.ps1:76 char:17\r\n+ New-ItemProperty <<<<  -Path $nserviceBusVersionPath -Name $machinePreparedKey -PropertyType String -Value "true" | Out-Null\r\n    + CategoryInfo          : ObjectNotFound: (HKCU:\\SOFTWARE\\NServiceBus\\4.1:String) [New-ItemProperty], ItemNotFoundException\r\n    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.NewItemPropertyCommand\r\n \r\nInstalling \'NServiceBus.Host 4.1.1\'.\r\nYou are downloading NServiceBus.Host from NServiceBus Ltd, the license agreement to which is available at http://particular.net/LicenseAgreement. Check the package for additional dependencies, which may come with their own license agreement(s). Your use of the package and dependencies constitutes your acceptance of their license agreements. If you do not accept the license agreement(s), then delete the relevant components from your device.\r\nSuccessfully installed \'NServiceBus.Host 4.1.1\'.\r\nAdding \'NServiceBus.Interfaces 4.1.1\' to ClassLibrary2.\r\nSuccessfully added \'NServiceBus.Interfaces 4.1.1\' to ClassLibrary2.\r\nAdding \'NServiceBus 4.1.1\' to ClassLibrary2.\r\nSuccessfully added \'NServiceBus 4.1.1\' to ClassLibrary2.\r\nAdding \'NServiceBus.Host 4.1.1\' to ClassLibrary2.\r\nSuccessfully added \'NServiceBus.Host 4.1.1\' to ClassLibrary2.\r\nAdded EndpointConfig output at EndpointConfig.cs\r\n\r\nPM> \r\n```'
1695,'','Fixes #1683 - Gateway logs ProtocolViolationException error in response to HTTP HEAD requests\nRespond with 0 length body to HEAD requests over gateway. The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response.'
1694,'','Videostore.Msmq use Group for correlation instead of ConnectionId\nhe videostore samples use signalr ConnectionId for correlation of messages, this works great locally, but if your connection is far away (as in a production environment), it drops quite easily and will reconnect with a different connectionId. We should use groups instead to keep track of all connections that belong to a user and reply to the group of connections\r\n\r\nAdd a join method to the OrdersHub that adds the user to a group\r\n\r\npublic void Join(string clientId)\r\n{\r\n    Groups.Add(Context.ConnectionId, clientId);\r\n}\r\n\r\nJoin the user on Hub start and on reconnect\r\n\r\n $.connection.hub.reconnected(function () {\r\n      ordersHub.server.join($scope.clientId);\r\n });\r\n    \r\n$.connection.hub.start(function () {\r\n     ordersHub.server.join($scope.clientId);\r\n});\r\n\r\nPass the clientId from the client \r\n\r\nordersHub.server.placeOrder(selectedVideos, $scope.clientId)\r\n\r\nAnd correlate back on the group\r\n\r\npublic void Handle(OrderPlaced message)\r\n{\r\n      var context = GlobalHost.ConnectionManager.GetHubContext<OrdersHub>();\r\n\r\n      context.Clients.Group(message.ClientId).orderReceived(new\r\n      {\r\n             message.OrderNumber,\r\n             message.VideoIds\r\n        });\r\n}\r\n'
1693,'SimonCropp','Release v4.1 references clr v4.5\nThe issue has to do with the changes we did to the ilmerge.\r\n\r\nIn our quest to make ilmerge part of VS build we broke the ilmerge :disappointed: \r\n\r\nThe fix is to convert the old working PS to msbuild script or just do it in a PS script?\r\n\r\nWe need to do the following logic in msbuild script:\r\nhttps://github.com/Particular/NServiceBus/blob/4.0.5/default.ps1#L55\r\nfrom line 55-75\r\n\r\nhttp://stackoverflow.com/questions/13748055/could-not-load-type-system-runtime-compilerservices-extensionattribute-from-as'
1692,'',"Checking to see if HKCU key exists. Fixes #1685\n@johnsimons - can you see if this is what you had in mind? \r\nEssentially, I am not writing to the key, if the reg key doesn't exist. \r\n\r\nI tested the script separately turning off the Out-Nulls. I did not verify the whole deal of building a nuget package and testing it out. Let me know if this looks ok to you."
1691,'',"Powershell Commandlet - Set-NServiceBusLocalMachineSettings does not not require the audit queue and error queue parameters as mandatory\n**Steps to repro:**\r\n1. Run `Set-NServiceBusLocalMachineSettings` without supplying the audit q or error q parameters. Notice below:\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1346683/de1d8ba0-36a3-11e3-81bf-a11db6760afd.png)\r\n\r\nShouldn't it ask for the parameters?\r\n\r\nWhy arent the parameters mandatory?\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.PowerShell/SetNServiceBusLocalMachineSettings.cs#L11-14"
1690,'indualagarsamy',"Powershell Test-NServiceBusDTCInstallation incorrectly reports true on Windows 2003\nDue to incorrect registry entry being checked \r\n\r\n--\r\n\r\n**Steps to repro**\r\n1. On a clean machine where NServiceBus hasn't configured DTC (or on a machine where DTC has been installed clean: http://community.newdawn.com/knowledgebase/articles/72759-how-to-uninstall-and-reinstall-the-ms-dtc), run the `Test-NServiceBusDTCInstallation` and see that it reports true:\r\n![image](https://f.cloud.github.com/assets/854553/1346474/03fd8a0e-36a0-11e3-901f-09eb7777c67c.png)\r\n\r\nVerify DTC Settings and see that, it's not configured correctly according to http://particular.net/articles/transactions-message-processing:\r\nNotice that `Network DTC Access` and the `Enable XA Transactions` are not checked.\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1346484/246bb888-36a0-11e3-86c1-7680165f333b.png)\r\n\r\n\r\n"
1689,'','Powershell Commandlet - Both Install-NServiceBusDTC and Test-NServiceBusDTCInstallation only works if MSDTC is already installed.\n**Steps to repro:**\r\n1. Make sure DTC is not installed. If it was already installed, make sure to run through the steps outlined in here(http://community.newdawn.com/knowledgebase/articles/72759-how-to-uninstall-and-reinstall-the-ms-dtc) to uninstall it\r\n2. Load the Poweshell module and type:\r\n`Test-NServiceBusDTCInstallation` or `Install-NServiceBusDTC`\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1346409/18c2dc2e-369f-11e3-83b9-c166630a8363.png)\r\n'
1688,'johnsimons',"WINDOWS 2008 r2 64 bit import NServiceBus.PowerShell.dll fails\nThe installed version of Powershell in 2.1 (tested by running $PSVersionTable)\r\n\r\n```\r\nImport-Module : Could not load file or assembly 'file:///C:\\pstest\\NServiceBus.PowerShell.dll' or one of its dependencies. \r\nThis assembly is built by a runtime newer than the currently loaded runtime and cannot be loaded.\r\nAt line:1 char:14\r\n+ Import-Module <<<<  'C:\\pstest\\NServiceBus.PowerShell.dll'\r\n    + CategoryInfo          : NotSpecified: (:) [Import-Module], BadImageFormatException\r\n    + FullyQualifiedErrorId : System.BadImageFormatException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n\r\n```"
1687,'SimonCropp','Windows Server 2012 installing MSMQ using Powershell Cmdlet fails\nFails with the error\r\n\r\n```\r\nError: 0x800f080c\r\n\r\nFeature name MSMQ-Container is unknown.\r\nA Windows feature name was not recognized.\r\n```\r\n\r\nChange to use the `/all ` option in `DISM` on Server 2012\r\n\r\n--\r\n\r\n### Full Powershell 32 bit output\r\n\r\n```\r\nPS C:\\Users\\nsbuser> Install-NServiceBusMSMQ\r\n\r\nConfirm\r\nAre you sure you want to perform this action?\r\nPerforming operation "Install-NServiceBusMSMQ" on Target "WIN2012-DC".\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "Y"): y\r\nEntering StartMsmqIfNecessary in NServiceBus.Setup.Windows.Msmq.MsmqSetup\r\nChecking if MSMQ is installed.\r\nMSMQ is not installed. Going to install.\r\nExecuting dism /Online /NoRestart /English /Enable-Feature /FeatureName:MSMQ-Container /FeatureName:MSMQ-Server\r\n\r\nDeployment Image Servicing and Management tool\r\nVersion: 6.2.9200.16384\r\n\r\nImage Version: 6.2.9200.16384\r\n\r\n\r\nError: 0x800f080c\r\n\r\nFeature name MSMQ-Container is unknown.\r\nA Windows feature name was not recognized.\r\nUse the /Get-Features option to find the name of the feature in the image and try the command again.\r\n\r\nThe DISM log file can be found at C:\\Windows\\Logs\\DISM\\dism.log\r\n\r\n\r\nInstallation of MSMQ successful.\r\nMSMQ windows service not found! You may need to reboot after MSMQ has been installed.\r\nWARNING: Msmq may need to be reinstalled manually. Please ensure MSMQ is running properly.\r\nPS C:\\Users\\nsbuser>\r\n```\r\n\r\nfull DISM log:\r\n\r\n```\r\n2013-10-16 18:51:38, Info                  DISM   PID=2464 TID=3228 Scratch directory set to \'C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\\'. - CDISMManager::put_ScratchDir\r\n2013-10-16 18:51:38, Info                  DISM   PID=2464 TID=3228 DismCore.dll version: 6.2.9200.16384 - CDISMManager::FinalConstruct\r\n2013-10-16 18:51:38, Info                  DISM   PID=2464 TID=3228 Successfully loaded the ImageSession at "C:\\Windows\\System32\\Dism" - CDISMManager::LoadLocalImageSession\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Found and Initialized the DISM Logger. - CDISMProviderStore::Internal_InitializeLogger\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Failed to get and initialize the PE Provider.  Continuing by assuming that it is not a WinPE image. - CDISMProviderStore::Final_OnConnect\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Finished initializing the Provider Map. - CDISMProviderStore::Final_OnConnect\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Getting Provider DISMLogger - CDISMProviderStore::GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Provider has previously been initialized.  Returning the existing instance. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Getting Provider DISMLogger - CDISMProviderStore::GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Provider has previously been initialized.  Returning the existing instance. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Manager: PID=2464 TID=3228 Successfully created the local image session and provider store. - CDISMManager::CreateLocalImageSession\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Getting Provider DISMLogger - CDISMProviderStore::GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Provider has previously been initialized.  Returning the existing instance. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: \r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: <----- Starting Dism.exe session ----->\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: \r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Host machine information: OS Version=6.2.9200, Running architecture=amd64, Number of processors=2\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Dism.exe version: 6.2.9200.16384\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Executing command line: "dism" /Online /NoRestart /English /Enable-Feature /FeatureName:MSMQ-Container /FeatureName:MSMQ-Server\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Getting Provider FolderManager - CDISMProviderStore::GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Loading Provider from location C:\\Windows\\System32\\Dism\\FolderProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Connecting to the provider located at C:\\Windows\\System32\\Dism\\FolderProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Manager: PID=2464 TID=3228 physical location path: C:\\ - CDISMManager::CreateImageSession\r\n2013-10-16 18:51:38, Info                  DISM   DISM Manager: PID=2464 TID=3228 Copying DISM from "C:\\Windows\\System32\\Dism" - CDISMManager::CreateImageSessionFromLocation\r\n2013-10-16 18:51:38, Info                  DISM   DISM Manager: PID=2464 TID=3228 Successfully loaded the ImageSession at "C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D" - CDISMManager::LoadRemoteImageSession\r\n2013-10-16 18:51:38, Info                  DISM   DISM Image Session: PID=3732 TID=1488 Instantiating the Provider Store. - CDISMImageSession::get_ProviderStore\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Initializing a provider store for the IMAGE session type. - CDISMProviderStore::Final_OnConnect\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\OSProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\OSProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM OS Provider: PID=3732 TID=1488 Defaulting SystemPath to C:\\ - CDISMOSServiceManager::Final_OnConnect\r\n2013-10-16 18:51:38, Info                  DISM   DISM OS Provider: PID=3732 TID=1488 Defaulting Windows folder to C:\\Windows - CDISMOSServiceManager::Final_OnConnect\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Attempting to initialize the logger from the Image Session. - CDISMProviderStore::Final_OnConnect\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\LogProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\LogProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Found and Initialized the DISM Logger. - CDISMProviderStore::Internal_InitializeLogger\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\PEProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Warning               DISM   DISM Provider Store: PID=3732 TID=1488 Failed to Load the provider: C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\PEProvider.dll. - CDISMProviderStore::Internal_GetProvider(hr:0x8007007e)\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Failed to get and initialize the PE Provider.  Continuing by assuming that it is not a WinPE image. - CDISMProviderStore::Final_OnConnect\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Finished initializing the Provider Map. - CDISMProviderStore::Final_OnConnect\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Getting Provider DISMLogger - CDISMProviderStore::GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has previously been initialized.  Returning the existing instance. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Manager: PID=2464 TID=3228 Image session successfully loaded from the temporary location: C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D - CDISMManager::CreateImageSession\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Getting Provider OSServices - CDISMProviderStore::GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has previously been initialized.  Returning the existing instance. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Target image information: OS Version=6.2.9200.16683, Image architecture=amd64\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Getting the collection of providers from an image provider store type. - CDISMProviderStore::GetProviderCollection\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\CbsProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\CbsProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Encountered a servicing provider, performing additional servicing initializations. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Finished initializing the CbsConUI Handler. - CCbsConUIHandler::Initialize\r\n2013-10-16 18:51:38, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 CBS is being initialized for online use. More information about CBS actions can be located at: %windir%\\logs\\cbs\\cbs.log - CDISMPackageManager::Initialize\r\n2013-10-16 18:51:38, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Loaded servicing stack for online use only. - CDISMPackageManager::RefreshInstanceAndLock\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\MsiProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\MsiProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Encountered a servicing provider, performing additional servicing initializations. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\IntlProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\IntlProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Encountered a servicing provider, performing additional servicing initializations. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\IBSProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Warning               DISM   DISM Provider Store: PID=3732 TID=1488 Failed to Load the provider: C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\IBSProvider.dll. - CDISMProviderStore::Internal_GetProvider(hr:0x8007007e)\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\DmiProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\DmiProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Encountered a servicing provider, performing additional servicing initializations. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM OS Provider: PID=3732 TID=1488 Successfully loaded the hive. - CDISMOSServiceManager::DetermineBootDrive\r\n2013-10-16 18:51:38, Info                  DISM   DISM Driver Manager: PID=3732 TID=1488 Further logs for driver related operations can be found in the target operating system at %WINDIR%\\inf\\setupapi.offline.log - CDriverManager::Initialize\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\UnattendProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\UnattendProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Encountered a servicing provider, performing additional servicing initializations. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\Wow64provider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Warning               DISM   DISM Provider Store: PID=3732 TID=1488 Failed to get the IDismObject Interface - CDISMProviderStore::Internal_LoadProvider(hr:0x80004002)\r\n2013-10-16 18:51:38, Warning               DISM   DISM Provider Store: PID=3732 TID=1488 Failed to Load the provider: C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\Wow64provider.dll. - CDISMProviderStore::Internal_GetProvider(hr:0x80004002)\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\SmiProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\SmiProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Encountered a servicing provider, performing additional servicing initializations. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\EmbeddedProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Warning               DISM   DISM Provider Store: PID=3732 TID=1488 Failed to Load the provider: C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\EmbeddedProvider.dll. - CDISMProviderStore::Internal_GetProvider(hr:0x8007007e)\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\AppxProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\AppxProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Encountered a servicing provider, performing additional servicing initializations. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\AssocProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\AssocProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Encountered a servicing provider, performing additional servicing initializations. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Loading Provider from location C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\TransmogProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Connecting to the provider located at C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\E7A49FC0-98E0-47F4-A637-02A9A0D3067D\\TransmogProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Encountered a servicing provider, performing additional servicing initializations. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Transmog Provider: PID=3732 TID=1488 Current image session is [ONLINE] - CTransmogManager::GetMode\r\n2013-10-16 18:51:38, Info                  DISM   DISM Transmog Provider: PID=3732 TID=1488 Audit Mode: [No] - CTransmogManager::Initialize\r\n2013-10-16 18:51:38, Info                  DISM   DISM Transmog Provider: PID=3732 TID=1488 GetProductType: ProductType = [ServerNT] - CTransmogManager::GetProductType\r\n2013-10-16 18:51:38, Info                  DISM   DISM Transmog Provider: PID=3732 TID=1488 Product Type: [ServerNT] - CTransmogManager::Initialize\r\n2013-10-16 18:51:38, Info                  DISM   DISM Transmog Provider: PID=3732 TID=1488 Product Type ServerNT : [Yes] - CTransmogManager::Initialize\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Got the collection of providers. Now enumerating them to build the command table.\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: DISM Log Provider\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: OSServices\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: DISM Package Manager\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Succesfully registered commands for the provider: DISM Package Manager.\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: MsiManager\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Succesfully registered commands for the provider: MsiManager.\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: IntlManager\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Succesfully registered commands for the provider: IntlManager.\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: DriverManager\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Succesfully registered commands for the provider: DriverManager.\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: DISM Unattend Manager\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Succesfully registered commands for the provider: DISM Unattend Manager.\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: SmiManager\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: AppxManager\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Succesfully registered commands for the provider: AppxManager.\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: AssocManager\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Succesfully registered commands for the provider: AssocManager.\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Attempting to add the commands from provider: Edition Manager\r\n2013-10-16 18:51:38, Info                  DISM   DISM.EXE: Succesfully registered commands for the provider: Edition Manager.\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Getting Provider DISM Package Manager - CDISMProviderStore::GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Provider has previously been initialized.  Returning the existing instance. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 18:51:38, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Processing the top level command token(enable-feature). - CPackageManagerCLIHandler::Private_ValidateCmdLine\r\n2013-10-16 18:51:38, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Attempting to route to appropriate command handler. - CPackageManagerCLIHandler::ExecuteCmdLine\r\n2013-10-16 18:51:38, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Routing the command... - CPackageManagerCLIHandler::ExecuteCmdLine\r\n2013-10-16 18:51:38, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Encountered the option "featurename" with value "MSMQ-Container" - CPackageManagerCLIHandler::Private_GetPackagesFromCommandLine\r\n2013-10-16 18:51:38, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Encountered an unknown option "featurename" with value "MSMQ-Container" - CPackageManagerCLIHandler::Private_GetPackagesFromCommandLine\r\n2013-10-16 18:51:38, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Encountered the option "featurename" with value "MSMQ-Server" - CPackageManagerCLIHandler::Private_GetPackagesFromCommandLine\r\n2013-10-16 18:51:38, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Encountered an unknown option "featurename" with value "MSMQ-Server" - CPackageManagerCLIHandler::Private_GetPackagesFromCommandLine\r\n2013-10-16 18:51:39, Error                 DISM   DISM Package Manager: PID=3732 TID=1488 Failed to get the Update through CBS. - CDISMPackage::Internal_OpenFeature(hr:0x800f080c)\r\n2013-10-16 18:51:39, Error                 DISM   DISM Package Manager: PID=3732 TID=1488 Failed to get the underlying CBS Feature - CDISMPackage::OpenFeature(hr:0x800f080c)\r\n2013-10-16 18:51:39, Error                 DISM   DISM Package Manager: PID=3732 Feature name MSMQ-Container is unknown. - CPackageManagerCLIHandler::Private_GetFeaturesFromCommandLine(hr:0x800f080c)\r\n2013-10-16 18:51:39, Error                 DISM   DISM Package Manager: PID=3732 TID=1488 Unknown features were specified on the command-line. - CPackageManagerCLIHandler::Private_GetFeaturesFromCommandLine(hr:0x800f080c)\r\n2013-10-16 18:51:39, Error                 DISM   DISM Package Manager: PID=3732 TID=1488 Failed to get the Feature List from the command line. - CPackageManagerCLIHandler::Private_ProcessFeatureChange(hr:0x800f080c)\r\n2013-10-16 18:51:39, Error                 DISM   DISM Package Manager: PID=3732 TID=1488 Failed while processing command enable-feature. - CPackageManagerCLIHandler::ExecuteCmdLine(hr:0x800f080c)\r\n2013-10-16 18:51:39, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Further logs for online package and feature related operations can be found at %WINDIR%\\logs\\CBS\\cbs.log - CPackageManagerCLIHandler::ExecuteCmdLine\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Found the OSServices.  Waiting to finalize it until all other providers are unloaded. - CDISMProviderStore::Final_OnDisconnect\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Found the OSServices.  Waiting to finalize it until all other providers are unloaded. - CDISMProviderStore::Final_OnDisconnect\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Found the PE Provider.  Waiting to finalize it until all other providers are unloaded. - CDISMProviderStore::Final_OnDisconnect\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Finalizing the servicing provider(DISM Package Manager) - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Package Manager: PID=3732 TID=1488 Finalizing CBS core. - CDISMPackageManager::Finalize\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Disconnecting Provider: DISM Package Manager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Finalizing the servicing provider(MsiManager) - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Disconnecting Provider: MsiManager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Finalizing the servicing provider(IntlManager) - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Disconnecting Provider: IntlManager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Finalizing the servicing provider(DriverManager) - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Disconnecting Provider: DriverManager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Finalizing the servicing provider(DISM Unattend Manager) - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Disconnecting Provider: DISM Unattend Manager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Finalizing the servicing provider(SmiManager) - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Disconnecting Provider: SmiManager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Finalizing the servicing provider(AppxManager) - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Disconnecting Provider: AppxManager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Finalizing the servicing provider(AssocManager) - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Disconnecting Provider: AssocManager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Finalizing the servicing provider(Edition Manager) - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Disconnecting Provider: Edition Manager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Releasing the local reference to OSServices. - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Disconnecting Provider: OSServices - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=3732 TID=1488 Releasing the local reference to DISMLogger.  Stop logging. - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM.EXE: Image session has been closed. Reboot required=no.\r\n2013-10-16 18:51:39, Info                  DISM   DISM.EXE: \r\n2013-10-16 18:51:39, Info                  DISM   DISM.EXE: <----- Ending Dism.exe session ----->\r\n2013-10-16 18:51:39, Info                  DISM   DISM.EXE: \r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Found the OSServices.  Waiting to finalize it until all other providers are unloaded. - CDISMProviderStore::Final_OnDisconnect\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Disconnecting Provider: FolderManager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 18:51:39, Info                  DISM   DISM Provider Store: PID=2464 TID=3228 Releasing the local reference to DISMLogger.  Stop logging. - CDISMProviderStore::Internal_DisconnectProvider\r\n\r\n```\r\n\r\n### Full Powershell 64 bit output\r\n\r\n```\r\nPS C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0> Install-NServiceBusMSMQ\r\n\r\nConfirm\r\nAre you sure you want to perform this action?\r\nPerforming operation "Install-NServiceBusMSMQ" on Target "WIN2012-DC".\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "Y"):\r\nEntering StartMsmqIfNecessary in NServiceBus.Setup.Windows.Msmq.MsmqSetup\r\nChecking if MSMQ is installed.\r\nMSMQ is not installed. Going to install.\r\nExecuting dism /Online /NoRestart /English /Enable-Feature /FeatureName:MSMQ-Container /FeatureName:MSMQ-Server\r\n\r\nDeployment Image Servicing and Management tool\r\nVersion: 6.2.9200.16384\r\n\r\n\r\nError: 11\r\n\r\nYou cannot service a running 64-bit operating system with a 32-bit version of DISM.\r\nPlease use the version of DISM that corresponds to your computer\'s architecture.\r\n\r\nThe DISM log file can be found at C:\\Windows\\Logs\\DISM\\dism.log\r\n\r\n\r\nInstallation of MSMQ successful.\r\nMSMQ windows service not found! You may need to reboot after MSMQ has been installed.\r\nWARNING: Msmq may need to be reinstalled manually. Please ensure MSMQ is running properly.\r\nPS C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0> Import-Module C:\\pstest\\NServiceBus.PowerShell.dll\r\nPS C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0> Install-NServiceBusMSMQ\r\n\r\nConfirm\r\nAre you sure you want to perform this action?\r\nPerforming operation "Install-NServiceBusMSMQ" on Target "WIN2012-DC".\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "Y"):\r\nEntering StartMsmqIfNecessary in NServiceBus.Setup.Windows.Msmq.MsmqSetup\r\nChecking if MSMQ is installed.\r\nMSMQ is not installed. Going to install.\r\nExecuting dism /Online /NoRestart /English /Enable-Feature /FeatureName:MSMQ-Container /FeatureName:MSMQ-Server\r\n\r\nDeployment Image Servicing and Management tool\r\nVersion: 6.2.9200.16384\r\n\r\n\r\nError: 11\r\n\r\nYou cannot service a running 64-bit operating system with a 32-bit version of DISM.\r\nPlease use the version of DISM that corresponds to your computer\'s architecture.\r\n\r\nThe DISM log file can be found at C:\\Windows\\Logs\\DISM\\dism.log\r\n\r\n\r\nInstallation of MSMQ successful.\r\nMSMQ windows service not found! You may need to reboot after MSMQ has been installed.\r\nWARNING: Msmq may need to be reinstalled manually. Please ensure MSMQ is running properly.\r\nPS C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0>\r\n```\r\n\r\n\r\nDISM log:\r\n\r\n```\r\n2013-10-16 19:01:39, Info                  DISM   PID=3080 TID=2668 Scratch directory set to \'C:\\Users\\nsbuser\\AppData\\Local\\Temp\\2\\\'. - CDISMManager::put_ScratchDir\r\n2013-10-16 19:01:39, Info                  DISM   PID=3080 TID=2668 DismCore.dll version: 6.2.9200.16384 - CDISMManager::FinalConstruct\r\n2013-10-16 19:01:39, Info                  DISM   PID=3080 TID=2668 Successfully loaded the ImageSession at "C:\\Windows\\System32\\Dism" - CDISMManager::LoadLocalImageSession\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Found and Initialized the DISM Logger. - CDISMProviderStore::Internal_InitializeLogger\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Failed to get and initialize the PE Provider.  Continuing by assuming that it is not a WinPE image. - CDISMProviderStore::Final_OnConnect\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Finished initializing the Provider Map. - CDISMProviderStore::Final_OnConnect\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Getting Provider DISMLogger - CDISMProviderStore::GetProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Provider has previously been initialized.  Returning the existing instance. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Getting Provider DISMLogger - CDISMProviderStore::GetProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Provider has previously been initialized.  Returning the existing instance. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM Manager: PID=3080 TID=2668 Successfully created the local image session and provider store. - CDISMManager::CreateLocalImageSession\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Getting Provider DISMLogger - CDISMProviderStore::GetProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Provider has previously been initialized.  Returning the existing instance. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM.EXE: \r\n2013-10-16 19:01:39, Info                  DISM   DISM.EXE: <----- Starting Dism.exe session ----->\r\n2013-10-16 19:01:39, Info                  DISM   DISM.EXE: \r\n2013-10-16 19:01:39, Info                  DISM   DISM.EXE: Host machine information: OS Version=6.2.9200, Running architecture=x86, Number of processors=2\r\n2013-10-16 19:01:39, Info                  DISM   DISM.EXE: Dism.exe version: 6.2.9200.16384\r\n2013-10-16 19:01:39, Info                  DISM   DISM.EXE: Executing command line: "dism" /Online /NoRestart /English /Enable-Feature /FeatureName:MSMQ-Container /FeatureName:MSMQ-Server\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Getting Provider FolderManager - CDISMProviderStore::GetProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Provider has not previously been encountered.  Attempting to initialize the provider. - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Loading Provider from location C:\\Windows\\System32\\Dism\\FolderProvider.dll - CDISMProviderStore::Internal_GetProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Connecting to the provider located at C:\\Windows\\System32\\Dism\\FolderProvider.dll. - CDISMProviderStore::Internal_LoadProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM.EXE: Image session has been closed. Reboot required=no.\r\n2013-10-16 19:01:39, Info                  DISM   DISM.EXE: \r\n2013-10-16 19:01:39, Info                  DISM   DISM.EXE: <----- Ending Dism.exe session ----->\r\n2013-10-16 19:01:39, Info                  DISM   DISM.EXE: \r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Found the OSServices.  Waiting to finalize it until all other providers are unloaded. - CDISMProviderStore::Final_OnDisconnect\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Disconnecting Provider: FolderManager - CDISMProviderStore::Internal_DisconnectProvider\r\n2013-10-16 19:01:39, Info                  DISM   DISM Provider Store: PID=3080 TID=2668 Releasing the local reference to DISMLogger.  Stop logging. - CDISMProviderStore::Internal_DisconnectProvider\r\n\r\n```'
1686,'','Implemented AOP capabilities into the handlers. I order to be able to ke...\nI\'ve used AOP with PostSharp for quite some time now, and I have integrated it with NServiceBus before, but I think that it would be a plus if NServiceBus provided some AOP capabilities out of the box. I have implemented something simple  but which I believe covers a lot of the needs. Have a look and see if it is something that would interest you... it still needs some work though.\r\n\r\nUsage example.\r\n\r\n    [IUseHandlerAspectsAttribute(typeof(HandlerAspects))]\r\n    public class ActionAddedEventHandler : IHandleMessages<ActionAddedEvent>\r\n    {\r\n        public void Handle(ActionAddedEvent message)\r\n        {\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public class HandlerAspects : IHandlerAspectsProvider\r\n    {\r\n        private static readonly ILog Logger = LogManager.GetLogger(typeof(ActionAddedEventHandler));\r\n\r\n\r\n        public override void OnEntry(HandlerAspectEntryArgs args)\r\n        {\r\n            var logText = new StringBuilder(string.Format("Started handling message:{0} --> ", args.Message.GetType().FullName));\r\n\r\n            foreach (var property in args.Message.GetType().GetProperties())\r\n            {\r\n                logText.Append(string.Format("{0}:{1} ", property.Name, property.GetValue(args.Message)));\r\n            }\r\n        }\r\n\r\n        public override void OnException(HandlerAspectExceptionArgs args)\r\n        {\r\n            base.OnException(args);\r\n        }\r\n\r\n        public override void OnExit(HandlerAspectArgs args)\r\n        {\r\n            base.OnExit(args);\r\n        }\r\n\r\n        public override void OnSuccess(HandlerAspectArgs args)\r\n        {\r\n            base.OnSuccess(args);\r\n        }\r\n    }'
1685,'indualagarsamy',"Powershell error when installing NServiceBus nuget package regarding registry key\nAdd a check to see if the key exists\r\n\r\n--\r\n\r\n\r\n**Steps to repro:**\r\n**OS:** Win 7 64 bit and the NSB Installer has **not** been run.\r\n1. Clear out the Nuget cache, (to be sure, clear out all the appropriate nsb related registry keys in HKCU) \r\n2. Create a class library in Visual Studio\r\n3. In Package Manager type and notice the error:\r\n\r\n````\r\ninstall-package NServiceBus.Host -version 4.1.0\r\n````\r\n````\r\nNew-ItemProperty : Cannot find path 'HKCU:\\SOFTWARE\\NServiceBus\\4.1' because it does not exist.\r\nAt C:\\development\\Test\\ClassLibrary1\\packages\\NServiceBus.4.1.0\\tools\\init.ps1:76 char:1\r\n+ New-ItemProperty -Path $nserviceBusVersionPath -Name $machinePreparedKey -Proper ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (HKCU:\\SOFTWARE\\NServiceBus\\4.1:String) [New-ItemProperty], ItemNotFoundException\r\n    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.NewItemPropertyCommand\r\n \r\n````"
1684,'',"GatewayMessage collection in RavenDB is not cleaned up\nAfter running gateway for a few weeks now we've noticed the GatewayMessage collection has several million documents in it. Whilst this isn't a big issue at the moment I'm wondering if this is by design or whether it makes sense to clean up old message deduplication data?"
1683,'',"Gateway logs ProtocolViolationException error in response to HTTP HEAD requests\nI have the NSB v4.0.4 gateway deployed on AWS. Something (still investigating) is issuing requests that show up as errors in the logs every 5 minutes sharp. I believe the AWS load balancer health checks issue HEAD requests that cause the below exception. All other HTTP verbs appear to be fine.\r\n\r\nExample log file\r\n```\r\n2013-10-16 09:29:32,393 [NServiceBus Gateway Channel Receiver Thread for [http://localhost:25899/Gateway/] - 27] ERROR NServiceBus.Gateway.Channels.Http.HttpChannelReceiver [(null)] - Unexpected error\r\nSystem.Net.ProtocolViolationException: Bytes to be written to the stream exceed the Content-Length bytes size specified.\r\n   at System.Net.HttpResponseStream.Write(Byte[] buffer, Int32 offset, Int32 size)\r\n   at System.Net.HttpListenerResponse.Close(Byte[] responseEntity, Boolean willBlock)\r\n   at NServiceBus.Gateway.Channels.Http.DefaultResponder.Handle(HttpListenerContext ctx) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Gateway\\Channels\\Http\\DefaultResponder.cs:line 15\r\n   at NServiceBus.Gateway.Channels.Http.HttpChannelReceiver.Handle(HttpListenerContext ctx) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Gateway\\Channels\\Http\\HttpChannelReceiver.cs:line 85\r\n2013-10-16 09:29:34,836 [NServiceBus Gateway Channel Receiver Thread for [http://localhost:25899/Gateway/] - 27] ERROR NServiceBus.Gateway.Channels.Http.HttpChannelReceiver [(null)] - Could not return warning to client.\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'System.Net.HttpListenerRequest'.\r\n   at System.Net.HttpListenerRequest.CheckDisposed()\r\n   at System.Net.HttpListenerRequest.get_RequestBuffer()\r\n   at System.Net.HttpListenerRequest.get_RemoteEndPoint()\r\n   at NServiceBus.Gateway.Channels.Http.HttpChannelReceiver.CloseResponseAndWarn(HttpListenerContext ctx, String warning, Int32 statusCode) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Gateway\\Channels\\Http\\HttpChannelReceiver.cs:line 206\r\n```\r\n\r\nEasily replicated by composing a request with Fiddler"
1681,'','Allow customization of FaultManager without losing SLR\nCase: I want to send an email when a message is sent to the error queue.\r\n\r\nCurrent solution:\r\n1) Create custom fault manager implementation (copying all the code of the ForwarderFaultManager) and customize it (no overriding possible).\r\n2) Create custom SecondLevelRetries feature class to allow SLR with the custom fault manager.\r\n\r\nBetter solution:\r\n1) Make the members of FaultManager protected virtual\r\n2) Use an interface so SLR keeps working with a customized FaultManager'
1680,'','Allow customization of size in Log4NetAppenderFactory\nIn Version 5 the default will now be 10x10MB files\r\n\r\n---\r\n\r\n1 mb is too small when you enable debug listening. Files of 10 mb are small enough to easily open in text editors (especially notepad++).'
1679,'','Re Enable nuget symbol packages\nAs part of the 4.1 release it was decided not to release nuget symbol packages.\r\n\r\nSeveral steps were taken to disable the symbols. These will be undone when re-enable symbols. So steps to take\r\n\r\n - [ ] Re-Ensable the "Publish Unstable symbols" build step in TeamCity https://builds.particular.net/admin/editBuildRunners.html?id=buildType:NServiceBus_PushToMyGet\r\n - [ ] undo the "roll back src inclusion"  commithttps://github.com/Particular/NServiceBus/commit/4cc1eb1b2ec5e62798ee30f2515697cdf01cf6ec\r\n - [ ] Re-add the `symbols` flag to ripple in the "Create Packages" task in TemaCity. ie the command should be \r\n`buildsupport\\ripple.exe create-packages -v %GitFlowVersion.NugetVersion% -d nugets -u --symbols`'
1678,'SimonCropp','Better handling of 3rd party exception class where members actually throw exceptions\nIf a message handler throws an `Exception` whose `Message` property throws an `Exception` then NServiceBus.Host.exe crashes with a corrupted stack. This causes the endpoint to crash.\r\n\r\n--\r\n\r\nThis is reproducible on NServiceBus 4.0.5.\r\n\r\n\r\n    public class TestHandler : IHandleMessages<TestMessage>\r\n    {\r\n        public void Handle(TestMessage message)\r\n        {\r\n            throw new BadException();\r\n        }\r\n    }\r\n\r\n    public class BadException : Exception\r\n    {\r\n        public override string Message\r\n        {\r\n            get { throw new Exception("Failure in exception Message property"); }\r\n        }\r\n    }\r\n\r\n    public class TestMessage : IMessage\r\n    {\r\n    }\r\n'
1677,'SimonCropp','4.1.0-Alpha0001-0032 Nuget packages include Src\nAll of the nuget packages (`NServiceBus.Interfaces`, `NServiceBus`, `NServiceBus.Host`) include Src.\r\n\r\n1. Clear out Nuget cache\r\n2. Create a class lib project\r\n3. In package manager console, type:\r\n\r\n     install-package NServiceBus.Interfaces -version 4.1.0-Alpha0001-0032 -pre\r\n\r\nInspect the packages folder.\r\nSame applies for `NServiceBus` & `NServiceBus.host`\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1330881/eff4dc38-353c-11e3-9cf3-d79ced617365.png)\r\n'
1676,'andreasohlund','Split powershell to a separate repo\nOur custom actions reference them so it would be nice to have a isolated release cycle for them'
1675,'','Internalise DelegateFactory\nSo [DelegateFactory](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Utils/Reflection/DelegateFactory.cs) should not be part of the public API of NServiceBus. \r\n'
1674,'','Fix usages of `ConcurrentDictionary`\nOur use of `ConcurrentDictionary` is flawed. For example \r\n\r\n````\r\nif (storage.ContainsKey(m))\r\n    storage[m].Remove(address);\r\n````\r\n\r\nis not thread safe since between `ContainsKey(m)` and `storage[m]` the dictionary could have changed. The proper usage is to use the `TryXXX` methods like `TryAdd` and `TryUpdate`. \r\n\r\nSo review all usages of `ConcurrentDictionary` for correct thread safety.'
1673,'','Remove redundant XML comments\n* They are noise \r\n* Distract from the function code while not adding any value.\r\n* The "missing xml warning" has been suppressed so we dont need them to avoid warnings'
1672,'','Raven v2.0.3 client  talking to Raven v2.5.2700 server leaves messages in the database\nRun the TimeoutManages sample:\r\n\r\n1. Modify case statement to look like:\r\n\r\n    ```c#\r\n    case "s":\r\n       Parallel.For(0, 300, i => StartSaga());\r\n    ```\r\n2. Run sample and press \'s\'\r\n3. Wait for all messages to finish\r\n4. Validate 600 msgs are in audit queue\r\n\r\nWhat I\'m seeing is that randomly, not all 600 msgs end up in the audit queue!\r\nIt looks like they get stuck in the database and the only way to get them out is to restart the endpoint :disappointed: \r\n'
1671,'','Raven v2.5 client not compatible with Raven v2.0 client\n![image](https://f.cloud.github.com/assets/122651/1323630/82f3f642-348c-11e3-8209-b8b15742dfd8.png)\r\n'
1670,'','remove FtpQueueConfig\nSo `FtpQueueConfig` is not used anywhere\r\n\r\nOne of the members was marked as obsolete over 11 months ago. \r\nhttps://github.com/Particular/NServiceBus/commit/7ceec1e246dac951378e8dfb54ac692ec66fc271\r\n\r\nSo removing'
1669,'','FaultManager should be doing an explicit QueueNotFoundException catch\nWhy here are we doing an `as` on an exception type?\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Faults/Forwarder/FaultManager.cs#L64\r\n\r\ninstead of having an explicit catch'
1668,'','Obsolete BackOff.cs\nOnly used by SQLTransport and hence moved to that repo'
1667,'','Throughtput limiter changes\nThere are a few bugs in the `ThroughputLimiter`:\r\n\r\n- #1660 \r\n- Deadlock between the `MessageProcessed` and `Stop`, the semaphore wait could get stuck forever.\r\nWhen a semaphore is Disposed the Waits are not released!\r\n- The `Start` and `Stop` of `ThroughputLimiter` need to be called from thread safe code;\r\n\r\n\r\n### Review Throughput implementation\r\nCurrently the throughput implementation is done at the end of the dequeue of a message.\r\n\r\n#### What do you mean?\r\nHere is the current pipeline:\r\n\r\n1. Message is dequeued\r\n1. Message id processed\r\n1. Throughtput limiter blocks thread\r\n\r\n#### Issues with current implementation\r\nBecause the Throughtput limiter blocks the thread at the end of the processing, there is no throughput limit enforced when the bus starts!\r\n\r\n'
1666,'andreasohlund','using_a_configured_unicastBus make incorrect assumptions\nso all tests inheriting from `using_a_configured_unicastBus` are actually integration tests. They rely on `Configure.Instance` being set. The tests previously worked because, due to a qwerk in the test run order, they were run after other tests that meant . but they do not set it themselves. They are now failing on  the build server because they are running before `Configure.Instance` is set.\r\n\r\nFor example `When_processing_a_subscribe_message_successfully.Should_invoke_the_uow_begin_and_end`\r\n```\r\nSetUp : System.NullReferenceException : Object reference not set to an instance of an object.\r\n   at NServiceBus.Satellites.SatelliteLauncher.Start() in SatelliteLauncher.cs: line 15\r\n   at NServiceBus.Unicast.UnicastBus.Start(Action\xa0startupAction) in UnicastBus.cs: line 854\r\n   at NServiceBus.Unicast.UnicastBus.Start() in UnicastBus.cs: line 811\r\n   at NServiceBus.Unicast.Tests.Contexts.using_a_configured_unicastBus.StartBus() in using_the_unicastbus.cs: line 195\r\n   at NServiceBus.Unicast.Tests.Contexts.using_the_unicastBus.SetUp() in using_the_unicastbus.cs: line 252\r\n```\r\n\r\nWhile we are there has 17 instance properties. '
1665,'','ThroughputLimiter should implement IDisposable\n'
1664,'','remove impersonation\nfixes  #1642'
1663,'',"Obsolete ICircuitBreaker \n### Reasons\r\n\r\n* `CircuitBreaker` doesn't implement it\r\n* `RepeatedFailuresOverTimeCircuitBreaker` does implement `ICircuitBreaker` but it is not an extensibility point and hence cannot be switched"
1662,'','Fixes issue 1661 - NinjectObjectBuilder.ConfigureProperty not handling multiple configs for same property\n'
1661,'','NinjectObjectBuilder.ConfigureProperty won\'t replace property binding when multiple configs are applied\nSo now this code \r\n\r\n```\r\nbuilder.ConfigureProperty(typeof(DuplicateClass), "SomeProperty", false);\r\nbuilder.ConfigureProperty(typeof(DuplicateClass), "SomeProperty", true); // this should remove/override the previous property setting\r\n```\r\n\r\nWill result in `SomeProperty` being injected as `true`\r\n\r\n--\r\n\r\nI have created a profile for local development - in which (among other things) I want to disable first level retries.\r\n\r\nI can get almost all the way there but not quite - because of the way the NinjectObjectBuilder configures properties by appending (rather than replacing) parameter bindings.\r\n\r\nSee below code for an example:\r\n```csharp\r\nLogger.Info("Disabling First level retries");\r\n// we can do this because the transactionsettings constructor defaults all property values to the relevant settings from SettingsHolder - so we\'re not overriding what might have been set elsewhere\r\nvar transactionSettings = new TransactionSettings {MaxRetries = 0};\r\n// this should work but doesn\'t - because NServiceBus.Unicast.Transport.Config.Bootstrapper runs first and adds propertybindings.  NinjectObjectBuilder.ConfigureProperty then appends instead of replaces propertybinding.\r\nConfigure.Instance.Configurer.ConfigureProperty<TransportReceiver>("TransactionSettings", transactionSettings);\r\n```\r\n\r\nAs mentioned in the code comment the problem is that the NSB transport bootstrapper runs first - and this adds ninject propertybindings to the transport.  When I come along within my custom profilehandler and want to configure the transactionsettings property for the transport, the impl of ConfigureProperty doesn\'t replace existing bindings but only appends my configuration.  So there are now two parameter bindings for TransactionSettings.\r\nAt runtime ninject resolves the TransportReceiver.TransactionSettings property value to the *first* configured binding - which is the one set by the bootstrapper and not my custom one.\r\n\r\nfrom NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder:\r\n```csharp\r\npublic void ConfigureProperty(Type component, string property, object value){\r\n    var bindings = kernel.GetBindings(component);\r\n\r\n    if (!bindings.Any())    {\r\n        throw new ArgumentException("Component not registered", "component");\r\n    }\r\n\r\n    foreach (var binding in bindings)  {\r\n        binding.Parameters.Add(new PropertyValue(property, value));\r\n    }\r\n}\r\n```\r\n\r\n\r\nI think the solution is going to be to remove any existing binding parameters for that propertyname before adding the newly configured one.  Have added a new test to check and this issue affects only ninject and unity objectbuilders.\r\nThe only potentially complicating factor I can think of would be where fixing this uncovers another bug where multiple property configurations are already being applied and only the first is actually being used.  But this seems unlikely given the repro test fails only for two of the objectbuilders.'
1660,'','Getting a SemaphoreFullException when calling ChangeMaximumMessageThroughputPerSecond while the bus is processing messages.\nApplication: MessageHandler.Hosting.Azure.HostProcess.exe\r\nFramework Version: v4.0.30319\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.Threading.SemaphoreFullException\r\nStack:\r\n   at System.Threading.SemaphoreSlim.Release(Int32)\r\n   at NServiceBus.Unicast.Transport.ThroughputLimiter.ResetLimit(System.Object)\r\n   at System.Threading.TimerQueueTimer.CallCallbackInContext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.TimerQueueTimer.CallCallback()\r\n   at System.Threading.TimerQueueTimer.Fire()\r\n   at System.Threading.TimerQueue.FireNextTimers()\r\n   at System.Threading.TimerQueue.AppDomainTimerCallback()'
1659,'','Saga association with the saga-creating message\n**In the video store sample, the SubmitOrder handler is creating the saga:**\r\n\r\n![image](https://f.cloud.github.com/assets/3889023/1322642/e15f7e52-343e-11e3-907c-21b4fd7eea45.png)\r\n\r\n\r\n\r\n\r\n**However, the SubmitOrder message is not associated with the Saga, although it created it:**\r\n\r\n![image](https://f.cloud.github.com/assets/3889023/1322639/bfe6f732-343e-11e3-8bfb-cb0042fbd949.png)\r\n\r\n\r\n\r\n\r\n**It should be associated with the saga, much like BuyersRemorseIsOver is associated:**\r\n\r\n\r\n![image](https://f.cloud.github.com/assets/3889023/1322643/eea42810-343e-11e3-8f09-9f5965f21f93.png)\r\n'
1658,'','Message headers support multiple Saga per message\nMultiple sagas (of different types) can be executed by the same message so we need to make sure that the headers accommodate for it.\r\n\r\nSpecifically, these are the headers used for Saga association:\r\n\r\n```\r\n{"key":"NServiceBus.OriginatingSagaId","value":"5ffa3fe8-7e91-4846-9161-a21f00c7ac8d"}\r\n{"key":"NServiceBus.OriginatingSagaType","value":"VideoStore.Sales.ProcessOrderSaga, VideoStore.Sales, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"}\r\n{"key":"NServiceBus.SagaId","value":"5ffa3fe8-7e91-4846-9161-a21f00c7ac8d"},\r\n{"key":"NServiceBus.IsSagaTimeoutMessage","value":"True"},\\\r\n{"key":"NServiceBus.SagaType","value":"VideoStore.Sales.ProcessOrderSaga, VideoStore.Sales, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"},\r\n```'
1657,'',"Failed to add user to RavenDB, When using Raven v2.5.2700, and using v4.1 host even when license is installed\nSteps to repro\r\n1. Install Raven v2.5.2700 \r\n2. Install the license file (Rename file in drop box to license.xml and drop it in the same dir where Raven.Server.exe is running and restart Raven)\r\n3. Use a v4.1 NSB Host (Clear out the database if the endpoint previously existed on the RavenDB)\r\n4. Notice the exception:\r\n\r\n    2013-10-11 12:00:16,257 [1] WARN  NServiceBus.Persistence.Raven.RavenUserInstall\r\n    er [(null)] <(null)> - Failed to add user to raven. Processing will continue\r\n    System.Reflection.TargetInvocationException: Exception has been thrown by the ta\r\n    rget of an invocation. ---> Raven.Imports.Newtonsoft.Json.JsonSerializationExcep\r\n    tion: Error converting value {null} to type 'System.Guid'. Path 'ActualETag', li\r\n    ne 3, position 21. ---> System.ArgumentException: Could not cast or convert from\r\n     {null} to System.Guid.\r\n       at Raven.Imports.Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(\r\n    Object value, Type initialType, Type targetType) in c:\\Builds\\RavenDB-Stable\\Imp\r\n    orts\\Newtonsoft.Json\\Src\\Newtonsoft.Json\\Utilities\\ConvertUtils.cs:line 450\r\n       at Raven.Imports.Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(Object\r\n    initialValue, CultureInfo culture, Type targetType) in c:\\Builds\\RavenDB-Stable\\\r\n    Imports\\Newtonsoft.Json\\Src\\Newtonsoft.Json\\Utilities\\ConvertUtils.cs:line 427\r\n       at Raven.Imports.Newtonsoft.Json.Serialization.JsonSerializerInternalReader.E\r\n    nsureType(JsonReader reader, Object value, CultureInfo culture, JsonContract con\r\n    tract, Type targetType) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\\\r\n    Newtonsoft.Json\\Serialization\\JsonSerializerInternalReader.cs:line 624\r\n       --- End of inner exception stack trace ---\r\n       at Raven.Imports.Newtonsoft.Json.Serialization.JsonSerializerInternalReader.E\r\n    nsureType(JsonReader reader, Object value, CultureInfo culture, JsonContract con\r\n    tract, Type targetType) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\\\r\n    Newtonsoft.Json\\Serialization\\JsonSerializerInternalReader.cs:line 633\r\n       at Raven.Imports.Newtonsoft.Json.Serialization.JsonSerializerInternalReader.C\r\n    reateValueInternal(JsonReader reader, Type objectType, JsonContract contract, Js\r\n    onProperty member, JsonContainerContract containerContract, JsonProperty contain\r\n    erMember, Object existingValue) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.J\r\n    son\\Src\\Newtonsoft.Json\\Serialization\\JsonSerializerInternalReader.cs:line 259\r\n       at Raven.Imports.Newtonsoft.Json.Serialization.JsonSerializerInternalReader.R\r\n    esolvePropertyAndConstructorValues(JsonObjectContract contract, JsonProperty con\r\n    tainerProperty, JsonReader reader, Type objectType) in c:\\Builds\\RavenDB-Stable\\\r\n    Imports\\Newtonsoft.Json\\Src\\Newtonsoft.Json\\Serialization\\JsonSerializerInternal\r\n    Reader.cs:line 1189\r\n       at Raven.Imports.Newtonsoft.Json.Serialization.JsonSerializerInternalReader.C\r\n    reateObjectFromNonDefaultConstructor(JsonReader reader, JsonObjectContract contr\r\n    act, JsonProperty containerProperty, ConstructorInfo constructorInfo, String id)\r\n     in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\\Newtonsoft.Json\\Seriali\r\n    zation\\JsonSerializerInternalReader.cs:line 1079\r\n       at Raven.Imports.Newtonsoft.Json.Serialization.JsonSerializerInternalReader.C\r\n    reateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonPropert\r\n    y containerMember, JsonProperty containerProperty, String id, Boolean& createdFr\r\n    omNonDefaultConstructor) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\r\n    \\Newtonsoft.Json\\Serialization\\JsonSerializerInternalReader.cs:line 1297\r\n       at Raven.Imports.Newtonsoft.Json.Serialization.JsonSerializerInternalReader.C\r\n    reateObject(JsonReader reader, Type objectType, JsonContract contract, JsonPrope\r\n    rty member, JsonContainerContract containerContract, JsonProperty containerMembe\r\n    r, Object existingValue) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\r\n    \\Newtonsoft.Json\\Serialization\\JsonSerializerInternalReader.cs:line 353\r\n       at Raven.Imports.Newtonsoft.Json.Serialization.JsonSerializerInternalReader.C\r\n    reateValueInternal(JsonReader reader, Type objectType, JsonContract contract, Js\r\n    onProperty member, JsonContainerContract containerContract, JsonProperty contain\r\n    erMember, Object existingValue) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.J\r\n    son\\Src\\Newtonsoft.Json\\Serialization\\JsonSerializerInternalReader.cs:line 229\r\n       at Raven.Imports.Newtonsoft.Json.Serialization.JsonSerializerInternalReader.D\r\n    eserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent) i\r\n    n c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\\Newtonsoft.Json\\Serializa\r\n    tion\\JsonSerializerInternalReader.cs:line 155\r\n       at Raven.Imports.Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReade\r\n    r reader, Type objectType) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\S\r\n    rc\\Newtonsoft.Json\\JsonSerializer.cs:line 546\r\n       at Raven.Imports.Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader\r\n    , Type objectType) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\\Newto\r\n    nsoft.Json\\JsonSerializer.cs:line 512\r\n       at Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject(String value,\r\n    Type type, JsonSerializerSettings settings) in c:\\Builds\\RavenDB-Stable\\Imports\\\r\n    Newtonsoft.Json\\Src\\Newtonsoft.Json\\JsonConvert.cs:line 925\r\n       at Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject[T](String valu\r\n    e, JsonSerializerSettings settings) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonso\r\n    ft.Json\\Src\\Newtonsoft.Json\\JsonConvert.cs:line 885\r\n       at Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject[T](String valu\r\n    e) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\\Newtonsoft.Json\\JsonC\r\n    onvert.cs:line 842\r\n       at Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType[T](Stri\r\n    ng value, T anonymousTypeObject) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.\r\n    Json\\Src\\Newtonsoft.Json\\JsonConvert.cs:line 858\r\n       at Raven.Client.Connection.ServerClient.ThrowConcurrencyException(WebExceptio\r\n    n e) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClien\r\n    t.cs:line 803\r\n       at Raven.Client.Connection.ServerClient.DirectPut(RavenJObject metadata, Stri\r\n    ng key, Nullable`1 etag, RavenJObject document, String operationUrl) in c:\\Build\r\n    s\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.cs:line 398\r\n       at Raven.Client.Connection.ServerClient.<>c__DisplayClass13.<Put>b__12(String\r\n     u) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient\r\n    .cs:line 333\r\n       at Raven.Client.Connection.ReplicationInformer.TryOperation[T](Func`2 operati\r\n    on, String operationUrl, Boolean avoidThrowing, T& result) in c:\\Builds\\RavenDB-\r\n    Stable\\Raven.Client.Lightweight\\Connection\\ReplicationInformer.cs:line 564\r\n       at Raven.Client.Connection.ReplicationInformer.ExecuteWithReplication[T](Stri\r\n    ng method, String primaryUrl, Int32 currentRequest, Int32 currentReadStripingBas\r\n    e, Func`2 operation) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connec\r\n    tion\\ReplicationInformer.cs:line 523\r\n       at Raven.Client.Connection.ServerClient.ExecuteWithReplication[T](String meth\r\n    od, Func`2 operation) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Conne\r\n    ction\\ServerClient.cs:line 174\r\n       at Raven.Client.Connection.ServerClient.Put(String key, Nullable`1 etag, Rave\r\n    nJObject document, RavenJObject metadata) in c:\\Builds\\RavenDB-Stable\\Raven.Clie\r\n    nt.Lightweight\\Connection\\ServerClient.cs:line 333\r\n       --- End of inner exception stack trace ---\r\n       at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments,\r\n     Signature sig, Boolean constructor)\r\n       at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Objec\r\n    t[] parameters, Object[] arguments)\r\n       at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invoke\r\n    Attr, Binder binder, Object[] parameters, CultureInfo culture)\r\n       at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n       at NServiceBus.Persistence.Raven.RavenUserInstaller.InvokePut(IDatabaseComman\r\n    ds systemCommands, RavenJObject ravenJObject)\r\n       at NServiceBus.Persistence.Raven.RavenUserInstaller.AddUserToDatabase(String\r\n    identity, DocumentStore documentStore)\r\n       at NServiceBus.Persistence.Raven.RavenUserInstaller.Install(String identity)\r\n\r\nRelated PR:\r\nhttps://github.com/Particular/NServiceBus/pull/1251\r\n"
1656,'','Add ExpectTimeOutNotSet in saga test\nI would like to test a saga that a timeout has not been set, but that is not possible with the curren testing api. Ref. http://stackoverflow.com/questions/19221796/is-it-possible-to-test-an-nservicebus-saga-that-a-timeout-has-not-been-set/.\r\n'
1655,'','AcceptanceTesting nuget package is labeled AcceptenceTests\nThe description is wrong as well.'
1654,'','Base event subscribe\nfor #1652  '
1653,'johnsimons','Multiple logical publishers for the same event\nThis PR fixes the following issues:\r\n- #1753\r\n- #1652\r\n\r\n### What needs to be fixed:\r\n- [x] Remove `IRouteMessages`\r\n- [x] Add support for mapping to multiple endpoints for events only\r\n- [x] Add acceptance tests\r\n- [x] Ensuring conventions are set before doing any routing registration'
1652,'johnsimons','Unable to subscribe for a base event from multiple publishers.\n--\r\nRelated to what @thirdvalve reported in as comment in https://github.com/Particular/NServiceBus/issues/1583\r\n\r\n**Steps to Repro** \r\n1. Modify the pub sub example, where publisher1 alternates publishing IMyEvent and EventMessage\r\n2. Add a new publisher, MyPublisher2, which will publish the AnotherEventMessage (which derives from IMyEvent)\r\n3. Change the subscriber2 so that, it subscribes to both IMyEvent from Publisher1 and AnotherEventMessage from Publisher2, and add a generic message handler for IMyEvent. Notice that the subscriber just receives one event.\r\n\r\n````xml\r\n <UnicastBusConfig ForwardReceivedMessagesTo="audit">\r\n    <MessageEndpointMappings>\r\n      <add Assembly="MyMessages" Type="MyMessages.IMyEvent" Endpoint="MyPublisher" />\r\n      <add Assembly="MyMessages" Type="MyMessages.Other.AnotherEventMessage" Endpoint="MyPublisher2" />\r\n    </MessageEndpointMappings>\r\n  </UnicastBusConfig>\r\n````\r\n\r\n**NOTE:** This used to work in 3.3.8, does not work in 4.0.5\r\n\r\n\r\n'
1650,'',"Nuget Issue: Installing NServiceBus.host, intermittently throws a error for AddAuditConfig\nI haven't been able to reproduce this consistently.\r\nBut on occasion:\r\nWhen I:\r\n\r\n     install-package NServiceBus.Host -version 4.1.0-Beta0001 -pre Subscriber2\r\n\r\nI see this:\r\n\r\n    Add-NServiceBusAuditConfig : The term 'Add-NServiceBusAuditConfig' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that \r\n    the path is correct and try again.\r\n    At C:\\Dev\\testing\\4.1.Unstable0604\\PubSub\\packages\\NServiceBus.Host.4.1.0-Beta0001\\tools\\install.ps1:78 char:5\r\n    +     Add-NServiceBusAuditConfig $project.Name\r\n    +     ~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n        + CategoryInfo          : ObjectNotFound: (Add-NServiceBusAuditConfig:String) [], CommandNotFoundException\r\n        + FullyQualifiedErrorId : CommandNotFoundException\r\n     \r\n"
1649,'','Logging plan of attack\n## Outstanding Issues\r\n\r\n* [ ] [Make the NServiceBus info logging opt-in](https://github.com/Particular/NServiceBus/issues/598)\r\n* [ ] [Provide sensible loglevels for dependencies](https://github.com/Particular/NServiceBus/issues/1436)\r\n* [x] [ProfileManager logger is initialised to NullLogger before custom loggerfactory is set up](https://github.com/Particular/NServiceBus/issues/1506)\r\n* [x] [Setting Logging library should be done before calling Configure.With](https://github.com/Particular/NServiceBus/issues/1484)\r\n'
1647,'johnsimons',"Reference to System.Management.Automation in NServiceBus.PowerShell is now version-specific\nI've been working with 4.1 and have found that we can no longer import-module the NerviceBus.PowerShell.dll. The only way to make it work was to update to the Windows Management Framework version 3.0.0 (which includes PowerShell v3) on Windows 7 and Server 2008. Windows 8 and Server 2012 are fine.\r\n\r\nThe only different between NSB 4.0.x and 4.1 is the the reference to System.Management.Automation has SpecificVersion = true in 4.1. I changed it back and rebuilt and am able to proceed without installing WMF v3.0.0."
1646,'',"Symbols for the host.exe can't be pushed to symbol source\nSeems like we need to include the source for our ilmerge's as well :(\r\n\r\n@johnsimons thoughts?\r\n\r\n[push] Pushing NServiceBus.Host 4.1.0-Unstable0486 to 'https://nuget.symbolsource.org/MyGet/particular-unstable'...\r\n[18:39:26][push] Failed to process request. 'Package submission failed: Source file c:\\Home\\Chris\\Projects\\CommonServiceLocator\\main\\Microsoft.Practices.ServiceLocation\\ActivationException.cs not found in package. Source file is declared in NServiceBus.Host.pdb. . See http://www.symbolsource.org/Public/Home/Help for possible reasons. Fiddler may help diagnosing this error if your client discards attached detailed information.'. \r\n[18:39:26][push] The remote server returned an error: (506) Package submission failed: Source file c:\\Home\\Chris\\Projects\\CommonServiceLocator\\main\\Microsoft.Practices.ServiceLocation\\ActivationException.cs not found in package. Source file is declared in NServiceBus.Host.pdb. . See http://www.symbolsource.org/Public/Home/Help for possible reasons. Fiddler may help diagnosing this error if your client discards attached detailed information...\r\n[18:39:26][push] Process exited with code 1"
1645,'andreasohlund',"Autofac builder symbols fails to push to symbolsource\nThis is probably because we use a linked file (so we need to make sure its included in the package)\r\n\r\n[11:38:30][push] Failed to process request. 'Package submission failed: Source file c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\ObjectBuilder\\Autofac\\AutofacObjectBuilder.cs not found in package. Source file is declared in NServiceBus.ObjectBuilder.Autofac.pdb. . See http://www.symbolsource.org/Public/Home/Help for possible reasons. Fiddler may help diagnosing this error if your client discards attached detailed information.'. \r\n[11:38:30][push] The remote server returned an error: (506) Package submission failed: Source file c:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\ObjectBuilder\\Autofac\\AutofacObjectBuilder.cs not found in package. Source file is declared in NServiceBus.ObjectBuilder.Autofac.pdb. . See http://www.symbolsource.org/Public/Home/Help for possible reasons. Fiddler may help diagnosing this error if your client discards attached detailed information...\r\n[11:38:30][push] Process exited with code 1\r\n[11:38:30][Step 2/2] Step Publish Unstable symbols (NuGet Publish) failed"
1644,'','Add a production test that runs the Errorhandling sample\n* Run the sample with SLR\r\n\r\n* Verify message in error q\r\n\r\n* Flip some flag that makes the sample not throw\r\n\r\n* Execute returntosource queue\r\n\r\n* Verify that message ends up in audit q'
1643,'','Mark "ILog.IsXXXEnabled" properties as Obsolete\nlinked to #1589'
1642,'','Remove impersonation feature\nHistorically `ImpersonateSender` was renamed to `RunHandlersUnderIncomingPrincipal` as part of #1104. \r\n\r\nHowever the new API adds little clarity.\r\n\r\nDissecting `RunHandlersUnderIncomingPrincipal` gives the impression that "Handlers will be run under the principal of the user who sent the message"\r\n\r\nWhen in reality all this API is about is "telling the handler who made the call" not anything to do with security or impersonation. It does this by setting `Thread.CurrentPrincipal` to a fake principal containing the username of the user who sent the message. It extracts this username from the message headers. The handler code is free use use  `Thread.CurrentPrincipal` or to ignore. Either way all handler code will be run under the account the process is running as. \r\n\r\nThis API will be removed. If people want to access the sending user they can do so by using the message headers like they do for any other message metadata.'
1641,'',"Missing header 'NServiceBus.CallType' and Exceptions when using 4.1 version of Headquarters and 4.0 version of Site\nSteps to repro:\r\nTake the gateway sample. (Change it to use unobtrusive messages, so its possible to run SiteA and SiteB and Headquarters with different versions if needed)\r\n1. Upgrade both Headquarter & SiteA to 4.1\r\n2. Leave SiteB running at 4.0\r\n3. Start the app and initiate a request from the web page\r\n4. Notice missing header `NServiceBus.CallType` warning logs in Site B\r\n5. Notice the error in Headquarter app\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1294423/56c9a0cc-3080-11e3-92fb-d293dfb7c614.png)\r\n\r\n\r\n\r\n\r\n"
1640,'indualagarsamy',"ReturnToSource does not recognize the Id in the message headers and does not return the message.\nFix so that ReturnToSource is backwards compatible with earlier versions\r\n\r\n--\r\n\r\n**Steps to repro:**\r\n1. Run the Error handling sample and generate an error\r\n2. Use the Id in the headers in the ReturnToSource tool\r\n3. Notice that it doesn't recognize it.\r\n\r\nThe MSMQ Id does work. However, if people have downsteam process that read the error queue and call return to source based on the Id in the header, then there is a problem.\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1293081/5112c720-305e-11e3-99c5-c87a55282fab.png)\r\n\r\nNOTE: This case doesn't work in 4.0.x either."
1639,'SimonCropp','Extension methods GetHeader, SetHeader should raise compiler errors and not warnings.\nWhen using `GetHeader` or `SetHeader` or `CopyHeaderFromRequest` like shown below:\r\n\r\n    Logger.InfoFormat("Header \'Test\' = {0}.", message.GetHeader("Test"));\r\n    response.CopyHeaderFromRequest("Test");\r\n    response.SetHeader("1", "1");\r\n    response.SetHeader("2", "2");\r\n\r\nWhen compiling using 4.1.x binaries, these are now warnings!!? These used to be errors in 4.0.x\r\n\r\n    1>C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyServer\\RequestDataMessageHandler.cs(25,55,25,80): warning CS0618: \'NServiceBus.ExtensionMethods.GetHeader(object, string)\' is obsolete: \'Please use `bus.GetMessageHeader(object msg, string key) or Headers.GetMessageHeader(object msg, string key)` instead. Will be treated as an error from version 4.0.0. Will be removed in version 5.0.0.\'\r\n    1>C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyServer\\RequestDataMessageHandler.cs(35,13,35,51): warning CS0618: \'NServiceBus.ExtensionMethods.CopyHeaderFromRequest(object, string)\' is obsolete: \'Please use `Headers.SetMessageHeader(msg, key, Bus.CurrentMessageContext.Headers[key])` instead. Will be treated as an error from version 4.0.0. Will be removed in version 5.0.0.\'\r\n    1>C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyServer\\RequestDataMessageHandler.cs(36,13,36,41): warning CS0618: \'NServiceBus.ExtensionMethods.SetHeader(object, string, string)\' is obsolete: \'Please use `bus.SetMessageHeader(object msg, string key, string value) or Headers.SetMessageHeader(object msg, string key, string value)` instead. Will be treated as an error from version 4.0.0. Will be removed in version 5.0.0.\'\r\n    1>C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyServer\\RequestDataMessageHandler.cs(37,13,37,41): warning CS0618: \'NServiceBus.ExtensionMethods.SetHeader(object, string, string)\' is obsolete: \'Please use `bus.SetMessageHeader(object msg, string key, string value) or Headers.SetMessageHeader(object msg, string key, string value)` instead. Will be treated as an error from version 4.0.0. Will be removed in version 5.0.0.\''
1638,'','If Unobtrusive conventions are defined in INeedInitialization, then they are not initialized and trying to send messages results in exception\nSteps to repro:\r\n1. Define a class that implements INeedInitialization and define the conventions.\r\n2. Try to send a message.\r\n3. Even though message mappings are defined properly, this results in an No Destination defined exception.\r\nInstead, guide user to properly define conventions in IWantToRunBeforeConfiguration, if they are initialized in INeedInitialization. \r\n\r\n**Bad code, exception:**\r\n![image](https://f.cloud.github.com/assets/854553/1284869/296789f2-2f9d-11e3-87b4-e99138ae2b3c.png)\r\n\r\n\r\n**Proper Code**\r\n     \r\n    namespace RequestResponse.MyClient\r\n    {\r\n        public class EndpointConfig : IConfigureThisEndpoint, AsA_Client\r\n        {\r\n        }\r\n    \r\n        public class InitConventions : IWantToRunBeforeConfiguration\r\n        {\r\n            public void Init()\r\n            {\r\n                Configure.Instance\r\n                    .DefiningCommandsAs(t => t.Namespace != null && t.Namespace.EndsWith("Commands"))\r\n                    .DefiningEventsAs(t => t.Namespace != null && t.Namespace.EndsWith("Events"))\r\n                    .DefiningMessagesAs(t => t.Namespace == "MyMessages.ResponseMessages");\r\n            }\r\n        }\r\n    }'
1637,'',"4.1 Endpoints always runs in basic mode and does not check for trial usage\nSteps to repro:\r\n1. Set up the endpoint to run using 4.1 Host\r\n2. Start the endpoint.\r\n\r\nNote that it always runs in Basic 1.\r\n\r\nStack Trace:\r\n![image](https://f.cloud.github.com/assets/854553/1284671/0ee4d8d6-2f99-11e3-961b-65b770403f73.png)\r\n\r\nIn the `Validate()` method, validator is null, it hasn't been initialized yet. Therefore, it always falls back to basic1 license."
1636,'','Misleading additional information for exception displayed in Visual Studio\nWhen an NServiceBus.Host project is started, and if it has a reference to a Messages dll, which uses a older version of NServiceBus, while the console displays correct information, the exception displayed in Visual Studio is misleading.\r\n\r\n**Steps to reproduce:**\r\n1. Use any 4.x sample that has messages project which uses IMessage, ICommand or IEvent. \r\n2. Convert Server to use 4.1.0 and leave messages dll to be compiled usign 4.0.x.\r\n3. Start the Server\r\n\r\nWhen starting the host, notice the VS exception additional info and the console host.\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1283567/54843dea-2f86-11e3-8700-5cb805a441e5.png)\r\n'
1635,'SimonCropp','Investigate failing unittest\nhttps://github.com/Particular/NServiceBus/commit/db39e49f230bd9ef2f6e9e5fac59ff2129d4dcc3'
1634,'',"Startup time is slow when the endpoint (NServiceBus.host) is started in debug mode.\n1. Upgrade the full duplex server project to use the 4.1.unstable latest build\r\n2. Start debugging\r\n3. Notice that the client window loads up much faster and I see the following in the output window:\r\n\r\n\r\n**Compare it to running the Client endpoint (using version 4.0.4) of the host, here is the output:**\r\n\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_64\\mscorlib\\v4.0_4.0.0.0__b77a5c561934e089\\mscorlib.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyClient\\bin\\Debug\\NServiceBus.Host.exe', Symbols loaded.\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyClient\\bin\\Debug\\NServiceBus.Core.dll', Symbols loaded.\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Core\\v4.0_4.0.0.0__b77a5c561934e089\\System.Core.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System\\v4.0_4.0.0.0__b77a5c561934e089\\System.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyClient\\bin\\Debug\\MyClient.dll', Symbols loaded.\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyClient\\bin\\Debug\\NServiceBus.dll', Symbols loaded.\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyClient\\bin\\Debug\\MyMessages.dll', Symbols loaded.\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Configuration\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Configuration.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.ServiceModel\\v4.0_4.0.0.0__b77a5c561934e089\\System.ServiceModel.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'Raven.Abstractions'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Xml\\v4.0_4.0.0.0__b77a5c561934e089\\System.Xml.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.ServiceProcess\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.ServiceProcess.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Configuration.Install\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Configuration.Install.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_64\\System.Web\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Web.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'Anonymously Hosted DynamicMethods Assembly'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'Raven.Client.Lightweight'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Messaging\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Messaging.dll'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'NServiceBus.Scheduling.Messages__impl'\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Xml.Linq\\v4.0_4.0.0.0__b77a5c561934e089\\System.Xml.Linq.dll'\r\n    A first chance exception of type 'System.IO.FileNotFoundException' occurred in mscorlib.dll\r\n    'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'Microsoft.GeneratedCode'\r\n    The thread '<No Name>' (0x392c) has exited with code 0 (0x0).\r\n    The thread '<No Name>' (0x20b4) has exited with code 0 (0x0).\r\n    The thread '<No Name>' (0x2d24) has exited with code 0 (0x0).\r\n    The thread '<No Name>' (0x2474) has exited with code 0 (0x0).\r\n\r\n**Output window running 4.1** \r\n\r\n            'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_64\\mscorlib\\v4.0_4.0.0.0__b77a5c561934e089\\mscorlib.dll'\r\n        'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyServer\\bin\\Debug\\NServiceBus.Host.exe', Symbols loaded.\r\n        'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Dev\\testing\\4.1.Unstable0604\\FullDuplex\\MyServer\\bin\\Debug\\NServiceBus.Core.dll', Symbols loaded.\r\n        'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Core\\v4.0_4.0.0.0__b77a5c561934e089\\System.Core.dll'\r\n        'NServiceBus.Host.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System\\v4.0_4.0.0.0__b77a5c561934e089\\System.dll'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorOpened'\r\n        Step into: Stepping over method without symbols 'System.Text.RegularExpressions.Regex.Regex'\r\n        Step into: Stepping over method without symbols 'System.StringComparer.OrdinalIgnoreCase.get'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.KeyedCollection<System.__Canon,System.__Canon>.KeyedCollection'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorOpened'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'string.Substring'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<System.__Canon>.Count.get'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.Text.RegularExpressions.Regex.Regex'\r\n        Step into: Stepping over method without symbols 'System.StringComparer.OrdinalIgnoreCase.get'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.KeyedCollection<System.__Canon,System.__Canon>.KeyedCollection'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'string.Substring'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<System.__Canon>.Count.get'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'string.Substring'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<System.__Canon>.Count.get'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'string.Substring'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<System.__Canon>.Count.get'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'string.Substring'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<System.__Canon>.Count.get'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'string.Substring'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<System.__Canon>.Count.get'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols 'System.Collections.Generic.List<string>.List'\r\n        Step into: Stepping over method without symbols 'string.IndexOfAny'\r\n        Step into: Stepping over method without symbols 'System.Array.IndexOf<string>'\r\n        Step into: Stepping over method without symbols 'System.Collections.ObjectModel.Collection<NDesk.Options.Option>.Add'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'System.MulticastDelegate.CtorClosed'\r\n        Step into: Stepping over method without symbols 'string.Split'\r\n        Step into: Stepping over method without symbols \r\n\r\n    . . . "
1633,'','Deploy SC Endpoint Plugin with NServiceBus Endpoint\nAs Dave, I would like to be able to easily add the SC endpoint plugins to my endpoints during development in Visual Studio (PS / Nuget).'
1632,'','Performance improvements EncryptionMessageMutator\nPerformance improvements for IsSystemType and reflection for EncryptionMessageMutator (issue #1630)\r\n\r\nWhen doing 1,000,000 messages, both changes combined will bring boost the performance of EncryptionMessageMutator from ~208 sec. to ~18 sec.\r\n\r\nThe most significant improvement is the cache in IsSystemType.'
1631,'','EncryptionService licensing info should be included in readme\nEncryptionService  has licensing info in it https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Encryption/Rijndael/EncryptionService.cs#L10\r\n\r\nShould be added to https://github.com/Particular/NServiceBus#licenses\r\n\r\nAlso the license https://github.com/hibernating-rhinos/rhino-esb/blob/master/license.txt states \r\n\r\n> Redistributions of source code must retain the above copyright notice,\r\n    this list of conditions and the following disclaimer.\r\n\r\nSo we need to include the license in that file'
1630,'','EncryptionMessageMutator is slow due to reflection\n--\r\nThe EncryptionMessageMutator is taking a lot of time. We have profiled a run in which 2500 relatively large messages are pumped through an endpoint and it turns out that NServiceBus.Utils.Reflection.ExtensionMethods.IsSystemType is the most time consuming method, in particular because of the call to type.Assembly.GetName().\r\n\r\nI think this one could use some caching or something.\r\n\r\nWe can send over a dotTrace logfile if you want.\r\n'
1629,'','TimeToBeReceivedAttribute.TimeToBeReceived should not be optional\n`TimeToBeReceivedAttribute` has an empty constructor and hence `TimeToBeReceived` is optional. This should not be the case. The empty constructor should be obsoleted and then removed.'
1628,'','Dictionary.ContainsKey before is Dictionary.Remove is redundant\nAs per [MSDN](http://msdn.microsoft.com/en-us/library/kabs04ac.aspx) \r\n\r\n> If the Dictionary<TKey, TValue> does not contain an element with the specified key, the Dictionary<TKey, TValue> remains unchanged. No exception is thrown.\r\n\r\n- [x] https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Impersonation/Windows/WindowsIdentityEnricher.cs#L14\r\n- [x] https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Sagas/AutoCorrelateSagaOnReplyMutator.cs#L24\r\n- [x] https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Sagas/AutoCorrelateSagaOnReplyMutator.cs#L29'
1627,'','Prefer TryGetValue instead of ContainsKey + Item lookups \nSo a `ContainsKey` + Item lookup takes approx twice as long as a `TryGetValue`\r\n\r\nWhile this is a micro-optimization the correct approach, that uses `TryGetValue`, is actually just as readable. '
1624,'SimonCropp','Obsolete IMessageMapper\nSo the use of `MessageMapper` is hard coded.\r\n\r\n * https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/XML/Config/XmlSerialization.cs\r\n * https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/Json/Config/BsonSerialization.cs\r\n * https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/Json/Config/JsonSerialization.cs\r\n\r\nSo `IMessageMapper` is not an extension point and should be removed'
1622,'','Remove static caching from MessageMapper\nSo `MessageMapper` is scoped as `SingleInstance` https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/XML/Config/XmlSerialization.cs#L11\r\n\r\nYet it does static caching \r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/MessageInterfaces/MessageMapper/Reflection/MessageMapper.cs#L423\r\n\r\nThis can cause some "interesting" edge cases in unit tests. In fact if you make this change xx unit tests will fail because they rely on the static caching as a side effect. for example `SerializerTests.Comparison`'
1621,'','Split the `MessageMapper`\nthe [MessageMapper](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/MessageInterfaces/MessageMapper/Reflection/MessageMapper.cs) currently has two concerns\r\n\r\n1. Caching the connection between message types and their proxy (and the reverse). See the dictionaries. https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/MessageInterfaces/MessageMapper/Reflection/MessageMapper.cs#L423\r\n2. Creating the proxy type. https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/MessageInterfaces/MessageMapper/Reflection/MessageMapper.cs#L148\r\n\r\nIt would significantly decrease the complexity of the class if these concerns were split. for example\r\n\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.ComponentModel;\r\n    using System.Linq;\r\n    using System.Reflection;\r\n    using System.Reflection.Emit;\r\n\r\n    class ConcreteTypeBuilder\r\n    {\r\n\r\n        ModuleBuilder moduleBuilder;\r\n\r\n        public ConcreteTypeBuilder()\r\n        {\r\n            var assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(\r\n                new AssemblyName("NServiceBusConcreteImplementationBuilder"),\r\n                AssemblyBuilderAccess.Run\r\n                );\r\n\r\n            moduleBuilder = assemblyBuilder.DefineDynamicModule("NServiceBusConcreteImplementationBuilder");\r\n        }\r\n\r\n        const string concreteTypeSuffix = "__impl";\r\n\r\n        public static bool IsProxy(string typeName)\r\n        {\r\n            return typeName.EndsWith(concreteTypeSuffix, StringComparison.Ordinal);\r\n        }\r\n        public static bool IsProxy(Type type)\r\n        {\r\n            return type.Name.EndsWith(concreteTypeSuffix, StringComparison.Ordinal);\r\n        }\r\n        public static string GetUnProxiedName(string typeName)\r\n        {\r\n            if (IsProxy(typeName))\r\n            {\r\n                return typeName.Substring(0, typeName.Length - concreteTypeSuffix.Length);\r\n            }\r\n            return typeName;\r\n        }\r\n        public Type GenerateConcreteImplementation(Type interfaceType)\r\n        {\r\n            var concreteTypeName = interfaceType.FullName + concreteTypeSuffix;\r\n            var typeBuilder = moduleBuilder.DefineType(\r\n                concreteTypeName,\r\n                TypeAttributes.Serializable | TypeAttributes.Class | TypeAttributes.Public | TypeAttributes.Sealed,\r\n                typeof(object)\r\n                );\r\n\r\n            typeBuilder.DefineDefaultConstructor(MethodAttributes.Public);\r\n\r\n            foreach (var prop in GetAllProperties(interfaceType))\r\n            {\r\n                var propertyType = prop.PropertyType;\r\n\r\n                var fieldBuilder = typeBuilder.DefineField(\r\n                    "field_" + prop.Name,\r\n                    propertyType,\r\n                    FieldAttributes.Private);\r\n\r\n                var propBuilder = typeBuilder.DefineProperty(\r\n                    prop.Name,\r\n                    prop.Attributes | PropertyAttributes.HasDefault,\r\n                    propertyType,\r\n                    null);\r\n\r\n                foreach (var customAttribute in prop.GetCustomAttributes(true))\r\n                {\r\n                    AddCustomAttributeToProperty(customAttribute, propBuilder);\r\n                }\r\n\r\n                var getMethodBuilder = typeBuilder.DefineMethod(\r\n                    "get_" + prop.Name,\r\n                    MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig | MethodAttributes.Final | MethodAttributes.Virtual | MethodAttributes.VtableLayoutMask,\r\n                    propertyType,\r\n                    Type.EmptyTypes);\r\n\r\n                var getIL = getMethodBuilder.GetILGenerator();\r\n                // For an instance property, argument zero is the instance. Load the \r\n                // instance, then load the private field and return, leaving the\r\n                // field value on the stack.\r\n                getIL.Emit(OpCodes.Ldarg_0);\r\n                getIL.Emit(OpCodes.Ldfld, fieldBuilder);\r\n                getIL.Emit(OpCodes.Ret);\r\n\r\n                // Define the "set" accessor method for Number, which has no return\r\n                // type and takes one argument of type int (Int32).\r\n                var setMethodBuilder = typeBuilder.DefineMethod(\r\n                    "set_" + prop.Name,\r\n                    getMethodBuilder.Attributes,\r\n                    null,\r\n                    new[] {propertyType});\r\n\r\n                var setIL = setMethodBuilder.GetILGenerator();\r\n                // Load the instance and then the numeric argument, then store the\r\n                // argument in the field.\r\n                setIL.Emit(OpCodes.Ldarg_0);\r\n                setIL.Emit(OpCodes.Ldarg_1);\r\n                setIL.Emit(OpCodes.Stfld, fieldBuilder);\r\n                setIL.Emit(OpCodes.Ret);\r\n\r\n                // Last, map the "get" and "set" accessor methods to the \r\n                // PropertyBuilder. The property is now complete. \r\n                propBuilder.SetGetMethod(getMethodBuilder);\r\n                propBuilder.SetSetMethod(setMethodBuilder);\r\n            }\r\n\r\n            typeBuilder.AddInterfaceImplementation(interfaceType);\r\n\r\n            return typeBuilder.CreateType();\r\n        }\r\n\r\n\r\n        IEnumerable<PropertyInfo> GetAllProperties(Type t)\r\n        {\r\n            var props = new List<PropertyInfo>(t.GetProperties());\r\n            foreach (var interfaceType in t.GetInterfaces())\r\n            {\r\n                props.AddRange(GetAllProperties(interfaceType));\r\n            }\r\n\r\n            var names = new List<string>(props.Count);\r\n            var dups = new List<PropertyInfo>(props.Count);\r\n            foreach (var p in props)\r\n            {\r\n                if (names.Contains(p.Name))\r\n                {\r\n                    dups.Add(p);\r\n                }\r\n                else\r\n                {\r\n                    names.Add(p.Name);\r\n                }\r\n            }\r\n\r\n            foreach (var d in dups)\r\n            {\r\n                props.Remove(d);\r\n            }\r\n\r\n            return props;\r\n        }\r\n\r\n        // Given a custom attribute and property builder, adds an instance of custom attribute to the property builder\r\n        void AddCustomAttributeToProperty(object customAttribute, PropertyBuilder propBuilder)\r\n        {\r\n            var customAttributeBuilder = BuildCustomAttribute(customAttribute);\r\n            if (customAttributeBuilder != null)\r\n            {\r\n                propBuilder.SetCustomAttribute(customAttributeBuilder);\r\n            }\r\n        }\r\n\r\n        CustomAttributeBuilder BuildCustomAttribute(object customAttribute)\r\n        {\r\n            var longestCtor = GetLongestConstructor(customAttribute);\r\n\r\n            if (longestCtor == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            // For each constructor parameter, get corresponding (by name similarity) property and get its value\r\n            var args = new object[longestCtor.GetParameters().Length];\r\n            var position = 0;\r\n            foreach (var consParamInfo in longestCtor.GetParameters())\r\n            {\r\n                var attrPropInfo = customAttribute.GetType().GetProperty(consParamInfo.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);\r\n                if (attrPropInfo != null)\r\n                {\r\n                    args[position] = attrPropInfo.GetValue(customAttribute, null);\r\n                }\r\n                else\r\n                {\r\n                    args[position] = null;\r\n                    var attrFieldInfo = customAttribute.GetType().GetField(consParamInfo.Name, BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.IgnoreCase);\r\n                    if (attrFieldInfo == null)\r\n                    {\r\n                        if (consParamInfo.ParameterType.IsValueType)\r\n                        {\r\n                            args[position] = Activator.CreateInstance(consParamInfo.ParameterType);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        args[position] = attrFieldInfo.GetValue(customAttribute);\r\n                    }\r\n                }\r\n                ++position;\r\n            }\r\n\r\n            var propList = new List<PropertyInfo>();\r\n            var propValueList = new List<object>();\r\n            foreach (var attrPropInfo in customAttribute.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance))\r\n            {\r\n                if (!attrPropInfo.CanWrite)\r\n                {\r\n                    continue;\r\n                }\r\n                object defaultValue = null;\r\n                var defaultAttributes = attrPropInfo.GetCustomAttributes(typeof(DefaultValueAttribute), true);\r\n                if (defaultAttributes.Length > 0)\r\n                {\r\n                    defaultValue = ((DefaultValueAttribute) defaultAttributes[0]).Value;\r\n                }\r\n                var value = attrPropInfo.GetValue(customAttribute, null);\r\n                if (value == defaultValue)\r\n                {\r\n                    continue;\r\n                }\r\n                propList.Add(attrPropInfo);\r\n                propValueList.Add(value);\r\n            }\r\n            return new CustomAttributeBuilder(longestCtor, args, propList.ToArray(), propValueList.ToArray());\r\n        }\r\n\r\n        ConstructorInfo GetLongestConstructor(object customAttribute)\r\n        {\r\n            ConstructorInfo longestCtor = null;\r\n            // Get constructor with the largest number of parameters\r\n            foreach (var cInfo in customAttribute.GetType().GetConstructors().\r\n                                                  Where(cInfo => longestCtor == null || longestCtor.GetParameters().Length < cInfo.GetParameters().Length))\r\n            {\r\n                longestCtor = cInfo;\r\n            }\r\n            return longestCtor;\r\n        }\r\n    }'
1616,'',"No way to listen to Bus Start or Stop separately\nCurrently there's no way to listen to only listen to bus Start or Stop events as they are combined in IWantToRunWhenBusStartsAndStops interface. I'd suggest to separate them into separate segregated interfaces."
1615,'','ConventionCache is caching generic parameters\nso if you debug into ConventionCache  and look at what it is actually caching there are a bunch of "T" types. these are actual non constructed generic parameters. we should not be parsing those types at all.\r\n\r\nneed to debug up the call stack to work out how to filter out this waste.\r\n\r\n\t\t[0]\t{[NServiceBus.Msmq, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[1]\t{[TRequest, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[2]\t{[NServiceBus.Gateway.Channels.Channel, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[3]\t{[T, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[4]\t{[T, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[5]\t{[T, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[6]\t{[T, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[7]\t{[System.ServiceModel.ServiceHostBase, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[8]\t{[NServiceBus.Config.MessageEndpointMapping, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[9]\t{[T, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[10]\t{[NServiceBus.IProfile, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[11]\t{[System.Reflection.Assembly, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[12]\t{[T, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[13]\t{[T, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[14]\t{[NServiceBus.Gateway.Deduplication.GatewayMessage, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[15]\t{[NServiceBus.Installation.Environments.Windows, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[16]\t{[TSaga, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[17]\t{[NServiceBus.Scheduling.Messages.ScheduledTask, True]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>\r\n\t\t[18]\t{[T, False]}\tSystem.Collections.Generic.KeyValuePair<System.Type,bool>'
1614,'andreasohlund','Improved pipeline for incoming messages\nFixes #1431 '
1613,'','Create a acceptance test that uses unobtrusive mode\nThe assembly scanner issue would have been caught earlier if we had a test that used unobtrusive mode'
1612,'','Issue 1596 message send failure\n'
1611,'','Audit spike\nMake Audit feature backwards compatible. If neither the AuditConfig section nor the registry settings for Audit are defined, instead of throwing an exception, audit feature will be turned off. Messages will continue to be forwarded if `ForwardReceivedMessagesTo` is set on the `UnicastBusConfig`.\r\n\r\nIf the registry value is set and the FRM is set, then 2 messages will be forwarded to the audit queue.\r\nHere is the complete result of what happens when these configuration values are set: \r\n\r\n**When Features.Audit is not explicitly turned off**\r\n\r\n| RegistrySetting        | AuditConfig, AuditQueue set to `Audit` | FRM in UnicastBusConfig set to `Audit`  | Result |\r\n| ------------- |:-------------:| :-----:|:-----|\r\n| 0 | 0 | 0 | No messages forwarded anywhere |\r\n| 0 | 0 | 1 | 1 Message forwarded to a queue named audit |\r\n| 0 | 1 | 0 | 1 Message forwarded to a queue named audit |\r\n| 0 | 1 | 1 | 2 Messages forwarded to a queue named audit |\r\n| 1 | 0 | 0 | 1 Message forwarded to a queue named audit and a warning will be logged in debug mode that the audit values are configured in the registry and that user needs to run the powershell commandlet |\r\n| 1 | 0 | 1 | 2 Messages forwarded to a queue named audit and a warning will be logged in debug mode that the audit values are configured in the registry and that user needs to run the powershell commandlet |\r\n| 1 | 1 | 0 | 1 Message forwarded to a queue named audit |\r\n| 1 | 1 | 1 | 2 Messages forwarded to a queue named audit |\r\n\r\n**When Features.Audit is explicitly turned off via INeedInitialization**\r\n\r\n| RegistrySetting        | AuditConfig, AuditQueue set to `Audit` | FRM in UnicastBusConfig set to `Audit`  | Result |\r\n| ------------- |:-------------:| :-----:|:-----|\r\n| 1 | 1 | 0 | No Message forwarded to the queue named audit |\r\n| 1 | 1 | 1 | 1 Message forwarded to a queue named audit |\r\n\r\n**TODO:**\r\n1. The acceptance for Audit fail when the registry key is not set. Because when the acceptance test are being executed, the AuditConfig value read comes up as null and messages are not being forwarded. Need to fix whatever is causing the hiccup in the acceptance test. \r\n2. When the host is installed via nuget, remove the AuditConfig to avoid 2 messages ending up in the audit q.\r\n'
1609,'','Support message type discovery over http\n* We should support discovery of messages and operations\r\n  * GET /Messages => returns the list of known messages \r\n  * GET /Messages/{MessageType} lists the properties of the message and their datatype (generate a basic form if accept==html)\r\n\r\nSplitted from https://github.com/Particular/NServiceBus/issues/693'
1608,'sfarmar','Add production tester to see that everything is installed and running correctly\n'
1607,'','Obsolete all Bus.CreateInstance\nThis is a leaky abstraction that confuses users.\r\n\r\n### The problem\r\nBecause those methods do not say anything about being restricted to construct only messages, there is nothing preventing a user from using `Bus.CreateInstance` as a proxy factory to create any type!\r\n\r\n### The salvation\r\nBecause our domain is servicebus and not proxy generators (for that you have the awesome DynamicProxy) I propose we point the users to use the already exposed:\r\n- `Bus.Send<T>(Action<T> messageConstructor)`\r\n- `Bus.Publish<T>(Action<T> messageConstructor)`\r\n- `Bus.Reply<T>(Action<T> messageConstructor)`\r\n\r\nAs part of this change we can get rid of `IMessageCreator` :smile: \r\n '
1606,'','Configure.With(params Assembly[] assemblies) should not hide exceptions\nIf a user is explicitly passing a list of Assemblies to use we should not hide any exceptions from the types scanning!\r\n\r\nAt the moment the code looks like:\r\n```c#\r\npublic static Configure With(params Assembly[] assemblies)\r\n{\r\n    var types = GetAllowedTypes(assemblies);\r\n\r\n    return With(types);\r\n}\r\n\r\nstatic IEnumerable<Type> GetAllowedTypes(params Assembly[] assemblies)\r\n{\r\n    var types = new List<Type>();\r\n    Array.ForEach(\r\n        assemblies,\r\n        a =>\r\n        {\r\n            try\r\n            {\r\n                types.AddRange(a.GetTypes()\r\n                                .Where(AssemblyScanner.IsAllowedType));\r\n            }\r\n            catch (ReflectionTypeLoadException e)\r\n            {\r\n                var errorMessage = AssemblyScanner.FormatReflectionTypeLoadException(a.FullName, e);\r\n                LogManager.GetLogger(typeof(Configure)).Warn(errorMessage);\r\n                //intentionally swallow exception\r\n            }\r\n        });\r\n    return types;\r\n}\r\n```\r\n\r\nAs you can see the `GetAllowedTypes` is intentionally swallowing exceptions!'
1605,'',"Split RavenDB from the core and add support for RavenDB 2.5\nIn order to better follow the release cycle of RavenDB, the RavenDB functionality has been removed from the core into its own repository https://github.com/Particular/NServiceBus.RavenDB and nuget \r\nhttps://www.nuget.org/packages/NServiceBus.RavenDB\r\n\r\n--\r\n\r\nIn order to better follow the release cycle of RavenDB pull it out of the core. Since Raven is bundled as part of the core today this is a breaking change. \r\n\r\nActions\r\n\r\n* Split raven to separate repo + nuget\r\n* If no storage is referenced (NH or Raven) default to InMemory storage if in development mode\r\n* Introduce a development profile that is active when in debug mode (or when running on a devbox? Use a regkey?)\r\n* If not in development mode and no storage is configured throw an exception explaining that InMemory isn't safe for production (unless users explicitly configure InMemory)\r\n"
1604,'','Pull the distributor out of the core\nMoved to a separate repo https://github.com/Particular/NServiceBus.Distributor.Msmq and NuGet https://www.nuget.org/packages/NServiceBus.Distributor.MSMQ/'
1603,'andreasohlund','Pull the gateway out of the core\nSince the gateway is a optional component we should pull it out of the core and auto enable it if users reference it.\r\n\r\n--\r\n\r\nRepo + Nuget: NServiceBus.Gateway\r\n\r\nLeft todo \r\n\r\n- [x] Remove IBus.SendToSites and make it a extension method in the new assembly\r\n- [x] Updates docs\r\n- [x] Release a beta to nuget of the new package'
1602,'',"Split the distributor out to a separate repo + nuget\nSince its msmq only (we'll leave the msmqtransport on the core for now)\r\n\r\nRepo: NServiceBus.Distributor"
1601,'johnsimons','Make AssemblyScanner more generic\nWe want to be able to reuse the AssemblyScanner from other places such as the plugin we developing for Pulse.\r\n\r\nIn summary:\r\n- Allow the user to specify the assembly that the scanner should check if assembly references;\r\n- Fix some of the exception messages so they are not specific either;'
1600,'','Improve the capturing of log output for the acceptance tests\nIn Version 5 NSB will write to a rolling log file by default\r\n\r\n---\r\n\r\nTo debug issues like:\r\n\r\nhttp://builds.particular.net/viewLog.html?buildId=24575&tab=buildResultsDiv&buildTypeId=NServiceBus_2RunAcceptanceTestsForMsmq\r\n\r\nWe should redirect logging to a collection on the scenario context so that we can dump it if the test fails'
1599,'johnsimons','Using MessageReadPropertyFilter.SetAll() is usually not a very good idea in WorkGroup mode\nCalling SetAll() is usually not a very good idea in WorkGroup mode, as it sets AD related attributes as well. This can trigger the properties error – “One or more of the passed properties are invalid”.\r\n \r\nWhat you can do is either find out which properties you really need and set just these properties (this is the preferred approach), or alternatively unset the AD related properties (I quickly compiled a list for you from http://msdn.microsoft.com/en-us/library/system.messaging.messagequeue.messagereadpropertyfilter.aspx – I hope this is all):\r\n \r\nConnectorType\r\nDestinationSymmetricKey\r\nDigitalSignature\r\nEncryptionAlgorithm\r\nExtension\r\nHashAlgorithm\r\nUseEncryption\r\nUseTracing'
1598,'johnsimons','Expanding message registration exception message as it is a little misleading\nThe exception message states that the messages must implement, IMessage, IEvent or ICommand however this may not have been the cause of the exception. If the user has configured NSB such that the message types have never been registered (e.g. NSB has not scanned the required assembly) then they will also get this error message even though their messages implement the correct interfaces.'
1597,'',"NServiceBus.Host.exe not added to the assemblies to scan\nWhen I start a sample that uses the generic host, it fails with following exception: \r\n\r\nCould not find a class which implements 'IConfigureLogging'. If you've specified your own profile, try implementing 'IConfigureLoggingForProfile<T>' for your profile.\r\n\r\nThe reason is that the profiles are merged into the exe, but nothing enforces a dependency on nservicebus.dll as its all just hosting information. Therefore the exe is not detected by the assembly scanner and the types will not end up in the TypesToScan list"
1596,'',"Send doesn't like my messages anymore\nI get the following error when trying to send my messages from the messagehandler website to the rest of the infrastructure\r\n\r\nCould not find Metadata for 'Contracts.DeployChannel'. Messages need to implement either 'IMessage', 'IEvent' or 'ICommand'. Alternatively, if you don't want to implement an interface, you can configure 'Unobtrusive Mode Messages' and use convention to configure how messages are mapped.\r\n\r\nTop of the trace:\r\n```\r\nNServiceBus.Unicast.Messages.MessageMetadataRegistry.GetMessageDefinition(Type messageType) in :0\r\n   System.Linq.WhereSelectArrayIterator`2.MoveNext() +82\r\n   System.Collections.Generic.List`1..ctor(IEnumerable`1 collection) +536\r\n   System.Linq.Enumerable.ToList(IEnumerable`1 source) +80\r\n   NServiceBus.Unicast.UnicastBus.MapTransportMessageFor(IList`1 rawMessages, TransportMessage result) in :0\r\n   NServiceBus.Unicast.UnicastBus.SendMessage(List`1 addresses, String correlationId, MessageIntentEnum messageIntent, Object[] messages) in :0\r\n   NServiceBus.Unicast.UnicastBus.SendMessage(Address address, String correlationId, MessageIntentEnum messageIntent, Object[] messages) in :0\r\n   NServiceBus.Unicast.UnicastBus.Send(Object[] messages) in :0\r\n```\r\nThe problem boils down to the assembly containing the message not referencing the nservicebus dll (Which it shouldn't as the messages are unobtrusive), so the assembly scanner won't pick it up and it will never be passed into the message metadata registry\r\n"
1595,'','Pure interface based message implementation not found\nWhen I do a Bus.CreateInstance&lt;ISomeInterface&gt;, I get an ArgumentException with the message "Could not find a concrete type mapped to ISomeInterface". \r\n\r\nI assume this has to do with the new assembly scanner and the fact that ISomeInterface is an unobtrusive interface (that doesn\'t reference nservicebus.dll)?\r\n'
1594,'sfarmar',"Saga persistence - SQLite database creation issue (4.0.4.0)\nWhen using SQLite for saga persistence with NSB we are getting exceptions thrown.\r\n\r\neg;\r\nSystem.Data.SQLite.SQLiteException: SQL logic error or missing database\r\nno such table: SagaData\r\n\r\nIn our scenario (which is acceptance testing), our databases are deleted prior to the test run.  By default, SQLite will create a database if it is missing.\r\n\r\nIt seems that when NSB connects to the db, SQLite creates the db as expected, but NSB doesn't create the saga persistence table.\r\n\r\nI've created a simple (and somewhat contrived) example that illustrates the problem - just do a clean before each test run.  If you look at the output in the test runner, you'll see that the exception has been thrown (the test passes as there are no assertions).\r\n\r\nhttps://dl.dropboxusercontent.com/u/62994082/SQLiteNSBIssue.zip\r\n\r\nThanks\r\n\r\nRichard"
1593,'',"AssemblyScanner skips NServiceBus.Hosting.Azure.dll\nNServiceBus.Hosting.Azure.dll does not directly depend on NServiceBus.dll, but does indirectly throuh NServiceBus.Azure.dll, and therefore the new scanner decides to skip it. This shouldn't be the case as all profiles for azure hosting are in this assembly"
1592,'','Re-enable the forwarding feature\nfor #1591'
1591,'SimonCropp','Re-enable the forwarding feature\nSo as part of the Auditing re-factor #1399 the `ForwardReceivedMessagesTo` feature was removed. \r\n\r\nHere is the doco for the the previous feature\r\nhttp://www.particular.net/articles/auditing-with-nservicebus\r\n\r\nThen the ForwardReceivedMessagesTo config section property was re-used as the audit endpoint https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Audit/Audit.cs#L125.\r\n\r\nUnless you were debugging in which case it would throw an exception. https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Audit/Audit.cs#L100\r\n\r\nThis way we could guide people over to the new audit config without breaking production code. \r\n\r\nThere are a few problems with this\r\n\r\nForwarding is not necessarily used for just auditing. It was a standalone feature. People could be using it for other purposes. Now since it has been hijacked by auditing we have effectively removed a feature. This is a fairly significant breaking change.\r\n\r\nPreviously people could actual set `UnicastBus.ForwardReceivedMessagesTo` and then forwarding will work https://github.com/Particular/NServiceBus/blob/4.0.0/src/NServiceBus.Core/Unicast/UnicastBus.cs#L1329  so the audit changes broke this feature. Marking those properties as obsolete is not a good approach since they will silently not work when people use them https://github.com/Particular/NServiceBus/pull/1582\r\n\r\n\r\nSo the proposal is, for 4.1, separate the the forwarding and audit functionality so we can support both. The re-evaluate the way forward for 4.2'
1590,'','Redundant "auth" property in the logging pattern\nIn Version 5 Log4Net is no longer embedded\r\n\r\n--\r\n\r\nSo the current log4net pattern we use is `%d [%t] %-5p %c [%x] <%X{auth}> - %m%n`\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Hosting.Windows/LoggingHandlers/Internal/ConfigureInternalLog4Net.cs#L90\r\n\r\nAccording to the [log4net doco](https://logging.apache.org/log4net/release/sdk/log4net.Layout.PatternLayout.html) is used for a custom property. An example can be seen here http://stackoverflow.com/questions/3244881/adding-custom-property-in-log4net\r\n\r\nHowever we dont seem to write an `auth` property to the `ThreadContext` anywhere.\r\n\r\nSo either this is redundant code or it needs better documentation'
1589,'','remove "IsXXXEnabled" properties on ILog\nSo `ILog` has the following members `IsDebugEnabled`,`IsInfoEnabled`,`IsWarnEnabled`,`IsErrorEnabled`,`IsFatalEnabled`.\r\n\r\nWhich are only used in 5 locations to work out if we are going to log to that method. For example `IsDebugEnabled` is called in 4 locations  before actually writing to `ILog.Debug`. \r\n\r\nSince all the logging libraries actually handle this internally these checks us doing the check is redundant.\r\n\r\nSo should we remove these members?'
1588,'','ReplyingToNullOriginatorDispatcher issues\nSo `ReplyingToNullOriginatorDispatcher` seems a little weird.\r\n\r\n * The implementation does not seem to match the summary\r\n * Does it need to be part of the public API\r\n * Why do we throw an exception if the developer has debug logging enabled?\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Sagas/ReplyingToNullOriginatorDispatcher.cs'
1587,'','If a Satellite fails to start the whole endpoint is considered faulty and shutsdown\nRefactor SatelliteLauncher to be a first level citizen.\r\nIf a Satellite fails to start the whole endpoint is considered faulty and shutsdown.\r\n\r\n#1483 '
1586,'',"Injecting ITransport wouldn't allow you to change the existing Transport settings\nI'm trying to achieve something that requires setting ConcurencyLevel to zero (disabling message handling to guarantee ordering) which requires an instance of ITransport on my handler, e.g.\r\n\r\n    public class MyHandler : IHandleMessages<object>\r\n    {\r\n        public ITransport Transport { get; set; }\r\n    \r\n        public void Handle(object message)\r\n        {\r\n                Transport.AbortHandlingCurrentMessage();\r\n                Transport.ChangeMaximumConcurrencyLevel(0);\r\n                Transport.Stop();\r\n        }\r\n    }\r\n\r\nInterestingly this does not work. I tried to dig deeper and it seems that the instance of the ITransport object I'm fiddling with, is not the same instance that UnicaseBus is using, so my changes are not being effective. The workaround is to have access to the same ITransport in the UnicaseBus, so I did this:\r\n\r\n    public class MyHandler : IHandleMessages<object>\r\n    {\r\n       public ITransport Transport { get { return Bus.Transport; } }\r\n        public ITransport InjectedTransport { get; set; }\r\n        public UnicastBus Bus { get; set; }\r\n    \r\n        public void Handle(object message)\r\n        {\r\n                Transport.AbortHandlingCurrentMessage();\r\n                Transport.ChangeMaximumConcurrencyLevel(0);\r\n                Transport.Stop();\r\n        }\r\n    }\r\n\r\nNote that I need to inject the actual IBus implementation to access the ITransport. I also tried comparing the HashCode for both Transport and InjectedTransport and those are in fact different. I am using Autofac container here. Thoughts?\r\n\r\n"
1585,'','Master\n'
1584,'BogdanMitrache','Installer tries to install MSMQ even if you un-check the boxes in the advanced settings.\nI discovered this problem while installing on Windows 8.  The installation failed because it could not install MSMQ even though I had requested that it -not- install MSMQ.  Note that NServiceBus fails Windows 8 installation because of this.\r\n\r\nDownload NServiceBus (4.0.4 in the test)\r\nRun the installer\r\nSelect "Advanced"\r\nDisable all checkboxes in the options.  You will see only "NServiceBus Binaries" in the last page before the installation starts.\r\n\r\n----------------------------- about 3/4 way down the logs you will see -----------------\r\n\r\n\r\nChecking if MSMQ is installed.\r\nMSMQ is not installed. Going to install.\r\nOS not supported.\r\n\r\nCustom action failed: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Setup.Windows.Msmq.MsmqSetup.RunSetup(Func`1 action)\r\n   at NServiceBus.Setup.Windows.Msmq.MsmqSetup.InstallMsmqIfNecessary(Boolean allowReinstall)\r\n   at NServiceBus.Setup.Windows.Msmq.MsmqSetup.StartMsmqIfNecessary(Boolean allowReinstall)\r\n   at Particular.CustomActions.CustomActions.<>c__DisplayClass2.<InstallMsmq>b__0()\r\n   at Particular.CustomActions.CustomActions.CaptureOut(Action execute, Session session)\r\n   at Particular.CustomActions.CustomActions.InstallMsmq(Session session)\r\nCustomAction InstallMsmq.CB8171C5_FE21_41EE_BC42_72123C0AD0F7 returned actual error code 1603 (note this may not be 100% accurate if translation happened inside sandbox)\r\nAction ended 9:12:51: InstallExecute. Return value 3.\r\nMSI (s) (E8:38) [09:12:51:971]: Note: 1: 2265 2:  3: -2147287035 \r\nMSI (s) (E8:38) [09:12:51:972]: User policy value \'DisableRollback\' is 0\r\nMSI (s) (E8:38) [09:12:51:972]: Machine policy value \'DisableRollback\' is 0\r\nMSI (s) (E8:38) [09:12:51:974]: Executing op: Header(Signature=1397708873,Version=500,Timestamp=1127827866,LangId=1033,Platform=0,ScriptType=2,ScriptMajorVersion=21,ScriptMinorVersion=4,ScriptAttributes=1)\r\nMSI (s) (E8:38) [09:12:51:974]: Executing op: DialogInfo(Type=0,Argument=1033)\r\nMSI (s) (E8:38) [09:12:51:975]: Executing op: DialogInfo(Type=1,Argument=NServiceBus)\r\nMSI (s) (E8:38) [09:12:51:976]: Executing op: RollbackInfo(,RollbackAction=Rollback,RollbackDescription=Rolling back action:,,CleanupAction=RollbackCleanup,CleanupDescription=Removing backup files,CleanupTemplate=File: [1])\r\nAction 9:12:51: Rollback. Rolling back action:\r\n\r\n'
1582,'indualagarsamy','Fix 1536\nFixes #1536 \r\nRather than remove the auditing properties (ForwardReceivedMessagesTo and TimeToBeReceivedOnForwardedMessages)  and their implementation in UnicastBus, marking them as obsolete.'
1581,'','Missing url redirect by the end of the installation via nuget\nby looking at https://github.com/Particular/NServiceBus/blob/develop/packaging/nuget/tools/init.ps1#L78 is seems that we ping the particular website by the end of nuget installation but we are missing an old functionality that we had which redirect the user to the getting started page.\r\n\r\n@johnsimons do you know where is the missing functionality ? '
1580,'',"Remove unneeded IMessageHandlerRegistry interface\nbecause it implies that there's an extension point which there isn't.\r\n\r\n(or, alternatively, agree that this is in fact a supported extension point?)"
1579,'indualagarsamy','AVG Antivirus reports NServiceBus.Host.exe as a threat\nLatest update from AVG reports NServiceBus.Host.exe as a threat.\r\n![avg](https://f.cloud.github.com/assets/282209/1197698/7c4a4760-24e2-11e3-95d7-00241178130b.png)\r\n'
1578,'','Nuget installation do not open the getting started page by the end of the installation\nWe used to open the getting started page once a nuget installation was done, the code that used to open a link to our web page is currently missing from the nuget package and as a result we open a link to verify the installation of msmq/dtc but we no longer open the getting started link.\r\n\r\n@johnsimons i was looking for this code with @andreasohlund earlier today and he mentioned that you might know what happened to it.'
1577,'mookid8000','Performance: distillLowerAssemblyName can be cached\ndistillLowerAssemblyName is run very often. I did some tracing and found out that it took 5% of the startup time...\r\n\r\n(In my case it was called many thousand times...)\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/2315927c6a2bc90fe1123dc1ea5ee1326652a838/src/NServiceBus.Core/Configure.cs#L431'
1576,'andreasohlund',"Nuget install of NServiceBus.host in 4.1\nExecuting: \r\n\r\n    install-package nservicebus.host -pre\r\n\r\ninstalls both NServiceBus.host and NServiceBus.Core as dependencies. However, it doesn't have NServiceBus.Interfaces. \r\n\r\nAs a result, if I add a class that implements INeedInitialization, then it won't compile. \r\n\r\n"
1575,'sfarmar','Automate post build tests using the VideoStore.Msmq sample\n'
1574,'','Remove AddSystemMessagesAs from fluent API\nSystemMessages is an internal concern that should not be exposed to our users!'
1572,'','“Multiple serializers are not supported” configuration error in NServiceBus 4.0.4 during unit testing\nI am trying to unit test message handlers for NServiceBus 4.0.4. The bus is configured to use JSON serializer in the application using the Configure.Serialization.Json(); method call.\r\n\r\nWhenever I call the Test.Initialize() method from the unit tests assembly I get the following exception: System.Configuration.ConfigurationErrorsException : Multiple serializers are not supported. Please make sure to only enable one\r\n\r\nI tried calling Configure.Serialization.Json() and Serializers.SetDefault<JsonSerialization>() before calling the Test.Initialize() method without any success.\r\n\r\nDoes anyone know what am I doing wrong? All examples I see on the internet do not mention any Configure calls.\r\n'
1571,'','CircuitBreaker should implement IDisposable\nWe need to dispose of the Timer'
1570,'','Migrate TableNameAttribute and RowVersionAttribute to NServiceBus.SagaPersisters.NHibernate namespace\nBoth TableNameAttribute and RowVersionAttribute are in a very deep and hard to find namespace `NServiceBus.SagaPersisters.NHibernate.AutoPersistence.Attributes`\r\n\r\nWe should migrate it to `NServiceBus.SagaPersisters.NHibernate` ?'
1569,'','Ensure all attributes are sealed\nAs per .net practice, attributes should be declared sealed'
1568,'johnsimons',"Introducing a way to control lock modes when using the NHibernate saga persister\nWe're also changing the default mode from None to Upgrade since\r\nthat improves throughput when there is alot of concurrency on saga\r\ninstances. This also seems to prevent\r\nhttps://nhibernate.jira.com/browse/NH-3023 from happening as well since\r\nthere will be much less rollbacks due to concurrency issues.\r\nCloses #1342"
1567,'','Bus.SendToSites reuses message IDs when sending to multiple sites\n`Bus.SendToSites(new [] {"SiteA", "SiteA"}, someMessage)`\r\nwill send two messages but only one will be processed by the recipient.\r\n\r\nThe second message is dropped during the ACK [here](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Gateway/Receiving/IdempotentChannelReceiver.cs#L179)\r\n\r\nThis is something that was a little unexpected & I\'m not quite sure if this is a bug or not. I thought I\'d raise it more as a general question.\r\n\r\nNB. The repro steps above are not how I came across this behaviour. We have a custom gateway channel and our code misbehaved. However, it did raise a question.\r\n\r\nShould each message have a new id or can the message id be reused across multiple messages? I thought, in general, each message had a unique id.'
1566,'','Dont delete perf counters on install\nfixes #1488 \r\n@johnsimons @andreasohlund  code review please'
1564,'','ChildContainer not used when calling Outgoing mutators\nThe outgoing mutators should be called in the child container context.\r\n\r\nHere is the bug - https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/UnicastBus.cs#L1445\r\nand\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/UnicastBus.cs#L1458'
1563,'','Page not found (404) exceptions running NSB in VS 2013 RC\nI recently ran into a problem (bug?) with NServiceBus when upgrading from Visual Studio 2013 Preview to Visual Studio RC related to RavenDB.  Code works great in VS 2012 and VS 2013 Preview.  Running on Windows 8.1 preview,  NSB ver 4.0.3.30319\r\n\r\nI tried NSB with both RavenDB  2.0 and 2.5, problem only shows running VS 2013 RC\r\n\r\n\r\nException:\r\n  at System.Net.HttpWebRequest.GetResponse()\r\n  at Raven.Client.Connection.HttpJsonRequest.ReadJsonInternal(Func`1 getResponse) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonRequest.cs:line 332\r\n\r\n\r\n'
1562,'johnsimons','Issue 1558\nNew pull against the correct branch'
1561,'','Patch Builder.BuildAll to support abstract base classes\n**Problem:**\r\n\r\nIn order to register types for DI in the container, currently users need to have an interface. Would be nice to have support for abstract base classes, so this is not required.\r\n\r\n**For example:**\r\n\r\n    public abstract class HeartbeatInfoProvider : IHeartbeatInfoProvider\r\n    {\r\n        public abstract void HeartbeatExecuted(EndpointHeartbeat heartbeat);\r\n    }\r\n\r\n    //we need this for now until we can patch builder.BuildAll to support abstract base classes\r\n    public interface IHeartbeatInfoProvider\r\n    {\r\n        void HeartbeatExecuted(EndpointHeartbeat heartbeat);\r\n    } \r\n'
1560,'','Our installer is not capturing reboots\nWe use tools like dism and ocsetup to install MSMQ and sometimes the OS requires a reboot.'
1559,'',"Publisher not publishing derived events for classes, fixes #1558\nProposed fix for #1558.\r\n\r\nBut I'm not too sure about piggy backing of `AutoSubscribePlainMessages`, because this means that the publisher would be the one having to include:\r\n`Configure.Features.AutoSubscribe(f=>f.AutoSubscribePlainMessages())`\r\n\r\nThoughts?"
1558,'johnsimons','Publisher not publishing derived events for classes\nGiven the following messages hierarchy:\r\n```c#\r\npublic class STEPEvent : IEvent  { }\r\n\r\npublic class ProposalPingEvent : STEPEvent { }\r\n```\r\n\r\nAnd a subscriber with a single handler for `STEPEvent`.\r\n\r\nWhen the Publisher publishes a  `ProposalPingEvent` the subscriber does not receive that event even thought the publisher is aware of the subscriber.'
1557,'','Move a way for ilmerge of the core\nInterop.Msmq => extract a.cs file\r\nlog4net reimplement the few things we need\r\nJson.net => split the json serializer to a separate repo and use a nuget ref\r\nAutofac => replace with eg. tiny ioc as our internal ioc'
1556,'','Autosubscribe not subscribing to IEvent\nThis is related to http://groups.yahoo.com/group/nservicebus/message/20570\r\n\r\nSee failing acceptance test:\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.AcceptanceTests/PubSub/When_publishing_an_event_with_only_local_messagehandlers.cs#L72\r\n\r\nThe workaround is to have an explicit handler for each specific message type!\r\nObviously not very scalable'
1555,'andreasohlund','Non-DTC operations\nIn order to provide the same level of consistency as users that are running with DTC transactions enabled we should introduce a mode of operations that provides those same guarantees without requiring a DTC compliant transport and storage.\r\n\r\nThe following is the high-level design\r\n\r\n## When a message is pulled from the Q\r\n\r\n* if IncomingMessage.MessageId exists in the outbox\r\n    - no: Record all actions (keep them inmemorybatch them to storage at end of "inner" transaction)\r\n            * Note that message id will be generated here and kept stable\r\n    - yes: dispatch all message actions (since this is a retry) but don\'t invoke user code\r\n\r\n* Invoke user code \r\n\r\n* On commit: \r\n   Commit shared UnitOfWork => stores message id + actions in outbox + applies any user operations against the storage (in this mode our outbox share the same storage as the users own data in order to participate in the same storage TX)\r\n\r\n* Dispatch message actions against the underlying transport\r\n\r\n* Mark MessageId as dispatched in the outbox\r\n\r\n## Required functionallity in the core\r\n1. Need a "pipeline" for outgoing messages that supports the above\r\n2. "Outbox" for message id + actions \r\n3. UoW that is shared between our outbox and the users own storage\r\n4. Installers to setup the need outbox "tables" if needed\r\n5. Periodic cleanup of the outbox'
1554,'',"Configure.Transaction.Disable() => Don't use a transaction scope by default\nIf one configures the Bus with\r\n\r\n    Configure.Transactions.Disable();\r\n\r\nthen no transactions should be used at all (at least I understand this that way).\r\n\r\nBut even if Transactions are disabled, the ```MsmqDequeueStrategy``` calls ```TransportReceiver.TryProcess(TransportMessage): bool``` which starts a new Transaction scope.\r\n\r\nThis behavior can currently be fixed, if one set explicitly\r\n\r\n    Configure.Transactions.Disable(s => s.DoNotWrapHandlersExecutionInATransactionScope());\r\n\r\nbut this should be the default, if ```Transactions.Disable()``` is used.\r\n\r\nThis behavior was tested with NSB version 4.0.3"
1553,'','Issue 1496 raven db license\nfixes #1496\r\n\r\nthis one is pretty simple. but can u guys give it a once over @johnsimons @andreasohlund @indualagarsamy '
1552,'yvesgoeleven',"Error with JSON serialized commands\nI've upgraded to 4.0.4 and I'm getting an error:\r\n```\r\nNo handlers could be found for message type: ISomeInterface_impl\r\n```\r\nWhere `ISomeInterface` is an interface on one of my command objects.  It's coming from [here](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/UnicastBus.cs#L1067).\r\n\r\nIt appears to be happening because I use JSON serialized messages.  [This commit](https://github.com/Particular/NServiceBus/commit/2d9ca79b19865145048dc969168c72a72b99b025) added some lines to serialize a message using a pure interface, which is great for events, but sucks for commands.  The part of the code that is problematic is:\r\n```csharp\r\nvar dynamicTypeToSerializeTo = messageTypes != null ? messageTypes.FirstOrDefault(t => t.IsInterface) : null;\r\n```\r\n\r\nIf there's *any* interface on the message, it favors that over the concrete class.  It shouldn't do that, IMHO.\r\n\r\nSo it skips over the real command class, and tries to find a command handler that is based on the implementation of the interface.  I have a real command handler for the command, and it's not finding it.\r\n"
1551,'','support 2.0.3 and 2.5 of raven for user permissions\nfixes #1518\r\n\r\n\r\ncode review guys @johnsimons @andreasohlund @indualagarsamy '
1550,'',"IConfigureTheContainer\nCreate a new extension point IConfigureTheContainer to support centralized distribution of container settings via DLL without requiring a base class for the EndpointConfig like [Johannes's example][1].\r\n\r\n[1]:https://gist.github.com/johannesg/6563373"
1549,'','Not supporting generic message handlers\nWe use generics heavily and have some generic message handlers that we fill in with proper type arguments during initialization. These types are passed in to `TypesToScan`.\r\n\r\nIn v4 (4.0.4) these types are excluded, since `ConfigUnicastBus.IsMessageHandler` has this logic:\r\n\r\n``` C#\r\nif (t.IsAbstract || t.IsGenericType)\r\n   return false;\r\n```\r\n\r\nThe `IsGenericType` should be replaced with `IsGenericTypeDefinition` or `ContainsGenericParameters`.'
1548,'',"IEvent message is not correctly recognized when publishing\nI have a class which implements the IEvent interface and but still whenever I publish a message of that type I receive a MessagingBestPractices warning saying that I'm sending a basic message and not an event.\r\n\r\nSo I had a short look at the source code and ended up running the following two lines of code in my immediate window to test my issue:\r\n\r\ntypeof(IEvent).IsAssignableFrom(typeof(NieuweMedewerker)) && typeof(IEvent) != typeof(NieuweMedewerker)\r\ntrue\r\nMessageConventionExtensions.IsEventType(typeof(NieuweMedewerker));\r\nfalse\r\n\r\nAs you can see the result for the first line is true - meaning that my class implements IEvent. Tho, for some reason, the second line which calls IsEventType(T) returns false.\r\n\r\nScreen below:\r\n\r\n![asdffdasasdfasdfasdf](https://f.cloud.github.com/assets/1512434/1148567/c78fd586-1ec6-11e3-8145-b8f4e93d18ac.PNG)"
1547,'','Distribute the acceptance tests as a code only nuget package\n1. Merge the solutions\r\n2. Create a nuspec for the testing framework\r\n3. Create a nuspec for the actual tests (to include the code)'
1546,'','Obsolete the Predicate signature for subscriptions that sets up filtering\nSince its done at the subscriber side its not very efficent and users gets confused thinking its publisher side filtering. We should obsolete it and direct the few users to just write a message handler that runs first and call `.DoNotContinueDispatchingCurrentMessageToHandlers` instead'
1544,'',"Search feature doesn't have intellisense\n@loldma @stevetayloruk \r\n\r\nAdd intellisense to the new website search field (perhaps in documentation only) to display results as they did on the old site: support.nservicebus.com/\r\n\r\n\r\n"
1543,'','Hands-on Labs page shows same Chrome & Firefox installation requirements regardless of which visitor browser is being used.\n@stevetayloruk @loldma \r\n\r\nRegardless of browser, all visitors see the "Instructions for Google Chrome and Mozilla Firefox users" message on the Hands-on Lab page.\r\n\r\nhttp://particular.net/HandsOnLabs\r\n\r\nThe page should not show the message if the visitor is using a browser other than Chrome or Firefox. \r\n\r\nIf the visitor is using Chrome or Firefox, the page should check if the visitor already has ClickOnce or the Microsoft .NET Framework Assistant installed. If installed already, the message should not be shown.'
1541,'','Fixes #1536\nCleaned up code in UnicastBus to remove the audit related properties, which have been moved to the Audit feature. Related to #1399 \r\n\r\nWith these changes, I ran the unit tests, the NHibernate unit tests failed on my machine and I had set the NH related app.settings properties in these files and then the tests passed. \r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/nhibernate/SagaPersister/NServiceBus.SagaPersisters.NHibernate.Tests/App.config\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/nhibernate/Subscriptions/NServiceBus.Unicast.Subscriptions.NHibernate.Tests/App.config\r\n\r\nDo I need to do anything special that will let me pass these tests without changing my config?? '
1540,'','New Tab Opens for Release Notes from Download Page\n@stevetayloruk @loldma \r\n\r\nPlease ensure that when a visitor clicks on the Release Notes link found on the /downloads page (http://particular.net/downloads) the page opens in the same window/frame and not a new tab.\r\nhttp://particular.net/blog/nservicebus-v4.0-release-notes'
1539,'','Incorrect URLs for Insight and Matrix pages\n@stevetayloruk @loldma \r\n\r\nPlease remove the "-1" found at the end of the URLs for both Insight (http://particular.net/ServiceInsight-1) and Matrix (http://particular.net/ServiceMatrix-1).\r\n\r\n'
1538,'',"Download buttons on /nservicebus page don't redirect to eBook offer page\n@stevetayloruk @loldma \r\n\r\nThe upper download button begins the download, which is good, but doesn't redirect to the eBook offer page (http://particular.net/free-nservicebus-ebook).\r\n\r\nThe lower download button doesn't begin the download, which is incorrect, nor does it redirect to the eBook offer page (http://particular.net/free-nservicebus-ebook).\r\n\r\nPlease ensure both buttons begin the download and redirect to the eBook offer page."
1537,'',"Blinking Home Page\n@stevetayloruk @loldma \r\n\r\nWould you please remedy the blink that occurs when landing on the Particular.net home page? I'm interested to know *why* it occurs so please share. :)"
1536,'','Something is off in the UnicastBus class auditing\nBoth `ForwardReceivedMessagesTo` and `TimeToBeReceivedOnForwardedMessages` props are not used at all in this class!\r\n\r\n/cc @indualagarsamy \r\n'
1535,'','Fixes #1528\nThrowing an invalid operation exception when a message arrives at the endpoint and no registered message handlers are found.'
1534,'','Fixes #1528\nTo always throw an exception when a message arrives and no message handlers are around to process it.'
1533,'','pass username to installers\nfixes #1530\r\n\r\n@johnsimons @andreasohlund @indualagarsamy @mookid8000 \r\n\r\nBTW @andreasohlund held a :gun: to my head when i coded this'
1532,'mookid8000','AssemblyListExtensions.AllTypes: Catch type load errors and rethrow readable exception?\nTypeLoadException is a hard one. Message and ToString() doesn\'t tell you much. Since this code runs very early, we might consider to catch TypeLoadException and turn it into something meaningful...\r\n\r\nSomething like:\r\n\r\n```csharp\r\ncatch (ReflectionTypeLoadException e)\r\n            {\r\n                string loaderExceptions = "";\r\n                foreach (var loaderException in e.LoaderExceptions)\r\n                {\r\n                    loaderExceptions += Environment.NewLine + " - " + loaderException.Message;\r\n                }\r\n                var message = "Failed to load types: " + loaderExceptions;\r\n                throw new Exception(message, e);\r\n            }\r\n```\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Hosting/Helpers/AssemblyListExtensions.cs#L13'
1531,'mookid8000','Rolemanager should only load types from assemblies that \nInstead of using `AllTypes()`, it should only load types from assemblies that are known to refererence Roles (via AllTypesAssignableTo<T>).\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/0e5c683204f76c1a7fd144f7205ba4de4d77dbfc/src/NServiceBus.Core/Hosting/Roles/RoleManager.cs#L26'
1530,'SimonCropp','userName not passed to INeedToInstallSomething during host install for some profiles\nIf I run this \r\n\r\n    NServiceBus.Host.exe /install /serviceName:A /userName:Domain\\Account /password:*** NServiceBus.Integration\r\n\r\nThen `INeedToInstallSomething<Windows>` are passed the running user and not `/userName:Domain\\Account`. So for example `RavenUserInstaller` and `PerformanceMonitorUsersInstaller`.\r\n\r\nTesting other profiles \r\n\r\n * fails for `NServiceBus.Lite` and `NServiceBus.Integration`\r\n * works for `NServiceBus.Production` and `no profile defined`'
1529,'','Running worker on same machine as distributor causes messages to remain stuck after worker restart\nBecause running a worker on the same machine as a distributor (test environments) causes a new queue to be generated, messages never get delivered after a restart.  When the worker starts up and then shuts down the registrations are left in the control queue.  When a new worker starts up, the messages are never delivered to it. \r\n'
1528,'indualagarsamy','When a message handler is not found and a message arrives, endpoint exhibits different behaviors in dev & prod\n**Scenario:**\r\n1. Endpoint receives a message\r\n2. There are no handlers found for that message\r\n\r\n**Current behavior while running within the debugger:**\r\nInvalid operation is thrown and the message is therefore forwarded to the error queue.\r\n\r\n**Current behavior when just executing the code:**\r\nNo invalid operation, a warning gets logged. And the message is gone.\r\n\r\n    foreach (var messageToHandle in messages)\r\n    {\r\n        ExtensionMethods.CurrentMessageBeingHandled = messageToHandle;\r\n\r\n        var handlers = DispatchMessageToHandlersBasedOnType(builder, messageToHandle).ToList();\r\n\r\n        if (!callbackInvoked && !handlers.Any())\r\n        {\r\n            var warning = string.Format("No handlers could be found for message type: {0}", messageToHandle.GetType().FullName);\r\n\r\n            if (Debugger.IsAttached)\r\n                throw new InvalidOperationException(warning);\r\n\r\n            Log.WarnFormat(warning);\r\n        }\r\n\r\n        LogPipelineInfo(messageToHandle, handlers);\r\n    }\r\n\r\n**Question:**\r\n\r\nShould this behavior be different in these environments? The reason as I understand it is that in dev we want the developer to know this right away so he can fix it and therefore won\'t be an issue in prod. However, why can\'t we throw an invalid op exception in prod as well? \r\n\r\n**Proposed Fix**\r\n1. Log this as an error as opposed to a warning\r\n2. Treat this similar to deserialization exception and move the message to the error queue without any further retries.\r\n'
1527,'','Acceptance tests seems to hang\nHappens both locally (with msmq) and on the build server (rabbitmq)\r\n\r\nWonder if it has something to do with the dispose refactoring?\r\n\r\nHere is the thread dump from the build server:\r\n\r\n\r\nThread dumps of NServiceBus.RabbitMQ :: 2. Run acceptance tests #1.1.0-Unstable15 (11 Sep 13 18:21)\r\nProcess tree:\r\n\r\nClick on an item in the tree to view thread dump.\r\nPID: 3756 C:\\BuildAgent\\plugins\\dotnetPlugin\\bin\\JetBrains.BuildServer.NUnitLauncher.exe\r\nPID: 3188 C:\\BuildAgent\\plugins\\dotnetPlugin\\bin\\JetBrains.TeamCity.PlatformProcessRunner.v4.0.msil.exe\r\nProcess ID (PID): 3188\r\n\r\nProcess command line\r\n\r\nCopy to clipboard \r\nProcess is running under CLR version: v4.0.30319\r\n\r\n\r\n\r\nThread id=3764\r\nU-->M\r\n\r\n\r\nThread id=3916\r\n\r\n\r\nThread id=2188\r\n\r\n\r\nThread id=3096\r\nat System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout(System.Int32 millisecondsTimeout, System.UInt32 startTime, System.Threading.CancellationToken cancellationToken) \r\nat System.Threading.SemaphoreSlim.Wait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken) \r\nat System.Threading.SemaphoreSlim.Wait(System.TimeSpan timeout) \r\nat NServiceBus.AcceptanceTesting.Support.EndpointRunner.<Initialize>b__4() \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(System.Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nU-->M\r\n\r\n\r\nThread id=3868\r\nat System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout(System.Int32 millisecondsTimeout, System.UInt32 startTime, System.Threading.CancellationToken cancellationToken) \r\nat System.Threading.SemaphoreSlim.Wait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken) \r\nat System.Threading.SemaphoreSlim.Wait(System.TimeSpan timeout) \r\nat NServiceBus.AcceptanceTesting.Support.EndpointRunner.<Initialize>b__4() \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(System.Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nU-->M\r\n\r\n\r\nThread id=3884\r\n\r\n\r\nThread id=960\r\nat System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout(System.Int32 millisecondsTimeout, System.UInt32 startTime, System.Threading.CancellationToken cancellationToken) \r\nat System.Threading.SemaphoreSlim.Wait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken) \r\nat System.Threading.SemaphoreSlim.Wait(System.TimeSpan timeout) \r\nat NServiceBus.AcceptanceTesting.Support.EndpointRunner.<Initialize>b__4() \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(System.Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nU-->M\r\n\r\n\r\nThread id=4068\r\nat System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout(System.Int32 millisecondsTimeout, System.UInt32 startTime, System.Threading.CancellationToken cancellationToken) \r\nat System.Threading.SemaphoreSlim.Wait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken) \r\nat System.Threading.SemaphoreSlim.Wait(System.TimeSpan timeout) \r\nat NServiceBus.AcceptanceTesting.Support.EndpointRunner.<Initialize>b__4() \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(System.Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nU-->M\r\n\r\n\r\nThread id=1852\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3304\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3380\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=2856\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=2992\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3296\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3644\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=2552\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=668\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3788\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=2348\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3412\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=2776\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3740\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=2276\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3092\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3152\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=592\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=2176\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3104\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3080\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4768\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=5072\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4112\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=3156\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=5052\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=2304\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4248\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4124\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4192\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4256\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4260\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4284\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4588\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4304\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4280\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4264\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4612\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4792\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4340\r\nM-->U\r\n[IL Method without Metadata]\r\nat System.Net.Sockets.Socket.Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.Sockets.SocketError& errorCode) \r\nat System.Net.Sockets.NetworkStream.Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size) \r\nat System.IO.BufferedStream.ReadByte() \r\nat System.IO.BinaryReader.ReadByte() \r\nat RabbitMQ.Client.Impl.Frame.ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) \r\nat RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() \r\nat RabbitMQ.Client.Impl.ConnectionBase.MainLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4384\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatReadLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4824\r\nat System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext) \r\nat RabbitMQ.Client.Impl.ConnectionBase.HeartbeatWriteLoop() \r\nat System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) \r\nat System.Threading.ThreadHelper.ThreadStart() \r\nU-->M\r\n\r\n\r\nThread id=4216\r\n\r\n\r\nThread id=4948\r\n\r\n\r\nThread id=4148\r\n\r\n\r\nThread id=3592\r\n\r\n\r\nThread id=908\r\n\r\n\r\nThread id=3084\r\n\r\n\r\nThread id=4552\r\n\r\n\r\nThread id=4488\r\n\r\n\r\nThread id=4804'
1526,'','Address\n'
1525,'','When throwing an exception from within an acceptance test, the outermost exception is lost.\nSee the following acceptance test in ServiceControl:\r\n`when_a_message_has_failed.cs`, test:`should_raise_an_alert`\r\n\r\nWhen you set the proper assert condition that the description contains the exact exception message thrown by the handler in the acceptance test, the test fails and the exception does not contain, `Simulated exception`, instead contains the following:\r\n\r\n\r\n     This message processing failed due to: Exception: An exception was thrown while executing a resolve operation. See the InnerException for details. ---> The provided instance has already been used in an activation request. Did you combine a provided instance with non-root/single-instance lifetime/sharing? (See inner exception for details.), StackTrace: Autofac.Core.DependencyResolutionException: An exception was thrown while executing a resolve operation. See the InnerException for details.\r\n     ---> The provided instance has already been used in an activation request. Did you combine a provided instance with non-root/single-instance lifetime/sharing? (See inner exception for details.) \r\n     ---> System.InvalidOperationException: The provided instance has already been used in an activation request. Did you combine a provided instance with non-root/single-instance lifetime/sharing?\\n   \r\n     at Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.ActivateInstance(IComponentContext context, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.Core.Resolving.InstanceLookup.<Execute>b__0() in :line 0\\n   \r\n    at Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(Guid id, Func`1 creator) in :line 0\\n   \r\n    at Autofac.Core.Resolving.InstanceLookup.Execute() in :line 0\\n   at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.Core.Resolving.InstanceLookup.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.ResolutionExtensions.TryResolveService(IComponentContext context, Service service, IEnumerable`1 parameters, Object& instance) in :line 0\\n   \r\n    at Autofac.ResolutionExtensions.ResolveService(IComponentContext context, Service service, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.ResolutionExtensions.Resolve(IComponentContext context, Type serviceType, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.ResolutionExtensions.Resolve(IComponentContext context, Type serviceType) in :line 0\\n   \r\n    at Autofac.Core.Activators.Reflection.AutowiringPropertyInjector.InjectProperties(IComponentContext context, Object instance, Boolean overrideSetValues) in :line 0\\n   \r\n    at Autofac.Builder.RegistrationBuilder`3.<>c__DisplayClassd.<PropertiesAutowired>b__c(Object s, ActivatingEventArgs`1 e) in :line 0\\n   \r\n    at Autofac.Core.Registration.ComponentRegistration.RaiseActivating(IComponentContext context, IEnumerable`1 parameters, Object& instance) in :line 0\\n   \r\n    at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.Core.Resolving.InstanceLookup.<Execute>b__0() in :line 0\\n   \r\n    at Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(Guid id, Func`1 creator) in :line 0\\n   \r\n    at Autofac.Core.Resolving.InstanceLookup.Execute() in :line 0\\n   \r\n    at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.Core.Resolving.ResolveOperation.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.Core.Resolving.ResolveOperation.Execute(IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\\n   --- End of inner exception stack trace ---\\n   \r\n    at Autofac.Core.Resolving.ResolveOperation.Execute(IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.Core.Lifetime.LifetimeScope.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.ResolutionExtensions.TryResolveService(IComponentContext context, Service service, IEnumerable`1 parameters, Object& instance) in :line 0\\n   \r\n    at Autofac.ResolutionExtensions.ResolveService(IComponentContext context, Service service, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.ResolutionExtensions.Resolve(IComponentContext context, Type serviceType, IEnumerable`1 parameters) in :line 0\\n   \r\n    at Autofac.ResolutionExtensions.Resolve(IComponentContext context, Type serviceType) in :line 0\\n   \r\n    at NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.Build(Type typeToBuild) in c:\\\\BuildAgent\\\\work\\\\35fff262ccfe24da\\\\src\\\\NServiceBus.Core\\\\ObjectBuilder\\\\Autofac\\\\AutofacObjectBuilder.cs:line 70\\n   \r\n    at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.NServiceBus.ObjectBuilder.IBuilder.BuildAndDispatch(Type typeToBuild, Action`1 action) in c:\\\\BuildAgent\\\\work\\\\35fff262ccfe24da\\\\src\\\\NServiceBus.Core\\\\ObjectBuilder\\\\Common\\\\CommonObjectBuilder.cs:line 194\\n   \r\n    at NServiceBus.Unicast.DefaultDispatcherFactory.<>c__DisplayClass2.<GetDispatcher>b__0() in c:\\\\BuildAgent\\\\work\\\\35fff262ccfe24da\\\\src\\\\NServiceBus.Core\\\\Unicast\\\\DefaultDispatcherFactory.cs:line 14\\n   \r\n    at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass2f.<DispatchMessageToHandlersBasedOnType>b__2a(Action dispatch) in c:\\\\BuildAgent\\\\work\\\\35fff262ccfe24da\\\\src\\\\NServiceBus.Core\\\\Unicast\\\\UnicastBus.cs:line 1147"\tstring\r\n'
1524,'mookid8000','Improved assembly scanner that skips irrelevant files\nalso, the logic is put in `AssemblyScanner` only\r\n\r\nfor #1289'
1523,'','Stopping endpoint causes this exception\nThis is occurring in v4.1!\r\n\r\nStart the VideoStore MSMQ sample and once everything is started, press CTRL+C to stop one of the endpoints.\r\n\r\n```\r\nThe VideoStore.Operations endpoint is now started and ready to accept messages\r\n2013-09-11 17:21:12,507 [22] ERROR NServiceBus.Unicast.UnicastBus [(null)] <(nul\r\nl)> - System.NullReferenceException: Object reference not set to an instance of\r\nan object.\r\n   at NServiceBus.Distributor.ReadyMessages.ReadyMessageSender.Stop() in c:\\Proj\r\nects\\NServiceBus\\src\\NServiceBus.Core\\Distributor\\ReadyMessages\\ReadyMessageSend\r\ner.cs:line 32\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass1e.<>c__DisplayClass20.<Ex\r\necuteIWantToRunAtStartupStopMethods>b__1b() in c:\\Projects\\NServiceBus\\src\\NServ\r\niceBus.Core\\Unicast\\UnicastBus.cs:line 873 could not be stopped.\r\n\r\n```'
1522,'BogdanMitrache','Install/Uninstall process\n@BogdanMitrache in the NServiceBus installer we need the following logic for installing/uninstalling:\r\n- User install v1.0.0 (first new install)\r\n- User downloads a new patch release v1.0.1\r\n- When user installs v1.0.1, version 1.0.0 should be uninstalled automatically and v1.0.1 installed\r\n\r\n- If user later on downloads v1.1 or v2.0\r\n- When user installs v1.1 or v1.2 then the installer will install both of those side by side (so v1.0.1 would **not be uninstalled!**)\r\n\r\nSo in summary, given a version like x.y.z:\r\n- Any changes in Z triggers an uninstall of any previous x.y.# automatically\r\n- Any changes to either x or y will trigger a side by side install\r\n\r\nI hope this makes sense?'
1521,'',"What is the purpose of Syncronized in CommonObjectBuilder?\nI looked at that property and can't really figure out a usage for it!\r\n\r\nAlso, I doubt if anyone is actually using it and I've never came across any doco about it!\r\n\r\nCan we get rid of it?"
1520,'SimonCropp','Cannot access a disposed object.\nInstall the TimeoutManager sample,eg:\r\nNServiceBus.Host.exe /install /serviceName="MyEndpoint"\r\n\r\n#### Exception\r\n```\r\nFailed to execute installers: System.ObjectDisposedException: Cannot access a di\r\nsposed object.\r\nObject name: \'CommonObjectBuilder\'.\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.ThrowIfDisposed()\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.get_Container() in c:\r\n\\Projects\\NServiceBus\\src\\NServiceBus.Core\\ObjectBuilder\\Common\\CommonObjectBuil\r\nder.cs:line 19\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.DisposeManaged() in c\r\n:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\ObjectBuilder\\Common\\CommonObjectBui\r\nlder.cs:line 150\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Dispose()\r\n   at NServiceBus.Hosting.Windows.Installers.WindowsInstaller.RunInstall() in c:\r\n\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting.Windows\\Installers\\Windows\r\nInstaller.cs:line 41\r\n```\r\n\r\nRelated to #1362'
1519,'johnsimons','NServiceBus. Used product version in URL launched at the end, updated metada info that is visible in Control Panel.\n'
1518,'',"RavenUserInstaller exception (NSB 4.0.0, RavenDB 2.5.2700)\nRavenUserInstaller.Install throws the following exception when configuring the bus:\r\n\r\n    Method not found: 'Raven.Abstractions.Data.PutResult Raven.Client.Connection.IDatabaseCommands.Put(System.String, System.Nullable`1<System.Guid>, Raven.Json.Linq.RavenJObject, Raven.Json.Linq.RavenJObject)'.\r\n\r\nThe Put method now takes an Etag, not a Guid?.  Since you appear to be passing in a null value anyway, this may be as simple as recompiling against the latest version of RavenDB.\r\n\r\nInterestingly, this worked just fine with RavenDB 2.5.2666, which already features the switch to Etag.\r\n\r\nStack Trace:\r\n\r\n\tSystem.MissingMethodException occurred\r\n\t  HResult=-2146233069\r\n\t  Message=Method not found: 'Raven.Abstractions.Data.PutResult Raven.Client.Connection.IDatabaseCommands.Put(System.String, System.Nullable`1<System.Guid>, Raven.Json.Linq.RavenJObject, Raven.Json.Linq.RavenJObject)'.\r\n\t  Source=NServiceBus.Core\r\n\t  StackTrace:\r\n\t       at NServiceBus.Persistence.Raven.RavenUserInstaller.AddUserToDatabase(String identity, DocumentStore documentStore)\r\n\t       at NServiceBus.Persistence.Raven.RavenUserInstaller.Install(String identity) in c:\\Code\\Particular\\NServiceBus\\src\\NServiceBus.Core\\Persistence\\Raven\\RavenUserInstaller.cs:line 40\r\n\t  InnerException: \r\n"
1517,'',"Solves issue 1512\nThis PR solves issue 1512 : https://github.com/Particular/NServiceBus/issues/1512\r\n\r\nIs extends the 'TimeoutEntity_EndpointIdx' index with the Time column.\r\n\r\nI have done a run-time test by using the NHibernate timeout persister in the pubsub sample and running NServiceBus.Host.exe -install to see if the table index was created correctly."
1516,'','Should a new license be generated for minor releases?\nCurrently for a client that has a 4.0 license installed, all 4.0 endpoints will be loaded fine with the installed license. But when a minor release is released, any new endpoints using the new minor release will default to trial mode, unless user installs a new license for new minor release. Is this necessary? For a client that already has a license for 4.x, is this necessary?\r\n\r\nShould we just check the major version? Or should we issue licenses for every minor release?\r\n\r\n@dannycohen @udidahan @andreasohlund @johnsimons @SimonCropp Thoughts??'
1515,'','System.InvalidOperationException: No destination specified for message(s):\nHi\r\n\r\nHave a request to raise an issue to improve the error message when a handler gets into a loop resubmitting the same message to itself.\r\n\r\nhttp://stackoverflow.com/questions/16415585/nservicebus-system-invalidoperationexception-no-destination-specified-for-mes/'
1514,'','WCF endpoints do not support msmq binding\nI just tried the wcf integration by looking at the following code: \r\n\r\nhttps://github.com/Particular/NServiceBus/tree/develop/IntegrationTests/WcfIntegration\r\n\r\nThis only allows for request/response type of bindings. It does not support send-only thus cannot support the msmq binding which I think is a big loss. It would be nice if you could easiliy send messages via wcf msmq. This would not create a code dependancy on NServiceBus on the client which makes it much easier to do interop.'
1513,'','Remove Common.Logging and Spring ObjectBuilder from samples\nRelated to #1511\r\n\r\nUsing Spring for one sample is not a good idea. Adds complexity to the sample for no value'
1512,'','Deadlocks occur on timeout table and index on endpoint incomplete\nUsing NServiceBus 3.3.x\r\n\r\nWe have several services using timeout storage. These generate 7-10 deadlocks per day on the timeout table. Not a big problem but our dba says that these polute the reporting\r\n\r\nAt first these services were sharing the same timeout table so we thought that was the issue and created a timeout table per service but  we are still having the same issue.\r\n\r\nThe deadlock occurs on the following queries:\r\n\r\nSelecting next set of timeouts:\r\n\r\n\tSELECT\r\n\t\tTOP (@p0) \r\n\t\tthis_.Id as Id4_0_, \r\n\t\tthis_.Destination as Destinat2_4_0_, \r\n\t\tthis_.SagaId as SagaId4_0_, \r\n\t\tthis_.State as State4_0_, \r\n\t\tthis_.Time as Time4_0_, \r\n\t\tthis_.CorrelationId as Correlat6_4_0_, \r\n\t\tthis_.Headers as Headers4_0_, \r\n\t\tthis_.Endpoint as Endpoint4_0_ \r\n\tFROM\r\n\t\tNServiceBus.TimeoutEntity this_\r\n\tWHERE\r\n\t\tthis_.Endpoint = @p1 and this_.Time &gt; @p2\r\n\tORDER BY\r\n\t\tthis_.Time asc\r\n\t\r\n\r\nDeleting a specifc timeout:\r\n\r\n\tdelete\r\n\tfrom\r\n\t\tNServiceBus.TimeoutEntity\r\n\twhere\r\n\t\tId=@p0\r\n\r\n\r\nIndexes:\r\n - clustered index is on Id\r\n - non-clustered on Endpoint\r\n - non-clustered on SagaId\r\n\r\n\r\nWe want to solve this and my guess is that it could be solved by updating index on end-point. My guess is making that the clustered index on Endpoint and Time. This because that query is run much more often then the delete.\r\n\r\nAt least the endpoint index should contain time.'
1511,'','Fix Common.Logging version conflict\nSo Spring.Core 1.3.2.40943 references CommonLogging 1.2.0  \r\n\r\nObjectBuilder.Spring references Spring.Core 1.3.2.40943  and Common.Logging 2.0.0\r\n\r\nSince Common.Logging is strong named it can cause binding issues. \r\n\r\nThis was done in this change https://github.com/Particular/NServiceBus/commit/2d6d5a20f3417791ea930965bf65058e11929002\r\n\r\nSince we dont use CommonLogging should we just change our reference back to CommonLogging 1.2.0  \r\n'
1510,'andreasohlund','SecondLevelRetries.Disabled does not reflect when feature has been disabled\nThis fix also checks if the endpoint is a Worker and not a Distributor, in this case the feature should be disabled too.'
1509,'',"NullReferenceException from T4Scaffolding \nGot this when i opened a VS solution\r\n\r\n\tEach package is licensed to you by its owner. Microsoft is not responsible for, nor does it grant any licenses to, third-party packages. Some packages may include dependencies which are governed by additional licenses. Follow the package source (feed) URL to determine any dependencies.\r\n\r\n\tPackage Manager Console Host Version 2.7.40808.167\r\n\r\n\tType 'get-help NuGet' to see all available NuGet commands.\r\n\r\n\tSet-DefaultScaffolder : Object reference not set to an instance of an object.\r\n\tAt C:\\Code\\Particular\\foo\\NServiceBus\\packages\\T4Scaffolding.Core.1.0.0\\tools\\init.ps1:50 char:9\r\n\t+         Set-DefaultScaffolder -Name CustomTemplate -Scaffolder T4Scaffolding.Cus ...\r\n\t+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\t    + CategoryInfo          : NotSpecified: (:) [Set-DefaultScaffolder], NullReferenceException\r\n\t    + FullyQualifiedErrorId : T4Scaffolding.Cmdlets.SetDefaultScaffolderCmdlet\r\n\t \r\n\tPM> "
1508,'','Update TransportReceiverFailedMessageMonitor.cs\nUse the Transport on UnicastBus\r\n#1507'
1507,'','ITransport.FailedMessageProcessing event not raised in V4?\nI am using 4.0.3.\r\n\r\nI run the ErrorHandling sample and place a breakpoint in `TransportReceiverFailedMessageMonitor.OnFailedMessageProcessing`\r\n\r\nIt is never called when I run the sample'
1506,'',"ProfileManager logger is initialised to NullLogger before custom loggerfactory is set up\nVersion 5 now has sensible defaults for logging. So logging will still occur from `ProfileManager` even if logging is not yet configured.\r\n\r\n--\r\n\r\nIn Version 5 `IWantCustomLogging` is obsoleted. The replacement is to us `IWantCustomInitialization` and configure logging before `Configure.With()`\r\n\r\nI have an endpoint which implements IWantCustomLogging and sets logging to NLog.\r\n\r\n* The GenericHost constructor instantiates a ProfileManager.\r\n* The ProfileManager has a static ILog which is set to LogManager.GetLogger(typeof(ProfileManager))\r\n* At this point LogManager._loggerFactory has not been changed from NullLoggerFactory\r\n* The GenericHost runs PerformConfiguration() and the first thing that happens is the LogManager._loggerFactory is set to an NLogFactory \r\n* some time afterwards ProfileManager.ActivateProfileHandlers() is run - but logging is not emitted because its ILog has been already set to a NullLogger\r\n\r\nI'm not sure what the best fix is - happy to put together a PR once a fix is identified.\r\n\r\nperhaps the quickest fix is to move this:\r\n```csharp\r\n            profileManager = new ProfileManager(assembliesToScan, specifier, args, defaultProfiles);\r\n            ProfileActivator.ProfileManager = profileManager;\r\n\r\n```\r\nout of the GenericHost constructor and moved to after this point in PerformConfiguration():\r\n```csharp\r\n         if (specifier is IWantCustomLogging)\r\n                (specifier as IWantCustomLogging).Init();\r\n```\r\nthat way the ProfileManager static ILog will get a valid logger..."
1505,'','fix dispose in object builders\nfor #1362'
1504,'',"Fixes #1503 - SecondLevelRetriesProcessor is always started regardless of feature being disabled\nI'm a bit confused why this hasn't been noticed/fixed already.  I might be missing something completely obvious as to why but it escapes me and so I've put in this patch...\r\n\r\nbtw, develop branch already had 7 failing unit tests before I created this branch - they are still failing."
1503,'johnsimons','SecondLevelRetries.Disabled does not reflect when feature has been disabled\n# Expected\r\nWhen SecondLevelRetries feature is disabled the satellite should not be started up.\r\n\r\n# Observed\r\nversion: 4.0.2\r\nlogging output shows that the timeoutmanager and secondlevelretries are both disabled, however the satellitelauncher is starting up the secondlevelretriesprocessor...\r\n![image](https://f.cloud.github.com/assets/81165/1084836/0259fb72-15b9-11e3-8a75-bfe71b77ab57.png)\r\n\r\n# Details\r\nThe SatelliteLauncher only launches satellites as follows:\r\n```csharp\r\n    var satellitesList = Configure.Instance.Builder\r\n                                          .BuildAll<ISatellite>()\r\n                                          .ToList()\r\n                                          .Where(s => !s.Disabled)\r\n                                          .ToList();\r\n```\r\nThe implementation of TimeoutDispatcherProcessor is:\r\n```csharp\r\n        public bool Disabled\r\n        {\r\n            get { return !Feature.IsEnabled<TimeoutManager>(); }\r\n        }\r\n```\r\nWhereas the implementation of SecondLevelRetriesProcessor is:\r\n```csharp\r\n        public bool Disabled { get; set; }\r\n```'
1502,'',"Powershell locked out by nuget\nInstallation of NSB package from Nuget Package manager console fails. Details:\r\n\r\nInstall-Package NServiceBus -version 4.1.0-unstable3377 -project EmailSignupWeb\r\nAttempting to resolve dependency 'NServiceBus.Interfaces (= 4.1.0-unstable3377)'.\r\nInstalling 'NServiceBus 4.1.0-unstable3377'.\r\nYou are downloading NServiceBus from NServiceBus Ltd, the license agreement to which is available at http://particular.net/LicenseAgreement. Check the package for additional dependencies, which may come with their own license agreement(s). Your use of the package and dependencies constitutes your acceptance of their license agreements. If you do not accept the license agreement(s), then delete the relevant components from your device.\r\nSuccessfully installed 'NServiceBus 4.1.0-unstable3377'.\r\n\r\nType 'get-help about_NServiceBus' to see all available NServiceBus commands.\r\n\r\nInstall failed. Rolling back...\r\nAccess to the path 'D:\\Development\\TravelAlberta\\EmailSignupService-Trunk\\packages\\NServiceBus.4.1.0-unstable3377\\tools\\NServiceBus.PowerShell.dll' is denied.\r\nAccess to the path 'NServiceBus.PowerShell.dll' is denied.\r\nInstall-Package : Unable to resolve dependency 'NServiceBus.Interfaces (= 4.1.0-unstable3377)'.\r\nAt line:1 char:1\r\n+ Install-Package NServiceBus -version 4.1.0-unstable3377 -project EmailSignupWeb\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], InvalidOperationException\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PowerShell.Commands.InstallPackageCommand"
1501,'','Improve error reporting in SqlServerPollingDequeueStrategy\nIf you neglect to `Configure.Instance.ForInstallationOn<Windows>().Install()`, SqlServer transport will not create its tables.  Later the `SqlServerPollingDequeueStrategy` will have exceptions because the objects does not exist.\r\n\r\nThe issue is that the exception reported to log is \r\n\r\n    WARN  NServiceBus.Transports.SQLServer.SqlServerPollingDequeueStrategy  - Failed to connect to the configured SqlServer\r\n\r\nThe message is inaccurately reporting a connection failure.\r\n\r\n'
1500,'','Prevent users from setting callbacks if a SingleBroker queue is configured\nWe should add a guard to each Register method\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus/ICallback.cs\r\n\r\nThat checks:\r\n\r\n1. If the transport is a broke\r\n2. And the UseSingleBrokerQueue setting is "true"\r\n\r\nThen: throw an exception saying that they need to set it to false if in debug mode + log an error'
1499,'','When auditing is enabled, have a way to turn off auditing control messages.\nCurrently when auditing is turned on, by default all control messages are forwarded to the audit queue as well.\r\n\r\nThis could be noise, when trying to just audit business level messages.\r\nHave a way to turn off forwarding control messages.\r\n\r\n**To see this behavior:**\r\nTurn auditing on in the Scale out sample and inspect the audit queue. You will see several 0 byte messages in the audit queue.\r\n'
1498,'','Some Satellites need to execute UoW\nThis is being experienced in ServiceControl.\r\n\r\nWe could:\r\n\r\n1. Build on top of #1497\r\n1. Create an extra abstract class that also wraps the management of UoW for Satellites that require them.\r\n\r\nI think I prefer 2.\r\n\r\nWith that in mind, I wonder if we need a way to configure UoW per Satellite, so that eg UoW1 is only available for Satellite1. This would mean that the registration of a Satellite would be more advanced.\r\n\r\nThoughts?'
1496,'','Add RavenDB license to RavenDB installer code\n'
1495,'andreasohlund','ExpectSendToSites & ExpectNotSendToSites\nAdded ExpectSendToSites<T> and ExpectNotSendToSites<T>handlers\r\nAdded basic unit tests'
1494,'','AbstractLicenseValidator logs to redundant NullLogger\nSo here https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Rhino.Licensing/AbstractLicenseValidator.cs#L22\r\n\r\nwe have \r\n \r\n    readonly ILog Log = new NullLogger();\r\n\r\nSince it is `readonly` and it points to a `NullLogger` what is the point?\r\n\r\n@andreasohlund @johnsimons '
1493,'','Distributor Loses First Few Messages\nWe discovered this while attempting to use the Distributor in our software, but you can see it in your ScaleOut sample as well.  It seems similar to Issue #814 but does not require as much work to reproduce:\r\n\r\n1. Check out the 4.0.3.\r\n2. Start the ScaleOut sample from VS2012\r\n3. Wait until the console logging output stops.\r\n3. In the Orders.Sender app, hit enter once to send a message.\r\n4. Observe that there is no response.\r\n5. Send a few more messages. You will start seeing responses for the later ones, but the first one or two will never come back.'
1492,'andreasohlund',"Unit Tests fail with ConfigurationErrorsException\nunit tests fail with 'Multiple serializers are not supported. Please make sure to only enable one' if using any serializer other than xml. Removed explicit serializer configuration & substituted with a default"
1491,'','Populate ReplyToAddress in the message headers instead of a property in TransportMessage\nPopulate `ReplyToAddress` in the message headers\r\n\r\nCurrently the ReplyToAddress is available as a property on the `TransportMessage` class and not available in the headers.\r\n\r\n\tpublic Address ReplyToAddress { get; set; }\r\n\r\nMake this available as part of the Headers.'
1490,'','Extract unit of work runner\nfor #552 \r\n\r\n@johnsimons @andreasohlund @indualagarsamy code review please'
1488,'',"Install-PerformanceCounters cmdlet deletes perf counter before installing them\n[This code](https://github.com/Particular/NServiceBus/blob/develop/src/PowerShell/NServiceBus.PowerShell/PerformanceCounters/PerformanceCounterSetup.cs#L39) delete the perf counters categories before reinstalling them.\r\nThis is done to try to fix up hiccups with perf counters, where sometimes the category gets corrupted :disappointed: \r\n\r\n**However we can't do this!**\r\nImagine a side by side install of v3 and v4 on the same machine, with the current code, the v3 perf counters would be deleted and the new v4 ones added, and **that would break v3!**"
1487,'',"RavenDB version error when calling Test.Initialize() on a machine with old version of RavenDB\nI am trying to run a unit test using V 4.0.3. I have a previous version of RavenDB installed from V3, but our team doesn't use RavenDB at all for persistence in NServiceBus.\r\n\r\nCalling Test.Initialize() throws:\r\n> \r\n> Result Message:\t\r\n> Autofac.Core.DependencyResolutionException : An exception was thrown while executing a resolve operation. See the InnerException for details. ---> The RavenDB server you have specified is detected to be Product version: 1.0.0 / e6ab5a0, Build version: 616. NServiceBus requires RavenDB version 2 or higher to operate correctly. Please update your RavenDB server.> \r\n\r\n> Further instructions can be found at:http://particular.net/articles/using-ravendb-in-nservicebus-installing (See inner exception for details.)\r\n>   ----> System.InvalidOperationException : The RavenDB server you have specified is detected to be Product version: 1.0.0 / e6ab5a0, Build version: 616. NServiceBus requires RavenDB version 2 or higher to operate correctly. Please update your RavenDB server.> \r\n\r\n> Further instructions can be found at:http://particular.net/articles/using-ravendb-in-nservicebus-installing\r\n> Result StackTrace:\t\r\n> at Autofac.Core.Resolving.ResolveOperation.Execute(IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\r\n> at Autofac.Core.Lifetime.LifetimeScope.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\r\n> at Autofac.Core.Container.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\r\n> at Autofac.ResolutionExtensions.TryResolveService(IComponentContext context, Service service, IEnumerable`1 parameters, Object& instance) in :line 0\r\n> at Autofac.ResolutionExtensions.ResolveService(IComponentContext context, Service service, IEnumerable`1 parameters) in :line 0\r\n> at NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.Build(Type typeToBuild) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\ObjectBuilder\\Autofac\\AutofacObjectBuilder.cs:line 86\r\n> at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.NServiceBus.ObjectBuilder.IBuilder.Build(Type typeToBuild) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\ObjectBuilder\\Common\\CommonObjectBuilder.cs:line 181\r\n> at NServiceBus.Config.DisplayInfrastructureServicesStatus.Run() in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Config\\InfrastructureServices.cs:line 159\r\n> at NServiceBus.Configure.<Initialize>b__14(IWantToRunWhenConfigurationIsComplete o) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Configure.cs:line 375\r\n> at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n> at NServiceBus.Configure.Initialize() in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Configure.cs:line 374\r\n> at NServiceBus.Testing.Test.InitializeInternal() in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\testing\\Test.cs:line 116\r\n> at NServiceBus.Testing.Test.Initialize() in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\testing\\Test.cs:line 31\r\n> at NServiceBusTest.NServiceBusTest.Test() in c:\\Code\\tools\\NServiceBusTest\\NServiceBusTest\\Class1.cs:line 16\r\n> --InvalidOperationException\r\n> at NServiceBus.ConfigureRavenPersistence.VerifyConnectionToRavenDBServer(IDocumentStore store) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Persistence\\Raven\\ConfigureRavenPersistence.cs:line 302\r\n> at NServiceBus.ConfigureRavenPersistence.<>c__DisplayClassd.<InternalRavenPersistence>b__c() in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Persistence\\Raven\\ConfigureRavenPersistence.cs:line 184\r\n> at NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.<>c__DisplayClass1`1.<NServiceBus.ObjectBuilder.Common.IContainer.Configure>b__0(IComponentContext c) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\ObjectBuilder\\Autofac\\AutofacObjectBuilder.cs:line 124\r\n> at Autofac.RegistrationExtensions.<>c__DisplayClass10`1.<Register>b__f(IComponentContext c, IEnumerable`1 p) in :line 0\r\n> at Autofac.Builder.RegistrationBuilder.<>c__DisplayClass1`1.<ForDelegate>b__0(IComponentContext c, IEnumerable`1 p) in :line 0\r\n> at Autofac.Core.Activators.Delegate.DelegateActivator.ActivateInstance(IComponentContext context, IEnumerable`1 parameters) in :line 0\r\n> at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters) in :line 0\r\n> at Autofac.Core.Resolving.InstanceLookup.<Execute>b__0() in :line 0\r\n> at Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(Guid id, Func`1 creator) in :line 0\r\n> at Autofac.Core.Resolving.InstanceLookup.Execute() in :line 0\r\n> at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\r\n> at Autofac.Core.Resolving.InstanceLookup.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\r\n> at Autofac.Core.Activators.Reflection.AutowiringParameter.<>c__DisplayClass2.<CanSupplyValue>b__0() in :line 0\r\n> at Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Instantiate() in :line 0\r\n> at Autofac.Core.Activators.Reflection.ReflectionActivator.ActivateInstance(IComponentContext context, IEnumerable`1 parameters) in :line 0\r\n> at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters) in :line 0\r\n> at Autofac.Core.Resolving.InstanceLookup.<Execute>b__0() in :line 0\r\n> at Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(Guid id, Func`1 creator) in :line 0\r\n> at Autofac.Core.Resolving.InstanceLookup.Execute() in :line 0\r\n> at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\r\n> at Autofac.Core.Resolving.ResolveOperation.Execute(IComponentRegistration registration, IEnumerable`1 parameters) in :line 0\r\n\r\n\r\nIf I stop the RavenDB server it works. This seems like something that shouldn't matter in a unit testing scenario. Is their a way to disable this check?\r\n\r\nAlternatively, I could have everyone on our dev team make sure to uninstall RavenDB or install the compatible version. Though, again, I think this is surprising behavior for a unit test.\r\n"
1486,'','DefaultConfigurationSource.GetConfiguration<T> called before IWantToRunBeforeConfiguration\nIn Version 5 reading of the logging config bypasses `IConfigurationSource` and goes directly to `ConfigurationManager.GetSection`\r\n\r\n--\r\n\r\nShould this ever happen?\r\nusing NSB host 4.0.3\r\n\r\n\tpublic class EndpointConfig : \r\n                  IConfigureThisEndpoint, AsA_Server,\r\n                  IWantCustomInitialization, UsingTransport<SqlServer>\r\n\t{\r\n\t\tpublic void Init()\r\n\t\t{\r\n\t\t\tConfigure.With()\r\n\t\t\t\t.DefaultBuilder()\r\n\t\t\t\t.FileShareDataBus(\r\n\t\t\t\t    ConfigurationManager.AppSettings["DatabusDirectory"])\r\n\t\t\t\t.UseInMemoryTimeoutPersister();\r\n\t\t}\r\n\t}\r\n\r\nstack trace\r\n\r\n\tNServiceBus.Core.dll!NServiceBus.Config.ConfigurationSource.DefaultConfigurationSource.NServiceBus.Config.ConfigurationSource.IConfigurationSource.GetConfiguration<NServiceBus.Config.Logging>() Line 13\r\n \tNServiceBus.Core.dll!NServiceBus.Configure.GetConfigSection<NServiceBus.Config.Logging>() Line 403 + 0x7e bytes\r\n \tNServiceBus.Host.exe!NServiceBus.Hosting.Windows.LoggingHandlers.Internal.ConfigureInternalLog4Net.ConfigureAppender(log4net.Appender.AppenderSkeleton appender) Line 94 + 0xc bytes\r\n \tNServiceBus.Host.exe!NServiceBus.Hosting.Windows.LoggingHandlers.Internal.ConfigureInternalLog4Net.ConfigureColoredConsoleAppender(log4net.Core.Level threshold) Line 87\r\n \tNServiceBus.Host.exe!NServiceBus.Hosting.Windows.LoggingHandlers.Internal.ConfigureInternalLog4Net.Lite() Line 16\r\n \tNServiceBus.Host.exe!NServiceBus.Hosting.Windows.LoggingHandlers.LiteLoggingHandler.NServiceBus.IConfigureLogging.Configure(NServiceBus.IConfigureThisEndpoint specifier) Line 20\r\n \tNServiceBus.Core.dll!NServiceBus.Hosting.GenericHost.PerformConfiguration() Line 73 + 0xac bytes\r\n \tNServiceBus.Core.dll!NServiceBus.Hosting.GenericHost.Start() Line 29\r\n \tNServiceBus.Host.exe!NServiceBus.Hosting.Windows.WindowsHost.Start() Line 56\r\n \tNServiceBus.Host.exe!NServiceBus.Hosting.Windows.Program.Main.AnonymousMethod__5(NServiceBus.Hosting.Windows.WindowsHost service) Line 76 + 0x12 bytes\r\n \tNServiceBus.Host.exe!Topshelf.Internal.ControllerDelegates<NServiceBus.Hosting.Windows.WindowsHost>.StartActionObject(object obj) Line 18\r\n \tNServiceBus.Host.exe!Topshelf.Internal.IsolatedServiceControllerWrapper<NServiceBus.Hosting.Windows.WindowsHost>.set_StartAction.AnonymousMethod__1(NServiceBus.Hosting.Windows.WindowsHost service) Line 65 + 0x24 bytes\r\n \tNServiceBus.Host.exe!Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost>..cctor.AnonymousMethod__1(Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost> sc) Line 35 + 0x32 bytes\r\n \tNServiceBus.Host.exe!Magnum.StateMachine.LambdaAction<Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost>>.Execute(Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost> instance, Magnum.StateMachine.Event event, object parameter) + 0x51 bytes\r\n \tNServiceBus.Host.exe!Magnum.StateMachine.EventActionList<Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost>>.Execute(Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost> stateMachine, Magnum.StateMachine.Event event, object parameter) + 0x17a bytes\r\n \tNServiceBus.Host.exe!Magnum.StateMachine.EventActionBase<Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost>>.Execute(Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost> instance, Magnum.StateMachine.Event event, object parameter) + 0x83 bytes\r\n \tNServiceBus.Host.exe!Magnum.StateMachine.State<Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost>>.RaiseEvent(Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost> instance, Magnum.StateMachine.BasicEvent<Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost>> eevent, object value) + 0x1ef bytes\r\n \tNServiceBus.Host.exe!Magnum.StateMachine.StateMachine<Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost>>.RaiseEvent(Magnum.StateMachine.Event raised) + 0x139 bytes\r\n \tNServiceBus.Host.exe!Topshelf.Internal.ServiceController<NServiceBus.Hosting.Windows.WindowsHost>.Start() Line 77\r\n \tNServiceBus.Host.exe!Topshelf.Internal.IsolatedServiceControllerWrapper<NServiceBus.Hosting.Windows.WindowsHost>.Start() Line 40\r\n \tNServiceBus.Host.exe!Topshelf.Internal.ServiceControllerProxy.Start() Line 47\r\n \t[Appdomain Transition]\r\n \tNServiceBus.Host.exe!Topshelf.Internal.FacadeToIsolatedServiceController<NServiceBus.Hosting.Windows.WindowsHost>.Start() Line 62\r\n \tNServiceBus.Host.exe!Topshelf.Internal.ServiceCoordinator.Start() Line 48 + 0x1b8 bytes\r\n \tNServiceBus.Host.exe!Topshelf.Internal.Hosts.ConsoleHost.Run() Line 53\r\n \tNServiceBus.Host.exe!Topshelf.Internal.Actions.RunAsConsoleAction.Do(Topshelf.Configuration.IRunConfiguration configuration) Line 33\r\n \tNServiceBus.Host.exe!Topshelf.Runner.Host(Topshelf.Configuration.IRunConfiguration configuration, string[] args) Line 70\r\n \tNServiceBus.Host.exe!NServiceBus.Hosting.Windows.Program.Main(string[] args) Line 139 + 0x11 bytes\r\n'
1485,'','NLog cannot accept values from config file\n--\r\n\r\nIn Version 5 the API is\r\n\r\n### Setup NLog \r\n```\r\nvar config = new LoggingConfiguration();\r\n\r\nvar consoleTarget = new ColoredConsoleTarget\r\n{\r\n    Layout = "${level:uppercase=true}|${logger}|${message}${onexception:${newline}${exception:format=tostring}}"\r\n};\r\nconfig.AddTarget("console", consoleTarget);\r\nconfig.LoggingRules.Add(new LoggingRule("*", LogLevel.Debug, consoleTarget));\r\n\r\nLogManager.Configuration = config;\r\n```\r\n### Add the NServicebus.Nlog nuget\r\n```\r\nInstall-Package NServiceBus.NLog\r\n```\r\n### Connect NServicebus to NLog\r\n```\r\nNLogConfigurator.Configure();\r\n```\r\n--\r\n\r\nCalls to SetLoggingLibrary.NLog() seem to merge configurations specified from nlog config files with the targets from NSB. This leaves processes dependent on the NSB host logging twice. \r\n\r\nSteps to reproduce:\r\n\r\n1. Add nlog configuration section to app.config\r\n2. Add console target and file target. \r\n3. Start the host\r\n\r\nLogging message will be written to two files and written to the console twice.'
1484,'','Setting Logging library should be done before calling Configure.With\nA warning will be logged if logging is set after `Configure.With` is called\r\n\r\n--\r\n\r\nLogging can bet set after Configure.With has been called. The end result is that any log events that happen inside `Configure.With` will not be redirected to where the user expects.\r\n'
1483,'',"If a Satellite fails to start shouldn't the whole endpoint be considered as failed to start?\nWe are depending on Gateway in some areas and have raised Issue #1477 related to the gateway failing to bind the channel to the HTTP subsystem. When the Gateway Satellite fails to start, the Satellite catches and logs the exception but doesn't fail the endpoint.\r\n\r\nUnderstandably this might be due to historical reasons, however as my immediate response if I find a Satellite hasn't started successfully I will restart the endpoint."
1481,'johnsimons',"When using DataBus with multiple subscribers that share the same storage causes exception\n**Problem**\r\n\r\nwe are setting up a Pub/Sub environment and have now the scenario, that the publisher wants to send a file via the DataBus capabilities of NSB.\r\nThere are two subscribers which simultaneously receive the event, so that both are accessing the file in the configured DataBus storage in parallel. For one subscriber this works fine, but the other gets an error (it’s more or less random which of both subscriber fails):\r\n \r\n\t[27.08.2013 13:12:21,346] [Worker.14] [Transactional.TransactionalTransport] Failed raising 'transport message received' event for message with ID=bf287a2a-198a-47b3-8084-4cec75b079ea\\88910\r\n\tSystem.IO.IOException: The process cannot access the file 'c:\\temp\\2013-08-27_01\\bd433df5-2de0-4011-a080-c2724d5a47ee' because it is being used by another process.\r\n\t   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder childBuilder, TransportMessage msg) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1300\r\n\t   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1220\r\n\t   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\n\t   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 480\r\n \r\n**Proposed Fix**\r\nThe file should be opened in read share mode with no lock\r\n"
1480,'','Deploy new authenticode certificate\nExisting cert expires in october. New one is located in dropbox/nservicebus/development/code signing'
1479,'',"NHibernate persister doesn't work with Oracle 11g database\nIt just created simply sample application that use saga and use Oracle 11g XE as saga and timeout persistence storage. I received the following exception:\r\n\r\n2013-08-27 12:02:55,938 [45] INFO  NServiceBus.Unicast.Transport.TransportReceiver [(null)] <(null)> - Failed to process message\r\nNServiceBus.Unicast.Transport.TransportMessageHandlingFailedException: An exception was thrown by the message handler. ---> NHibernate.TransactionException: Begin failed with SQL exception ---> System.InvalidOperationException: Connection is already part of a local or a distributed transaction\r\n   at Oracle.DataAccess.Client.OracleConnection.BeginTransaction(IsolationLevel isolationLevel)\r\n   at Oracle.DataAccess.Client.OracleConnection.BeginDbTransaction(IsolationLevel isolationLevel)\r\n   at System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel isolationLevel)\r\n   at NHibernate.Transaction.AdoTransaction.Begin(IsolationLevel isolationLevel)\r\n   --- End of inner exception stack trace ---\r\n   at NHibernate.Transaction.AdoTransaction.Begin(IsolationLevel isolationLevel)\r\n   at NHibernate.AdoNet.ConnectionManager.BeginTransaction(IsolationLevel isolationLevel)\r\n   at NHibernate.Impl.SessionImpl.BeginTransaction(IsolationLevel isolationLevel)\r\n   at NServiceBus.UnitOfWork.NHibernate.UnitOfWorkManager.GetCurrentSession() in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\nhibernate\\NServiceBus.NHibernate\\UnitOfWork\\NHibernate\\UnitOfWorkManager.cs:line 20\r\n   at NServiceBus.SagaPersisters.NHibernate.SagaPersister.Save(IContainSagaData saga) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\nhibernate\\NServiceBus.NHibernate\\SagaPersisters\\NHibernate\\SagaPersister.cs:line 20\r\n   at NServiceBus.Sagas.SagaDispatcherFactory.<>c__DisplayClass4.<GetDispatcher>b__0() in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Sagas\\SagaDispatcherFactory.cs:line 83\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass2f.<DispatchMessageToHandlersBasedOnType>b__2a(Action dispatch) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1095\r\n   --- End of inner exception stack trace ---\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass2f.<DispatchMessageToHandlersBasedOnType>b__2a(Action dispatch) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1101\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Unicast.UnicastBus.DispatchMessageToHandlersBasedOnType(IBuilder builder, Object toHandle) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1090\r\n   at NServiceBus.Unicast.UnicastBus.HandleMessage(IBuilder builder, TransportMessage m) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1008\r\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder childBuilder, TransportMessage msg) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1226\r\n\r\nAccording to this post (http://stackoverflow.com/questions/3765499/nhibernate-transactionscope-issue-with-oracle-11g) ADO.NET transaction should not be mixed with TransactionScope"
1478,'johnsimons','Remove hard coded 20 sec limit on `IWantToRunWhenBusStartsAndStops.Stop`\nIn v4 `IWantToRunWhenBusStartsAndStops.Stop` is only allowed to run for a maximum of 20 seconds.\r\n\r\nThis limitation may not allow tasks to be completed successfully before shutting down the Windows service.\r\n\r\nAs such this timeout has been removed.'
1477,'',"HttpChannelReceiver uses HttpListener.Stop instead of HttpListener.Close\nRelated to #1385\r\n\r\nSo here https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Gateway/Channels/Http/HttpChannelReceiver.cs#L53 we use `HttpListener.Stop` which \r\n\r\n> Causes this instance to stop receiving incoming requests.\r\n\r\nHowever this does no release the port.\r\n\r\nWe should be calling `HttpListener.Close` which \r\n\r\n> Shuts down the HttpListener.\r\n\r\nThe below is the error raised by  @michaelnoonan in issue #1385\r\n\r\nNote the part\r\n\r\n> System.Net.HttpListenerException: Failed to listen on prefix 'https://gateway-ausmquwb02.ebusa.com:443/gameinformerweb/' because it conflicts with an existing registration on the machine.\r\n\r\n### The startup\r\n```\r\n2013-08-27 13:54:08.1844|31|Debug|UnicastBus|Starting NServiceBus.Satellites.SatelliteLauncher, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n2013-08-27 13:54:08.2000|31|Debug|SatelliteLauncher|Starting 1/5 'NServiceBus.Timeout.Hosting.Windows.TimeoutMessageProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:08.2000|31|Debug|SatelliteLauncher|Starting satellite NServiceBus.Timeout.Hosting.Windows.TimeoutMessageProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c for gameinformerweb.Timeouts@AUSMQUWB02.\r\n2013-08-27 13:54:08.2000|31|Info|ReceivePerformanceDiagnostics|NServiceBus performance counter for # of msgs successfully processed / sec is not set up correctly, no statistics will be emitted for the gameinformerweb.Timeouts queue. Execute the Install-NServiceBusPerformanceCounters cmdlet to create the counter.\r\n2013-08-27 13:54:08.2000|12|Debug|SatelliteLauncher|Starting 3/5 'NServiceBus.SecondLevelRetries.SecondLevelRetriesProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:08.2000|12|Debug|SatelliteLauncher|Starting satellite NServiceBus.SecondLevelRetries.SecondLevelRetriesProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c for gameinformerweb.Retries@AUSMQUWB02.\r\n2013-08-27 13:54:08.2000|12|Info|ReceivePerformanceDiagnostics|NServiceBus performance counter for # of msgs successfully processed / sec is not set up correctly, no statistics will be emitted for the gameinformerweb.Retries queue. Execute the Install-NServiceBusPerformanceCounters cmdlet to create the counter.\r\n2013-08-27 13:54:08.2156|31|Info|SatelliteLauncher|Started 1/5 'NServiceBus.Timeout.Hosting.Windows.TimeoutMessageProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:08.2156|31|Debug|SatelliteLauncher|Starting 2/5 'NServiceBus.Timeout.Hosting.Windows.TimeoutDispatcherProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:08.2156|31|Debug|SatelliteLauncher|Starting satellite NServiceBus.Timeout.Hosting.Windows.TimeoutDispatcherProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c for gameinformerweb.TimeoutsDispatcher@AUSMQUWB02.\r\n2013-08-27 13:54:08.2156|31|Info|ReceivePerformanceDiagnostics|NServiceBus performance counter for # of msgs successfully processed / sec is not set up correctly, no statistics will be emitted for the gameinformerweb.TimeoutsDispatcher queue. Execute the Install-NServiceBusPerformanceCounters cmdlet to create the counter.\r\n2013-08-27 13:54:08.2156|12|Info|SatelliteLauncher|Started 3/5 'NServiceBus.SecondLevelRetries.SecondLevelRetriesProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:08.2156|12|Debug|SatelliteLauncher|Starting 4/5 'NServiceBus.Gateway.Sending.GatewaySender, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:08.2156|12|Debug|SatelliteLauncher|Starting satellite NServiceBus.Gateway.Sending.GatewaySender, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c for gameinformerweb.gateway@AUSMQUWB02.\r\n2013-08-27 13:54:08.2156|12|Info|ReceivePerformanceDiagnostics|NServiceBus performance counter for # of msgs successfully processed / sec is not set up correctly, no statistics will be emitted for the gameinformerweb.gateway queue. Execute the Install-NServiceBusPerformanceCounters cmdlet to create the counter.\r\n2013-08-27 13:54:08.2312|12|Info|SatelliteLauncher|Started 4/5 'NServiceBus.Gateway.Sending.GatewaySender, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:08.2312|12|Debug|SatelliteLauncher|Starting 5/5 'NServiceBus.Gateway.Receiving.GatewayReceiver, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:08.2312|12|Debug|SatelliteLauncher|Starting satellite NServiceBus.Gateway.Receiving.GatewayReceiver, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c for .\r\n2013-08-27 13:54:08.2312|12|Debug|SatelliteLauncher|No input queue configured for NServiceBus.Gateway.Receiving.GatewayReceiver, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n2013-08-27 13:54:08.2312|32|Debug|UnicastBus|Starting NServiceBus.Distributor.ReadyMessages.ReadyMessageSender, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n2013-08-27 13:54:08.2312|32|Debug|UnicastBus|Started NServiceBus.Distributor.ReadyMessages.ReadyMessageSender, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n2013-08-27 13:54:08.2312|11|Debug|TimeoutPersisterReceiver|Polling for timeouts at 27/08/2013 1:54:08 PM.\r\n2013-08-27 13:54:08.2312|11|Debug|TimeoutPersisterReceiver|Polling next retrieval is at 27/08/2013 1:55:08 PM.\r\n2013-08-27 13:54:08.2468|31|Info|SatelliteLauncher|Started 2/5 'NServiceBus.Timeout.Hosting.Windows.TimeoutDispatcherProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:08.2468|12|Error|SatelliteLauncher|Satellite NServiceBus.Gateway.Receiving.GatewayReceiver, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c failed to start.|EXCEPTION OCCURRED: System.Exception: Failed to start listener for https://gateway-ausmquwb02.ebusa.com/gameinformerweb/ make sure that you have admin privileges ---> System.Net.HttpListenerException: Failed to listen on prefix 'https://gateway-ausmquwb02.ebusa.com:443/gameinformerweb/' because it conflicts with an existing registration on the machine.\r\n   at System.Net.HttpListener.AddAllPrefixes()\r\n   at System.Net.HttpListener.Start()\r\n   at NServiceBus.Gateway.Channels.Http.HttpChannelReceiver.Start(String address, Int32 numWorkerThreads) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Gateway\\Channels\\Http\\HttpChannelReceiver.cs:line 36\r\n   --- End of inner exception stack trace ---\r\n   at NServiceBus.Gateway.Channels.Http.HttpChannelReceiver.Start(String address, Int32 numWorkerThreads) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Gateway\\Channels\\Http\\HttpChannelReceiver.cs:line 40\r\n   at NServiceBus.Gateway.Receiving.IdempotentChannelReceiver.Start(Channel channel, Int32 numWorkerThreads) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Gateway\\Receiving\\IdempotentChannelReceiver.cs:line 34\r\n   at NServiceBus.Gateway.Receiving.GatewayReceiver.Start() in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Gateway\\Receiving\\GatewayReceiver.cs:line 71\r\n   at NServiceBus.Satellites.SatelliteLauncher.StartSatellite(SatelliteContext ctx) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Satellites\\SatelliteLauncher.cs:line 107\r\n2013-08-27 13:54:08.2468|16|Debug|UnicastBus|Starting NServiceBus.AutomaticSubscriptions.AutoSubscriber, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n2013-08-27 13:54:08.2468|23|Debug|UnicastBus|Starting OpsDash.Infrastructure.ApplicationServices.ApplicationHeartbeat, GameInformer.Website, Version=1.0.9802.369, Culture=neutral, PublicKeyToken=null.\r\n2013-08-27 13:54:08.2468|9|Debug|UnicastBus|Starting OpsDash.Infrastructure.ApplicationServices.ErrorHandling.ErrorHandler, GameInformer.Website, Version=1.0.9802.369, Culture=neutral, PublicKeyToken=null.\r\n2013-08-27 13:54:08.5744|12|Info|SatelliteLauncher|Started 5/5 'NServiceBus.Gateway.Receiving.GatewayReceiver, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:08.5900|31|Debug|UnicastBus|Started NServiceBus.Satellites.SatelliteLauncher, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n2013-08-27 13:54:08.5900|16|Debug|UnicastBus|Started NServiceBus.AutomaticSubscriptions.AutoSubscriber, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n```\r\n### The shutdown\r\n\r\n```\r\n2013-08-27 13:54:40.8041|5|Info|GameInformerWebsite|Application_End...\r\n2013-08-27 13:54:40.8041|5|Info|UnicastBus|Initiating shutdown.\r\n2013-08-27 13:54:40.8197|5|Debug|UnicastBus|Ensuring IWantToRunAtStartup.Start has been called.\r\n2013-08-27 13:54:40.8197|5|Debug|UnicastBus|All IWantToRunAtStartup.Start should have completed now.\r\n2013-08-27 13:54:40.8197|14|Error|HttpChannelReceiver|Gateway failed to receive incoming request.|EXCEPTION OCCURRED: System.Net.HttpListenerException (0x80004005): The I/O operation has been aborted because of either a thread exit or an application request\r\n   at System.Net.HttpListener.GetContext()\r\n   at NServiceBus.Gateway.Channels.Http.HttpChannelReceiver.HttpServer(Object o) in c:\\BuildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Gateway\\Channels\\Http\\HttpChannelReceiver.cs:line 154\r\n2013-08-27 13:54:40.8197|40|Debug|UnicastBus|Stopping NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.StorageInitializer, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n2013-08-27 13:54:40.8197|40|Debug|UnicastBus|Stopped NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.StorageInitializer, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n2013-08-27 13:54:40.8197|41|Debug|UnicastBus|Stopping NServiceBus.Satellites.SatelliteLauncher, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n2013-08-27 13:54:40.8197|25|Debug|SatelliteLauncher|Stopping 1/5 'NServiceBus.Timeout.Hosting.Windows.TimeoutMessageProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:40.8197|25|Info|SatelliteLauncher|Stopped 1/5 'NServiceBus.Timeout.Hosting.Windows.TimeoutMessageProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:40.8197|25|Debug|SatelliteLauncher|Stopping 2/5 'NServiceBus.Timeout.Hosting.Windows.TimeoutDispatcherProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:40.8197|12|Debug|SatelliteLauncher|Stopping 3/5 'NServiceBus.SecondLevelRetries.SecondLevelRetriesProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:40.8197|12|Info|SatelliteLauncher|Stopped 3/5 'NServiceBus.SecondLevelRetries.SecondLevelRetriesProcessor, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:40.8197|12|Debug|SatelliteLauncher|Stopping 4/5 'NServiceBus.Gateway.Sending.GatewaySender, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:40.8197|12|Info|SatelliteLauncher|Stopped 4/5 'NServiceBus.Gateway.Sending.GatewaySender, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:40.8197|12|Debug|SatelliteLauncher|Stopping 5/5 'NServiceBus.Gateway.Receiving.GatewayReceiver, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n2013-08-27 13:54:40.8197|12|Info|GatewayReceiver|Receiver is shutting down\r\n2013-08-27 13:54:40.8197|12|Info|GatewayReceiver|Stopping channel - NServiceBus.Gateway.Receiving.IdempotentChannelReceiver\r\n2013-08-27 13:54:40.8197|12|Info|GatewayReceiver|Receiver shutdown complete\r\n2013-08-27 13:54:40.8197|12|Info|SatelliteLauncher|Stopped 5/5 'NServiceBus.Gateway.Receiving.GatewayReceiver, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' satellite\r\n```\r\n"
1476,'andreasohlund','Add Configure.Component overload\nMake overload easier to discover over `Instance.Configurer.ConfigureComponent<T>(Func<IBuilder,T>, DependencyLifecycle)`\r\n\r\nThis is especially handy when using `IManageUnitsOfWork`\r\n\r\nSee [details](http://tech.groups.yahoo.com/group/nservicebus/message/20325)'
1475,'',"ActiveMQ Transport consider upgrade 1.6\nThere is a new version of the ActiveMQ client released under 1.6 which addresses several issues. The problem is that we are currently using a custom build of 1.5.6 but not all issues have been addressed by the ActiveMQ Team or only partially fix. There are actually to solution which we could try out:\r\n\r\n1. Don't trust the ActiveMQ team, switch to 1.6 branch and reapply and check all custom added stuff by @remogloor\r\n2. Partially trust ActiveMQ team, switch to 1.6, rerun everything including load testing in staging environment and only switch back to point 1 if necessary\r\n\r\nThe problem is that we have currently no priority by our customer to do either 1. or 2. Hopefully our NMS pain will grow so large that we can finally address those issues but I opened that issue anyway in case someone wants to do it."
1474,'',"ActiveMQ transport adds dependency to ActiveMQ NMS via Nuget which is dangerous\nthe current state with activemq and nsb is the following\r\nwhen you add the nuget package it references activemq nms nuget\r\nthis is pulled down and added as a refeerence\r\nBUT we have embedded a hacked version of NMS which supports DTC operations\r\nwith the reference added simon cropps embedded resource loader will pick the referenced one in the application base directory which doesn't properly work with NSB"
1473,'sfarmar','NHibernate integration \nSławomir Rosiek (rosieks@hotmail.com) from says:\r\n\r\n\r\nDocumention for NHibernate integration is out of date. I receive InvalidOperationException with message: No NHibernate properties found in your config file (in NSB 4.0.3) \r\n\r\n\r\nSent From URL: http://particular.net/articles/relational-persistence-using-nhibernate \r\nTimestamp: Fri Aug 23 2013 14:07:59 GMT+0200 (Central European Daylight Time) \r\n\r\nPage:\thttp://particular.net/articles/relational-persistence-using-nhibernate\r\nPhone:\t\r\nTime:\t08/23/2013 12:10:10'
1472,'','Upgrade to RavenDB 2.5.0\n* Update to the latest official binaries\r\n* Make sure to include the license file (in our dropbox folder)'
1470,'','NSB checks RavenDB version for testing\nWe have a couple of build agents that run RavenDb v1. We run Saga tests on these machines, but despite disabling Raven persistence (Features.Disable IIRC) before calling Tests.Initialize NSB will throw saying that Raven v1 is installed. Can you please disable that check for testing scenarios? '
1468,'','Revisit the use of public static property Local in TransportMessage class\nCurrently the class `TransportMessage` contains the following public static property.\r\n\r\n        /// <summary>\r\n        /// Get the address of this endpoint.\r\n        /// </summary>\r\n        public static Address Local { get; private set; }\r\n\r\nTherefore, I cannot use this in a IMessage class. Also, while I see usages for Address.Local, I am not finding usages of `TransportMessage.Local`\r\n \r\nMessages that contain static properties currently throws unhandled exception. See related issue #1467 '
1467,'','Unhandled exception is thrown when an endpoint loads a message class that contains a static member\nSteps to reproduce:\r\n\r\n1. Create an NSB endpoint\r\n2. Add the following message class\r\n\r\n      ```` c#\r\n      namespace MyEndpoint\r\n     {\r\n       using NServiceBus;\r\n       public class SomeMessage : IMessage\r\n       {\r\n          public SomeClass Message { get; set; }\r\n       }\r\n       public class SomeClass\r\n       {\r\n         public static string Local { get; private set; }\r\n       }\r\n     }\r\n````\r\n3. Start the endpoint\r\n4. Notice the following exception\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1011210/b64a9b6c-0b57-11e3-874d-07ed1cd0e564.png)\r\n'
1466,'','Throw better exception when publisher/subscriber are using different transports\nUse case:\r\nWhen trying to use different transports for endpoints, for example, the Publisher is using Msmq and the subscriber is using Sql, the following exception is thrown:\r\n\r\nError :\r\n\r\n````\r\n2013-08-21 13:34:23.6585 ERROR Failed to subscribe to NServiceBus.Unicast.Queuing.QueueNotFoundException: Failed to send message to address: [AAA] —→ System.Data.SqlClient.SqlException: Invalid object name ‘AAA’.\r\nat System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\nat System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\nat System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\nat System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler,TdsParserStateObject stateObj, Boolean& dataReady)\r\nat System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, Run Behavior runBehavior, String resetOptionsString)\r\nat System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, SqlDataReader ds)\r\n````\r\n\r\nFor example, would something like below be better?\r\n````\r\nFailed to subscribe to endpoint x: could not contact endpoint using transport<t>. Communication between endpoints that use different transports is not supported.\r\n````'
1464,'',"Relative database paths for Saga persistence not resolved when running as a Windows Service\nHi\r\n\r\nWe've uncovered a scenario whereby if you are running Saga's within the NServiceBus host with relative (file based) paths to databases (in this instance, SQLite),using the NHibernate Saga persister, the services do not resolve the database paths correctly.  This leads to the service stopping, and the following error being logged (visible in the event viewer).\r\n\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: The following critical error was encountered by NServiceBus:\r\nRepeated failures when fetching timeouts from storage, endpoint will be terminated.\r\nNServiceBus is shutting down.\r\n\r\nThis is because the current working directory defaults to c:\\windows\\system32 when running as a windows service.\r\n\r\nI have created a small project to demonstrate this issue.  If you build, install and run the service, you will see that it stops running after a few minutes.\r\n\r\nA suggestion from John Simons that as a work around we could set the current working directory somewhere within the application (EndpointConfig seemed like a good place) does work.\r\n\r\nI have been using 4.0.3 to reproduce this problem.\r\n\r\nThanks\r\n\r\nRichard\r\n"
1463,'','Profiles what are they, how do we get there\nAbout a week ago I posted a simple question on the discussion list:\r\n> Profiles, does anyone uses them?   \r\n\r\nsee [original here](http://tech.groups.yahoo.com/group/nservicebus/message/20175)\r\n\r\nAnd the answers started coming :birthday: \r\n\r\n### Why did I raise this?\r\nMostly because I see profiles as just code that gets executed if present.\r\nWhat I mean is that profiles can be replaced with drop-in assemblies, and as we know by default NServiceBus will scan all assemblies and execute the code.\r\nSo we could just have a `LiteProfile.dll` that is added to the bin folder in development, eg:\r\n```c#\r\npublic class LiteProfile : INeedInitialization\r\n{\r\n    public void Init()\r\n    {\r\n        InMemoryPersistence.UseAsDefault();\r\n\r\n        Configure.Instance.AsMasterNode();\r\n        Configure.Instance.InMemoryFaultManagement();\r\n\r\n        WindowsInstallerRunner.RunInstallers = true;\r\n    }\r\n}\r\n```\r\nThe benefits I see with this approach:\r\n- More discoverable (they just files);\r\n- You can quickly see what "profiles" are being used (look at the file system) vs having to look in windows service properties:\r\n![image](https://f.cloud.github.com/assets/122651/999091/ffa1261c-0a1e-11e3-823c-0b776efde78a.png)\r\n- **It also works for self hosting** :wink: \r\n\r\n#### Obviously this solution still has drawbacks\r\n- Order is unpredictable, so very hard to override a profile with another profile.  \r\n**This has actually been fixed in v4 so now, if you execute `NServiceBus.Host.exe MyProfileA MyProfileB MyProfileC`, the profile handlers are executed in order, MyProfileAHandler then MyProfileBHandler and finally MyProfileCHandler**\r\n- You don\'t know what it does unless you look at the code (or name your files with a very long and descriptive name!)\r\n\r\n### Annoyances with profiles\r\nIf you ever decide to write your own profile, eg:\r\n```c#\r\npublic class MyProfileA : IProfile\r\n{\r\n        \r\n}\r\n\r\npublic class MyProfileAHandler : IHandleProfile<MyProfileA>\r\n{\r\n    public void ProfileActivated()\r\n    {\r\n        Console.Out.WriteLine("MyProfileA");\r\n    }\r\n}\r\n```\r\nThis code will fail with the following exception:\r\n```\r\nSystem.Exception was unhandled by user code\r\n  HResult=-2146233088\r\n  Message=Could not find a class which implements \'IConfigureLogging\'. If you\'ve specified your own profile, try implementing \'IConfigureLoggingForProfile<T>\' for your profile.\r\n  Source=NServiceBus.Core\r\n  StackTrace:\r\n       at NServiceBus.Hosting.Profiles.ProfileManager.GetImplementor[T](Type openGenericType) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Hosting\\Profiles\\ProfileManager.cs:line 90\r\n       at NServiceBus.Hosting.Profiles.ProfileManager.GetLoggingConfigurer() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Hosting\\Profiles\\ProfileManager.cs:line 63\r\n       at NServiceBus.Hosting.GenericHost.PerformConfiguration() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 72\r\n       at NServiceBus.Hosting.GenericHost.Start() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 27\r\n       at NServiceBus.Hosting.Windows.WindowsHost.Start() in c:\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting.Windows\\WindowsHost.cs:line 55\r\n       at NServiceBus.Hosting.Windows.Program.<>c__DisplayClassd.<Main>b__5(WindowsHost service) in c:\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting.Windows\\Program.cs:line 76\r\n       at Topshelf.Internal.ControllerDelegates`1.StartActionObject(Object obj) in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\ControllerDelegates.cs:line 18\r\n       at Topshelf.Internal.IsolatedServiceControllerWrapper`1.<>c__DisplayClass2.<set_StartAction>b__1(TService service) in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\IsolatedServiceControllerWrapper.cs:line 65\r\n       at Topshelf.Internal.ServiceController`1.<.cctor>b__1(ServiceController`1 sc) in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\ServiceController.cs:line 35\r\n       at Magnum.StateMachine.LambdaAction`1.Execute(T instance, Event event, Object parameter) in :line 0\r\n       at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter) in :line 0\r\n  InnerException: \r\n```\r\nWhy do I also need to implement `IConfigureLoggingForProfile<MyProfileA>` ?  \r\nIt feels strange and unnecessary if I\'m happy with the defaults.'
1462,'','Production profile is not required anymore\nThe current production profile has the following code:\r\n```c#\r\nif (!Configure.Instance.Configurer.HasComponent<IManageMessageFailures>())\r\n{\r\n       Configure.Instance.MessageForwardingInCaseOfFault();\r\n}\r\n```\r\n\r\nThe thing is that the same code is already the default, see https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/ConfigureFaultsForwarder.cs#L83\r\n\r\nAlso,\r\nNow with the addition of Features and its `IsEnabledByDefault` flag, see [here](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Features/Feature.cs#L33), the Production profile could be completely removed :smile: '
1461,'','Move distributor related configuration out of UnicastBusConfig\nCurrently, configuration relating to the distributor is in \r\n\r\n1. MasterNodeConfig\r\n2. UnicastBusConfig\r\n\r\nSeparate it out of `UnicastBusConfig`'
1460,'','Allow the default profile to be changed\nSince users can define their own production profiles we should provide a way for those profiles to be the default.\r\n\r\nSee: http://tech.groups.yahoo.com/group/nservicebus-dev/message/5597'
1459,'',"Azure Service Bus Topic Subscription Filter Rules are Too Specific\nWhen using the Azure Service Bus transport for Pub/Sub, the topic subscription is created with a filter rule.  This filter rule includes the assembly name, version, culture, and public key token (if any) of the assembly that defines the message.  For instance:\r\n\r\n\t[NServiceBus.EnclosedMessageTypes] LIKE 'LHPT.Backend.ReportRecorder.Messages.IRawDataReportMessage, LHPT.Backend.ReportRecorder.Messages, Version=4.0.0.581, Culture=neutral, PublicKeyToken=null%' OR\r\n\t[NServiceBus.EnclosedMessageTypes] LIKE '%LHPT.Backend.ReportRecorder.Messages.IRawDataReportMessage, LHPT.Backend.ReportRecorder.Messages, Version=4.0.0.581, Culture=neutral, PublicKeyToken=null%' OR [NServiceBus.EnclosedMessageTypes] LIKE '%LHPT.Backend.ReportRecorder.Messages.IRawDataReportMessage, LHPT.Backend.ReportRecorder.Messages, Version=4.0.0.581, Culture=neutral, PublicKeyToken=null' OR [NServiceBus.EnclosedMessageTypes] = 'LHPT.Backend.ReportRecorder.Messages.IRawDataReportMessage, LHPT.Backend.ReportRecorder.Messages, Version=4.0.0.581, Culture=neutral, PublicKeyToken=null'\r\n\r\nThe filter prevents the subscriber from receiving messages from a publisher that references anything but the same assembly.  As a work around we manually edit these rules to be less strict.  For instance:\r\n\r\n\t[NServiceBus.EnclosedMessageTypes] LIKE 'LHPT.Backend.ReportRecorder.Messages.IRawDataReportMessage%' OR\r\n\t[NServiceBus.EnclosedMessageTypes] LIKE '%LHPT.Backend.ReportRecorder.Messages.IRawDataReportMessage%' OR \r\n\t[NServiceBus.EnclosedMessageTypes] LIKE '%LHPT.Backend.ReportRecorder.Messages.IRawDataReportMessage' OR \r\n\t[NServiceBus.EnclosedMessageTypes] = 'LHPT.Backend.ReportRecorder.Messages.IRawDataReportMessage'\r\n\r\nHowever, it would be preferable if the rule that is created by default would allow for different versions of the message definition assembly to be used."
1458,'','Feature Request: ReturnToSourceQueue for Azure Service Bus\nThe ReturnToSourceQueue.exe utility is fantastic for re-queueing messages that wound up in the error queue.  It would be wonderful to have an equivalent tool for moving messages from an Azure Service Bus error queue back to the destination queue, as well as moving deadletter messages back to the active queue.'
1457,'mauroservienti','Author message lifecycle article\nSee initial details here: https://github.com/Particular/Website.Backend/issues/15'
1456,'mauroservienti','Author message pipeline article \nAn article containing and explaining a diagram illustration which shows the steps a message goes through when coming in and going out, plus additional examples on extensibility points and some sample code.'
1455,'mauroservienti','Author comparison table between transports \nFollow-up on #1454, including features, and pros and cons of each.'
1454,'mauroservienti','Author per-transport article\nSee, for example, article for [Windows Azure tranport](http://particular.net/articles/windows-azure-transport), including details on [config](http://particular.net/blog/nservicebus-v4.0-release-notes#transports), and referencing the VideoStore samples per transport'
1453,'','SpringObjectBuilder.scope\nSo `SpringObjectBuilder.scope` is not disposed inside `SpringObjectBuilder.Dispose`\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/impl/ObjectBuilder/ObjectBuilder.Spring/SpringObjectBuilder.cs#L214\r\n\r\nIs there a reason for this?'
1452,'','Better exception handling in RabbitMQ ConnectionStringParser\n * the catch was redundant since the message can be derived from the stack trace\r\n * it did not add the inner exception which would obscure the debugging experience\r\n\r\nFixed here https://github.com/Particular/NServiceBus/commit/f3d93a4e9f0a843867548574b44ff9910591c566'
1451,'mookid8000','Load message handlers\nTo get the Sql Server sample to work (in particular, feedback in the UI), the message handlers need to get loaded in the web client configuration.'
1450,'','Move the transport role handlers into the core\nWith the split of azure starting files can no longer be shared by linking so we need to push "TransportRoleHandler" and "UsingTransport" down to nsb.core'
1449,'','When hosting on premise with "AzureServiceBus" transport, the "ReplyTo" address does not appear to be set correctly.\nWhen hosting on premise with "AzureServiceBus" transport, the "ReplyTo" address does not appear to be set correctly.\r\n\r\nNSB v4.0.2\r\n\r\nWhen receiving a command from the queue, the handler throws the following exception:\r\n\r\n2013-08-16 09:22:13,537 [16] INFO  NServiceBus.Unicast.Transport.TransportReceiver [(null)] <(null)> - Failed to process message\r\nNServiceBus.Unicast.Queuing.QueueNotFoundException: Exception of type \'NServiceBus.Unicast.Queuing.QueueNotFoundException\' was thrown.\r\n   at NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusMessageQueueSender.Send(TransportMessage message, QueueClient sender, Address address) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\azure\\NServiceBus.Azure\\Transports\\ServiceBus\\AzureServiceBusMessageQueueSender.cs:line 79\r\n   at NServiceBus.Unicast.Queuing.Azure.ServiceBus.SendResourceManager.Commit(Enlistment enlistment) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\azure\\NServiceBus.Azure\\Transports\\ServiceBus\\SendResourceManager.cs:line 23\r\n   at System.Transactions.VolatileEnlistmentCommitting.EnterState(InternalEnlistment enlistment)\r\n   at System.Transactions.TransactionStateCommitted.EnterState(InternalTransaction tx)\r\n   at System.Transactions.PreparingEnlistment.Prepared()\r\n   at System.Transactions.VolatileEnlistmentPreparing.EnterState(InternalEnlistment enlistment)\r\n   at System.Transactions.TransactionStateVolatilePhase1.EnterState(InternalTransaction tx)\r\n   at System.Transactions.CommittableTransaction.Commit()\r\n   at System.Transactions.TransactionScope.InternalDispose()\r\n   at System.Transactions.TransactionScope.Dispose()\r\n   at NServiceBus.Unicast.Transport.TransportReceiver.TryProcess(TransportMessage message) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\Transport\\TransportReceiver.cs:line 238\r\n   at NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusDequeueStrategy.TryProcessMessage(Object obj) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\azure\\NServiceBus.Azure\\Transports\\ServiceBus\\AzureServiceBusDequeueStrategy.cs:line 150\r\n\r\nI am not at all sure where the "QueueNotFoundException" is coming from - the handler has received the message. Debugging and looking at the stack trace, the problem seems to arise after the handler logic is run and when NSB is trying to de-queue the message.\r\n\r\nThe only thing I can think is that the command has an odd Reply To address. The address is of the form "queue@server" and not of the form "queue@Endpoint=sb://myNamespace.servicebus.windows.net/;SharedSecretIssuer=owner;SharedSecretValue=mySharedSecretValue" as I would expect for an Azure Service Bus message. However, I am not explicitly trying to reply to the command in my code so don\'t really see how this matters.\r\n\r\nMore info: "http://tech.groups.yahoo.com/group/nservicebus/message/20211"'
1448,'','When hosting on premise with "AzureServiceBus" transport and not explicitly supplying timeout or subscription providers causes errors.\nWhen hosting on premise with "AzureServiceBus" transport and not explicitly supplying timeout or subscription providers causes errors.\r\n\r\nNSB v4.0.2\r\n\r\nUnhandled Exception: System.Runtime.Serialization.SerializationException: Type \'Autofac.Core.DependencyResolutionException\' in assembly \'NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\' is not marked as serializable.\r\n   at Topshelf.Internal.ServiceControllerProxy.Start()\r\n   at Topshelf.Internal.ServiceCoordinator.Start() in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\ServiceCoordinator.cs:line 54\r\n   at Topshelf.Internal.Hosts.ConsoleHost.Run() in c:\\Projects\\TopShelfForNSB\\src\\Topshelf\\Internal\\Hosts\\ConsoleHost.cs:line 53\r\n   at NServiceBus.Hosting.Windows.Program.Main(String[] args) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\hosting\\NServiceBus.Hosting.Windows\\Program.cs:line 139\r\n\r\nThis is actually hiding an underlying exception, starting in the debugger yields the following information:\r\n\r\nException:\r\nMicrosoft.WindowsAzure.Storage.StorageException - "Unable to connect to the remote server"\r\nInner exception:\r\nSystem.Net.WebException - "Unable to connect to the remote server"\r\nInner exception:\r\nSystem.Net.Sockets.SocketException - "No connection could be made because the target machine actively refused it 127.0.0.1:10002"\r\n\r\nWhat is happening is that NSB is automatically trying to use Azure Table Storage as a persistence mechanism. If you are running on premise (even if using Azure Service Bus transport) this is surprising, I would expect NSB to default to Raven as it does with other on premise scenarios.'
1447,'','When hosting on premise with "AzureServiceBus" transport and using "Configure.With(Assembly[])" causes error if "NServiceBus.Azure.dll" not in the list of assemblies to scan.\nWhen hosting on premise with "AzureServiceBus" transport and using "Configure.With(Assembly[])" causes error if "NServiceBus.Azure.dll" not in the list of assemblies to scan.\r\n\r\nNSB v4.0.2\r\n\r\nUnhandled Exception: System.InvalidOperationException: We couldn\'t find a IConfigureTransport implementation for your selected transport: AzureServiceBus\r\n   at NServiceBus.TransportReceiverConfig.CreateTransportConfigurer(Type transportDefinitionType) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\Transport\\Config\\TransportReceiverConfig.cs:line 83\r\n   at NServiceBus.Hosting.Roles.Handlers.TransportRoleHandler.ConfigureRole(IConfigureThisEndpoint specifier) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\hosting\\NServiceBus.Hosting.Windows\\Roles\\Handlers\\TransportRoleHandler.cs:line 17\r\n   at NServiceBus.Hosting.Roles.RoleManager.ConfigureBusForEndpoint(IConfigureThisEndpoint specifier) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Hosting\\Roles\\RoleManager.cs:line 72\r\n   at NServiceBus.Hosting.GenericHost.PerformConfiguration() in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 125\r\n   at NServiceBus.Hosting.GenericHost.Start() in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 27\r\n   at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter) in :line 0   at NServiceBus.Hosting.Windows.Program.Main(String[] args) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\hosting\\NServiceBus.Hosting.Windows\\Program.cs:line 145'
1446,'',"Error Downloading 3.2.8 from GitHub\nHello\r\n\r\nWe're trying to download NServiceBus.3.2.8.zip from;\r\n\r\nhttps://github.com/Particular/NServiceBus/downloads\r\n\r\nWe keep receiving an error saying file not found."
1445,'SimonCropp','Review MessageMapper IL generation\n'
1444,'johnsimons','Some installers logs that a trial license is used when beeing built\nThis results in a dialog box is being showed to the end user.\r\n\r\nPretty sure this issue is related to our main build agent beien provisioned dynamically. According to the AI license "a hardware change might cause the license to be invalidated"\r\n\r\nWorking master build (latest 4.0.3)\r\n\r\nhttp://builds.particular.net/viewLog.html?buildId=7107&buildTypeId=bt74&tab=buildLog\r\n\r\nFailing develop build (before merge back of 4.0.3)\r\nhttp://builds.particular.net/viewLog.html?buildId=7094&buildTypeId=bt26&tab=buildLog\r\n\r\nWorking develop build, same snapshot but different EC2 instance as the previous one.\r\n\r\nhttp://builds.particular.net/viewLog.html?buildId=7052&buildTypeId=bt26&tab=buildLog\r\n'
1443,'johnsimons',"FirstLevelRetries.TryInvokeFaultManager implementation can lose messages\nWhen an exception is caught in `FirstLevelRetries.TryInvokeFaultManager` it it is not re-thrown. As a result, processing of the current message is not rolled back and it is deleted from the input queue. The only way message loss does not occur is if the implementation of `Configure.Instance.RaiseCriticalError` kills the process immediately (the Azure host process does not do this). If the exceptions caught here were re-thrown it wouldn't be possible to lose them."
1442,'','Azure storage queue transport can lose messages\nThe AzureMessageQueueReceiver enlists a volatile resource manager in the ambient transaction (started in PollingDequeueStrategy) to delete received messages from the queue. If the endpoint is configured to wrap message handling in a transaction, message processing in TransportReceiver becomes part of the receive transaction. If another resource is enlisted in the transaction and an exception bubbles out of its IEnlistmentNotification.Commit implementation the received message will be lost. This happens because resource managers are called in the same order they enlist. Since the ReceiveResourceManager was enlisted first and it is volatile it will have already deleted the message from the queue with no way to rollback. \r\n\r\nIn order to avoid this issue, azure storage queue endpoints must be configured to not wrap message handling in a transaction. It would be a good idea to avoid using the transaction manager to delete received messages and simply delete them right after the call to tryProcessMessage in PollingDequeueStrategy. This way if an exception occurs during message processing the received message will not be deleted regardless of configuration.'
1441,'','Pass connection purpose to Rabbit API\nSo here we pass some information to Rabbit telling it who is querying it \r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/RabbitMQ/NServiceBus.RabbitMQ/Config/ConnectionConfiguration.cs#L67\r\n\r\nAnd after this change  #1423 we are now have purpose specific connections. \r\n\r\nSo we should pass the actually purpose to Rabbit. for  example `NServiceBus.Publish`'
1440,'','HttpChannelReceiver uses inefficient use of HttpListener\nThe code in the [HttpChannelReceiver](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Gateway/Channels/Http/HttpChannelReceiver.cs) is creating a HttpListener per channel.\r\n\r\nThis seems to be quite inefficient because the HttpListener support listening on multiple addresses! \r\n\r\nI wonder what the saving would be if we were to just using one HttpListener listening on multiple channel addresses :question: '
1439,'','Use DISM for installing MSMQ on newer OS, fixes #1437\nIt also removes uninstall MSMQ code.'
1438,'','Dont use the Console API from Powershell CmdLets\nIn several places we use the Console API from code that is called from Powershell Cmdlets. eg https://github.com/Particular/NServiceBus/blob/develop/src/PowerShell/NServiceBus.PowerShell/Msmq/MsmqSetup.cs#L67\r\n\r\nAs stated here http://msdn.microsoft.com/en-us/library/windows/desktop/dd878270(v=vs.85).aspx\r\n\r\n> Cmdlets should not use the Console API.\r\n\r\nWe should instead be using the `Cmdlet.WriteXXX` API  or the  `Host.UI.WriteXXX` API'
1437,'','Use DISM for installing MSMQ on newer OS\nSo OCSetup is in the process of being obsoleted. If you run it on windows 8 you get a warning \r\n\r\n> OCSetup has been deprecated. Update your scripts to use DISM.exe\r\n\r\nSo, for certain OSs, we are going to move to DISM.exe for installing MSMQ\r\n\r\n## OS Versions\r\n\r\nThere are some issues with DISM on some some 64 bit versions of earlier OS http://technet.microsoft.com/en-us/library/dd744566(v=ws.10).aspx\r\n\r\n> Hotfix required for 64-Bit host environments. Before using DISM with the /Add-Package, /Enable-Feature or /Disable-Feature commands from a 64-bit Windows Vista with SP1 host, Windows Server 2008, or Windows Server 2003 R2 host, you must install a hotfix.\r\n\r\nSo OSs for DISM are\r\n\r\n * Windows 7\r\n * Windows 8\r\n * Windows Server 2012\r\n * Any new OS\r\n\r\n## The Command\r\n\r\n    dism /Online /NoRestart /English /Enable-Feature /FeatureName:MSMQ-Container /FeatureName:MSMQ-Server\r\n\r\n## Uninstall\r\n\r\nThis will not be done since it is a destructive operation. ie it will deleting existing queses that contain data.'
1436,'','Provide sensible loglevels for dependencies\nSome of our dependencies (nhibernate mostly) outputs alot of data when loglevel is info. We should make sure that loglevels for deps stays at WARN unless users explicitly change them. So even if they change NSB to DEBUG deps should stay at WARN'
1435,'BogdanMitrache','Installer disregards custom port for Management Port\n'
1434,'andreasohlund','Add ReturnToSourceQueue script for Sql Server\n'
1433,'BogdanMitrache','Add [ProductVersion] to installation completed URL\ne.g. add the version parameter:\r\n\r\nhttp://www.particular.net/Installation-completed?installer=NServiceBus&version=[ProductVersion]'
1432,'BogdanMitrache',"Installer disregards RavenDB port number that's different from default\nChanging the ravendb port in the installer does not affect the actual configured port setting.\r\n\r\n![image](https://f.cloud.github.com/assets/3889023/961291/bfdb4534-04cf-11e3-93fb-4e72232da196.png)\r\n\r\n\r\n// @johnsimons "
1431,'SimonCropp','Better pipeline for the handler execution\nPartially inspired by the [Fubu Russian doll model](http://codebetter.com/jeremymiller/2011/01/09/fubumvcs-internal-runtime-the-russian-doll-model-and-how-it-compares-to-asp-net-mvc-and-openrasta/) the internal execution of handlers now takes a nested execution approach. \r\n\r\nWe refer to this nested approach referred to as a `Chain`. Each step in this `Chain` is referred to as a `Behavior`. \r\n\r\nSo part of the chain would be \r\n\r\n```\r\nStart chain\r\ninvokes ApplyIncomingMessageMutatorsBehavior \r\n    invokes CallbackInvocationBehavior \r\n        invokes LoadHandlersBehavior \r\n            invokes SagaPersistenceBehavior \r\n                invokes InvokeHandlersBehavior\r\n```\r\n\r\nThis allows each behavior to have control of \r\n\r\n * What is executed before the nested behavior \r\n * Optionally not invoke the nested behavior \r\n * Handle exceptions that occur during the nested execution\r\n * Optionally wrap the nested action in a transaction\r\n * What is executed after the nested behavior \r\n * Manipulate the data passed into and received from the nested behavior \r\n\r\n--'
1430,'',"Provide and call separate Win 32 and 64 Custom Actions DLL's during installation\nBased on YT issue INSTL-85 [Installing Particular.NServiceBus-4.0.0-rc2.exe (build #2) on WIN server 2012 fails](http://particular.myjetbrains.com/youtrack/issue/INSTL-85#comment=98-2488) opened by @sfarmar \r\n\r\n* The proposed solution from @BogdanMitrache is to build a separate 32bit and 64bit customer action dll for the installer to use.\r\n* The installer will detect the operating system version and will activate the appropriate dll version.\r\n\r\n**Question:** I assume this is required just for MSMQ / DTC / PerfCounters verification / installation phase of the custom actions. Correct ? \r\n\r\n//cc @johnsimons , @indualagarsamy , @SimonCropp "
1429,'','UniqueAttribute ignores override property\nGiven this\r\n\r\n        public class ModelWithUniqueProperty\r\n        {\r\n            [UniqueAttribute]\r\n            public virtual string PropertyWithAttribute { get; set; }   \r\n        }\r\n\r\n        public class InheritedModelWithOverride : ModelWithUniqueProperty\r\n        {\r\n            public override string PropertyWithAttribute { get; set; }\r\n        }\r\n\r\nThen `PropertyWithAttribute` will not be found when interrogating `InheritedModelWithOverride` because here https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus/Saga/UniqueAttribute.cs#L67 we pass false to the `inherit` parameter of `GetCustomAttributes`.\r\n\r\nFailing tests is here https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core.Tests/Sagas/UniqueAttributeTests.cs#L23 currently set to `[Explicit]` to not break the build.\r\n\r\n@johnsimons @andreasohlund  can u guys confirm this is a bug and not intentional. The i will fix it'
1428,'BogdanMitrache','Installer metadata should have some links\nIt currently only shows:\r\n![image](https://f.cloud.github.com/assets/122651/959270/e5a50b2e-047f-11e3-8dcf-a06310702bfb.png)\r\n\r\nWe should add extra links eg:\r\n![image](https://f.cloud.github.com/assets/122651/959286/7278cf04-0480-11e3-8ae1-a395c62944de.png)\r\n\r\n//cc @dannycohen '
1427,'','Default website page opened after installer finishes not very friendly!\nThis is the page is opened from the installer:\r\nhttp://www.particular.net/Installation-completed?installer=NServiceBus\r\n\r\nIt looks like:\r\n![image](https://f.cloud.github.com/assets/122651/959259/5899b928-047f-11e3-8494-a775e8511a6c.png)\r\n\r\nThe page doesn\'t even say "Thank you for installing...."!\r\n\r\n//cc @dannycohen '
1426,'BogdanMitrache',"Offline release notes not up to date!\nThe installer currently has some offline release notes, see https://github.com/Particular/NServiceBus/blob/master/NServiceBus%20Setup/Files/OfflineHtml/NServiceBus%204.0%20Beta%20Release%20Notes.htm\r\n\r\nIt doesn't look like this file is being updated as part of the release.\r\n\r\nWhat was the procedure to update this file?\r\n\r\n/cc @dannycohen \r\n\r\nThis is what the file currently looks like:\r\n![image](https://f.cloud.github.com/assets/122651/959006/6d1e48c4-0474-11e3-9aeb-86a8068710d3.png)\r\n\r\n**As you can see, it is still using the old template too!**"
1425,'BogdanMitrache','Default port value for management service comes up blank\nWhen running the 4.0.3 installer the default port for the management service ( aka ServiceControl) comes up blank even though its set to 33333 in the project.\r\n\r\nLogfiles indicates that its set to "" when running on the user machine (Dannys in this case). But the issue replicates reliably on other machines as well.'
1424,'yvesgoeleven',"Azure BlobStorageDataBus shouldn't swallow storage exceptions\n`BlobStorageDataBus` catches `StorageExceptions` in the `DownloadBlobInParallel` and `UploadBlobInParallel` methods. This could result in data bus property values being lost."
1423,'','add diff connections for diff purposes\nfor issue #944'
1422,'','Gateway satellite does not start for SendOnly endpoints \nShould be able to run Gateway in a SendOnly endpoint.\r\n\r\nIt looks like the reason the Gateway does not start is because it is a satellite and satellites are only started if the main transport starts!'
1421,'','UniqueAttribute returns  to an `IQueryable` instead of `IEnumerable`\nSo here https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus/Saga/UniqueAttribute.cs#L60\r\n\r\nWe convert an `IEnumerable` to an `IQueryable`.\r\n\r\nBut I cant understand why.\r\n\r\nAs per here http://stackoverflow.com/questions/10510890/do-i-really-need-use-asqueryable-on-collection\r\n \r\n> IQueryable is required/recommended for objects coming from remote source (like from database). For in memory collections it is of no use.\r\n\r\nIn our case we are reflecting over an in memory type so `IQueryable` would seem to be redundant?'
1420,'','Azure TimeoutPersister should let exception bubble\nSo in here [Azure.TimeoutPersister.cs#L83](https://github.com/NServiceBus/NServiceBus/blob/develop/src/azure/NServiceBus.Azure/Timeout/TimeoutLogic/TimeoutPersister.cs#L83) we have a large `try catch` inside the `GetNextChunk` method.\r\n\r\nHowever the code that calls that already has a circuit breaker\r\n[TimeoutPersisterReceiver.cs#L44](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Timeout/Hosting/Windows/TimeoutPersisterReceiver.cs#L44)\r\n\r\n        void StartPoller()\r\n        {\r\n            var token = tokenSource.Token;\r\n\r\n            Task.Factory\r\n               .StartNew(Poll, token, TaskCreationOptions.LongRunning)\r\n               .ContinueWith(t =>\r\n               {\r\n                   t.Exception.Handle(ex =>\r\n                   {\r\n                       Logger.Warn("Failed to fetch timeouts from the timeout storage");\r\n                       circuitBreaker.Failure(ex);\r\n                       return true;\r\n                   });\r\n\r\n                   StartPoller();\r\n               }, TaskContinuationOptions.OnlyOnFaulted);\r\n        }\r\n\r\nSo it would seem that `Azure.TimeoutPersister` should actually let the exception bubble.\r\n\r\nThe same applies with `TryRemove` and `RemoveTimeoutBy`.\r\n\r\nIf there is anything special about Azure that means these catches are justified some comments should be added to that effect.\r\n'
1419,'','Problematic catches in AzureDiagnosticsLoggerFactory\nSo in [AzureDiagnosticsLoggerFactory](https://github.com/NServiceBus/NServiceBus/blob/develop/src/azure/NServiceBus.Azure/Logging/Azure/AzureDiagnosticsLoggerFactory.cs)\r\n\r\nWe have code like this\r\n\r\n        private static string GetConnectionString()\r\n        {\r\n            try\r\n            {\r\n                return RoleEnvironment.GetConfigurationSettingValue(ConnectionStringKey);\r\n            }\r\n            catch (Exception)\r\n            {\r\n                return "UseDevelopmentStorage=true";\r\n            }\r\n        }\r\n        \r\nand this\r\n\r\n        private static LogLevel GetLevel()\r\n        {\r\n            try\r\n            {\r\n                return (LogLevel)Enum.Parse(typeof(LogLevel), RoleEnvironment.GetConfigurationSettingValue(LevelKey));\r\n            }\r\n            catch (Exception)\r\n            {\r\n                return LogLevel.Information;\r\n            }\r\n        }\r\n\r\nAnd a few others        \r\n\r\nThis is problematic because it will hide configuration problems from the user. \r\n\r\nSo in the first case if they have used the wrong key for the connection string connection will silently fail back to the development server.\r\n\r\nIn the second case if they have configured an incorrect logging level the the parse will fail and it will silently fall back to `LogLevel.Information`'
1418,'','Calling NHibernatePersistence.UseDefault in a custom host with the bus initialization does not seem to work\nSteps to reproduce:\r\n\r\n1. Create a custom host (reference NServiceBus.NHibernate) and initialize the bus like below:\r\n      \r\n ```c#\r\n          NHibernatePersistence.UseAsDefault();\r\n            SetLoggingLibrary.Log4Net();\r\n            Configure.Features.Enable<Sagas>();\r\n            Bus = Configure.With()\r\n                           .DefaultBuilder()\r\n                           .InMemoryFaultManagement()\r\n                           .UnicastBus()\r\n                           .CreateBus()\r\n                           .Start(() =>     Configure.Instance.ForInstallationOn<NServiceBus.Installation.Environments.Windows>().Install());\r\n     ```\r\n2. Make sure you add the needed configuration for NHibernate in app.config\r\n3. Stop RavenDB Service\r\n4. Start the endpoint.\r\n\r\nNotice the Raven exceptions trying to connect to RavenDB even though NHibernate is specified to be used as default:\r\n\r\nWORKAROUND:\r\nCall the `NHibernatePersistence.UseAsDefault()` in a class that implements `INeedInitialization`\r\n'
1417,'','Calling NHibernatePersistence.UseDefault in IWantCustomInitialization causes exception\nSteps to reproduce:\r\n\r\n1. Create a default server NSB endpoint, with reference to NServiceBus.NHibernate\r\n2. Modify the endpoint config like below:\r\n\r\n\t```c#\r\n\t    public class EndpointConfig : IConfigureThisEndpoint, AsA_Server, IWantCustomInitialization\r\n\t    {\r\n\t\t    public void Init()\r\n\t\t    {\r\n\t\t        NHibernatePersistence.UseAsDefault();\r\n\t\t    }\r\n\t    }\r\n\t```\r\n\r\n3. Modify the app.config to make sure the right config for NHibernate is present.   \r\n\r\n\t```xml   \r\n\t <appSettings>\r\n\t    <!-- dialect is defaulted to MsSql2008Dialect, if needed change accordingly -->\r\n\t    <add key="NServiceBus/Persistence/NHibernate/dialect" \r\n                  value="NHibernate.Dialect.MsSql2008Dialect" />\r\n\t    <!-- other optional settings examples -->\r\n\t    <add key="NServiceBus/Persistence/NHibernate/connection.provider" \r\n                   value="NHibernate.Connection.DriverConnectionProvider" />\r\n\t    <add key="NServiceBus/Persistence/NHibernate/connection.driver_class"\r\n                   value="NHibernate.Driver.Sql2008ClientDriver" />\r\n\t </appSettings>\r\n\t\r\n\t <connectionStrings>\r\n\t     <!-- Default connection string for all Nhibernate/Sql persisters -->\r\n\t     <add name="NServiceBus/Persistence" \r\n                  connectionString="Data Source=.\\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />\r\n\t</connectionStrings>\r\n\t```\r\n\r\n4. Start the endpoint and notice the below exception:\r\n\r\n![image](https://f.cloud.github.com/assets/854553/951632/3adf588c-03aa-11e3-8fa0-76eb96053951.png)'
1416,'','Split custom logging framework support into diff repos and nugets\nhttps://github.com/Particular/NServiceBus.NLog\r\nhttps://github.com/Particular/NServiceBus.Lo4Net\r\n\r\n--\r\n\r\nCurrently we have an some very fancy code that allow people to plug in different logging frameworks. It relies heavily on reflection and the `dynamic` keyword. This allows users to configure logging frameworks without us needing to reference those libraries\r\n\r\nThe issues with this are as follows\r\n\r\n### Speed\r\n\r\nThe reflection and dynamic code is slower than the strong typed approach. For example in a test on my machine configuring Log4net dynamically takes 1230ms while configuring in a strong typed way takes 210ms\r\n\r\n### Memory\r\n\r\nSince the reflection and dynamic approach needs to hold extra types and delegates it will use more memory\r\n\r\n### Poor API\r\n\r\nThe current approach gives us an API like this\r\n\r\n    Log4NetConfigurator.Configure(dynamic appenderForNServiceBusToLogTo, string thresholdForNServiceBusToLogWith = null)\r\n    NLogConfigurator.Configure(object targetForNServiceBusToLogTo, string levelForNServiceBusToLogWith = null)\r\n    NLogConfigurator.Configure(object[] targetsForNServiceBusToLogTo, string levelForNServiceBusToLogWith = null)\r\n    \r\nNote that it is not strong typed. This is not a very discoverable API. It also allows people to call it without forcing them to have a reference to the logging library which causes a runtime failure.\r\n\r\n### Fragile\r\n\r\nThe current reflection approach makes many assumptions about the Logging APIs of both NLog and Log4Net. If either of these libraries make a breaking change we will only discover at runtime.\r\n\r\n### Too much complex code\r\n\r\nThere is some very smart code that achieves the current reflection+dynamic approach. However it is also very complex in the way it work around not having a reference\r\n\r\nfor example Compare this [SerilogConfigurator](https://github.com/SimonCropp/NServiceBus.Serilog/blob/master/NServiceBus.Serilog/SerilogConfigurator.cs) to this [NLogConfigurator](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Logging/Loggers/NLogAdapter/NLogConfigurator.cs)\r\n\r\nor this [SeriLogLogger](https://github.com/SimonCropp/NServiceBus.Serilog/blob/master/NServiceBus.Serilog/Logger.cs) to this [NLogLogger](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Logging/Loggers/NLogAdapter/NLogLogger.cs)\r\n\r\nAs you can see the strong typed approach is much simpler\r\n\r\n### Confusing extensibility story\r\n\r\nWe have gone to a lot of effort to support two logging framework in a very specific way.  The problem is there are other logging frameworks that people may want to use. Our approach results in "if you use NLog or Log4net here is a flawed api if you use any other logging libraries you are on your own". For example anyone was to attempt to plug in the Common.Logging library into NServiceBus they would probably start by looking at how we implement NLog compatibility. This would be a very confusing experience for them\r\n\r\n## Proposal\r\n\r\nMove the NLog and Log4Net extensibility APIs into their own assemblies and nugets. \r\n\r\nThis could be done in a transitional way by obsoleting the current API with a "Use XXX nuget package instead".\r\n\r\nNote: The default logging implementation can remain as Log4net and ILMerged as there is no issue with that approach.'
1415,'','Reduce to only have one logging Profile\nIn Version 5 all logging profiles, unless override, will log to the console and a rolling log file.'
1414,'',"Sending from SendOnly through Gateway throws NullReferenceException\nI've written an acceptance test but is set to Ignore as I'm not too sure how to get the acceptance test to work with sendonly endpoints!\r\n@andreasohlund help!"
1413,'','Request/Response over Gateway fails to correlate\n'
1412,'','Obsolete batch\nso we can see the impact of #1402 on our own codebase\r\n\r\n@johnsimons @andreasohlund do we want to obsolete these in 4.1 so we can make the actual changes in 5.0?'
1411,'johnsimons','Request/Response over Gateway fails to correlate\nWhen a reply message is sent over the Gateway between two sites, the CorrelationId gets a "\\0" appended to it. This causes the dispatcher to not find the correlated callback that is registered when sending the message using the ICallback mechanism.\r\n\r\nI\'ve built a repro project here: https://github.com/michaelnoonan/GatewayRequestResponseBug'
1410,'andreasohlund','Fix for 1407\n@SimonCropp @johnsimons code review please'
1409,'','Add a "Reply" message intent\nThis will allow us to apply better conventions, auditing, best practices in the future. It\'s also part in solving #1407'
1408,'',"Installers in azure roles\nLooks like table creation for sql server, and thus sql azure as well, moved to an installer a few months ago https://github.com/NServiceBus/NServiceBus/tree/master/src/nhibernate/NServiceBus.NHibernate/SagaPersisters/NHibernate/Config/Installer\r\n\r\nYet installers are not run by default in windows azure as we have no elevated privileges while executing our code in azure role instances (it's possible to install stuff manually using startup scripts though, but this requires additional work)\r\n\r\nNet result, there are no tables in sql azure now when deploying in windows azure.\r\n"
1407,'andreasohlund',"Cannot start different Saga from Timeout handler\nWe have a situation where a Saga requests a timeout, at which time another Saga should be started. This worked in the 4.0.0-unstable2996 release, but has broken in 4.0.2. Instead of starting the new Saga, the SagaDispatcher says the message has a SagaId header so it will use that strategy, doesn't find the data and executes the SagaNotFound handlers.\r\n\r\nI've created a repro project for this at https://github.com/michaelnoonan/CrossSagaMessagingBug"
1406,'johnsimons','Sending from SendOnly through Gateway throws NullReferenceException in v4.0.2\nThe specific line that throws is\r\nIn HeaderMapper.cs\r\n            to[NServiceBus + ReplyToAddress] = from.ReplyToAddress.ToString();\r\n\r\nAnd of course because it is from a SendOnly endpoint there is no ReplyToAddress.\r\nIf you simply skip over that line in the debugger everything works.\r\n\r\n'
1405,'','Combination of Costura and Aspose can cause infinite loop\nDue to a the behaviors of Costura (using `AppDomain.CurrentDomain.AssemblyResolve`) and  Aspose (using  `AppDomain.CurrentDomain.ResourceResolve`) there can be a circumstance where an infinite loop occurs.\r\n\r\nRaised on the yahoo group: http://tech.groups.yahoo.com/group/nservicebus/message/20043\r\n\r\nAdded an issue to Costura: https://github.com/Fody/Costura/issues/23\r\n\r\nThanks to @distantcam for adding a workaround workaround to Costura \r\n\r\nThanks to @thirkcircus for an awesome description + screenshot of the issue.\r\n\r\nThis issue is to track upgrading NServiceBus to the latest version of Costura\r\n\r\nImages below are courtesy of @thirkcircus  via the mail group\r\n\r\n![originalmemorydump](https://f.cloud.github.com/assets/122666/935154/69b1d8ba-007b-11e3-926e-fad5253a17c6.png)\r\n![recursivecallsinprofiler](https://f.cloud.github.com/assets/122666/935155/69e4ee3a-007b-11e3-8c06-d2c3fbd58004.png)\r\n![stacktracewithpdbs](https://f.cloud.github.com/assets/122666/935156/6a1911a6-007b-11e3-922c-3b4e623aac0e.png)'
1404,'','NH-3023 causes connection pool corruption and endpoint crashes\nWhen running under high load and high concurrency the transactions rollbacks causes bug NH-3203 occur. This corrupts the sqlconnection returned to the connection pool and worse bring the endpoint down since an unhandled exception occurs on a thread.  This only occurs when DTC transactions are used.\r\n\r\nTo reproduce run the saga performance test with concurrency 10 => 10 messages hitting the same saga = 9 rollbacks simultaneously.\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/1688bca41245d92d4d376934ca8194ff1fae7cb9/IntegrationTests/PerformanceTests/Runner/TestSuites/Sagas-Concurrency.ps1#L32\r\n\r\nThe fix is to force a scope rollback and wait for the status of the ambient tx to reach "aborted". After that point it seems safe for NHibernate to rollback and clean up the connection. (thanks @PeterLehmann/ for the hint).\r\n\r\nSince this needs to be happening before NH aborts there is no workaround other than turning DTC tx off and the NServiceBus source needs to be modified to fix this until the NHibernate team fixes the issuer.\r\n\r\nhttps://nhibernate.jira.com/browse/NH-3023'
1403,'','Disable gateway\nfixes #1259'
1402,'','Obsolete IBus batch APIs\nAs part of the discussion regarding #1346, it was agreed to start obsoleting the following APIs on the `IBus`:\r\n```c#\r\nICallback SendLocal(params object[] messages);\r\nvoid Publish<T>(params T[] messages);\r\nICallback Send(params object[] messages);\r\nICallback Send(string destination, params object[] messages);\r\nICallback Send(Address address, params object[] messages);\r\nICallback Send(string destination, string correlationId, params object[] messages);\r\nICallback Send(Address address, string correlationId, params object[] messages);\r\nICallback SendToSites(IEnumerable<string> siteKeys, params object[] messages);\r\nICallback Defer(TimeSpan delay, params object[] messages);\r\nICallback Defer(DateTime processAt, params object[] messages);\r\nvoid Reply(params object[] messages);\r\nICallback SendToSites(IEnumerable<string> siteKeys, params object[] messages);\r\n```\r\n'
1401,'','Ability to specify a explicit reply url for the gateway  #1371\nTried very hard to be backwards compatible with existing gateway config\r\n\r\nadded a few GatewayConfig attributes\r\nSite/ReplyChannel \r\nChannel/Key\r\nChannel/ReplyAddress\r\n\r\nSite/ReplyChannel links to a channel by the Channel/Key\r\nChannel/ReplyAddress provides the alternative \r\n\r\nAll comments welcome'
1400,'johnsimons',"Null message property value in Azure Service Bus message results in Null Reference Exception\nThe BrokeredMessageConverter does not check for null values for message properties prior to calling ToString() on them.  The NServiceBus.RelatedToTimeoutId property is present on messages in my system, but the value is null.  When the BrokeredMessageConverter encounters these messages it throws a null reference exception.\r\n\r\nThis looks to be a pretty easy fix and I wouldn't mind trying to submit a pull-request as a way of cutting my teeth on contributing."
1399,'andreasohlund','Audit as a feature and disabling audit via code initialization\nFixes #1309 and also fixes #1339.\r\nWe need to standardize on if we want to use a config section or appSettings. This code uses AuditConfig as a config section and we need to decide on that.'
1398,'','Create a Azure integration test that shows the azure transports working with the on-premise host\n'
1397,'yvesgoeleven',"Made visibility timeout for messages the same as the configured value\nIt's better to use the configured invisible time rather than multiplying it by the batch size for the following reasons:\r\n\r\n1) Multiplying by the batch size makes it impossible to set a specific invisible time without changing the batch size.\r\n2) Using the configured invisible time is more intuitive."
1396,'',"[4.0.0.1 --> 4.0.2] System.InvalidOperationException: Log4net could not be loaded.\nWhen upgrading from 4.0.0.1 to 4.0.2 we are setting the below in all our projects, any ideas/thoughts?\r\n\r\n\t\tNServiceBus.Testing.Acceptance.Support.ScenarioException: Endpoint acceptance.SomeEndpoint.Msmq.StructureMap failed to initialize - System.TypeInitializationException: The type initializer for 'NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetAppenderFactory' threw an exception. ---> System.InvalidOperationException: Log4net could not be loaded. Make sure that the log4net assembly is located in the executable directory.\r\n\t\t   at NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetAppenderFactory..cctor() in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Logging\\Loggers\\Log4NetAdapter\\Log4NetAppenderFactory.cs:line 21\r\n\t\t   --- End of inner exception stack trace ---\r\n\t\t   at NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetAppenderFactory.CreateRollingFileAppender(String level, String filename)\r\n\t\t   at NServiceBus.Testing.Acceptance.EndpointTemplates.ConfigureExtensions.SetupLogging(EndpointConfiguration endpointConfiguration) in c:\\Source\\github\\NServiceBus-Contrib\\src\\Testing\\Acceptance\\NServiceBus.Testing.Acceptance\\EndpointTemplates\\ConfigureExtensions.cs:line 222\r\n\t\t   at NServiceBus.Testing.Acceptance.EndpointTemplates.DefaultServer.GetConfiguration(RunDescriptor runDescriptor, EndpointConfiguration endpointConfiguration, IConfigurationSource configSource) in c:\\Source\\github\\NServiceBus-Contrib\\src\\Testing\\Acceptance\\NServiceBus.Testing.Acceptance\\EndpointTemplates\\DefaultServer.cs:line 21\r\n\t\t   at NServiceBus.Testing.Acceptance.EndpointConfigurationBuilder.<>c__DisplayClass2`1.<EndpointSetup>b__1(RunDescriptor settings, IDictionary`2 routingTable) in c:\\Source\\github\\NServiceBus-Contrib\\src\\Testing\\Acceptance\\NServiceBus.Testing.Acceptance\\EndpointConfigurationBuilder.cs:line 91\r\n\t\t   at NServiceBus.Testing.Acceptance.Support.EndpointRunner.Initialize(RunDescriptor run, EndpointBehaviour endpointBehaviour, IDictionary`2 routingTable, String endpointName) in c:\\Source\\github\\NServiceBus-Contrib\\src\\Testing\\Acceptance\\NServiceBus.Testing.Acceptance\\Support\\EndpointRunner.cs:line 42\r\n\t\t   at NServiceBus.Testing.Acceptance.Support.ScenarioRunner.InitializeRunners(RunDescriptor runDescriptor, IList`1 behaviorDescriptors) in c:\\Source\\github\\NServiceBus-Contrib\\src\\Testing\\Acceptance\\NServiceBus.Testing.Acceptance\\Support\\ScenarioRunner.cs:line 323\r\n\t\t   at NServiceBus.Testing.Acceptance.Support.ScenarioRunner.PerformTestRun(IList`1 behaviorDescriptors, IList`1 shoulds, RunDescriptor runDescriptor, Func`2 done) in c:\\Source\\github\\NServiceBus-Contrib\\src\\Testing\\Acceptance\\NServiceBus.Testing.Acceptance\\Support\\ScenarioRunner.cs:line 160\r\n"
1395,'sfarmar',"Create a automated post build test using the full duplex sample\nTo verify the produced assemblies we should perform a automated smoke test.\r\n\r\n### Proposed solution\r\n\r\nWe'll use TeamCity to drive the tests. For now we'll run them on our regular build agents but future needs might force us to move to dedicated agents. For now we only run for MSMQ but we'll expand this in the future to include the other transports\r\n\r\n1. Create a new build (Since this allows us to pull in other binaries when we split out the other transports)\r\n2. Take an artifact dependency on the core build to pull the compiled samples in\r\n3. Clear the msmq queues (see existing buildstep in the acceptance test build)\r\n4. Create a custom build step that installs the client and the server (fullduplex sample). Code for this already exists in our backend repository.\r\n5. Modify the sample to allow a commandline option to be specified that cause the client to send a message to the server. (we can expand here for future tests)\r\n6. Verify correctness by making sure that no message exists in the error q and 2 messages exists in the audit queue. We can later extend this to do more indepth checks\r\n\r\nAll the above can easily be done using powershell (see here for examples https://github.com/afyles/Blog/tree/master/PowerShell)\r\n"
1393,'','ActiveMQ uses DTCTransactionSessionFactory after it is disposed\nSo when closing down ActiveMQ we first close down the satellites\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/NServiceBus.Core/Satellites/SatelliteLauncher.cs#L72\r\n\r\n        public void Stop()\r\n        {\r\n            Parallel.ForEach(satellites, (ctx, state, index) =>\r\n                {\r\n                    Logger.DebugFormat("Stopping {1}/{2} \'{0}\' satellite", ctx.Instance.GetType().AssemblyQualifiedName,\r\n                                       index + 1, satellites.Count);\r\n\r\n                    if (ctx.Transport != null)\r\n                    {\r\n                        ctx.Transport.Stop();\r\n                    }\r\n\r\nWhich gives us a stack trace of \r\n\r\n\tNServiceBus.Transports.ActiveMQ.SessionFactories.DTCTransactionSessionFactory.Dispose() Line 77\tC#\r\n \tNServiceBus.Transports.ActiveMQ.ActiveMqMessageDequeueStrategy.Stop() Line 78 + 0x41 bytes\tC#\r\n \tNServiceBus.Unicast.Transport.TransportReceiver.Stop() Line 383 + 0x34 bytes\tC#\r\n \tNServiceBus.Satellites.SatelliteLauncher.Stop Line 72 + 0x38 bytes\tC#\r\n\r\nNext the `UnicastBus` will shutdown which will get us into here \r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/ActiveMQ/NServiceBus.ActiveMQ/ActiveMqMessageDequeueStrategy.cs#L72\r\n\r\n        public void Stop()\r\n        {\r\n            foreach (INotifyMessageReceived messageReceiver in messageReceivers)\r\n            {\r\n                messageReceiver.Stop();\r\n            }\r\n\r\n            foreach (INotifyMessageReceived messageReceiver in messageReceivers)\r\n            {\r\n                messageReceiver.Dispose();\r\n            }\r\n\r\n            messageReceivers.Clear();\r\n            sessionFactory.Dispose();\r\n        }\r\n\r\nNote that the `messageReceivers` are being disposed. So if you follow that stack down it give us this\r\n\r\n\tNServiceBus.Transports.ActiveMQ.SessionFactories.DTCTransactionSessionFactory.Release(Apache.NMS.ISession session) Line 36\tC#\r\n \tNServiceBus.Transports.ActiveMQ.Receivers.MessageProcessor.Dispose(bool disposing) Line 78 + 0x3c bytes\tC#\r\n \tNServiceBus.Transports.ActiveMQ.Receivers.MessageProcessor.Dispose() Line 65 + 0xc bytes\tC#\r\n \tNServiceBus.Transports.ActiveMQ.Receivers.ActiveMqMessageReceiver.Dispose(bool disposing) Line 65 + 0x2f bytes\tC#\r\n \tNServiceBus.Transports.ActiveMQ.Receivers.ActiveMqMessageReceiver.Dispose() Line 30 + 0x16 bytes\tC#\r\n \tNServiceBus.Transports.ActiveMQ.ActiveMqMessageDequeueStrategy.Stop() Line 74 + 0x29 bytes\tC#\r\n \tNServiceBus.Unicast.Transport.TransportReceiver.Stop() Line 383 + 0x34 bytes\tC#\r\n \tNServiceBus.Unicast.UnicastBus.Shutdown() Line 944 + 0x36 bytes\tC#\r\n \tNServiceBus.Unicast.UnicastBus.Dispose(bool disposing) Line 893 + 0xa bytes\tC#\r\n \tNServiceBus.Unicast.UnicastBus.Dispose() Line 874 + 0x16 bytes\tC#\r\nSo note that in `MessageProcessor` it calls `sessionFactory.Release(session);` https://github.com/NServiceBus/NServiceBus/blob/master/src/ActiveMQ/NServiceBus.ActiveMQ/Receivers/MessageProcessor.cs#L78\r\n\r\n        private void Dispose(bool disposing)\r\n        {\r\n            if (disposed)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (disposing)\r\n            {\r\n                sessionFactory.Release(session);\r\n            }\r\n\r\nThe problem is that the `sessionFactory` has already been disposed. \r\n\r\nSo we essentially have an order/corrupted state issue here'
1392,'johnsimons','NHibernate gateway deduplication fails on large messages\nSQL deduplication fails on messages larger than 8KB with error message\r\nThe length of the byte[] value exceeds the length configured in the mapping/parameter.'
1391,'johnsimons','NServiceBus.Host -dependsOn should be backwards compatible\nIn v3 it was possible to specify multiple dependencies using a comma delimited string:\r\n/dependsOn:"MSMQ,DTC,SQLSERVER"\r\n\r\nWe need to fix v4 so that it supports the same syntax'
1390,'','Shutdown Shutdown logic of UnicastBus can cause dispose exception\nSo in `UnicastBus` some shutdown logic\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/NServiceBus.Core/Unicast/UnicastBus.cs#L790\r\n\r\nIt makes use of `ReadyMessageSender.Stop` Which in turn makes use of `UnicastBus.Transport`\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/NServiceBus.Core/Distributor/ReadyMessages/ReadyMessageSender.cs#L30\r\n\r\nSo lets go through a shutdown scenario\r\n\r\n* The `UnicastBus` gets disposed. \r\n* All public members now have a guard clause activated. ie they will throw a `ObjectDisposedException` if they are accessed (or at least they will when we implement #1362)\r\n* `UnicastBus` calls `ReadyMessageSender.Stop`\r\n* `ReadyMessageSender.Stop` calls `UnicastBus.Transport` \r\n* `UnicastBus.Transport` throws `ObjectDisposedException` since it is guarded.\r\n\r\n\r\nSo after discussion with @johnsimons the fix is to change the dispose exception behavior of Janitor.'
1389,'','Overriding Endpoint name in SqlTransport not working\nI have a configuration that runs the bus in-process, it looks like this:\r\n\r\n    namespace ServicesPortal.Web\r\n    {\r\n        public static class BusConfig\r\n        {\r\n            public static void Configure(IConfiguration configuration)\r\n            {\r\n                NServiceBus.Configure.ScaleOut(s => s.UseSingleBrokerQueue());\r\n                NServiceBus.Configure.Features.Enable<Sagas>();\r\n    \r\n                NServiceBus.Configure\r\n                            .With()\r\n                            .AutofacBuilder(Global.Container)\r\n                            .DefineEndpointName("ServicesPortal.Web")\r\n                            .UseTransport<SqlServer>(GetMyConnectionString())\r\n                            .UseNHibernateSagaPersister()\r\n                            .UseNHibernateSubscriptionPersister()\r\n                            .UseNHibernateTimeoutPersister()\r\n                            .UnicastBus()\r\n                            .CreateBus()\r\n                            .Start(() => NServiceBus.Configure.Instance.ForInstallationOn<Windows>().Install());\r\n            }\r\n        }\r\n    }\r\n\r\nLooking at the generated queues (tables) in the database, it looked what I expected. Now if I change the endpoint in DefineEndpointName method to say "ServicesPortal.Web2" all but the main queue are created correctly and main queue name is still generated based on the namespace. Ignore the audit/error queues in the [Screenshot](http://i.imgur.com/voSX1hc.png?1) for now.'
1388,'','SpringObjectBuilder should use a ConcurrentDictionary for componentProperties\nSo in several places  `SpringObjectBuilder` puts a lock on `componentProperties`\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/ObjectBuilder/ObjectBuilder.Spring/SpringObjectBuilder.cs#L112\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/ObjectBuilder/ObjectBuilder.Spring/SpringObjectBuilder.cs#L136\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/ObjectBuilder/ObjectBuilder.Spring/SpringObjectBuilder.cs#L184\r\n\r\nInstead of doing this `componentProperties` should be changed to a `ConcurrentDictionary` and avoid the locks'
1387,'','SpringObjectBuilder context should not be static\nSo `SpringObjectBuilder` has a static field `context` \r\n\r\nThis is assigned inside the instance constructor\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/ObjectBuilder/ObjectBuilder.Spring/SpringObjectBuilder.cs#L18\r\n\r\nMy question is "Why?"\r\n\r\nThis is causing issues for the AcceptanceTests. The reason is that they spin up multiple instances of `SpringObjectBuilder`. Each time a new `SpringObjectBuilder` is constructed it will overwrite the static field. This causes two problems\r\n\r\n1. we are loosing a pointer to something we should be disposing\r\n2. things that are injected into the previous context will be lost\r\n\r\n@andreasohlund any chance you understand the history from 3 years ago?'
1386,'','Introduce a way for developers to get notified when saga instance is created\nThis will enable them to execute custom logic like logging etc when that happens'
1385,'','"Gateway failed to receive incoming request" on bus shutdown\n```\r\n2013-08-05 17:10:44,743 [19] ERROR NServiceBus.Gateway.Channels.Http.HttpChannelReceiver [(null)] <(null)> - Gateway failed to receive incoming request.\r\nSystem.Net.HttpListenerException (0x80004005): The I/O operation has been aborted because of either a thread exit or an application request\r\n   at System.Net.HttpListener.GetContext()\r\n   at NServiceBus.Gateway.Channels.Http.HttpChannelReceiver.HttpServer(Object o) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Gateway\\Channels\\Http\\HttpChannelReceiver.cs:line 143\r\n```'
1384,'','Use Configure.GetConfigSection<T> for Gateway like other IProvideConfig<T>\nWe were setting up Gateways using some convention based configuration and found it was the only place that went directly to Configure.ConfigurationSource rather than through the Configure.GetConfigSection<T> method.'
1382,'','Content-MD5 gateway header value may automatically be changed!\nIf the header value contain \'+\', those get replace by spaces!\r\n\r\nSo given the following message:\r\n```c#\r\nstring message = "<?xml version=\\"1.0\\" ?><Messages xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns=\\"http://tempuri.net/NServiceBus.AcceptanceTests.Gateway\\"><MyRequest></MyRequest></Messages>";\r\n```\r\nIts hash is "pex7MgCc4re7YoG8GTl7+g=="\r\n\r\nAnd then when [we read](https://github.com/NServiceBus/NServiceBus/blob/master/src/NServiceBus.Core/Gateway/Receiving/IdempotentChannelReceiver.cs#L84) the Content-MD5 header, we get:\r\n"pex7MgCc4re7YoG8GTl7 g=="\r\n\r\n'
1381,'','Gateway should look at Content-Encoding header\nWhen a http request is received, an MD5 is calculated against the body payload, but by default it uses UTF8.\r\n\r\nInstead it should look at the `Content-Encoding` header and then use the correct encoder to retrieve the payload'
1380,'','Content-MD5 gateway header should be optional\nIt is up to the client to send that header.\r\nTherefore the server should only validate it if header is present.'
1379,'','BlobStorageDataBus has Dispose method but does not implement\nSo BlobStorageDataBus has a Dispose method that does some valuable stuff\r\n\r\n        public void Dispose()\r\n        {\r\n            timer.Dispose();\r\n\r\n            DeleteExpiredBlobs();\r\n\r\n            logger.Info("Blob storage data bus stopped");\r\n        }\r\n\r\nBut the class does not implement `IDisposable` and the `Dispose`  method is not explicitly called so it will never be cleaned up'
1378,'johnsimons','Provide hook to notify users when messages are moved to error queue\nCurrently the only hook is by writing your own `IManageMessageFailures` which is not ideal because then you have to duplicate logic.\r\n\r\n### Proposed Solution\r\n- [ ] Add a new interface called `IWantToBeNotifiedWhenMessageIsSentToErrorQueue`\r\n```c#\r\nvoid Invoke(TransportMessage message, Exception e);\r\n```\r\n\r\n- [ ] Need to ensure this hook is using the same lifecycle as normal message handlers\r\n- [ ] It is instance per call\r\n- [ ] decide what happens when an exception occurs. Need to test circuit breaker logic.'
1377,'',"Installer's Repair function should re-execute installers for Management Service.\nI was going nuts deleting queues on my machine and then realized I had deleted error.log and all of the ServiceBus.Management.* queues as well. After that the management service would not start.\r\n\r\nThe installer's Repair function should fix this."
1376,'','Add support for new Azure Servicebus High Availability features\nPaired Namespaces can now be used to support high availability of namespaces into the azure servicebus transport, see http://msdn.microsoft.com/en-us/library/dn292562.aspx for more details.'
1375,'','use waitforexit combined with kill\nfixes #1365'
1374,'','Wait for exit\nfixes #1365'
1373,'','NServiceBusVersion header is hard coded to 4.0 in ActiveMq\nsee here https://github.com/NServiceBus/NServiceBus/blob/master/src/ActiveMQ/NServiceBus.ActiveMQ/ActiveMqMessageMapper.cs#L99\r\n\r\n    if (!transportMessage.Headers.ContainsKey(Headers.NServiceBusVersion))\r\n    {\r\n        transportMessage.Headers[Headers.NServiceBusVersion] = "4.0.0.0";\r\n    }\r\n\r\nIs there a reason for this? If so the code should have a comment to reflect that since as the cdoe is now it looks like a bug\r\n\r\n@remogloor  thoughts?'
1372,'','When using NServiceBus.Host and using CustomInitialization to start the endpoint as SendOnly, the host throws configuration errors\n--\r\n\r\nSteps to reproduce:\r\n\r\n* Create a class library and add the nuget package for NServiceBus.Host\r\n* Add the following initialization code:\r\n\r\n```\r\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Client, IWantCustomInitialization\r\n    {\r\n        public void Init()\r\n        {\r\n            Configure.Serialization.Xml();\r\n            Configure.With()\r\n                .DefaultBuilder()\r\n                .UseTransport<Msmq>()\r\n                .UnicastBus()\r\n                .SendOnly();\r\n        }\r\n     }\r\n```\r\n\r\n* Start the endpoint\r\n* Notice the error\r\n\r\n![image](https://f.cloud.github.com/assets/854553/884838/0e15a6be-f9c1-11e2-9142-46e0fc027df0.png)\r\n\r\nNOTE: The following configuration works in 3.3.8\r\n\r\n        public class EndpointConfig : IConfigureThisEndpoint, AsA_Client,  IWantCustomInitialization\r\n        {\r\n         public void Init()\r\n         {\r\n             Configure.With()\r\n                .DefaultBuilder()\r\n                .XmlSerializer()\r\n                .MsmqTransport()\r\n                .UnicastBus()\r\n                .SendOnly();\r\n         }\r\n        }'
1371,'','Add support for reply address per gateway channel\nCurrent gateway configuration allows only for a single reply to address. When using the built-in Http channel, this address is also used for hosting the HttpListener.\r\n\r\nWhen the gateway is hosted behind a load balancer, the public address of the gateway can be different from the local address on the machine hosting the actual gateway endpoint.\r\n\r\nHaving separate reply address config for each channel will decouple the HttpListener from the reply address and allow more flexibility when additional gateway channels (like SQS, ActiveMQ, Azure) are available later on.\r\n\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/20000\r\n\r\n'
1369,'','Acceptance test, raising exceptions in ActiveMQ\n```\r\n2013-07-31 06:59:27,789 [7052] WARN  JetBrains.Container.Log4netDefaultLoggerInitializer - Unhandled exception in current domain: System.Threading.ThreadAbortException: Thread was being aborted.\r\n[16:59:27][Step 6/6]    at Apache.NMS.ActiveMQ.Transport.Tcp.TcpTransport.ReadLoop()\r\n[16:59:27][Step 6/6]    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n[16:59:27][Step 6/6]    at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n[16:59:27][Step 6/6]    at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n[16:59:27][Step 6/6]    at System.Threading.ThreadHelper.ThreadStart(),    at Apache.NMS.ActiveMQ.Transport.Tcp.TcpTransport.ReadLoop()\r\n[16:59:27][Step 6/6]    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n[16:59:27][Step 6/6]    at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n[16:59:27][Step 6/6]    at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n[16:59:27][Step 6/6]    at System.Threading.ThreadHelper.ThreadStart(), (null)\r\n```'
1368,'','Raw exception thrown from DTCTransactionScope\nso in this file https://github.com/NServiceBus/NServiceBus/blob/develop/src/ActiveMQ/NServiceBus.ActiveMQ/Receivers/TransactionsScopes/DTCTransactionScope.cs\r\n\r\nthere is this code \r\n\r\n        protected virtual void Dispose(bool disposing)\r\n        {\r\n            if (this.disposed)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (disposing)\r\n            {\r\n                // Dispose managed resources.\r\n                this.sessionFactory.RemoveSessionForCurrentThread();\r\n                this.transactionScope.Dispose();\r\n                if (!this.complete)\r\n                {\r\n                    throw new Exception();\r\n                }\r\n            }\r\n\r\n            this.disposed = true;\r\n        }\r\n\r\nWhy do we need to throw an exception here?\r\nI thought the `transactionScope.Dispose();` will throw if `transactionScope.Complete()` is not called.\r\n\r\nChange was made in https://github.com/NServiceBus/NServiceBus/commit/e9968254d7e2c6eded395b0e30b33bebd2f9f3bc\r\n\r\nAlso even if it is meant to throw an exception can we have an exception message message rather than a raw exception?'
1367,'',"Remove actions in Bus.Start()\nThe `startupAction` parameter of `UnicastBus.Start`simply executed the action immediately before the actual start of the bus. This provided no real value since a consumer can simply execute said action prior to calling `Start`.\r\n\r\n--\r\n\r\nFor example:\r\nThe code below is used to go ahead and create queues, or call the installer on startup as opposed to at install time:\r\n\r\n    Bus = NServiceBus.Configure.With()\r\n     .DefaultBuilder()\r\n     .UseTransport<Msmq>()\r\n      .PurgeOnStartup(false)\r\n     .UnicastBus()\r\n     .CreateBus()\r\n     .Start(() => Configure.Instance.ForInstallationOn<NServiceBus.Installation.Environments.Windows>().Install());\r\n\r\nIt seems like a bad practice to be able to invoke installers every time the thing is started as opposed to just once at install time.\r\n\r\nIf there are startup actions, can they not be specified by `IWantToRunWhenBusStartsAndStops` ? \r\nIs there a similar interface for custom hosts that will allow to specify startup actions for custom hosts or if not why can't we do the same initialization behavior for both generic and custom hosts? \r\n\r\n@SimonCropp @johnsimons @andreasohlund @udidahan -- Thoughts?? "
1366,'','Remove .RunCustomAction()\n--\r\n\r\nRunCustomAction method was used when there was a need to override only a single value of a configuration section and otherwise want the configuration section to remain the same.\r\nThis is from the 2.x days.\r\n\r\n```\r\n    NServiceBus.Configure.With()\r\n...\r\n     .UnicastBus()\r\n      .RunCustomAction(() => \r\n          Configure.Instance.Configurer.ConfigureProperty<MsmqTransport>(mt =>mt.Address, "someQueue")\r\n       )\r\n      .CreateBus()\r\n     .Start();\r\n```\r\n\r\nWe now have `INeedInitialization`, `IProvideConfiguration<T>`\r\nDo we still need .RunCustomAction? Or we get rid of it?'
1365,'','DynamicEndpointRunner should use WaitForExit\nso here https://github.com/NServiceBus/NServiceBus/blob/develop/src/azure/Hosting/NServiceBus.Hosting.Azure/DynamicHost/DynamicEndpointRunner.cs#L79\r\n\r\nWhat is the value of using `ManualResetEvent` and the `Exit` event rather than `WaitForExit`  \r\n\r\nping @yvesgoeleven \r\n\r\nraised by @chrisbednarski here  https://github.com/NServiceBus/NServiceBus/pull/1355'
1364,'','Configure.With().DefineEndpointName("CustomEndPointName") is not taken into account for servicename when you install the service\nThe INameThisEndpoint has been marked obsolete in the Nservicebus 4.0.1. However, We want dynamic end point naming and we are using DefineEndPointName as shown below. The issue is when you install your service, the service name takes "Namespace" by default and does not take into account of the configured endpoint name. The workaround is to supply the endpointname as part of the install. But thats a tedious manual workaround considering our need for dynamic endpoint naming. \r\n\r\nThe suspected issue might be in https://github.com/NServiceBus/NServiceBus/blob/674e72332041177e2f0385a85728c611adf6271f/src/hosting/NServiceBus.Hosting.Windows/EndpointType.cs\r\nfor property public string EndpointName\r\n\r\nThis is our EndPointConfig. \r\n\r\npublic class EndpointConfig : IConfigureThisEndpoint, AsA_Server, IWantCustomInitialization\r\n    {\r\n\t    public void Init()\r\n\t    {\r\n\t        Configure.With().DefineEndpointName("sanilsEndPoint");\r\n\t    }\r\n    }\r\n\r\nSteps to Reproduce\r\n-----------------------------\r\n1. .\\NServiceBus.Host.exe /install\r\n2. check the service name'
1363,'','UnicastBus.Defer should not have any time related logic\nI refactored all time related stuff out of UnicastBus. For that I had to create a second overload in IDeferMessages, that takes TimeSpan delay as a parameter instead of DateTime processAt.\r\n\r\nThis change makes it much easier to create a time simulation feature (by creating a custom MessageDeferrer only).\r\nAs a result #1353, which I will close, becomes obsolete.'
1362,'',"Fix dispose implementations \nSo we had a bug that caused an infinite Dispose loop see #1358 \r\n\r\nThis was fixed on the 4.0.2 branch as part of this commit https://github.com/NServiceBus/NServiceBus/commit/71aa8ae3b50711c150614b6af15792c5d3425bd1 however this is still not correct. It should actually be a thread safe implementation like how Windsor does it\r\n\r\nSo tasks (on the `develop` branch). \r\n\r\n- [x] Make Dispose implementations thread safe like how Windsor does it https://github.com/castleproject/Windsor/blob/master/src/Castle.Windsor/Core/Internal/ThreadSafeFlag.cs\r\nhttps://github.com/castleproject/Windsor/blob/master/src/Castle.Windsor/MicroKernel/DefaultKernel.cs#L234\r\n\r\n- [x] Pull in the unit test for circular references in containers https://github.com/NServiceBus/NServiceBus/commit/74e7d43cde02dcb649a2c1d042e890aba28dedbe\r\n\r\n- [x] For classes that don't have unmanaged resource remove the `isDisposing` noise code\r\n"
1361,'','Decommision workers from distributor\n### Procedure to decommission Workers\r\n\r\n1. Stop worker endpoint\r\n2. Set `MaximumConcurrencyLevel` to 0 in worker config file:  \r\n```xml\r\n<TransportConfig MaximumConcurrencyLevel="0" />\r\n```\r\n\r\n3. Delete from distributor storage all ready messages for the worker that is being decommissioned, to do this look in Msmq for a queue called **YourEndpointName.distributor.storage**\r\nThen delete all messages that contain the name of the worker as the response, eg\r\n![image](https://f.cloud.github.com/assets/122651/876209/ddc4b74a-f8bf-11e2-884e-f787fc73f14f.png)\r\n\r\n4. Start the worker\r\n5. Wait for worker to drain all queued messages in input queue\r\n6. Stop worker\r\n7. Do the happy dance :dancers: \r\n\r\n### Issues with current procedure\r\n- Step number 2 above doesn\'t actually work! It throws an exception :disappointed: \r\n- There are a lot of steps!'
1360,'',"Dispense with saga data and declare properties right on saga itself.\nFor the record, this is @andreasohlund 's crazy idea, but sagas as POCOs would be really nice!\r\n\r\nNaming collisions between Saga's built in method/property names and saga data would be a potential problem, as well as a backwards compatibility story."
1359,'','Use parent and internal class name to define saga data table/document\nFrom email conversation with @andreasohlund \r\n\r\nCurrently guidance on saga data is to make it an internal class of the saga, but the saga data class name is the only thing used to determine the database table or document name.\r\n\r\nSo if you have the saga VerifyUserEmailPolicy and make your internal class simply SagaData (to get Saga<VerifyUserEmailPolicy.SagaData>) then the database table or Raven doc name would only be "SagaData" which could lead to problems.\r\n\r\nSo you\'d have to have VerifyUserEmailPolicy.VerifyUserEmailPolicySagaData. Yuck.\r\n\r\nShould be able to use Type\'s FullName to get VerifyUserEmailPolicy+SagaData and mutate that into a proper table/document name, which just leaves how to support backwards compatibility.\r\n'
1358,'','Installing as a Windows service with Unity Builder throws stackoverflow exception with NServicebus 4.0.1\nWe upgraded nservicebus from 3.3.5 to 4.0.1. The code that we suspect is the cause of this issue is https://github.com/NServiceBus/NServiceBus/blob/master/src/impl/ObjectBuilder/ObjectBuilder.Unity/UnityObjectBuilder.cs  protected virtual void Dispose(bool disposing) method and the way disposed = true is set. \r\n\r\nHere are the steps to reproduce.\r\n1. Create a Project\r\n2. Add Nservicebus through nugget\r\n3. Configure EndPoint\r\n\r\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Server, IWantCustomInitialization\r\n        {\r\n\t        public void Init()\r\n\t        {\r\n\t            Configure.With().UnityBuilder();\r\n    \t        }\r\n        }\r\n\r\n4. Install Service (  .\\NServiceBus.Host.exe /install)\r\n5. StackOverFlow Exception\r\n\r\n![1](https://f.cloud.github.com/assets/484817/873091/afb11c9e-f870-11e2-9873-a5ae8fc374f9.png)\r\n![2](https://f.cloud.github.com/assets/484817/873090/afae7d4a-f870-11e2-8e2a-94c000bb0346.png)'
1357,'','Enable hosting multiple nsb-runtimes in the same appdomain\nNSB has a lot of statics that make it hard to have multiple instances running in one appdomain (also for integration tests).\r\n\r\nA new ambient context `NsbRuntime.Current` with a possibility to resolve and register singletons (wrapping the container) could help moving away slightly.\r\n\r\n```csharp\r\nusing (NsbRuntime.New()){\r\n    // ConfigureNsb....\r\n}\r\n```'
1356,'','AzureServiceBusTransport transaction still defaults to IsolationLevel.Serializable!\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/azure/NServiceBus.Azure/Transports/ServiceBus/Config/AzureServiceBusTransport.cs#L48\r\n\r\nWe should change this to the same default as v4 Core, `IsolationLevel.ReadCommitted`.\r\n\r\n/cc @andreasohlund ? '
1355,'','Dont throw when we cant find the process to kill\nfixes #1264'
1354,'',"[NSB4] Azure ServiceBus and Windows ServiceBus Transports fails to subscribe to derived classes\nThe scenario, from the topology pont of view, is equal to the AzureServiceBusPubSub sample, I failed to use the sample to repro the scenario because the downloaded (http://particular.net/articles/windows-azure-transport) sample does not work at all.\r\n\r\nScenario:\r\n- web app sending commands and subscribing to events (to push to clients via SignalR);\r\n- worker role receiving commandfs and publishing events;\r\n- running in Azure or on premise using Windows ServiceBus;\r\n\r\nEverything works fine if I explicitly define in the web app an handler for each published event, such as:\r\n\r\n//this works as expected\r\nclass FooHandler : IHandleMessages<FooEvent>{}\r\n\r\nbut, since there are tons of events and the web app is not interested in specific events, the client is, we have all the events implementing the IMyEvent interface in order to be able to create one single handler, a catch all handler in the web app whose role is to republish to SignalR everything:\r\n\r\nclass CatchAllHandler : IHandleMessages<IMyEvent>{}\r\n\r\nthat handler is never called, I was expecting the above to work (using MSMQ as a transport it works as expected).\r\n\r\nThe same behavior occurs both on Azure ServiceBus and on Windows ServiceBus transport for NSB 4, digging deeper to me it is a bug in the way transports (ServiceBus based) handles the topics filtered subscription.\r\n\r\nWhen the bus starts all the message handlers founds in the current “bin” are parsed and in the above scenario NSB notice that there is a message handler interested in “IMyEvent” when the AutoSubscriber feature kicks in the feature asks to the MessageHandlerRegistry to get all the messages the hosting process is subscribed to, in the above case just one: IMyEvent, with this information the AutoSubscriber goes to the bus and asks to create a subscription for IMyEvent, the bus asks to the UnicasBus configuration where the subscription should be made and the subscription is created.\r\nWhen dealing with the service bus (Azure or Windows) the subscription is a topic with a filter (SqlFilter) on the message type in the above scenario, the one using IMyEvent, the filter is something like:\r\n\r\n[NServiceBus.EnclosedMessageTypes] LIKE 'namespace…IMyEvent, assembly, blabla%'\r\nOR [NServiceBus.EnclosedMessageTypes] LIKE '%namespace…IMyEvent, assembly, blabla%'\r\nOR [NServiceBus.EnclosedMessageTypes] LIKE '%namespace…IMyEvent, assembly, blabla' \r\nOR [NServiceBus.EnclosedMessageTypes] = 'namespace…IMyEvent, assembly, blabla'\r\n\r\nLooking at the above query is pretty obvious that when looking at the subscriptions from the publisher point of view (well from the TopicClient sender) no one is subscribed to a concrete message.\r\n\r\nIn my scenario I would say that the expected behavior should be that the MessageHandlerRegistry detects, given a message handler type, all the possible derived types of a subscribed message, or much better this should be done when the subscription is created, e.g. in Azure in the AzureServicebusSubscriptionClientCreator class (line 51 -> 58).\r\n\r\nSo, after this looooong digression I see 2 problems:\r\n- in all cases the above filter is wrong, it has too many clauses, we are subscribing using the full type name why do we need all those likes? the last condition is enought;\r\n- the condition, if is the right place, shoud take in account types derived from IMyEvent;"
1353,'','Use an overridable abstraction for Time instead of DateTime.UtcNow\nSee #1351 for initial discussion.'
1352,'andreasohlund',"Only implicitly create exchanges for types being published. Limit queue ...\n# Background\r\n We are having a non-NServiceBus endpoint integrate with an NServiceBus endpoint over RabbitMQ. The non-NServiceBus endpoint application creates a temporary queue/exchange pair for itself, does the equivalent of a `Bus.Send` to the NServiceBus endpoint, expecting a response on the temporary exchange. However, when the NServiceBus endpoint does `Bus.Reply`, it first tries to create a queue/exchange pair for the recipient and fails because they have already been created, but are temporary instead of permanent.\r\n\r\n# Fix\r\nThis change makes it so that `Bus.Send` and `Bus.Reply` do not implicitly attempt to create queue/exchange pairs for the recipient. Only exchanges for the types being published are created implicitly.\r\n\r\n# Impact\r\n* If the recipient of a `Bus.Send` or a `Bus.Reply` does not exist, this will raise an exception. This behavior is in line with the MSMQ endpoint and I think is what we'd expect when we send a command to an endpoint. Queues will only get created by the subscribers that read from them."
1351,'','Time simulation feature\nWe have implemented a time simulation feature in our ongoing project. It lets us run business processes that normally last for weeks in just a few minutes and still showing "proper" dates. The way we do this, is by never using DateTime.Now, but always use an IClock interface that has a single property: Now.\r\n\r\nAs default there is a SystemClock (which Now returns DateTime.Now). When simulation is activated, we replace the system clock with a simulation clock.\r\n\r\nThe simulated clock always has a virtual time and a real time. Normally we start the simulation with both times being Now, and then the virtual time would be maybe a thousand times faster than the real time.\r\n\r\nTo activate the simulation, we just configure it on our "developer panel" in the UI and all commands executed as long as it is active are tagged with a header identifying the simulation context.\r\nThe settings for the context are stored in a database, and all messages sent while the given context is active will maintain the simulation header so that the simulation module can load them before the messages are being handled.\r\n\r\nSince we want deferred messages to obey the simulation, we had to wrap the UnicastBus in order to let Defer work properly. Defer is always called with the virtual time (none of our business components knows the simulation concept), but as long as the simulation is active, we translate the virtual time to the real time in order to get the message delivered in a few seconds/minutes instead of hours/days.\r\n\r\n\r\nThis is the essence of what our wrapper does:\r\n\r\n```\r\npublic new ICallback Defer(DateTime virtualTime, params object[] messages)\r\n{\r\n    DateTime realTime;\r\n    if (_simulation.IsActive)\r\n    {\r\n        realTime = _simulation.VirtualToReal(virtualTime);\r\n        NServiceBusSimulationIntegration.SetTimeoutMessageHeader(messages.First(), virtualTime);\r\n    }\r\n    else\r\n    {\r\n        realTime = virtualTime;\r\n    }\r\n    return _bus.Defer(realTime, messages);\r\n}\r\n```\r\n\r\nNow I have two questions:\r\n\r\n1. Does the community have interest in such a feature, and is it something that is wanted as a feature in NSB?\r\n2. Would you be willing to at least adopt the IClock interface and use it inside NSB? As far as I can tell it is a 100 % non-breaking and binary compatible change...\r\nThat way we could get rid of our ugly wrapper, and it would open up for easily making such a simulation concept even if it is not a part of NSB (could be a contrib or sample).\r\n\r\nWe could help making the necessary changes - at least introducing IClock. The full simulation concept is a bit heavier and also depends a bit on the rest of our infrastructure, so I guess it should at least be discussed before it is integrated. It might suit better as a sample.'
1349,'yvesgoeleven','Throw fatal exception when attempting to subscribe to a Azure topic that does not exist\nThrow fatal exception when attempting to subscribe to a topic that does not exist (currently silently ignored)\r\n\r\nsplit from #1299'
1348,'','add OriginatingEndPointVersion header\nfixes #1035\r\n\r\n@johnsimons code review'
1347,'','Deferred send \nfor issue #395'
1346,'',"Obsolete sending and publishing batches of messages together in a single call\nEach of the messaging APIs that involve multiple messages on `IBus` have been removed. Below is the table on how to replace these.\r\n\r\n| Old Method | Replacement Method | \r\n:--- |:--- | \r\n| Publish<T>(T[] messages); | Publish<T>(T message); |\r\n| SendLocal(object[] messages); | SendLocal(object message); |  \r\n| Send(object[] messages); | Send(object message); |\r\n| Send(string destination, object[] messages); | Send(string destination, object message); |\r\n| Send(Address address, object[] messages); | Send(Address address, object message); |\r\n| Send(string destination, string correlationId, object[] messages); | Send(string destination, string correlationId, object message); |\r\n| SendToSites(IEnumerable<string> siteKeys, object[] messages); | SendToSites(IEnumerable<string> siteKeys, object message); |\r\n| Defer(TimeSpan delay, object[] messages); | Defer(TimeSpan delay, object message); |\r\n| Defer(DateTime processAt, object[] messages); | Defer(DateTime processAt, object message); |\r\n| Reply(object[] messages); | Reply(object message); |\r\n\r\n\r\n--\r\n\r\nWe have had a poll on this and the results are in favour to get rid of this functionality.\r\n## Poll results:\r\nChoices | Votes | %\r\n:--- | --- | ---\r\nNot at all - I don't use it | 35 | 61\r\nVery little - I use it in a couple of places, but it wouldn't be difficult to change them\t | 19 | 33\r\nImpacted - I'm using it quite a bit so there would be a fair bit of cleanup to do\t | 1 | 1\r\nIt's the end of the world - I really depend on this feature and if it weren't there, I'd have to evaluate whether to keep using NServiceBus | 2 | 3\r\n\r\n\r\nIt was then decided to leave this feature as it is for v4, and instead change it for v5.\r\n\r\n@udidahan last comment is:\r\n>In v5.0 we’ll provide a session instead.\r\n\r\nI assume this means something like how ASP.NET has a SessionId header?\r\n\r\nShould we make a spike on how to solve this issue using a session?"
1345,'','IBus.Defer does not accept interface constructors\nSo these methods\r\n\r\n        ICallback Defer(TimeSpan delay, params object[] messages);\r\n        ICallback Defer(DateTime processAt, params object[] messages);\r\n\r\nDont have the ability to take an interface as a message. \r\n\r\nShould we implement this?'
1344,'','Move WorkerRunsOnThisEndpoint into Bus.Send\nSo `UnicastBus.SendLocal` looks like this\r\n\r\n\r\n        ICallback IBus.SendLocal(params object[] messages)\r\n        {\r\n            //if we\'re a worker, send to the distributor data bus\r\n            if (Configure.Instance.WorkerRunsOnThisEndpoint())\r\n            {\r\n                return ((IBus)this).Send(MasterNodeAddress, messages);\r\n            }\r\n\r\n            return ((IBus)this).Send(Address.Local, messages);\r\n        }\r\n\r\nbut this disagrees `IBus.SendLocal`.\r\n\r\n        /// <summary>\r\n        /// Sends the list of messages back to the current bus.\r\n        /// </summary>\r\n        /// <param name="messages">The messages to send.</param>\r\n        ICallback SendLocal(params object[] messages);\r\n\r\nSo i propose that in `UnicastBus.Send` should contain the `WorkerRunsOnThisEndpoint` wrapped in a `Address.Local == Machine.Address`\r\n\r\nThen we update the doco for `UnicastBus.Send` to reflect this'
1343,'','Separate config time from running time\nThis is quite a large task.\r\nIt needs to be backwards compatible.\r\n\r\nWe have slowly started introducing a new configuration api in v4.\r\n\r\nThe aim of this issue is to complete this new configuration api.\r\n\r\nWe need to define all the tasks required to complete this issue.'
1342,'andreasohlund','Allow user to control LockMode in NHibernate sagas\nThis issue is based on #1225 \r\n\r\n### Proposed solution\r\n- [x] Introduce a new attribute `LockMode` to specify the lock per Saga class. Options are the ones that comes with NHibernate\r\n- [x] Use the default `LockMode.UpdateLock` if no attribute\r\n- [x] Add the code fix, see https://github.com/NServiceBus/NServiceBus/pull/1225/files \r\n- [x] Add code fix [here](https://github.com/NServiceBus/NServiceBus/blob/master/src/nhibernate/NServiceBus.NHibernate/SagaPersisters/NHibernate/SagaPersister.cs#L41) too'
1341,'andreasohlund','Split azure into its own repository\n@andreasohlund thoughts?'
1340,'',"NLog configuration without passing in Targets\nI'm trying to use NLog and since I have a separate NLog.config with configuration and everything, I was expecting to be able to configure it like this:\r\n\r\n```\r\nNServiceBus.Configure\r\n          .With()\r\n          .NLog()\r\n```\r\nbut this throws on runtime:\r\n\r\n2013-07-25 09:47:17.6420 Error Error: System.ArgumentException: Must not be empty.\r\nParameter name: targetsForNServiceBusToLogTo\r\n   at NServiceBus.SetLoggingLibrary.NLog(Configure config, Object[] targetsForNServiceBusToLogTo) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\SetLoggingLibrary.\r\n\r\nNow if I pass in even a NullLogger, it all works fine and the targets I have configured in the config files are picked up, so two issues:\r\n\r\n-Why passing in a Target is necessary?\r\n-If it is necessary, the API is a bit misleading as it expects it as params[] where you can just ignore. "
1339,'indualagarsamy','Does Auditing need its own configuration section, rather than using UnicastBusConfig?\nWhy is Auditing configuration stored in `UnicastBusConfig`?\r\n\r\nThe two properties, `ForwardReceivedMessagesTo` and `TimeToBeReceivedOnForwardedMessages` are currently stored in `UnicastBusConfig`.\r\n\r\nWe are currently planning to move Audit as its own feature, related GH #1309 \r\nShould we create `MessageAuditingConfig` and add these two properties to this new config section and obsolete the ones in `UnicastBusConfig`?\r\n\r\n\r\n'
1338,'','MSMQ Message label - How about setting it to the message type?\nSince MSMQ message label are set in V4,  (   https://github.com/NServiceBus/NServiceBus/issues/1336 ) how about setting them to the message type,  it would certainly help when wading through queue and journals '
1337,'','upgrade to Castle Windsor 3.2.1 to fix scoping lifetimes when used in Azure\nFrom the [Castle Windsor Release Notes](http://www.castleproject.org/blog/2013/07/castle-windsor-3-2-1-bugfix-release/)\r\n\r\n>It fixes a problem some users encountered, when CallContext scoped lifestyle is used in certain cross-AppDomain contexts. It specifically affected users of some testing framework or NServiceBus when deployed to Azure. The bug would manifest itself with the following exception:\r\n\r\n    SerializationException — Type is not resolved for member\r\n    “Castle.MicroKernel.Lifestyle.Scoped.CallContextLifetimeScope+SerializationReference,    \r\n    Castle.Windsor, Version=3.2.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc”'
1336,'','Missing MSMQ Labels since upgrading to 4.0.1 from 4.0 RC\nSince moving from version 4 RC to 4.0.1 stable  new MSMQ messages no longer show a label when the queue is viewed using Queue  Explorer Pro\r\n\r\n![capture](https://f.cloud.github.com/assets/2351700/845941/038c77d6-f3f9-11e2-8327-0c3550d7c773.PNG)\r\n'
1335,'','Renaming of MessageRegistry\n * Rename property `UnicastBus.MessageRegistry` to `UnicastBus.MessageMetadataRegistry` \r\n * Delete `IMessageRegistry` and `DefaultMessageRegistry`  to be replaced with `MessageMetadataRegistry` '
1334,'','RecoverableAttribute is not used\nWill mark as obsolete'
1333,'','Embed T4 in our package and dont reference it is a nuget\nReasons\r\n\r\n1. We are leaking implementation details. We should not force a reference to T4 on anyone who uses our package\r\n2. It is currently crashing\r\n\r\nFor example\r\n\r\n    Set-DefaultScaffolder : Object reference not set to an instance of an object.\r\n    At C:\\Code\\NServiceBus\\NServiceBus\\packages\\T4Scaffolding.Core.1.0.0\\tools\\init.ps1:50 char:9\r\n             Set-DefaultScaffolder -Name CustomTemplate -Scaffolder T4Scaffolding.Cus ...\r\n    CategoryInfo          : NotSpecified: (:) [Set-DefaultScaffolder], NullReferenceException\r\n     FullyQualifiedErrorId : T4Scaffolding.Cmdlets.SetDefaultScaffolderCmdlet\r\n\t '
1332,'','upgrade ObjectBuilder.Unity project to .net 4.5\nno point in staying on 4 since the latest version of unity (3.0.1304.0) requires 4.5\r\n\r\n@johnsimons @andreasohlund  any objections?'
1331,'','Add NServiceBus.Powershell on nuget\nnuspec definition for NServiceBus.PowerShell\r\n\r\nfixes #1308 '
1330,'','Nuget package calls particular website with wrong version number\nThe parameter "version=4.0.0" at the end of the URL called at the end of a nuget installation is not up-to-date with the nuget package version.\r\n\r\n\r\nhttp://particular.net/articles/preparing-your-machine-to-run-nservicebus?dtc=true&msmq=true&raven=true&perfcounter=true&installer=nservicebus&method=nuget&version=4.0.0'
1329,'','Split Transports + Notifications into their own repos\nWe need to move the Transports + Notifications into their own repos.\r\n\r\nWe need to setup Ripple to handle dependencies.\r\n\r\nwe also need to figure our if we are reusing the PS script to handle:\r\n- Assemblyinfo patching\r\n- Nuget package building\r\n- ILMerge\r\n'
1328,'','Split the Acceptance test framework into its own repo\nAnd then use Ripple to handle dependencies.'
1327,'','AzureConfigurationSettings throws many exceptions \nin AzureConfigurationSettings\r\n\r\nthis throw a significant number of exceptions for the same setting.\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/azure/NServiceBus.Azure/ConfigurationSource/Azure/AzureConfigurationSettings.cs#L21\r\n\r\n    Microsoft.WindowsAzure.ServiceRuntime.RoleEnvironmentException occurred\r\n      HResult=-2147467259\r\n      Message=error\r\n      Source=Microsoft.WindowsAzure.ServiceRuntime\r\n      StackTrace:\r\n           at Microsoft.WindowsAzure.ServiceRuntime.RoleEnvironment.ErrorIfFailed(Int32 hr)\r\n      InnerException: \r\n\r\nShould cache. or handle in some kind of `try get` code\r\n\r\nto repro use AzurePubSub and `break on all exceptions`'
1326,'','Powershell commands should not assume elvated\nCurrently the powershell commands assume elevated privileges. eg to write to the registry. They should check for elevated and give a friendly error'
1325,'johnsimons','Add extra params to url that is opened from nuget\nAdd the following extra params to https://github.com/NServiceBus/NServiceBus/blob/master/NuGet/NServiceBus/tools/init.ps1#L78\r\n\r\nNeed to add:\r\n**&installer=NServicebus&version=x.y.z&method=nuget**'
1324,'johnsimons','Update nugets to not reference a specific NSB version\nThe following nugets need to be updated:\r\n- NServiceBus.ActiveMQ\r\n- NServiceBus.Notifications\r\n- NServiceBus.RabbitMQ\r\n- NServiceBus.SqlServer\r\n\r\nWe need to change the nuget from:\r\n`<dependency id="NServiceBus" version="4.0.0-alpha0" />`\r\nto:\r\n`<dependency id="NServiceBus" version="[4.0.0-alpha0,5)" />`'
1323,'johnsimons','Saga with RequestTimeout crashes with an item with the same key has already been added\nI migrated my sample to NSB 4.0.1. It can be found here:\r\n\r\nhttps://github.com/danielmarbach/nservicebus.introduction\r\n\r\nWhen I order a facility the facility endpoint saga blows up with the following exception:\r\n\r\nFacilitySaga failed handling message.\r\nSystem.ArgumentException: An item with the same key has already been added.\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at NServiceBus.MessageHeaders.MessageHeaderManager.NServiceBus.MessageMutator.IMutateOutgoingTransportMessages.MutateOutgoing(Object[] messages, TransportMessage transportMessage) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\MessageHeaders\\MessageHeaderManager.cs:line 20\r\n   at NServiceBus.Unicast.UnicastBus.InvokeOutgoingTransportMessagesMutators(Object[] messages, TransportMessage result) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1420\r\n   at NServiceBus.Unicast.UnicastBus.MapTransportMessageFor(IList`1 rawMessages, TransportMessage result) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1379\r\n   at NServiceBus.Unicast.UnicastBus.Defer(DateTime processAt, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 561\r\n   at NServiceBus.Unicast.UnicastBus.Defer(TimeSpan delay, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 541\r\n   at NServiceBus.Saga.Saga`1.RequestTimeout[TTimeoutmessageType](TimeSpan within, TTimeoutmessageType timeoutMessage) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus\\Saga\\Saga.cs:line 184\r\n   at NServiceBus.Saga.Saga`1.RequestUtcTimeout[TTimeoutmessageType](TimeSpan within, TTimeoutmessageType timeoutMessage) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus\\Saga\\Saga.cs:line 251\r\n   at NServiceBus.Saga.Saga`1.RequestTimeout[TTimeoutmessageType](TimeSpan within) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus\\Saga\\Saga.cs:line 163\r\n   at SiriusCyberneticsCorp.Facility.FacilitySaga.Handle(Ordered message) in c:\\Projects\\nservicebus\\nservicebus.introduction\\SiriusCyberneticsCorp.Facility\\FacilitySaga.cs:line 33\r\n   at lambda_method(Closure , Object , Object )\r\n   at NServiceBus.Unicast.HandlerInvocationCache.Invoke(Object handler, Object message, Dictionary`2 dictionary) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\HandlerInvocationCache.cs:line 61\r\n   at NServiceBus.Unicast.HandlerInvocationCache.InvokeHandle(Object handler, Object message) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\HandlerInvocationCache.cs:line 22\r\n   at NServiceBus.Sagas.SagaDispatcherFactory.<>c__DisplayClass4.<GetDispatcher>b__0() in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Sagas\\SagaDispatcherFactory.cs:line 78\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass2f.<DispatchMessageToHandlersBasedOnType>b__2a(Action dispatch) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1095\r\n\r\nThe saga code is pretty straight forward:\r\n\r\n        public void Handle(Ordered message)\r\n        {\r\n            this.Data.FacilityId = message.FacilityId;\r\n            this.Data.OrderId = message.OrderId;\r\n            string facilityId = this.Data.FacilityId.ToString("N");\r\n            this.Data.Name = string.Format("VHPT-{0}", facilityId.Substring(0, 6)).ToUpper();\r\n\r\n            Console.WriteLine("Installing facility {0} with name {1} for order {2}.", this.Data.FacilityId, this.Data.Name, this.Data.OrderId);\r\n\r\n            // This is only for simulation\r\n            this.RequestTimeout<ReadyToInstall>(TimeSpan.FromSeconds(5));\r\n        }\r\n\r\nReadyToInstall is a poco message which is not mapped anywhere:\r\n\r\n    public class ReadyToInstall\r\n    {\r\n    }\r\n\r\nThe problem is that the Saga base class sets the following headers:\r\n\r\n            Headers.SetMessageHeader(toSend, Headers.SagaId, Data.Id.ToString());\r\n            Headers.SetMessageHeader(toSend, Headers.IsSagaTimeoutMessage, Boolean.TrueString);\r\n            Headers.SetMessageHeader(toSend, Headers.SagaType, GetType().AssemblyQualifiedName);\r\n\r\nWhich then sets the headers dictionary and when the message is sent it already contains those headers but the MessageHeaderManager wants to readd those to the message:\r\n\r\n![image](https://f.cloud.github.com/assets/174258/828249/fb61a6d6-f0af-11e2-9a75-97987e1948f3.png)\r\n\r\n![image](https://f.cloud.github.com/assets/174258/828250/0437b5b6-f0b0-11e2-8984-ac0d5cf25ef2.png)\r\n'
1322,'','Configure.Transactions.Disable does not entirely disable transactional behavior using Azure Queues Transport\nPer [discussion](https://groups.google.com/forum/#!topic/nservicebus/17oRvsFHThU) on the group, a call to Configure.Transactions.Disable() should be sufficient to disable all transactional behavior for the Azure Queues transport.\r\n'
1321,'','Static nature of Test.Initialize prevents parallel tests\nSince `Test.Initialize` sets some static state it effectively prevents us from running tests  in parallel https://github.com/NServiceBus/NServiceBus/blob/master/src/testing/Test.cs#L37'
1320,'','Cache subscribers list to improve performance\n### Background\r\nAt the moment we are querying the storage every time we publish a message to retrieve the list of subscribers.\r\nBut this list does not actually change that much frequently once the endpoint is started.\r\nSo it is a good candidate for some good old caching :wink: \r\n\r\n### Proposed Solution\r\n* [ ] Have a background thread that keeps in sync a cached list of subscribers\r\n\r\n* [ ] Make this polling configurable with something like:\r\n```xml\r\n<appSettings>   \r\n   <add key="NServiceBus/Publisher/SubscribersListPollingInterval" value="# of seconds"/>\r\n</appSettings>\r\n```\r\n* [ ] Make default polling interval 60 secs ?\r\n* [ ] At start-up we may need to poll more frequently because we may be receiving subscriber requests (this is true specially while debugging pub/sub sample).\r\nSo maybe we pool every 5 secs for the first minute and then change it to use the set polling interval.  '
1319,'','Raven going down crashes NServiceBus\nWe had an issue with one of our clustered boxes that caused the Raven cluster to flip nodes. During the flip raven was unavailable for a bit and all of our endpoints (13 of them) crashed with the following error messages.\r\n\r\nThis was in the log:\r\n```\r\n2013-07-17 19:41:05,533 [ 38] ERROR RavenTimeoutPersistence - Exception occurred while trying to access Raven Database: [http://<snip>:8080 (DB: <snip>)] at [http://<snip>:8080]. You can check Raven availability at its console at http://localhost:8080/raven/studio.html (unless Raven defaults were changed), or make sure the Raven service is running at services.msc (services programs console).\r\n2013-07-17 19:41:05,533 [ 38] FATAL TimeoutPersisterReceiver - Polling of timeouts has failed the maximum number of times.\r\nSystem.Net.WebException: Unable to connect to the remote server ---> System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it <snip>:8080\r\n   at System.Net.Sockets.Socket.DoConnect(EndPoint endPointSnapshot, SocketAddress socketAddress)\r\n   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket& socket, IPAddress& address, ConnectSocketState state, IAsyncResult asyncResult, Int32 timeout, Exception& exception)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.HttpWebRequest.GetResponse()\r\n   at Raven.Client.Connection.HttpJsonRequest.ReadStringInternal(Func`1 getResponse)\r\n   at Raven.Client.Connection.HttpJsonRequest.ReadResponseString()\r\n   at Raven.Client.Connection.ServerClient.DirectQuery(String index, IndexQuery query, String operationUrl, String[] includes)\r\n   at Raven.Client.Connection.ServerClient.<>c__DisplayClass3e.<Query>b__3d(String u)\r\n   at Raven.Client.Connection.ServerClient.TryOperation[T](Func`2 operation, String operationUrl, Boolean avoidThrowing, T& result)\r\n   at Raven.Client.Connection.ServerClient.ExecuteWithReplication[T](String method, Func`2 operation)\r\n   at Raven.Client.Connection.ServerClient.Query(String index, IndexQuery query, String[] includes)\r\n   at Raven.Client.Document.AbstractDocumentQuery`2.ExecuteActualQuery()\r\n   at Raven.Client.Document.AbstractDocumentQuery`2.InitSync()\r\n   at Raven.Client.Document.AbstractDocumentQuery`2.get_QueryResult()\r\n   at Raven.Client.Linq.RavenQueryProviderProcessor`1.ExecuteQuery[TProjection]()\r\n   at Raven.Client.Linq.RavenQueryProviderProcessor`1.Execute(Expression expression)\r\n   at Raven.Client.Linq.RavenQueryProvider`1.Execute(Expression expression)\r\n   at Raven.Client.Linq.RavenQueryProvider`1.System.Linq.IQueryProvider.Execute(Expression expression)\r\n   at Raven.Client.Linq.RavenQueryInspector`1.GetEnumerator()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at NServiceBus.Timeout.Hosting.Windows.Persistence.RavenTimeoutPersistence.GetNextChunk(DateTime startSlice, DateTime& nextTimeToRunQuery)\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll()\r\n```\r\nAnd this was in Event Viewer:\r\n```\r\nApplication: NServiceBus.Host.exe\r\nFramework Version: v4.0.30319\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.Net.WebException\r\nStack:\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll()\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```\r\n\r\nIt should be able to recover gracefully when Raven comes back up and it should not bring down the endpoints. We are running versions 3.3.5 - 3.3.8 and they all crashed.'
1318,'','AssertOutgoingHeader marked as obsolete but has no implemntation\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/testing/Handler.cs#L67\r\n\r\n        [ObsoleteEx(RemoveInVersion = "5.0", TreatAsErrorFromVersion = "4.0")]\r\n        public Handler<T> AssertOutgoingHeader(string key, string value)\r\n        {\r\n            return this;\r\n        }\r\n\r\nObsolete mean "we will be removing it" no "it is now a no-op".\r\n\r\nSo @johnsimons @andreasohlund  should I delete this? or is there some implementation you want put back in?'
1317,'','Significant slow down in NServiceBus.Testing between V3 and v4\nSo on my machine the below takes 500ms in v3 and 12s in v4\r\n\r\n        [Test]\r\n        public void Run()\r\n        {\r\n            Test.Initialize();\r\n\r\n            Test.Handler<YourMessageHandler>()\r\n                .ExpectReply<YourResponseMessage>(m => m.String == "hello")\r\n                .OnMessage<YourRequestMessage>(m => m.String = "hello");\r\n        }\r\n\r\n        public class YourMessageHandler :\r\n            IHandleMessages<YourRequestMessage>\r\n        {\r\n            public IBus Bus { get; set; }\r\n\r\n            public void Handle(YourRequestMessage message)\r\n            {\r\n                var reply = new YourResponseMessage\r\n                            {\r\n                                String = message.String\r\n                            };\r\n                Bus.Reply(reply);\r\n            }\r\n        }\r\n\r\n        public class YourResponseMessage : IMessage\r\n        {\r\n            public string String { get; set; }\r\n        }\r\n\r\n        public class YourRequestMessage : IMessage\r\n        {\r\n            public string String { get; set; }\r\n        }'
1316,'','Testing framework throws incorrect exception when message types cannot be mapped\nSo if we have this \r\n\r\n    [Test]\r\n    public void Run()\r\n    {\r\n        Test.Initialize();\r\n\r\n        Test.Handler<YourMessageHandler>()\r\n            .ExpectReply<YourResponseMessage>(m => m.String == "hello")\r\n            .OnMessage<YourRequestMessage>(m => m.String = "hello");\r\n    }\r\n\r\n    public class YourMessageHandler :\r\n        IHandleMessages<YourRequestMessage>\r\n    {\r\n        public IBus Bus { get; set; }\r\n        public void Handle(YourRequestMessage message)\r\n        {\r\n            var reply = new YourResponseMessage\r\n            {\r\n                String = message.String\r\n            };\r\n            Bus.Reply(reply);\r\n        }\r\n    }\r\n\r\n    public class YourResponseMessage //: IMessage\r\n    {\r\n        public string String { get; set; }\r\n    }\r\n\r\n    public class YourRequestMessage //: IMessage\r\n    {\r\n        public string String { get; set; }\r\n    }\r\n\r\nWe will get an error \r\n\r\n    The handler object created does not implement IHandleMessages<T>.\r\n\r\nThe reason is that the messages cannot be mapped. note the commented out `IMessage`. So the error is misleading. We should actually check the generic types of  `YourMessageHandler` and ensure they can be mapped to a message and throw a better exception'
1315,'','Exceptions should be serializable \nAs per the doco for Designing Custom Exceptions http://msdn.microsoft.com/en-us/library/vstudio/ms229064(v=vs.100).aspx exceptions should have a custom constructor to be serializable across appdomains \r\n\r\n    // This constructor is needed for serialization.\r\n    protected NewException(SerializationInfo info, StreamingContext context)\r\n    {\r\n        // Add implementation.\r\n    }\r\n\r\nThey should also have the `[Serializable]` attribute'
1314,'','Preserve exception stack trace does not handle non-serializable exceptions\nIf an exception is thrown that does not properly implement `ISerilizable` we cannot preserve the stack trace. As in it will throw a `SerializationException`\r\n\r\nAn example of how to "not properly implement `ISerilizable`" is forgetting to add the custom contructor\r\n\r\n    protected MyException(SerializationInfo info, StreamingContext context)\r\n\r\nso you exception would look like this\r\n\r\n    public class MyException: Exception\r\n    {\r\n    }\r\n\r\nThis should be fairly rare since it is one of the exception design guidelines http://msdn.microsoft.com/en-us/library/vstudio/ms229064(v=vs.100).aspx\r\n\r\n> Do make exceptions serializable. An exception must be serializable to work correctly across application domain and remoting boundaries.\r\n\r\n### The workaround\r\n\r\nIf this is happening to people during development the easiest way to diagnose the underlying issue is to use "Break on all exceptions" http://msdn.microsoft.com/en-us/library/vstudio/d14azbfh.aspx\r\n\r\n![image](http://i.stack.imgur.com/VP7tR.png)'
1313,'',"Remove CLS compliance\nSo in all our assembly attributes we say we are CLS compliant. However we are not. See warnings below\r\n\r\n\r\nWe need to do some significant breaking changes to achieve this.\r\n\r\n\r\n    Warning 58  Type of 'EasyNetQ.ConnectionFactoryInfo.ConnectionFactory' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\EasyNetQ\\ConnectionFactoryInfo.cs 13  34  NServiceBus.Transports.RabbitMQ\r\n    Warning 52  Type of 'EasyNetQ.HostConfiguration.Port' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\EasyNetQ\\HostConfiguration.cs 6   23  NServiceBus.Transports.RabbitMQ\r\n    Warning 51  Type of 'EasyNetQ.IHostConfiguration.Port' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\EasyNetQ\\IHostConfiguration.cs    6   16  NServiceBus.Transports.RabbitMQ\r\n    Warning 41  Type of 'NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.this[string]' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\DictionaryTableEntity.cs   154 31  NServiceBus.Azure\r\n    Warning 123 Type of 'NServiceBus.Serializers.XML.Test.MessageWithLists.SBytes' is not CLS-compliant C:\\Code\\NServiceBus\\src\\NServiceBus.Core.Tests\\Serializers\\XML\\ListTests.cs 76  28  NServiceBus.Core.Tests\r\n    Warning 124 Type of 'NServiceBus.Serializers.XML.Test.MessageWithLists.UInts' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\NServiceBus.Core.Tests\\Serializers\\XML\\ListTests.cs 78  27  NServiceBus.Core.Tests\r\n    Warning 125 Type of 'NServiceBus.Serializers.XML.Test.MessageWithLists.ULongs' is not CLS-compliant C:\\Code\\NServiceBus\\src\\NServiceBus.Core.Tests\\Serializers\\XML\\ListTests.cs 79  28  NServiceBus.Core.Tests\r\n    Warning 126 Type of 'NServiceBus.Serializers.XML.Test.MessageWithLists.UShorts' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\NServiceBus.Core.Tests\\Serializers\\XML\\ListTests.cs 80  29  NServiceBus.Core.Tests\r\n    Warning 65  Type of 'NServiceBus.Transports.RabbitMQ.Config.ConnectionConfiguration.DefaultHeartBeatInSeconds' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Config\\ConnectionConfiguration.cs 16  29  NServiceBus.Transports.RabbitMQ\r\n    Warning 68  Type of 'NServiceBus.Transports.RabbitMQ.Config.ConnectionConfiguration.DefaultPort' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Config\\ConnectionConfiguration.cs 18  29  NServiceBus.Transports.RabbitMQ\r\n    Warning 66  Type of 'NServiceBus.Transports.RabbitMQ.Config.ConnectionConfiguration.DefaultPrefetchCount' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Config\\ConnectionConfiguration.cs 17  29  NServiceBus.Transports.RabbitMQ\r\n    Warning 78  Type of 'NServiceBus.Transports.RabbitMQ.Config.ConnectionConfiguration.MaxRetries' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Config\\ConnectionConfiguration.cs 29  23  NServiceBus.Transports.RabbitMQ\r\n    Warning 70  Type of 'NServiceBus.Transports.RabbitMQ.Config.ConnectionConfiguration.Port' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Config\\ConnectionConfiguration.cs 23  23  NServiceBus.Transports.RabbitMQ\r\n    Warning 77  Type of 'NServiceBus.Transports.RabbitMQ.Config.ConnectionConfiguration.PrefetchCount' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Config\\ConnectionConfiguration.cs 28  23  NServiceBus.Transports.RabbitMQ\r\n    Warning 75  Type of 'NServiceBus.Transports.RabbitMQ.Config.ConnectionConfiguration.RequestedHeartbeat' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Config\\ConnectionConfiguration.cs 27  23  NServiceBus.Transports.RabbitMQ\r\n    Warning 56  Type of 'NServiceBus.Transports.RabbitMQ.Config.IConnectionConfiguration.Port' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Config\\IConnectionConfiguration.cs    10  16  NServiceBus.Transports.RabbitMQ\r\n    Warning 62  Type of 'NServiceBus.Transports.RabbitMQ.Config.IConnectionConfiguration.PrefetchCount' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Config\\IConnectionConfiguration.cs    15  16  NServiceBus.Transports.RabbitMQ\r\n    Warning 59  Type of 'NServiceBus.Transports.RabbitMQ.Config.IConnectionConfiguration.RequestedHeartbeat' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Config\\IConnectionConfiguration.cs    14  16  NServiceBus.Transports.RabbitMQ\r\n    Warning 103 Type of 'NServiceBus.Transports.RabbitMQ.PersistentConnection.CallbackException' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   237 52  NServiceBus.Transports.RabbitMQ\r\n    Warning 97  Type of 'NServiceBus.Transports.RabbitMQ.PersistentConnection.ChannelMax' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   180 23  NServiceBus.Transports.RabbitMQ\r\n    Warning 101 Type of 'NServiceBus.Transports.RabbitMQ.PersistentConnection.CloseReason' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   210 34  NServiceBus.Transports.RabbitMQ\r\n    Warning 102 Type of 'NServiceBus.Transports.RabbitMQ.PersistentConnection.ConnectionShutdown' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   231 53  NServiceBus.Transports.RabbitMQ\r\n    Warning 95  Type of 'NServiceBus.Transports.RabbitMQ.PersistentConnection.Endpoint' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   170 32  NServiceBus.Transports.RabbitMQ\r\n    Warning 98  Type of 'NServiceBus.Transports.RabbitMQ.PersistentConnection.FrameMax' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   185 21  NServiceBus.Transports.RabbitMQ\r\n    Warning 99  Type of 'NServiceBus.Transports.RabbitMQ.PersistentConnection.Heartbeat' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   190 23  NServiceBus.Transports.RabbitMQ\r\n    Warning 100 Type of 'NServiceBus.Transports.RabbitMQ.PersistentConnection.KnownHosts' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   205 34  NServiceBus.Transports.RabbitMQ\r\n    Warning 96  Type of 'NServiceBus.Transports.RabbitMQ.PersistentConnection.Protocol' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   175 26  NServiceBus.Transports.RabbitMQ\r\n    Warning 79  Type of 'NServiceBus.Transports.RabbitMQ.RabbitMqDequeueStrategy.PrefetchCount' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\RabbitMqDequeueStrategy.cs    31  23  NServiceBus.Transports.RabbitMQ\r\n    Warning 23  Type of 'NServiceBus.Transports.StorageQueues.AzureMessageQueueCreator.Client' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Transports\\StorageQueues\\AzureMessageQueueCreator.cs    12  33  NServiceBus.Azure\r\n    Warning 39  Type of 'NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueReceiver.Client' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Transports\\StorageQueues\\AzureMessageQueueReceiver.cs   60  33  NServiceBus.Azure\r\n    Warning 33  Type of 'NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueSender.Client' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Transports\\StorageQueues\\AzureMessageQueueSender.cs 27  33  NServiceBus.Azure\r\n    Warning 47  Type of 'NServiceBus.Unicast.Queuing.Azure.EnvelopeDeserializationFailed.Message' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Transports\\StorageQueues\\AzureMessageQueueReceiver.cs   197 34  NServiceBus.Azure\r\n    Warning 88  Return type of 'EasyNetQ.ConnectionFactoryWrapper.CreateConnection()' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\EasyNetQ\\ConnectionFactoryWrapper.cs  54  36  NServiceBus.Transports.RabbitMQ\r\n    Warning 55  Return type of 'EasyNetQ.IConnectionFactory.CreateConnection()' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\EasyNetQ\\IConnectionFactory.cs    9   21  NServiceBus.Transports.RabbitMQ\r\n    Warning 53  Return type of 'NServiceBus.Transports.RabbitMQ.IManageRabbitMqConnections.GetConnection(NServiceBus.Transports.RabbitMQ.ConnectionPurpose)' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\IManageRabbitMqConnections.cs 7   21  NServiceBus.Transports.RabbitMQ\r\n    Warning 57  Return type of 'NServiceBus.Transports.RabbitMQ.IPersistentConnection.CreateModel()' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\IPersistentConnection.cs  11  16  NServiceBus.Transports.RabbitMQ\r\n    Warning 76  Return type of 'NServiceBus.Transports.RabbitMQ.PersistentConnection.CreateModel()' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   28  23  NServiceBus.Transports.RabbitMQ\r\n    Warning 64  Return type of 'NServiceBus.Transports.RabbitMQ.RabbitMqConnectionManager.GetConnection(NServiceBus.Transports.RabbitMQ.ConnectionPurpose)' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\RabbitMqConnectionManager.cs  16  28  NServiceBus.Transports.RabbitMQ\r\n    Warning 60  Return type of 'NServiceBus.Transports.RabbitMQ.RabbitMqTransportMessageExtensions.FillRabbitMqProperties(NServiceBus.TransportMessage, RabbitMQ.Client.IBasicProperties)' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\RabbitMqTransportMessageExtensions.cs 14  40  NServiceBus.Transports.RabbitMQ\r\n    Warning 93  Argument type 'ushort' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   155 27  NServiceBus.Transports.RabbitMQ\r\n    Warning 94  Argument type 'ushort' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   165 27  NServiceBus.Transports.RabbitMQ\r\n    Warning 104 Argument type 'ushort' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   243 27  NServiceBus.Transports.RabbitMQ\r\n    Warning 105 Argument type 'ushort' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\PersistentConnection.cs   248 27  NServiceBus.Transports.RabbitMQ\r\n    Warning 35  Argument type 'Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\DataBus\\Azure\\BlobStorage\\BlobStorageDataBus.cs 27  35  NServiceBus.Azure\r\n    Warning 25  Argument type 'Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Timeout\\TimeoutLogic\\LeaseExtensions.cs 12  46  NServiceBus.Azure\r\n    Warning 28  Argument type 'Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Timeout\\TimeoutLogic\\AutoRenewLease.cs  19  31  NServiceBus.Azure\r\n    Warning 32  Argument type 'Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Timeout\\TimeoutLogic\\LeaseExtensions.cs 26  42  NServiceBus.Azure\r\n    Warning 108 Argument type 'Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\Hosting\\NServiceBus.Hosting.Azure\\DynamicHost\\EndpointToHost.cs   13  31  NServiceBus.Hosting.Azure\r\n    Warning 29  Argument type 'Microsoft.WindowsAzure.Storage.CloudStorageAccount' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Subscriptions\\Azure\\AzureSubscriptionStorage.cs 23  41  NServiceBus.Azure\r\n    Warning 34  Argument type 'Microsoft.WindowsAzure.Storage.CloudStorageAccount' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\AzureSagaPersister.cs  27  35  NServiceBus.Azure\r\n    Warning 31  Argument type 'Microsoft.WindowsAzure.Storage.OperationContext' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\DictionaryTableEntity.cs   24  95  NServiceBus.Azure\r\n    Warning 36  Argument type 'Microsoft.WindowsAzure.Storage.OperationContext' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\DictionaryTableEntity.cs   29  73  NServiceBus.Azure\r\n    Warning 19  Argument type 'Microsoft.WindowsAzure.Storage.Queue.CloudQueue' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Transports\\StorageQueues\\SendResourceManager.cs 11  36  NServiceBus.Azure\r\n    Warning 24  Argument type 'Microsoft.WindowsAzure.Storage.Queue.CloudQueue' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Transports\\StorageQueues\\ReceiveResourceManager.cs  12  39  NServiceBus.Azure\r\n    Warning 20  Argument type 'Microsoft.WindowsAzure.Storage.Queue.CloudQueueMessage' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Transports\\StorageQueues\\SendResourceManager.cs 11  54  NServiceBus.Azure\r\n    Warning 26  Argument type 'Microsoft.WindowsAzure.Storage.Queue.CloudQueueMessage' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Transports\\StorageQueues\\ReceiveResourceManager.cs  12  57  NServiceBus.Azure\r\n    Warning 46  Argument type 'Microsoft.WindowsAzure.Storage.Queue.CloudQueueMessage' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Transports\\StorageQueues\\AzureMessageQueueReceiver.cs   191 46  NServiceBus.Azure\r\n    Warning 22  Argument type 'Microsoft.WindowsAzure.Storage.Table.CloudTableClient' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Timeout\\TimeoutLogic\\ServiceContext.cs  12  31  NServiceBus.Azure\r\n    Warning 27  Argument type 'Microsoft.WindowsAzure.Storage.Table.CloudTableClient' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Subscriptions\\Azure\\SubscriptionServiceContext.cs   16  43  NServiceBus.Azure\r\n    Warning 30  Argument type 'Microsoft.WindowsAzure.Storage.Table.CloudTableClient' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Subscriptions\\Azure\\SubscriptionServiceContext.cs   24  33  NServiceBus.Azure\r\n    Warning 37  Argument type 'Microsoft.WindowsAzure.Storage.Table.EntityProperty' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\DictionaryTableEntity.cs   34  37  NServiceBus.Azure\r\n    Warning 40  Argument type 'out Microsoft.WindowsAzure.Storage.Table.EntityProperty' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\DictionaryTableEntity.cs   144 45  NServiceBus.Azure\r\n    Warning 54  Argument type 'RabbitMQ.Client.ConnectionFactory' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\EasyNetQ\\ConnectionFactoryInfo.cs 7   38  NServiceBus.Transports.RabbitMQ\r\n    Warning 86  Argument type 'RabbitMQ.Client.Events.BasicDeliverEventArgs' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\RabbitMqTransportMessageExtensions.cs 46  59  NServiceBus.Transports.RabbitMQ\r\n    Warning 61  Argument type 'RabbitMQ.Client.IBasicProperties' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\RabbitMqTransportMessageExtensions.cs 14  89  NServiceBus.Transports.RabbitMQ\r\n    Warning 74  Argument type 'RabbitMQ.Client.IBasicProperties' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\DirectRoutingTopology.cs  26  82  NServiceBus.Transports.RabbitMQ\r\n    Warning 81  Argument type 'RabbitMQ.Client.IBasicProperties' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\DirectRoutingTopology.cs  31  85  NServiceBus.Transports.RabbitMQ\r\n    Warning 83  Argument type 'RabbitMQ.Client.IBasicProperties' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\IRoutingTopology.cs   32  75  NServiceBus.Transports.RabbitMQ\r\n    Warning 85  Argument type 'RabbitMQ.Client.IBasicProperties' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\IRoutingTopology.cs   40  78  NServiceBus.Transports.RabbitMQ\r\n    Warning 90  Argument type 'RabbitMQ.Client.IBasicProperties' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\ConventionalRoutingTopology.cs    62  82  NServiceBus.Transports.RabbitMQ\r\n    Warning 92  Argument type 'RabbitMQ.Client.IBasicProperties' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\ConventionalRoutingTopology.cs    68  85  NServiceBus.Transports.RabbitMQ\r\n    Warning 63  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\DirectRoutingTopology.cs  15  39  NServiceBus.Transports.RabbitMQ\r\n    Warning 67  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\IRoutingTopology.cs   17  32  NServiceBus.Transports.RabbitMQ\r\n    Warning 69  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\DirectRoutingTopology.cs  21  42  NServiceBus.Transports.RabbitMQ\r\n    Warning 71  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\IRoutingTopology.cs   24  35  NServiceBus.Transports.RabbitMQ\r\n    Warning 72  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\DirectRoutingTopology.cs  26  29  NServiceBus.Transports.RabbitMQ\r\n    Warning 73  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\ConventionalRoutingTopology.cs    26  39  NServiceBus.Transports.RabbitMQ\r\n    Warning 80  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\DirectRoutingTopology.cs  31  26  NServiceBus.Transports.RabbitMQ\r\n    Warning 82  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\IRoutingTopology.cs   32  22  NServiceBus.Transports.RabbitMQ\r\n    Warning 84  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\IRoutingTopology.cs   40  19  NServiceBus.Transports.RabbitMQ\r\n    Warning 87  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\ConventionalRoutingTopology.cs    50  42  NServiceBus.Transports.RabbitMQ\r\n    Warning 89  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\ConventionalRoutingTopology.cs    62  29  NServiceBus.Transports.RabbitMQ\r\n    Warning 91  Argument type 'RabbitMQ.Client.IModel' is not CLS-compliant C:\\Code\\NServiceBus\\src\\RabbitMQ\\NServiceBus.RabbitMQ\\Routing\\ConventionalRoutingTopology.cs    68  26  NServiceBus.Transports.RabbitMQ\r\n    Warning 49  Argument type 'Spring.Context.Support.GenericApplicationContext' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\impl\\ObjectBuilder\\ObjectBuilder.Spring\\SpringObjectBuilder.cs  31  36  ObjectBuilder.Spring\r\n    Warning 50  Argument type 'Spring.Context.Support.GenericApplicationContext' is not CLS-compliant   C:\\Code\\NServiceBus\\src\\impl\\ObjectBuilder\\ObjectBuilder.Spring\\Config\\ConfigureSpringBuilder.cs    31  78  ObjectBuilder.Spring\r\n    Warning 42  Argument type 'System.Collections.Generic.KeyValuePair<string,Microsoft.WindowsAzure.Storage.Table.EntityProperty>' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\DictionaryTableEntity.cs   160 25  NServiceBus.Azure\r\n    Warning 43  Argument type 'System.Collections.Generic.KeyValuePair<string,Microsoft.WindowsAzure.Storage.Table.EntityProperty>' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\DictionaryTableEntity.cs   170 30  NServiceBus.Azure\r\n    Warning 45  Argument type 'System.Collections.Generic.KeyValuePair<string,Microsoft.WindowsAzure.Storage.Table.EntityProperty>' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\DictionaryTableEntity.cs   190 28  NServiceBus.Azure\r\n    Warning 44  Argument type 'System.Collections.Generic.KeyValuePair<string,Microsoft.WindowsAzure.Storage.Table.EntityProperty>[]' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\DictionaryTableEntity.cs   175 28  NServiceBus.Azure\r\n    Warning 16  'NServiceBus.Unicast.Subscriptions.Subscription': base type 'Microsoft.WindowsAzure.Storage.Table.DataServices.TableServiceEntity' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Subscriptions\\Azure\\Subscription.cs 8   18  NServiceBus.Azure\r\n    Warning 17  'NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext': base type 'Microsoft.WindowsAzure.Storage.Table.DataServices.TableServiceContext' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Subscriptions\\Azure\\SubscriptionServiceContext.cs   10  18  NServiceBus.Azure\r\n    Warning 21  'NServiceBus.SagaPersisters.Azure.DictionaryTableEntity': base type 'Microsoft.WindowsAzure.Storage.Table.TableEntity' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\SagaPersisters\\Azure\\DictionaryTableEntity.cs   12  18  NServiceBus.Azure\r\n    Warning 18  'NServiceBus.Azure.ServiceContext': base type 'Microsoft.WindowsAzure.Storage.Table.DataServices.TableServiceContext' is not CLS-compliant  C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Timeout\\TimeoutLogic\\ServiceContext.cs  10  18  NServiceBus.Azure\r\n    Warning 15  'NServiceBus.Azure.TimeoutDataEntity': base type 'Microsoft.WindowsAzure.Storage.Table.DataServices.TableServiceEntity' is not CLS-compliant    C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Timeout\\TimeoutLogic\\TimeoutDataEntity.cs   7   18  NServiceBus.Azure\r\n    Warning 38  'NServiceBus.Azure.TimeoutManagerDataEntity': base type 'Microsoft.WindowsAzure.Storage.Table.DataServices.TableServiceEntity' is not CLS-compliant C:\\Code\\NServiceBus\\src\\azure\\NServiceBus.Azure\\Timeout\\TimeoutLogic\\TimeoutDataEntity.cs   52  18  NServiceBus.Azure\r\n"
1312,'',"Added locking logic to AzureMessageQueueReceiver.GetMessage to resolve failure to get messages from queue.\nDue to concurrent access and the lack of thread-safety, AzureMessageQueueReceiver.GetMessage is, on occasion, failing to read messages from the input queue. There aren't any exceptions, just no messages processed after queue.BeginGetMessages completes, even though there are messages in the input queue. With the addition of the locking logic, the issue appears to be resolved."
1311,'','Should use Ravens own msi\nRavenDB v2.5 has its own installers, we should just use them instead of writing our own.\r\n'
1310,'','Bus.Defer() allows one param to be pass\nIn relation to http://tech.groups.yahoo.com/group/nservicebus/message/19819 using the Bus.Defer(), the compiler allows me to pass only one parameter as:\r\n    \r\n     Bus.Defer(new TimeSpan(0, 0, 10));\r\n\r\nBut on runtime it gives me:\r\n\r\n    //System.InvalidOperationException occurred\r\n    //HResult=-2146233079\r\n    //Message=Sequence contains no elements\r\n    //Source=System.Core\r\n    //StackTrace:\r\n    //     at System.Linq.Enumerable.Min[TSource](IEnumerable`1 source)\r\n    //     at System.Linq.Enumerable.Min[TSource,TResult](IEnumerable`1 source, Func`2 selector)\r\n    //     at NServiceBus.Unicast.UnicastBus.MapTransportMessageFor(IList`1 rawMessages, TransportMessage result) in c:\\TeamCity\\buildAgent\\work\\d4de8921a0aabf04\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1373\r\n    //InnerException: \r\n\r\nIm using vs 2012 update 3 and nsb version 4.0.0.1'
1309,'','Introduce disable audit\n### Background\r\n\r\nIn v4 we changed the audit feature so that it can be configured via the registry, this has the advantage of centralized administration of audit queue via group policy.\r\n\r\nHowever this has also introduced a lot of friction to turn off audit per endpoint.\r\n\r\nAt the moment if the config file does not have `ForwardReceivedMessagesTo` attribute we then check the registry `HKEY_LOCAL_MACHINE\\SOFTWARE\\ParticularSoftware\\ServiceBus\\[AuditQueue]` and only then we disable the audit feature.\r\n\r\nSo the above workflow has a few disadvantages:\r\n* User needs to check registry and delete keys to turn off audit;\r\n* Not possible to have EndpointA with centralized audit managed by registry and EndpointB with audit turned off;\r\n* In a dev box with registry key, audit works but once user migrated to PROD machine audit may not work if user does not have reg key set!\r\n\r\n### Proposed Solution\r\n\r\n- [x] Make Audit a feature\r\n- [x] Introduce an explicit code only API to turn off audit on the endpoint, eg:\r\n ```\r\n   .Configure.Features.Disable<Audit>();\r\n ```\r\n- [x] Throw an exception (so that endpoint terminates) at initialization if `ForwardReceivedMessagesTo` attribute missing and no registry key set.\r\nThe exception text should explain that they either have to call `.Configure.Features.Disable<Audit>();` or use `Set-NServiceBusLocalMachineSettings` cmdlet.\r\n- [ ] Log a warning in **debug mode only** if `ForwardReceivedMessagesTo` attribute missing but registry key is set, here is a start:\r\n```\r\nEndpoint audit is configured using the registry, please ensure that you run Set-NServiceBusLocalMachineSettings cmdlet on the target deployment machine.\r\n```'
1308,'','Add NServiceBus.Powershell on nuget\nReferencing NServiceBus.Powershell.dll is useful when delegating infrastructure installation to NServiceBus\r\n\r\nIn particular, calling the below functions is handy\r\n`MsmqSetup.StartMsmqIfNecessary`\r\n`DtcSetup.StartDtcIfNecessary`\r\n`PerformanceCounterSetup.SetupCounters`'
1307,'','Message ContentType XML\nShould the xml content type in https://github.com/NServiceBus/NServiceBus/blob/master/src/NServiceBus/ContentTypes.cs be:\r\n\r\n1. application/xml\r\n2. text/xml\r\n3. support both\r\n\r\nI read the specs and there seems to be more acceptable to use **application/xml**\r\n\r\n@SimonCropp @andreasohlund ?'
1306,'','Should not resource merge things that are ILMerged\n'
1305,'','Ensure Headers are populates in new TransportMessage\nIf we send a message to the Gateway via Http directly, [example](https://github.com/NServiceBus/NServiceBus/blob/master/Samples/Gateway/WebClient/Index.htm#L17) we need to ensure that the headers are populated in the new TransportMessage, [this code](https://github.com/NServiceBus/NServiceBus/blob/master/src/NServiceBus.Core/Gateway/HeaderManagement/HeaderMapper.cs#L13) needs to be modified.\r\n\r\n'
1304,'','Update contributors link \nhttps://github.com/NServiceBus/NServiceBus/blob/develop/CONTRIBUTING.md'
1303,'','SqlTransport - When using custom host, the queues created have a machine name tagged to the queue\nCurrently the behavior is inconsistent when using NServiceBus.Host and a generic host.\r\nThe tables (queues) created for NServiceBus.host endpoints do not have the machine as a suffix in its queue name.\r\n'
1302,'','Schedule (The ability to schedule at a specific time)\nWe currently schedule jobs in our NSB endpoint as follows.\r\n\r\nSchedule.Every(24.Hours()).Action(JobToExecute);\r\n\r\nThe problem with this that the time the job executes is dependent on when the endpoint host starts.\r\n\r\nIt would be great if you could schedule the job for a specific date time/ time.\r\n\r\nie Schedule.At(EveryDay.At(2).PM()).Action(JobToExecute);\r\n'
1301,'','Add httplistener permissions installer\nfixes #501'
1300,'','Azure Topic Subscription Names Limited to 50 Characters\nWhen using Azure Service Bus to manage PubSub, the name of the subscription to a topic is limited to 50 characters.  The naming convention for topic subscriptions is [endpoint queue name].[message type].  We have rather descriptive queue and message names, and ran into this limitation.  The endpoint continued to run even though the subscription could not be made.  \r\n\r\nRecommendations:\r\n- Fail fast if the topic subscription cannot be made\r\n- Lobby Microsoft to increase the string length of topic subscription names :-)\r\n'
1299,'','Azure Service Bus Topic only created when message is first published.\nWhen using the Azure Service Bus transport, a topic is only created for an endpoint to publish messages when the endpoint first attempts to publish a message.  If the topic does not exist, the subscribers are unable to subscribe to the message.  This creates a condition where, if the subscriber starts before the publisher, the messages will not be subscribed to until the publisher attempts to publish a message and the subscriber is then restarted.\r\n\r\nRecommended change: Create topic for endpoint when creating service bus queues\r\n\r\n\r\nsecond part split into "Throw fatal exception when attempting to subscribe to a Azure topic that does not exist" #1349'
1298,'','remove StreamExtensions\nthis would seem to be redundant??\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Gateway/Utils/StreamExtensions.cs\r\n\r\n    public static class StreamExtensions\r\n    {\r\n        public static void CopyTo_net35(this Stream input, Stream output)\r\n        {\r\n            CopyTo_net35(input,output,4096);\r\n        }\r\n        public static void CopyTo_net35(this Stream input, Stream output,long bufferSize)\r\n        {\r\n            int num;\r\n            var buffer = new byte[bufferSize];\r\n            while ((num = input.Read(buffer, 0, buffer.Length)) != 0)\r\n            {\r\n                output.Write(buffer, 0, num);\r\n            }\r\n        }\r\n    }\r\n@johnsimons @andreasohlund '
1297,'','ConfigureMapping: throw for deep nested properties\nfixes #255'
1296,'','Acceptance tests should fail if an error is logged\nOr this should be a per test option\r\n\r\n@andreasohlund thoughts?'
1295,'','Shutdown race condition\nfixes #1249 \r\n\r\n'
1294,'','Support temporary RabbitMq queues\nSimilar to:\r\n\r\nhttps://groups.google.com/forum/m/#!msg/masstransit-discuss/U5h6NF0QCKc/LUqUoFj9iEgJ\r\n\r\nUseful when elastically scaling eg websites that needs queues for notifications'
1293,'','Is RabbitMq ConnectionPurpose redundant?\nSo here we have `ConnectionPurpose`\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/RabbitMQ/NServiceBus.RabbitMQ/IManageRabbitMqConnections.cs\r\n\r\nBut the only implemntation of `IManageRabbitMqConnections` ignores the `ConnectionPurpose` parameter\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/RabbitMQ/NServiceBus.RabbitMQ/RabbitMqConnectionManager.cs\r\n\r\nSo is this a bug or is `ConnectionPurpose` redundant.\r\n\r\nIf it is redundant the `IManageRabbitMqConnections` is redundant since we will only ever have one instance of `PersistentConnection`\r\n\r\n    Configure.Component<RabbitMqConnectionManager>(DependencyLifecycle.SingleInstance);\r\n\r\n@andreasohlund thoughts?'
1292,'johnsimons','RabbitMqConnectionManager connection failure logic seems borken\nSo here\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/RabbitMQ/NServiceBus.RabbitMQ/RabbitMqConnectionManager.cs#L23\r\n\r\nThere is this code\r\n\r\n                if (connectionFailed)\r\n                    throw connectionFailedReason;\r\n\r\nBut `connectionFailed` and `connectionFailedReason` are never set. So is this a bug or  just some redundant code that should be deleted.\r\n\r\n@andreasohlund  thoughts?'
1291,'','Using a finalizer when implementing IDisposable is only necessary when you have unmanaged resources\nFrom http://stackoverflow.com/a/898867/53158\r\n\r\n>  you should only implement a finalizer if you have actual unmanaged resources to dispose. \r\n\r\nSo since none of these had unmanaged resources they can just clean up in `Dispose()` and dont need `Dispose(bool)` or the finalizer.\r\n\r\n * https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/TaskSchedulers/MTATaskScheduler.cs\r\n * https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Persistence/Raven/StoreAccessor.cs\r\n * https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Transport/TransportReceiver.cs\r\n * https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Transport/Monitoring/ReceivePerformanceDiagnostics.cs\r\n * https://github.com/NServiceBus/NServiceBus/blob/develop/src/RabbitMQ/NServiceBus.RabbitMQ/RabbitMqConnectionManager.cs\r\n * https://github.com/NServiceBus/NServiceBus/blob/develop/src/SqlServer/NServiceBus.SqlServer/SqlServerMessageSender.cs\r\n'
1290,'','Timer should be disposed in CriticalTimeCalculator\nI assume the `timer` field should be disposed in `CriticalTimeCalculator.Dispose(bool)`\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Monitoring/CriticalTimeCalculator.cs#L16\r\n\r\n@johnsimons thoughts?'
1289,'mookid8000','Improve assembly scanning time\nbased on this https://github.com/FakeItEasy/FakeItEasy/issues/133/'
1288,'','Fix spelling of ProcessUtil.IsRunningWithElevatedPriviliges\n@johnsimons  any problem with me fixing this? and since it is public do i need to [Obsolete] the old one?\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/PowerShell/NServiceBus.PowerShell/ProcessUtil.cs#L13'
1287,'','Issue 1277\n'
1286,'','Handle Category("Integration") better\nSo there are a bunch of unit tests marked with Category("Integration"). So both @johnsimons  and @andreasohlund exclude this from their unit tests. Also the build server ignores these tests.\r\n\r\nSo it would seem most of these tests should either be \r\n\r\n * [Explicit] since they are actually bootsraps for tagetted debugging of certain pieces of code, or\r\n * Moved the Acceptance Tests because they are slow\r\n\r\nThis would also lower the barrier of entry since, currently, new starters dont know to exclude these "Integration" tests\r\n\r\nThoughts?'
1285,'johnsimons','Move timeout tests to acceptance test solution\nSince the timeout tests take almost 2min to run perhaps they should be moved to acceptance test solution\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/tree/master/tests/timeout/NServiceBus.Timeout.Tests\r\n\r\nor at least move the slow ones. thoughts? '
1284,'','Default log file name does not have a ".txt" extension\n'
1283,'','Raise a better error when version 2.6 timeouts are being handled in v4.0 endpoints\nCurrently, when 2.6 style timeouts are requested, the following exception is raised:\r\nCan we throw a better exception?\r\n\r\n\r\n\t2013-06-30 23:49:29,465 [9] INFO  NServiceBus.Unicast.Transport.TransportReceiver [(null)] <(null)> - Failed to process message\r\n\tNServiceBus.Unicast.Transport.TransportMessageHandlingFailedException: An exception was thrown by the message handler. ---> System.ArgumentNullException: Value cannot be null.\r\n\tParameter name: key\r\n\t   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n\t   at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n\t   at NServiceBus.Unicast.Messages.MessageMetadataRegistry.GetMessageDefinition(Type messageType) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\Messages\\MessageMetadataRegistry.cs:line 13\r\n\t   at NServiceBus.Unicast.UnicastBus.<MapTransportMessageFor>b__3a(Object m) in\r\n\tc:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1372\r\n\t   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n\t   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n\t   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n\t   at NServiceBus.Unicast.UnicastBus.MapTransportMessageFor(IList`1 rawMessages, TransportMessage result) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1372\r\n\t   at NServiceBus.Unicast.UnicastBus.Defer(DateTime processAt, Object[] messages) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 561\r\n\t   at NServiceBus.Unicast.UnicastBus.Defer(TimeSpan delay, Object[] messages) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:\r\n\tline 541\r\n\t   at NServiceBus.Saga.Saga`1.RequestTimeout[TTimeoutmessageType](TimeSpan within, TTimeoutmessageType timeoutMessage) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus\\Saga\\Saga.cs:line 184\r\n\t   at NServiceBus.Saga.Saga`1.RequestUtcTimeout[TTimeoutmessageType](TimeSpan within, TTimeoutmessageType timeoutMessage) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\r\n\t\\src\\NServiceBus\\Saga\\Saga.cs:line 251\r\n\t   at Server.Saga.SimpleSaga.Handle(StartSagaMessage message) in c:\\NServiceBus\\v3.3.8\\Samples\\Unobtrusive\\Server\\Saga\\\r\n\tSimpleSaga.cs:line 16\r\n\t   at lambda_method(Closure , Object , Object )\r\n\t   at NServiceBus.Unicast.HandlerInvocationCache.Invoke(Object handler, Object message, Dictionary`2 dictionary) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\HandlerInvocationCache.cs:line 61\r\n\t   at NServiceBus.Unicast.HandlerInvocationCache.InvokeHandle(Object handler, Object message) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\HandlerInvocationCache.cs:line 22\r\n\t   at NServiceBus.Sagas.SagaDispatcherFactory.<>c__DisplayClass4.<GetDispatcher>b__0() in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Sagas\\SagaDispatcherFactory.cs:line 79\r\n\t   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass2f.<DispatchMessageToHandlersBasedOnType>b__2a(Action dispatch) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1096\r\n\t   --- End of inner exception stack trace ---\r\n\t   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass2f.<DispatchMessageToHandlersBasedOnType>b__2a(Action dispatch) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1102\r\n\t   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n\t   at NServiceBus.Unicast.UnicastBus.DispatchMessageToHandlersBasedOnType(IBuilder builder, Object toHandle) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1106\r\n\t   at NServiceBus.Unicast.UnicastBus.HandleMessage(IBuilder builder, TransportMessage m) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1009\r\n\t   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder childBuilder, TransportMessage msg) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1229'
1282,'',"Add Message to EventArgs of ITransport events\nCurrently the message information is available on following events of the ITransport interface\r\n- TransportMessageReceived\r\n- StartedMessageProcessing\r\n\r\nBut not on\r\n- FinishedMessageProcessing\r\n- FailedMessageProcessing\r\n\r\nIn my application I want to collect usage information (success and failure) from the transport aggregated on metadata included in the headers of the messages. Currently I can't because no message information is available when we're done processing.\r\n\r\nTherefore I would like to change the signature of FinishedMessageProcessing and  FailedMessageProcessing to include the message as well, making them analog to the other two.\r\n\r\nEventHandler FinishedMessageProcessing would become  EventHandler<FinishedMessageProcessingEventArgs> FinishedMessageProcessing\r\nand both FinishedMessageProcessingEventArgs and FailedMessageProcessingEventArgs would get a Message property\r\n\r\nThoughts?"
1281,'','Saga.ConfigureMapping obsolete message should be more descriptive\nCurrently this\r\n\r\n        [ObsoleteEx(Message = "Use the more explicit ConfigureMapping<T>.ToSaga<TSaga>(...) instead", TreatAsErrorFromVersion = "5.0", RemoveInVersion = "6.0")]\r\n        protected virtual void ConfigureMapping<TMessage>(Expression<Func<T, object>> sagaEntityProperty, Expression<Func<TMessage, object>> messageProperty)\r\n        {\r\n     ...\r\n        }\r\n\r\nshould be this\r\n\r\n        [ObsoleteEx(Message = "Use the more explicit ConfigureMapping<T>().ToSaga<TSaga>(...) instead. For example \'ConfigureMapping<MyMessage>(message => message.MyProp).ToSaga(sagaData => sagaData.MyProp);\' ", TreatAsErrorFromVersion = "5.0", RemoveInVersion = "6.0")]\r\n        protected virtual void ConfigureMapping<TMessage>(Expression<Func<T, object>> sagaEntityProperty, Expression<Func<TMessage, object>> messageProperty)\r\n        {\r\n     ...\r\n        }'
1280,'johnsimons','throw if sagainterfaces cannot be mapped to messages\nfixes issue #790'
1279,'',"Make the distributor output the criticaltime/time to breach SLA counters\nHave each worker send back the critical time calculated as header in the control message going back to the distributor so that the distributor can populate it's counter. This allows for centralized monitoring of SLA's by just looking at the distributor"
1278,'johnsimons','Allow multiple implementations of IConfigureLoggingForProfile\n * Also ignore abstract types'
1277,'johnsimons',"Sagas: Published messages not being dispatched to sagas properly\nI have one endpoint hosting some sagas and another endpoint which handles commands. Events published as a result of handling commands (sent by sagas) are not being dispatched to other sagas that handle the events. \r\n\r\nHere's what happens using 4.0.0 RC1:\r\n1) Saga1 is started by GroupPendingEvent\r\n2) Saga2 sends OpenGroupCommand to the command handling endpoint.\r\n3) OpenGroupCommand is handling and GroupPendingEvent is published.\r\n4) GroupPendingEvent arrives at the endpoint hosting sagas.\r\n5) NSB notices that the event has saga id and saga type headers and dispatches it to Saga2.\r\n6) NSB never dispatches the event to Saga1.\r\n\r\nUsing the last 4.0.0 beta build everything works as expected (GroupPendingEvent is dispatched to Saga1).\r\n\r\n"
1276,'johnsimons','Preserve body for SLR/Error and audit queues\nFixes #1270\r\n\r\n@johnsimons please review and squash before you pull'
1275,'','[4.0.0] Child worker hangs during IWantCustomInitialize call to Configure.Instance.UseNHibernateSagaPersister(); in Compute Emulator\nUsing the Azure generic host (NServiceBus.Hosting.Azure.HostProcess.exe) the endpoint will launch and run properly when run stand-alone / locally.  However, when the binaries are zipped and uploaded to the blob container monitored by a shared host, the endpoint will hang after scanning \r\n\r\n```\r\n2013-06-26 11:49:24,181 [1] WARN NHibernate.Cfg.Configuration [(null)] - No\r\nmapped documents found in assembly: NServiceBus, Version=4.0.0.0,\r\nCulture=neutral, PublicKeyToken=9fc386479f8a226c\r\n```\r\n\r\nThe next assembly to be scanned is NServiceBus.Hosting.Azure.  This log line is never written when running in the Compute Emulator, but is written (and no hang) when running locally.'
1274,'johnsimons','ProfileManager should not throw ConfigurationErrorsException\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Hosting/Profiles/ProfileManager.cs#L76\r\n\r\nit is not really a "Configuration" problem. also throwing a specific exception really adds no value here. people would not be catching it. So perhaps change to an Exception?'
1271,'','NuGet package Id comes through with incorrect case\nMinor issue;\r\n\r\nJust noticed that the Id of the NServiceBus.StructureMap on NuGet has the incorrect case, despite the nuspec in source having it correct.\r\n\r\n![image](https://f.cloud.github.com/assets/185776/711065/eca2d5bc-de89-11e2-88e1-69c3c309f7ab.png)\r\n\r\nShould be -> `NServiceBus.StructureMap`\r\nIt is -> `NServiceBus.Structuremap`\r\n\r\nIn packages.config;\r\n\r\n    <package id="NServiceBus.Structuremap" version="4.0.0-unstable3205" targetFramework="net40" />\r\n\r\nProject reference it is capitalised (as per nuspec Id) but physical directory is not;\r\n\r\n    <HintPath>..\\packages\\NServiceBus.StructureMap.4.0.0-unstable3205\\lib\\net40\\NServiceBus.ObjectBuilder.StructureMap.dll</HintPath>\r\n\r\nThe significance of this is the packages directory that gets created and that on a case-sensitive volume causing a reference error.\r\n\r\nMight be something you can edit on nuget.org.'
1270,'andreasohlund','The original message body is not preserved when sending messages to audit/error/slr\nWe need to make sure to always use the original body even if mutators have changed them.\r\n\r\nTo repro just run the message mutators integration project and it will fail since the message going to the audit queue will be to large for msmq'
1269,'johnsimons','The video store samples are leaking memory\nAdd a hook and call IContainer.Release() when the controllers are disposed'
1268,'johnsimons','Introduce a Release method to our container abstraction\nIn order to support the containers that needs/supports explicit release for tracked components we need to add a Release method to instruct the container to release a given instance'
1267,'','Pull the wcf integration out to a separate project/feature\n'
1266,'andreasohlund','SendLocal or sends to the local endpoint triggers callback to early\nSince we now set the correlation id for outgoing messages to the message id this will prematurely trigger any callback that is registered for the outgoing message\r\n\r\nTo reproduce: Run the wcfsample and it will blow up since the return code is not initialized and will cause a deserialization exception on the client side'
1265,'','Add support for the routing slip pattern\nPossibly pulling Jimmy Bogards implementation in'
1264,'',"DynamicEndpointRunner throws exception when running service already stopped\nBranch 4.0.0\r\nDynamicEndpointRunner.cs:81\r\nThe call to Process.GetProcessById throws an ArgumentException if the requested ProcessId is not running.  This is part of the 'Stop' method which is intended to shut down a previously started endpoint.  When debugging, if a shared host is stopped then restarted, this can lead to the host process crashing due to the thrown exception.  I suggest the call be wrapped in a try-catch and if the process is not running, ignore the service and continue (possibly with a warning log entry).\r\n\r\nThe impact of the current behavior is that the hosting role will crash.  The situation can be recreated by running the shared host in the compute emulator, upload an endpoint to run as a child, allow the child to start, then stop debugging.  If the zip file is then removed and the shared host restarted the shared host will attempt to stop a non-running process which results in an exception."
1263,'','Add support for compression to the databus\n'
1262,'johnsimons',"WCF Integration sample is broken\nTo repro just open NServiceBus\\IntegrationTests\\WcfIntegration\\Client and hit F5\r\n\r\nError in deserializing body of request message for operation 'Process'. OperationFormatter encountered an invalid Message body. Expected to find node type 'Element' with name 'Process' and namespace 'http://nservicebus.com'. Found node type 'Element' with name 'Process' and namespace 'http://tempuri.org/'"
1261,'johnsimons','What is the equivalent of CopyHeaderFromRequest in 4.0.0?\nThe request / response sample in v3.3.8 has this\r\n\r\nvar response = Bus.CreateInstance<DataResponseMessage>(m => \r\n            { \r\n                m.DataId = message.DataId;\r\n                m.String = message.String;\r\n            });\r\n\r\n            response.CopyHeaderFromRequest("Test");\r\n            response.SetHeader("1", "1");\r\n            response.SetHeader("2", "2");\r\n\r\nThe compiler warning states:\r\n error CS0619: \'NServiceBus.ExtensionMethods.CopyHeaderFromRequest(object, string)\' is obsolete: \'Will be removed in version \'5.0\'.\'\r\n\r\nIs there any alternate approach to doing this?'
1260,'johnsimons','Exception on TransationScope commit trigger circular breaker.\nIn SQL Server transport exception on transaction scope commit (Complete + Dispose) trigger circular breaker instead of retry logic. \r\n\r\nAccording to MSDN (http://msdn.microsoft.com/pl-pl/library/system.transactions.transactionscope.dispose.aspx) commit is triggered on TransactionScope.Disposed.'
1259,'',"DisableGateway still invokes GatewayReceiver.Start() \nIn version [v4.0.0.3205] \r\n\r\nWe have the following exception because we don't normally run our development instances in an administrator shell. We had expected `DisableGateway()` to prevent the receiver from registered but it would appear not.\r\n\r\n\t\t2013-06-24 17:53:22,860 [10] ERROR NServiceBus.Satellites.SatelliteLauncher [(null)] <(null)> - Satellite NServiceBus.Gateway.Receiving.GatewayReceiver, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c failed to start.\r\n\t\tSystem.Exception: Failed to start listener for http://localhost/my.bus.project/ make sure that you have admin privileges ---> System.Net.HttpListenerException: Access is denied\r\n\t\t   at System.Net.HttpListener.AddAllPrefixes()\r\n\t\t   at System.Net.HttpListener.Start()\r\n\t\t   at NServiceBus.Gateway.Channels.Http.HttpChannelReceiver.Start(String address, Int32 numWorkerThreads) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Gateway\\Channels\\Http\\HttpChannelReceiver.cs:line 36\r\n\t\t   --- End of inner exception stack trace ---\r\n\t\t   at NServiceBus.Gateway.Channels.Http.HttpChannelReceiver.Start(String address, Int32 numWorkerThreads) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Gateway\\Channels\\Http\\HttpChannelReceiver.cs:line 44\r\n\t\t   at NServiceBus.Gateway.Receiving.GatewayReceiver.Start() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Gateway\\Receiving\\GatewayReceiver.cs:line 72\r\n\t\t   at NServiceBus.Satellites.SatelliteLauncher.StartSatellite(SatelliteContext ctx) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Satellites\\SatelliteLauncher.cs:line 107"
1258,'johnsimons','[v4.0.0.3205] NHibernate persistence throws InvalidCastException\nGetting the following exception;\r\n\r\n      Unhandled Exception: System.InvalidCastException: Unable to cast object of type \'System.Reflection.RtFieldInfo\' to type \'System.Reflection.PropertyInfo\'.\r\n         at NServiceBus.SagaPersisters.NHibernate.AutoPersistence.SagaModelMapper.ApplyPropertyConvention(IModelInspector mi,\r\n      PropertyPath type, IPropertyMapper map) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\nhibernate\\NServiceBus.NHibernate\\SagaPersisters\\NHibernate\\AutoPersistence\\SagaModelMapper.cs:line 104\r\n         at NHibernate.Mapping.ByCode.Impl.PropertyMappingHandler.Invoke(IModelInspector modelInspector, PropertyPath member, IPropertyMapper propertyCustomizer)\r\n         at NHibernate.Mapping.ByCode.ModelMapper.InvokeBeforeMapProperty(PropertyPath member, IPropertyMapper propertycustomizer)\r\n         at NHibernate.Mapping.ByCode.ModelMapper.ComponentRelationMapper.<>c__DisplayClass94.<MapProperties>b__8d(IPropertyMapper propertyMapper)\r\n         at NHibernate.Mapping.ByCode.Impl.ComponentElementMapper.Property(MemberInfo property, Action`1 mapping)\r\n         at NHibernate.Mapping.ByCode.ModelMapper.ComponentRelationMapper.MapProperties(Type type, PropertyPath memberPath, IComponentElementMapper propertiesContainer, IEnumerable`1 persistentProperties)\r\n         at NHibernate.Mapping.ByCode.ModelMapper.ComponentRelationMapper.<Map>b__83(IComponentElementMapper x)\r\n         at NHibernate.Mapping.ByCode.Impl.CollectionElementRelation.Component(Action`1 mapping)\r\n         at NHibernate.Mapping.ByCode.ModelMapper.ComponentRelationMapper.Map(ICollectionElementRelation relation)\r\n         at NHibernate.Mapping.ByCode.Impl.AbstractPropertyContainerMapper.Bag(MemberInfo property, Action`1 collectionMapping, Action`1 mapping)\r\n         at NHibernate.Mapping.ByCode.ModelMapper.MapBag(MemberInfo member, PropertyPath propertyPath, Type propertyType, ICollectionPropertiesContainerMapper propertiesContainer, Type propertiesContainerType)\r\n         at NHibernate.Mapping.ByCode.ModelMapper.MapProperties(Type propertiesContainerType, IEnumerable`1 propertiesToMap, IPropertyContainerMapper propertiesContainer, PropertyPath path)\r\n         at NHibernate.Mapping.ByCode.ModelMapper.MapProperties(Type propertiesContainerType, IEnumerable`1 propertiesToMap, IPropertyContainerMapper propertiesContainer)\r\n         at NHibernate.Mapping.ByCode.ModelMapper.MapRootClass(Type type, HbmMapping mapping)\r\n         at NHibernate.Mapping.ByCode.ModelMapper.CompileMappingFor(IEnumerable`1 types)\r\n         at NServiceBus.SagaPersisters.NHibernate.Config.Internal.SessionFactoryBuilder.Build(Configuration nhibernateConfiguration) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\nhibernate\\NServiceBus.NHibernate\\SagaPersisters\\NHibernate\\Config\\Internal\\SessionFactoryBuilder.cs:line 45\r\n         at NServiceBus.ConfigureNHibernateSagaPersister.UseNHibernateSagaPersisterInternal(Configure config, Configuration configuration, Boolean autoUpdateSchema) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\nhibernate\\NServiceBus.NHibernate\\ConfigureNHibernateSagaPersister.cs:line 96\r\n         at NServiceBus.ConfigureNHibernateSagaPersister.UseNHibernateSagaPersister(Configure config) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\nhibernate\\NServiceBus.NHibernate\\ConfigureNHibernateSagaPersister.cs:line 67\r\n         at SomeProject.Bus.EndpointConfig.SetupEndpoint() in c:\\Source\\MyBusProject\\src\\Bus\\EndpointConfig.cs:line 56\r\n         at SomeProject.Bus.EndpointConfig.Init() in c:\\Source\\MyBusProject\\src\\Bus\\EndpointConfig.cs:line 45\r\n         at NServiceBus.Hosting.GenericHost.PerformConfiguration() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 102\r\n         at NServiceBus.Hosting.GenericHost.Start() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 27\r\n         at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter) in :line 0   at NServiceBus.Hosting.Windows.Program.Main(String[] args) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\hosting\\NServiceBus.Hosting.Windows\\Program.cs:line 145\r\n\r\nConfig is as follows;\r\n\r\n    <appSettings>\r\n      <add key="NServiceBus/Persistence/NHibernate/dialect"  value="NHibernate.Dialect.SQLiteDialect"/>\r\n      <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>\r\n      <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.SQLiteDriver"/>\r\n    </appSettings>\r\n\r\n    <connectionStrings>\r\n      <add name="NServiceBus/Persistence"\r\n           connectionString="Data Source=SomeProject.Bus.sqlite;Version=3;New=True;" />\r\n      \r\n      <add name="NServiceBus/Persistence/NHibernate/Timeout"\r\n           connectionString="Data Source=SomeProject.Bus.sqlite.timeout;Version=3;New=True;" />\r\n\r\n      <add name="NServiceBus/Persistence/NHibernate/Saga"\r\n           connectionString="Data Source=SomeProject.Bus.sqlite.saga;Version=3;New=True;" />\r\n\r\n      <add name="NServiceBus/Persistence/NHibernate/Subscription"\r\n           connectionString="Data Source=SomeProject.Bus.sqlite.subscription;Version=3;New=True;" />\r\n\r\n      <add name="NServiceBus/Persistence/NHibernate/Gateway"\r\n           connectionString="Data Source=SomeProject.Bus.sqlite.gateway;Version=3;New=True;" />\r\n\r\n      <add name="NServiceBus/Persistence/NHibernate/Distributor"\r\n           connectionString="Data Source=SomeProject.Bus.sqlite.distributor;Version=3;New=True;" />  \r\n    </connectionStrings>'
1257,'andreasohlund','Portcheck and and azure samples\n'
1256,'',"Scannable Assembly Exclusions\nI might be missing something here but when the Host.exe fires up it calls `GetScannableAssemblies` which doesn't take any notice of the default exclusions (in `Configure.cs`). I can appreciate that custom exclusions via `AllAssemblies.Except` won't be relevant at this point in the execution order but still the defaults would be nice.\r\n\r\nFurthermore when GetScannableAssemblies is called and gets a BadImageFormatException the error message indicates this can be resolved by adding custom exclusions, which as said above I don't think will work, in this particular scenario/execution-order.\r\n\r\nIt would seem the general assembly scanning that goes on from the point you run the Host.exe seems over exhaustive and sub-optimal, especially when you are unfortunate enough to have unmanaged DLLs in the mix."
1255,'',"Add SQLite/Interop.dll's to exclusions.\nWe use SQLite extensively for our system and integration testing and NSB throws BadImageFormatException's when trying to scan them, which although just an inconvenience is annoying. Suggested mod below."
1254,'','Better default for the RabbitMQ prefetch count\nWe currently default to 1 but if the users increase the thread count we should set the default value to the same\r\n\r\neg. 10 worker threads => prefetch = 10'
1253,'','Dependency issue in NServicebus.NHibernate NuGet package\nThe actual assembly depends on 3.3.0.4000 but the NuGet package specifies a dependency of 3.3.1.4000 (or greater) thus causing 3.3.3.4000 to be installed.\r\n\r\nThis occurs for the 3.3.8 version of NServiceBus.NHibernate and seemed OK in the 3.3.4 package I originally installed a few months ago.\r\n\r\nThe solution builds OK but I get a runtime error when it tries to load the assembly.'
1252,'',"Making sure that the correlation id is handled in a backwards compatible way\n@johnsimons @SimonCropp Please take a look\r\n\r\n* I've tested the full duplex with both v3,v4 and mixed\r\n* Tested the buyers remorse as well both v3=> v4 ans v4=> v3\r\n\r\nCan you merge tomorrow John?"
1251,'','add ravenuserinstaller\n@johnsimons @andreasohlund code review time'
1249,'','Shutdown race condition\n```\r\n2013-06-20 16:21:58,515 [14] ERROR NServiceBus.Transports.Msmq.MsmqDequeueStrategy [(null)] <(null)> - Error processing message.\r\nSystem.ObjectDisposedException: The semaphore has been disposed.\r\n   at System.Threading.SemaphoreSlim.Release(Int32 releaseCount)\r\n   at NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Action() in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqDequeueStrategy.cs:line 227\r\n   at System.Threading.Tasks.Task.Execute()\r\n```'
1248,'',"Only update CorrId header if it isn't already populated\nA problem exists in 4.0.0-unstable3157-3167 where the CorrId header is already in the Headers dictionary when calling Saga.RequestTimeout. Example:\r\n\r\nRequestTimeout<CheckForHardBounce>(TimeSpan.FromHours(1));"
1247,'','fixes issue #790 (Poco IAmStartedByMessages fails to start a saga)\n@johnsimons @andreasohlund \r\n\r\nThis can wait to be merged.\r\n\r\nBut can u guys see any issue with this?'
1246,'andreasohlund',"Update AzureHost IntegrationTest to include all configuration to make azure deployments straightforward\nThis pull just tidy's up the azurehost integration test project so that someone can easily deploy it into either the emulator or azure.\r\n\r\nIncluded configuration properties which weren't present and which stopped test running in azure as they were defaulting to UseDevelopmentStorage=true"
1245,'','remove PreserveStackTrace voodoo when we upgrade to .net 4.5\nthis commit https://github.com/NServiceBus/NServiceBus/commit/d1c2203442e44da742f6e55480ef668319c1b85a makes use of a obscure api to rethrow an inner exception exception\r\n\r\n    public static void PreserveStackTrace(this Exception e)\r\n    {\r\n        var context = new StreamingContext(StreamingContextStates.CrossAppDomain);\r\n        var objectManager = new ObjectManager(null, context);\r\n        var serializationInfo = new SerializationInfo(e.GetType(), new FormatterConverter());\r\n\r\n        e.GetObjectData(serializationInfo, context);\r\n        objectManager.RegisterObject(e, 1, serializationInfo); // prepare for SetObjectData\r\n        objectManager.DoFixups(); // ObjectManager calls SetObjectData\r\n    }\r\n\r\nHowever this feature is included OOTB in .net 4.5 with ExceptionDispatchInfo  http://msdn.microsoft.com/en-us/library/system.runtime.exceptionservices.exceptiondispatchinfo(v=vs.110).aspx\r\n\r\nfor more detail look here\r\nhttp://blogs.microsoft.co.il/blogs/sasha/archive/2011/10/19/capture-transfer-and-rethrow-exceptions-with-exceptiondispatchinfo-net-4-5.aspx'
1244,'',"We couldn't find a IConfigureTransport implementation for your selected transport: RabbitMQ\nI have an MVC application in .NET 4.0 where I am trying to use RabbitMQ as the transport. The connection string has been added to the web.config and the reference to the dll has been made. Here is the Bus initialization in my global.ascx.cs:\r\n\r\n    Bus = Configure.With()\r\n               .DefaultBuilder()\r\n               .Log4Net(new DebugAppender { Threshold = Level.Warn })\r\n               .XmlSerializer()\r\n               .UseTransport<NServiceBus.RabbitMQ>()\r\n               .PurgeOnStartup(true)\r\n               .UnicastBus()\r\n               .CreateBus()\r\n               .Start(() => Configure.Instance.ForInstallationOn<NServiceBus.Installation.Environments.Windows>().Install());\r\n\r\nWhen I run the project, I receive the error:\r\n\r\nWe couldn't find a IConfigureTransport implementation for your selected transport: RabbitMQ\r\n\r\nCan you please tell me what I am missing.\r\n\r\nThanks!"
1243,'johnsimons','Messages are being truncated to 8000 bytes when utilizing Second Level Retries and using NHibernate Timeout Persister\nWhen utilizing Second Level Retires and using NHibernate Timeout Persister with a SQL server database, messages are being truncated to 8000 bytes prior to being persisted to the TimeoutEntity table. The following message is logged:\r\n\r\n2013-06-17 15:04:04,831 [Worker.15] ERROR NHibernate.Event.Default.AbstractFlush\r\ningEventListener [(null)] <(null)> - Could not synchronize database state with s\r\nession\r\nNHibernate.PropertyValueException: Error dehydrating property value for NService\r\nBus.TimeoutPersisters.NHibernate.TimeoutEntity.State ---> NHibernate.HibernateEx\r\nception: The length of the byte[] value exceeds the length configured in the map\r\nping/parameter.\r\n   at NHibernate.Type.AbstractBinaryType.Set(IDbCommand cmd, Object value, Int32\r\nindex)\r\n   at NHibernate.Type.NullableType.NullSafeSet(IDbCommand cmd, Object value, Int\r\n32 index)\r\n   at NHibernate.Type.NullableType.NullSafeSet(IDbCommand st, Object value, Int3\r\n2 index, Boolean[] settable, ISessionImplementor session)\r\n   at NHibernate.Persister.Entity.AbstractEntityPersister.Dehydrate(Object id, O\r\nbject[] fields, Object rowId, Boolean[] includeProperty, Boolean[][] includeColu\r\nmns, Int32 table, IDbCommand statement, ISessionImplementor session, Int32 index\r\n)\r\n   --- End of inner exception stack trace ---\r\n   at NHibernate.Persister.Entity.AbstractEntityPersister.Dehydrate(Object id, O\r\nbject[] fields, Object rowId, Boolean[] includeProperty, Boolean[][] includeColu\r\nmns, Int32 table, IDbCommand statement, ISessionImplementor session, Int32 index\r\n)\r\n   at NHibernate.Persister.Entity.AbstractEntityPersister.Insert(Object id, Obje\r\nct[] fields, Boolean[] notNull, Int32 j, SqlCommandInfo sql, Object obj, ISessio\r\nnImplementor session)\r\n   at NHibernate.Persister.Entity.AbstractEntityPersister.Insert(Object id, Obje\r\nct[] fields, Object obj, ISessionImplementor session)\r\n   at NHibernate.Action.EntityInsertAction.Execute()\r\n   at NHibernate.Engine.ActionQueue.Execute(IExecutable executable)\r\n   at NHibernate.Engine.ActionQueue.ExecuteActions(IList list)\r\n   at NHibernate.Engine.ActionQueue.ExecuteActions()\r\n   at NHibernate.Event.Default.AbstractFlushingEventListener.PerformExecutions(I\r\nEventSource session)\r\n\r\nNserviceBus Version 3.3.8\r\nNhibernate Version 3.3.3.4000\r\nMS SQL Server 2008'
1242,'','Develop\n'
1241,'','Added support for more OSs when installing MSMQ\n@andreasohlund what do you think ?\r\nDoes it look ok?\r\n\r\n'
1240,'','remove .suo files from the repo\n'
1239,'','Update Documentation for AMQ Transport\nBy default AMQ sends messages that expire to the DLQ. If you use an audit queue with a message timeout a lot of messages end in the DLQ. The link below describes how to discard expired messages.\r\n\r\nhttp://activemq.apache.org/message-redelivery-and-dlq-handling.html'
1238,'','AzureMessageQueueReceiver and JsonMessageSerializer do not correctly deserialize MessageWrapper\nThe AzureMessageQueueReceiver and JsonMessageSerializer do not understand how to deserialize the MessageWrapper class which is used for azure storage queues.   The JsonMessageSerializer ends up returning a Json.NET internal object (JsonObject IIRC) which the AzureMessageQueueReceiver attempts to convert to a MessageWrapper and fails.\r\n\r\nThis fix passes the type MessageWrapper to the JsonMessageSerializer so that it attempts to deserialize to this type instead of the default object.\r\n\r\nThis pull request also includes the changes to the databus project to which I used to prove the above solution.\r\n'
1237,'',"EventLog Source\nNServiceBus does not seem to create an EventLog Source but one is created during `/install` . The name that it uses is the same as the service name which is also the one that we want to use ourselfs. \r\n\r\nThe problem is that we want to log to a custom log and not to 'Application'. The source is created under the Application log which in effect makes it impossible to use under a different log.\r\n\r\nThe only solution so far is to delete the source from the registry, run `EventLog.CreateEventSource` again and specifying a custom log but this is definitely a work-around.\r\n"
1236,'johnsimons','TimeoutTransportMessageHandler fails when saga id is Guid.Empty\n\r\nThe `TimeoutTransportMessageHandler` fails when the saga id is `Guid.Empty` which it should not.\r\n\r\nWhen saga id is null it should either just perform a cleanup with that value which by itself is valid or ignore the value but it should not result in the control message to endup in the error queue.\r\n\r\nAnother fix is that `Bus.ClearTimeoutsFor()` simply validates the given sagaId throwing an exception OR ignores\r\n\r\nAnother fix is that `SagaDispatcherFactory.NotifyTimeoutManagerThatSagaHasCompleted` checks the value before passing it to `Bus.ClearTimeoutsFor(Guid)`'
1235,'',"Prevent saga id from being changed\nIf a modification of the Saga Id then an exception will be thrown\r\n\r\n> A modification of IContainSagaData.Id has been detected. This property is for infrastructure purposes only and should not be modified. SagaType: TheSagaType\r\n\r\n--\r\n\r\nIn a response to a question of mine in the mailinglist it seems that you should not change the saga id. Although I'm not exactly sure why this is inappropriate as often you already use guids for identification and this unnecessarly uses more storage and creates an additional index which is not required as the primary key is already having a clustered index.\r\n\r\nAlthough it works I also found a scenario where it can cause issues. When two different saga types within the same service share the same ID and both are using timeouts then a timeout belong to just one of these saga types.\r\n\r\nYou could also say that a timeout which refers to a saga should not only be identified by its key but also by its type.\r\n\r\nBut, my guess is that changing the key should either be prevented (making the setter internal or ) or be checked for modification after the saga has been invoked."
1234,'','App.Config MessageEndpointMappings not working in NSB 3.3.8\nIn version 3.2.6 of NSB I had my endpoints mapped in my app config like this:\r\n\r\n    <UnicastBusConfig>\r\n      <MessageEndpointMappings>\r\n        <add Messages="Foo.Bar.Baz1, Foo.Interfaces" Endpoint="Foo.Bar.Monitor" />\r\n        <add Messages="Foo.Bar.Baz2, Foo.Interfaces" Endpoint="Foo.Bar.Monitor" />\r\n        <add Messages="Foo.Bar.Baz3, Foo.Interfaces" Endpoint="Foo.Bar.Monitor" />\r\n      </MessageEndpointMappings>\r\n    </UnicastBusConfig>\r\n\r\nThis worked fine. When I upgraded to NSB 3.3.8 I saw that the API for endpointmappings had changed, and that in particular, [the `Messages` attribute was deprecated][1], so I tried to port my code to one of the new methods. **None of them work**. Here are the three different methods I tried:\r\n\r\n    <UnicastBusConfig>\r\n      <MessageEndpointMappings>\r\n        <add Assembly="Foo.Interfaces" Endpoint="Foo.Bar.Monitor" />\r\n      </MessageEndpointMappings>\r\n    </UnicastBusConfig>\r\n\r\n<!---->\r\n\r\n    <UnicastBusConfig>\r\n      <MessageEndpointMappings>\r\n        <add Assembly="Foo.Interfaces" Namespace="Foo.Bar" Endpoint="Foo.Bar.Monitor" />\r\n      </MessageEndpointMappings>\r\n    </UnicastBusConfig>\r\n\r\n<!---->\r\n\r\n    <UnicastBusConfig>\r\n      <MessageEndpointMappings>\r\n        <add Assembly="Foo.Interfaces" Type="Foo.Bar.Baz1" Endpoint="Foo.Bar.Monitor" />\r\n        <add Assembly="Foo.Interfaces" Type="Foo.Bar.Baz2" Endpoint="Foo.Bar.Monitor" />\r\n        <add Assembly="Foo.Interfaces" Type="Foo.Bar.Baz3" Endpoint="Foo.Bar.Monitor" />\r\n      </MessageEndpointMappings>\r\n    </UnicastBusConfig>\r\n\r\n\r\nUsing any of these methods, when I try to send a `Baz1` I get an `InvalidOperationException: No destination specified for message(s): Foo.Bar.Baz1`.\r\n\r\nIt\'s worth noting that if I intentionally put in a typo in my type name (e.g. `Foo.Bar.Bazzzzz1`), NSB correctly faults during startup when it can\'t find the specified type, indicating that *something* must be happening to the ones that have no typos.\r\n\r\nI *can* work around this issue by directly specifying my endpoint as a parameter to `Send`, but [NSB recommends not doing that][2].\r\n\r\n\r\n  [1]: https://github.com/NServiceBus/NServiceBus/blob/master/Samples/PubSub/Subscriber1/App.config\r\n  [2]: http://support.nservicebus.com/customer/portal/articles/862387-how-do-i-specify-to-which-destination-a-message-will-be-sent-'
1233,'',"inferred nested types in XmlMessageSerializer.Deserialize\nI found a strange behaviour (bug?) in serialization/deserialization mechanism.\r\nThis is my message tree:\r\n```\r\n==>NServiceBus.IMessage\r\n  ==> IMyBusMessage\r\n    ==> M1\r\n    ==> M2\r\n    ==> ....\r\n```\r\nI'm sending 4 messages using `UnicastBus.Send(object[])`. These are message types:\r\nM1, M2, M2, M2.\r\n\r\nCalculations in `UnicastBus.SerializeEnclosedMessageTypes` resulted in 3 classes:\r\nM1, M2 and IMyBusMessages, so returned string ends with IMyBusMessage class\r\nname.\r\n\r\nWhen deserialization starts, method\r\n`DefaultMessageRegistry.GetMessageTypes(TransportMessage message)`\r\nreturns 3 MessageMetadata objects (for M1, M2 and IMyBusMessage).\r\n\r\nProblem is in method `XmlMessageSerializer.Deserialize`:\r\n```C#\r\nforeach (XmlNode node in doc.DocumentElement.ChildNodes)\r\n{\r\n....\r\n    if (messageTypesToDeserialize != null && position <\r\nmessageTypesToDeserialize.Count)\r\n        nodeType = messageTypesToDeserialize.ElementAt(position);\r\n```\r\n\r\nWhen position reaches 2, nodeType is set to third type in\r\nmessageTypesToDeserialize and that is interface IMyBusMessage. For position 3 and all subsequent positions \r\n`messageTypesToDeserialize.ElementAt(position)` returns null and nodeType is\r\ncorrectly calculated in Process ==> InferNodeType.\r\n\r\nSo, two out of three M2 messages are correctly deserialized. I don't\r\nunderstand why is position in messageTypesToDeserialize array related to\r\nposition in xml so I can't say what is wrong here. Anyway, this seems like\r\neither erroneous or inconsistent behaviour.\r\nAs a workaround I converted IMyBusMessage to class and that fixed the problem.\r\n\r\nI had same class hierarchy in V2.6 but evertyhing worked correctly. I'm using v4.0 rc1. \r\n"
1232,'','Rename Configure.TypesToScan\nConfigure.TypesToScan is not a good name since it contains "All the types found in the scanned assemblies" and not the "types to scan"\r\n\r\nHow about:\r\n\r\nConfigure.AvailableTypes|FoundTypes? Other suggestions?'
1231,'johnsimons',"Misspelled extension method 'AzureSubcriptionStorage' in 4.0.0 latest build\nMissing the 's'. Minor issue, but annoying so I'm reporting this.\r\n"
1230,'andreasohlund','Making gateway an IAdvancedSatellite\nAdded config to cater for longer transaction timeouts on messages\r\nforwarded to other sites. This is helpful when bandwidth between sites\r\nis limited.'
1229,'','Setup recovery to "restart service" when installing the windows host\nDoes TopShelf support this?\r\nCan we use sc.exe?\r\n\r\nhttp://technet.microsoft.com/en-us/library/cc742019(v=ws.10).aspx'
1228,'','Make the timeouts for our circuit breakers configurable\n'
1227,'',"Unable to verify multiple actions using NServiceBus.Testing.Handler<T>.ExpectSendLocal()\nI have a handler that needs to send a local message on every instance of an entity retrieved from a repository. The callback passed to `NServiceBus.Testing.Handler<>::ExpectSendLocal()` only gets invoked on the first invocation of `IBus::SendLocal()` in my handler. I've tried chaining a second `Handler<>::ExpectSendLocal()` but its callback is only invoked on the first one too. I have some examples on a SO question: http://stackoverflow.com/questions/16926925/how-to-verify-multiple-actions-in-nservicebus-handler."
1226,'','Making gateway an IAdvancedSatellite\nAdded config to cater for longer transaction timeouts on messages forwarded to other sites. This is helpful when bandwidth between sites is limited.'
1225,'',"Adding update lock to saga reads\nHi, I've worked with NSB for over an year now. We currently have a special scenario where one specific saga has high level of contention. Our DBA looked at the NSB approach for optimistic concurrency check, via repeatable reads. \r\n\r\nThe problem is that the implementation of repeatable reads of SQL Server relies on deadlocks..which is an expensive approach (detecting deadlocks is not cheap) and it also generates lots of noise in our log files (+ DBAs freak out when they see deadlocks in error logs). Also, we get (plenty of) scenarios where some competing messages end up in the error queue.\r\n\r\nSo, we decided to apply update locks to saga reads so that concurrent workers need to wait until the saga is released.  This is currently working well and we are applying it selectively to some endpoints where contention may be high. \r\n\r\nIdeally this is an optional and configurable (per saga?) feature, but for us it makes sense to be the default, since it is very rare to hit a saga and not update it.\r\n\r\nThanks very much in advance,\r\nSebastian"
1224,'','TimeoutPersister fails to connect using remote SqlServer persister\nI have a ASP.NET website using NServiceBus using the SqlServer persister that works locally but fails when running it using a remote database. I\'m using the recently released RC version. The endpoint config is:\r\n\r\n```xml\r\n<add name="NServiceBus/Transport" connectionString="Data Source=[ServerName];Initial Catalog=NServiceBus;User ID=NServiceBusTestUser;Password=[Password];Connect Timeout=60" />\r\n```\r\n\r\nThe [ServerName] and [Password] have been masked above. This database connection is also used in another computer that hosts a service process using NServiceBus to publish and does not get the error below:\r\n\r\nNServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver "Failed to fetch timeouts from the timeout storage"\r\n\r\nThe odd thing is that the website connects to Raven successfully via the log, and it can hit the database as when I subscribe to an event, it receives it. However I still get tons of messages with the error above and after enough errors, the bus is stopped.'
1223,'andreasohlund','#718 - Remove the gateway ACK call\nadded NHibernate deduplication and updated sample'
1222,'','Stop writing Raven port from main (NSB) installer.\nStop writing Raven port from main (NSB) installer.'
1221,'','Create a script pack for ScriptCs\n```\r\n#r "MyMessages.dll"\r\nRequire<NServiceBus>();\r\n\r\nusing(var myEndpoint = new Endpoint("MyEndpoint"))\r\n{\r\n       var bus = myEndpoint.Start();\r\n\r\n       bus.Send(new MyMessage())\r\n\r\n       Console.ReadKey();\r\n}\r\n\r\n```\r\n\r\nor the Nancy way\r\n\r\n```\r\n#r "MyMessages.dll"\r\nRequire<NServiceBus>().Host();\r\n\r\npublic class MyMessageHandler: IHandleMessages<MyMessage>\r\n{\r\n    public void Handle(MyMessage message)\r\n   {\r\n        Console.Out.WriteLine("Hello from scriptcs");\r\n   }\r\n}\r\n\r\n```'
1220,'','Add mscorelib.dll to the list of assemblies to autoexclude\n'
1219,'','#718 - Remove the gateway ACK call\nConfig for backwards compatibility'
1218,'',"Add username/password support for ActiveMQ SimpleAuthenticationPlugin\nI see that NServiceBus.Transports.ActiveMQ.SessionFactories.CreateNewSession is used to create a new session but it doesn't take any username or password into account.\r\n\r\nThis might be interesting when using secured ActiveMQ queues."
1216,'',"Memory Issues with MVC 4 and Visual Studio/IIS Express\nI've pushed a repro to https://github.com/benfoster/NServiceBusMemoryRepro.\r\n\r\nThis is just an empty MVC 4 application with the following code executed on startup:\r\n\r\n            Bus = NServiceBus.Configure.With()\r\n                .DefaultBuilder()\r\n                .XmlSerializer()\r\n                .Log4Net()\r\n                .MsmqTransport()\r\n                    .IsTransactional(false)\r\n                    .PurgeOnStartup(true)\r\n                .UnicastBus()\r\n                .CreateBus()\r\n                .Start();\r\n\r\nAs soon as the Bus starts the memory for the Visual Studio 2012 (Update 2) process starts to climb, eventually resulting in my computer (Windows 8) becoming unresponsive:\r\n\r\n![screen shot 2013-05-31 at 11 31 15](https://f.cloud.github.com/assets/827305/590295/8d0e83a0-c9dd-11e2-8315-b85e47b64376.png)\r\n\r\n![screen shot 2013-05-31 at 11 32 57](https://f.cloud.github.com/assets/827305/590296/99ca69ba-c9dd-11e2-8991-e7cab886a0c8.png)\r\n\r\nIn the above example I am using Windows within Parallels (Mac) but I experience the same issue when I boot into Windows natively (Macbook Pro).\r\n\r\nLet me know if you need any more info. Would love to understand what the issue is here as it's pretty much brought our project to a halt since I can't run our proof of concept to a client without my machine dying :(\r\n"
1215,'','Raven subscription storage calls session.Load outside the session\nIf you look at this code:\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/unicast/NServiceBus.Unicast.Subscriptions.Raven/RavenSubscriptionStorage.cs#L84\r\n\r\nAnd look up the call chain you realize that session.Load() is not called until after the session has run out of the scope, when the IEnumerable<Address> is evaulated.\r\n\r\nThe only reason that it works is that, AFAIK, IDocumentSession.Dispose() does not actually do anything.\r\n\r\nAlso, it should now be possible, at least for NSB 4.0, to use one single load for all documents instead to reduce roundtrips to the database.'
1214,'','Introduce a IResponse marker interface + convention\nIn order to better capture intent and there for be able to guide users better we should allow messages to be marked as "responses".\r\n\r\n* A response can only be bus.Replied\r\n\r\n* A response can not be subscribed to\r\n\r\n'
1213,'','Using new custom action to set trial date.\n'
1212,'','latest changes.\n'
1211,'','better argument validation for ReturnToSourceQueue\nReturnToSourceQueue needs some better argument validation. ie dont crash the process for invalid arguments\r\n\r\nFor example start ReturnToSourceQueue.exe and push return twice... crash\r\n\r\n    C:\\Code>ReturnToSourceQueue.exe\r\n    Please enter the error queue you would like to use:\r\n\r\n    Unhandled Exception: System.ArgumentException: Invalid destination address specified\r\n    Parameter name: destination\r\n       at NServiceBus.Address.Parse(String destination) in c:\\Code\\NServiceBus\\src\\NServiceBus\\Address.cs:line 74\r\n       at ReturnToSourceQueue.Program.Main(String[] args) in c:\\Code\\NServiceBus\\src\\tools\\management\\Errors\\ReturnToSourceQueue\\ReturnToSourceQueue\\Program.cs:line 33\r\n\r\n\r\nOr pass in an invalid queue\r\n\r\n    C:\\Code>ReturnToSourceQueue.exe kdjfngkdjnfgjkdnfg ksjdvjksdnvjkdf\r\n\r\n    Unhandled Exception: System.Messaging.MessageQueueException: The queue does not exist or you do not have sufficient permissions to perform the operation.\r\n       at System.Messaging.MessageQueue.MQCacheableInfo.get_Transactional()\r\n       at System.Messaging.MessageQueue.get_Transactional()\r\n       at NServiceBus.Tools.Management.Errors.ReturnToSourceQueue.ErrorManager.set_InputQueue(Address value) in c:\\Code\\NServiceBus\\src\\tools\\management\\Errors\\ReturnToSourceQueue\\ReturnToSourceQueue\\ErrorManager.cs:line 28\r\n       at ReturnToSourceQueue.Program.Main(String[] args) in c:\\Code\\NServiceBus\\src\\tools\\management\\Errors\\ReturnToSourceQueue\\ReturnToSourceQueue\\Program.cs:line 57\r\n'
1210,'','Table using Sql transport not named correctly when DefineEndpointName is used\nThis is for version 4.0.0 nuget package 4.0.0-unstable3129.\r\n\r\nBy default the Sql transport creates a table named Project.ComputerName where project is your Visual Studio project and ComputerName is your computer name when no endpoint name is specified for a Web application (ASP.NET MVC or non-MVC both have this issue). If you define an endpoint name using the DefineEndpointName method however, there is an error when you send or publish commands because it tries to reach the table with the endpoint name you\'ve specified, but it still has the old name (with the computer name in it). I could be doing something wrong here.\r\n\r\n```csharp\r\nreturn Configure.With()\r\n                .DefineEndpointName("MyExplicitName")\r\n                .DefaultBuilder()\r\n                .UseTransport<SqlServer>()\r\n                .XmlSerializer(dontWrapSingleMessages:true)\r\n                .PurgeOnStartup(true)\r\n                .UnicastBus()\r\n                .RunHandlersUnderIncomingPrincipal(false)\r\n                .LoadMessageHandlers()\r\n                .CreateBus()\r\n                .Start(() => Configure.Instance.ForInstallationOn<Windows>().Install());\r\n```'
1209,'','NHibernate SubscriptionStorage\nsession.Save of new Subscriptions is not sending an insert to the SQL DB.  Possibly needs a Flush before commit of transaction.\r\n\r\nWhen doing a SQL trace you see the select executed to check if the records are in the DB, however an insert it not performed.'
1208,'','MSI Installation for All Users has problem with NServiceBus PowerShell console shortcut\nIf you install NServiceBus 4.0 beta2 and select "Advanced" choosing to install for All Users (which is what I prefer for allowing me to do automated deployments once this is setup), the shortcut to NServiceBus PowerShell Prompt errors out loading the module because of it being in the x86 Program Files folder. The shortcut looks like this by default:\r\n\r\nC:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -command "Import-Module C:\\Program Files (x86)\\NServiceBus\\v4.0.0\\Binaries\\NServiceBus.PowerShell.dll | Out-Null"\r\n\r\nIf you add single quotes around the path to the dll it works fine:\r\n\r\nC:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -command "Import-Module \'C:\\Program Files (x86)\\NServiceBus\\v4.0.0\\Binaries\\NServiceBus.PowerShell.dll\' | Out-Null"'
1207,'','Updates in resources.\n'
1206,'',"CastleWindsorBuilder leaking memory\nIt seems that when using CastleWindsorBuilder in NServiceBus 3.3.7 and depending on a component that is IDisposable, that component is never released and thus leaking memory.\r\n\r\nI put up a gist reproducing the problem here: https://gist.github.com/FreekPaans/edb726be7ee468ab47e5. To use it setup a NServiceHost project and put that code in your EndpointConfig.cs. When running that code, you'll see the allocated private bytes for the process are ever increasing.\r\n\r\nThe problem doesn't occur with the DefaultBuilder and also doesn't when you remove IDisposable from testmesagehandler's interface list.\r\n\r\nATM this is causing production issues for us, so I might do a little more research later."
1205,'','Updates ico and png. Removed Studio installer.\nUpdates ico and png. Removed Studio installer.'
1204,'','More Performance Acceptance Tests\n'
1203,'SzymonPobiega','Overlapping DI registrations\nGiven\r\n\r\n    public class Initialization : INeedInitialization\r\n    {\r\n        public void Init()\r\n        {\r\n            var configureComponents = Configure.Instance.Configurer;\r\n            Configure.Instance.Configurer.ConfigureComponent<MyService>(DependencyLifecycle.SingleInstance);\r\n        }\r\n    }\r\n\r\nand this\r\n\r\n    public class MyService: IWantToRunWhenBusStartsAndStops\r\n    {\r\n        public bool Initialized;\r\n        public void Start()\r\n        {\r\n            Initialized = true;\r\n        }\r\n\r\n        public void Stop()\r\n        {\r\n        }\r\n    }\r\n\r\n\r\nThe problem with this is that the next time something resolves `MyService` then `Initialized` will be false. The reason is because in here https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Configure.cs#L341 the usages of `ForAllTypes` re-register different registrations for the type in question.\r\n\r\nSo when `IWantToRunWhenBusStartsAndStops` is resolved is find the `InstancePerCall` copy but later on when other types resolve `MyService` they will get the `SingleInstance`.\r\n\r\nThe fix is to, in `Configure.Initialized` check if types are already registered before re-registering them.'
1202,'andreasohlund','CorrelationId changes cause "Identifier is not in the incorrect format"\nSo I update to the latest NSB and I am now getting some exceptions around the CorrelationId. \r\n\r\nThe exception is\r\n\r\n    System.InvalidOperationException occurred\r\n      HResult=-2146233079\r\n      Message=Identifier is not in the incorrect format.\r\n      Source=System.Messaging\r\n      StackTrace:\r\n           at System.Messaging.Message.IdToByteArray(String id)\r\n           at System.Messaging.Message.set_CorrelationId(String value)\r\n           at NServiceBus.Transports.Msmq.MsmqUtilities.Convert(TransportMessage message) in \\NServiceBus-develop\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqUtilities.cs:line 206\r\n      InnerException: \r\n\r\nI assume it is to do with this https://github.com/NServiceBus/NServiceBus/commit/1b1b177261cdfe4e73bf518c7e316bc993a76454 where the checkin comment is `Removed unnecessary null checks around correlation id`.\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/commit/1b1b177261cdfe4e73bf518c7e316bc993a76454#L11L229\r\n\r\nThe code changed from\r\n\r\n    if (!string.IsNullOrWhiteSpace(message.CorrelationId))\r\n    {\r\n        result.CorrelationId = message.CorrelationId + "\\\\0";//msmq required the id\'s to be in the {guid}\\{incrementing number} format so we need to fake a \\0 at the end to make it compatible\r\n    }\r\n\r\nTo\r\n\r\n    result.CorrelationId = message.CorrelationId + "\\\\0";//msmq required the id\'s to be in the {guid}\\{incrementing number} format so we need to fake a \\0 at the end to make it compatible\r\n\r\n\r\nThe `TransportMessage.Id` was `TimeoutData/3555` so I had a look in RavenDB and sure enough there are records in TimeoutData that have a null CorrelationId. I also checked our production DB and it has the same case.\r\n\r\nSo what was the null check for and why was it removed?  \r\n\r\nSorry I have not been following the changes around CorrelationId'
1201,'johnsimons',"Feature/develop/config cmdlets\nDidn't hit EVERY config section, but I think these comprise the base / most important? Up for debate on that.\r\n\r\nThis does make the help a little ungainly and I'm not sure if there's a better ordering or a way to reorganize all the Add-NServiceBus_____Config cmdlets within the about_NServiceBus help that would be more useful."
1200,'','DataBus compression\n\r\nAlthough not very difficult to implement on my own it would maybe be of interest to be able to optionally compress data passed on the filedatabus. \r\n\r\nMaybe even making this generic so to first make if a compressed stream that is passed to the configured databus provider.\r\n\r\n'
1198,'','FileShareDataBus configuration\nThe storage location for the FileShareDataBus should be configurable via a nservice configuration section.\r\n\r\nNow you must do this manually by passing a path to the FileShareDataBus extension method.'
1197,'andreasohlund','Identifier in the incorrect format when storing audit event\nI\'ve got a class library that\'s a publisher with an event it\'s putting on the bus, and two web applications - an ASP.NET app and an ASP.NET MVC app that are subscribing to it. Both web applications receive the event and correctly write to the event log (using log4net) a message that they\'ve received the event.\r\n\r\nHowever, in the ASP.NET MVC application, when I look in the event log, immediately after logging that the event was received in the handler, there is an error within NServiceBus itself that "an identifier is in the incorrect format". The ASP.NET subscriber (non-MVC) does not get this error. I\'m using the latest version of 4.0 from nuget, version 4.0.0-unstable3090 posted yesterday. \r\n\r\nHere\'s my web.config settings related to NServiceBus (I\'ve wildcarded the assembly names to protect client info):\r\n\r\n```xml\r\n<MessageForwardingInCaseOfFaultConfig ErrorQueue="error" />\r\n\r\n  <UnicastBusConfig ForwardReceivedMessagesTo="audit">\r\n    <MessageEndpointMappings>\r\n      <add Assembly="*****" Endpoint="******" />\r\n    </MessageEndpointMappings>\r\n  </UnicastBusConfig>\r\n\r\n  <Logging Threshold="INFO"/>\r\n```\r\n\r\nHere\'s my endpoint initialization:\r\n\r\n```charp\r\nNServiceBus.SetLoggingLibrary.Log4Net(log4net.Config.XmlConfigurator.Configure);\r\n            NServiceBus.Configure.With().Log4Net();\r\n            return Configure.With()\r\n                .DefaultBuilder()\r\n                .ForMVC()\r\n                .XmlSerializer(dontWrapSingleMessages:true)\r\n                .PurgeOnStartup(true)\r\n                .UnicastBus()\r\n                .LoadMessageHandlers()\r\n                .CreateBus()\r\n                .Start(() => Configure.Instance.ForInstallationOn<Windows>().Install());\r\n```\r\n\r\nHere\'s the error I\'m getting:\r\n\r\n2013-05-22 08:18:27,418 [NServiceBus Dequeuer Worker Thread for [SMS@WIN8-CATAPULTJE] - 14] INFO  NServiceBus.Unicast.Transport.TransportReceiver [(null)] - Failed to process message\r\nNServiceBus.Unicast.Queuing.FailedToSendMessageException: Failed to send message to address: audit@WIN8-CATAPULTJE ---> System.InvalidOperationException: Identifier is not in the incorrect format.\r\n   at System.Messaging.Message.IdToByteArray(String id)\r\n   at System.Messaging.Message.set_CorrelationId(String value)\r\n   at NServiceBus.Transports.Msmq.MsmqUtilities.Convert(TransportMessage message) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqUtilities.cs:line 206\r\n   at NServiceBus.Transports.Msmq.MsmqMessageSender.Send(TransportMessage message, Address address) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqMessageSender.cs:line 44\r\n   --- End of inner exception stack trace ---\r\n   at NServiceBus.Transports.Msmq.MsmqMessageSender.ThrowFailedToSendException(Address address, Exception ex) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqMessageSender.cs:line 89\r\n   at NServiceBus.Transports.Msmq.MsmqMessageSender.Send(TransportMessage message, Address address) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqMessageSender.cs:line 80\r\n   at NServiceBus.Unicast.UnicastBus.ForwardMessageIfNecessary(TransportMessage m) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1343\r\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder childBuilder, TransportMessage msg) in c:\\BuildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1231'
1196,'',"RabbitMQ Transport seems to leak threads\nFor certain integration and acceptance tests we're starting the bus up in a self hosted scenario.  It appears that the RabbitMQ transport is leaking threads which causes VSTest to not want to shut down.\r\n\r\nThis might be related to the same PersistentConnection problem that plagued the RabbitMQ installer for creating queues.\r\n\r\nI'll provide a sample in the near future."
1195,'','Why does ObjectBuilder.Ninject need to reference Ninject.Extensions.ContextPreservation?\nThis reference seem redundant'
1194,'','Develop\nDisabled registry redirection on x64 machines and set new default port.'
1193,'','cache results of DefaultMessageRegistry.GetMessageTypes\nShould we cache the results of DefaultMessageRegistry.GetMessageTypes??'
1192,'','Custom hbm.xml only works as embedded resource\nWhen custom nhibernate mappings are used then these must be added as embedded resource. If would be nice if *.hbm.xml files that are located in the folder are added to the nhibernate configuration as well.\r\n\r\nThis would require to add the following statement:\r\n\r\n    nhibernateConfiguration.AddDirectory(new DirectoryInfo(Environment.CurrentDirectory));\r\n\r\nThis should be added to the SessionFactoryBuilder\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/nhibernate/SagaPersister/NServiceBus.SagaPersisters.NHibernate.Config/Internal/SessionFactoryBuilder.cs#L42\r\n\r\n\r\nI can create a pull request for this with a matching test if that would be helpful.\r\n\r\n'
1191,'johnsimons',"Column TimeoutEntity.Endpoint length is incorrect\nThe TimeoutEntity table that is generated via NHibernate also requires an index called 'EndpointIdx' but creating this index results in the following warning:\r\n\r\nWarning! The maximum key length is 900 bytes. The index 'EndpointIdx' has maximum length of 2048 bytes. For some combination of large values, the insert/update operation will fail.\r\n\r\nSo either the Endpoint column length should be nvarchar(450) or varchar(900) or the whole EndpointIdx index should not be created."
1190,'','Json serializer does not support versioning of the interfaces\n"It looks like the Json Serializer does not support the versioning of interfaces that the XML Serializer does. I converted the versioning sample to use JSON and started getting warning about receiving empty messages. \r\n\r\nIt looks like only the V2Message type is in the message\r\n\r\n    [{"$type":"V2.Messages.ISomethingHappened, V2.Messages","MoreInfo":"It\'s a secret.","SomeData":1}]\r\n\r\nvs. the XML Message looks like this:\r\n\r\n    <Messages xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n        xmlns:xsd="http://www.w3.org/2001/XMLSchema" \r\n        xmlns="http://tempuri.net/V2.Messages"\r\n        xmlns:baseType="V1.Messages.ISomethingHappened">\r\n    <ISomethingHappened>\r\n    <MoreInfo>It\'s a secret.</MoreInfo>\r\n    <SomeData>1</SomeData>\r\n    </ISomethingHappened>\r\n    </Messages>\r\n\r\nSteps to reproduce\r\n1. Change the Publisher, Subscriber1 and Subscriber2 to use JsonSerializer\r\n2. Publish an event\r\n3. Subscriber2 gets the event (with more data -- "Its a secret"), However Subscriber1 has the following behavior:\r\n\r\nIn version 3.3.7, Subscriber 1 says:\r\n\r\n    2013-05-19 23:18:49,206 [Worker.12] WARN  NServiceBus.Unicast.UnicastBus [(null)] <(null)> - Received an empty message - ignoring.\r\n\r\nIn version 4.0, Subscriber 1 although it receives the event, it logs the following warning:\r\n\r\n    2013-05-19 23:20:43,326 [NServiceBus Dequeuer Worker Thread for [V1Subscriber@SELENE] - 15] INFO  NServiceBus.Unicast.DefaultDispatcherFactory [(null)] <(null)>\r\n     - Message type: V2.Messages.ISomethingHappened, V2.Messages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null could not be determined by a Type.GetType, scanning known messages for a match\r\n    2013-05-19 23:20:43,329 [NServiceBus Dequeuer Worker Thread for [V1Subscriber@SELENE] - 15] WARN  NServiceBus.Unicast.DefaultDispatcherFactory [(null)] <(null)>\r\n     - Could not determine message type for message identifier: V2.Messages.ISomethingHappened, V2.Messages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n    ======================================================================\r\n    Something happened with some data 1 and no more info\r\n\r\n'
1189,'',"Fixes #718 - Remove the gateway ACK call \nResurrected gateway unit tests!!\r\n\r\nNo-ack gateway receiver backwards compatible with the old sender (proven with unit test)\r\n\r\nAdded simpler deduplication mechanism. Message body is no longer persisted.\r\nImplementations\r\n- in-memory\r\n- RavenDB\r\n- simple sql (no NHibernate)\r\n\r\nNew receiver manages databus property ids in memory only (databus properties arrive before the message body)\r\n\r\nHaven't done any work on config. Happy for NSB devs to take over or provide guidance/help."
1188,'','Add pull request detection to TeamCity \n\r\nhttp://blogs.jetbrains.com/teamcity/2013/02/06/automatically-building-pull-requests-from-github-with-teamcity/\r\n'
1187,'','Added logging to explain why an exception is being thrown\nIf a sender uses unobtrusive mode and the receiver has not then\r\nan exception about a missing key is thrown, which is not informative as to how to fix things. Added a check and logging to suggest looking at adding unobtrusive mode.'
1186,'','Some test classes missing the TestFixtureAttribute\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/impl/SagaPersisters/InMemory/NServiceBus.SagaPersisters.InMemory.Tests/When_multiple_workers_retrieve_same_saga.cs\r\n\r\n\r\nIs this by design?'
1185,'','setting a mock to a static shared state\nSo in these files\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/nhibernate/NServiceBus.Persistence.NHibernate.Tests/ConfigureSqlLiteIfRunningInDebugModeAndNoConfigPropertiesSet.cs#L25\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/nhibernate/NServiceBus.Persistence.NHibernate.Tests/ConfigureSqlLiteIfRunningInDebugModeAndNoConfigPropertiesSet.cs#L47\r\n\r\nThere is this code\r\n\r\n            var loggerFactory = new DynamicMock(typeof (ILoggerFactory));\r\n            var log = new DynamicMock(typeof (ILog));\r\n            loggerFactory.ExpectAndReturn("GetLogger", log.MockInstance, typeof (ConfigureNHibernate));\r\n            log.Expect("WarnFormat");\r\n\r\n            LogManager.LoggerFactory = (ILoggerFactory) loggerFactory.MockInstance;\r\n\r\nThe issue with this is that it sets the static `LogManager.LoggerFactory` to a mock that has only one expectation.\r\n\r\nSo when another test calls `GetLogger` it will throw with `Too many calls to GetLogger`. For example here is the stack trace I get (similar happens for several hundred others) that run after `ConfigureSqlLiteIfRunningInDebugModeAndNoConfigPropertiesSet`\r\n\r\n    SetUp :   Too many calls to GetLogger\r\n      Expected: True\r\n      But was:  False\r\n\r\n\r\n    Server stack trace: \r\n       at NUnit.Framework.Assert.That(Object\xa0actual,\xa0IResolveConstraint\xa0expression,\xa0String\xa0message,\xa0Object[]\xa0args)\r\n       at NUnit.Mocks.MockMethod.Call(Object[]\xa0args)\r\n       at NUnit.Mocks.Mock.Call(String\xa0methodName,\xa0Object[]\xa0args)\r\n       at NUnit.Mocks.MockInterfaceHandler.Invoke(IMessage\xa0msg)\r\n\r\n    Exception rethrown at [0]: \r\n       at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage\xa0reqMsg,\xa0IMessage\xa0retMsg)\r\n       at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(ref\xa0MessageData\xa0msgData,\xa0Int32\xa0type)\r\n       at NServiceBus.Logging.ILoggerFactory.GetLogger(Type\xa0type)\r\n       at NServiceBus.Logging.LogManager.GetLogger(Type\xa0type) in LogManager.cs: line 35\r\n       at NServiceBus.Configure.get_Logger() in Configure.cs: line 737\r\n       at NServiceBus.Configure.With(IEnumerable`1\xa0typesToScan) in Configure.cs: line 274\r\n       at NServiceBus.Configure.With(Assembly[]\xa0assemblies) in Configure.cs: line 248\r\n       at NServiceBus.Scheduling.Tests.ScheduleTests.SetUp() in ScheduleTests.cs: line 22\r\n'
1183,'','Possibly move to mono implementation of  Json\n'
1182,'','Update all our dependencies\n'
1181,'','Further fixes for IdForCorrelation, MessageId and CorrelationId\nWhat is missing here is using the correlation ID for identifiying the callbacks and also there is a TODO left in the TransportMessage which can be safely removed as discussed with @andreasohlund'
1180,'','Queue creation fails for RabbitMQ when not run under debugger\nI\'m pretty sure I know what\'s happening with this one but absolutely no idea why...\r\nI have an endpoint which refuses to create queues unless I run it under the debugger.\r\n\r\nUsing "NServiceBus (unstable) 4.0.0-unstable3060".  (14th May).  RabbitMQ transport.\r\nThe endpoint has a single commandhandler which drains a queue and publishes events.\r\n\r\nThe logs output for Start-WithoutDebugging show this:  http://imgur.com/KTWvpO6   \r\nWhereas if I run Start-Debugging the logs show this:  http://imgur.com/rvvFKxP\r\n\r\nWhat appears to be happening (took me ages to spot this) is that when it fails, the RabbitMQ.PersistentConnection is somehow disposed before it tries to connect - and silently fails.\r\nThis is bad because as the bus starts up it all looks ok except the queue hasn\'t been created and so the threads that try to read from it eventually fall over and take down the process.\r\nI have run and re-run this process a lot and it (the problem) never happens while debugging - only without debugging.\r\n\r\nRelevant code block is http://imgur.com/uaaW6FZ  - I don\'t understand what\'s going on with the disposed check (why the PersistentConnection would be disposed when run without debugging but so far never disposed when run with debugging), nor why it doesn\'t throw an ObjectDisposedException.  Obviously something is causing the PersistentConnection to be disposed, don\'t know what though.\r\n\r\nI don\'t know if it\'s at all related or just coincidental but another process I have which subscribes to the published events never has this problem (in debug or non-debug mode) - queues are always created when the process is just subscribing to events.\r\n'
1179,'',"Spring doesn't support both setter and constructor injection on the same dependency\nRepro: https://github.com/NServiceBus/NServiceBus/commit/b339987cf23094b05f306485f2d7748f911830dc"
1178,'',"Container.BuildAll<T> results are reevaluated for every iteration\nI'm using Castle Windsor as container so this might not affect the others.\r\n\r\nIn this code the host resolves a list of IWantToRunAtStartup:\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/hosting/NServiceBus.Hosting/Configuration/ConfigurationManager.cs#L56\r\n\r\nThe result is stored in an IEnumerable. When shutdown is then initiated, the list is iterated again in order to stop the instances. However, when the list i iterated again, it resolves new objects. These IWantToRunAtStartup instances that the host is trying to stop where never started in the first place.\r\n\r\nOne solution of course is to convert the enumerable to a list:\r\n\r\n    thingsToRunAtStartup = Configure.Instance.Builder.BuildAll<IWantToRunAtStartup>().ToList();\r\n\r\nBut I suspect that this is can be considered an implementation leak from the builder interface and perhaps the builder should be fixed instead?\r\n"
1176,'andreasohlund','Use proper ActiveMQ Retries\n'
1175,'johnsimons','Develop\nINSTL 32 and 33 - Done'
1174,'','Configure.With(types) fails for RabbitMQ transport\nthis Configuration throws an exception:\r\n```cs\r\nConfigure.With(types).UseTransport(RabbitMQ);\r\n```\r\nException message is: "We couldn\'t find a IConfigureTransport implementation for your selected transport: RabbitMQ"\r\nand I can see a couple of messages missing in the Config.InfrastructureServices logs - I guess some defaults aren\'t being set when custom scanning is in play...?\r\n\r\nMissing messages from logs (these appear when using default scanning):\r\n"Default provider for infrastructure service NServiceBus.Transports.RabbitMQ.Routing.IRoutingTopology has been set to NServiceBus.Transports.RabbitMQ.Routing.ConventionalRoutingTopology, lifecycle: SingleInstance"  and\r\n"Default provider for infrastructure service NServiceBus.Transports.RabbitMQ.IManageRabbitMqConnections has been set to a custom action"'
1173,'','Removing IdForCorrelation\nThis pull request addresses #1165 and #1063\r\n\r\nThe work is not yet completed. Opened the pull request as discussion base. Still some questions open:\r\n\r\n1. What do we do in case of the Gateway? \r\nCurrently the correlation id is coming from the web request and can be null. The current implementation checks for null and overrides the correlation id if set. \r\n2. AutoCorrlateSagaOnReplyMutator assumes\r\n            //if correlation id is not set this is not a replay so we can just return\r\n            if (string.IsNullOrEmpty(transportMessage.CorrelationId))\r\n                return;\r\n   is that still correct?\r\n\r\nPlease review and feedback. Or merge and correct :dancer: '
1172,'','does Autofac.Configuration.dll need to be referenced and ILMerged in the core?\nAs I understand it Autofac.Configuration.dll is for advanced XML configuration cases.\r\nI am guessing but i doubt this is required in the NSB core dll??'
1171,'johnsimons','RavenConventions changed to internal with no alternative and no ObsoleteAttribute\nSo RavenConventions has been made internal\r\n\r\nold\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/Persistence/RavenPersistence/NServiceBus.Persistence.Raven/RavenConventions.cs\r\n\r\nnew\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Persistence/Raven/RavenConventions.cs\r\n\r\ndone here\r\nhttps://github.com/NServiceBus/NServiceBus/commit/b4c56d2e291106404c92c3ee1dd00c89251a617f#src/NServiceBus.Core/Persistence/Raven/RavenConventions.cs\r\n\r\ntwo points\r\n\r\n1. Why is there no obsolete attribute?\r\n2. What is the alternative since I am using this class?'
1170,'andreasohlund',"Configuration locked exception in AzureHost integration test\nI was using AzureHost example from integrations test (latest develop branch)\r\nand got ConfigutationErrorException (The settings has been locked for modifications) during worker startup.\r\n\r\nThe problem is:\r\n```charp\r\nConfigure.Initialize()\r\n{ \r\n   [...]\r\n   //lockdown the settings\r\n   SettingsHolder.PreventChanges();\r\n   ActivateAndInvoke<IFinalizeConfiguration>(t => t.FinalizeConfiguration());\r\n   [..]\r\n}\r\n```\r\nIn FinalizedConfigurations features are being initialized. One of them (MessageDrivenPublisher) is changing configuration:\r\n\r\n```charp\r\npublic override void Initialize() {\r\n[..]\r\nConfigure.Component<StorageDrivenPublisher>(DependencyLifecycle.InstancePerCall);\r\n\r\nInfrastructureServices.Enable<ISubscriptionStorage>(); <--- exception\r\n}\r\n```\r\n\r\nSwapping    SettingsHolder.PreventChanges() and  ```ActivateAndInvoke<IFinalizeConfiguration>``` solves this problem, but I'm not sure if it is a proper fix."
1169,'','Fixes#1065 - added ChannelType attribute to gateway\nso the HttpChannelSender can handle both http and https when using KeyPrefixConventionSiteRouter. If no attributes are found, ChannelFactory.RegisterSender uses the old convention based registration'
1168,'','Replaced hard coded path in AzureConfigurationSource.\nI changed the hard coded configuration path in AzureConfigurationSource to HostingEnvironment.ApplicationVirtualPath. This has the advantage of allowing virtual applications within a site to have their own web.config and NSB endpoint.'
1167,'johnsimons',"NServiceBus.host.exe /install hangs when using the rabbitmq transport\nWe've noticed that installs work successfully, but hang when using the RabbitMQ transport.\r\n\r\nI've pulled down the latest 4.0.0 source branch and tried to do some poking around.  I don't know the source well, but I believe it is in the realm of the PersistentConnection used to CreateQueues.\r\n\r\nWe do not have any custom Installers.  This happens before start."
1166,'','Change AzureConfigurationSource to use HostingEnvironment.ApplicationVirtualPath\nPlease change AzureConfigurationSource.GetConfigurationHandler() to the following implementation; it uses HostingEnvironment.ApplicationVirtualPath instead of hardcoding the path to the root directory. This has the advantage of allowing virtual applications within a site to have their own web.config and NSB endpoint.\r\n\r\n```\r\nprivate static Configuration GetConfigurationHandler()\r\n        {\r\n            if (IsWebsite()) return WebConfigurationManager.OpenWebConfiguration(HostingEnvironment.ApplicationVirtualPath);\r\n\r\n            return ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);\r\n        }\r\n```'
1165,'andreasohlund','Correlation Id not set in latest develop\nWe recently upgraded to latest develop again and have now the issue that the correlation id is not set on the message. Any ideas where this regression comes from?'
1164,'','AzureSagaPersister ignores Unique attribute\nBased on the implementation in AzureSagaPersister it looks like there is no protection against duplicate sagas. Unlike the Raven and NHibernate persisters the Unique attribute is ignored. Somehow it should be clear that configuring NSB with this persister means duplicate sagas are possible, or it should be changed to enforce uniqueness like the other persisters.'
1163,'',"Using RoleEntryPoint for an SDK 2.0 worker role crashes role on startup.\nI'm using the v4 beta2 bits and azure sdk v2.0 and when I try to start a worker role in the emulator using the RoleEntryPoint implementation in NSB it stops immediately. "
1162,'','Error message "Received an empty message - ignoring" hides a multitude of sins\nUsing NServiceBus v3.3.6, the error message "Received an empty message - ignoring" can hide problems that aren\'t related to an empty message.\r\n\r\nFor example, I explicitly set the assemblies for NSB to scan and forgot to include the assembly containing my handlers. I got the error message "Received an empty message - ignoring". This is very misleading, took me some time to resolve the actual issue (handler not registered).\r\n\r\nI\'ve had a similar problem before with the message "Received an empty message - ignoring" hiding or obscuring another underlying issue. I think that instance was a serialization mismatch. While "Received an empty message - ignoring" is sort of correct in this instance its not really precise enough.\r\n\r\nI suspect there is a catch all somewhere. Is it possible to get better error messages? E.g. "no handlers found" or "serialization error" accordingly?\r\n\r\nThanks.'
1160,'mookid8000','When using SqlTransport, starting an endpoint using Master profile throws exceptions\nSteps to reproduce:\r\n\r\n1. In the Scale out sample, Change the `Orders.Sender` & `Orders.Handler` to use `SqlTransport`.\r\n2. Start the `Orders.Handler` (notice the exceptions on the `Orders.Handler` when run with the `NServiceBus.Master` profile)\r\n3. Run the `Orders.Handler`, removing the `NServiceBus.Master` profile, and also start the `Orders.Sender` and both endpoints work as expected, and are able to send messages to each other using `SqlServer` transport..\r\nStarting the Worker nodes (using `NServiceBus.Worker` profile) also starts up ok.\r\n\r\nHowever, using the Master profile, It seems to want to use MSMQ..\r\n\r\n\tSatellite NServiceBus.Distributor.DistributorSatellite, NServiceBus.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c failed to start.\r\n\tNServiceBus.Satellites.SatelliteLauncher.StartSatellite(c:\\TeamCity\\buildAgent\\work\\b0050f22cfad1731\\src\\NServiceBus.Core\\Satellites\\SatelliteLauncher.cs:117)\r\n\tSystem.Messaging.MessageQueueException (0x80004005): The queue does not exist or you do not have sufficient permissions to perform the operation.\r\n\tat System.Messaging.MessageQueue.MQCacheableInfo.get_Transactional()\r\n\tat System.Messaging.MessageQueue.get_Transactional()\r\n\tat NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.Start() in c:\\TeamCity\\buildAgent\\work\\b0050f22cfad1731\\src\\NServiceBus.Core\\Transports\\Msmq\\WorkerAvailabilityManager\\MsmqWorkerAvailabilityManager.cs:line 110\r\n\tat NServiceBus.Satellites.SatelliteLauncher.StartSatellite(SatelliteContext ctx) in c:\\TeamCity\\buildAgent\\work\\b0050f22cfad1731\\src\\NServiceBus.Core\\Satellites\\SatelliteLauncher.cs:line 117\r\n\r\n\r\n'
1159,'johnsimons','Make InstallLicense tool default to HKLM\n'
1158,'','Removed virtual property on TransportDefinition\n'
1157,'johnsimons','Check SqlServerMessageSender TimeToBeReceived handling\nSqlServerMessageSender has this code:\r\n\r\n```csharp\r\nif (message.TimeToBeReceived.Ticks > DateTime.MaxValue.Ticks - DateTime.UtcNow.Ticks ||\r\n    message.TimeToBeReceived.Ticks < DateTime.MinValue.Ticks - DateTime.UtcNow.Ticks)\r\n{\r\n    command.Parameters.Add("Expires", SqlDbType.DateTime).Value = DBNull.Value;\r\n}\r\nelse\r\n{\r\n    command.Parameters.Add("Expires", SqlDbType.DateTime).Value = DateTime.UtcNow.Add(message.TimeToBeReceived);\r\n}\r\n```\r\n\r\nThe second check in the if block may be incorrect, as 1) it\'s subtracting a value from DateTime.MinValue, and 2) checking if something is less than that already too small value.\r\n\r\nYou should double check this code and make sure it\'s doing what you want it to.'
1156,'','Develop\nhttp://particular.myjetbrains.com/youtrack/issue/INSTL-28\r\n\r\nhttp://particular.myjetbrains.com/youtrack/issue/INSTL-13#'
1155,'johnsimons','"Repeted" is spelled incorrectly in the SqlServer and RabbitMQ transports\nHere: \r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/4.0.0/src/RabbitMQ/NServiceBus.RabbitMQ/RabbitMqDequeueStrategy.cs#L194\r\n\r\nand here:\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/4.0.0/src/SqlServer/NServiceBus.SqlServer/SqlServerPollingDequeueStrategy.cs#L402\r\n\r\n'
1154,'','Failing ActiveMq test when running with disabled transactions\nhttps://github.com/NServiceBus/NServiceBus/commit/222f1ead6a6d195b7925185993779d031a7457c1'
1153,'','Do not explicitly rollback NH transactions\nDue to a race condition in NH and if using multiple NH sessions inside one DTC transaction, then this can case the following exception during a rollback:\r\n\r\n    SqlException ("The ROLLBACK TRANSACTION request has no corresponding BEGIN TRANSACTION.")\r\n\r\nAnd corrupt the sql connection pool. Explicit rollback is not necessary as the transactions will be rolled back anyway.'
1152,'andreasohlund','Should write the number of attempts when logging message faulure\nWhen logging that a message has failed the max number of times can we also write how many times it tried.\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Transport/TransportReceiver.cs#L309\r\n\r\n\tif (Configure.Instance.Builder.Build<SecondLevelRetries>().Disabled)\r\n\t{\r\n\t\tLogger.ErrorFormat("Message has failed the maximum number of times allowed, ID={0}.", message.IdForCorrelation);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tLogger.WarnFormat("Message has failed the maximum number of times allowed, message will be handed over to SLR, ID={0}.", message.IdForCorrelation);\r\n\t}'
1151,'','v 4.0.0 unstable3006 (Azure integration) message failure handling\n- error queue is not created;\r\n- failing messages are never sent to the error queue;\r\n\r\nlooking in the code seems that nothing is registering an IManageMessageFailures.\r\n\r\n.m'
1150,'johnsimons','Change sql queue Headers field to varchar(max)\nWhen message handling fails the stack trace is included in the headers of the message sent to either SLR or error.  Very long stacks overflow the column and cause the failed message not to be able to be sent.'
1149,'','Updates on NServiceBus core project\nhttp://particular.myjetbrains.com/youtrack/issue/INSTL-27#'
1148,'johnsimons',"NServiceBus.NHibernate doesn't map the length of TimeoutEntity.State\nI've just moved over to using NHibernate persistence for Sagas and Timeouts and have hit an issue with the persistence of TimeoutEntity.\r\n\r\nFrom looking at the code, TimeoutEntityMap doesn't map the length of the State field, so it must be using some default (I couldn't work out exactly what that is). The problem is when a timeout message is created with a large State (eg 10K), I get the following error:\r\n\r\n> NHibernate.PropertyValueException: Error dehydrating property value for NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.State ---> NHibernate.H\r\nibernateException: The length of the byte[] value exceeds the length configured in the mapping/parameter.\r\nat NHibernate.Type.AbstractBinaryType.Set(IDbCommand cmd, Object value, Int32 index)\r\nat NHibernate.Type.NullableType.NullSafeSet(IDbCommand cmd, Object value, Int32 index)\r\nat NHibernate.Type.NullableType.NullSafeSet(IDbCommand st, Object value, Int32 index, Boolean[] settable, ISessionImplementor session)\r\nat NHibernate.Persister.Entity.AbstractEntityPersister.Dehydrate(Object id, Object[] fields, Object rowId, Boolean[] includeProperty, Boolean[][] i\r\nncludeColumns, Int32 table, IDbCommand statement, ISessionImplementor session, Int32 index)\r\n\r\nNow this isn't normally a problem, as the timeout messages are usually very small. But, I've hit this issue when enabling Second Level Retries. I'm guessing that the message to retry is put into the State field of the timeout message."
1147,'',"TableName attribute does not work as expected\nUsing NHibernate to store sagas and I would like them to be stored in a specific schema. \r\n\r\nI've added TableName attribute to the sagadata-class and that works. \r\n\r\nInside my sagadata I've got a property Dictionary<Guid, bool>. The table for that property is not added to my specified schema, but instead to [dbo]. \r\n\r\nI've tried to add the attribute to the property without luck."
1146,'andreasohlund','ActiveMQ Native transaction with FLR fixed, closes #1099\nNow as a pull request. @andreasohlund could you rework this into feature design?'
1145,'','Fixing issue 1138\nhandling messages without a "reply to" value (e.g. when sending from a send-only endpoint)'
1144,'','Fixed Memoryleak in the ActiveMQ NMS library\nhttps://issues.apache.org/jira/browse/AMQNET-434'
1143,'andreasohlund','Fixing issue 1138\nhandling messages without a "reply to" value (e.g. when sending from a send-only enpoint)'
1142,'','add full config sample for second-level-retries\nhere http://support.nservicebus.com/customer/portal/articles/856620-second-level-retries\r\nit says\r\n\r\n    <SecondLevelRetriesConfigEnabled="true" TimeIncrease ="00:00:10" NumberOfRetries="3" />\r\n\r\nbut it should include a full sample so the config section is there ie\r\n\r\n    <section name="SecondLevelRetriesConfig" type="NServiceBus.Config.SecondLevelRetriesConfig, NServiceBus.Core"/>\r\n\r\nAlso not the current sample is missing a space'
1141,'','Fixing issue 1138\nhandling messages without a "reply to" value (e.g. when sending from a send-only enpoint)'
1140,'andreasohlund','Fixing Windsor singleton registration issue (#1136)\n'
1139,'','fixing issue #1136 and adding support for Windows ServiceBus 1.0\nAdding test and fix for issue #1136 (https://github.com/NServiceBus/NServiceBus/issues/1136)\r\nAdding support for Windows ServiceBus 1.0'
1138,'andreasohlund','4.0 Beta Azure ServiceBus send failure from a send-only endpoint\nIn the AzureServiceBusMessageQueueSender:\r\n\r\n    private void Send(TransportMessage message, QueueClient sender)\r\n\r\nif the message is sent fomr a send only endpoint the message does not contain a ReplyToAddress so this fails:\r\n\r\n    brokeredMessage.ReplyTo = message.ReplyToAddress.ToString();'
1137,'','FatalExecutionEngineError debugging and FailFast\nThis issue was raised on the mailing list, see http://tech.groups.yahoo.com/group/nservicebus/message/18755\r\n\r\nThe problem is that if there is a configuration/startup exception in the NServiceBus host, the error/stacktrace of the root exception is not shown.\r\n\r\nThe code that is problematic is [this](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Hosting/GenericHost.cs#L44) (copied here for convenience):\r\n```c#\r\ntry\r\n{\r\n    PerformConfiguration();\r\n\r\n    bus = Configure.Instance.CreateBus();\r\n    if (bus != null && !SettingsHolder.Get<bool>("Endpoint.SendOnly"))\r\n    {\r\n        bus.Start();\r\n    }\r\n\r\n    configManager.Startup();\r\n    wcfManager.Startup();\r\n}\r\ncatch (Exception ex)\r\n{\r\n    //we log the error here in order to avoid issues with non serializable exceptions\r\n    //going across the appdomain back to topshelf\r\n     LogManager.GetLogger(typeof(GenericHost)).Fatal("Exception when starting endpoint.", ex);\r\n     Environment.FailFast("Exception when starting endpoint.", ex);\r\n}\r\n```\r\n\r\nThe problem is we assume that `LogManager` has already been configured but that may not be correct because for example:\r\n```c#\r\npublic class LoggingConfiguration : IConfigureLoggingForProfile<Production>\r\n{\r\n    public void Configure(IConfigureThisEndpoint specifier)\r\n    {\r\n        SetLoggingLibrary.NLog();\r\n\r\n        throw new Exception("Foo boo aaa...");\r\n\r\n        NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(new NLog.Targets.ColoredConsoleTarget());\r\n    }\r\n}\r\n```\r\n\r\nWhat would be the state of the logger?\r\n\r\nTo address this issue I recommend we do a `Console.Out` as well.\r\nSo the code would end up like:\r\n```c#\r\ncatch (Exception ex)\r\n{\r\n    //we log the error here in order to avoid issues with non serializable exceptions\r\n    //going across the appdomain back to topshelf\r\n    LogManager.GetLogger(typeof(GenericHost)).Fatal("Exception when starting endpoint.", ex);\r\n\r\n    Console.Out.WriteLine("Exception when starting endpoint: {0}", ex);\r\n\r\n    if (Environment.UserInteractive)\r\n    {\r\n        Thread.Sleep(10000); // so that user can see on their screen the problem\r\n    }\r\n\r\n    Environment.FailFast("Exception when starting endpoint.", ex);\r\n}\r\n```\r\n\r\nThe `Environment.FailFast` is still required because it logs to the Event Viewer as a backup in case neither of the above worked.\r\n\r\n'
1136,'andreasohlund','[BUG] Windsor builder registration: component is not registered using the supplied type as service\nIn the WindsorObjectBuilder class\r\n\r\n    void IContainer.RegisterSingleton(Type lookupType, object instance)\r\n    {\r\n        var registration = container.Kernel.GetAssignableHandlers(lookupType).Select(x => x.ComponentModel).FirstOrDefault();\r\n        if (registration != null)\r\n        {\r\n            registration.ExtendedProperties["instance"] = instance;\r\n            return;\r\n        }\r\n        var services = GetAllServiceTypesFor(instance.GetType());\r\n        container.Register(Component.For(services).Activator<ExternalInstanceActivatorWithDecommissionConcern>().Instance(instance).LifestyleSingleton());\r\n    }\r\n\r\nthe register singleton method is registering types in Windsor ignoring the lookupType and GetAllServicesTypesFor deals only with interfaces, this method is called (e.g. in ConfigureAzureServiceBusMessageQueue) in this way:\r\n\r\n    config.Configurer.RegisterSingleton<NamespaceManager>(namespaceClient); \r\n    config.Configurer.RegisterSingleton<MessagingFactory>(factory);\r\n\r\nthe following test fails: https://gist.github.com/mauroservienti/897851c862af18988aa5, and this fixes the issue: https://gist.github.com/mauroservienti/98d61a6c5587a06c7ec3\r\n\r\n\r\n'
1135,'johnsimons',"Raven subscription storage isn't backwards compat with v3\nSince we store the Address class as is the endpoint will blow up if there is v3 data in the database:\r\n\r\neserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent) i\r\nn c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\\Newtonsoft.Json\\Serializa\r\ntion\\JsonSerializerInternalReader.cs:line 155\r\n   at Raven.Imports.Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReade\r\nr reader, Type objectType) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\S\r\nrc\\Newtonsoft.Json\\JsonSerializer.cs:line 546\r\n   at Raven.Imports.Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader\r\n, Type objectType) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\\Newto\r\nnsoft.Json\\JsonSerializer.cs:line 512\r\n   at Raven.Client.Connection.DocumentConventionJsonExtensions.Deserialize[T](Ra\r\nvenJObject self, DocumentConvention convention) in c:\\Builds\\RavenDB-Stable\\Rave\r\nn.Client.Lightweight\\Connection\\DocumentConventionJsonExtensions.cs:line 22\r\n   at Raven.Client.Document.InMemoryDocumentSessionOperations.ConvertToEntity[T]\r\n(String id, RavenJObject documentFound, RavenJObject metadata) in c:\\Builds\\Rave\r\nnDB-Stable\\Raven.Client.Lightweight\\Document\\InMemoryDocumentSessionOperations.c\r\ns:line 450\r\n   at Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity[T](Str\r\ning key, RavenJObject document, RavenJObject metadata) in c:\\Builds\\RavenDB-Stab\r\nle\\Raven.Client.Lightweight\\Document\\InMemoryDocumentSessionOperations.cs:line 3\r\n68\r\n   at Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity[T](Jso\r\nnDocument documentFound) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Do\r\ncument\\InMemoryDocumentSessionOperations.cs:line 351\r\n   at Raven.Client.Document.SessionOperations.MultiLoadOperation.<Complete>b__4[\r\nT](JsonDocument document) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\D\r\nocument\\SessionOperations\\MultiLoadOperation.cs:line 71\r\n   at System.Linq.Enumerable.<>c__DisplayClass12`3.<CombineSelectors>b__11(TSour\r\nce x)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Raven.Client.Document.SessionOperations.MultiLoadOperation.Complete[T]() i\r\nn c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Document\\SessionOperations\\M\r\nultiLoadOperation.cs:line 70\r\n   at Raven.Client.Document.DocumentSession.LoadInternal[T](String[] ids) in c:\\\r\nBuilds\\RavenDB-Stable\\Raven.Client.Lightweight\\Document\\DocumentSession.cs:line\r\n347\r\n   at Raven.Client.Document.DocumentSession.Load[T](IEnumerable`1 ids) in c:\\Bui\r\nlds\\RavenDB-Stable\\Raven.Client.Lightweight\\Document\\DocumentSession.cs:line 246\r\n\r\n   at NServiceBus.Persistence.Raven.SubscriptionStorage.RavenSubscriptionStorage\r\n.GetSubscriptions(IEnumerable`1 messageTypes, IDocumentSession session) in c:\\de\r\nv\\NServiceBus\\src\\NServiceBus.Core\\Persistence\\Raven\\SubscriptionStorage\\RavenSu\r\nbscriptionStorage.cs:li"
1134,'','Threshold isn\'t set correctly when going with the default NSB log setup\nThe root logger is still set to debug even though \r\n\r\n```\r\n<Logging Threshold="INFO"/>\r\n```'
1133,'andreasohlund',"Messages retried through SLR breaks worker ready mechanism in scale out scenario \nI work with mariusin79 in #1115 and I've finally been able to track down the issue as described below. I've created a new issue as the title and description of #1115 aren't very  relevant for the actual problem. #1115 can be closed.\r\n\r\nAny message put in an input queue to a distributor which has the header NServiceBus.Retries on it will reduce the number of available workers by 1. If you put more such messages in than available workers in storage the processing grinds to a halt.\r\n\r\nWhen the worker gets the message the eventhandler in NServiceBus.Distributor.ReadyMessagesSender is run:\r\n```\r\nEndpointTransport.FinishedMessageProcessing += (a, b) =>\r\n                                                               {\r\n                                                                   if (((IBus)Bus).CurrentMessageContext.Headers.ContainsKey(NServiceBus.Headers.Retries))\r\n                                                                       return;\r\n                                                                       \r\n                                                                   SendReadyMessage(1);\r\n                                                               };\r\n```\r\nThe problem is that any message coming in to a worker with the header set will NOT send a ready message back, even though it should.\r\n\r\nNow the interesting part is why this would ever happen. Retries are done locally on the worker and when a message is finally put on the error queue it will not have the Retries header set, unless second level retries are enabled. With SLR enabled the message do indeed have the Retries header set when they are put in the error queue. If you then ~~ReturnToSourceQueue or~~ use Queue Explorer to put the messages back in distributor input queue, it eats a worker.\r\n\r\nRepro is simple: \r\n* Use the Scaleout-sample. \r\n* Make the messagehandler throw an exception. \r\n* Send some messages and let them make it through retries and second level retries. They will end up on the error queue. \r\n* Drag them back to the orders.handler queue and they will eat one available worker for every message.\r\n\r\nThis scenario pops up regularly for us in production when our operations team drag messages from error queues back to the input queues."
1132,'andreasohlund','Honor routing topology being used in RabbitMQMessageSender\nBus.Send for RabbitMQ should use the routing topology to determine how to publish to an endpoint. This changes RabbitMQMessageSender.cs to use the Routing Topology to send the message. Also adds a method in IRoutingTopology to allow sending to an endpoint.'
1131,'','Correct error message to reference IHandleMessages\nTesting code incorrectly says that the handler should implement IMessageHandler<T> instead of IHandleMessages<T> on error validating the handler. Corrected that message.'
1130,'johnsimons','help.txt - correct default service name example\nIt does not default to the full class name of the endpoint config. Not sure if "the endpoint name" is specific enough for this context. But at least this is accurate.'
1129,'','Host.exe implementation have leaked into the Core\nSo here\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Configure.cs#L253\r\n\r\nthere is this code\r\n\r\n            if (HttpRuntime.AppDomainAppId == null)\r\n            {\r\n                var hostPath = Path.Combine(lastProbeDirectory ?? AppDomain.CurrentDomain.BaseDirectory, "NServiceBus.Host.exe");\r\n                if (File.Exists(hostPath))\r\n                {\r\n                    TypesToScan = TypesToScan.Union(GetAllowedTypes(Assembly.LoadFrom(hostPath))).ToList();\r\n                }\r\n            }\r\n\r\nThis is an ugly hack.\r\n\r\nSince NServiceBus.Host.exe is the executing process cant it inject types into TypesToScan without doing a reverse lookup in the core?'
1128,'','Renaming IWantToRunBeforeConfigurationIsFinalized and IWantToRunWhenConfigurationIsComplete \nWith the new internal refactoring there is an interface called IWantToRunBeforeConfigurationIsFinalized . But there is already an existing interface which is called IWantToRunWhenConfigurationIsComplete. From outside just looking at the name of the interfaces it is pretty complex to see the difference. Consider renaming?'
1127,'','Consider turning off auto statistics for the SqlServer transport\nSince the "queue" tables will be mostly empty auto statistics might be more harmful than good\r\n\r\nWe can turn it off when creating the table:\r\n\r\nhttp://msdn.microsoft.com/en-us/library/ms188775.aspx'
1126,'','no xml doco for what the return value of ISatellite.Handle does?\nIs it a success/failure flag? if so why not just use exceptions?\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Satellites/ISatellite.cs'
1125,'andreasohlund','Implement convention based routing on RabbitMQ transport\nImplements convention based routing described as take 4 at http://codebetter.com/drusellers/2011/05/08/brain-dump-conventional-routing-in-rabbitmq/.\r\n\r\nThis convention models the types as exchanges in RabbitMQ, eliminating the need for using routing keys for routing messages between producers and consumers. This makes the routing topology visible within RabbitMQ and potentially makes the routing more performant.'
1124,'johnsimons',"NHibernate persister doesn't honor ConnectionStringName\nAccording to the following line https://github.com/NServiceBus/NServiceBus/blob/develop/src/nhibernate/NServiceBus.NHibernate/Persistence/NHibernate/ConfigureNHibernate.cs#L147 NHibernate Persister require `connection.connection_string` so I can't use `connection.connection_string_name` instead."
1123,'',"Introduce DbConnectionUnitOfWork\nHi,\r\nI'm creating OracleAQ transport (https://github.com/rosieks/NServiceBus.OracleAQ) and I wonder If could you provide something similar to MsmqUnitOfWork but for IDbConnection.\r\nUsing it inside NH Unit of Work to open new session could be helpful to support transactional processing when somebody disable distributed transaction (by invoke `DisableDistributedTransactions`) and reduce number of open connection. “DbConnectionUnitOfWork” could be useful in SqlServer transport as well as in my OracleAQ transport.\r\n"
1122,'andreasohlund',"Register all interfaces for func with Unity\nThe UnityObjectBuilder doesn't register funcs for all interfaces (unlike the other implementations), which causes problems in the v4 Beta."
1121,'','Azure samples use AzureAppender that is not included in 4.0.0\nSome Azure samples, for example ServiceBusFullDuplex, do not build because of using AzureAppender for log4net, which is not included in 4.0.0. It should be changed to use Azure Diagnostic trace instead.'
1120,'','Upgrade NH to latest version v3.3.3.4000\n'
1119,'','Raven logging should not be totally muted\nThe fix for https://github.com/NServiceBus/NServiceBus/issues/902 was to totally mute raven. This is not really a friendly behavior. We should let the user decide what to log in the log config and provide default config samples in the documentation.\r\n\r\nThe console appender could filter raven logs.'
1118,'andreasohlund','Add cluster support to RabbitMQ transport\nresolves issue #972\r\n\r\nI\'m reusing the https://github.com/mikehadlow/EasyNetQ implementation (see forum discussion: http://tech.groups.yahoo.com/group/nservicebus/message/18588)\r\n\r\nEasyNetQ code copied in exactly as-is, same namespaces and everything, so bringing in any future improvements to EasyNetQ should be as easy as copy/paste.  (EasyNetQ license is MIT, license also copied into the NSB project.)\r\n\r\nThe core NServiceBus implementation is now using the EasyNetQ connectionstring parser - I\'ve modified the RabbitMqTransportConfigurer to use the cluster-aware connection factory bits:\r\n```csharp\r\nvar connectionStringParser = new ConnectionStringParser();\r\nvar connectionConfiguration = connectionStringParser.Parse(connectionString);\r\nconfig.Configurer.ConfigureComponent<IConnectionConfiguration>(() => connectionConfiguration, DependencyLifecycle.SingleInstance);\r\nconfig.Configurer.ConfigureComponent<IClusterHostSelectionStrategy<ConnectionFactoryInfo>>(x => new DefaultClusterHostSelectionStrategy<ConnectionFactoryInfo>(), DependencyLifecycle.InstancePerCall);\r\nconfig.Configurer.ConfigureComponent<IConnectionFactory>(x => new ConnectionFactoryWrapper(\r\n                                                                         x.Build<IConnectionConfiguration>(),\r\n                                                                         x.Build<IClusterHostSelectionStrategy<ConnectionFactoryInfo>>()), DependencyLifecycle.InstancePerCall);\r\nvar connectionFactory = NServiceBus.Configure.Instance.Builder.Build < IConnectionFactory>();\r\n```\r\n\r\nI\'ve also created some integration tests to prove the failover - these stand up a (new) cluster of local rabbitMQ nodes, run the test and take the cluster down again.  See the readme in the cluster tests dir for requirements (although, assuming rabbit is installed then the tests *should* just work).  Please let me know if there are any aspects of the tests which do fall over if/when someone else runs them - I\'ve tried to make them machine-independent but there may be things I\'ve missed.\r\n\r\nexample log output from the test "when_connected_to_local_cluster_and_nodes_start_going_down":\r\n![17-04-2013 9-01-53 a-m-](https://f.cloud.github.com/assets/81165/388452/a7f6f2b8-a6da-11e2-8a84-47b59981a446.png)\r\n\r\nOne request:\r\nInternally we (my employer) are using daily NSB nuget packages off the develop branch - means we don\'t need to stand up our own NSB fork/nuget repo.  But...  this obviously means we  don\'t get the benefits of our pull requests until they make it into develop.  So...  given I convinced my employer it was worth giving me a day to do this PR I\'m now keen to see it progressed into develop sooner rather than later.  Please.  :)'
1117,'johnsimons',"Sql queues use deprecated timestamp type\nFrom http://msdn.microsoft.com/en-us/library/ms182776.aspx\r\n\r\n*The timestamp syntax is deprecated. This feature will be removed in a future version of Microsoft SQL Server. Avoid using this feature in new development work, and plan to modify applications that currently use this feature.*\r\n\r\nShould use rowversion instead, BUT..\r\n\r\nThere are good reasons NOT to use rowversion/timestamp at all, and to use a bigint identity(1,1) instead.\r\n- Messages are never updated, which is what rowversion is good at.\r\n- Rowversion is incremented for every insert/update in the database.  Identity is incremented only for every insert into the table.  Yes, it's 64-bits, but no use encouraging overflow when we don't need the features of rowversion.\r\n- Rowversion is not guaranteed to be unique when used in certain queries like SELECT INTO.  This is probably not a problem for stock NServiceBus, but could cause a problem in some integration scenarios.  This would break the clustered index.  Identity works fine with these scenarios.\r\n"
1116,'','Allow Sql transport to use different connection strings by endpoint address\nRight now for an address *QueueName@MachineName*, QueueName is used as table name, and MachineName is ignored.  All endpoints across the enterprise must put all queues in the same database on the same server.\r\n\r\nAllow specifying multiple connection strings in app.config by convention *NServiceBus/Transport/ConnectionName*.\r\nInterpret addresses as *QueueName@ConnectionName* to locate the proper string to use for creating queues, sending, and receiving.\r\n\r\nThis will allow endpoints to have their queues, including satellite queues, anywhere that ops allows.'
1115,'','Worker restart can cause the worker to stop consuming messages\nOne distributor, two workers, each worker has one worker thread.\r\n\r\nService has messages on distributor queue and one each worker. Stop worker 2, set number of threads to 0, restart worker 1 and worker 2. Move messages from worker 2 queue back to distributor (worker 2 has no threads to process the messages). Worker 1 sends startup message which is consumed by distributor and put on the control queue, distributor sends one message to worker 1, worker 1 consumes message but does not send "I am ready for more work back to distributor". Restarting worker 1 repeats the process; one message consumed, then stops.\r\n\r\nThis has happened twice in production over 3 weeks. Restarting workers or distributor does not change anything. To get this to work, we have to move all the messages for the distributor queue onto worker 1s queue, then after consuming a couple of hundred messages, the worker suddenly starts to send "I am ready for more work"'
1114,'','Support for Windows ServiceBus\nAre there any plans to support Windows Service Bus?'
1113,'','Service hung on starting.\nI am getting issues with the nServiceBus services not starting all the time. In the Windows Event Log I get the following error "The <nameofservice> service hung on starting."\r\n\r\nThe services are set to "Start Automatically" but it seems sometimes they do, and at other times they don\'t...\r\n\r\nI have a feeling its to do with some dependency on some other service, but I the services don\'t depend on anything but MSMQ (which is listed as a dependency).\r\n\r\nHowever if I change it to "Automatic(Delayed Start)" it seems to work...\r\n\r\nAny ideas why this is the case? \r\nIs it possible to change the start up type to "Automatic(Delayed Start)" when installing via the NServiceBus.Host?'
1112,'andreasohlund','Windows host does not persist profiles on install\nWhen installing the windows host as a service any profile specified is not added to the service commandline causing the service to startup in the default (production) profile.\r\n\r\nThis bug is only effecting 4.0'
1111,'',"PurgeOnStartup doesn't work.\nPurgeOnStartup(true) doesn't work If was invoked after UseTransport. Here example from Messaging.SqlServer:\r\n\r\n    Configure.With()\r\n                     .DefaultBuilder()\r\n                     .Log4Net(new DebugAppender {Threshold = Level.Warn})\r\n                     .ModifyMvcAndSignalRToUseOurContainer()\r\n                     .XmlSerializer()\r\n                     .UseTransport<SqlServer>()\r\n                     .PurgeOnStartup(true)\r\n                     .UnicastBus()\r\n                     .RunHandlersUnderIncomingPrincipal(false)\r\n                     .CreateBus()\r\n                     .Start(() => Configure.Instance.ForInstallationOn<NServiceBus.Installation.Environments.Windows>()\r\n                                           .Install());"
1110,'johnsimons','Scheduler not logging errors\nThe current scheduler does start a new task in order to execute the scheduler action. But in case when the action throws and the task is faulted there is no error log.'
1109,'','Fixed a typo in the contribution.md\nIgnore this, i clearly messed something up committing this much files for a single line typo fix...'
1108,'','Scheduler fix\nHere a proposed solution to the issue #1102\r\nThis also includes changes from pull request #1088\r\n\r\n'
1107,'','add missing space to log message\nalso add some quotes to make it more clear that the types are'
1106,'','Bug in install as a service\nWhile replicating #1095 I came across something else.\r\n\r\nIf you compile Pub/Sub sample and then try to install as a service Subscriber1, using:\r\n```\r\nNServiceBus.Host.exe /install /serviceName:"NServiceBus_MyNode_Development" /displayName:"NServiceBus - MyNode (Development)" /description:"Service for MyNode"\r\nInitializing the installer in the Install AppDomain\r\nExecuting the NServiceBus installers\r\n2013-04-12 10:28:06,646 [1] INFO  NServiceBus.Unicast.Routing.StaticMessageRoute\r\nr [(null)] <(null)> - Routing for inherited message: MyMessages.IMyEvent(MyMessa\r\nges.EventMessage) updated from MyPublisher@JOHNPC to MyPublisher@JOHNPC\r\n2013-04-12 10:28:06,827 [1] INFO  NServiceBus.Unicast.Routing.StaticMessageRoute\r\nr [(null)] <(null)> - Routing for inherited message: MyMessages.IMyEvent(MyMessa\r\nges.Other.AnotherEventMessage) updated from MyPublisher@JOHNPC to MyPublisher@JO\r\nHNPC\r\n2013-04-12 10:28:06,851 [1] INFO  NServiceBus.Unicast.UnicastBus [(null)] <(null\r\n)> - Number of messages found: 7\r\n2013-04-12 10:28:07,112 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - Using embedded license found in registry [HKEY_LOCAL_MACHINE\\Software\r\n\\NServiceBus\\4.0\\License].\r\n2013-04-12 10:28:07,827 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - Found a Standard license.\r\n2013-04-12 10:28:07,830 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - Registered to Shlomi Izikovich\r\n2013-04-12 10:28:07,833 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - Expires on 12/31/9999 23:59:59\r\n2013-04-12 10:28:07,835 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - [LicenseVersion]: [4.0]\r\n2013-04-12 10:28:07,838 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - [LicenseType]: [Standard]\r\n2013-04-12 10:28:07,840 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - [WorkerThreads]: [Max]\r\n2013-04-12 10:28:07,843 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - [MaxMessageThroughputPerSecond]: [Max]\r\n2013-04-12 10:28:07,846 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - [AllowedNumberOfWorkerNodes]: [Max]\r\n2013-04-12 10:28:07,848 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - [ProductType]: [290256 - Per Core]\r\n2013-04-12 10:28:07,851 [1] INFO  NServiceBus.Licensing.LicenseManager [(null)]\r\n<(null)> - [LicenseQuantity]: [1]\r\nFailed to execute installers: System.MissingMethodException: Cannot create an in\r\nstance of an interface.\r\n   at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOn\r\nly, Boolean noCheck, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Bo\r\nolean& bNeedSecurityCheck)\r\n   at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean skipChec\r\nkThis, Boolean fillCache, StackCrawlMark& stackMark)\r\n   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean s\r\nkipCheckThis, Boolean fillCache, StackCrawlMark& stackMark)\r\n   at System.Activator.CreateInstance(Type type, Boolean nonPublic)\r\n   at System.Activator.CreateInstance(Type type)\r\n   at NServiceBus.Hosting.Profiles.ProfileManager.ActivateProfileHandlers() in c\r\n:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Hosting\\Profiles\\ProfileManager.cs:l\r\nine 120\r\n   at NServiceBus.Hosting.Profiles.ProfileActivator.Run() in c:\\Projects\\NServic\r\neBus\\src\\NServiceBus.Core\\Hosting\\Profiles\\ProfileActivator.cs:line 19\r\n   at NServiceBus.Configure.<Initialize>b__11(Type t) in c:\\Projects\\NServiceBus\r\n\\src\\NServiceBus.Core\\Configure.cs:line 354\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Configure.ForAllTypes[T](Action`1 action) in c:\\Projects\\NServ\r\niceBus\\src\\NServiceBus.Core\\Configure.cs:line 386\r\n   at NServiceBus.Configure.Initialize() in c:\\Projects\\NServiceBus\\src\\NService\r\nBus.Core\\Configure.cs:line 351\r\n   at NServiceBus.Installer`1.Install() in c:\\Projects\\NServiceBus\\src\\NServiceB\r\nus.Core\\Install.cs:line 90\r\n   at NServiceBus.Hosting.GenericHost.Install[TEnvironment](String username) in\r\nc:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 87\r\n   at NServiceBus.Hosting.Windows.WindowsHost.Install(String username) in c:\\Pro\r\njects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting.Windows\\WindowsHost.cs:line 75\r\n\r\n   at NServiceBus.Hosting.Windows.Installers.WindowsInstaller.RunInstall() in c:\r\n\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting.Windows\\Installers\\Windows\r\nInstaller.cs:line 41\r\n\r\nRunning a transacted installation.\r\n\r\nBeginning the Install phase of the installation.\r\nInstalling service Subscriber1...\r\nService Subscriber1 has been successfully installed.\r\nCreating EventLog source Subscriber1 in log Application...\r\n\r\nThe Install phase completed successfully, and the Commit phase is beginning.\r\n\r\nThe Commit phase completed successfully.\r\n\r\nThe transacted install has completed.\r\n```'
1105,'','IHandleAnyProfile and grammar change\nIHandleAnyProfile is a shortcut for IHandleProfile<IProfile> + IWantTheListOfActiveProfiles. It will let you easily make decisions like "If some profile is active, do X, otherwise do Y."\r\n\r\nBased on this use case:\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/18581'
1104,'johnsimons',"Impersonation support needs to be renamed since it's not true impersonation\nDavid Boike:\r\n\r\nhttp://tech.dir.groups.yahoo.com/group/nservicebus/message/9928\r\n\r\nFrom everything I can figure out, the thread is correct. Impersonation yields a GenericPrincipal with a GenericIdentity. It would be impossible to actually impersonate as a WindowsIdentity or authenticate to any external resource with.\r\n\r\nSo I'm guessing the impersonation is really only fit for identifying the original user, as in for logging or auditing. Other than that it's pretty worthless.\r\nYou mean renaming plus deprecating .ImpersonateSender()? I suppose that's kind of a big deal since just about every fluent config example on the Interwebs includes it.\r\n\r\nSomething more accurate might be ... .IdentifySenderInThreadPrincipal(), or IdentifySenderInThreadIdentity()? Wordy but more accurate.\r\n\r\n"
1103,'','[4.0.0-beta] Make Backoff in SqlServer configurable\nSometimes I want the server to back off  5 seconds instead of 1 second because it is giving too much of a load on the system.\r\n\r\nI noticed that you already implemented that it only backs off if there are no new messages, which is excellent! Now if the Backoff would be configurable, I would be very happy :-)'
1102,'johnsimons','[4.0.0-beta] TaskFactory not able to spawn new threads \nI am using NServiceBus 4 beta (unstable2911). We are using a library that spawns\r\na background listener thread using the task factory. It failed however since we\r\nmoved the logic of that part of our IT system to NServiceBus. After searching\r\nand stepping through the code it seems that TaskFactory is unable to start the\r\nnew task.\r\n\r\nWe can solve this issue by using the ThreadPool instead, for more information,\r\nsee http://sshnet.codeplex.com/workitem/1552\r\n\r\nHowever, if the result of using NServiceBus is that it is "forbidden" to use\r\nTaskFactory, then I think there is a big issue to solve.\r\n\r\nAlso see http://tech.groups.yahoo.com/group/nservicebus/message/18504'
1101,'andreasohlund','SQL Server Transport - Storing Machine Name with Subscription\nWhen using the SQL Server transport with pub/sub, the publisher is storing the endpoint name plus machine name (e.g. MySubscriber@DTCORP12592).\r\n\r\nThis results in receiving the same event multiple times when running a subscriber on more than one server.\r\n\r\n![screenshot](https://f.cloud.github.com/assets/4118789/364075/43ee3ff2-a215-11e2-9d98-b3584f213ffd.png)\r\n'
1100,'johnsimons','Add overloads that take actions when testing sagas.\nI\'ve found the lack of overloads that accept actions in testing to be an annoyance in an otherwise great product.  The reason I want to use Action is so that I can use NUnit assertions which provide more precise error information than just "the predicate failed somewhere."  (I often times have to make assertions on 5 or more message properties.)\r\n\r\nI\'ve done Sagas first and will be happy to do Handlers similarly if this contrib makes the team happy.  I added tests for my overloads only where tests for the corresponding Func<T, bool>  has them.'
1099,'andreasohlund',"FLR doesn't work for ActiveMQ when using native transactions\nHere is a repro: https://github.com/NServiceBus/NServiceBus/blob/a3cf17759873bd0b5e7763681890745e3552ba04/AcceptanceTests/NServiceBus.AcceptanceTests/Retries/When_doing_flr_with_default_settings.cs#L35"
1098,'','ActiveMQ does not support polymorphic events\nIf you modify the existing PubSub Sample to use ActiveMQ transport, Subscriber2 does not get `EventMessage` and `AnotherEventMessage` even tough those messages derive from `IMyEvent`\r\n\r\nSubscriber2 is suppose to receive all 3 different messages but it only receives one!'
1097,'','Add a null check to address a crash when TimeoutManager is re...\n...questing a null address queue be created.\r\n\r\nShould now match the behavior of MsmqQueueCreator'
1096,'','[4.0.0-beta] Use costura for IL merging the host\nWhen I am building the host myself, it is not automatically merged. I see you already use Fody (very good), so it is just a small step to add the Costura weaver.\r\n\r\nThis way I can compile the same host as you do without the complexity of ilmerging.'
1095,'andreasohlund','[4.0.0-beta] NServiceBus host not respecting serviceName\nIt took me a while to figure this out, but I finally got to the answer :)\r\n\r\nI am using NServiceBus.Host.4.0.0-unstable2914. When using the following command line:\r\n\r\nNServiceBus.Host.exe /install /serviceName:"NServiceBus_MyNode_Development" /displayName:"NServiceBus - MyNode (Development)" /description:"Service for MyNode"\r\n\r\nIt seems that it always falls back to the assembly name as service name. Next thing I did was download the 4.0.0 branch code and debug it. It worked perfectly there, so I didn\'t understand what was happening. The host nuget package is always built using the 4.0.0 branch, right?\r\n\r\nThen I thought: let\'s debug this! Here are the steps I followed:\r\n\r\n1) Install using my self-compiled host => works great\r\n2) Replace the NServiceBus.Host.exe with the latest available nuget package for the host => does not work\r\n\r\nIs there a difference between the final host file except that it is ilmerged? Or am I mistaken that the 4.0.0 branch is used for the new beta packages?'
1094,'','NullReferenceException during starting bus.\nI created console application and installed NSB4.0-beta. The following code cause NullReferenceException.\r\n\r\n    var bus = Configure.With()\r\n                .DefaultBuilder()\r\n                .UseTransport<Msmq>()\r\n                .CreateBus()\r\n                .Start();\r\n\r\nException:\r\n\r\n    System.NullReferenceException: Object reference not set to an instance of an object.\r\n    at NServiceBus.Unicast.Subscriptions.DefaultAutoSubscriptionStrategy.GetEventsToAutoSubscribe() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\Subscriptions\\DefaultAutoSubscriptionStrategy.cs:line 60\r\n    at NServiceBus.Unicast.Subscriptions.DefaultAutoSubscriptionStrategy.<GetEventsToSubscribe>d__2.MoveNext() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\Subscriptions\\DefaultAutoSubscriptionStrategy.cs:line 42\r\n    at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()\r\n    at NServiceBus.Unicast.UnicastBus.PerformAutoSubscribe() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 866\r\n    at NServiceBus.Unicast.UnicastBus.Start(Action startupAction) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 749\r\n    at NServiceBus.Unicast.UnicastBus.Start() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 715\r\n    at ConsoleTest.Program.Main(String[] args) in c:\\Users\\Sławek\\Documents\\Visual Studio 11\\Projects\\ConsoleApplication15\\ConsoleApplication15\\Program.cs:line 28'
1093,'andreasohlund','Add ROWLOCK hint to Sql transport dequeue\nhttps://github.com/NServiceBus/NServiceBus/blob/4.0.0/src/SqlServer/NServiceBus.SqlServer/SqlServerPollingDequeueStrategy.cs\r\n\r\nAdd ROWLOCK hint to SqlReceive query to be sure that locks are not escalated, so concurrent consumers are not blocked from receiving other messages that are not being dequeued.'
1092,'andreasohlund','NServiceBus.Transports.SQLServer.SqlServerQueueCreator.CreateQueueIfNecessary throws on startup\nNServiceBus 4.0.0-unstable2913\r\n\r\nSqlTransport throws System.NullReferenceException on startup\r\n\r\n<code>\r\n2013-04-05 12:55:03,625 [1] FATAL NServiceBus.Hosting.GenericHost [(null)] <(null)> - Exception when starting endpoint.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Transports.SQLServer.SqlServerQueueCreator.CreateQueueIfNecessary(Address address, String account) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\SqlServer\\NServiceBus.SqlServer\\SqlServerQueueCreator\r\n.cs:line 33\r\n   at NServiceBus.Unicast.Queuing.QueuesCreator.Install(String identity) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\Queuing\\QueuesCreator.cs:line 37\r\n   at NServiceBus.Installer`1.<InstallOtherInstallers>b__0(INeedToInstallSomething i) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Install.cs:line 105\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Installer`1.InstallOtherInstallers() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Install.cs:line 104\r\n   at NServiceBus.Installer`1.Install() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Install.cs:line 93\r\n   at NServiceBus.Hosting.Windows.Profiles.Handlers.WindowsInstallerRunner.Run() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\hosting\\NServiceBus.Hosting.Windows\\Profiles\\Handlers\\WindowsInstallerRunner.cs:line 30\r\n   at NServiceBus.Configure.<Initialize>b__13(IWantToRunWhenConfigurationIsComplete o) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Configure.cs:line 366\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Configure.Initialize() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Configure.cs:line 365\r\n   at NServiceBus.Configure.CreateBus() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Configure.cs:line 284\r\n   at NServiceBus.Hosting.GenericHost.Start() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Hosting\\GenericHost.cs:line 31\r\n</code>'
1091,'andreasohlund','problem with sql server messaging sample\nIn the sql server messaging sample in the OrderCommandHandler class I throw new\r\nApplicationException("exception") right after the if (DebugFlagMutator.Debug)\r\nstatement. Problem is I never see the message in the error table. The message\r\nstays in the myserver table and the retries never stop so I get some kind of\r\n"never-ending-retry-loop". Can someone please take a look? Thanks.'
1090,'andreasohlund',"When using Scheduler (using SqlTransport & RabbitMQ), even when configured correctly, lambda's are not executed\nSteps to reproduce:\r\n1. Create a NSB host\r\n2. Create a command called DoSomething\r\n3. Create a command handler for it\r\n4. Create a bootstrapper, which will schedule this message to be sent every 5 seconds (using SendLocal)\r\n5. Start the endpoint.\r\n6. Notice that the message handlers are not being executed.\r\n7. Remove the UsingTransport<SqlServer> from the endpoint and execute the same code, and notice that the handlers are being executed, when run using Msmq.\r\n\r\n"
1089,'andreasohlund','NoConfigRequiredAutoSubscriptionStrategy should by default only subscribes to `IEvents`\nThere is currently 2 implementations for `IAutoSubscriptionStrategy`.\r\n\r\n`DefaultAutoSubscriptionStrategy` by default only subscribes to `IEvents`.\r\nWe should do the same for `NoConfigRequiredAutoSubscriptionStrategy`  and also support the `AutoSubscribePlainMessages()` flag'
1088,'','Small Improvements\nAdded BaseClass for IContainSagaData, closes #1085, Marked ISagaStartedBy as obsolete, closes #1086, Marked IFindSagas as abstract, closes #1087'
1087,'','IFindSagas is a class because of language constraints but starts with I\nIFindSagas is a class because of language constraints but starts with I\r\n\r\nat least make it abstract,\r\n\r\nbetter Rename to FindSagas and do a type forwarding'
1086,'','ISagaStartedBy mark as obsolete\nI think this is the old interface, isn\'t it? So there should be an ObsoleteEx attribute on it.    \r\n\r\n[ObsoleteEx(Replacement = "IAmStartedByMessages<T>", TreatAsErrorFromVersion = "4.0", RemoveInVersion = "5.0")]\r\n    public interface ISagaStartedBy<T> : IHandleMessages<T>\r\n    {\r\n    }'
1085,'','Add base class for IContainSagaData\nNormally I never care about the properties of IContainSagaData But I have to implement it on every saga data. A sample base class would add a bit of convenience.     \r\n\r\n    public abstract class ContainSagaData : IContainSagaData\r\n    {\r\n        public virtual Guid Id { get; set; }\r\n\r\n        public virtual string Originator { get; set; }\r\n\r\n        public virtual string OriginalMessageId { get; set; }\r\n    }\r\n\r\nThoughts?'
1084,'','Add support for Version field optimistic currency to the NHibernate saga persister\nWhen v3 was released the support for a Version field to handle optimistic concurrency was accidentally removed. Since v3 runs with isolation level == serializable by default this has causes issues for the users. In v4 we default to readcommitted so the needs to be fixed. Issue #649 introduces support for rowlevel concurrency but since this can cause performance issue we need to add the support for a version field back. \r\n\r\nIn short:\r\n\r\n* We default to row level concurrency (like we do it at the moment)\r\n* Introduces a [Version] attribute that the user can put on their version property.\r\n* If the [Version] is found, enable field level concurrency accordingly\r\n* Add a config option to turn off optimistic concurrent completely for users that wants to take full control\r\n\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/18409'
1083,'','NServiceBus.Gateway.Channels.Http.HttpChannelReceiver - Listener Thread is not exited gracefully \nThe Start() calls the new Thread(HttpServer).Start();\r\n\r\n1. It is foreground thread\r\n2. It will block the process exit unless you properly abort this thread.\r\n3. This line of code causing "System.Net.HttpListenerException: Failed to listen on prefix \'xxxx\' because it conflicts with an existing registration on the machine" exception.\r\n\r\nFor more details, please look-into http://stackoverflow.com/questions/15739590/system-net-httplistenerexception-failed-to-listen-on-prefix-xxxx-because-it-c'
1082,'','Added Performance tests\nAdded performnace tests\r\n1. Forcing transport to use two phase commits with DTC\r\n2. Sagas in all transaction modes'
1081,'','Raven v1 has a size limit of 127 unicode chars for Ids does v2 also has this limit?\nJust wondering if we still need to do this in Raven v2?\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Persistence/Raven/SagaPersister/RavenSagaPersister.cs#L192\r\n\r\nAlso, if we do not, how would we migrate existing data to new format?'
1080,'andreasohlund','Obsolete ISagaEntity\n`ISagaEntity` has been replaced with `IContainSagaData`.\r\n\r\nWe should mark `ISagaEntity` as obsolete and change it so that `ISageEntity` derives from `IContainSagaData`:\r\n```c#\r\npublic interface ISagaEntity: IContainSagaData\r\n```\r\n\r\nWe then have to change everywhere we use `ISageEntity` to use `IContainSagaData` instead.\r\n\r\n'
1079,'andreasohlund','Make the NHibernate saga persister support nested saga data classes\nNested types has a "+" character in the typename and that causes sqlserver to blow up since + is not permitted in table names'
1078,'','Update RavenDB to v 2.0.2375\n'
1077,'johnsimons','5 sec delay in scheduler\nA maximum of a 5sec delay can occur in the scheduler api.\r\nThe problem is because of [this code](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Timeout/Hosting/Windows/TimeoutPersisterReceiver.cs#L66) \r\n\r\nI propose we change the code to look like:\r\n```c#\r\nif (nextRetrieval > DateTime.UtcNow)\r\n{\r\n    Thread.Sleep(TimeSpan.FromSeconds(Math.Min(Math.Max((nextRetrieval - DateTime.UtcNow).TotalSeconds, 0), SecondsToSleepBetweenPolls)));\r\n    continue;\r\n}\r\n```  \r\n\r\nThis way the maximum time we sleep for is `SecondsToSleepBetweenPolls`(5secs) but if a timeout is to expire within the next `SecondsToSleepBetweenPolls` then we only sleep for the difference between now and the timeout expire time.'
1076,'johnsimons','NServiceBus.Host startet with wrong arguments ignores it and starts normally\nWhen the NServiceBus.Host is started with a wrong argument, for example with wrong casing (NServiceBust.Host /Uninstall instead of /uninstall) it silently ignores those arguments but starts the process in console mode. This can lead to exceptions when the endpoint is already installed as a windows service.\r\n\r\nMy expected behavior would be that it fails when arguments are provided which are not understood.'
1075,'andreasohlund',"Added TestExecutionTimeout as an optional parameter for AcceptanceTest Run \nMoved the TestExecutionTimeout parameter to the RunDescriptor.\r\nAdded an optional parameter to the Scenario::Run to pass in the TestExecution timeout\r\nCorrected the object life time initialization, so that the endpoints won't be prematurely GCed."
1074,'','Added execution timeout as a parameter that be set in the scenario conte...\n...xt so each test can define the max time allowed for the test'
1073,'','Projects with StructureMap doesn\'t register Subscriptions\nCurrent Production NUGET build.\r\nWindows 8 x64\r\nVS2012\r\n\r\nI followed the sample on how to create a pub/sub.\r\nThe default builder was swapped out for structuremap, and everything worked fine.\r\nI delete the queues and the database for raven and the console complains about client@machine name doesn\'t exist.\r\n\r\nI delete the queues and db again and comment out the structuremap stuff and restore the default builder and everything works again.\r\n\r\nSame problem with new projects that don\'t use the default builder to setup the queues first.\r\n\r\nInitial\r\n```\r\n            Configure.With()\r\n                .DefaultBuilder()\r\n                .DefiningEventsAs(t => t.Namespace != null && t.Namespace.EndsWith("Events"));\r\n```\r\nWith StructureMap\r\n```\r\n\r\n        public void Init()\r\n        {\r\n            Configure.With()\r\n                //.DefaultBuilder()\r\n                .StructureMapBuilder(new Container(new DependencyRegistry()))\r\n                .JsonSerializer()\r\n                .DefiningEventsAs(t => t.Namespace != null && t.Namespace.EndsWith("Events"));\r\n        }\r\n\r\n        public class DependencyRegistry : Registry\r\n        {\r\n            public DependencyRegistry()\r\n            {\r\n                Scan(x =>\r\n                {\r\n                    x.AssembliesFromApplicationBaseDirectory();\r\n                    x.WithDefaultConventions();\r\n                });\r\n            }\r\n        }\r\n```'
1072,'johnsimons','NServiceBus.Host Nuget Package adds samples into app.config for message mapping which does not work\nWhen installing NSBHost nuget package the app.config has several commented out samples for the message endpoint mapping, one is following:\r\n\r\n      <add Assembly="assembly" endpoint="queue@machinename" />\r\n\r\nThis will not work because configuration sections are case sensitive!\r\n\r\n      <add Assembly="assembly" Endpoint="queue@machinename" />'
1071,'johnsimons','Fix bios name warning\n@johnsimons, I see your commit "Fixed NETBIOS name warning." (commit b8f58f794f28355c70733fab4ae08bc72614e3c7) from a week ago.\r\n\r\nAs per the forum discussion, 15 characters _is_ actually ok.  Only reason I care is because I keep seeing erroneous warnings in the logs and that\'s just unnecessary noise.\r\n\r\nrelevant forum post: http://tech.groups.yahoo.com/group/nservicebus/message/18178\r\nrelevant ms reference: http://support.microsoft.com/kb/163409\r\nand fwiw, I\'ve had NSB running fine with DTC and my machine name is exactly 15 char long.  :)\r\n\r\ncheers\r\njustin'
1070,'andreasohlund','Race conditions in the NHibernate timeoutperister is not handled correctly.\nWe should detect and just discard the dispatch request like the 4.0 version is already doing. This needs to be back ported to v3.3.\r\n\r\nBackground: Multiple requests to dispatch the same timeout can occur and the persister should not raise an error if the timeout has already been removed. This is not working for the NHibernate  timeout persister in v3. Everything works as expected but there is unessesary log entries and the dispatch request is sent to the error q. This confuses users and needs to be fixed.\r\n\r\n### To verify\r\n\r\nCreate a new endpoint, configure it to use the NHibernate timeoutpersister. Do a bus.Defer(). This would cause a duplicate dispatch request (turn on journaling on the timeoutdispatcher q). Verify that nothing is logged and no message ends up in the error q'
1069,'mookid8000','Better checks for Managed/Unmanaged assembles \nWhen NServiceBus scans for types, it looks at all *.dll in the bin folder.\r\nUnfortunately there are occasions where a dll is not a managed dll and causes an exception, see [code here](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Hosting/Helpers/AssemblyScanner.cs#L35) and [here](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Configure.cs#L558).\r\n\r\nTo try to minimise this exception the code below checks whether a dll is managed or not:\r\n```c#\r\npublic static class GlobalMembers\r\n    {\r\n\r\n        static CompilationMode IsManagedAssembly(string filename)\r\n        {\r\n\r\n            var data = new byte[4096];\r\n            var file = new FileInfo(filename);\r\n\r\n            using (var stream = file.Open(FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\r\n            {\r\n                stream.Read(data, 0, 4096);\r\n            }\r\n\r\n            // Verify this is a executable/dll\r\n            if ((data[1] << 8 | data[0]) != 0x5a4d)\r\n            {\r\n                return CompilationMode.Invalid;\r\n            }\r\n\r\n            // This will get the address for the WinNT header\r\n            var winNTHeader = data[63] << 24 | data[62] << 16 | data[61] << 8 | data[60];\r\n\r\n            // Verify this is an NT address\r\n            if ((data[winNTHeader + 3] << 24 | data[winNTHeader + 2] << 16 | data[winNTHeader + 1] << 8 |\r\n                 data[winNTHeader]) != 0x00004550)\r\n            {\r\n                return CompilationMode.Invalid;\r\n            }\r\n\r\n            Int32 lightningAddress = winNTHeader + 24 + 208;\r\n            Int32 sum = 0;\r\n            Int32 top = lightningAddress + 8;\r\n\r\n            for (var i = lightningAddress; i < top; ++i)\r\n            {\r\n                sum |= data[i];\r\n            }\r\n\r\n            if (sum == 0)\r\n            {\r\n                return CompilationMode.Native;\r\n            }\r\n\r\n            return CompilationMode.CLR;\r\n        }\r\n\r\n        private static void Main()\r\n        {\r\n            string file = @"C:\\Program Files (x86)\\IBM\\WebSphere MQ\\bin\\icudt32.dll";\r\n            Console.WriteLine("{0} is compiled {1}", file, IsManagedAssembly(file));\r\n\r\n            Console.Read();\r\n        }\r\n    }\r\n\r\n    public enum CompilationMode\r\n    {\r\n        Invalid,\r\n        Native,\r\n        CLR\r\n    }\r\n```\r\n\r\nThe next thing is to figure out if an assembly is x86 or x64!\r\n\r\n'
1068,'','ActiveMQ NMSType is now set to FullTypeName instead of FullyQualifiedAss...\n...emblyName for better interoperability.\r\n\r\nEnclosedMessageType custom header stays the same'
1067,'andreasohlund','Changed VitrualTopic to include namespace to avoid name clashes\nCurrently AMQ uses just the type name to generate the virtual topic name. This can lead to problems when there are two events with the same name in different namespaces.\r\n\r\nThe virtual topic now includes the namespace of the event.'
1066,'','Add RavenDB to 3rd party license list\nhttps://github.com/NServiceBus/NServiceBus/blob/master/readme.txt'
1065,'','Sending through Gateway failed when using an SSL address not listed in a Site\nThe KeyPrefixConventionSiteRouter returns a channel type of https instead of http, which is not recognized by the system'
1064,'','Setting the "NServiceBus.Persistence" connection string without a database no longer works\nAccording to docs: http://support.nservicebus.com/customer/portal/articles/859362-using-ravendb-in-nservicebus-%E2%80%93-connecting\r\n\r\n> After connecting to a Raven server we need to decide which actual database to use. Unless we find a default database specified in the connection string NServiceBus will use the endpoint name as the database name. So if your endpoint is named “MyServer” the database name will be “MyServer”. Each endpoint will have a separate database unless you explicitly override using the connection string. RavenDB will automatically create the database if it doesn’t already exist."\r\n\r\nSo, if I set the connection string to something like this:\r\n\r\n        <add name="NServiceBus.Persistence" connectionString="Url = http://localhost:8080"/>\r\n\r\nIn 3.2, the endpoint name would be used as database name. However, in 3.3, the default database is used.\r\n\r\nI consider this a very serious issue (it broke my production envrionment).\r\n\r\n### To verify\r\nUse the connection string above an make sure that a database with name = {endpointname} is used and not the default database'
1063,'andreasohlund','Remove IdForCorrelation from transport message\nAt the moment we have two properties for the same on the transport message which makes it difficult to understand what to do when implementing a new transport. In fact both ActiveMQ and RabbitMq (most likely Azure too) don\'t seem to do it right.\r\n\r\nAs long as the communication is NSB to NSB everything is ok. But in situations where the sender of a command is not implemented using NSB but lets say it is a java client that uses the transport API directly it doesn\'t work unless a hack is done in the transport implementation in NSB.\r\n\r\nThe problem is that NSB uses IdForCorrelation as correlation ID for responses. This property returns a header value "CorrId" that is just there for backwards compatibility (V2.0?). When there is no such header on the received message it is equal to the message id. Hence when a message arives that has a correlation id on the message but no "CorrId" header then NSB will reply with the message id as correlation id instead of using the correlation id of the original message.\r\n\r\nCurrently transport implementations have to add a hack to work properly. If there is no "CorrId" header but a correlation id exists on the message then it has to assign the correlation id to a "CorrId" header.\r\n\r\nIn my opinion the correct way to solve that problem is:\r\n1. Remove IdForCorrelation\r\n2. Use "message.CorrelationId ?? message.Id" when replying\r\n3. Replace all the logging with message.ID\r\n4. Set the "CorrId" header in a outgoing message mutator to "message.CorrelationId ?? message.Id"\r\n5. Add an incomming message mutator that assigns message.CorrelationId from the "CorrId" header in case the message is from NSB < 3.0\r\n'
1062,'','Added capability to omit raw xml wrapping with property name\nThis commit adds a capability which I have discussed with @andreasohlund on skype chat. The idea is the following and helps to improve the interoperability story with XML messages. Currently we already have the possibility to omit the <Messages /> wrapping for better interoperability. Now there is another option on the XmlSerializer which allows to omit wrapping with the property name in case you are embedding XML raw data into the message.\r\n\r\nHere is an example. With my support for XDocument and XElement over all serializer you can now define a message like:\r\n```csharp\r\n   public interface MyMessage\r\n   {\r\n      XElement SomeData { get; set; }\r\n      // more properties even other with XElement or XDocument\r\n   }\r\n```\r\nlet\'s consider you want to send MyMessage with the following payload\r\n\r\n```xml\r\n   <SomeData smart="true">\r\n     ...\r\n   </SomeData>\r\n```\r\nIf you serialize that with the xml serializer it turns into that:\r\n```xml\r\n<MyMessage>\r\n   <SomeData>\r\n     <SomeData smart="true">\r\n        ...\r\n     </SomeData>\r\n   </SomeData>\r\n</MyMessage>\r\n```\r\nwith the new Option XmlSerializer(dontWrapRawXml : true) the serializer will serialize the message into the following format:\r\n```xml\r\n<MyMessage>\r\n     <SomeData smart="true">\r\n        ...\r\n     </SomeData>\r\n</MyMessage>\r\n```\r\nThis is fine. BUT there is a convention which needs to be followed because somehow the serializer must be able to deserialize such payloads. Therefore the following convention is introduced:\r\n\r\n== Important ==\r\nWhen you use dontWrapRawXml the root node name of the XDocument or XElement MUST match (even casing) the name of the property declared on the message interface or class definition. \r\n\r\nWithout that convention it would not be possible to deserialize unwrapped XML data into the correct property.\r\n\r\nThe beauty of this is that you can fully leverage the power of all XML features including attributes on the payload without having to write a custom serializer for messages. This is especially useful for gateway message to external systems which need to define a strong schema. \r\n'
1061,'',"Allow specifying handlers order without using First<T>\nI raised issue #1036 to cover this change, where it should be possible to specify ordering without the help of the 'First' class and therefore dynamically order handlers at runtime during startup.\r\n\r\nThis is my second attempt, this time hopefully I've understood and chose the develop branch as the base branch to send the changes to, albeit still from my master repo this time."
1060,'andreasohlund','Inconsistency in applying SLR defaults\nAn endpoint with stock config populated by Host NuGet package acts as if there are 3 levels of SLR.\r\n\r\nOnce you add the configSection declaration for SecondLevelRetriesConfig, but no SecondLevelRetriesConfig element itself, the default changes to no SLR at all.\r\n\r\nThis should be 3 levels of SLR in both cases.\r\n\r\nOnce this is verified, it would probably be a good idea to verify that the time increase parameter is consistent in both cases as well.'
1059,'andreasohlund','Inconsistency in applying MaxRetries default\nAn endpoint with stock config populated by Host NuGet package acts as if there are no retries.\r\n\r\nOnce you add the configSection declaration for TransportConfig, but no TransportConfig element itself, the default changes to MaxRetries = 5.\r\n\r\nThis should be 5 retries in both cases.'
1058,'','Unable to Host as Windows Service in 4.0.0\nwe have the following problem When we start NSB.Host.exe on normally as console application everything works fine. When we try to install the host as a windows service the installation works but the windows service cannot be started because the application configuration files cannot be loaded. We tried different command line arguments to start it and it failed nonetheless. Here some information:\r\n\r\nCommand:\r\n\r\nC:\\Project\\NServiceBus.Host.exe /install /serviceName:"Project Foo Endpoint" /instance:"ProjectFoo" /description:"Processes Foo Messages"  /username:"someDomain\\SomeUser" /password:"SomePassword"  NServiceBus.Infrastructure\r\nRunning a transacted installation.\r\n\r\nBeginning the Install phase of the installation.\r\nInstalling service Project Foo Endpoint$ProjectFoo...\r\nService Project Foo Endpoint$ProjectFoo has been successfully installed.\r\nCreating EventLog source Project Foo Endpoint$ProjectFoo in log Application...\r\n\r\nThe Install phase completed successfully, and the Commit phase is beginning.\r\n\r\nThe Commit phase completed successfully.\r\n\r\nThe transacted install has completed.\r\n\r\nC:\\Project>\r\n\r\n\r\nStarting Service-> Event Log Error:\r\nApplication: NServiceBus.Host.exe\r\nFramework Version: v4.0.30319\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: Topshelf.Exceptions.ConfigurationException\r\nStack:\r\n   at Topshelf.Internal.Actions.RunAs\r\n![ServiceScreen](https://f.cloud.github.com/assets/174258/269807/bc24fa20-8fae-11e2-9f43-bc42825841e9.png)\r\nServiceAction.Do(Topshelf.Configuration.IRunConfiguration)\r\n   at NServiceBus.Hosting.Windows.Program.Main(System.String[])\r\n\r\nSystem \r\n\r\n  - Provider \r\n   [ Name]  .NET Runtime \r\n  - EventID 1026\r\n   [ Qualifiers]  0 \r\n   Level 2 \r\n   Task 0 \r\n   Keywords 0x80000000000000 \r\n  - TimeCreated\r\n   [ SystemTime]  2013-03-18T08:57:25.000000000Z \r\n   EventRecordID 5241 \r\n   Channel Application \r\n   Computer applicationserver.somedomain.local \r\n   Security \r\n- EventData \r\n\r\n   Application: NServiceBus.Host.exe Framework Version: v4.0.30319 Description: The process was terminated due to an unhandled exception. Exception Info: Topshelf.Exceptions.ConfigurationException Stack: at Topshelf.Internal.Actions.RunAsServiceAction.Do(Topshelf.Configuration.IRunConfiguration) at NServiceBus.Hosting.Windows.Program.Main(System.String[])  \r\n\r\nService called like that -> \r\n \r\n\r\nThis option also does not work:\r\n/endpointConfigurationType:"customer.Project.EndpointConfig, customer.Project"\r\n\r\nInteresting is that when we only use the /install flag it works. As soon was we specify the /ServiceName:"Name" option the service will not start and throw the exception above.'
1057,'',"Configure.TypesToScan changed to  IList<Type> is a breaking change\nIn NSB3 `Configure.TypesToScan` was an `IEnumerable<Type>`\r\n\r\n    public static IEnumerable<Type> TypesToScan { get; private set; }\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/config/NServiceBus.Config/Configure.cs#L322\r\n\r\nIn NSB4 `Configure.TypesToScan` is an `IList<Type>`\r\n\r\n    public static IList<Type> TypesToScan { get; private set; }\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Configure.cs#L383\r\n\r\nThis change was performed in https://github.com/NServiceBus/NServiceBus/commit/dd6cf8cf7523c9059bbdcae3b049062064c40b23\r\n\r\nThis is all fine but it needs to be marked as a breaking change so it shows up in here\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/issues?labels=Not+backwards+compliant&milestone=26&page=1&state=closed\r\n\r\nThe reason it is breaking is that code compiled against NSB 3 that uses `Configure.TypesToScan` will give a `System.MissingMethodException` when run on NSB 4\r\n\r\n\tSystem.MissingMethodException \r\n\t  Message=Method not found: 'System.Collections.Generic.IEnumerable`1<System.Type> NServiceBus.Configure.get_TypesToScan()'.\r\n  \r\nPeople who want their code to be compatible with NSB3 and NSB4 will be required to use reflection to work around this issue. This should be documented."
1056,'','make Order.Types public\nSo i dont have to do reflection here\r\nhttps://github.com/SimonCropp/HandlerOrdering/blob/master/HandlerOrdering/OrderHandlers.cs#L15\r\n\r\nThere is really no reason for it to be private as it block extensibility'
1055,'','better error message for an unmapped message type\nfix for https://github.com/NServiceBus/NServiceBus/issues/1054'
1054,'','Sending an unmapped message results in KeyNotFoundException \nSending a message that does not implement IMessage,ICommand or IEvent (and is not mapped via convention) results in a KeyNotFoundException. Not exactly the best experience for a user\r\n\r\n\tSystem.Collections.Generic.KeyNotFoundException was unhandled\r\n\t  HResult=-2146232969\r\n\t  Message=The given key was not present in the dictionary.\r\n\t  Source=mscorlib\r\n\t  StackTrace:\r\n\t\t   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n\t\t   at NServiceBus.Unicast.Messages.DefaultMessageRegistry.GetMessageDefinition(Type messageType) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\Messages\\DefaultMessageRegistry.cs:line 10\r\n\t\t   at NServiceBus.Unicast.UnicastBus.<MapTransportMessageFor>b__3a(Object m) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1386\r\n\t\t   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n\t\t   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n\t\t   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n\t\t   at NServiceBus.Unicast.UnicastBus.MapTransportMessageFor(IList`1 rawMessages, TransportMessage result) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1386\r\n\t\t   at NServiceBus.Unicast.UnicastBus.SendMessage(List`1 addresses, String correlationId, MessageIntentEnum messageIntent, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 647\r\n\t\t   at NServiceBus.Unicast.UnicastBus.SendMessage(Address address, String correlationId, MessageIntentEnum messageIntent, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 582\r\n\t\t   at NServiceBus.Unicast.UnicastBus.NServiceBus.IBus.Send(Address address, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 499\r\n\t\t   at NServiceBus.Unicast.UnicastBus.NServiceBus.IBus.SendLocal(Object[] messages) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 467'
1053,'johnsimons','NHibernate Subscription Persister reads incorrect configuration values\nWhen you pass a configuration into ConfigureNHibernateSubscriptionStorage.UseNHibernateSubscriptionPersister the configuration values are read into ConfigureNHibernate.TimeoutPersisterProperties instead of ConfigureNHibernate.SubscriptionStorageProperties. This causes the subsequent call to UseNHibernateSubscriptionPersisterInternal to throw when it checks for required properties in ConfigureNHibernate.SubscriptionStorageProperties'
1052,'andreasohlund','SendEmail retries all recipients\nIf you send an email to multiple recipients and one of the email addresses fails, the automatic retries either FLR or/and SLR will attempt to resend the same email to all the recipients again!\r\n\r\nWhat this means is that if for example you are sending an email to 20 recipients and 1 of those recipients email fails, all other 19 recipients will receive the same email multiple times (5x FLR + 3x SLR) so they end up receiving the same email 15 times!'
1051,'',"NServiceBus.Host and EndpointConfig with no profile throws exception\nIf you do that:\r\n\r\n    public class EndpointConfig : IConfigureThisEndpoint, IWantToRunWhenBusStartsAndStops\r\n    {\r\n        public void Start()\r\n        {\r\n        }\r\n\r\n        public void Stop()\r\n        {\r\n\r\n        }\r\n    }\r\n\r\nA null reference exception is thrown in the DefaultAutoSubscriptionStrategy Line 60. The IMessageHandlerRegistry is not registered on the container. I think NSB should autoselect a proper profile when not specified shouldn't it?\r\n\r\nWhen I use AsA_Server it works"
1050,'johnsimons','Incorrect usage of ObsoleteAttribute\nThe ObsoleteAttribute is for stuff that "still works but is scheduled for removal". As it stands NSB has several methods that voids the "still works" part.\r\n\r\neg\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/ConfigureRavenPersistence.cs#L297\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/ConfigureRavenPersistence.cs#L307\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/ConfigureRavenPersistence.cs#L317\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/ConfigureRavenPersistence.cs#L328\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/ConfigureRavenPersistence.cs#L339\r\n\r\nThe problem with these is that ObsoleteAttribute is a compile time tool. However these methods have been stubbed out. So in effect changing the run time behavior. This means someone could, in theory, do an in place upgrade of NSB without a compile and have a runtime bug. It would be very hard for them to diagnose these bugs.\r\n\r\nAlso these methods have been decorated with attributes as such\r\n\r\n   [ObsoleteEx(Message = "If you need to customise Raven database naming convention, you can either initialise Raven using config.RavenPersistence(IDocumentStore documentStore) or use config.CustomiseRavenPersistence(Action<IDocumentStore> callback).", TreatAsErrorFromVersion = "4.0", RemoveInVersion = "5.0")] \r\n\r\nThe fact that it says `RemoveInVersion = "5.0"` implies that this method, while obsolete, will continue to function until version 5.\r\n\r\nSo there are a few options here\r\n\r\n1. Put the code back to make these methods work at runtime\r\n2. Remove the methods completely so people will get proper runtime errors\r\n3. Make all the methods throw NotImplementedExceptions and change the obsolete message to more accuratly reflect that these methods should not be called'
1049,'andreasohlund','NHibernate Saga Persistance does not work\nWe detected today that when you use the NH saga persister nothing is ever persistet. The problem is in the scoping on the container. \r\n\r\nCurrently there is the following:\r\n\r\nconfig.Configurer.ConfigureComponent<UnitOfWorkManager>(DependencyLifecycle.InstancePerCall)\r\n\r\nThe saga persister needs also the UnitOfWorkManager. But when a message arrives the unicast bus retrieves all IManageUnitsOfWork but the instance which the saga persister has is not the same as the instance which is resolved on the unicast bus. Therefore when the saga transport message is received and the End() is called the currentSession is always null.\r\n\r\nconfig.Configurer.ConfigureComponent<UnitOfWorkManager>(DependencyLifecycle.InstancePerUnitOfWork) should fix that (Verify)'
1048,'','Added new ActiveMQ.NMS client\nUpdated ActiveMQ.NMS client to a new custom build that fixes several problems:\r\n\r\n- https://issues.apache.org/jira/browse/AMQNET-412\r\n- https://issues.apache.org/jira/browse/AMQNET-413\r\n- https://issues.apache.org/jira/browse/AMQNET-414\r\n- https://issues.apache.org/jira/browse/AMQNET-416\r\n- https://issues.apache.org/jira/browse/AMQNET-417\r\n- https://issues.apache.org/jira/browse/AMQNET-418\r\n- https://issues.apache.org/jira/browse/AMQNET-419\r\n- https://issues.apache.org/jira/browse/AMQNET-420\r\n- https://issues.apache.org/jira/browse/AMQNET-421\r\n- https://issues.apache.org/jira/browse/AMQNET-422'
1047,'','More descriptive error message when TopShelf refuses to start endpoint due to invalid configuration\nWhen TopShelf refuses to start the endpoint (due to, what I\'ve learned from Andreas, invalid naming of services/endpoints) and tries to start the service from the Service Manager, all you get is a rather generic error message:\r\n\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: Topshelf.Exceptions.ConfigurationException\r\n\r\n//J\r\n\r\nEDIT: In this case it was a /serviceName:"my cool app" that caused it'
1046,'','Expose Windows Service Parameters on Host\nFor example topshelf allows to set the RequestAdditionalTime on the service, see here:\r\n\r\nhttps://groups.google.com/forum/m/?fromgroups#!topic/topshelf-discuss/0ppTDXXaYPk\r\n\r\nWould be nice to allow users to call that, see SO question here:\r\n\r\nhttp://stackoverflow.com/questions/15329670/servicebase-requestadditionaltime-from-nservicebus-host'
1045,'','Async call in handler freezes thread\nWhen having a Task in a handler it hangs on wait and never comes back.\r\n\r\n[OrderCommandHandler](https://github.com/NServiceBus/NServiceBus/blob/develop/Samples/Messaging.Msmq/MyServer/OrderCommandHandler.cs):\r\n\r\n\tpublic class OrderCommandHandler : IHandleMessages<OrderCommand>\r\n\t{\r\n\t\tpublic void Handle(OrderCommand message)\r\n\t\t{\r\n\t\t\tvar task = new TaskFactory<int[]>().StartNew(() => new[] {1, 2, 5});\r\n\t\t\ttask.Wait();\r\n\t\t}\r\n\t}\r\n\r\nThis works in 3.3.4 but not in the [develop branch](https://github.com/NServiceBus/NServiceBus/tree/develop) (4.0)\r\n\r\nSee conversation in [mailinglist](http://tech.groups.yahoo.com/group/nservicebus/message/18126)'
1044,'','SQL Server Transport Push instead of Pull\nFixes #1040\r\n\r\nRefactored to include a pluggable and extensible sqlbackoffstrategy. The default strategy keeps the current implementation intact.  A second strategy was added to fallback to using a SqlDependency when no messages have been received for a given period of time on the endpoint.\r\n\r\nIf anyone has any suggestions on where or how to plug in integration tests I would appreciate it.  I also would like some formal performance tests to document the impact of the new strategy.\r\n\r\nJust running on my local machine with 2 workers 10 threads each I saw a 3 - 5% cpu utilization on SqlServer just from idle polling with the default strategy.  Changing to the SqlDependency strategy there was 0% cpu utilization on my sql server.  While not scientific and not running at full scale it does show promise with fairly idle endpoints using this strategy.\r\n\r\nPlease let me know if there is more I can contribute or change.\r\n\r\nThanks,\r\nAdam\r\n'
1043,'','Missing check for Powershell v2\nWhen you start NServiceBus.Host.exe on a Windows Server 2003 without Powershell v2 installed, all you get is a null reference from deep inside NSB. Please add some startup checking for Powershell. \r\n\r\nSee http://tech.groups.yahoo.com/group/nservicebus/message/18038 and http://tech.groups.yahoo.com/group/nservicebus/message/18068.\r\n\r\nThanks, Jørn'
1042,'',"Null reference in TimeoutPersisterReceiver (RavenDB vs. NHibernate)\nI have a service hosted in NServiceBus.Host.exe (v3.3.0) which works on my developer machine. When I deploy the service to production it fails in the timeout poll (see trace below).\r\n\r\nThen I tried to use NHibernate as the timeout persister and suddenly it worked in production. The only thing I added was:\r\n\r\n    NServiceBus.Configure.With(assemblies)\r\n      ..UseNHibernateTimeoutPersister() // THIS\r\n\r\nand of course the related configuration stuff in the app.config.\r\n\r\nThis makes me believe that NSB defaults to RavenDB and when RavenDB is not installed it fails in mysterious ways. The funny thing though is that RavenDB is not installed on the developer machine on which it worked initially???\r\n\r\nThe production system is running Windows Server 2003 (and has Powershell v2 installed).\r\n\r\nThe bug I want to report is the missing error handling - it certainly ain't easy to figure out what is wrong when all you get is a null reference somewhere deep inside NSB.\r\n\r\nHere is the trace from the failing run:\r\n\r\nDEBUG 2013-03-05 10:28:56,153 14533ms  [13] TransactionalTransport                   DebugFormat        - Going to start [1] receiving thread/s for Address [f2testsubmissionservice.retries@rdf2mob01].\r\nDEBUG 2013-03-05 10:28:56,153 14533ms  [13] SatelliteLauncher                        Execute            - Starting transport f2testsubmissionservice.retries@rdf2mob01 for satellite SecondLevelRetries using 1 thread(s)\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [1] TransactionalTransport                   DebugFormat        - Going to start [1] receiving thread/s for Address [f2testsubmissionservice.timeouts@rdf2mob01].\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nERROR 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts failed.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nERROR 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts failed.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nERROR 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts failed.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nERROR 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts failed.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nERROR 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts failed.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nERROR 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts failed.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nERROR 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts failed.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nERROR 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts failed.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nERROR 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts failed.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nERROR 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts failed.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling for timeouts at 03/05/2013 10:28:56.\r\nFATAL 2013-03-05 10:28:56,169 14549ms  [16] TimeoutPersisterReceiver                 Poll               - Polling of timeouts has failed the maximum number of times.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutPersisterReceiver.Poll() in c:\\TeamCity\\buildAgent\\work\\nsb.master_5\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutPersisterReceiver.cs:line 73\r\nDEBUG 2013-03-05 10:28:56,216 14596ms  [2] SessionImpl                              lambda_method      - [session-id=1c23119f-bf64-4d10-8dad-20d60df60792] executing real Dispose(False)\r\nDEBUG 2013-03-05 10:28:56,216 14596ms  [2] SessionImpl                              lambda_method      - [session-id=e42ababd-edfc-4f1f-969e-acba58e022fa] executing real Dispose(False)\r\nDEBUG 2013-03-05 10:28:56,216 14596ms  [2] SessionImpl                              lambda_method      - [session-id=f8a66a36-1781-49b9-b186-6f938931cd57] executing real Dispose(False)\r\nDEBUG 2013-03-05 10:28:56,216 14596ms  [2] SessionImpl                              lambda_method      - [session-id=ab5841a9-94ae-47eb-8e8a-0a36c2691718] executing real Dispose(False)\r\nDEBUG 2013-03-05 10:28:56,216 14596ms  [2] SessionImpl                              lambda_method      - [session-id=2d6f8051-c002-44f6-a089-2e0d97ba4df6] executing real Dispose(False)\r\nDEBUG 2013-03-05 10:28:56,216 14596ms  [2] SessionImpl                              lambda_method      - [session-id=1d55f15d-173c-42cb-8395-93676d56a42c] executing real Dispose(False)\r\nDEBUG 2013-03-05 10:28:56,216 14596ms  [2] SessionImpl                              lambda_method      - [session-id=4c513fce-f361-4989-bdd5-aa5c7a8f68e3] executing real Dispose(False)\r\nDEBUG 2013-03-05 10:28:56,216 14596ms  [2] SessionImpl                              lambda_method      - [session-id=eaa58cb1-8992-4d31-a53c-7238d9a0acdf] executing real Dispose(False)\r\nDEBUG 2013-03-05 10:28:56,231 14611ms  [1] TransactionalTransport                   DebugFormat        - Going to start [1] receiving thread/s for Address [f2testsubmissionservice.timeoutsdispatcher@rdf2mob01].\r\nDEBUG 2013-03-05 10:28:56,231 14611ms  [10] EndpointConfig                           <Startup>b__0      - Calling EndpointConfig\r\n"
1041,'johnsimons','Loading NServiceBus via bytes results in ArgumentException.\nLoading NServicBus via bytes results in ArgumentException.\r\n\r\nSo I am merging NSB using this https://github.com/Fody/Costura. This effectively results in NSB being loaded from a embedded resource stream. But `VersionMutator` makes the assumption NSB will be loaded from the file system\r\n\r\n            var version = FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location);\r\n            var semverVersion = string.Format("{0}.{1}.{2}", version.FileMajorPart, version.FileMinorPart, version.FileBuildPart);\r\n\r\nThat is `Assembly.GetExecutingAssembly().Location` will be an empty string.\r\n\r\nSo this happens\r\n\r\n\tUnhandled Exception: System.ArgumentException: The path is not of a legal form.\r\n\t   at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength)\r\n\t   at System.IO.Path.GetFullPathInternal(String path)\r\n\t   at System.IO.Path.GetFullPath(String path)\r\n\t   at System.Diagnostics.FileVersionInfo.GetFullPathWithAssert(String fileName)\r\n\t   at System.Diagnostics.FileVersionInfo.GetVersionInfo(String fileName)\r\n\t   at NServiceBus.Unicast.Monitoring.VersionMutator.Init() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Unicast\\Monitoring\\Ver\r\n\tsionMutator.cs:line 30\r\n\t   at NServiceBus.Configure.<Initialize>b__10(Type t) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Configure.cs:line 348\r\n\t   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n\t   at NServiceBus.Configure.ForAllTypes[T](Action`1 action) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Configure.cs:line 376\r\n\r\n\t   at NServiceBus.Configure.Initialize() in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Configure.cs:line 345\r\n\t   at NServiceBus.ConfigureExtensions.SendOnly(Configure config) in c:\\TeamCity\\buildAgent\\work\\28bfdd0d351fb1d3\\src\\NServiceBus.Core\\Config\\Configure\r\n\tExtensions.cs:line 18\r\n\r\nso VersionMutator.Init should be \r\n\r\n        public void Init()\r\n        {\r\n            var version = GetType().Assembly.GetName().Version;\r\n            var semverVersion = string.Format("{0}.{1}.{2}", version.Major, version.Minor, version.Revision);\r\n\r\n            Configure.Instance.Configurer.ConfigureComponent<VersionMutator>(DependencyLifecycle.SingleInstance)\r\n                .ConfigureProperty(p => p.NServiceBusVersion, semverVersion);\r\n        }\r\n\r\nalso `EndpointHelper.GetEndpointVersion` has the same bug\r\n\r\nThis is a pretty simple fix. Do you need a pull request for it?\r\n\r\nPath for files\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Config/Conventions/EndpointHelper.cs\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Monitoring/VersionMutator.cs'
1040,'','SQL Server Transport Push instead of Pull\nJust came across my mind when reading an internal email. Could we use:\r\n\r\nhttp://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldependency.aspx\r\n\r\nin order to get push notifications from the sql server instead of polling the tables?'
1039,'','Issues with Raven naming convention\nso regarding this code\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Persistence/Raven/RavenConventions.cs\r\n\r\nspecifically \r\n\r\n    if (IsASagaEntity(t))\r\n    {\r\n       tagName = tagName.Replace("Data", String.Empty);\r\n    }\r\n\r\nWhy is this the conventions? It makes it harder to query Raven for NSB saga items since i need to override the convention.\r\n\r\nAlso there are possible bugs. Consider the case where I have a saga data `CreateUserData` and i also have another type `CreateUser` (be it some kind of timeout or another saga data). Now admittedly this is probably a problematic scenario on my side and is a contrived example. But in this scenario it will be difficult to debug what the issue is if you have conflicting type loads in raven. '
1038,'johnsimons',"Allow specifying handlers order without using First<T>\nI raised issue #1036 to cover this change, where it should be possible to specify ordering without the help of the 'First<T>' class and therefore dynamically order handlers at runtime during startup."
1037,'',"RavenDB does not properly support DTC transactions.\nRavenDB's implementation for DCT Transactions is currently incorrect:\r\n- http://issues.hibernatingrhinos.com/issue/RavenDB-970\r\n\r\nI think this only happens when RavenDB is the first system to enlist in a transaction. But in this case the client is that one that handles the transaction and not the server. Which btw is the reason why the clients need a unique resourceid and not the server as it should be.\r\n\r\nHave we currently any situations where raven anlists before the queuing system? If so it shoul dbe changed.\r\n\r\nAlso upvote that issue on RavenDB to give it more priority as it affects the stability of NServiceBus"
1036,'','Allow specifying handlers order without using First<T>\nIt would be good to be able to manipulate the order of handlers using some mechanism other than the `First<T>` syntax. This allows for code that dynamically generates the prioritisation of handlers at runtime rather than having to remember to update the ordering when new handlers are added that should be prioritised.\r\n\r\nI plan to implement this myself in a pull request, and will reference this issue in the commit notes.'
1035,'andreasohlund','Introduce a NServiceBus.EndpointVersion header\nTo capture the version of the users endpoint that is running. Extract the current code (used in side by side mode in the host) and make it available on the core.\r\n\r\n## New api in v5\r\n\r\n```\r\nvar configuration = new BusConfiguration();\r\nconfiguration.EndpointVersion("1.2.1"))\r\n```'
1034,'johnsimons','Added support to configure Error and Audit queue via HKLM\nSupport for NServiceBus to read from `HKLM\\Software\\NServiceBus` the Error and Audit queue addresses.\r\n![Capture](https://f.cloud.github.com/assets/122651/208399/e3e0ffd4-8228-11e2-9788-694508cdaa26.PNG)\r\n\r\n\r\nWith this change 2 new Powershell cmdlets are also available:\r\n```\r\nPS> Set-NServiceBusLocalMachineSettings -ErrorQueue "error@machine" -AuditQueue "audit@machine"\r\nPS> Get-NServiceBusLocalMachineSettings\r\n\r\nErrorQueue                                                  AuditQueue\r\n----------                                              ----------\r\nerror@machine                                            audit@machine\r\n```\r\n\r\n#### What does this mean?\r\nIf you specify an error queue in your config file then the endpoint uses that setting, eg:\r\n`<MessageForwardingInCaseOfFaultConfig ErrorQueue="myerrorqueue"/>`\r\nhowever if `<MessageForwardingInCaseOfFaultConfig>` is not defined in the config file then NServiceBus will look it up on the registry, if the registry does not have it defined either then the Endpoint reports an error (you need to have an error queue defined for non sendonly endpoints!).\r\n\r\nThe same logic applies to the audit queue, so if there is a `<UnicastBusConfig ForwardReceivedMessagesTo="myauditqueue"/>` then the endpoint uses that setting, otherwise checks the registry, if the registry does not have it defined either, then the endpoint runs without audit being turned on.\r\n'
1033,'andreasohlund',"Refactor endpoint type determination for Windows Host\nHi, this PR probably looks a lot bigger than it actually is.\r\n\r\ncouple of really minor changes - adding ncrunch to gitignore, adding R# settings for test proj.\r\n\r\nthe rest of the PR...\r\n\r\n## Why:\r\nI refactored the logic for determining the type of the Endpoint (for endpoints hosted by the Windows Host) because in my application code I wanted the ability to get the name of the endpoint so I can specify the process name (ie endpoint name) in logs.\r\nInitially I wanted to just borrow the NSB assemblyscanning logic but as this was private static methods I decided to make this public.\r\nNow in an external application you can get the name of the endpoint using public non-static NSB types, like so:\r\n```cs\r\nvar endpointTypeDeterminer = new EndpointTypeDeterminer(AssemblyScanner.GetScannableAssemblies(), () => null);\r\nvar endpointConfigurationType = endpointTypeDeterminer.GetEndpointConfigurationType();\r\nstring applicationName = endpointConfigurationType.EndpointName;\r\n```\r\n\r\n## Changes:\r\nI thought I'd clean up the logic for determining the type of the endpoint - by making this (EndpointTypeDeterminer) a public class it's now testable (so I wrote a bunch of tests) and it made sense to also encapsulate and test EndpointType and its associated getters.\r\nNow the host program only deals with Topshelf concerns - and the Endpoint type stuff is encapsulated in separate classes which can be and are tested.\r\nSo basically a whole lot of stuff has just been moved (and tests added) - out of Program and into SRP classes.\r\n\r\n## Testing:\r\nUnit tests cover almost every part (except use of INameThisEndpoint as it's obsolete and so causes compilation to fail) and hopefully also document the intended logic (ie priority of determining the endpoint name).\r\nI've also manually tested the actual host with the relevant hostargs, config settings, attributes and fallback to assembly scanning.  It all seems to work as before."
1032,'johnsimons','Allow for Action<TMessage> checks in Testing\nToday, we can only provide `Func<TMessage, bool>` to verify that a send message does what we want.  The problem with this is that we just get a message saying the check failed, but if there\'s 3 conditions that need to be met, we don\'t know which one failed.\r\n\r\nInstead, I would like to see an overload added with `Action<TMessage>` so we can do this (e.g. in NUnit):\r\n\r\n```\r\nAssert.That(() => msg.Property1, Is.EqualTo(value1), "Property1 is screwed up!");\r\nAssert.That(() => msg.Property2, Is.EqualTo(value2), "Wackness detected in Property2!");\r\n```\r\n\r\nIt feels a little more behavioral to me.  Again, this is one I\'d be happy to contrib.  What do we think, gents?'
1031,'',"Add an overload for Test.Initialze() that takes IEnumerable<Assembly>.\n* Did not add tests because the other overloads don't have them."
1030,'','Consider native support for WIF\nRelated to https://github.com/NServiceBus/NServiceBus/issues/127'
1029,'andreasohlund','RabbitMqTransportMessageExtensions.ToTransportMessage fails if no header values are available\nWhen reading from an "external" RabbitMQ queue with the RabbitMqDequeueStrategy, the RabbitMqTransportMessageExtensions.ToTransportMessage fails if, for some reason, the BasicProperties.Headers are null.\r\n\r\nThis might happen when you try to use the NSB RabbitMq classes to read from queues that contains messages from other systems that doesn\'t force the sender to set headers.'
1028,'SimonCropp','Include git SHA in AssemblyInformationalVersion\nMakes it much easier to work out what source produced a given assembly\r\n\r\nPossible format\r\n\r\n    [assembly: AssemblyInformationalVersion("1.0.0.0 Head:\'master\' Sha:759e9ddb53271dfa9335a3b27e452749a9b22280")]'
1027,'','Allow Test.Initialize to take an IEnumerable<Assembly> overload\nIf we allow Test.Initialize to take an IEnumerable<Assembly> overload, the change would allow us to to this:\r\n\r\nTest.Initialize(AllAssemblies.Except("crappyCOM.dll"));\r\n\r\nInstead of this (which required me to look at the source code to realize AllAssemblies implements IEnumerable<Assembly>:\r\n\r\nTest.Initialize(AllAssemblies.Except("crappyCOM.dll").ToArray());\r\n\r\nIf there are no objections, I should be able to do this.'
1026,'johnsimons','Do not open an NHibernate session until the saga persister needs it\nToday, if you have sagas enabled, a NH session will be opened for all messages regardless if it is a saga message or not.\r\n\r\nThis PR delays the opening of a session until the saga persister actually needs it. If no saga persister is called (ie the message is not a saga message) then no session will be opened.\r\n\r\nBtw, this is the same behaviour as the raven persister.'
1025,'andreasohlund','Clarify the "subscription message received" warning mesage\n\r\n\r\nI am only using Bus.Reply() (not Bus.Publish()) in my endpoints (all configured AsA_Server). When I fire one of them up, I get the following warning:\r\n\r\n2013-02-27 14:11:02,574 [Worker.15] WARN NServiceBus.Unicast.UnicastBus [(null) ] <(null)> - Subscription message from [not the currently running endpoint\'s queue]@my machine arrived at this endpoint, yet this endpoint is not configured to be a publi sher.\r\n\r\nAndreas informs me that this is a warning that can be safely ignored.  Ok, cool.  Let\'s make the warning message clearer by adding the text "If you are only doing request/response, you may safely ignore this message.  Disable autosubscription in your configuration to make this warning go away."\r\n'
1024,'','using IProvideConfiguration<MessageForwardingInCaseOfFaultConfig> to specify error queue results in \n"4.0.0-unstable2704" \r\n\r\nAdding this\r\n\r\n    public class ConfigErrorQueue : IProvideConfiguration<MessageForwardingInCaseOfFaultConfig>\r\n    {\r\n        public MessageForwardingInCaseOfFaultConfig GetConfiguration()\r\n        {\r\n            return new MessageForwardingInCaseOfFaultConfig\r\n                {\r\n                    ErrorQueue = "Error"\r\n                };\r\n        }\r\n    }\r\n\r\nand not specifying anything in the app.config results in \r\n\r\n\t[ConfigurationErrorsException: \'MessageForwardingInCaseOfFaultConfig\' configuration section is missing and could not find backup configuration section \'MsmqTransportConfig\' in order to locate the error queue.]    \r\n\tNServiceBus.ConfigureFaultsForwarder.MessageForwardingInCaseOfFault(Configure config) in c:\\TeamCity\\buildAgent\\work\\36dd35accd0955b0\\src\\NServiceBus.Core\\ConfigureFaultsForwarder.cs:34    \r\n\tSystem.Collections.Generic.List`1.ForEach(Action`1 action) +14007684    \r\n\tNServiceBus.Configure.Initialize() in c:\\TeamCity\\buildAgent\\work\\36dd35accd0955b0\\src\\NServiceBus.Core\\Configure.cs:330    \r\n\tNServiceBus.Configure.CreateBus() in c:\\TeamCity\\buildAgent\\work\\36dd35accd0955b0\\src\\NServiceBus.Core\\Configure.cs:278  '
1023,'','ISpecifyMessageHandlerOrdering by message type\nIt would be nice to be able to specify message ordering by message type\r\n\r\n    public interface ISpecifyMessageHandlerOrderingFor<TMessageType>\r\n    {\r\n        void SpecifyOrder(Order<IHandleMessages<TMessageType>> order);\r\n    }\r\n\r\nDoes that make sense?'
1022,'johnsimons','Ensure all logger names begin with NServiceBus\nas per forum post http://tech.groups.yahoo.com/group/nservicebus/message/17990\r\n\r\n'
1021,'','Use gitattributes to deal with line endings\nhttps://help.github.com/articles/dealing-with-line-endings#platform-windows\r\n\r\nand\r\n\r\nhttp://schacon.github.com/git/gitattributes.html'
1020,'andreasohlund','Sagas: Second level retries breaks timeout message handling\nThere is a bug in NServiceBus.Sagas.Impl.SagaDispatcherFactory (NSB v3.3.5).\r\n\r\nThe bug is here:\r\n\r\nif (isTimeoutMessage && !(message is TimeoutMessage))\r\n\tHandlerInvocationCache.Invoke(typeof(IHandleTimeouts<>),saga, message);\r\nelse\r\n\tHandlerInvocationCache.Invoke(typeof(IMessageHandler<>),saga, message);\r\n\r\nWhen second level retries are enabled, and multiple messages arrive for the same saga, the retry mechanism is activated, tagging the messages as timeout messages. When they are retried the code above attempts to invoke a handler of type IHandleTimeouts<>, resulting in a KeyNotFoundException. If the "message is TimeoutMessage" test is not negated, the problem would be solved for retried messages, but the new timeout functionality which doesn\'t require timeout messages to inherit from TimeoutMessage would be broken (correct me if I\'m wrong please). \r\n\r\nWorkarounds:\r\n1) Disable second level retries.\r\n2) Implement IHandleTimeouts<> for problem messages (yikes!).\r\n\r\nWorkaround 1 is problematic because second level retries help keep messges out of the error queue in high concurrency scenarios. Workaround 2 is ugly.'
1019,'johnsimons','Handler invocation cache\nthis needs a code review. any takers?\r\n\r\nissue #1017\r\nnote there is a TODO to remove the old version after you validate the performance tests\r\n\r\nin my basic perf tests for 100000 invokes ...\r\nbefore: 124ms\r\nafter: 33ms\r\n\r\nHowever the perf improvements will be greater with more handlers.\r\n'
1018,'','NServiceBus doesn\'t play nicely with pre-existing nlog.config files\ncross-posted from http://tech.groups.yahoo.com/group/nservicebus/message/17971\r\n\r\n## Problem:\r\nI have some centralised nlog configuration files that we pull in via nuget - these determine targets and rules, and we then have build/deployment scripts that alter values for the different environments we deploy to.  For instance, local dev gets trace logged to console, file and UDP.  stage debug logs to file and splunk.  prod info logs at different levels to different targets again.\r\nThis means that I want my endpoint to pick up nlog configuration from our nuget source files.  And this is where the problem lies.\r\n\r\nI cannot specify Configure.Instance.Nlog() because I have to specify the target(s) - an ArgumentException is thrown otherwise.  So I use the NLog API to read in my configuration file and pass in the targets.\r\nThe problem I have is that the existence of my nlog.config files means i\'m getting logs emitted once but picked up by two sets of rules.  I see in the source code that NSB is appending a global rule to log everything above the logging threshold.  Which means i now have two rules - one created by NSB and the other pulled from my nlog.config file.\r\n\r\n## Analysis:\r\nNServiceBus.Logging.Loggers.NLogAdapter.NLogConfigurator.Configure method contains:\r\nvar logLevel = LogLevelType.GetStaticField(levelForNServiceBusToLogWith ?? "Info", true);\r\ndynamic loggingRule = Activator.CreateInstance(LoggingRuleType, "*", logLevel, targetsForNServiceBusToLogTo.First());\r\nforeach (dynamic target in targetsForNServiceBusToLogTo.Skip(1)){\r\n  loggingRule.Targets.Add(target);\r\n}\r\nloggingConfiguration.LoggingRules.Add(loggingRule);\r\nLogManagerType.SetStaticProperty("Configuration", (object)loggingConfiguration);\r\n\r\nAny advice?  In my case Ops are concerned with the logging target definitions (which change per environment) - so I need to retain the centralised nlog config definition - but i don\'t want the duplicate rules created.\r\n\r\n## Suggested resolution:\r\n* Only add the new logging rule if there are not already explicit rules in NLog configuration. \r\n* Allow NSB to be configured for NLog without specifying targets if an NLog configuration already exists. \r\n\r\nBasically, if a user has already provided NLog configuration with targets and rules then assume they really care about the nlog configuration and just use that (and ignore any NServiceBus.Config.Logging logging level specified in app config).\r\n\r\n'
1017,'johnsimons','Perf improvements to HandlerInvocationCache\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/HandlerInvocationCache.cs\r\n\r\nthese lines do a double lookup.. \r\n\r\n            foreach (var messageType in messageTypesToMethods.Keys)\r\n                if (messageType.IsInstanceOfType(message))\r\n                    messageTypesToMethods[messageType][interfaceType].Invoke(handler, new[] { message });\r\n\r\nShould just iterate through the keyvalues. then no need to do the `messageTypesToMethods[messageType]` since you will already have the value\r\n\r\n\r\nthis lines also does a double lookup.\r\n\r\n            if (!(handlerToMessageTypeToHandleMethodMap[handler].ContainsKey(messageType)))\r\n                handlerToMessageTypeToHandleMethodMap[handler].Add(messageType, GetHandleMethods(handler, messageType));\r\n\r\nShould do a `TryGetValue`.\r\n\r\nChange to use type handles and cached compiled delegates'
1016,'johnsimons','Obsolete IMessageHandler<T>\nThe preferred interface is now `IHandleMessages<T>`\r\n\r\nAt the moment we have the following hierarchy:\r\n```c#\r\n    public interface IMessageHandler<T>\r\n    {\r\n        void Handle(T message);\r\n    }\r\n\r\n    public interface IHandleMessages<T> : IMessageHandler<T> {}\r\n```\r\n\r\nI recommend we invert the hierarchy and obsolete `IMessageHandler<T>`, so that it looks like:\r\n```c#\r\n    public interface IHandleMessages<T>\r\n    {\r\n        void Handle(T message);\r\n    }\r\n\r\n    [Obsolete]\r\n    public interface IMessageHandler<T> : IHandleMessages<T> {}\r\n```\r\n\r\nDoes anyone see any problems with doing this?\r\n'
1015,'',"The destination queue could not be found\nWe are getting this error in production:\r\n\r\n_The destination queue 'xxx@server' could not be found. You may have misconfigured the destination for this kind of message (XXXMessage) in the MessageEndpointMappings of the UnicastBusConfig section in your configuration file. It may also be the case that the given queue just hasn't been created yet, or has been deleted._\r\n\r\nThe handler for the message does some work and then publishes an event & it's the event publish which is failing. The odd thing is that 99% of the time the messages in that queue process successfully and publish the event fine so I'm struggling to understand why it fails occasionally.\r\n\r\nSome of the messages do take a while to process so is there a timeout on the transaction that could be causing this error? I think it's masking the underlying problem as the queue definitely exists and this handler and others can successfully send messages to it.\r\n\r\n_Currently running NSB 3.2.8_"
1014,'','ActiveMQ message consumers die\nDue to a bug in the  ActiveMQ NMS client message consumers die after some time. No messages will be processed anymore after some time. The reason for this is the DTC TransactionLog of the Active NMS client. It allows just one open transaction. But with multiple consumers and connections for the timeout manager we have several open transactions.\r\n\r\nWe need to fix this problem in the NMS client and replace the current custom build.'
1013,'','Fixed issue #1012 - Transaction failures with NHibernate TimeoutStorage\nCommitting the transaction in the te==null case fixes the problem'
1012,'johnsimons',"Transaction failures with NHibernate TimeoutStorage\nIn the NHibernate TimeoutStorage.TryRemove method, if the TimeoutEntity can't be found, it returns without committing the transaction, this causes a transaction rollback. The outer transaction (if NServiceBus is used transactionally) then fails ((TransactionAbortedException) because the SQL transaction is already rolled back."
1011,'johnsimons','Nuget script init.ps1 fails in Visual Studio if UAC is enabled\nThe script should detect wether VS is running as administrator and quit prematurely.\r\n\r\nThis should work:\r\n\r\n    $isAdministrator = (New-Object Security.Principal.WindowsPrincipal ([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)  \r\n\r\n    if (!$isAdministrator) {\r\n      Write-Warning "This script checks NServiceBus prerequisites and must be run in administrator mode. Please restart Visual Studio as administrator"\r\n      exit\r\n    }\r\n'
1010,'','Add a custom sqlserver subscription storage and subscription manager\nThis removed the need to use NHibernate but more importantly allows us to do configuration less pub/sub since the sqlserver is centralized anyway'
1009,'','Configure.DoNotCreateQueues() is confusing\nThe [Configure.DoNotCreateQueues()](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/ConfigureMsmqTransport.cs) is a confusing name.\r\nIs this suppose to only disable queue creation for MSMQ or all transports(or at least the ones that support it) ?\r\n\r\n'
1008,'','If we fail to create or assign security to msmq queues we should fail fast\nIn [MsmqQueueCreator](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Queuing/Msmq/MsmqQueueCreator.cs#L63) we should either:\r\n- Failfast, `Environment.FailFast`\r\n- Throw exception\r\n\r\nThere is no point of keeping on going if queues could not be created or security could not be assigned!'
1007,'',"Fixed a problem with a transaction rollback when timeout entity not found\nWhen tx gets disposed without explicitly committing the transaction it automatically rolls back the transaction. This was causing me problems (TransactionAbortedException) with the outer transaction (when NServiceBus is used transactionally) in case the entity wasn't found.\r\n\r\nCommitting the transaction in the te==null case fixes this problem."
1006,'','Add a better exception when users call RequestTimeout<T> but forgets to implement IHandleTimeouts<T>\nThrow a meaningfull exception guiding the users to add the IHandleMessages interface to their saga.\r\n\r\nSee full discussion here:\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/issues/1005#issuecomment-13875701'
1005,'','Should MessageMapper.GetMappedTypeFor ever return null?\nWading through some code and i found this\r\n\r\n        public Type GetMappedTypeFor(Type t)\r\n        {\r\n            if (t.IsClass)\r\n            {\r\n                Type result;\r\n                concreteToInterfaceTypeMapping.TryGetValue(t, out result);\r\n                if (result != null)\r\n                    return result;\r\n\r\n                return t;\r\n            }\r\n\r\n            Type toReturn = null;\r\n            interfaceToConcreteTypeMapping.TryGetValue(t, out toReturn);\r\n\r\n            return toReturn;\r\n        }\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/MessageInterfaces/MessageMapper/Reflection/MessageMapper.cs#L319\r\n\r\nThe thing that looks weird is the final two lines. if the TryGetValue fails then toReturn will be null. Now I am not sure but i dont think this method should ever return null?\r\n\r\nshould the last few lines be ??\r\n\r\n            Type toReturn;\r\n            if (interfaceToConcreteTypeMapping.TryGetValue(t, out toReturn))\r\n            {\r\n                return toReturn;\r\n            }\r\n            return t;'
1004,'','Timeouts not being saved in specified RavenDB database\nWhen specifying the connection string and overriding the database name with `.RavenPersistence("NServiceBus.Persistence", Configure.EndpointName)` to override the server url, the timeouts are still stored in the default ravenDb tenant.\r\n\r\nI managed to work around this by configuring raven in `IWantToRunBeforeConfigurationIsFinalized`:\r\n\r\n    public class InitRaven :IWantToRunBeforeConfigurationIsFinalized\r\n    {\r\n        public void Run()\r\n        {\r\n            Configure.Instance.RavenPersistence("NServiceBus.Persistence", NServiceBus.Configure.EndpointName)\r\n                     .UseRavenTimeoutPersister();\r\n        }\r\n    } \r\n\r\nAfter some debugging, found the problem to be in the Profile handlers for Production and Integration. https://github.com/NServiceBus/NServiceBus/blob/master/src/hosting/NServiceBus.Hosting.Windows/Profiles/Handlers/ProductionProfileHandler.cs#L13\r\nwhich creates a new DocumentStore and registers the component without the database we configured.'
1003,'johnsimons','Endpoint name not used when specifying Raven connection string with Url only\nPull request based on #1000 done against develop branch'
1002,'andreasohlund','SQL Server transport crashing\n1. Open the Req/Resp sample and change it so that you using the SqlServer transport.\r\n2. start both endpoints in debug mode (so all the sql tables get created)\r\n3. stop the endpoints\r\n4. start client only and send about 200msgs (confirm they are in server queue)\r\n5.start server\r\n\r\nIn my machine, the server consumes about 100msg and then dies! No exceptions thrown!\r\n'
1001,'johnsimons','SqlServer Transport receives expired messages\nMSMQ and other transports automatically "purge" expired messages from their queues.\r\n\r\nFor the SQLServer transport we have to do it manually.\r\n'
1000,'','Endpoint name not used when specifying Raven connection string with Url only\nAccording to the [docs](http://support.nservicebus.com/customer/portal/articles/859362-using-ravendb-in-nservicebus-%E2%80%93-connecting)  the expected behaviour is for the end point name to be used if the connection string specified the server url only.\r\n\r\nThe issue affects 4.0 (develop) as well, but this merge request is on master hoping there would be a 3.3.6 sometime soon'
999,'','Add ability to restrict executed transports to Integration tests\nWhen working on the implementation of a transport/object builder it would be great if there was some way to restrict the executed transports/object builders at a central point.\r\n\r\nE.g. like maximum parallel tests in the environment configuration or in the app.config'
998,'',"ActiveMQ scheduler does not support DTC transactions\nCurrently the ActiveMQ server does not support DTC transactions for deferred messages.\r\nThey say by design but I don't really agree: http://activemq.2283324.n4.nabble.com/AMQ-SCHEDULED-DELAY-and-transactional-boundaries-td4658339.html\r\n\r\nShall we use timeout manager based deferred messages in case DTC is enabled?"
997,'johnsimons','Remove the asmx web services support\nRemove project and nuget package'
996,'',"IWantCustomLogging should have a different naming for the Init method\nIn Version 5 `IWantCustomLogging` is obsoleted. The replacement is to use `IWantCustomInitialization` and configure logging before calling `Configure.With`\r\n\r\n---\r\n\r\nAs it is now the `IWantCustomLogging` and `IWantCustomInitialization` both specify an `Init`-method. This got my service to start working as expected when I implemented the `IWantCustomLogging` interface all though I think it shouldn't. To make things clearer the method should have different names. I think the interface for `IWantCustomLogging` should be like\r\n\r\n    public interface IWantCustomLogging\r\n    {\r\n        void SetupLogging();\r\n    }\r\n\r\nLink to discussion on mailgroup between me and @andreasohlund : http://tech.groups.yahoo.com/group/nservicebus/message/17903"
995,'','License question\nHi,\r\n\r\nI remember that the NServiceBus was open source, but the current official release from vendor is no more free. What is about the version in github? Will it be free?\r\n\r\nAs developer I may keep going with commercial version, but what are the arguments for the free version here compared to the commercial?\r\n\r\nI was thinking of using NServiceBus, but now am a bit confused :-)\r\n\r\nNote: Can the version here compete with BizTalk? I liked to compare both.\r\n\r\nThanks, Lothar'
994,'','NServiceBus Ltd. Installation success or error status: 1602.\n3.3.4 Installer fails on servers with existing MSMQ queues installed by other products. (in this case K2 workflow) \r\n\r\nAfter the NSB installer completes, the following error message is written to the event log:\r\n\r\n**Installation success or error status: 1602**\r\n\r\nLoss of data and configuration occurred:\r\n\r\n* Existing Queues for the other product (K2) were deleted.\r\n* MSMQ feature configuration was removed, namely: "Directory Service Integration" \r\n\r\nDetail of the event log:\r\n```\r\nWindows Installer installed the product. Product Name: NServiceBus 3.3.4. Product Version: 3.3.4. Product Language: 1033. Manufacturer: NServiceBus Ltd. Installation success or error status: 1602.\r\n```\r\n\r\n* I can\'t find any details in regards to this error (1602), here on GitHub, Google or otherwise?\r\n* Does NSB install alongside other products that use MSMQ or does it assume its the only user of MSMQ on the given machine?\r\n\r\nPlease advise. \r\n\r\nRegards,\r\nAndrew Stone.\r\n \r\n'
993,'andreasohlund','MessageIntent is not saved in timeout data\nIf a message with intent of **Subscribe** arrives at a publisher and for some reason the subscription storage is down.\r\n1. The message is retried Maxretires\r\n2. Then SLR kicks in and stored the message in the timeout store\r\n3. The message data stored in the timeout store does not contain the _MessageIntent_\r\n4. So when message is retried again the MessageIntent is reset to **Send**\r\n\r\nThe _MessageIntent_ should be saved in the timeoutdata.'
992,'johnsimons','Replaced Apache.NMS.ActiveMQ assembly by custom build\nThe current released version of Apache.NMS.ActiveMQ has issues with DTC support.\r\n\r\nThis fixes the transaction acceptance tests'
991,'','Support AAA syntax for the handler testing framework\n'
990,'johnsimons','Consistent naming of transports\n* Rename all transports to NServiceBus.Transports.{Name of transport}.dll\r\n* NuGet stays the same as today eg. NServiceBus.ActiveMQ\r\n* Move the transport relevant interfaces to a NServiceBus.Transports namespace \r\n-ISendMessages\r\n-IDequeueStrategy\r\n-IDeferMessages\r\n-IPublishMessages\r\n-IManageSubscriptions\r\n\r\n\r\nShould we move the msmq support as well to be consistent? (still in the core but same NS)'
989,'','Proper disposal of MD5CryptoServiceProvider\n'
988,'',"Component based versioning\nThe next major release is not to far away. I asked myself if it would be better to support component based versioning. Let's consider an example. Currently we have some issues with the NMS transport implementation. Should this stop the release of NSB 4.0? I don't think so. So it would be nice if the core product could be versioned with a core version for example 4 and the components could have their own version. We have done something similar in appccelerate. See here:\r\n\r\nhttps://github.com/danielmarbach/appccelerate"
986,'johnsimons','Update to Castle 3.2\n'
985,'andreasohlund','Using defer and delete command data to delete saga unique identity. Fixe...\n...s #983'
984,'','Add acceptance test for saga uniqueness\nThink it would be wise to add an acceptance test for the saga uniqueness feature'
983,'',"Potential NonAuthoritiveInformation issues when sagas are completing\nI hunted down today for several ours an issues which occurred in our testing environment. When using DTC the commit phase happens asynchronous. The current saga persister for RavenDB does delete the unique identifiers with the \r\n\r\nSession.Advanced.DocumentStore.DatabaseCommands.Delete(id, null);\r\n\r\nThis can cause RavenDB to reject the completion because it detects NonAuthoritiveInformation. The problem is described in this thread with the PUT command:\r\n\r\nhttps://groups.google.com/forum/?fromgroups=#!topic/ravendb/cxh4sHDNLN4\r\n\r\nUsing the DatabaseCommands.Delete can cause the TransactionScope to never complete. Therefore ravendb will be unable to delete the unique properties and all other operations happening in the same transaction.\r\n\r\nInstead we should use the Defer command:\r\n\r\nSession.Advanced.Defer(new DeleteCommandData { Key = id });\r\n\r\nthis will not stop the transaction scope to complete and actually is much safer because the defer can participate in the transaction and in case of failure rolls back. In my point of view the current implementation could loose unique identifiers for sagas during production. I'll send a pull request for that. Please review."
982,'johnsimons',"SqlServer transport doesn't handle supressed DTC correctly\nThis test show it:\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/AcceptanceTests/NServiceBus.AcceptanceTests/Transactions/When_receiving_a_message_with_dtc_disabled.cs#L19\r\n\r\nThe fix is to detect if the DTC is supressed and use a plain ado.net TX instread.\r\n\r\nWe might have to fix the polling dequeue strategy as well or remove it since sql is the only polling transport ATM"
981,'','Potential ActiveMQ transaction issues\nI\'ve just pushed 2 tests that fails for ActiveMQ\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/25b22b445964379b59b6590bc195eced847e3fc3/AcceptanceTests/NServiceBus.AcceptanceTests/Transactions/When_receiving_a_message_with_dtc_disabled.cs#L13\r\n\r\nThis fails on Active for some reason.\r\n\r\nThis one seems to imply that there is no RM enlisted when the handlers are invoke?\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/25b22b445964379b59b6590bc195eced847e3fc3/AcceptanceTests/NServiceBus.AcceptanceTests/Transactions/When_receiving_a_message_with_dtc_enabled.cs\r\n\r\nLook at "Basic_assumptions" in the same file to see if I\'ve missed something?\r\n\r\nPlease run on your end and see it it fails'
980,'johnsimons','DisableCompatibilityWithNSB2 should be removed for v4\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/encryption/NServiceBus.Encryption/Config/ConfigureEncryption.cs\r\n\r\nSince the upgrade path from v2 to v4 is via v3 we should not need this right?'
979,'johnsimons','Update to AutoFac 3.0.1\n'
978,'johnsimons','Worker restarts can cause extra ready messages in the distributor storage\n--\r\nThis can happen for at least the following use cases:\r\n\r\n## Worker auto subscribing at start up\r\n\r\nIf a worker auto subscribes to it self at start up the following can happen\r\n1. Distributor pops a message from storage and forwards the sub request to worker\r\n2. Worker start up message arrives, storage is cleared and new ready messages are added\r\n3. Worker processed the subscription and sends back a ready message\r\n4. Distributor now contains N+1 Ready messages where N is the number of threads in the worker\r\n\r\n## Worker restarts with messages in its input Q\r\n1. Worker stops\r\n2. N messages will arrive at the queue where N is the number of threads\r\n3. Worker restarts and sends a Control message\r\n4. Worker processed the old messages and sends ready messages\r\n5. Distributor clear the storage and add N ready messages\r\n6. Ready messages arrives to distributor and is added to storage\r\n7. Storage now contains approx N*2 readymessages for the worker\r\n\r\nThe proposed solutions is:\r\n\r\n1. Worker attaches a "session" id to each control/readymessage. This id reset on restarts. To avoid race conditions this should probably be the UtcNow at the worker\r\n2. Distributor stores this value in the storage Q\r\n3. Distributor keeps the value and worker address in a dictionary in memory\r\n4. Distributor forwards this value as a header when sending work to workers\r\n5. Workers flows the session id of the incoming message to the resulting ready message\r\n6. Distributor discards readymessages that belongs to and old session id (per worker)\r\n\r\n'
977,'johnsimons','Trim down Raven fluent API\nBecause we now support passing `IDocumentStore` to the RavenPersistence fluent API, I wonder if we should remove:\r\n* `DisableRavenRequestCompression(this Configure config)`\r\n* `EnableRavenRequestsWithUnsafeAuthenticatedConnectionSharingAndPreAuthenticate(this Configure config)`\r\n* `DefineRavenTagNameConvention(Func<Type, string> convention)`\r\n\r\nThoughts?'
976,'johnsimons','Create ITransportDefinition for Azure transports\nI think we need 2:\r\n- One that calls `AzureServiceBusMessageQueue`\r\n- And another of `AzureMessageQueue`\r\n\r\n@yvesgoeleven is this right?\r\n\r\nWhat should they be called?'
975,'johnsimons','Events are not received by saga if there is a timeout for the same message type\nIf a saga Implements IHandleMessage<> and IHandleTimeouts<> for the same event message type, the event will not be subscribed and received.\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/pull/974 demonstrates the problem\r\n\r\nThe test will fail with the error that the event was not received. When removing IHandleTimeout<> it will fail with Timeout not received.'
974,'johnsimons','Added saga timeout integration test\n'
973,'','Better support for waits in the acceptance test framework\nTo day we do\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/AcceptanceTests/NServiceBus.AcceptanceTests/Sagas/When_receiving_a_message_that_should_complete_saga.cs#L69\r\n\r\nBut I would like to have a way to do;\r\n\r\nContext.WaitFor(c=>c.SomeProperty == someValue,bus=> bus.Send(new X))\r\n\r\n@SimonCropp What do you think? (I know that Fody has some "OnPropertyChang\'ish" magic)'
972,'','Add better support for RabbitMQ failovers\n*Support a ActiveMQ style lists of failover brokers \r\n\r\nhttp://activemq.apache.org/failover-transport-reference.html\r\nAnother option is the Masstransit way:\r\n\r\nhttps://gist.github.com/phatboyg/4762944\r\n\r\n* Detect connection failure and execute the failover\r\n\r\n\r\n\r\n'
971,'johnsimons','update Obsolete\nfix for #969\r\n-enable injection of editorbrowsable\r\n-improve doco a bit\r\n-bump Fody\r\n-remove existing editorbrowsable attributes\r\n'
970,'','Fixed that Raven sessions were not disposed.\nCloses https://github.com/NServiceBus/NServiceBus/issues/965'
969,'johnsimons','Hide obsolete members\nI had a chat with @johnsimons about obsolete members polluting intellisense. \r\n\r\nSee the screen shot.\r\n\r\nSo I added a feature to Obsolete.Fody that will apply [EditorBrowsable(EditorBrowsableState.Advanced)] to obsolete members https://github.com/Fody/Obsolete#hideobsoletemembers\r\n\r\nIt is off by default. Do you guys want a pull request that enables this for NSB?\r\n\r\n![ObsoleteIntellisense](https://f.cloud.github.com/assets/122666/147267/536028b8-74a9-11e2-9eb2-5cd400a51925.png)\r\n\r\n'
968,'johnsimons','Satelites are never stopped\nSateliteLauncher wil never stop any satelites, because SatelliteContext.Started is never assigned true.'
967,'','Added Missing file\n'
966,'','Added some saga integration tests\nDemonstrates problem for https://github.com/NServiceBus/NServiceBus/issues/965'
965,'','When updating a saga type a 2nd time raven db throw error that etag is outdated\nWith RavenDB 2.0-2261 we get errors on updating a second saga. When completing the saga they are not removed from Raven starting from the second saga that is completed.\r\n\r\nRaven Log:\r\n- Error on request PUT attempted on document \'TestSaga/7f929641-d505-4d25-89ff-a162015c4c82\' using a non current etag\r\n\r\nThe following integration test demonstrates the problem:\r\n\r\n    public class When_receiving_a_message_that_completes_the_saga : NServiceBusIntegrationTest\r\n    {\r\n        static Guid IdThatSagaIsCorrelatedOn = Guid.NewGuid();\r\n        static Guid IdThatSagaIsCorrelatedOn2 = Guid.NewGuid();\r\n\r\n        [Test]\r\n        public void Should_hydrate_and_complete_the_existing_instance()\r\n        {\r\n            Scenario.Define(() => new Context { SendAnotherMessage = false })\r\n                    .WithEndpoint<SagaEndpoint>()\r\n                    .Done(c => c.Complete)\r\n                    .Repeat(r => r.For(Transports.Msmq))\r\n                    .Should(c =>\r\n                    {\r\n                        Assert.IsNull(c.UnhandledException);\r\n                        Assert.AreEqual(1, c.CompletedCount);\r\n                    })\r\n\r\n                    .Run();\r\n        }\r\n\r\n        [Test]\r\n        public void Should_ignore_messages_afterwards()\r\n        {\r\n            Scenario.Define(() => new Context { SendAnotherMessage = true })\r\n                    .WithEndpoint<SagaEndpoint>()\r\n                    .Done(c => c.Complete)\r\n                    .Repeat(r => r.For(Transports.Msmq))\r\n                    .Should(c =>\r\n                    {\r\n                        Assert.IsNull(c.UnhandledException);\r\n                        Assert.AreEqual(2, c.CompletedCount);\r\n                        Assert.AreEqual(0, c.OtherMessageCount, "AnotheeMessage should not be delivered to the saga after completion");\r\n                    })\r\n\r\n                    .Run();\r\n        }\r\n\r\n        public class Context : ScenarioContext\r\n        {\r\n            public int CompletedCount { get; set; }\r\n            public bool SendAnotherMessage { get; set; }\r\n            public int OtherMessageCount { get; set; }\r\n            public bool Complete { get; set; }\r\n            public Exception UnhandledException { get; set; }\r\n            public ManualResetEvent synchronizationEvent = new ManualResetEvent(false);\r\n        }\r\n\r\n        public class SagaEndpoint : EndpointBuilder\r\n        {\r\n            public SagaEndpoint()\r\n            {\r\n                EndpointSetup<DefaultServer>(c => c.RavenSagaPersister().UnicastBus().LoadMessageHandlers<First<TestSaga>>())\r\n                    .When<Context>((bus, context) =>\r\n                        {\r\n                            try\r\n                            {\r\n                                bus.SendLocal(new StartSagaMessage { SomeId = IdThatSagaIsCorrelatedOn });\r\n                                WaitForSynchronizationEvent(context, "First StartSagaMessage not received");\r\n\r\n                                bus.SendLocal(new CompleteSagaMessage { SomeId = IdThatSagaIsCorrelatedOn });\r\n                                WaitForSynchronizationEvent(context, "First CompleteSagaMessage not received");\r\n\r\n                                if (context.SendAnotherMessage)\r\n                                {\r\n                                    bus.SendLocal(new StartSagaMessage { SomeId = IdThatSagaIsCorrelatedOn2 });\r\n                                    WaitForSynchronizationEvent(context, "Second StartSagaMessage not received");\r\n\r\n                                    bus.SendLocal(new CompleteSagaMessage { SomeId = IdThatSagaIsCorrelatedOn2 });\r\n                                    WaitForSynchronizationEvent(context, "Second CompleteSagaMessage not received");\r\n\r\n                                    bus.SendLocal(new AnotherMessage { SomeId = IdThatSagaIsCorrelatedOn });\r\n                                    WaitForSynchronizationEvent(context, "First AnotherMessage not received");\r\n\r\n                                    bus.SendLocal(new AnotherMessage { SomeId = IdThatSagaIsCorrelatedOn2 });\r\n                                    WaitForSynchronizationEvent(context, "Second AnotherMessage not received");\r\n                                }\r\n                            }\r\n                            finally\r\n                            {\r\n                                context.Complete = true;\r\n                            }\r\n                        });\r\n            }\r\n\r\n            static void WaitForSynchronizationEvent(Context context, string message)\r\n            {\r\n                if (!context.synchronizationEvent.WaitOne(15000))\r\n                {\r\n                    Assert.Fail(message);\r\n                }\r\n\r\n                context.synchronizationEvent.Reset();\r\n            }\r\n\r\n            public class TestSaga : Saga<TestSagaData>, IAmStartedByMessages<StartSagaMessage>, IHandleMessages<CompleteSagaMessage>, IHandleMessages<AnotherMessage>\r\n            {\r\n                public Context Context { get; set; }\r\n                public void Handle(StartSagaMessage message)\r\n                {\r\n                    Data.SomeId = message.SomeId;\r\n                    Context.synchronizationEvent.Set();\r\n                }\r\n\r\n                public override void ConfigureHowToFindSaga()\r\n                {\r\n                    ConfigureMapping<StartSagaMessage>(m=>m.SomeId)\r\n                        .ToSaga(s=>s.SomeId);\r\n                    ConfigureMapping<CompleteSagaMessage>(m => m.SomeId)\r\n                        .ToSaga(s => s.SomeId);\r\n                    ConfigureMapping<AnotherMessage>(m => m.SomeId)\r\n                        .ToSaga(s => s.SomeId);\r\n                }\r\n\r\n                public void Handle(CompleteSagaMessage message)\r\n                {\r\n                    Context.CompletedCount = Context.CompletedCount + 1;\r\n                    this.MarkAsComplete();\r\n                    Context.synchronizationEvent.Set();\r\n                }\r\n\r\n                public void Handle(AnotherMessage message)\r\n                {\r\n                    Context.OtherMessageCount = Context.OtherMessageCount + 1;\r\n                }\r\n\r\n            }\r\n\r\n            public class TestSagaData : IContainSagaData\r\n            {\r\n                public Guid Id { get; set; }\r\n                public string Originator { get; set; }\r\n                public string OriginalMessageId { get; set; }\r\n                public Guid SomeId { get; set; }\r\n            }\r\n        }\r\n\r\n        public class CompletionHandler : IHandleMessages<AnotherMessage>\r\n        {\r\n            public Context Context { get; set; }\r\n            public void Handle(AnotherMessage message)\r\n            {\r\n                Context.synchronizationEvent.Set();\r\n            }\r\n        }\r\n\r\n        [Serializable]\r\n        public class StartSagaMessage : ICommand\r\n        {\r\n            public Guid SomeId { get; set; }\r\n        }\r\n\r\n        [Serializable]\r\n        public class CompleteSagaMessage : ICommand\r\n        {\r\n            public Guid SomeId { get; set; }\r\n        }\r\n\r\n        [Serializable]\r\n        public class AnotherMessage : ICommand\r\n        {\r\n            public Guid SomeId { get; set; }\r\n        }\r\n    }'
964,'','Fix for issue #949\nIgnore null objects in enumerables'
963,'','IDeferMessage implementation of ActiveMQ must delete messages on request\nClearDeferredMessages(string headerKey, string headerValue)\r\n\r\nis not yet implemented by ActiveMQ'
962,'','Create new Transaction when sending message out side of a transaction.\nSending a message within a transaction is much faster when using ActiveMQ in DTC mode. \r\n\r\nTherefore we should create a new TransactionScope when sending a message outside of a transaction.'
961,'johnsimons','Fixed Transaction handling of ActiveMQ\n- The introduction of EndProcessMessage has broken the transaction handling. Fixed in this version and refactored message receive\r\n- Fixed shutdown of ActiveMQ transport\r\n- Added stop to ITransport to provide deterministic stop of the dequeue strategies. Fixes #960\r\n- Fixed Azure.Logging.Log4Net assembly references'
960,'','Transport shutdown is not deterninistic\nTransactionalTransport currently calls receiver.Stop in the Dispose method.\r\n\r\nDispose is called by the IoC container. If the transport has other disposable objects they can get diposed by the container before the the receiver is stopped. This leads to a not deterministic shutdown.\r\n\r\nRelated to #950 '
959,'',"NSB 3.3.5 not working with Autofac 3.0\nUpdated to AutoFac 3.0 and NServiceBus fails on startup.  Very easy to reproduce.\r\n\r\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Server, IWantCustomInitialization\r\n    {\r\n        public void Init()\r\n        {\r\n            Configure.With().AutofacBuilder();\r\n        }\r\n    }\r\n\r\nFull solution (failing) here: https://github.com/mj1856/NServiceBusAutofacBug\r\n\r\nStack trace is as follows:\r\n\r\n    2013-02-08 11:21:08,994 [1] FATAL NServiceBus.Hosting.GenericHost [(null)] <(null)> - System.MissingMethodException: Method not found: 'Autofac.Builder.IRegistrationBuilder`3<!0,!1,!2> Autofac.Builder.IRegistrationBuilder`3.PropertiesAutowired(Autofac.PropertyWiringFlags)'.\r\n       at NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.NServiceBus.ObjectBuilder.Common.IContainer.Configure(Type component, DependencyLifecycle dependencyLifecycle)\r\n       at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent[T](DependencyLifecycle instanceLifecycle) in c:\\BuildAgent\\work\\nsb.master_6\\src\\impl\\ObjectBuilder.Common\\ObjectBuilder.Common\\CommonObjectBuilder.cs:line 63\r\n       at NServiceBus.ObjectBuilder.Common.Config.ConfigureCommon.With(Configure config, IContainer container) in c:\\BuildAgent\\work\\nsb.master_6\\src\\impl\\ObjectBuilder.Common\\ObjectBuilder.Common.Config\\ConfigureCommon.cs:line 22\r\n       at NServiceBus.ConfigureAutofacBuilder.AutofacBuilder(Configure config, ILifetimeScope rootScope)\r\n       at NServiceBus.ConfigureAutofacBuilder.AutofacBuilder(Configure config, IContainer container)\r\n       at NServiceBus.ConfigureAutofacBuilder.AutofacBuilder(Configure config)\r\n       at NServiceBusAutofacBug.EndpointConfig.Init() in c:\\Dev\\test\\NServiceBusAutofacBug\\NServiceBusAutofacBug\\EndpointConfig.cs:line 9\r\n       at NServiceBus.Hosting.GenericHost.PerformConfiguration() in c:\\BuildAgent\\work\\nsb.master_6\\src\\hosting\\NServiceBus.Hosting\\GenericHost.cs:line 102\r\n       at NServiceBus.Hosting.GenericHost.Start() in c:\\BuildAgent\\work\\nsb.master_6\\src\\hosting\\NServiceBus.Hosting\\GenericHost.cs:line 30\r\n"
958,'andreasohlund','SLR requests should be sent to the master node when scaled out\nWhen a master node is specified the retry requests should be routed to the retries queue on the masternode'
957,'','Timeouts set by a worker should be routed to the distributor when expired\nTo better load balance timeouts all timeout requests made by workers should be routed to the distributor on expiry'
956,'andreasohlund','The timeoutmanager should not create queues and run if a remote TM is configured\nThis applies to the following use cases:\r\n\r\n1. A master node is defined -> timeouts should go to the master node\r\n\r\n2. A explicit TM address is specified to the user'
955,'andreasohlund','Timeout requests should be routed to the timeoutmanager on the masternode if there is a masternode defined\nWhen a worker requests a timeout that timeout should go to the timeoutmanager on the masternode'
954,'andreasohlund',"Calls to bus.Defer and Saga.RequestUtcTimeouts causes ready messages to build up in the distributor\nWhen a timeout is requested the timeout manager sends the message directly back to the worker when time is up. Since it won't pass through the distributor no ready message will be removed. When the messages is handled successfully by the worker a ReadyMessage will be sent to the distributor causing it to increase by one each time the worker processed a timeout."
953,'','Concurrent deletes in the databus clean up bring down the azure worker process\nMore info: http://stackoverflow.com/questions/14679403/nservicebus-worker-role-in-azure-restarting-due-to-databus-configuration-issue'
952,'johnsimons','Programmatically add extra mapping to MessageEndpointMappings.fails\nThis should work:\r\n```c#\r\nclass UnicastBusConfigOverride : IProvideConfiguration<UnicastBusConfig>\r\n    {\r\n        public UnicastBusConfig GetConfiguration()\r\n        {\r\n            var unicastBusConfig = Configure.ConfigurationSource.GetConfiguration<UnicastBusConfig>();\r\n            unicastBusConfig.MessageEndpointMappings.Add(new MessageEndpointMapping() { Endpoint = "MyQueue", Messages = "MyMessages" });\r\n\r\n            return unicastBusConfig;\r\n        }\r\n    }\r\n```\r\nunfortunately the `MessageEndpointMappingCollection` is marked as **readonly** and because of it we get an exception:\r\n```\r\nException when starting endpoint, error has been logged. Reason: The configuration is read only.\r\n```\r\n'
951,'johnsimons','The configuration for transaction related settings is a mess\nWe split the settings into 2 modes of usage:\r\n#### Standard mode\r\n```c#\r\nConfigure.Transactions.Enable()\r\nConfigure.Transactions.Disable()\r\n```\r\n#### Advance mode\r\n```c#\r\nConfigure.Transactions.Advanced(s => {\r\n  s.IsolationLevel(IsolationLevel.ReadCommitted)\r\n    .DefaultTimeout(TimeSpan.fromSeconds(30))\r\n    .DisableDistributedTransations()\r\n    .DoNotWrapHandlersExecutionInATransactionScope();\r\n} )\r\n```\r\n\r\nThe Volatile setting is exposed at the Endpoint level, eg:\r\n```c#\r\nEndpoint.Volatile = true;\r\n```\r\nor\r\n```c#\r\nConfigure.Endpoint.AsVolatile();\r\nConfigure.Endpoint.AsNonVolatile();\r\n```'
950,'','ActiveMq acceptance test for transactions fail randomly on buildserver\nIt seems like this test fails now and then on the buildserver (only for activemq)\r\n\r\nhttp://builds.nservicebus.com/viewLog.html?tab=buildLog&logTab=tree&filter=debug&expand=all&buildId=1304#_focus=427\r\n\r\nAny ideas? (might be issues with the test it self)'
949,'johnsimons','EncryptionMessageMutator fails on null objects\nTrying to send a message containing IEnumerable<int?> (actually typed collection which can contain nulls) with at least one null value fails in EncryptionMessageMutator. It tries to do GetType() on value which of course fails on null.\r\nTested with 3.3.3 and 3.3.4'
948,'','Remove IUnicastBus\nReplacement is `IBus`'
947,'',"ActiveMQ timeouts not waiting for the timeout\nIn [this](https://github.com/NServiceBus/NServiceBus/tree/develop/Samples/Messaging.ActiveMQ) sample I'm using [timeouts in a saga](https://github.com/NServiceBus/NServiceBus/blob/develop/Samples/Messaging.ActiveMQ/MyServer/ProcessOrderSaga.cs#L20), it should wait for 30secs.\r\nBut when I run the sample it looks like the timeout is pretty much fired straight away."
946,'johnsimons',"Embed Raven Client instead of ilmerging + internalize\nAt the moment we are ilmerging + internalizing Raven Client in NServiceBus.Core.dll.\r\nThe plan for after v4 is to split all the Raven stuff into its own assembly + nuget and also to not ilmerge it.\r\n\r\nBut for v4 we still want to provide Raven client out of the box.\r\nWe now have a use case where we need to be able to pass an external IDocumentStore to the NSB framework.\r\nSo we were wondering if Costura could help us here.\r\nSo we would not ilmerge/internalized the Raven client but instead embed it into  NServiceBus.Core.dll and then if the Raven client is already used by the user then we would use that one otherwise we would extract the embedded one and use it.\r\n\r\nHere is what needs to be done:\r\n- Setup Costura to embed all the assemblies required for Raven Client;\r\n- Update build script not to ilmerge Raven client\r\n- Change this method to pass a IDocumentStore instead of dynamic(the dynamic doesn't work anyway) "
945,'andreasohlund','Update to AutoFac 3.0\nhttp://www.paraesthesia.com/archive/2013/01/30/autofac-3-0-released.aspx'
944,'','Add better support for Rabbit connection management strategies\nWe currently use 1 connection per endpoint but we should look at making this at least 1 for sends and 1 for receives\r\n\r\nhttps://groups.google.com/forum/m/?fromgroups#!topic/rabbitmq-discuss/-xO1tQafmM4'
943,'','Enable advanced saga mapping\nThe method:\r\n\r\n    ConfigureMapping<OrderAccepted>(m => m.OrderId)\r\n       .ToSaga(s => s.OrderId);\r\n\r\nBoth arguments are of type Expression<Func<T>>. If we changed the message argument to use a Func<T> we could allow for more advanced message mappings. For example, have a method on the\r\nmessage that returns the concat of 2 fields and use that to find the saga.'
942,'',"MVC4 integration and .net 4.5 installed\nIt looks like that if you have .net 4.5 installed on your machine this line of code doesn't work anymore!\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Callback.cs#L116\r\n\r\nThe `callback.Target` points to a inner class of `AsyncController`, not the `AsyncController` instance! I think is because of the use of a state machine in c# 5.\r\n\r\nI don't really see how we can fix this, anyone? "
941,'','exit instead of break??\n'
940,'','Support for NLog LogManager.Configuration\nfix for #813'
939,'','Azure Entrypoint has possible enumerable bug?\nlooking at https://github.com/NServiceBus/NServiceBus/blob/develop/src/azure/Hosting/NServiceBus.Hosting.Azure/RoleHost/Entrypoint.cs\r\n\r\n 1. ScanAssembliesForEndpoints returns an IEnumerable \r\n 2. Which is passed to ValidateEndpoints\r\n 3. ValidateEndpoints does multiple enumerations on the same instance\r\n\r\n'
938,'johnsimons','Remove TimeoutMessage\nfix for issue #908'
937,'johnsimons','Need to add leading zeros to pre-release nuget packages\nBecause:\r\nv1.0.0-alpha2> v1.0.0-alpha10> v1.0.0-alpha02\r\n\r\nRead all about it here (rule 2 & 3):\r\nhttp://msdn.microsoft.com/en-us/magazine/jj851071.aspx'
936,'johnsimons',"We need an unistall nuget script to unload PS module\nIf we try to upgrade our packages, we get the following error:\r\n```\r\nPM> Install-Package NServiceBus.Host -IncludePrerelease\r\nAttempting to resolve dependency 'T4Scaffolding.Core'.\r\nAttempting to resolve dependency 'NServiceBus (= 4.0.0-unstable2652)'.\r\nAttempting to resolve dependency 'NServiceBus.Interfaces (= 4.0.0-unstable2652)'.\r\nYou are downloading NServiceBus.Interfaces from NServiceBus Ltd, the license agreement to which is available at http://nservicebus.com/license.aspx. Check the package for additional dependencies, which may come with their own license agreement(s). Your use of the package and dependencies constitutes your acceptance of their license agreements. If you do not accept the license agreement(s), then delete the relevant components from your device.\r\nSuccessfully installed 'NServiceBus.Interfaces 4.0.0-unstable2652'.\r\nYou are downloading NServiceBus from NServiceBus Ltd, the license agreement to which is available at http://nservicebus.com/license.aspx. Check the package for additional dependencies, which may come with their own license agreement(s). Your use of the package and dependencies constitutes your acceptance of their license agreements. If you do not accept the license agreement(s), then delete the relevant components from your device.\r\nSuccessfully installed 'NServiceBus 4.0.0-unstable2652'.\r\n\r\nType 'get-help about_NServiceBus' to see all available NServiceBus commands.\r\n\r\nYou are downloading NServiceBus.Host from NServiceBus Ltd, the license agreement to which is available at http://nservicebus.com/license.aspx. Check the package for additional dependencies, which may come with their own license agreement(s). Your use of the package and dependencies constitutes your acceptance of their license agreements. If you do not accept the license agreement(s), then delete the relevant components from your device.\r\nSuccessfully installed 'NServiceBus.Host 4.0.0-unstable2652'.\r\nSuccessfully removed 'NServiceBus.Host 4.0.0-unstable2649' from ServiceBus.Management.\r\nSuccessfully removed 'NServiceBus 4.0.0-unstable2649' from ServiceBus.Management.\r\nSuccessfully removed 'NServiceBus.Interfaces 4.0.0-unstable2649' from ServiceBus.Management.\r\nSuccessfully added 'NServiceBus.Interfaces 4.0.0-unstable2652' to ServiceBus.Management.\r\nSuccessfully added 'NServiceBus 4.0.0-unstable2652' to ServiceBus.Management.\r\nSuccessfully added 'NServiceBus.Host 4.0.0-unstable2652' to ServiceBus.Management.\r\nSuccessfully uninstalled 'NServiceBus.Host 4.0.0-unstable2649'.\r\nAccess to the path 'C:\\Projects\\ServiceBus.Management\\packages\\NServiceBus.4.0.0-unstable2649\\tools\\NServiceBus.PowerShell.dll' is denied.\r\nThe directory is not empty.\r\n\r\nSuccessfully uninstalled 'NServiceBus 4.0.0-unstable2649'.\r\nSuccessfully uninstalled 'NServiceBus.Interfaces 4.0.0-unstable2649'.\r\nOne or more packages could not be completely uninstalled: NServiceBus.4.0.0-unstable2649. Restart Visual Studio to finish uninstall.\r\n```"
935,'johnsimons','Added XSD for configuration file\n'
934,'johnsimons',"Xml serialization fails when message has a Char property with a illegal character\nWe need to excape char properties as well\r\n\r\nTo reproduce:\r\n\r\n```\r\n\r\n [Test]\r\n        public void Serialize_ShouldSucceed_WhenCharContainsXmlSpecialCharacters()\r\n        {\r\n            // Arrange\r\n            var serializer = XmlMessageSerializerInit<TestMessageWithChar>();\r\n\r\n            var charMessage = new TestMessageWithChar { Character = '<' };\r\n\r\n            Stream stream = new MemoryStream();\r\n\r\n            // Act\r\n            serializer.Serialize(new object[] { charMessage }, stream);\r\n\r\n            stream.Position = 0;\r\n\r\n            object[] messageDeserialized = serializer.Deserialize(stream);\r\n\r\n            // Assert\r\n            Assert.IsNotNull(messageDeserialized);\r\n\r\n            Assert.AreEqual(1, messageDeserialized.Length);\r\n            \r\n            Assert.AreEqual(charMessage.Character, ((TestMessageWithChar)messageDeserialized[0]).Character);\r\n        }\r\n\r\n```"
933,'johnsimons','Testing message headers are not set\nThe following test should pass and it doesn\'t:\r\n```c#\r\n    [TestFixture]\r\n    public class HeaderAreSet\r\n    {\r\n        [TestFixtureSetUp]\r\n        public void TestFixtureSetUp()\r\n        {\r\n            Test.Initialize();\r\n        }\r\n\r\n        [Test]\r\n        public void SendMessageWithHeaderOne()\r\n        {\r\n            var command = new MyCommand();\r\n\r\n            Test.Handler<MyCommandHandler>()\r\n                .SetIncomingHeader("UserToken", "Header1")\r\n                .OnMessage(command);\r\n\r\n            Assert.AreEqual("Header1", command.Header);\r\n        }\r\n\r\n        [Test]\r\n        public void SendMessageWithHeaderTwo()\r\n        {\r\n            var command = new MyCommand();\r\n\r\n            Test.Handler<MyCommandHandler>()\r\n                .SetIncomingHeader("UserToken", "Header2")\r\n                .OnMessage(command);\r\n\r\n            Assert.AreEqual("Header2", command.Header);\r\n\r\n        }\r\n\r\n        public class MyCommand : ICommand\r\n        {\r\n            public string Header { get; set; }\r\n        }\r\n\r\n        public class MyCommandHandler : IHandleMessages<MyCommand>\r\n        {\r\n            public void Handle(MyCommand message)\r\n            {\r\n                message.Header = message.GetHeader("UserToken");\r\n            }\r\n        }\r\n    }\r\n```'
932,'andreasohlund','Apply consistent UseTransport to all transports\nFor example FtpTransport does not use ITransportDefinition.'
931,'johnsimons','Licence validation should *not* run every 5 minutes\nI noticed some instability in one of my generic host implementations...  A hard to find temporal problem...\r\n\r\nYesterday I noticed some suspicious exception activity generated by  Rhino Licencing...  Today I have looked a bit deeper. \r\n\r\nThe licencing code is **running every five minutes on a timer embedded in  Rhino.Licensing.AbstractLicenseValidator** to cut a long story short this causing unhandled  exceptions on thread pool threads.  Worst case it appears to chew up 12 pool threads while network requests are failing (the number of time servers).\r\n\r\nIt crops up again as the timer elapses 5 minutes later. \r\n\r\nThere is a method available on the abstract class to disable the timer and thus the code will **run just the once.** \r\n\r\nPlease add DisableFutureChecks() ; to the constructor of the derived type in NSB:  \r\n\r\n```C#\r\ninternal class StringLicenseValidator : AbstractLicenseValidator\r\n    {\r\n\t... \r\n        public StringLicenseValidator(string publicKey, string license)\r\n            : base(publicKey)\r\n        {\r\n            License = license;\r\n            DisableFutureChecks(); \r\n        }\r\n```\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Licensing/LicenseValidator.cs#L19\r\n\r\n**Is all the remote time server stuff really necessary? do you think that someone is really going to fiddle with the local clock in the NSB context?**\r\n\r\nRegards,\r\nAndrew Stone. \r\n\r\n\r\n### To verify\r\nStart an endpoint. Use Fiddler to verify that no network request for time information is performed\r\n'
930,'','Make the ActiveMq shutdown more gracefully\nAllow messages that are being processed to complete before tearing down the connections.'
929,'johnsimons','Pull in the lastest version of Rhino licensing\nTo fix this issue:\r\n\r\nhttps://github.com/ayende/rhino-licensing/issues/5'
928,'','Separate RavenDB support to a separate assembly\nRavenDB has been split out of the core to a separate NServiceBus.RavenDB assembly. This new assembly targets RavenDB 2.5. Please see docs.particular.net for more information\r\n'
927,'','Add support explicit ordering of message mutator\nRelates to https://github.com/NServiceBus/NServiceBus/issues/926\r\n\r\n\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/17912'
926,'','Refactor the message pipeline to use the russian doll model\nTo clean up the way we invoke things we should introduce a russian doll model with behaviours like fubu mvc is doing it. This gives users full flexibility while keeping the currrent defaults with mutators, units of work etc.'
924,'','fix for issue #879\nhttps://github.com/NServiceBus/NServiceBus/issues/879'
923,'','Cannot Disable Raven (3.3.4)\n1. During the Msi Install I cleared the raven install option\r\n\r\n2. When starting my host I call\r\n.DisableRavenInstall()\r\n\r\nRaven is still activated during start-up and is making two networking calls that are conflicting with other processes listening on 8080. \r\n```\r\nGET /databases/[asm.name]/docs/Raven/Replication/Destinations 403 Access denied 78ms \r\nContent-Type\r\napplication/json; charset=utf-8\r\nHost\r\nlocalhost:8080\r\nConnection\r\nKeep-Alive\r\n```\r\n```\r\nGET /docs/Raven/Databases/[asm.name] 403 Access denied 63ms \r\nContent-Type\r\napplication/json; charset=utf-8\r\nlocalhost:8080\r\nConnection\r\nKeep-Alive\r\n```\r\nWhich on the NSB side  looks like this:\r\n\r\n```\r\nSystem.Net.WebException occurred\r\n  Message=The remote server returned an error: (404) Not Found.\r\n   at System.Net.HttpWebRequest.GetResponse()\r\n   at Raven.Client.Connection.HttpJsonRequest.ReadStringInternal(Func`1 getResponse) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonRequest.cs:line 287\r\n```\r\n\r\n**How do I disable Raven?  Or at least stop it making network requests?**\r\n\r\nThis may be the fix https://github.com/NServiceBus/NServiceBus/issues/797\r\n**But its flaged for NSB v4 ? this is no doubt a bug and needs fixing in 3.x**\r\n\r\nRegards,\r\nAndrew Stone. \r\n\r\n'
922,'','Use correct setting for none transactional ActiveMQ configuration\nCloses #918'
921,'andreasohlund',"Don't include servername when creating tables in the sql transport\nJust like with Rabbit, Azure , Active etc the machine name is not relevant since users connect to a central db anyway. "
920,'','Provide an orchestration DSL/API\nTBD\r\n\r\n'
919,'andreasohlund','Improve the saga mapping syntax\nObsolete the old\r\n\r\n```\r\nConfigureMapping<OrderAccepted>(s => s.OrderId,m => m.OrderId)\r\n```\r\n\r\nand introduce a new\r\n\r\n```\r\nConfigureMapping<OrderAccepted>(m => m.OrderId)\r\n       .ToSaga(s => s.OrderId);\r\n```'
918,'','ActiveMQ Transport does not properly acknowledge messages in volatile mode\nIn volatile mode all messages are auto acknowledged even if the message is not succesfully processed. We need to change a few things:\r\n\r\n- change acknowledge mode to IndividualAcknowledge for Volatile mode.\r\n- change ActiveMqMessageReceiver to acknowledge messages manually when TryProcessMessage is successful'
917,'','ActiveMQ connections are not closed on shutdown\nIn the ActiveMQ transport we open connections and sessions in the session factory but we never close and dispose them.\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/issues/913 gives more information for possible solutions'
916,'','Improved performance of AMQ for SupressDTC and Volatile bus configurations\n- Added performance tests for suppressDTC\r\n- Fixed performance test configuration\r\n- Improved performance of AMQ for SupressDTC and Volatile bus configurations'
915,'','NServiceBus.NHibernate is only compatible with Nhibernate 3.3.1 not with 3.3.2\nnuspec now contains NHibernate >=3.3.1.4000 Should be =3.3.1.4000'
914,'','The queue does not exist or you do not have sufficient permissions to perform the operation\nim on version 3.3.4, and running the app give me the error message below, im running it under an admin account..\r\n\r\n<code>\r\n2013-01-23 14:52:55,008 [1] FATAL NServiceBus.Hosting.GenericHost [(null)] <(null)> - System.InvalidOperationE\r\nxception: There is a problem with the input queue: FormatName:DIRECT=OS:XXXXXXXXXXXXXXXXXXXXXXXX.timeoutsdispatcher. See the enclosed exception for details. ---> System.Messaging.MessageQueu\r\neException: The queue does not exist or you do not have sufficient permissions to perform the operation.\r\n   at System.Messaging.MessageQueue.MQCacheableInfo.get_Transactional()\r\n   at System.Messaging.MessageQueue.get_Transactional()\r\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.QueueIsTransactional()\r\n   --- End of inner exception stack trace ---\r\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.QueueIsTransactional()\r\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.Init(Address address, Boolean transactional)\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.NServiceBus.Unicast.Transport.ITransp\r\nort.Start(Address address)\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Unicast.UnicastBus.NServiceBus.IStartableBus.Start(Action startupAction)\r\n   at NServiceBus.Hosting.GenericHost.Start()\r\n\r\nUnhandled Exception: Magnum.StateMachine.StateMachineException: Exception occurred in Topshelf.Internal.Servic\r\neController`1[[NServiceBus.Hosting.Windows.WindowsHost, NServiceBus.Host, Version=3.3.0.0, Culture=neutral, Pu\r\nblicKeyToken=9fc386479f8a226c]] during state Initial while handling OnStart ---> System.Exception: Exception w\r\nhen starting endpoint, error has been logged. Reason: There is a problem with the input queue: FormatName:DIRE\r\nCT=OS:XXXXXXXXXXXXXXXXXXXXXXXX.timeoutsdispatcher. See the enclosed exception fo\r\nr details. ---> System.InvalidOperationException: There is a problem with the input queue: FormatName:DIRECT=O\r\nS:XXXXXXXXXXXXXXXXXXXXXXXX.timeoutsdispatcher. See the enclosed exception for de\r\ntails. ---> System.Messaging.MessageQueueException: The queue does not exist or you do not have sufficient per\r\nmissions to perform the operation.\r\n   at System.Messaging.MessageQueue.MQCacheableInfo.get_Transactional()\r\n   at System.Messaging.MessageQueue.get_Transactional()\r\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.QueueIsTransactional()\r\n   --- End of inner exception stack trace ---\r\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.QueueIsTransactional()\r\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.Init(Address address, Boolean transactional)\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.NServiceBus.Unicast.Transport.ITransp\r\nort.Start(Address address)\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Unicast.UnicastBus.NServiceBus.IStartableBus.Start(Action startupAction)\r\n   at NServiceBus.Hosting.GenericHost.Start()\r\n   --- End of inner exception stack trace ---\r\n   at NServiceBus.Hosting.GenericHost.Start()\r\n   at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter)\r\n   --- End of inner exception stack trace ---\r\n   at Magnum.StateMachine.ExceptionActionDictionary`1.HandleException(T stateMachine, Event event, Object para\r\nmeter, Exception exception)\r\n   at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter)\r\n   at Magnum.StateMachine.State`1.RaiseEvent(T instance, BasicEvent`1 eevent, Object value)\r\n   at Magnum.StateMachine.StateMachine`1.RaiseEvent(Event raised)\r\n   at Topshelf.Internal.ServiceControllerProxy.Start()\r\n   at Topshelf.Internal.ServiceCoordinator.Start()\r\n   at Topshelf.Internal.Hosts.ConsoleHost.Run()\r\n   at NServiceBus.Hosting.Windows.Program.Main(String[] args)\r\n</code>\r\n'
913,'',"ActiveMQ closes connection too early\n@danielmarbach and @remogloor \r\n\r\nWe chasing an issue in the Integration Testing where every time we unload the appdomain when running under ActiveMQ we get an exception!\r\n\r\nI've been trying to diagnose the issue and I came across ActiveMqConnectionStarter.cs\r\n\r\nIs the [Close connection](https://github.com/NServiceBus/NServiceBus/blob/develop/src/ActiveMQ/NServiceBus.ActiveMQ/ActiveMqConnectionStarter.cs#L26) being called too soon ?\r\nThe `IWantToRunWhenBusStartsAndStops.Stop` runs before we dispose of the ITransport , see https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/UnicastBus.cs#L950, which in turn calls the Stop on the IDequeueStrategy.\r\n\r\nSo, a couple of options:\r\n1.  Call  `IWantToRunWhenBusStartsAndStops.Stop` after we have disposed of the `ITransport`.\r\n2. We need to change where we call connection.Close from.\r\n\r\nOption 1 seems to be the easiest one, and it would also make it easier for #912, but I'm not too sure what are the implications of changing the order of these.\r\n\r\nThoughts?\r\n\r\n"
912,'andreasohlund','RabbitMQ does not Close connection\nIn the RabbitMQ transport we open the connection but we never Close it!\r\n\r\nWe need to either explicitly call Close or set AutoClose=true (we can only set autoclose to true after at least 1 channel has started otherwise the connection is closed straight away)'
911,'','Develop\n- Added support for defering messages using AMQ functionality\r\n- Improved AMQ transaction handling'
910,'','Make DataBus serializer overridable\nThis pull request resolves issue #829 (in which NServiceBus throws an exception for unserializable properties even if the `IDataBusSerializer` can in fact serialize them) by making property validation part of the `IDataBuSerializer` implementation and moving configuration to the Configure chain.'
909,'johnsimons','Too many ways to specify Transport\nWe should promote the usage of the new `UsingTransport<T>` fluent and role base API `WithTransport<T>`.\r\n\r\nWe should obsolete:\r\n* `public static Configure MsmqTransport(this Configure config)`\r\n\r\nAnd remove all other specific fluent transports APIs  (v4 API):\r\n* SqlServerTransport\r\n* ActiveMQTransport\r\n* RabbitMQTransport\r\n'
908,'johnsimons','Remove the obsoleted TimeoutMessage\n'
907,'andreasohlund','Update to Autofac.2.6.3.862\n'
906,'johnsimons','Change names of counters to be more descriptive\n"Current Throughput" -> "# of msgs pulled from the input queue /sec"\r\n"Success rate" -> "# of msgs successfully processed / sec"\r\n"Failure rate" -> "# of msgs failures / sec"\r\n\r\nThis makes it similar to what the .net perf counters do:\r\n![](https://f.cloud.github.com/assets/122651/73063/1b6f15a6-602f-11e2-9b9b-435d17f49474.PNG)\r\n\r\nand it also makes it very clear what information the counter is displaying, thoughts?'
905,'andreasohlund','Add Configure.Component<T>\nAs a shortened form of Configure.Instance.Configurer.ConfigureComponent<T>.'
904,'',"Warn developers if they reuse a saga entity class for more than one saga\nDiscussion from Yahoo Message Boards (in reverse order)\r\n=============================\r\n@Jimmy, Short answer: I personally wouldn't, I think of a saga entity as the schema for persisting saga's state. I'd agree that reusing these schema's in different saga's will likely make maintenance harder not easier but I don't think I'd go as far as trying to prevent developers from doing it as there might be some edge cases where it makes sense (I can't think of any right now).\r\n\r\n@Andreas, if you could think of a way to warn developers inside visual studio similar to the way resharper warns about code problems that would be the ideal solution. At present if these are not picked up in a code review we usually are only alerted to them after code is deployed to our RC environment and we start seeing errors in logs. It then takes a significant amount of time to figure out the cause.\r\n\r\n--- In nservicebus@yahoogroups.com, Andreas Ã–hlund wrote:\r\n>\r\n> +1. Perhaps we should detect and prevent reuse of sagaentites?\r\n> \r\n> Sent from my iPhone\r\n> \r\n> On 18 jan 2013, at 17:28, Jimmy Bogard wrote:\r\n> \r\n> > Why would you want to share saga entities between sagas? Different saga types or same saga type? Because isn't the saga entity the definition of the saga instance?\r\n> > \r\n> > \r\n> > On Thu, Jan 17, 2013 at 6:56 AM, charlie_barker_100 wrote:\r\n> >> \r\n> >> One common mistake that I see developers new to NSB make again and again is the reuse of Saga entities between Saga's. They usually don't realise that weird things will happen when they deploy code where two saga share the same entity and there is nothing to warn them.\r\n> >> \r\n> >> One possible solution that occurred to me that would enable the sharing of saga entity classes between saga's would be to use the Saga name when creating the Table in Sql Server instead of using the saga entity name. \r\n> >> \r\n> >> Thoughts?\r\n> > \r\n> >\r\n>\r\n"
903,'','AzureAppender is hard coded to use log4net!\nOne of the features of v4 is no more dependency on log4net but unfortunately it looks like we are still using it!\r\nSee https://github.com/NServiceBus/NServiceBus/blob/develop/src/azure/NServiceBus.Azure/Integration/Azure/AzureAppender.cs'
902,'johnsimons','RavenDB logs are being captured by our logging\nIf you run the [ErrorHandling sample in the develop](https://github.com/NServiceBus/NServiceBus/tree/develop/Samples/ErrorHandling) branch and stop the Raven server, the following error appears on the console:\r\n```\r\n2013-01-18 13:25:11,248 [6] ERROR Raven.Client.Connection.ReplicationInformer [(\r\nnull)] <(null)> - Could not contact master for new replication information\r\nSystem.Net.WebException: Unable to connect to the remote server ---> System.Net.\r\nSockets.SocketException: No connection could be made because the target machine\r\nactively refused it 127.0.0.1:8080\r\n   at System.Net.Sockets.Socket.DoConnect(EndPoint endPointSnapshot, SocketAddre\r\nss socketAddress)\r\n   at System.Net.Sockets.Socket.InternalConnect(EndPoint remoteEP)\r\n   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Sock\r\net s4, Socket s6, Socket& socket, IPAddress& address, ConnectSocketState state,\r\nIAsyncResult asyncResult, Exception& exception)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.HttpWebRequest.GetResponse()\r\n   at Raven.Client.Connection.HttpJsonRequest.ReadJsonInternal(Func`1 getRespons\r\ne) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonReque\r\nst.cs:line 342\r\n   at Raven.Client.Connection.HttpJsonRequest.ReadResponseJson() in c:\\Builds\\Ra\r\nvenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonRequest.cs:line 240\r\n   at Raven.Client.Connection.ServerClient.DirectGet(String serverUrl, String ke\r\ny) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.\r\ncs:line 215\r\n   at Raven.Client.Connection.ReplicationInformer.RefreshReplicationInformation(\r\nServerClient commands) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Conn\r\nection\\ReplicationInformer.cs:line 351\r\n```\r\nthis error is actually logged by Raven API [here](https://github.com/ravendb/ravendb/blob/master/Raven.Client.Lightweight/Connection/ReplicationInformer.cs#L356)\r\n\r\nWe need to somehow not display these errors on our own logs.'
901,'','Restructure solution\nI would suggest you guys get an open source license from http://structure101.com/products/index.php#/refactor and analyze the current solution structure and apply some restructuring to the solution. This would make it easier to find stuff and improve the file / namespace organization'
900,'andreasohlund','MasterNode address is appended to the local worker when running in the master profile\nWhile it should work in theory since the master profile only should be active on that endpoint on the master node machine it causes issues when a DNS alias is used. See https://github.com/NServiceBus/NServiceBus/issues/898'
899,'andreasohlund','XmlSerializer fails to deserialize array of messages\nIf you do a:\r\n```c#\r\nBus.Send(new MyMessage(), new MyMessage())\r\n```\r\nthe serializer throws an exception:\r\n```\r\nSystem.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.SZArrayHelper.get_Item(Int32\xa0index)\r\n   at System.Linq.Enumerable.ElementAt(IEnumerable`1\xa0source,\xa0Int32\xa0index)\r\n   at NServiceBus.Serializers.XML.XmlMessageSerializer.Deserialize(Stream\xa0stream,\xa0IList`1\xa0messageTypesToDeserialize) in XmlMessageSerializer.cs: line 298\r\n```\r\n\r\nThe following unit test replicates the problem:\r\n```c#\r\n        [Test]\r\n        public void Should_be_able_to_deserialize_many_messages_of_same_type()\r\n        {\r\n            var serializer = SerializerFactory.Create<EmptyMessage>();\r\n\r\n            using (var stream = new MemoryStream())\r\n            {\r\n                serializer.Serialize(new[] { new EmptyMessage(), new EmptyMessage(), new EmptyMessage()  }, stream);\r\n                stream.Position = 0;\r\n\r\n                var msgArray = serializer.Deserialize(stream, new[] {typeof(EmptyMessage).FullName});\r\n\r\n                Assert.AreEqual(3, msgArray.Length);\r\n            }\r\n        }\r\n```'
898,'','Should resolve address machine name using DNS\nIf a user enable MSMQ to work with DNS aliases we need to ensure that the endpoint machine name is resolved via DNS and then check that against the loopback address.\r\n\r\nHere is all the detail from a SO question:\r\n```\r\nI hit the roadblock today. In our org, all the deployments are done by TFS Build. Where the each of the NSB Host components are packaged and deployed by the build portal. When we try to use the Scale-Out features of NSB, where we have to install the same components with Master and Worker profiles. We managed Master & Worker installers by passing the required arguments when we package it. To simplify the process we planned to use one single Configuration file for both Master and Worker where we kept the MasterNode configuration for both master and worker. All fine! It worked really well.\r\n\r\nAs per the policy, we should not use the server names on the configuration files and we have to use the DNS aliases on our Config file. We achieved it by enabling the MSMQ work on top of DNS aliases.\r\n\r\nNow the real issue starts, NServiceBus.Master profiles appends the Node value on the input queue. When we use the DNS aliases as Node it throws the following exception.\r\n\r\nSystem.Exception: Exception when starting endpoint, error has been logged. Reason: Input queue [somequeue@some-dns.bus] must be on the same machine as this process [SOMEDITSERVER01]. ---> System.InvalidOperationException : Input queue [somequeue@some-dns.bus] must be on the same machine as this process [SOMEDITSERVER01]. at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.Init(Address address, Boolean transactional) at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.NServiceBus.Unicast.Transport.ITransport.Start(Address address) at NServiceBus.Unicast.UnicastBus.NServiceBus.IStartableBus.Start(Action startupAction) at NServiceBus.Hosting.GenericHost.Start()\r\n\r\n--- End of inner exception stack trace --- at NServiceBus.Hosting.GenericHost.Start() at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter)\r\n\r\n--- End of inner exception stack trace --- at Magnum.StateMachine.ExceptionActionDictionary1.HandleException(T stateMachine, Event event, Object parameter, Exception exception)\r\nat Magnum.StateMachine.EventActionList1.Execute(T stateMachine, Event event, Object parameter) at Magnum.StateMachine.State1.RaiseEvent(T instance, BasicEvent1 eevent, Object value) at Magnum.StateMachine.StateMachine`1.RaiseEvent(Event raised) at Topshelf.Internal.ServiceControllerProxy.Start() at Topshelf.Internal.ServiceCoordinator.Start() at Topshelf.Internal.Hosts.ConsoleHost.Run() at NServiceBus.Hosting.Windows.Program.Main(String[] args)\r\n\r\nQuestions:\r\n\r\nWhy is NSB appending the MasterNode value on the input queues & other queues, when NSB is strictly looking for the current MachineName as valid server name for current input queue? Why not NSB just ignore the MasterNode values when it runs with NServiceBus.Master or NServiceBus.Distributor?\r\n\r\nIf NSB still wanted to append the MasterNode value on input queue… Why NSB is not resolving the DNS names, instead it limits with the validation with current MachineName?\r\n\r\nvar configSection = Configure.GetConfigSection<MasterNodeConfig>();\r\nif (configSection == null)\r\n{\r\n    return;\r\n}\r\nvar ipAddressesOfNode = Dns.GetHostEntry(configSection.Node).AddressList.Select(ip => ip.ToString()).ToArray();\r\nvar ipAddressesOfHost = Dns.GetHostEntry(Environment.MachineName).AddressList.Select(ip => ip.ToString()).ToArray();\r\nif (ipAddressesOfHost.Any(ipAddressesOfNode.Contains))\r\n{\r\n    //Valid DNS Name\r\n}\r\nFinally we end-up with following option,\r\n\r\n1.Failed Approach: Alter the MasterNodeConfig’s Node value on the IHandleProfile. I liked this approach but it has few drawbacks. It wont work, since MasterNodeConfig is not overriden the default behavior of IsReadonly() and it will throw error. If you use integration profile, during the installation it won’t create the Worker & Distributor queue\r\n\r\ninternal class MasterNodeConfigSetup : IHandleProfile<Master> \r\n{\r\n   public void ProfileActivated()\r\n   {\r\n     var configSection = Configure.GetConfigSection<MasterNodeConfig>();\r\n     configSection.Node = Environment.MachineName;\r\n   } \r\n}\r\nThere is hack to bypass the runtime error created by the above code. But if you manually take care other queue creation we can use this;\r\n\r\nvar field = typeof(ConfigurationElement).GetField("_bReadOnly", BindingFlags.Instance | BindingFlags.NonPublic);\r\nif (field != null)\r\n{\r\n    field.SetValue(configSection, false);\r\n    configSection.Node = Environment.MachineName;\r\n}\r\n2.Keep the two different Config files for worker and master & package it. Lot of work looks feasible.\r\n\r\n3.Remove the MasterNodeConfig during the Master component deployment.\r\n\r\nI am not against to NSB, I love NSB. I am just expressing my frustration, wanted to know the reason WHY! Why it is appending MasterNode value & why it is just validating with Environemnt instead resolving it.\r\n\r\nI am very much open to accept any suggestions from you.\r\n```\r\n\r\n '
897,'johnsimons','Introduce a connection string for MSMQ\n1. Add a NServiceBus/Transport connection string for MSMQ and add options to:\r\n\r\n* Turn caching on and off - On by default\r\n* Turn dead lettering on and off - On by default\r\n* Turn journaling on and off - Off by default\r\n\r\n2. Obsolete the MsmqQueuingConfig - https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Config/MsmqMessageQueueConfig.cs'
896,'johnsimons','Obsolete IMessageModule in favour of IManageUnitsOfWork\nWith the introduction of `IManageUnitsOfWork` is there a reason to keep `IMessageModule` ?'
895,'',"Enable NSB Testing framework to work under Unobtrusive mode.\n__The NSB testing framework does not work with Unobtrusive mode__\r\n\r\nThe Generic parameter passed to the message handler (the message type) is checked to see if it’s a known 'built in' NSB type. \r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/testing/Test.cs\r\n\r\n```C#\r\n        public static Handler<T> Handler<T>(Func<IBus, T> handlerCreationCallback)\r\n        {\r\n            bus = new StubBus(messageCreator);\r\n            ExtensionMethods.Bus = bus;\r\n\r\n            var handler = handlerCreationCallback.Invoke(bus);\r\n\r\n            bool isHandler = (from i in handler.GetType().GetInterfaces()\r\n                              let args = i.GetGenericArguments()\r\n                              where args.Length == 1\r\n                              where args[0].IsMessageType()\r\n                              where typeof (IMessageHandler<>).MakeGenericType(args[0]).IsAssignableFrom(i)\r\n                              select i).Any();\r\n```\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/core/NServiceBus/MessageConventionExtensions.cs\r\n\r\n```C#\r\n     public static bool IsMessageType(this Type t)\r\n        {\r\n            try\r\n            {\r\n                return MessagesConventionCache.ApplyConvention(t,\r\n                                                               type =>\r\n                                                               IsMessageTypeAction(type) || IsCommandTypeAction(type) ||\r\n                                                               IsEventTypeAction(type) || (IsInSystemConventionList(type)));\r\n```\r\n\r\n```C#\r\n        /// <summary>\r\n        /// The function used to determine whether a type is a message type.\r\n        /// </summary>\r\n        public static Func<Type, bool> IsMessageTypeAction = t => typeof(IMessage).IsAssignableFrom(t) &&\r\n                                                                    typeof(IMessage) != t &&\r\n                                                                    typeof(IEvent) != t &&\r\n                                                                    typeof(ICommand) != t;\r\n```\r\n\r\n\r\nKind Regards,\r\nAndrew Stone. "
894,'johnsimons','Remove /installinfrastructure from host\nBecause we are not using/running INeedToInstallInfrastructure we need to remove that option from the Hosts.\r\n\r\nOr the other option is to thrown an exception with a nice error message to tell the user to use the powershell cmdlets.\r\n\r\n'
893,'johnsimons','Mark CompletionMessage as obsolete\nShould we mark CompletionMessage as obsolete in v4?\r\nOr are we still compatible with v2.6 endpoints?\r\n\r\nActually if this class is really only to keep compatibility with v2.6 endpoints then we should probably remove it, if v4 is no longer compatible, thoughts?'
892,'johnsimons','Stop using the ISessionFactory directly from the NHibernate saga persister\nSince we stopped merging NHibernate in 3.X we are now creating problems for users registering their own ISessionFactory in the container. \r\n\r\nHere is an example: http://tech.groups.yahoo.com/group/nservicebus/message/17486\r\n\r\nThis happens since our saga persister rely on the ISessionFactory directly\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/nhibernate/NServiceBus.NHibernate/SagaPersisters/NHibernate/SagaPersister.cs#L64\r\n\r\n1. We need to abstract this so that our session factory can coexist with the one the user is registering.\r\n2. We should add an option to use the user supplied one if requested so by the user\r\n\r\n'
891,'andreasohlund','Exceptions on Scope.Complete causes message failures to not increment\n'
890,'','REST API for errors\n### List error messages\r\n```\r\nGET /failedmessages\r\n```\r\n#### Parameters\r\n```\r\nsort: failure_time, ..., default: failure_time\r\ndirection: asc or desc, default: desc.\r\n```\r\n#### Response\r\n```\r\nStatus: 200 OK\r\n```\r\n\r\n### Retry message\r\n```\r\nPOST /failedmessages/retry/:message_id\r\n```\r\n\r\n#### Response\r\n```\r\nStatus: 200 No Content\r\n```\r\n\r\n### Retry All Messages\r\n```\r\nPOST /failedmessages/retryall/\r\n```\r\n\r\n\r\n#### Response\r\n```\r\nStatus: 200 No Content\r\n```'
889,'johnsimons','Enable WCF hosting in Unobtrusive mode\n__WCF hosting stops working when Unobtrusive mode is enabled__\r\n\r\nThis is because WcfManager.cs tests the parameters to see if they implement IMessage:\r\n\r\n```C# \r\n private static bool IsWcfService(Type t)\r\n        {\r\n            var args = t.GetGenericArguments();\r\n            if (args.Length == 2)\r\n                if (typeof(IMessage).IsAssignableFrom(args[0]))\r\n                {\r\n                    var wcfType = typeof(WcfService<,>).MakeGenericType(args);\r\n                    if (wcfType.IsAssignableFrom(t))\r\n                        return true;\r\n                }\r\n\r\n            if (t.BaseType != null)\r\n                return IsWcfService(t.BaseType) && !t.IsAbstract;\r\n\r\n            return false;\r\n        }\r\n```\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/hosting/NServiceBus.Hosting/Wcf/WcfManager.cs\r\n\r\nSo when Unobtrusive mode is enabled, the IsWcfService() method returns false as the first parameter (the message type) no longer implements IMessage and thus WCF hosting stops working.\r\n\r\nKind Regards,\r\nAndrew. \r\n'
888,'','Added ControlMessageDecoder and Encoder for ActiveMQ\n'
887,'andreasohlund',"It shouldn't be required to assign Headers.Expire in IDefereMessages implementations\nCurrently Headers.Expire has to by assigned by every IDeferMessages implementation so that Sagas work properly.\r\n\r\nThere are two options to fix this problem:\r\n1. This header is assigned before it is passed to the IDefereMessages implementation\r\n2. Change Saga implementation so that it does not depend on this header.\r\n\r\nI think option 2 is the way to go. Sagas don't have to check again if the timeout has expired. It is the task of the defer mechanism to ensure that a message that has not expired is not delivered.\r\n\r\nHeaders.Expire is an implementation detail of the TimeoutManagerBasedDeferral."
886,'johnsimons','Passing an empty list to Bus.SendLocal(params object[] messages) causes "Sequence contains no elements" exception\n4.0.0-unstable2565\r\n\r\nProb should swallow this?? ie ignore if empty \r\n\r\n\tSystem.InvalidOperationException was unhandled by user code\r\n\t\tHResult=-2146233079\r\n\t\tMessage=Sequence contains no elements\r\n\t\tSource=System.Core\r\n\t\tStackTrace:\r\n\t\t\t\t at System.Linq.Enumerable.Min[TSource](IEnumerable`1 source)\r\n\t\t\t\t at System.Linq.Enumerable.Min[TSource,TResult](IEnumerable`1 source, Func`2 selector)\r\n\t\t\t\t at NServiceBus.Unicast.UnicastBus.MapTransportMessageFor(IEnumerable`1 rawMessages, TransportMessage result) in c:\\TeamCity\\buildAgent\\work\\36dd35accd0955b0\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 1412\r\n\t\t\t\t at NServiceBus.Unicast.UnicastBus.SendMessage(List`1 addresses, String correlationId, MessageIntentEnum messageIntent, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\36dd35accd0955b0\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 697\r\n\t\t\t\t at NServiceBus.Unicast.UnicastBus.SendMessage(Address address, String correlationId, MessageIntentEnum messageIntent, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\36dd35accd0955b0\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 637\r\n\t\t\t\t at NServiceBus.Unicast.UnicastBus.NServiceBus.IBus.Send(Address address, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\36dd35accd0955b0\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 548\r\n\t\t\t\t at NServiceBus.Unicast.UnicastBus.NServiceBus.IBus.SendLocal(Object[] messages) in c:\\TeamCity\\buildAgent\\work\\36dd35accd0955b0\\src\\NServiceBus.Core\\Unicast\\UnicastBus.cs:line 516\r\n'
885,'','Implemented IPublishMessages and IHandleSubscriptions for ActiveMQ transport\n'
884,'','Auto Deserialization according to content type\nApart from 4.0.0 there is a content type header for the transport message. This would allow us to do the following:\r\n\r\nThe configured serializer would only have impact on the outgoing messages. The ingoing serializer could be picked dynamically according to the defined content type. For example this would allow to mix json and xml serialization and each endpoint would be able to deserialize both as long as the content type is known on that endpoint. \r\n\r\nThis could be a feature for 5.0.0'
883,'','Ensure backwards compatibility with newly introduced content type header\nApart from 4.0.0 there will be a new content type header on the transport message. The content type header is set for all message sent from a 4.0.0 endpoint. We need to make sure that when a new message arrives in a 4.0.0 endpoint and the content type header is not set that it is set to the serializer configured on that endpoint. This is crucial in case of any code relies on that header being present.\r\n\r\nMy suggestion would be to add:\r\n\r\n       public class MutateMessageContentTypeOfIncomingTransportMessages : IMutateIncomingTransportMessages, INeedInitialization\r\n    {\r\n        public IMessageSerializer Serializer { get; set; }\r\n\r\n        /// <summary>\r\n        /// Ensure that the content type which is introduced in V4.0.0 and later versions is present in the header.\r\n        /// </summary>\r\n        /// <param name="transportMessage">Transport Message to mutate.</param>\r\n        public void MutateIncoming(TransportMessage transportMessage)\r\n        {\r\n            if (!transportMessage.IsControlMessage() && !transportMessage.Headers.ContainsKey(Headers.ContentType))\r\n            {\r\n                transportMessage.Headers[Headers.ContentType] = this.Serializer.ContentType;\r\n            }\r\n        }\r\n\r\n        public void Init()\r\n        {\r\n            Configure.Instance.Configurer.ConfigureComponent<MutateMessageContentTypeOfIncomingTransportMessages>(DependencyLifecycle.InstancePerCall);\r\n        }\r\n    }\r\n\r\nThoughts, especially @andreasohlund ? I have it on my develop branch. I added it to NServiceBus.Compatibility'
882,'johnsimons','Msmq queue creator is not using the /username to ACL the queue\nWe are assigning the passed in username here:\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/hosting/NServiceBus.Hosting.Windows/Installers/WindowsInstaller.cs#L67\r\n\r\nBut then we are not using that value anywhere!\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Queuing/Msmq/MsmqUtilities.cs#L26'
880,'','Powershell doco is incorrect\nThe powershell commands here are incorrect, http://nservicebus.com/powershell.aspx\r\n\r\n1. "Install-Msmq" should be "Install-NServiceBusMSMQ".. Same for the other commands.\r\n\r\n2. It looks like Log4Net is not longer a dependency on NServiceBus.Core\r\n\r\n3. Users will also need to make changes to powershell to run 4.0 assemblies. http://stackoverflow.com/questions/2094694/how-can-i-run-powershell-with-the-net-4-runtime'
879,'andreasohlund','Action is executed immediately ignoring timeout\nThis line https://github.com/NServiceBus/NServiceBus/blob/develop/src/core/NServiceBus/Saga/Saga.cs#L157 states\r\n\r\n    /// <param name="timeoutMessage">The message to send after <paramref name="within"/> expires.</param>\r\n\r\nHowever tracing the logic through\r\n\r\n    saga.RequestTimeout<TTimeoutmessageType>(TimeSpan within, Action<TTimeoutmessageType> action)\r\n\r\ncalls\r\n\r\n    Bus.CreateInstance(action)\r\n\r\ncalls\r\n\r\n    MessageMapper.CreateInstance\r\n\r\nWhich execute the action immediately.\r\n\r\n        public T CreateInstance<T>(Action<T> action)\r\n        {\r\n            T result = CreateInstance<T>();\r\n\r\n            if (action != null)\r\n                action(result);\r\n\r\n            return result;\r\n        }\r\n \r\nAm i missing something?\r\n'
878,'johnsimons','Gateway with Ninject fails to start endpoint\nI have a server application that I\'m trying to configure using Ninject and I\'m running into an issue on startup.\r\n\r\nThe exception summary is the following:\r\n```\r\n2013-01-04 14:08:51,989 [1] FATAL NServiceBus.Hosting.GenericHost - Ninject.ActivationException: Error activating IRouteMessagesToEndpoints\r\nMore than one matching bindings are available.\r\nActivation path:\r\n  2) Injection of dependency IRouteMessagesToEndpoints into parameter endpointRouter of constructor of type GatewayReceiver\r\n  1) Request for GatewayReceiver\r\n```\r\n\r\nThis is what my EndpointConfig looks like:\r\n\r\n```c#\r\nnamespace Router\r\n{\r\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Server, IWantCustomInitialization, IWantCustomLogging\r\n    {\r\n        public void Init()\r\n        {\r\n            SetLoggingLibrary.Log4Net(log4net.Config.XmlConfigurator.Configure);\r\n\r\n            Configure.With().\r\n                NinjectBuilder().\r\n                XmlSerializer().\r\n                RijndaelEncryptionService().\r\n                MsmqSubscriptionStorage();\r\n        }\r\n    }\r\n}\r\n```\r\nAnd in my App.config, I have this:\r\n```xml\r\n<configSections>\r\n    <section name="MessageForwardingInCaseOfFaultConfig" type="NServiceBus.Config.MessageForwardingInCaseOfFaultConfig, NServiceBus.Core"/>\r\n    <section name="GatewayConfig" type="NServiceBus.Config.GatewayConfig, NServiceBus.Core"/>\r\n    <section name="RijndaelEncryptionServiceConfig" type="NServiceBus.Config.RijndaelEncryptionServiceConfig, NServiceBus.Core"/>\r\n    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>\r\n  </configSections>\r\n  \r\n  <GatewayConfig>\r\n    <Channels>\r\n      <Channel Address="http://localhost:25899/Router/" ChannelType="Http" Default="true"/>\r\n    </Channels>\r\n  </GatewayConfig>\r\n  \r\n...\r\n```\r\n\r\nFinally, this is the full exception stack trace logged:\r\n```\r\n2013-01-04 14:08:51,989 [1] FATAL NServiceBus.Hosting.GenericHost - Ninject.ActivationException: Error activating IRouteMessagesToEndpoints\r\nMore than one matching bindings are available.\r\nActivation path:\r\n  2) Injection of dependency IRouteMessagesToEndpoints into parameter endpointRouter of constructor of type GatewayReceiver\r\n  1) Request for GatewayReceiver\r\n\r\nSuggestions:\r\n  1) Ensure that you have defined a binding for IRouteMessagesToEndpoints only once.\r\n\r\n   at Ninject.KernelBase.Resolve(IRequest request) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\KernelBase.cs:line 380\r\n   at Ninject.Planning.Targets.Target`1.GetValue(Type service, IContext parent) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Planning\\Targets\\Target.cs:line 197\r\n   at Ninject.Planning.Targets.Target`1.ResolveWithin(IContext parent) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Planning\\Targets\\Target.cs:line 165\r\n   at Ninject.Activation.Providers.StandardProvider.GetValue(IContext context, ITarget target) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 114\r\n   at Ninject.Activation.Providers.StandardProvider.<>c__DisplayClass4.<Create>b__2(ITarget target) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 96\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Ninject.Activation.Providers.StandardProvider.Create(IContext context) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 96\r\n   at Ninject.Activation.Context.Resolve() in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Context.cs:line 157\r\n   at Ninject.KernelBase.<>c__DisplayClass10.<Resolve>b__c(IBinding binding) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\KernelBase.cs:line 386\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)\r\n   at Ninject.ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Syntax\\ResolutionExtensions.cs:line 151\r\n   at NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.Build(Type typeToBuild)\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.NServiceBus.ObjectBuilder.IBuilder.Build[T]() in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\impl\\ObjectBuilder.Common\\ObjectBuilder.Common\\CommonObjectBuilder.cs:line 141\r\n   at NServiceBus.GatewayBootstrapper.Run() in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\gateway\\NServiceBus.Gateway\\Config\\GatewayBootstrapper.cs:line 15\r\n   at NServiceBus.Unicast.Config.StartupRunners.<Run>b__5(IWantToRunWhenTheBusStarts r) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\unicast\\NServiceBus.Unicast.Config\\StartupRunners.cs:line 23\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Unicast.Config.StartupRunners.<Run>b__4(Object obj, EventArgs ev) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\unicast\\NServiceBus.Unicast.Config\\StartupRunners.cs:line 22\r\n   at NServiceBus.Unicast.UnicastBus.NServiceBus.IStartableBus.Start(Action startupAction) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 839\r\n   at NServiceBus.Unicast.UnicastBus.NServiceBus.IStartableBus.Start() in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 793\r\n   at NServiceBus.Hosting.GenericHost.Start() in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\hosting\\NServiceBus.Hosting\\GenericHost.cs:line 32\r\n```'
877,'','MessageFilter predicate condition algorithm\nAlso the message filter seems to have a bug. Currently it allows multiple subscriptions of the same type with different conditions. The message will be processed if all the conditions are met. But it seems more natural to process the message when one or more conditions are met.\r\n\r\nRelates to #875'
876,'','Databus working with ActiveMQ\nAdded IntegrationTest for Databus over ActiveMQ'
875,'andreasohlund','IManageSubscriptions should not have a predicate\nThe Predicate for subscriptions is something that can be evaluated on the subscriber only. Therefore the logic can be implemented once for all transports.\r\n\r\nI suggest to extract the ingomming message mutator from MessageDrivenSubscriptionManager into an EventMessageFilter. In UnicastBus we do \r\n\r\n    SubscriptionManager.Subscribe(messageType, destination); \r\n    EventMessageFilter.AddCondition(messageType, condition);\r\n\r\nAlso the message filter seems to have a bug. Currently it allows multiple subscriptions of the same type with different conditions. The message will be processed if all the conditions are met. But it seems more natural to process the message when one or more conditions are met.'
874,'johnsimons','ConfigureRavenPersistence.WarnUserIfRavenDatabaseIsNotReachable fails on RavenDB 2.0\nCurrently running Raven 2.0 Stable\r\n\r\nThis code \r\n\r\n        private static void WarnUserIfRavenDatabaseIsNotReachable(IDocumentStore store)\r\n        {\r\n            try\r\n            {\r\n                store.Initialize();\r\n                store.DatabaseCommands.GetDatabaseNames(1);\r\n            }\r\n\r\ngives InvalidOperationException "The request \'/databases/\' can only be issued on the system database"\r\n\r\nStack\r\n\r\n \t\tNServiceBus.Core.dll!Raven.Client.Connection.HttpJsonRequest.HanldeErrors(System.Net.WebException e) Line 416 + 0x3c bytes\tC#\r\n\t\tNServiceBus.Core.dll!Raven.Client.Connection.HttpJsonRequest.ReadStringInternal(System.Func<System.Net.WebResponse> getResponse) Line 285 + 0xc bytes\tC#\r\n\t\tNServiceBus.Core.dll!Raven.Client.Connection.HttpJsonRequest.ReadResponseString() Line 195 + 0x40 bytes\tC#\r\n\t\tNServiceBus.Core.dll!Raven.Client.Connection.HttpJsonRequest.ReadResponseJson() Line 611 + 0x9 bytes\tC#\r\n\t\tNServiceBus.Core.dll!Raven.Client.Connection.ServerClient.ExecuteGetRequest.AnonymousMethod__6(string serverUrl) Line 147 + 0xa bytes\tC#\r\n\t\tNServiceBus.Core.dll!Raven.Client.Connection.ServerClient.TryOperation<Raven.Json.Linq.RavenJToken>(System.Func<string,Raven.Json.Linq.RavenJToken> operation, string operationUrl, bool avoidThrowing, out Raven.Json.Linq.RavenJToken result) Line 223 + 0x14 bytes\tC#\r\n\t\tNServiceBus.Core.dll!Raven.Client.Connection.ServerClient.ExecuteWithReplication<Raven.Json.Linq.RavenJToken>(string method, System.Func<string,Raven.Json.Linq.RavenJToken> operation) Line 193 + 0x43 bytes\tC#\r\n\t\tNServiceBus.Core.dll!Raven.Client.Connection.ServerClient.ExecuteGetRequest(string requestUrl) Line 139 + 0x34 bytes\tUnknown\r\n\t\tNServiceBus.Core.dll!Raven.Client.Connection.ServerClient.GetDatabaseNames(int pageSize) Line 524 + 0x30 bytes\tC#\r\n\t\tNServiceBus.Core.dll!NServiceBus.ConfigureRavenPersistence.WarnUserIfRavenDatabaseIsNotReachable(Raven.Client.IDocumentStore store) Line 184 + 0x1a bytes\tC#\r\n\r\n\r\nOn another note that method is flawed. it effectively assumes any issue with the Db is a connectivity issue and gives the user a misleading message.'
873,'','NinjectObjectBuilder: Should be possible to participate in unit of work scope in ninject binding modules\nCurrently it is not possible to define bindings in a ninject module which are scoped to the unit of work scope of nservicebus without using the builder.'
872,'','Added support for Xml Embedding into xml serialized messages. Closes #87...\n...1'
871,'',"Add ability to embed Xml into XmlSerialized messages\nWhen you need to ship xml structures inside messages currently you have the ability to use string on the message but then the xml content is escaped or use the XmlCharacterData and wrap it in CData which is unnecessary when you use embedded XML definitions. It would be nice to have the possibility to define messages like that:\r\n\r\n    public class MessageWithXDocument : IMessage\r\n    {\r\n        public XDocument Document { get; set; }\r\n    }\r\n\r\n    public class MessageWithXElement : IMessage\r\n    {\r\n        public XElement Document { get; set; }\r\n    }\r\n\r\nI'll send a pull request for that feature\r\n"
870,'','-\n'
869,'johnsimons','Deserialisation exception with ReturnToSource tool\n\r\nThere is an issue with the ReturnToSource tool. It gives the following message:\r\n\r\n    Could not return message to source queue. Reason: There is an error in XML document (28, 14).\r\n\r\nAfter investigation it fails at the following line: https://github.com/NServiceBus/NServiceBus/blob/master/src/utils/MsmqUtilities.cs#L380\r\n\r\nThe input on which it fails is the following:\r\n\r\n    <?xml version="1.0"?>\r\n    <ArrayOfHeaderInfo xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r\n      <HeaderInfo>\r\n        <Key>NServiceBus.ExceptionInfo.Message</Key>\r\n        <Value>\'&#x19;\', hexadecimal value 0x19, is an invalid character. Line 779, position 123.</Value>\r\n      </HeaderInfo>\r\n    </ArrayOfHeaderInfo>\r\n\r\nSo it seems to fail on the ampersand character which is strange as it seems pretty valid xml wise but the xml serializer fails. I reproduced this with the following simple code:\r\n\r\n    var ser = new XmlSerializer(typeof(HeaderInfo[]));\r\n    using (var s = File.OpenRead(@"data.xml"))\r\n    {\r\n    \tvar headerInfo = ser.Deserialize(s);\r\n    }\r\n\r\n'
868,'johnsimons','fix up comments in DateTimeExtensions\n'
867,'johnsimons','Return if error queue already set\nThis allows people to easily set the error queue in code'
866,'johnsimons','Invalid types are being picked up as message types\n[This code](https://github.com/NServiceBus/NServiceBus/blob/master/src/unicast/NServiceBus.Unicast.Config/ConfigUnicastBus.cs#L82) is registering a lot of types that are not valid message types.\r\nIt looks like is not using conventions to figure out what are considered message types and which ones are not!'
865,'','Set error queue in code\n'
864,'johnsimons','Added .OnMessage<TMessage>(TMessage) to remove noise of forced message id during testing\n- Added NServiceBus.Testing.Tests project to solution\r\n- Fixed NServiceBus.Testing.Tests references and NUnit nuget package\r\n- Added implementation for Handler<T>.OnMessage(T) for simplicity + test case\r\n\r\nAfter messing around with pull requests, I finally made it :)\r\n** Rectified pull request for pull request #862 and #863 (on develop branch) **'
863,'','Added .OnMessage<TMessage>(TMessage) to remove noise of forced message id during testing\n** Rectified pull request for pull request #862 (on develop branch) ** \r\n\r\nAdded Test.Handler.OnMessage(TMessage) to remove noise of forced message id as a second parameter during testing.\r\n\r\nCurrently, to pass an already constructed message into a test for a handler, you also have to provide a message id.'
862,'',' Added .OnMessage<TMessage>(TMessage) to remove noise of forced message id during testing\nAdded Test.Handler<THandler>.OnMessage<TMessage>(TMessage) to remove noise of forced message id as a second parameter during testing.\r\n\r\nCurrently, to pass an already constructed message into a test for a handler, you also have to provide a message id.\r\n\r\n'
861,'johnsimons','XmlSerializer / JsonSerializer dontWrapSingleMessages : true when no EnclosedMessageType is available fails\nThe current ActiveMQ implementation needs dontWrapSingleMessages to be set to true. This serializes a message like the following (example XML):\r\n\r\n       <?xml version=\\"1.0\\"?><UpdatePrice><ProductId>23</ProductId></UpdatePrice>\r\n\r\nThis is fine as long as messages are only produced by NSB endpoints because they set the enclosed message type header. \r\n\r\nBut for example when you use the gateway samples website a JSONP request is sent to the gateway. If you send:\r\n\r\n       <?xml version=\\"1.0\\"?><UpdatePrice><ProductId>23</ProductId></UpdatePrice>\r\n\r\nwith JSONP to the gateway the headquarter is not able to deserialize the message. Their are two possibilities to overcome this issue:\r\n\r\n1. The JSONP request MUST set the enclosed message type header\r\n2. The XmlSerializer also includes the namespace definition when serializing a single message. \r\n\r\nFor option 2 this would mean single messages like the example above get serialized like:\r\n\r\n       <?xml version=\\"1.0\\"?><UpdatePrice xmlns=\\"http://tempuri.net/Headquarter.Messages\\"><ProductId>23</ProductId></UpdatePrice>\r\n\r\nFor example this test currently fails:\r\n\r\n        [Test]\r\n        public void Should_deserialize_a_single_message_without_providing_typename_externally()\r\n        {\r\n            using (var stream = new MemoryStream())\r\n            {\r\n                var writer = new StreamWriter(stream);\r\n                writer.WriteLine("<MessageWithDouble><Double>23.4</Double></MessageWithDouble>");\r\n                writer.Flush();\r\n                stream.Position = 0;\r\n\r\n                var msgArray = SerializerFactory.Create(typeof(MessageWithDouble)).Deserialize(stream);\r\n\r\n                Assert.AreEqual(typeof(MessageWithDouble), msgArray[0].GetType());\r\n            }\r\n        }\r\n\r\nBut this one works:\r\n\r\n        [Test]\r\n        public void Should_deserialize_a_single_message_without_providing_typename_externally()\r\n        {\r\n            using (var stream = new MemoryStream())\r\n            {\r\n                var writer = new StreamWriter(stream);\r\n                writer.WriteLine("<MessageWithDouble xmlns=\\"http://tempuri.net/NServiceBus.Serializers.XML.Test\\"><Double>23.4</Double></MessageWithDouble>");\r\n                writer.Flush();\r\n                stream.Position = 0;\r\n\r\n                var msgArray = SerializerFactory.Create(typeof(MessageWithDouble)).Deserialize(stream);\r\n\r\n                Assert.AreEqual(typeof(MessageWithDouble), msgArray[0].GetType());\r\n            }\r\n        }\r\n\r\n@andreasohlund I prefer option 2 but as you designed that you might have another opinion.\r\n\r\nBy the way I haven\'t thought that through for the JSON Serializer.'
860,'johnsimons',"Improve exception handling\nHi,\r\nIt will be great I could you improve exception handling in NSB. When message is forwarding to error queue there is logged error but without exception so my custom logger target can't save exception. On the other hand message in error queue contains exception details but without inner exception so when I have eg. NHibernateADOException I can't read message from database because it was in inner exception. It will be great to have Exception.ToString instead of StackTrace in error message"
859,'andreasohlund','Create a WebSphereMQ Transport\n'
858,'','Gateway fails with ActiveMQ\nThe following exception is raised when we run the Gateway sample using ActiveMQ transport:\r\n```\r\n2013-01-02 10:16:15,563 [NServiceBus Gateway Channel Receiver Thread for [http://localhost:25899/Headquarter2/] - 49] ERROR NServiceBus.Gateway [(null)] <(null)\r\n> - Unexpected error\r\nSystem.Runtime.InteropServices.COMException (0x8004D102): A resource manager with the same identifier is already registered with the specified transaction coordinator. (Exception from HRESULT: 0x8004D102)\r\n   at System.Transactions.Oletx.IDtcProxyShimFactory.CreateResourceManager(GuidresourceManagerIdentifier, IntPtr managedIdentifier, IResourceManagerShim& resourceManagerShim)\r\n   at System.Transactions.Oletx.OletxResourceManager.get_ResourceManagerShim()\r\n   at System.Transactions.Oletx.OletxResourceManager.EnlistDurable(OletxTransaction oletxTransaction, Boolean canDoSinglePhase, IEnlistmentNotificationInternalenlistmentNotification, EnlistmentOptions enlistmentOptions)\r\n   at System.Transactions.Oletx.OletxTransaction.EnlistDurable(Guid resourceManagerIdentifier, ISinglePhaseNotificationInternal singlePhaseNotification, Boolean canDoSinglePhase, EnlistmentOptions enlistmentOptions)\r\n   at System.Transactions.TransactionStatePromotedBase.EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction)\r\n   at System.Transactions.EnlistableStates.EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction)\r\n   at System.Transactions.Transaction.EnlistDurable(Guid resourceManagerIdentifier, ISinglePhaseNotification singlePhaseNotification, EnlistmentOptions enlistmentOptions)\r\n   at Apache.NMS.ActiveMQ.TransactionContext.Begin(Transaction transaction) in c:\\dev\\NMS.ActiveMQ\\src\\main\\csharp\\TransactionContext.cs:line 300\r\n   at Apache.NMS.ActiveMQ.NetTxSession.EnrollInSpecifiedTransaction(Transactiontx) in c:\\dev\\NMS.ActiveMQ\\src\\main\\csharp\\NetTxSession.cs:line 152\r\n   at Apache.NMS.ActiveMQ.NetTxSession.DoStartTransaction() in c:\\dev\\NMS.ActiveMQ\\src\\main\\csharp\\NetTxSession.cs:line 131\r\n   at Apache.NMS.ActiveMQ.Session.DoSend(ActiveMQDestination destination, ActiveMQMessage message, MessageProducer producer, MemoryUsage producerWindow, TimeSpan sendTimeout) in c:\\dev\\NMS.ActiveMQ\\src\\main\\csharp\\Session.cs:line 680\r\n   at Apache.NMS.ActiveMQ.MessageProducer.Send(IDestination destination, IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive, Boolean specifiedTimeToLive) in c:\\dev\\NMS.ActiveMQ\\src\\main\\csharp\\MessageProducer.cs:line 265\r\n   at Apache.NMS.ActiveMQ.MessageProducer.Send(IDestination destination, IMessage message) in c:\\dev\\NMS.ActiveMQ\\src\\main\\csharp\\MessageProducer.cs:line 171\r\n   at NServiceBus.ActiveMQ.ActiveMqMessageSender.SendMessage(TransportMessage message, String destination, String destinationPrefix) in c:\\Projects\\NServiceBus\\src\\ActiveMQ\\NServiceBus.ActiveMQ\\ActiveMqMessageSender.cs:line 99\r\n   at NServiceBus.ActiveMQ.ActiveMqMessageSender.SendMessage(TransportMessage message, Address address) in c:\\Projects\\NServiceBus\\src\\ActiveMQ\\NServiceBus.ActiveMQ\\ActiveMqMessageSender.cs:line 86\r\n   at NServiceBus.ActiveMQ.ActiveMqMessageSender.Send(TransportMessage message,Address address) in c:\\Projects\\NServiceBus\\src\\ActiveMQ\\NServiceBus.ActiveMQ\\ActiveMqMessageSender.cs:line 44\r\n   at NServiceBus.Gateway.Receiving.GatewayReceiver.MessageReceivedOnChannel(Object sender, MessageReceivedOnChannelArgs e) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Gateway\\Receiving\\GatewayReceiver.cs:line 87\r\n   at NServiceBus.Gateway.Receiving.IdempotentChannelReceiver.HandleAck(CallInfo callInfo) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Gateway\\Receiving\\IdempotentChannelReceiver.cs:line 156\r\n   at NServiceBus.Gateway.Receiving.IdempotentChannelReceiver.DataReceivedOnChannel(Object sender, DataReceivedOnChannelArgs e) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Gateway\\Receiving\\IdempotentChannelReceiver.cs:line 51\r\n   at NServiceBus.Gateway.Channels.Http.HttpChannelReceiver.Handle(HttpListenerContext ctx) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Gateway\\Channels\\Http\\HttpChannelReceiver.cs:line 67\r\n```\r\n\r\nTo replicate this issue open the Gateway sample and modify Headquarter, SiteA and SiteB to use ActiveMQ transport.\r\nThen using the Headquarter console send a single message, you will notice that **SiteA will not send a response**.\r\nIf you then send another message from the Headquarter, SiteA receives it and replied to it.\r\nBut then if you wait for (I think 30secs), you will see the exception above!\r\n'
857,'andreasohlund','Gateway is broken in v4\nThe [refactoring of IdForCorrelation](https://github.com/NServiceBus/NServiceBus/commit/dbb0966e173a123ece6957d43b94c16219d6dcb3) broke the gateway.\r\n\r\nIt looks like the correlation id is being incorrectly sent across the gateway'
856,'johnsimons','Standardise Transport definitions namespace \nThe new implementations of ` ITransportDefinition` are all in different namspaces:\r\n* NServiceBus.Transports.RabbitMQ\r\n* NserviceBus.Msmq\r\n* NServiceBus.ActiveMQ.ActiveMQ\r\n* NServiceBus.SqlServer\r\n\r\nI think all  implementations of ` ITransportDefinition`  should be in the same namespace ?\r\n\r\nAnd if we want to make them easily discoverable then we should put them in `NServiceBus` namespace ?'
855,'','MSI uninstall/upgrade does not remove installation folder and shortcuts\nThe shortcut menu is not removed.\r\nAnd the installation folder is also not removed:\r\nC:\\Users\\[Username]\\AppData\\Local\\Apps\\NServiceBus\\v3.3.3\r\n\r\n'
854,'',"UnicastBus consequently uses MessageMapper for type name retrieval\nRelates to #853\r\n\r\nUnicastBus consequently uses MessageMapper for type name retrieval. This will remove the IsDynamic hacks and ensures that only concrete and not dynamic types used. \r\n\r\nWith that approach all knowledge about dynamic types resides in the message mapper. This also allows users of NSB to have own dynamic types which would be filtered with the old code.\r\n\r\nI double checked (but PLEASE review properly) that this should not break serialization and deserialization. Even if there are messages which have in the header a dynamic type serialized this should work because the __imp get's stripped away during deserialization."
853,'','UnicastBus GetMessageType throws when dynamic proxy interface implements another interface\n```c#\r\npublic interface IMyCommand\r\n{\r\n}       \r\n\r\npublic interface IMyMessage : IMyCommand\r\n{\r\n}        \r\n\r\nBus.Send<IMyMessage>(m => { }) will throw exception with "contains more than one matching element"\r\n\r\nUnicastBus.cs\r\n\r\nType GetMessageType(object message)\r\n        {\r\n            var messageType = message.GetType();\r\n\r\n\r\n            //is this a autogenerated proxy?\r\n            if (messageType.Assembly.IsDynamic)\r\n                messageType = messageType.GetInterfaces().Single(i => i.Assembly != typeof(IMessage).Assembly);\r\n\r\n            return messageType;\r\n        }\r\n```\r\nI think the current implementation with the IsDynamic property check is kinda flaw. I will send a pull request as further discussion for this issue.\r\n\r\nThis currently breaks the ActiveMQ Integration tests'
852,'','ActiveMq Defer, Sagas, Timeout, Notifications and Scheduling running\nCleanup up the pull request and removed notificaitons modifications'
851,'johnsimons',"HandleCurrentMessageLater on workers causes workers to send extra ready messages\nHi!\r\n\r\nUnfortunately we've found another bug with the distributor.\r\n\r\nWhen you use HandleCurrentMessageLater() in a message handler on a worker, a ready message is sent back to the distributor when the message handler completes, even though the message is just put back on the local queue on the worker. This makes the storage on the distributor grow erroneously by 1 for every time you do a HandleCurrentMessageLater(). This can generate a lot of messages on the distributors control and/or storage queues quickly if you have a single message on your queue that you need to handle at a later time.\r\n\r\nThis is related to issue #571 and #806 as functionality working in a non-distributor scenario suddenly breaks when you scale out. Maybe a code review of all functionality in a distributor scenario is called for? \r\n\r\nHow to reproduce:\r\n\r\nExtend the ScaleOut sample by changing ProcessOrderCommandHandler to do a HandleCurrentMessageLater().\r\nStart solution and send an order.\r\n\r\nExpected behaviour:\r\n\r\nWorker doing HandleCurrentMessageLater() should EITHER \r\n\r\na) put the message back on the distributor input queue AND send a ready message to the distributor control queue\r\nOR \r\nb) put the message back on the local queue and NOT send ready messages back to the distributor.\r\n\r\nObserved behaviour:\r\n\r\nMessage is put on local queue AND ready message is sent to distributor.control order.handler.distributor.storage increases unbounded as quickly as the infrastructure can write the message back on the local queue and read it again.\r\n\r\nTested on 3.3.3"
850,'andreasohlund','Turn off the TimeoutManager, Notification and SLR for the As_aClient role\nIt makes no sense to have them turned on for clients'
849,'','ActiveMQ dequeuer needs to throw CriticalException to cause bus shutdown\nIf ActiveMQ broker is down for a long period of time, the bus should shutdown with a critical error logged.\r\n\r\nSee the [RabbitMQ](https://github.com/NServiceBus/NServiceBus/blob/develop/src/RabbitMQ/NServiceBus.RabbitMQ/RabbitMqDequeueStrategy.cs#L96), [MSMQ](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Queuing/Msmq/MsmqDequeueStrategy.cs) and the [default](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Transport/Transactional/DequeueStrategies/PollingDequeueStrategy.cs#L91) implementations.'
848,'johnsimons','Better error message if RabbitMQ connection string is missing\nWe should throw a nice error message if the user forgets to supply a connection string to configure rabbitMQ.\r\n\r\nSee https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/ConfigureSqlServerTransport.cs#L44 for a good exception.'
847,'johnsimons','Update nugets to include a upper bound version\nAll nugets that dependant on third party assemblies should include an upper bound version number.\r\n\r\nSee http://docs.nuget.org/docs/reference/versioning for more info.\r\n\r\nAs an example, update [NServiceBus.Autofac.nuspec](https://github.com/NServiceBus/NServiceBus/blob/master/NuGet/NServiceBus.Autofac/NServiceBus.Autofac.nuspec) and change:\r\n`<dependency id="Autofac" version="2.6.1.841" />`\r\nto\r\n`<dependency id="Autofac" version="[2.6.1.841,3)" />`\r\n'
845,'','Modules: A proposal for NServiceBus 5\nSo I performed a little spike on develop. This is not meant to be working code nor a real pull request. Just enough to illustrate an idea\r\n\r\nI am experimenting with the idea of splitting NSBinto modules.\r\n\r\nAs an example I broke out the logging into assemblies\r\n\r\nNServiceBus.Logging.NLog.dll\r\nNServiceBus.Logging.Log4Net.dll\r\nNServiceBus.Logging.CommonLogging.dll (yes i added this one)\r\n\r\nThen at startup NSB can scan for an assembly starting with "NServiceBus.Logging." and use that for logging.\r\n\r\nThe gut of the approach is here https://github.com/SimonCropp/NServiceBus/blob/modules/src/NServiceBus.Core/Logging/LogManager.cs\r\nIt is heavily convention based\r\n\r\nThe same approach could be taken for "NServiceBus.Persistence",  "NServiceBus.Transport",  "NServiceBus.Serialization"  etc. \r\n\r\nEach of these modules could then be deployed as a nuget package.\r\n\r\nBenefits \r\n\r\n * much fewer dependencies on third party libraries\r\n * modules can evolve and change with less impact on the NSB core\r\n * multiple versions of the same module could exist to target different versions of third party libraries\r\n * smaller footprint because there will be less things to ILMerge\r\n\r\nDrawbacks\r\n\r\n * NSB comes broken OOTB. Without the appropriate nuget packages NSB would be effectively broken. ie it would throw an exception. This can be mitigated by a few things\r\n\r\n   Throwing useful exceptions\r\n   Doco\r\n   A default nuget. This would be a nuget package that depends on all the recommended "default" modules.\r\n\r\n * Significant breaking change in how NSB works\r\n\r\nAny other drawbacks??\r\n\r\nOverall thoughts??'
844,'','better obsolete doco for ConfigureComponent \nthis time on the correct branch\r\nhttps://github.com/NServiceBus/NServiceBus/issues/812\r\n\r\nI also updated Fody and added a couple of file to the ignore '
843,'','Missing XML documentation warning\nCurrently the build issues a lot of missing xml documentation warnings because a lot of public APIs have no documentation. Either disable xml documentation or disable these warnings or document all public APIs?'
842,'','better obsolete doco for ConfigureComponent \nhttps://github.com/NServiceBus/NServiceBus/issues/812'
841,'','ActiveMq Defer, Sagas, Timeout, Notifications and Scheduling running\nThis also includes fixes for #839 and #840'
840,'','Make notificiations sender pluggable\nSmtpClient is hard wired with the notifications satellite. Especially for integration testing and acceptance testing or for third party clients the sender should be pluggable.'
839,'','When setting "dontWrapSingleMessages: true" on serializer the notification satellite fails\nWhen setting "dontWrapSingleMessages: true" on serializer the notification satellite fails because the serializer is not able to determine the message type.'
838,'',"Send.Register requires MVC 2 installed\nIt looks like the registered callback assumes MVC 2 is installed. Once I install MVC 2, the error goes away, and the registered callbacks all work. This is with the normal FullDuplex sample, which is just pure Generic Hosts around:\r\n\r\n2012-12-20 16:50:47,419 [10] ERROR MyClient.ClientEndpoint [(null)] <(null)> - Problem occurred when starting the endpoint.\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n   at NServiceBus.Unicast.Callback.NServiceBus.ICallback.Register[T](Action`1 callback)\r\n   at MyClient.ClientEndpoint.Run() in c:\\Program Files (x86)\\NServiceBus\\v3.3.3\\Samples\\FullDuplex\\MyClient\\ClientEndpoint.cs:line 27\r\n   at NServiceBus.Hosting.Configuration.ConfigManager.<>c__DisplayClass1.<Startup>b__0() in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\hosting\\NServiceBus.Hosting\\Configuration\\ConfigurationManager.cs:line 70\r\n\r\n=== Pre-bind state information ===\r\nLOG: User = BLAHBLAHBLAH\\Jimmy_Bogard\r\nLOG: DisplayName = System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (Fully-specified)\r\nLOG: Appbase = file:///C:/Program Files (x86)/NServiceBus/v3.3.3/Samples/FullDuplex/MyClient/bin/Debug/\r\nLOG: Initial PrivatePath = NULL\r\nCalling assembly : NServiceBus.Core, Version=3.3.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\r\n===\r\nLOG: This bind starts in default load context.\r\nLOG: Using application configuration file: C:\\Program Files (x86)\\NServiceBus\\v3.3.3\\Samples\\FullDuplex\\MyClient\\bin\\Debug\\MyClient.dll.config\r\nLOG: Using host configuration file:\r\nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config.\r\nLOG: Post-policy reference: System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/NServiceBus/v3.3.3/Samples/FullDuplex/MyClient/bin/Debug/System.Web.Mvc.DLL.\r\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/NServiceBus/v3.3.3/Samples/FullDuplex/MyClient/bin/Debug/System.Web.Mvc/System.Web.Mvc.DLL.\r\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/NServiceBus/v3.3.3/Samples/FullDuplex/MyClient/bin/Debug/System.Web.Mvc.EXE.\r\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/NServiceBus/v3.3.3/Samples/FullDuplex/MyClient/bin/Debug/System.Web.Mvc/System.Web.Mvc.EXE.\r\n"
837,'','Various AMQ improvments\n'
836,'johnsimons','Throw a better exception for Indexed properties on messages\nRelates to #832.\r\n\r\nIndexed properties were never meant to be supported on messages.\r\nWe should throw a nicer and helpful error message in case a message contains indexed properties.\r\n\r\n'
835,'johnsimons','Standardise Address configuration\nCurrently we have different "connection strings"  keys and `ConfigurationSections` to specify transport and persistence addresses.\r\n\r\nThe following are currently used as keys:\r\n* NServiceBus.RabbitMQ -> the RabbitMQ transport address\r\n* NServiceBus/Persistence ->this one is used by NHibernate persistence + the sql transport\r\n* NServiceBus.Persistence -> this one is used by Raven persistence\r\n* `<ActiveMqTransportConfig BrokerUri=""/>` -> this one uses a `ConfigurationSection` and is used by ActiveMQ\r\n\r\nWe should standardise all these "addresses" in one location.\r\n\r\nThe proposed solution is to put all these in the ConnectionStrings section using the following key names :\r\n* NServiceBus/Persistence  (we only need one since we only support one persistence type at runtime)\r\n* NServiceBus/Transport (we only need one since we only support one transport at runtime)\r\n\r\n'
834,'','Create common settings for DeadLetter queuing \nCreate common settings on the TransportConfig and refactor the msmq transport to use it'
833,'andreasohlund','Make message deferal pluggable so that transports can override if needed\nWe need this so that RabbitMq can override and use a more native way of doing it:\r\n\r\nhttp://www.javacodegeeks.com/2012/04/rabbitmq-scheduled-message-delivery.html\r\n\r\nthis probably applies to both ActiveMq and windows/Azure Service Bus as well\r\n\r\nIDeferMessages will likely be the abstraction'
832,'','System.Security.VerificationException,Message:Operation could destabilize the runtime.\nThe issue happens in our publisher process. This is its setup:\r\n\r\n\t Bus = NServiceBus.Configure\r\n\t\t\t\t\t  .With()\r\n\t\t\t\t\t  .DefineEndpointName("endpoint")\r\n\t\t\t\t\t  .Log4Net()\r\n\t\t\t\t\t  .DefaultBuilder()\r\n\t\t\t\t\t  .XmlSerializer()\r\n\t\t\t\t\t  .MsmqTransport()\r\n\t\t\t\t\t\t.IsTransactional(true)\r\n\t\t\t\t\t\t.PurgeOnStartup(false)\r\n\t\t\t\t\t  .DBSubcriptionStorage()\r\n\t\t\t\t\t  .DefiningEventsAs(t => t.Namespace != null\r\n\t\t\t\t\t\t && t.Namespace.Equals("SomeNamespace"))\r\n\t\t\t\t\t  .UnicastBus()\r\n\t\t\t\t\t\t.ImpersonateSender(false)\r\n\t\t\t\t\t  .CreateBus()\r\n\t\t\t\t\t  .Start(() => Configure.Instance\r\n\t\t\t\t\t\t.ForInstallationOn<NServiceBus.Installation.Environments.Windows>().Install());\r\n\r\nSo we have a base event class and decided to add a property bag which contains contextual information we need for some specific scenarios. This is how we implemented the event at first:\r\n\r\n    [Serializable()]\r\n\tpublic abstract class Event\r\n    {\r\n        public string Source { get; set; }\r\n\r\n        public DateTime Timestamp { get; set; }\r\n\r\n        public Dictionary<string, string> PropertyBag { get; set; }\r\n\r\n        public Event()\r\n        {\r\n            this.PropertyBag = new Dictionary<string, string>();\r\n        }\r\n\t}\r\n\r\nSo far so good. Now we decided to add some helper methods and also add an indexing operator to simplify access to the property bag:\r\n\r\n    [Serializable()]\r\n\tpublic abstract class Event\r\n    {\r\n        public string Source { get; set; }\r\n\r\n        public DateTime Timestamp { get; set; }\r\n\r\n        public Dictionary<string, string> PropertyBag { get; set; }\r\n\r\n        public Event()\r\n        {\r\n            this.PropertyBag = new Dictionary<string, string>();\r\n        }\r\n\r\n        public string this[string key]\r\n        {\r\n            get { return PropertyBag[key]; }\r\n            set { PropertyBag[key] = value; }\r\n        }\r\n\t}\r\n\r\nThe result: Kaboom! Everything stopped working. The logs showed the following (scary) error:\r\n\r\n> Exception:System.Security.VerificationException,Message:Operation could destabilize the runtime.,Stacktrace:   at lambda_method(Closure , Object )\r\n>    at NServiceBus.Serializers.XML.XmlMessageSerializer.Write(StringBuilder builder, Type t, Object obj) in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\impl\\Serializers\\NServiceBus.Serializers.XML\\XmlMessageSerializer.cs:line 698\r\n>    at NServiceBus.Serializers.XML.XmlMessageSerializer.WriteObject(String name, Type type, Object value, StringBuilder builder) in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\impl\\Serializers\\NServiceBus.Serializers.XML\\XmlMessageSerializer.cs:line 729\r\n>    at NServiceBus.Serializers.XML.XmlMessageSerializer.Serialize(Object[] messages, Stream stream) in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\impl\\Serializers\\NServiceBus.Serializers.XML\\XmlMessageSerializer.cs:line 647\r\n>    at NServiceBus.Unicast.UnicastBus.MapTransportMessageFor(Object[] rawMessages, TransportMessage result) in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1497\r\n>    at NServiceBus.Unicast.UnicastBus.SendMessage(List`1 addresses, String correlationId, MessageIntentEnum messageIntent, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 727\r\n>    at NServiceBus.Unicast.UnicastBus.Publish[T](T[] messages) in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 363\r\n\r\nWe were using version 3.2.7 and upgraded to 3.3.3 but this didn\'t fix the issue. The only workaround was to remove the indexing operator. '
831,'','Create ReturnToSourceQueue for all other transports\nWe either modify the existing ReturnToSourceQueue to be transport agnostic, which I think it may not be possible or we need to create a ReturnToSourceQueue per transport'
830,'johnsimons','Create a RabbitMQ nuget package\n'
829,'johnsimons',"DataBus bootstrapper too eager to fail on serialization\nThe DataBus config bootstrapper [deliberately fails](https://github.com/NServiceBus/NServiceBus/blob/master/src/databus/NServiceBus.Databus/Config/Bootstrapper.cs#L22) if any DataBus properties are not marked as serializable and a debugger is attached. This doesn't make sense if the `IDataBusSerializer` implementation doesn't require them to be. This means our service bus works fine, but can't be debugged.\r\n\r\n Please remove the eager failure or move it to something like `IDataBusSerializer.Validate(property)`."
828,'',"MSI installer preventing NServiceBus 3.3.3 side-by-side with 3.3.2\n![image](https://f.cloud.github.com/assets/104498/19575/45629982-4923-11e2-9e81-7333f7b61bfa.png)\r\n\r\nSee above. Not sure if it's just a build number versioning requirement (i.e., side-by-side w/ 3.2.x and 3.3.x, but not 3.3.x and 3.3.y)"
827,'','Use MSMQ as an "outbox" option in order to add store and forward capabilities to broker transports\nSimilar to this pattern - http://code.msdn.microsoft.com/windowsazure/Service-Bus-Durable-Sender-0763230d'
826,'',"runmefirst.bat fails when nuget is not installed\nBut isn't this script is intended for production machines as well as development machines?"
825,'',"Handler.OnMessage now retrows inner exception in case of TargetException\nHandler.OnMessage does currently Rethrow the reflection targetexception. Changed to to rethrow the inner exception which makes more sense. I decided to not reset the stack trace. Because it's only used in test"
824,'','RavenDb infrastructure installer should have a way to force RavenDb upgrade\nI have a development environment configuration tool that runs the NSB infrastructure installers.  The way the current RavenDb installer works, I will never be able to upgrade an existing instance when NSB ships a new version (like happened w/ 980).  Is there any way I can force an upgrade even if the normal conditions for install are not satisfied?'
823,'','ObjectBuilder support PerThreadScope\nAdd per ThreadScope for ObjectBuilder so that NSB can internally remove all thread statics and rely on the container to handle that properly'
822,'johnsimons','/endpointConfigurationType specified via cmd line is not added to service\nWhen we install a service using eg:\r\n`NServiceBus.Host.exe /install /endpointConfigurationType:"Server.EndpointConfig, Server"\'\r\nThe endpointConfigurationType if not included in the service path to execute:\r\n![Capture](https://f.cloud.github.com/assets/122651/9985/980c8554-44db-11e2-806f-b28743ecbf5b.PNG)\r\n\r\nMaking this setting useless!'
821,'andreasohlund','Create a RabbitMQ transport\nAdd support for using RabbitMQ as the underlying transport'
820,'','Configure.With().NLog() is not expressive enough\nIt supports an array of targets. but how do i control what targets are used for each logging level?'
819,'johnsimons','Check for XmlIgnore *before* throwing that a type is not allowed\n'
818,'',"NServiceBus.Host ignoring /startManually\nI've just been deploying some NServiceBus endpoints with the following arguments (in this order)\r\n\r\n/install /startManually /username:xxx /password:xxx NServiceBus.Production NServiceBus.Distributor\r\n\r\nbut the service is still specified as automatic start-up in service manager.\r\n\r\nI'm currently using NServiceBus 3.2.8"
817,'andreasohlund','Introduce a UsingTransport<T> profile to make transport selection more explicit\n'
816,'johnsimons','TimeoutStorage is configured for sendonly endpoints\nThe timeout manager should not be used if the endpoint is sendonly.\r\n\r\nOn line https://github.com/NServiceBus/NServiceBus/blob/3.4.0/src/NServiceBus.Core/Timeout/Hosting/Windows/Config/TimeoutManagerDefaults.cs#L12\r\n\r\nwe need to check if the endpoint is sendonly as well'
815,'andreasohlund','SubscriptionStorage should not query for the "__impl" type.\nIn the GetSubscriberAddressesForMessage method of the default SubscriptionStorage (NServiceBus.Unicast.Subscriptions.Raven.RavenSubscriptionStorage but it might be the same for other ISubscriptionStorage implementations), the logic currently also queries the storage for subscription to the "__impl" type. Clearly this should never happen - and it produces some unnecessary overhead. You could even argue that it should never query for any concrete types but just for interfaces - but that might break it for someone not using interfaces for events...\r\n\r\n \r\n \r\n'
814,'','Distributor is losing messages\nTo replicate start ScaleOut sample.\r\n\r\nOn the sender press enter continuously till you send at least 30+ messages.\r\nCheck the results.\r\n\r\nIn my computer I get the following:\r\n```\r\nSent PlacedOrder command with order id [order1].\r\n\r\nSent PlacedOrder command with order id [order2].\r\n\r\nSent PlacedOrder command with order id [order3].\r\n\r\nSent PlacedOrder command with order id [order4].\r\n\r\nSent PlacedOrder command with order id [order5].\r\n\r\nSent PlacedOrder command with order id [order6].\r\n\r\nSent PlacedOrder command with order id [order7].\r\n\r\nSent PlacedOrder command with order id [order8].\r\n\r\nSent PlacedOrder command with order id [order9].\r\n\r\nSent PlacedOrder command with order id [order10]\r\n\r\nSent PlacedOrder command with order id [order11]\r\n\r\nSent PlacedOrder command with order id [order12]\r\n\r\nSent PlacedOrder command with order id [order13]\r\n\r\nSent PlacedOrder command with order id [order14]\r\n\r\nSent PlacedOrder command with order id [order15]\r\n\r\nSent PlacedOrder command with order id [order16]\r\n\r\nSent PlacedOrder command with order id [order17]\r\n\r\nSent PlacedOrder command with order id [order18]\r\n\r\nSent PlacedOrder command with order id [order19]\r\n\r\nSent PlacedOrder command with order id [order20]\r\n\r\nSent PlacedOrder command with order id [order21]\r\n\r\nSent PlacedOrder command with order id [order22]\r\n\r\nSent PlacedOrder command with order id [order23]\r\n\r\nSent PlacedOrder command with order id [order24]\r\n\r\nSent PlacedOrder command with order id [order25]\r\n\r\nSent PlacedOrder command with order id [order26]\r\n\r\nSent PlacedOrder command with order id [order27]\r\n\r\nSent PlacedOrder command with order id [order28]\r\n\r\nSent PlacedOrder command with order id [order29]\r\n\r\nSent PlacedOrder command with order id [order30]\r\n\r\nSent PlacedOrder command with order id [order31]\r\n\r\nSent PlacedOrder command with order id [order32]\r\n\r\nSent PlacedOrder command with order id [order33]\r\n\r\nSent PlacedOrder command with order id [order34]\r\n\r\nSent PlacedOrder command with order id [order35]\r\n\r\nSent PlacedOrder command with order id [order36]\r\n\r\nSent PlacedOrder command with order id [order37]\r\n\r\nSent PlacedOrder command with order id [order38]\r\n\r\nSent PlacedOrder command with order id [order39]\r\n\r\nSent PlacedOrder command with order id [order40]\r\n\r\nSent PlacedOrder command with order id [order41]\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order5\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order9\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order8\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order4\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order7\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order1\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order3\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order6\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order36\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order32\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order33\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order34\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order35\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order37\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order38\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order39\r\nReceived [Ok] Return code for Placing Order.\r\nReceived Event OrderPlaced for orderId: order2\r\n````\r\n\r\nAs you can see I\'m missing quite a few "Received Event OrderPlaced ..."\r\n'
813,'','Support for NLog LogManager.Configuration\nso 3.4 supports NLog. And Nlog has the concept of a single "default" configuration\r\n\r\nhttps://github.com/nlog/nlog/wiki/Configuration-API\r\n\r\nSo I would expect this to work.\r\n\r\n            var config = new LoggingConfiguration();\r\n\r\n            var consoleTarget = new ColoredConsoleTarget();\r\n            config.AddTarget("console", consoleTarget);\r\n            var rule1 = new LoggingRule("*", LogLevel.Debug, consoleTarget);\r\n            config.LoggingRules.Add(rule1);\r\n\r\n            LogManager.Configuration = config;\r\n\r\n            Configure.With()\r\n                     .NLog();\r\n\r\n\r\nie NSB should pick up the config from LogManager.Configuration unless otherwise specified.\r\n\r\ninstead I get \r\n\r\n\t\tSystem.InvalidOperationException was unhandled\r\n\t\t\tHResult=-2146233079\r\n\t\t\tMessage=Sequence contains no elements\r\n\t\t\tSource=System.Core\r\n\t\t\tStackTrace:\r\n\t\t\t\t\t at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)\r\n\t\t\t\t\t at NServiceBus.Logging.Loggers.NLogAdapter.NLogConfigurator.Configure(Object[] targets, String level) in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\Logging\\Loggers\\NLogAdapter\\NLogConfigurator.cs:line 39\r\n\t\t\t\t\t at NServiceBus.SetLoggingLibrary.NLog(Configure config, Object[] targets) in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\SetLoggingLibrary.cs:line 89\r\n\t\t\t\t\t at ConsoleApplication1.Program.Main(String[] args) in c:\\Code\\ConsoleApplication1\\Program.cs:line 27\r\n'
812,'johnsimons','ConfigureComponent marked as obsolete with no help text\nSo ConfigureComponent has been maked as obsolete\r\n\r\nso this\r\n\r\n    config.Configurer.ConfigureComponent<MessageSerializer>(ComponentCallModelEnum.Singleton);\r\n\r\nshould now be this\r\n    \r\n    config.Configurer.ConfigureComponent<MessageSerializer>(DependencyLifecycle.SingleInstance);\r\n\r\nThis is fine but shouldnt it go through the Obsolete attribute process Warn>Error>Remove over multiple versions. \r\n\r\nAlso the attribute is currently\r\n\r\n    [Obsolete("Will be removed in version \'4.0\'.", true)]\r\n\r\nWhen it should be something like \r\n\r\n    [Obsolete("Will be removed in version \'4.0\'. Please use ConfigureComponent<T>(DependencyLifecycle) instead.", true)]\r\n'
811,'johnsimons','RunTimeoutManager removed when it should be marked as obsolete\nSo as I understand it timeout manager is on by default as of 3.4 so `.RunTimeoutManager` is redundant.\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/issues/317\r\n\r\nThis is fine but shouldnt it go through the Obsolete attribute process Warn>Error>Remove\r\n\r\nIf you have to remove it in 3.4 can u please have a Obsolete with an error and include information on "Why it is redundant"\r\n\r\n'
810,'','SendOnly moved from NServiceBus.Configure to NServiceBus.Config.Endpoint\n    NServiceBus.Configure.SendOnly\r\n\r\nmoved to \r\n\r\n    NServiceBus.Config.Endpoint.SendOnly\r\n\t\t\t\t\r\nand does not show here https://github.com/NServiceBus/NServiceBus/issues?labels=Not+backwards+compliant&milestone=26&page=1&state=closed'
809,'johnsimons','SendOnly test scenario is broken in 3.4 \nSo based on this sample\r\nhttp://nservicebus.com/OnewaySendonlyendpoints.aspx\r\n\r\nI have this code \r\n\r\n        var bus = Configure.With()\r\n             .DefineEndpointName("fakeNameForTests")\r\n               .DefaultBuilder()\r\n               .JsonSerializer()\r\n               .MsmqTransport()\r\n               .UnicastBus()\r\n               .SendOnly();\r\n\r\n        bus.Send("Audit", new TestMessage { Id = Guid.NewGuid() });\r\n\r\nWhich used to work in 3.3.2. Now in 3.4 it gives\r\n\r\n\t\tTest method MessageSender.Install threw exception: \r\n\t\tSystem.InvalidOperationException: No version of the endpoint could not be retrieved using the default convention, please specify your own convention using Configure.DefineEndpointVersionRetriever()\r\n\t\t\t\tat NServiceBus.Config.Conventions.EndpointHelper.GetEndpointVersion() in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\Config\\Conventions\\EndpointHelper.cs: line 56\r\n\t\t\t at NServiceBus.Configure.<.cctor>b__1() in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\Configure.cs: line 447\r\n\t\t\t at NServiceBus.Persistence.Raven.RavenPersistenceConstants.get_DefaultResourceManagerId() in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\Persistence\\Raven\\RavenPersistenceConstants.cs: line 52\r\n\t\t\t at NServiceBus.ConfigureRavenPersistence.RavenPersistence(Configure\xa0config) in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\ConfigureRavenPersistence.cs: line 51\r\n\t\t\t at NServiceBus.ConfigureTimeoutManager.UseRavenTimeoutPersister(Configure\xa0config) in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\ConfigureTimeoutManager.cs: line 33\r\n\t\t\t at NServiceBus.Timeout.Hosting.Windows.Config.TimeoutManagerDefaults.<.cctor>b__0() in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\Timeout\\Hosting\\Windows\\Config\\TimeoutManagerDefaults.cs: line 8\r\n\t\t\t at NServiceBus.Timeout.Hosting.Windows.Config.TimeoutManagerDefaults.Run() in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\Timeout\\Hosting\\Windows\\Config\\TimeoutManagerDefaults.cs: line 14\r\n\t\t\t at NServiceBus.Configure.<Initialize>b__f(Type\xa0t) in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\Configure.cs: line 313\r\n\t\t\t at System.Collections.Generic.List`1.ForEach(Action`1\xa0action)\r\n\t\t\t at NServiceBus.Configure.ForAllTypes(Action`1\xa0action) in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\Configure.cs: line 335\r\n\t\t\t at NServiceBus.Configure.Initialize() in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\Configure.cs: line 310\r\n\t\t\t at NServiceBus.Config.Endpoint.SendOnly(Configure\xa0config) in c:\\TeamCity\\buildAgent\\work\\a17072a5c5743007\\src\\NServiceBus.Core\\Config\\Endpoint.cs: line 32'
808,'','IMessageContext.TimeSent replaced with Bus.CurrentMessageContext.Headers[Headers.TimeSent]\nThings should be marked as obsolete for a version before being removed. This give people time to see the warning and make the appropriate changes. However you can see here that IMessageContext.TimeSent was removed when it does not have an obsolete attribute\r\nhttps://github.com/NServiceBus/NServiceBus/commit/8dd6b295702cbed54b0ef8341836dbb6d4668e45\r\n\r\nalso it is not documented as breaking change in 3.4 https://github.com/NServiceBus/NServiceBus/issues?labels=Not+backwards+compliant&milestone=26&page=1&state=closed\r\n\r\n'
807,'','messageTypes parameter added to IMeswsageSerializer.Deserialize\nin 4.0 IMeswsageSerializer, has changed from \r\n\r\n    public object[] Deserialize(Stream stream)\r\n\r\nto \r\n\r\n    public object[] Deserialize(Stream stream, IEnumerable<string> messageTypes = null)\r\n\r\n'
806,'johnsimons','SendLocal on workers causes workers to send extra ready messages\nWhen you use SendLocal on a worker, a ready message is sent back to the distributor when the message is handled. This makes the storage on the distributor grow erroneously by 1 for every time you do a SendLocal on a worker. \n\nThis is a "duplicate" of issue #571, just for SendLocal instead of SLR.\n\nHow to reproduce:\n\n1. Extend the ScaleOut sample by extending the ProcessOrderCommandHAndler to do a SendLocal(SomeCommand).\n2. Add a handler for SomeCommand.\n3. Start solution and send some orders.\n\nExpected behaviour:\n* Worker doing send local should NOT send ready messages back to the distributor when handling message it sent to itself with SendLocal and thus NOT increase the number of messages in order.handler.distributor.storage above 2.(which is the number of workers)\n\nObserved behaviour:\n* order.handler.distributor.storage increases unbounded by one every time you send an order.\n\nTested on 3.3.2\n'
805,'johnsimons','SQL Transport configuration fluent API\nWe should support both:\r\n* Specify connectionstring via Func\r\n* Specify ConnectionStringName\r\n\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/3.4.0/src/NServiceBus.Core/ConfigureSqlServerTransport.cs#L23'
804,'johnsimons','SqlServerTransportConfig is redundant\nThe sql transport should read its connectionstring from the prescribed [connectionString section](http://msdn.microsoft.com/en-us/library/bf7sd233(v=vs.100).aspx) instead of creating a new section `SqlServerTransportConfig`\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/3.4.0/src/NServiceBus.Core/Config/SqlServerTransportConfig.cs'
803,'johnsimons','Adjust the message on our license expired pop-up to be more gentle\nThe license popup:\r\n![Capture.PNG](https://f.cloud.github.com/assets/122651/2706/d6edd7de-424f-11e2-8475-b3345b7e115d.PNG)\r\n\r\nWe need to be able to answer the following questions:\r\n* Does this mean, I cannot continue working until I get a license?\r\n* But then I see the ignore option? Assuming, ignore will dismiss the dialog and run the endpoint in 1msg/sec throttled mode? \r\n\r\nWould be nice to know what the consequences are : ) \r\nThis dialog gives me the "Uh oh, you can\'t run this software until you\'ve got your license" instead of "Hey, seems like you have don\'t have your license squared away, until then your will be restricted to\r\nprocessing 1msg/sec"'
802,'andreasohlund','Added purging support for ActiveMQ\n'
801,'andreasohlund','Invalid usage of retrieving the main transport\nhttps://github.com/NServiceBus/NServiceBus/blob/3.4.0/src/NServiceBus.Core/Impersonation/ImpersonationManager.cs#L20\r\n\r\nThe above will retrieve a new  `ITransport`!'
800,'','Remove obligation that PurgeOnStartup needs to be specified before specifying any transport\n--\r\n\r\nIf you have calls like:\r\n\r\n`Configure.With().MsmqTransport().PurgeOnStartup(true);` this will never execute purge on startup. Because when defining\r\n\r\n```\r\n    config.Configurer.ConfigureComponent<MsmqDequeueStrategy>(DependencyLifecycle.InstancePerCall)\r\n           .ConfigureProperty(p => p.PurgeOnStartup, ConfigurePurging.PurgeRequested);\r\n```\r\n`ConfigurePurging.PurgeRequested` is false and the static property value false is assigned to the configuration syntax. When `MsmqDequeueStrategy` or any other dequeue strategy is built the property is always false. It only works if:\r\n\r\n```\r\nConfigure.With().PurgeOnStartup(true).MsmqTransport();\r\n```\r\n\r\nis specified'
799,'johnsimons','ObjectDisposedExceptions are thrown during operations\nThe Rhino licencing component seems to be doing some async licensing check, and if you are running in the debugger and have break-on-CLR-exceptions turned on, it occasionally will break with this stack:\r\n\r\nSystem.dll!System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP) + 0x112 bytes\t\r\n \tNServiceBus.Core.dll!Rhino.Licensing.SntpClient.EndReceive(System.IAsyncResult ar) + 0x84 bytes\tUnknown\r\n \tSystem.dll!System.Net.LazyAsyncResult.Complete(System.IntPtr userToken) + 0xc8 bytes\t\r\n \tmscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) + 0x285 bytes\t\r\n \tmscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) + 0x9 bytes\t\r\n \tmscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) + 0x57 bytes\t\r\n \tSystem.dll!System.Net.ContextAwareResult.Complete(System.IntPtr userToken) + 0xc2 bytes\t\r\n \tSystem.dll!System.Net.Sockets.BaseOverlappedAsyncResult.CompletionPortCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* nativeOverlapped) + 0x121 bytes\t\r\n \tmscorlib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP) + 0x96 bytes\t\r\n\r\nThis does not take down the process, but is not a good sign.\r\n\r\n### To verify\r\n\r\nStart an endpoint, use Fiddler to check that no SNTP requests are being issued by the endpoint'
798,'johnsimons','Make make the integration profile use Raven as subscription storage\n'
797,'johnsimons','Raven persistence is always configured by the default production profile\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/hosting/NServiceBus.Hosting.Windows/Profiles/Handlers/ProductionProfileHandler.cs#L13\r\n\r\nWe should refactor this to detect if the user has chosen anothe persitence tech\r\n\r\nAlso check if sagas are enabled before defaulting the raven saga persister\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/hosting/NServiceBus.Hosting.Windows/Profiles/Handlers/ProductionProfileHandler.cs#L15 '
796,'',"distributor when running on same machines with workers\nhttp://tech.groups.yahoo.com/group/nservicebus/message/17197\n\n* it also helps during deployments - to make workers go to idle before reconfiguring service with new set of binaries.\n* this type of infrastructure are intermediate steps when we scale out.  We start all projects with a basic distributor per module initially.  \n\n\nThe current approach changes the endpoint name of the worker when I've explicitly set  DefineEndpointName.\n\n\nThe changeset removes the specific line causing a random guid being appended when enlisting the worker to the distributor.\n"
795,'johnsimons','init.ps1 causing significant lag when solution is opened in VS\n** The following was originally posted to the yahoo discussion group (http://tech.groups.yahoo.com/group/nservicebus/message/17185), but copied here by request.\n\nWe recently upgraded our VS solution to use NServiceBus 3 and we installed it via the nuget package. And ever since, when I open visual studio it hangs before finally popping up an NServiceBus web site with some red x\'s. I discovered this behavior is in the NServiceBus nuget package in the init.ps1 script. And my simple hack to restore my visual studio load time was just to rename this file...\n\nI think this init.ps1 file is a terrible idea and I\'d like to explain why I think setting up NSB should be opt in, and not run automatically when you open a solution file!\n\n#1: Not every member of the team needs to have NServiceBus configured locally. In order to make it very easy for devs to get started with a project, we mock out most services by default. Allowing devs to start with the bare minimum of infrastructure possible, and turn on only the pieces of the application they might actually be working on. The init.ps1 is making the exact opposite assumption, that every dev MUST have NServiceBus fully configured. I don\'t think this decision should be up to a NuGet package!\n\n#2: It\'s failing. I don\'t know why, but it has failed to install Msmq, DTC, and RavenDB (maybe because my VS isn\'t running as admin?). Whatever the cause, I don\'t care (yet) because of #1. The result of it failing is that it fails EVERY TIME I open the solution causing significant lag. \n\n#3: Running a script that could take a noticeable amount when a VS solution opens just doesn\'t seem like a good idea.\n\nFinally, it looks like there is a way to disable this script by setting the HKCU:SOFTWARE\\NServiceBus\\DontCheckMachineSetup registry key. Obviously I found it significantly easier to to just rename init.ps1 in the packages folder than to set a *registry* key!\n\nI\'d much rather see this script exposed through the nuget console and not run automatically in init.ps1.\n\nThe version is NServiceBus 3.3.0.\nIn answer to the request here: http://tech.groups.yahoo.com/group/nservicebus/message/17188\nThe install-* commandlets all fail immediately with "You need to run this command with administrative rights."  So they are not the cause of the slow down.  Perhaps the cause is in $dte.ExecuteCommand(...)?\n\nWhich reminds me to mention that even if this wasn\'t slow, I would absolutely not want a webpage to open up in VS every time I opened my solution...  I think you can understand how annoying that is.\n\nThanks,\nKevin'
793,'','ActiveMqMessageDequeueStrategy will suffer from contention on Receive\nAt the moment [ActiveMqMessageDequeueStrategy ](https://github.com/NServiceBus/NServiceBus/blob/3.4.0/src/ActiveMQ/NServiceBus.ActiveMQ/ActiveMqMessageDequeueStrategy.cs) is starting as many `INotifyMessageReceived` as specified which in turn are subscribing to `IMessageConsumer.Listener`, the problem is that all these `ActiveMqMessageReceiver` are listening to the same queue for receive messages, which will produce lots of contention with 20+ threads!'
792,'','ActiveMqMessageDequeueStrategy is using the ThreadPool\n[ActiveMqMessageDequeueStrategy](https://github.com/NServiceBus/NServiceBus/blob/3.4.0/src/ActiveMQ/NServiceBus.ActiveMQ/ActiveMqMessageDequeueStrategy.cs) uses the ThreadPool to execute handlers.\r\n\r\nThis should be changed to use its own MTA thread with IsBackground = true.\r\n'
791,'','Create INFO logs for all messages found by the endpoint \nThis will make it easier to debug issues with conventions.\r\n\r\n* Also output how many handlers where found for each message.\r\n* The code for this needs to move out of the unicastbus so this is a good time to refactor it'
790,'johnsimons','Poco IAmStartedByMessages fails to start a saga\nIf you use IAmStartedByMessages with a poco object (no IMessage, ICommand etc) the saga does not start. \n\nTo replicate \n\n * Go to the timeout manager sample \n * change it to use   JsonSerializer\n * Remove `:IMessage` from `StartSagaMessage` \n * Set a breakpoint in `public void Handle(StartSagaMessage message)`\n * Then run and send the message. \n\nInstead of hitting the breakpoint you will get the warning \n\n    Could not find a saga for the message type MyServer.Saga.StartSagaMessage with id f4f99d02-13dd-4ad9-a042-088bc1c279ff\\10463. Going to invoke SagaNotFoundHandlers.\n\nEither this scenario should be supported or NSB should through an exception.'
789,'andreasohlund','Create nuget package for ActiveMQ\n'
788,'johnsimons','Nuget package for NServiceBus.Host32 sets incorrect exe in project settings\nFrom Package Manager Console, \ninstall-package nservicebus.host32 for a newly generated class library project\nHit f5\n\nThe Start External Program points to NServiceBus.Host.exe instead of the 32 bit version.\n\n\n\n'
787,'','TransportMessageHandlingFailedException is not unwrapped properly\nThe incorrect exception shows up on the headers in the errorq, see discussion below'
786,'','Command line switch /startManually is ignored\nIf I call:\n\n    NServiceBus.Host.exe /install /startManually\n\nThe service will still be set to start automatically. \n\nI can confirm that this code is in fact called:\n\n    if (arguments.StartManually != null)\n    {\n        x.DoNotStartAutomatically();\n    }\n\nSo there must be a bug in TopShelf...'
785,'johnsimons','On a critical error, shut down the bus\nThe default [onCriticalErrorAction ](https://github.com/NServiceBus/NServiceBus/blob/3.4.0/src/NServiceBus.Core/ConfigureCriticalErrorAction.cs#L10) should shut down the bus in a graceful way.\r\n\r\nThis should also shut down all the satellites.\r\n\r\nWe need to expose a way to shut down the bus.'
784,'johnsimons','Do not post append "(SideBySide)" to the display service name\nWe shouldn\'t post append "(SideBySide)" to the display service name when we are performing a sidebyside install.\r\nBoth the service and display names already contain the semver making them distinct.'
783,'','Emitting performance counters for subqueues\nAt the moment we have performance counter enabled for endpoint subqueues, like notifications, timeouts, retires,...\n\nShould this be on for subqueues?\n\nShould it be configurable per satellite?'
782,'','Add better admin support via http\nHave each endpoint run a httpserver by default\n\nhttp://myserver/MyEndpoint/Admin\n\nThat gives access to endpoint info and statistics.\n\nAllows the user to:\n\n* Mute/UnMute\n* Control Throughput and parallelism\n* Take workes offline from the distributor\n* etc etc'
781,'','Add message processing time performance counter\nThis would be good for diagnostics for developer to find out what is the avg, max, min time.'
780,'andreasohlund','Concolidate thread backoff (SleepTimeBetweenPolls) into the PollingDequeueStrategy\nToday we sleep in both Azure and Sql implementations we should move this into:\n\nhttps://github.com/NServiceBus/NServiceBus/blob/3.4.0/src/NServiceBus.Core/Unicast/Transport/Transactional/DequeueStrategies/PollingDequeueStrategy.cs#L63\n\n'
779,'','The order where DefineEndpointName is specified in the fluent API should not matter\nThe new api requires the endpoint name to be specified up front:\r\n\r\n```\r\nconfiguration.EndpointName("someName");\r\n```\r\n--\r\n\r\nOld api:\r\n\r\n```c#\r\nConfigure.With().DefineEndpointName("endpoint").DefaultBuilder(); // Works with name "endpoint"\r\nConfigure.With().DefaultBuilder().DefineEndpointName("endpoint"); // Uses default name (assembly lowercased)\r\n```\r\n\r\n'
777,'','Refactor the SLR to be a first class concept in the TransactionalTransport\nSince currently its hardcoded into the faults forwarder'
776,'johnsimons','Add AttributeUsageAttribute to UniqueAttribute class\nBased on the outcome of  #772, we need to add:\r\n` [AttributeUsage(AttributeTargets.???, Inherited = false)]`\r\nto UniqueAttribute class.\r\n'
775,'','High CPU usage on idle state\nStart TimeoutManager sample and do nothing.\r\nOn my machine the NServiceBus.Host.exe keeps on going up and down!'
774,'andreasohlund','Nuget install.ps1 include start program multiple times\nThe nuget [install.ps1](https://github.com/NServiceBus/NServiceBus/blob/master/NuGet/NServiceBus.Host/tools/install.ps1#L8) adds:\r\n```xml\r\n<PropertyGroup>\r\n    <StartAction>Program</StartAction>\r\n    <StartProgram>$(ProjectDir)$(OutputPath)NServiceBus.Host.exe</StartProgram>\r\n</PropertyGroup>\r\n```\r\neven if user already has this defined!\r\n\r\nMaybe we should try to use the DTE to add this?\r\n'
773,'johnsimons','Turn on Raven compression by default\nAnd add a way to Disable it:\r\n`.DisableRavenRequestCompression()` '
772,'johnsimons','Sagas ConfigureMapping should support public fields\n`ConfigureMapping<MyMessage>(s => s.TransactionId, m => m.TransactionId);`\r\n\r\nAt compile-time I\'ve no negative feedback. :smile: \r\n"MyMessage" is a type defined like this:\r\n```C#\r\npublic class MyMessage : IMessage\r\n{\r\n    ...\r\n    public Guid TransactionId;\r\n    ...\r\n}\r\n```\r\nRunning this saga produces the following error:\r\n`System.ArgumentException: Member is not a property`\r\n\r\nSo, I\'ve tried to investigate through the codebase and I\'ve found that within ConfigureHowToFindSagaWithMessageDispatcher there\'s the implementation of "IConfigureHowToFindSagaWithMessage.ConfigureMapping<TSagaEntity, TMessage>" that explicitly lookup for a property:\r\n```c#\r\nvoid IConfigureHowToFindSagaWithMessage.ConfigureMapping<TSagaEntity, TMessage>(Expression<Func<TSagaEntity, object>> sagaEntityProperty, Expression<Func<TMessage, object>> messageProperty)\r\n{\r\n    var sagaProp = Reflect<TSagaEntity>.GetProperty(sagaEntityProperty, true);\r\n    var messageProp = Reflect<TMessage>.GetProperty(messageProperty, false);\r\n    ...\r\n}\r\n```'
771,'johnsimons',"Incorrect MSMQ perms cause high CPU in web application\nI've seen multiple examples of this problem now on Stack Overflow: [Example 1][1] and [Example 2][2]\n\nEssentially you create a webapp, and it runs once, and the queues get created for it, but then you monkey around with IIS and change the account the webapp runs under.\n\nThe result is a tight loop causing max CPU:\n\n1. Try to get a message from the queue\n2. Don't have proper permissions to get a message from the queue\n3. Wash, rinse, repeat.\n\nI think the solution for this should be twofold:\n\n1. Raise the issue visibly on the website. Too frequently the problem isn't observed by browsing unless you specifically trigger some Bus-dependent code. People frequently don't have the logging output from a web-hosted Bus to tell them there's a problem.\n2. Introduce some sleeps so that while the problem is being fixed, the processor at least is not maxed out. Maybe some sort of back-off system - after 10 successive failures start sleeping 10ms, then after 100 go to 100ms, or whatever - something like how RavenDB handles failovers. Or maybe this isn't a problem that can possibly be transient and there's no way it can be fully corrected save for a full app pool recycle, and in that case it should just blow up on bus initialization and stay blown up.\n\n[1]: http://stackoverflow.com/questions/13608560/mqsvc-exe-pegs-cpu-at-full-usage-when-deploying-nservicebus-to-production/13611841#13611841\n[2]: http://stackoverflow.com/questions/11848342/high-cpu-usage-with-nservicebus-when-iis-hosted-asp-net-and-wcf/11938432#11938432"
770,'','There should be a method for testing that no events was published\nTo test that no side effects has occurred easier there should be a method for testing that no events was published. Something like:\n\n            Test.Handler<OrderAcceptedHandler>()\n                .ExpectNoEventPublished()\n                .OnMessage<OrderAccepted>(m =>\n                    {\n                        m.CustomerId = 1;\n                        m.ProductId = 1;\n                        m.OrderValue = 5000;\n                    });\n'
769,'','ExpectNotPublish should have an empty overload\nTo check that an event is not published the method `ExpectNotPublish` should have an empty overload.\n\nI want to write something like: \n\n            Test.Handler<OrderAcceptedHandler>()\n                .ExpectNotPublish<CustomerMadePreferred>()\n                .OnMessage<OrderAccepted>(m =>\n                    {\n                        m.CustomerId = 1;\n                        m.ProductId = 1;\n                        m.OrderValue = 5000;\n                    });'
768,'johnsimons','Autosubscribe doesnt work when using namespace in mapping\nTo reproduce define the subscribedevents using the namespace mapping. This causes no autosubscription message to be sent'
767,'johnsimons','Conventions no longer works if set in IWantToRunBeforeConfiguration\nSome change in 3.4.0 has broken the support from setting the message conventions from a class implementing IWantToRunBeforeConfiguration. To repro modify the unobtrusive sample to set the conventions is a class implementing IWantToRunBeforeConfiguration instead of doing it in the endpoint config'
766,'','Testing framework should have more informative message\nRunning a simple test  where I have \n\n    Test.Handler<RequestWithResponseHandler>()\n        .ExpectReturn<int>(y => y == 0)\n        .OnMessage<RequestWithResponse>(m => m.SaySomething = "");\n\nWhen failing I get the message "System.Exception : ExpectedReturnInvocation<System.Int32> not fulfilled."\n\nThis should give me more information about what I expected and what I got. It should print out the message and the expression that was wrong.'
765,'johnsimons','Upgrade the Castle Windsor container to the latest 3.1 release\n'
764,'','Validate that Configure.With() isn\'t called twice\nIf a user by missttake puts IWantToRunBeforeConfiguration instead of IWantCustomInitalization on his endpoint config we\'ll call Configure.With() multiple times and "reset" the config, The second call to With() should throw'
763,'',"XmlNamespace isn't validated\nIf a client sends with XmlNamepace == http://acme.com and the server uses the default http://tempuri.net no exception is thrown. Figure out if this is by design?"
762,'johnsimons','Should be Import-Module\nhere http://nservicebus.com/powershell.aspx\n \n    ImportModule .\\NServiceBus.Core.dll\n\nshould be \n\n    Import-Module .\\NServiceBus.Core.dll'
761,'','Create a gateway channel for FTP\n'
760,'','Move the ftp transport to the contrib\nIncluding the sample'
759,'johnsimons','Add hook to specify number of working threads per satellite\nWe need to give more control to customise satellites to other hosts like Azure.\r\n\r\nAlso have a way to set the default. Windows defaults to "Same a main transport" but Azure should default to 1'
758,'johnsimons','Add HKLM for scanning of license\nRelates to #672\r\n\r\nBased on some demand for it in mailing list, see http://tech.groups.yahoo.com/group/nservicebus/message/16796'
757,'andreasohlund','"Unable to delete file" error being thrown in RavenDB when trying to start multiple endpoints at once\nWhen I try to start multiple (between 5 and 10) NServiceBus hosts at one time, I receive the error shown below in some endpoints:\n\n> 2012-11-20 13:32:05,044 [1] FATAL - (null) - NServiceBus.Hosting.GenericHost - System.AggregateException: One or more errors occurred. ---> System.IO.IsolatedStorage.IsolatedStorageException: Unable to delete file.\n   at System.IO.IsolatedStorage.IsolatedStorageFile.DeleteFile(String file)\n   at Raven.Client.Document.DTC.PendingTransactionRecovery.Execute(IDatabaseCommands commands) in c:\\Work\\ravendb-1.0\\Raven.Client.Lightweight\\Document\\DTC\\PendingTransactionRecovery.cs:line 73\n   --- End of inner exception stack trace ---\n   at Raven.Client.Document.DTC.PendingTransactionRecovery.Execute(IDatabaseCommands commands) in c:\\Work\\ravendb-1.0\\Raven.Client.Lightweight\\Document\\DTC\\PendingTransactionRecovery.cs:line 81\n   at Raven.Client.Document.DocumentStore.RecoverPendingTransactions() in c:\\Work\\ravendb-1.0\\Raven.Client.Lightweight\\Document\\DocumentStore.cs:line 410\n   at Raven.Client.Document.DocumentStore.Initialize() in c:\\Work\\ravendb-1.0\\Raven.Client.Lightweight\\Document\\DocumentStore.cs:line 402\n   at NServiceBus.ConfigureRavenPersistence.EnsureDatabaseExists(DocumentStore store) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\impl\\Persistence\\RavenPersistence\\NServiceBus.Persistence.Raven\\Config\\ConfigureRavenPersistence.cs:line 186\n   at NServiceBus.ConfigureRavenPersistence.RavenPersistence(Configure config, IDocumentStore store) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\impl\\Persistence\\RavenPersistence\\NServiceBus.Persistence.Raven\\Config\\ConfigureRavenPersistence.cs:line 150\n   at NServiceBus.ConfigureRavenPersistence.RavenPersistence(Configure config) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\impl\\Persistence\\RavenPersistence\\NServiceBus.Persistence.Raven\\Config\\ConfigureRavenPersistence.cs:line 54\n   at NServiceBus.Hosting.Windows.Profiles.Handlers.ProductionProfileHandler.NServiceBus.Hosting.Profiles.IHandleProfile.ProfileActivated() in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\hosting\\NServiceBus.Hosting.Windows\\Profiles\\Handlers\\ProductionProfileHandler.cs:line 13\n   at NServiceBus.Hosting.Profiles.ProfileManager.<ActivateProfileHandlers>b__1c(IHandleProfile hp) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\hosting\\NServiceBus.Hosting\\Profiles\\ProfileManager.cs:line 143\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\n   at NServiceBus.Hosting.Profiles.ProfileManager.ActivateProfileHandlers() in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\hosting\\NServiceBus.Hosting\\Profiles\\ProfileManager.cs:line 144\n   at NServiceBus.Hosting.Profiles.ProfileActivator.Run() in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\hosting\\NServiceBus.Hosting\\Profiles\\ProfileActivator.cs:line 20\n   at NServiceBus.Configure.<Initialize>b__c(Type t) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\config\\NServiceBus.Config\\Configure.cs:line 296\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\n   at NServiceBus.Configure.ForAllTypes[T](Action`1 action) in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\config\\NServiceBus.Config\\Configure.cs:line 317\n   at NServiceBus.Configure.Initialize() in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\config\\NServiceBus.Config\\Configure.cs:line 299\n   at NServiceBus.Configure.CreateBus() in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\config\\NServiceBus.Config\\Configure.cs:line 263\n   at NServiceBus.Hosting.GenericHost.Start() in c:\\TeamCity\\buildAgent\\work\\nsb.master_1\\src\\hosting\\NServiceBus.Hosting\\GenericHost.cs:line 30\n---> (Inner Exception #0) System.IO.IsolatedStorage.IsolatedStorageException: Unable to delete file.\n   at System.IO.IsolatedStorage.IsolatedStorageFile.DeleteFile(String file)\n   at Raven.Client.Document.DTC.PendingTransactionRecovery.Execute(IDatabaseCommands commands) in c:\\Work\\ravendb-1.0\\Raven.Client.Lightweight\\Document\\DTC\\PendingTransactionRecovery.cs:line 73<---\n\nI am starting the endpoints by debugging inside Visual Studio 2012. The error does not seem to occur if I just start a single endpoint at a time.\n\nFrom looking at the stack trace, the problem appears to be related to pending/incomple DTC transactions. Here is an excerpt of the log file from RavenDB that seems like it is relevant:\n> 2012-11-20 13:39:21.8550,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,"Attachment with key \'transactions/recoveryInformation/b89a4cd0-0906-4001-8232-9ec994f4f0b9\' was not found, and considered deleted",\n2012-11-20 13:39:21.8550,Raven.Database.Indexing.WorkContext,Debug,Incremented work counter to 2 because: ROLLBACK b89a4cd0-0906-4001-8232-9ec994f4f0b9,\n2012-11-20 13:39:21.8550,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 2, for: IndexingExecuter, will wait for additional work",\n2012-11-20 13:39:21.8670,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 2, for: ReducingExecuter, will wait for additional work",\n2012-11-20 13:39:21.8670,Raven.Database.Server.HttpServer,Debug,Request #  34: POST    -    19 ms - MyHandler - 200 - /transaction/rollback?tx=b89a4cd0-0906-4001-8232-9ec994f4f0b9,\n\nNote the last entry indicates that a rollback is being attempted on the "MyHandler" database. "MyHandler" is the name of the endpoint that received the "unable to delete file" exception.\n'
756,'andreasohlund','Introduce a throughput performance counter\nAdd a counter that displays the current throughput in msg/s for each transport.\r\n\r\nRelated to #608'
755,'johnsimons','Raven unit of work is not disposing of session in case of exception\nSimple saga that correlates that it got both CommandA and CommandB with a common orderId, a guid. I concurrently send in CommandA and CommandB(with the same guid in both messages). Having multiple worker threads enabled this leads to 2 threads each trying to create the saga. One of them gets a Raven.Abstractions.Exceptions.ConcurrencyException because of the optimistic locking. No problem, NServiceBus automatically retries the victim and the saga completes correctly and is removed from RavenDB as it should.\r\n\r\nNow the interesting part. I repeat the scenario by generating new tuples of CommandA and CommandB(with new matching guids). Same thing happens, except that regularly the saga data documents for some of the sagas are not removed from RavenDB. Or more precisely, they are actually removed on saga completion but reappear(!) when later sagas complete. \r\n\r\nSay I have 3 sagas: \r\nSaga1(CommandA1, CommandB1, OrderId=guid1). It completes at time T1.\r\nSaga2(CommandA2, CommandB2, OrderId=guid2). It completes at time T2.\r\nSaga3(CommandA3, CommandB3, OrderId=guid3). It completes at time T3.\r\n\r\nSaga1 completes and is removed. Saga2 completes and is removed. At this point, NO saga data documents for T1 and T2 are in the data store. Then Saga3 completes, but as the transaction that removes saga3 commits, a copy of Saga1 reappears in the raven store. This new copy of Saga1 gets a modified timestamp of T3, which is really weird considering saga1 completed at T1. I\'ve looked at the RavenDB logs and I\'m pretty sure I\'m seeing a PUT of Saga1 in the very same transaction that DELETES Saga3. \r\n\r\nSetting worker threads to just 1 removes the problem. All sagas complete and everything is removed from RavenDB.\r\n\r\nI\'m "pretty sure" I\'m not doing anything unsupported here. Shared saga storage is a must for any scale out scenario, so anybody have an idea on what\'s going on here? Raven session not cleared before reuse of a worker thread?\r\n\r\n```c#\r\npublic interface CommandA : ICommand\r\n{\r\nGuid OrderId { get; set; }\r\n}\r\n\r\npublic interface CommandB: ICommand\r\n{\r\nGuid OrderId { get; set; }\r\n}\r\n\r\npublic class SagaData : IContainSagaData\r\n{\r\npublic Guid Id { get; set; }\r\npublic string Originator { get; set; }\r\npublic string OriginalMessageId { get; set; }\r\n\r\n[Unique]\r\npublic Guid OrderId { get; set; }\r\npublic bool GotA { get; set; }\r\npublic bool GotB { get; set; }\r\n}\r\n\r\npublic class Saga : Saga<SagaData>, IAmStartedByMessages<CommandA>, IAmStartedByMessages<CommandB>\r\n{\r\npublic override void ConfigureHowToFindSaga()\r\n{\r\nConfigureMapping<CommandA>(s => s.OrderId, m => m.OrderId);\r\nConfigureMapping<CommandB>(s => s.OrderId, m => m.OrderId);\r\n}\r\n\r\npublic void Handle(CommandA command)\r\n{\r\nData.OrderId = command.OrderId;\r\nData.GotA = true;\r\nTryFinish();\r\n}\r\n\r\npublic void Handle(CommandB command)\r\n{\r\nData.OrderId = command.OrderId;\r\nData.GotB = true;\r\nTryFinish();\r\n}\r\n\r\nprivate void TryFinish()\r\n{\r\nif (Data.GotA && Data.GotB)\r\n{\r\nMarkAsComplete();\r\n}\r\n} \r\n}\r\n\r\npublic class EndpointConfig : IConfigureThisEndpoint, AsA_Publisher, IWantCustomInitialization\r\n{\r\nprivate const string EndpointName = "Test";\r\n\r\npublic void Init()\r\n{\r\nSetLoggingLibrary.Log4Net(log4net.Config.XmlConfigurator.Configure);\r\nConfigure.With()\r\n.DefineEndpointName(EndpointName)\r\n.Log4Net()\r\n.DefaultBuilder() \r\n.XmlSerializer()\r\n.MsmqTransport()\r\n.IsolationLevel(System.Transactions.IsolationLevel.RepeatableRead)\r\n.Sagas()\r\n.RavenSagaPersister()\r\n.UseRavenTimeoutPersister()\r\n.RavenSubscriptionStorage()\r\n.UnicastBus()\r\n.DisableSecondLevelRetries();\r\n}\r\n}\r\n```\r\n\r\nI\'ve created a complete narrowed down repro as a git repository: https://github.com/janovesk/nservicebus_multiissues\r\n\r\nThe SagaTest project is a saga endpoint that listens on queue "test". Run it with NServiceBus.Host.Exe NServiceBus.Integration. The Sender project is a small console helper that generates a new tuple of CommandA and CommandB and sends them to the saga endpoint. Simply press enter to generate a new tuple. I can repro the issue on multiple machines by installing RavenDB 980, starting both projects and just pressing enter a couple of times. Expected end result is NO saga data in RavenDB, actual result is saga data still in RavenDB.'
754,'','Sagas: ConfigureMapping and fields\nHello!\r\nJohn Simons asked me to raise bug for the following issue.\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/16766\r\n\r\nI\'m going to have a problem with ConfigureMapping in a "Sagas" scenario.\r\nThis is a simple snippet:\r\n\r\n    ConfigureMapping<MyMessage>(s => s.TransactionId, m => m.TransactionId);\r\n\r\nAt compile-time I\'ve no negative feedback. :-)\r\n"MyMessage" is a type defined like this:\r\n\r\n    public class MyMessage : IMessage\r\n    {\r\n        ...\r\n        public Guid TransactionId;\r\n        ...\r\n    }\r\n\r\nRunning this saga produces the following error:\r\n\r\n    System.ArgumentException: Member is not a property\r\n\r\nSo, I\'ve tried to investigate through the codebase and I\'ve found that within ConfigureHowToFindSagaWithMessageDispatcher there\'s the implementation of "IConfigureHowToFindSagaWithMessage.ConfigureMapping<TSagaEntity, TMessage>" that explicitly lookup for a property:\r\n\r\n    void IConfigureHowToFindSagaWithMessage.ConfigureMapping<TSagaEntity, TMessage>(Expression<Func<TSagaEntity, object>> sagaEntityProperty, Expression<Func<TMessage, object>> messageProperty)\r\n    {\r\n        var sagaProp = Reflect<TSagaEntity>.GetProperty(sagaEntityProperty, true);\r\n        var messageProp = Reflect<TMessage>.GetProperty(messageProperty, false);\r\n        ...\r\n    }\r\n\r\nIs there a reason for which no field lookup logic has been added?\r\nThanks in advance.'
753,'andreasohlund','Introduce a TransportConfig section to hold the settings for retries and parallelism (number of threads)\nThe current settings is on the MsmqTransportConfig element which is obviously tied to Msmq\r\n\r\nExample usage:\r\n\r\n\r\n```\r\n  <TransportConfig MaxDegreeOfParallelism="30" MaxRetries="2"/>\r\n```\r\nAnd with the section:\r\n```\r\n <section name="TransportConfig" type="NServiceBus.Config.TransportConfig, NServiceBus.Core"/>\r\n```'
752,'johnsimons','DoNotCreateQueues is broken\nSeems like it been broken we refactored the queue creation. \r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/unicast/NServiceBus.Unicast.Msmq/NServiceBus.Unicast.Transport.Msmq.Config/ConfigureMsmqTransport.cs#L15'
751,'','Remove MsmqTransportConfig completely\nReplacement is `TransportConfig` section instead'
749,'','Allow users to Mute/Unmute the bus\nIn order to better support scenarios where messages are being replayed we should enable users to Mute/Unmute the bus. When the bus is muted no messages are beeing sent even if Send|Publish is being called.'
747,'johnsimons','Force raven to use the default/given port when installing\nTo avoid confusion when raven starts up and chooses a port we should make sure that it either uses the default 8080 or the one requested by the user.\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/Setup/NServiceBus.Setup.Windows/RavenDB/RavenDBSetup.cs#L38'
746,'johnsimons','Find a available port to install raven on if 8080 is taken\nFind port\r\nTell raven to use it\r\nSave the port in the registry so that nsb uses it by default'
745,'johnsimons','Improve the exception message when failing to connect to raven db\nCatch it and tell the user to check if the mgmt studio is working. If not figure out where raven is and add a connection string to redirect the endpoint accordingly'
744,'johnsimons',"TimeoutDispatcherProcessor Stop fails with NullReferenceException\nI'm using 3.4 development branch. I have a component which uses IWantToRunWhenBusStartsAndStops. Interestingly when this component is added even without implementation I can produce a race condition in the TimeoutDispatcherProcessor. The Stop method tries to Stop the internal TimeoutPersisterReceiver which can be null. I think the code should check for:\r\n\r\n        public void Stop()\r\n        {\r\n            if (timeoutPersisterReceiver != null)\r\n            {\r\n                timeoutPersisterReceiver.Stop();\r\n            }\r\n\r\n            if (inputTransport != null)\r\n            {\r\n                inputTransport.Dispose();\r\n            }\r\n        }"
743,'','Better support for centralized routing\nConfig override that reads from a central DB to get the message mappings. Fallback to last known good config if central "server" is done'
742,'johnsimons','NuGet init warns for non existing Raven even if the user is running it manually on the console\nAdd a check for the Raven.Server.exe running as well. Current workaround is to add the DontCheckMachineSetup erg key\r\n\r\nWindows Registry Editor Version 5.00\r\n\r\n[HKEY_CURRENT_USER\\Software\\NServiceBus\\3.3]\r\n"DontCheckMachineSetup"="true"\r\n'
741,'gbiellem','Illegal operation attempted on a registry key that has been marked for deletion.\nStacktrace:\r\n\r\n[IOException: Illegal operation attempted on a registry key that has been marked for deletion.\r\n]\r\n   Microsoft.Win32.RegistryKey.Win32Error(Int32 errorCode, String str) +6505003\r\n   Microsoft.Win32.RegistryKey.CreateSubKeyInternal(String subkey, RegistryKeyPermissionCheck permissionCheck, Object registrySecurityObj, RegistryOptions registryOptions) +889\r\n   Microsoft.Win32.RegistryKey.CreateSubKey(String subkey, RegistryKeyPermissionCheck permissionCheck) +21\r\n   NServiceBus.Licensing.LicenseManager.ConfigureNServiceBusToRunInTrialMode() in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\impl\\licensing\\NServiceBus.Licensing\\LicenseManager.cs:248\r\n   NServiceBus.Licensing.LicenseManager.Validate() in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\impl\\licensing\\NServiceBus.Licensing\\LicenseManager.cs:233\r\n   NServiceBus.Unicast.Transport.Transactional.Config.LicenceConfig.GetAllowedNumberOfThreads(Int32 numberOfWorkerThreadsInConfig) in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional.Config\\LicenceConfig.cs:12\r\n   NServiceBus.Unicast.Transport.Transactional.Config.Bootstrapper.Init() in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional.Config\\Bootstrapper.cs:45\r\n   System.Collections.Generic.List`1.ForEach(Action`1 action) +13957572\r\n   NServiceBus.Configure.Initialize() in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\config\\NServiceBus.Config\\Configure.cs:293\r\n   NServiceBus.Configure.SendOnly() in c:\\TeamCity\\buildAgent\\work\\nsb.master_2\\src\\config\\NServiceBus.Config\\Configure.cs:366\r\n\r\n\r\nNo license installed.\r\n\r\nRunning under IIS 7 .Net 4.0 using Application Pool identity.\r\n\r\nI cannot find the offending key in Registry.'
740,'andreasohlund','For better interop we should allow a plain message to be sent without the "messages" wrapper\n'
739,'andreasohlund','Allow type info to be passed into the serializers\nTo allow for more flexible serialization we should allow the message types being passed into to the serializers explicitly in addition to being inferred from namespaces and element names. This makes less assumptions on the capabilities of the serialization format.'
738,'andreasohlund','Sagas that correlate on the saga id should use a get instead of a property lookup\nIf we detect that a saga is correlated on the saga id we should use a Get(sagaId) instead of a property lookup. This allows the persister to optimize the query more efficiently. In this case the raven persister was doing a Query instead of a Load which might yield stale results'
737,'johnsimons',"Headers exceed the 4000 character limit for the NHibernate timeout persister\nSome users seems to hit the 4000 char limit when doing SLR's on messages with long call stacks\r\n\r\nhttp://stackoverflow.com/questions/13229627/nservicebus-nhibernate-exception-on-sending-message\r\n\r\nWe need to change \r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/nhibernate/TimeoutPersister/NServiceBus.TimeoutPersisters.NHibernate/Config/TimeoutEntityMap.cs#L21\r\n\r\nto nvarchar(max)"
735,'','DatabusMessageMutator throws exception if instance of databus property is null\nReproduced in 3.3.0 using gateway sample when receiving a message from the webclient'
734,'','DatabusMessageMutator throws exception if instance of databus property is null\nExample of the exception\r\n2012-11-06 16:37:55,685 [Worker.6] WARN  NServiceBus.Unicast.Transport.Transactional.TransactionalTransport [(null)] <(null)> - Failed raising \'transport message received\' event for message with ID=7b507439-43ff-41fc-80c1-cc60eefa497c\\20459\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: path2\r\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder childBuilder, TransportMessage msg) in c:\\Git\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1304\r\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e) in c:\\Git\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1221\r\n   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg) in c:\\Git\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 480\r\n\r\nReproduced in 3.3.0 in the default gateway sample when request is received from the webclient.\r\nHeadquaters does\r\n`            Bus.SendToSites(new[] { "SiteA", "SiteB" }, new PriceUpdated\r\n            {\r\n                ProductId = message.ProductId,\r\n                NewPrice = message.NewPrice,\r\n                ValidFrom = message.ValidFrom\r\n            });`\r\nHowever, `PriceUpdated` type also contains `public DataBusProperty<string> SomeLargeString { get; set; }` which in above case defaults to null'
733,'andreasohlund',"DataBus properties that isn't initialized caused the receiving side to blow up\nTo repro just send a message with a DataBusProperty set to null"
732,'andreasohlund','Encryption support causes performance issue on large byte arrays\nThe recursive traversal of all properties causes issues when we go through a big byte array. We need to detect that the list contains only primitives and skip the iteration. This means anyone using the databus feature would experience this issue'
731,'andreasohlund',"Spring support is broken since we resolve the LicenseManager to early in the startup process\nSpring doesn't support registrations after the first component has been resolved. The licensemanager have to be refactored to do without DI in order to work with spring"
730,'',"DataBusProperty.cs\nThe DataBusProperty.cs file doesn't appear to serialize the Value property.\r\n\r\nCan you please look into this?"
729,'','Causation IDs\nEnsure that all messages that are sent/published/replied contain in their headers the ID of the message that caused them.\r\n\r\nSo, when processing message with an ID of 1, if the code publishes an event, that event will have a header with a causation ID of 1.'
728,'','NServiceBus 3.3.0 msi package fails to install\nlogged message:\r\n\r\nWindows Installer installed the product. Product Name: NServiceBus 3.3.0. Product Version: 3.3.0. Product Language: 1033. Manufacturer: NServiceBus Ltd. Installation success or error status: 1603.\r\n\r\nEnvironment:\r\nWindows 7 SP1 x64'
727,'johnsimons','Fixes#716\nSwitched`ThreadPool.SetMaxThreads`to use`Semaphore`instead of introducing a custom`TaskScheduler`'
726,'','Make the default transaction isolation level ReadCommitted\nSerializable is the default for System.TransactionScope but we should lower it to ReadCommitted  since that is a more suitable default for NServiceBus endpoints'
725,'johnsimons','Fixes #723\nFix failed deserialization of classes with a closed implementation of IList<T>'
724,'johnsimons','Fixes #709\nFix StackOverflowException with IEnumerable and self-referencing generic interface implementations.'
723,'johnsimons','Classes That Close The Generic Type On IList<T> Fail to Deserialize If Defined in Different Namespace Than Message \nWhen a class implements implements IList<T>  and closes the generic type, the NServiceBus XML deserializer will not be able to deserialize it correctly if the list and its item type are in a different namespace than the message being serialized.\r\n\r\nFor example, the following combination of messages and classes will fail to deserialize:\r\n```    \r\nnamespace A \r\n{\r\n    public class CustomList : List<CustomItem>\r\n\t{\r\n\t}\r\n\r\n\tpublic class CustomItem\r\n\t{\r\n\t\tpublic string Data { get; set; }\r\n\t}\r\n}\r\n\r\nnamesapce B \r\n{\r\n    public class MyEvent : IEvent\r\n    {\r\n        public CustomList Items {get;set;}\r\n    }\r\n}\r\n```\r\n'
722,'',"Raven.Server.exe still 1.0.616.0 after updating to NSB 3.3.0\nI've just upgraded my solution to NSB 3.3.0 and based upon #633 I was expecting to see RavenDB updated in the NServiceBus.Persistence folder, however it is still showing as 1.0.616.0.\r\n\r\nIs this correct or have I misunderstood what & where RavenDB will be updated?"
721,'','NServiceBus.Tools not updated\nThe NServiceBus.Tools NuGet package is still at 3.2.8, should it have been updated to 3.3.0 or is it fully compatible?'
720,'',"Lack of proper release notes\nI've checked https://github.com/NServiceBus/NServiceBus/wiki, http://nservicebus.com/ and http://nservicebus.wordpress.com/ and the closest thing I've found to release notes is the git comparison between 3.2.8 and 3.3.0 which to anyone who is not intimately knowledgeable of the code base is no use.\r\n\r\nI would like to see (and I'm sure I'm not alone in this) notes describing new features, API changes, configuration changes etc. otherwise how do I know what will happen when I upgrade?\r\n\r\nAs with most open source products, the platform works well but the documentation is lacking which for a solution you sell as an enterprise licensed product is disappointing."
719,'johnsimons','Upgrade to 3.3 with nuget failed\nI\'ll add this for future reference. I just updated my sample application here https://github.com/danielmarbach/nservicebus.introduction to the newest version of NServiceBus. All my app.configs got modified and the new EndpointConfig classes where added. I had first to delete the EndpointConfig classes which I have already defined (but in my sample they are called Endpoint) and then I had to git reset the modified app.configs. When I started the hosts with the modified app.configs the following exception occurred while starting.\r\n\r\nUnhandled Exception: Magnum.StateMachine.StateMachineException: Exception occurr\r\ned in Topshelf.Internal.ServiceController`1[[NServiceBus.Hosting.Windows.Windows\r\nHost, NServiceBus.Host, Version=3.3.0.0, Culture=neutral, PublicKeyToken=9fc3864\r\n79f8a226c]] during state Initial while handling OnStart ---> Microsoft.Practices\r\n.ServiceLocation.ActivationException: Activation error occured while trying to g\r\net instance of type WindowsHost, key "SiriusCyberneticsCorp.Complaint.Frontend.E\r\nndpoint, SiriusCyberneticsCorp.Complaint.Frontend, Version=1.0.0.0, Culture=neut\r\nral, PublicKeyToken=null" ---> System.TypeInitializationException: The type init\r\nializer for \'NServiceBus.Configure\' threw an exception. ---> Common.Logging.Conf\r\nigurationException: Failed obtaining configuration for Common.Logging from confi\r\nguration section \'common/logging\'. ---> System.Configuration.ConfigurationErrors\r\nException: Configuration system failed to initialize ---> System.Configuration.C\r\nonfigurationErrorsException: Sections must only appear once per config file.  Se\r\ne the help topic <location> for exceptions. (C:\\Projects\\nservicebus.introductio\r\nn\\SiriusCyberneticsCorp.Complaint.Frontend\\bin\\Debug\\SiriusCyberneticsCorp.Compl\r\naint.Frontend.dll.config line 14)\r\n   at System.Configuration.ConfigurationSchemaErrors.ThrowIfErrors(Boolean ignor\r\neLocal)\r\n   at System.Configuration.BaseConfigurationRecord.ThrowIfParseErrors(Configurat\r\nionSchemaErrors schemaErrors)\r\n   at System.Configuration.ClientConfigurationSystem.EnsureInit(String configKey\r\n)\r\n   --- End of inner exception stack trace ---\r\n   at System.Configuration.ClientConfigurationSystem.EnsureInit(String configKey\r\n)\r\n   at System.Configuration.ClientConfigurationSystem.System.Configuration.Intern\r\nal.IInternalConfigSystem.GetSection(String sectionName)\r\n   at System.Configuration.ConfigurationManager.GetSection(String sectionName)\r\n   at Common.Logging.LogManager.<>c__DisplayClass3.<BuildLoggerFactoryAdapter>b_\r\n_0() in c:\\CCNet\\netcommon\\trunk\\modules\\Common.Logging\\src\\Common\\Common.Loggin\r\ng\\Logging\\LogManager.cs:line 246\r\n   at Common.Logging.Configuration.ArgUtils.<>c__DisplayClass13.<Guard>b__12() i\r\nn c:\\CCNet\\netcommon\\trunk\\modules\\Common.Logging\\src\\Common\\Common.Logging\\Logg\r\ning\\Configuration\\ArgUtils.cs:line 279\r\n   at Common.Logging.Configuration.ArgUtils.Guard[T](Function`1 function, String\r\n messageFormat, Object[] args) in c:\\CCNet\\netcommon\\trunk\\modules\\Common.Loggin\r\ng\\src\\Common\\Common.Logging\\Logging\\Configuration\\ArgUtils.cs:line 304\r\n   --- End of inner exception stack trace ---\r\n   at Common.Logging.Configuration.ArgUtils.Guard[T](Function`1 function, String\r\n messageFormat, Object[] args) in c:\\CCNet\\netcommon\\trunk\\modules\\Common.Loggin\r\ng\\src\\Common\\Common.Logging\\Logging\\Configuration\\ArgUtils.cs:line 314\r\n   at Common.Logging.LogManager.BuildLoggerFactoryAdapter() in c:\\CCNet\\netcommo\r\nn\\trunk\\modules\\Common.Logging\\src\\Common\\Common.Logging\\Logging\\LogManager.cs:l\r\nine 251\r\n   at Common.Logging.LogManager.get_Adapter() in c:\\CCNet\\netcommon\\trunk\\module\r\ns\\Common.Logging\\src\\Common\\Common.Logging\\Logging\\LogManager.cs:line 164\r\n   at Common.Logging.LogManager.GetLogger(String name) in c:\\CCNet\\netcommon\\tru\r\nnk\\modules\\Common.Logging\\src\\Common\\Common.Logging\\Logging\\LogManager.cs:line 2'
718,'','Remove the gateway ACK call\nThe current gateway ends each transmission with a ACK call. This was added to support databus properties but we can support that with a header instead (we already have a AutoAck header) to save our self one http POST per message.'
717,'','Adding a queue creator for on-premise service bus support; Helps with is...\n...sue #715'
716,'johnsimons',"Running gateway with multiple channels exhausting thread pool\nUnder high load, the HTTP gateway receiver (HttpListener) blocks for 60 seconds at a time and doesn't accept any more requests. After 60 seconds, number of distributed transactions time out and the process locks up again. Once in this state, no more messages get through the channel (ie complete the process of de-duplication/enqueuing messages). The issue was found on 3.2.8, but can also be replicated on 3.3.0\r\n\r\nI've traced the blocking problem down to a call made by NServiceBus.Gateway.Channels.Http.HttpChannelReceiver\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/gateway/NServiceBus.Gateway/Channels/Http/HttpChannelReceiver.cs#L26\r\n\r\nIt appears my process exhausts the thread pool workers while trying to service the HttpListener, commit distributed transactions (deduplication + enqueue MSMQ) and service my WCF requests at the same time.\r\n\r\nNumber of threads in the thread pool is a process wide setting. The OS (W7SP1) defaults for the number of thread pool workers is around 1000. Based on the above gateway config, HttpChannelReceiver limits it down to 10 workers. The gateway channel configuration treats it as if it was configurable per channel and affects performance of the entire process.\r\n\r\nI'd be eager to remove the call to ThreadPool.SetMaxThreads altogether. Is this a bug? Why is the gateway receiver trying to limit the number of requests processed on a channel?"
715,'','Add support for Windows Service Bus as the transport layer\n'
714,'',"NServiceBus scanning is logging an error while scanning Glav.CacheAdapter\nGlav.CacheAdapter is a cache that supports multiple cache systems.\r\n\r\nIt is marked in NuGet as dependent on Enym.Caching with a version greater or equal to 2.11.   Enyim.Caching recently had a new version 2.12 which should be compatible with the existing Glav.CacheAdapter.\r\n\r\nThe NServiceBus is logging as Warning:\r\n\r\n0:25:16.8455 WARN Could not scan assembly: Glav.CacheAdapter, Version=2.4.2.0, Culture=neutral, PublicKeyToken=null. Exception message System.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.\r\n   at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)\r\n   at System.Reflection.RuntimeModule.GetTypes()\r\n   at System.Reflection.Assembly.GetTypes()\r\n   at NServiceBus.Configure.<>c__DisplayClass1f.<GetAllowedTypes>b__1c(Assembly a) in c:\\TeamCity\\buildAgent\\work\\19f271e8a69e4959\\src\\config\\NServiceBus.Config\\Configure.cs:line 397.\r\nScanned type errors: \r\nCould not load file or assembly 'Enyim.Caching, Version=2.11.0.0, Culture=neutral, PublicKeyToken=cec98615db04012e' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\nCould not load file or assembly 'Enyim.Caching, Version=2.11.0.0, Culture=neutral, PublicKeyToken=cec98615db04012e' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040) \r\n\r\nNot sure this is a real issue, but the Warning made me look, when there seems to be nothing actually wrong with what is linked.  \r\n\r\n"
713,'andreasohlund',"Connections string settings isn't picked up when configuring a RavenDB connection string\nTo repro:\r\n\r\nSecify a ApiKey, the initialized DocumentStore will miss the setting since we always create a new one and copy over what we think is the relevant settings. We should let raven do the parsing instead."
712,'','UnicastBus.DispatchMessageToHandlersBasedOnType can result in information loss with the created TransportMessageHandlingFailedException\nThe UnicastBus.DispatchMessageToHandlersBasedOnType can result in information loss with the created TransportMessageHandlingFailedException as it previously passed the most inner exception.'
711,'johnsimons','Multiple workers on the same machine is not supported\nThe validation code for the master node prevents  multiple workers on the same machine since it auto generates the input queue if the masternode translate to localhost\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/distributor/NServiceBus.Distributor/Config/ConfigureDistributor.cs#L82\r\n\r\nWe should add a override to allow users to run workers in this mode'
710,'','Fixes #709\nAddressed the StackOverflowException from #709 and added a number of unit tests around related scenarios.'
709,'johnsimons',"StackOverflowException Mapping TypesImplementing IEnumerable and Self-Referencing Generic Interface\nWhen you have message that references a class A that implements IEnumerable<T> and some generic interface where A itself is the type parameter, a StackOverflowException will occur in MessageMapper.  \r\n\r\nFor example, using the class and interface below, a StackOverflowException will occur if ClassImplementingIEnumerableAndIReturnMyself`<string`> is included on a message.\r\n\r\n```\r\nclass ClassImplementingIEnumerableAndIReturnMyself<TItem> : IEnumerable<TItem>, IReturnMyself<ClassImplementingIEnumerableAndIReturnMyself<TItem>>\r\n\t\t{\r\n\t\t\tpublic IEnumerator<TItem> GetEnumerator()\r\n\t\t\t{\r\n\t\t\t\treturn new List<TItem>.Enumerator();\r\n\t\t\t}\r\n\r\n\t\t\tIEnumerator IEnumerable.GetEnumerator()\r\n\t\t\t{\r\n\t\t\t\treturn GetEnumerator();\r\n\t\t\t}\r\n\r\n\r\n\t\t\tpublic ClassImplementingIEnumerableAndIReturnMyself<TItem> ReturnMe()\r\n\t\t\t{\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tinterface IReturnMyself<T>\r\n\t\t{\r\n\t\t\tT ReturnMe();\r\n\t\t}\r\n```\r\n\r\nThis example is obviously very contrived, but it was the simplest way I could find to reproduce the problem.  The actual use case for the self-referencing interface implementations was to implement something similar to a generic version of ICloneable but with better defined copy semantics.\r\n\r\nTwo variations of this using a stripped down version of the PubSub sample can be found at:\r\nhttps://github.com/dennismsmith/IssueAttachments/blob/master/StackOverflowInMessageMapper%20-%20Case%201.zip\r\nhttps://github.com/dennismsmith/IssueAttachments/blob/master/StackOverflowInMessageMapper%20-%20Case%202.zip\r\n\r\nI've fixed this in the source for my own use for the time being and I'll submit a pull request to get my changes included for a future release."
708,'johnsimons','Fixes #702\nAdded implementation of `SqlPersistence.UpdateHeader` + reduced code\r\nCould you put this in 3.4?'
707,'johnsimons','Fixes #671\nSaga data is deep cloned by using JsonMessageSerializer and serialised both going in and out of persistence\r\nConcurrency check is against Thread.CurrentThread.ManagedThreadId\r\nAdded unit tests\r\n\r\nThanks @johnsimons for tip => `core.autocrlf=false`'
706,'','Fixes #671 - @ develop branch\nSaga data is deep cloned by using `IMessageSerializer` and serialised both going in and out of persistence\r\nConcurrency check is against `Thread.CurrentThread.ManagedThreadId`\r\nAdded unit tests'
705,'','Fixes #671\nSaga data is deep cloned by using `IMessageSerializer` and serialised both going in and out of persistence\r\nConcurrency check is against `Thread.CurrentThread.ManagedThreadId`\r\nAdded unit tests'
704,'johnsimons','Access to the registry key \'HKEY_CURRENT_USER\\SOFTWARE\\NServiceBus\\3.3\' is denied\nWe\'ve installed the 3.3.0-unstable63 nuget package and deployed to our test server.\r\nNow our web endpoints throw the exception pasted below about trying to access the registry.\r\nThese web endpoints are defined as SendOnly endpoints with configuration similar to this:\r\n```            \r\nvar bus = NServiceBus.Configure.With()\r\n                .DefineEndpointName(() => "WebSite")\r\n                .DefiningCommandsAs(t => t.Namespace != null && t.Namespace.EndsWith(".Commands"))\r\n                .Log4Net()\r\n                .DefaultBuilder()\r\n                .XmlSerializer()\r\n                .MsmqTransport()\r\n                .UnicastBus()\r\n                .SendOnly();\r\n```\r\nWe did not run any additional installation or configuration on this server since we updated to 3.3.  I believe we ran the RunMeFirst.bat on this server with an earlier 3.x version downloaded from nservicebus.com\r\n\r\nWhen our nservicebus host endpoints are started, we see these log messages:\r\n```\r\n2012-10-17 12:25:01,239 [1] DEBUG - (null) - NServiceBus.Licensing.LicenseManager - First time running NServiceBus v3.3, setting trial license start.  \r\n2012-10-17 12:25:01,239 [1] DEBUG - (null) - NServiceBus.Licensing.LicenseManager - Trial for NServiceBus v3.3 is still active, trial expires on 3.3.  \r\n2012-10-17 12:25:01,239 [1] INFO  - (null) - NServiceBus.Licensing.LicenseManager - Configuring NServiceBus to run in trial mode.  \r\n```\r\n\r\nI do not get this exception when i run the site on my machine, although i did acquiesce and click yes when the nservicebus popup appeared in visual studio asking me to configure nservicebus.\r\n\r\nI also got a free Express license from here: http://nservicebus.com/License.aspx\r\nand put it in /bin/License/License.xml in my web application, and it still didn\'t fix the issue.\r\n\r\nI had to change the web site to run as a local administrator account to finally get the site to work...And changing it back to pass thru authentication gets the exception again. \r\n\r\nEven though we\'re using a trial license on our server, I assume we should not have been getting an exception, correct?\r\n\r\n```\r\n[UnauthorizedAccessException: Access to the registry key \'HKEY_CURRENT_USER\\SOFTWARE\\NServiceBus\\3.3\' is denied.]\r\n   Microsoft.Win32.RegistryKey.Win32Error(Int32 errorCode, String str) +6345029\r\n   Microsoft.Win32.RegistryKey.CreateSubKeyInternal(String subkey, RegistryKeyPermissionCheck permissionCheck, Object registrySecurityObj, RegistryOptions registryOptions) +888\r\n   Microsoft.Win32.RegistryKey.CreateSubKey(String subkey, RegistryKeyPermissionCheck permissionCheck) +21\r\n   NServiceBus.Licensing.LicenseManager.ConfigureNServiceBusToRunInTrialMode() in c:\\TeamCity\\buildAgent\\work\\19f271e8a69e4959\\src\\impl\\licensing\\NServiceBus.Licensing\\LicenseManager.cs:200\r\n   NServiceBus.Licensing.LicenseManager.Validate() in c:\\TeamCity\\buildAgent\\work\\19f271e8a69e4959\\src\\impl\\licensing\\NServiceBus.Licensing\\LicenseManager.cs:192\r\n   NServiceBus.Licensing.Configure.Init() in c:\\TeamCity\\buildAgent\\work\\19f271e8a69e4959\\src\\impl\\licensing\\NServiceBus.Licensing\\Configure.cs:11\r\n   System.Collections.Generic.List`1.ForEach(Action`1 action) +64\r\n   NServiceBus.Configure.Initialize() in c:\\TeamCity\\buildAgent\\work\\19f271e8a69e4959\\src\\config\\NServiceBus.Config\\Configure.cs:293\r\n   NServiceBus.Configure.SendOnly() in c:\\TeamCity\\buildAgent\\work\\19f271e8a69e4959\\src\\config\\NServiceBus.Config\\Configure.cs:366\r\n   WebSite.DependencyResolution.NServiceBusRegistry..ctor() in f:\\BuildAgent\\work\\81dc02d48ff93cf1\\Src\\WebSite\\DependencyResolution\\NServiceBusRegistry.cs:13\r\n\r\n[TargetInvocationException: Exception has been thrown by the target of an invocation.]\r\n   System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean noCheck, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Boolean& bNeedSecurityCheck) +0\r\n   System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache) +117\r\n   System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean skipVisibilityChecks, Boolean skipCheckThis, Boolean fillCache) +247\r\n   System.Activator.CreateInstance(Type type, Boolean nonPublic) +106\r\n   StructureMap.Graph.PluginGraph.ImportRegistry(Type type) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Graph\\PluginGraph.cs:232\r\n   System.Collections.Generic.List`1.ForEach(Action`1 action) +64\r\n   StructureMap.Configuration.DSL.Registry.ConfigurePluginGraph(PluginGraph graph) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Configuration\\DSL\\Registry.cs:397\r\n   StructureMap.Graph.AssemblyScanner.ScanForAll(PluginGraph pluginGraph) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Graph\\AssemblyScanner.cs:249\r\n   StructureMap.Graph.PluginGraph.Seal() in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Graph\\PluginGraph.cs:121\r\n   StructureMap.PluginGraphBuilder.Build() in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\PluginGraphBuilder.cs:72\r\n   StructureMap.ObjectFactory.Initialize(Action`1 action) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\ObjectFactory.cs:65\r\n   website.DependencyResolution.IoC.Initialize() in f:\\BuildAgent\\work\\81dc02d48ff93cf1\\Src\\website\\DependencyResolution\\IoC.cs:9\r\n   website.App_Start.StructuremapMvc.Start() in f:\\BuildAgent\\work\\81dc02d48ff93cf1\\Src\\website\\App_Start\\StructuremapMvc.cs:11\r\n\r\n[TargetInvocationException: Exception has been thrown by the target of an invocation.]\r\n   System.RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, SignatureStruct& sig, MethodAttributes methodAttributes, RuntimeType typeOwner) +0\r\n   System.RuntimeMethodHandle.InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, Signature sig, MethodAttributes methodAttributes, RuntimeType typeOwner) +152\r\n   System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks) +393\r\n   System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) +38\r\n   System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters) +35\r\n   WebActivator.BaseActivationMethodAttribute.InvokeMethod() +341\r\n   WebActivator.ActivationManager.RunActivationMethods() +534\r\n   WebActivator.ActivationManager.RunPreStartMethods() +38\r\n   WebActivator.ActivationManager.Run() +56\r\n\r\n[InvalidOperationException: The pre-application start initialization method Run on type WebActivator.ActivationManager threw an exception with the following error message: Exception has been thrown by the target of an invocation..]\r\n   System.Web.Compilation.BuildManager.InvokePreStartInitMethods(ICollection`1 methods) +11535262\r\n   System.Web.Compilation.BuildManager.CallPreStartInitMethods() +465\r\n   System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters, PolicyLevel policyLevel, Exception appDomainCreationException) +1087\r\n\r\n[HttpException (0x80004005): The pre-application start initialization method Run on type WebActivator.ActivationManager threw an exception with the following error message: Exception has been thrown by the target of an invocation..]\r\n   System.Web.HttpRuntime.FirstRequestInit(HttpContext context) +11524352\r\n   System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context) +141\r\n   System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context) +4782309\r\n```'
703,'','Basic 16 license is limited to one worker thread\nBasic commercial license is limited to one worker thread. According to the license information on NServiceBus.com this is not the correct behavior. It should only limit throughput. '
702,'johnsimons','SqlPersistence for Gateway deduplication has no implementation of UpdateHeader\nDatabus properties cannot be sent over the gateway when using SqlPersistence for deduplication of messages\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/gateway/NServiceBus.Gateway/Persistence/Sql/SqlPersistence.cs#L113'
701,'johnsimons',"EncryptionMessageMutator fails when parsing object with no getter\nI found this issue with the latest nuget package of the build (4.0.0-unstable2482) and also managed to reproduce it with the 3.2.8 (and 3.3.0) source from github.\r\n \r\nBasically I need to include some legacy objects into an IMessage I am tring to send, however one of the objects has an XmlDocument with XmlAttributes in it that the bus is attempting to serialise. The issue comes up when for some reason the EncryptionMessageMutator (that seems to be switched on by default?) tries to mutate the outgoing message. As it recurses through the object graph, the mutator finds an instance of XmlAttribute, and serialises each of its properties. The problem is one of the properties on XmlAttribute, InnerText has no getter, which causes the mutator to fail.\r\n \r\nThe situation can be very easily repro'd in the unit tests, specifically Mailing_list_complex_dto, by modifying TestDto to have an additional property with no setter e.g:\r\n\r\n```C#\r\npublic class TestDto\r\n{\r\n   public TestDto()\r\n   {\r\n      Options = new TestOptions();\r\n   }\r\n\r\n   public TestOptions Options { get; set; }\r\n\r\n   public TestOptions Options2\r\n   {\r\n      set \r\n      { \r\n         //do nothing\r\n      }\r\n   }\r\n}\r\n```\r\nThis breaks the test as follows:\r\n \r\n<pre>\r\nThis_whould_work : \r\nFailedSystem.ArgumentException : Property Get method was not found.\r\nat System.Reflection.RuntimePropertyInfo.GetValue(Object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture)\r\nat System.Reflection.RuntimePropertyInfo.GetValue(Object obj, Object[] index)\r\nat NServiceBus.Encryption.MemberInfoExtensions.GetValue(MemberInfo member, Object source) in EncryptionMessageMutator.cs: line 256\r\nat NServiceBus.Encryption.EncryptionMessageMutator.ForEachMember(Object root, Action`2 action, Func`2 appliesTo) in EncryptionMessageMutator.cs: line 97\r\nat NServiceBus.Encryption.EncryptionMessageMutator.MutateOutgoing(Object message) in EncryptionMessageMutator.cs: line 23\r\nat NServiceBus.Encryption.Tests.Mailing_list_complex_dto.This_whould_work() in WireEncryptedStringSpecs.cs: line 140 \r\n</pre>\r\n\r\nAt first glance at the code, a fix looks pretty easy - calling PropertyInfo.CanRead()?"
700,'johnsimons','startManually parameter for NServiceBus.Host.exe starts it in Startup Type = "Automatic"\nShould start it as "Manual"'
699,'','Default endpoint name not correctly configured for DynamicHosts in 3.2.8\nDefault endpoint name not correctly configured for DynamicHosts in 3.2.8'
698,'','Nuget package for 3.2.8 writes assembly redirect to wrong nhibernate version in app.config\nLooks like nuget adds a binding redirect for NHibernate 3.3.1.4000 to the app config\r\n\r\n&lt;runtime&gt;\r\n    &lt;assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1"&gt;\r\n      &lt;dependentAssembly&gt;\r\n        &lt;assemblyIdentity name="NHibernate" publicKeyToken="aa95f207798dfdb4" culture="neutral" /&gt;\r\n        &lt;bindingRedirect oldVersion="0.0.0.0-3.3.1.4000" newVersion="3.3.1.4000" /&gt;\r\n      &lt;/dependentAssembly&gt;\r\n    &lt;/assemblyBinding&gt;\r\n  &lt;/runtime&gt;\r\n\r\nWhile this version of NSB is built against 3.3.0.4000\r\n\r\nThis redirect makes that the azure hosting assembly is not reflected and profiles are not being applied by the profilemanager'
697,'johnsimons','Support the ResourceManagerId setting in RavenDb connection strings\nCurrently the ResourceManagerId setting in RavenDb connection strings is ignored, and  a default value used instead. \r\n\r\nThis could be confusing. Besides there should be a way to explicitly control the ResourceManagerId\r\n\r\n\r\n        static Configure RavenPersistenceWithConnectionString(Configure config, string connectionStringValue, string database)\r\n        {\r\n            var store = new DocumentStore\r\n            {\r\n                ResourceManagerId = RavenPersistenceConstants.DefaultResourceManagerId\r\n            };'
696,'johnsimons','RavenDB connectionstring should support Database\nAccording to ravendb a database name can be either specified using Database ro DefaultDatabase via the connectionstring.\r\nBut we only support DefaultDatabase!\r\n\r\nWe should also support Database.'
695,'johnsimons','SendAsync does not work with Castle Windsor container\nFor some reason, if we change to use Castle Windsor as the container in AsyncPagesMVC3 website, the SendAsync does not work.\r\n\r\nIt looks like the message is received in the server and a reply sent back to the client, but then the client is not calling a callback!'
694,'','AssertOutgoingHeader has no implementation\nSupport for testing headers using Test.AssertOutgoingHeader is broken (at least in current release´).'
693,'',"Improve the ability to submit messages to NServiceBus via http(s)\nIn order to improve our interop story we should make it easier to get message into NSB via http. While this is included today\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/Samples/Gateway/WebClient/Index.htm#L17\r\n\r\nIt's very clunky and needs to be improved.\r\n\r\n* POST /Messages/{MessageType} => sends the given message \r\n* We should support protocol translation so that you can submit via eg. json but still have the bus use xml.\r\n"
692,'','Support pub/sub over http via the gateway\nIn order to provide better interop capabilities we need to expose a api (REST\'ish) to allow other platforms and technologies to do pub/sub with components built using NServiceBus.\r\n\r\n* Only push based delivery is in scope for now(we\'ll look at adding pull later on)\r\n* Only over http(s) for now\r\n* Support both xml and json\r\n\r\nHigh level design:\r\n\r\n* Subscribers subscribe by a post to {gatewayurl}/Subscribe. Including SubscriptionId(client side generated GUID), message type, callback address.\r\n* The gateway store this information durably. We should look into reusing the existing subscription storages for this\r\n* The gateway subscribes to the "internal" NSB endpoints as needed to get notified on publish\r\n* When a published message is received do a bus.SendLocal for each subscribed client in order to get separate retries (this needs to be pluggable if we are to support a pull based model)\r\n* To unsubscribe a client would either\r\n  * issue a delete against {gatewayurl}/Subscriptions/{SubscriptionId}\r\n  * issue a post against {gatewayurl}/Unsubscribe including the callback address and optionally message type\r\n\r\nAssumptions\r\n\r\n* The gateway will perform retries so subscribers are expected to be idempotent (message id will be kept stable by the gateway)\r\n\r\nThis is related but not the same as #602'
691,'johnsimons',"Can't Deserialize string NSB Serialized\nIt appears that NSB is serializing a message that it can't deserialize.  The message contains a string that has the control character 0x1C.\r\n\r\nI am using v3.2.8 on sender and receiver.\r\n\r\nI received an NSB error:\r\n\r\n<HeaderInfo>\r\n\t\t<Key>NServiceBus.ExceptionInfo.ExceptionType</Key>\r\n\t\t<Value>System.Xml.XmlException</Value>\r\n\t</HeaderInfo>\r\n\t<HeaderInfo>\r\n\t\t<Key>NServiceBus.ExceptionInfo.HelpLink</Key>\r\n\t</HeaderInfo>\r\n\t<HeaderInfo>\r\n\t\t<Key>NServiceBus.ExceptionInfo.Message</Key>\r\n\t\t<Value>'&#x1C;', hexadecimal value 0x1C, is an invalid character. Line 19, position 64.</Value>\r\n\t</HeaderInfo>\r\n\t<HeaderInfo>\r\n\t\t<Key>NServiceBus.ExceptionInfo.Source</Key>\r\n\t\t<Value>System.Xml</Value>\r\n\t</HeaderInfo>\r\n\t<HeaderInfo>\r\n\t\t<Key>NServiceBus.ExceptionInfo.StackTrace</Key>\r\n\t\t<Value>   at System.Xml.XmlTextReaderImpl.Throw(Exception e)\r\n   at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)\r\n   at System.Xml.XmlTextReaderImpl.ParseText(Int32&amp; startPos, Int32&amp; endPos, Int32&amp; outOrChars)\r\n   at System.Xml.XmlTextReaderImpl.ParseText()\r\n   at System.Xml.XmlTextReaderImpl.ParseElementContent()\r\n   at System.Xml.XmlTextReaderImpl.Read()\r\n   at System.Xml.XmlLoader.LoadNode(Boolean skipOverWhitespace)\r\n   at System.Xml.XmlLoader.LoadDocSequence(XmlDocument parentDoc)\r\n   at System.Xml.XmlLoader.Load(XmlDocument doc, XmlReader reader, Boolean preserveWhitespace)\r\n   at System.Xml.XmlDocument.Load(XmlReader reader)\r\n   at NServiceBus.Serializers.XML.XmlMessageSerializer.Deserialize(Stream stream) in c:\\TeamCity\\buildAgent\\work\\nsb.master_7\\src\\impl\\Serializers\\NServiceBus.Serializers.XML\\XmlMessageSerializer.cs:line 237\r\n   at NServiceBus.Unicast.UnicastBus.Extract(TransportMessage m) in c:\\TeamCity\\buildAgent\\work\\nsb.master_7\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1043</Value>\r\n\t</HeaderInfo>\r\n\t<HeaderInfo>\r\n\t\t<Key>NServiceBus.OriginalId</Key>\r\n\t\t<Value>51e81fbc-6140-45da-9cd3-4ae673e9dfab\\1574529</Value>\r\n\t</HeaderInfo>\r\n\r\n-----\r\n\r\nInspecting the message through QueueExplorer, line 19 looks like this:\r\n\r\n<FileFieldInfo>\r\n<FieldId>1000035</FieldId>\r\n<FileFieldId>247062384</FileFieldId>\r\n<Name>PlaintiffLongName</Name>\r\n<NewValue>HSBC Bank USA, National Association, as trustee (the \x1cTrustee\x1d) for the holders of Deutsche Alt-A Securities, Inc. Mortgage Loan Trust, Series 2007-RAMP1</NewValue>\r\n<CallTas>false</CallTas>\r\n</FileFieldInfo>\r\n\r\n-----\r\n\r\nOr looking at hex view, we see:\r\n\r\n002F0\t72 75 73 74 65 65 20 28  74 68 65 20 1C 54 72 75  | rustee (the  Tru\r\n00300\t73 74 65 65 1D 29 20 66  6F 72 20 74 68 65 20 68  | stee ) for the h\r\n\r\nError is caused by 0xIC appearing at index 12 on the first line.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
690,'andreasohlund',"NRE on IEnumerable<T> members with null elements\nXmlSerializer couldn't work out the type to serialize for elements of\r\nIEnumerable which were null resulting in a NullReferenceException"
689,'',"NRE on IEnumerable<T> members with null elements\nXmlSerializer couldn't work out the type to serialize for elements of\r\nIEnumerable<T> which were null resulting in a NullReferenceException"
688,'','Use the EnvDTE to set the debug path in the NServiceBus.Host package\nToday we parse and save the project file. We should do this using the Env.DTE ($project) that NuGet gives us. \r\nhttp://msdn.microsoft.com/en-us/library/ms228959.aspx'
687,'andreasohlund',"InMemory gateway storage doesn't report deleted items correctly\n"
686,'andreasohlund','Install.ps1 fails to find the messageforwarding section \nUser are reporting that the install.ps1 in the host fails to find the section on Win8 machines'
685,'johnsimons','Upgrade to Raven 2.0\nWe should get the develop branch onto Raven 2.0'
684,'','Azure ServiceBus Message mappings ignores the ServiceBus namespace\n<p>In NServiceBus 3.2.8 using the Azure features for the Azure ServiceBus if on Azure there are more namespaces with the same queues structure, such as:</p>\r\n<p>-&nbsp; namespace-A<br>&nbsp;&nbsp; - queue-1<br>&nbsp;&nbsp; - queue-2<br>-&nbsp; namespace-B<br>&nbsp;&nbsp; - queue-1<br>&nbsp;&nbsp; - queue-2</p>\r\n<p>If the mappings configuration points only to the queue name all messages goes in the first namespace (namespace-A):</p>\r\n<p>&lt;add Messages="MyMessages" Endpoint="queue-1" /&gt;<br>&nbsp;<br>Event if in the service configuration it is defined the service namesapce to use:</p>\r\n<p>&lt;Setting name="AzureServiceBusQueueConfig.ServiceNamespace" value="namespace-B" /&gt;</p>\r\n<p>Pointing to the full queue name produces the expected behavior:</p>\r\n<p>&lt;add Messages="MyMessages" Endpoint="queue-1@sb://namespace-B.servicebus.windows.net/" /&gt;<br>&nbsp;<br>The service namesapce configuration seems to be ignored by the unicast bus configuration.</p>\r\n<p>.m</p>'
683,'','Deprecate INeedToInstallInfrastructure\nThis feature needs to be deprecate so we can remove it in 4.0\r\n\r\nUsers can use our installer or powershell support to accomplish the same thing'
682,'andreasohlund',"Don't reinstall Msmq without user approval\nRight now we reinstall msmq without asking for approval. Since this will wipe out any local queues this is dangerous.\r\n\r\nThe powershell commandlet is already supporting this by requiring a -Force. We should modify our infra installer to do the same"
681,'','Improve the feedback for MachinePreparation\nWe now know which infrastructure parts that needs setup in order to work with NSB. We can display this in both the NuGet dialog to improve the user experience.\r\n\r\n* We can also give them a chance to not setup some of them (eg. exclude raven)'
680,'',"Fix broken proj refs\ni've just started looking at the nsb codebase - couldn't get the build/tests to pass until i fixed a couple of broken project refs.\r\nhaven't done a pull request before - not sure if you need anything more than this...?\r\ncheers\r\njustin"
679,'','SagaDispatcherFactory throws NullReferenceException if message contains no replyto-address\n'
678,'johnsimons','Configuring Raven with fluent API fails to assign default database \nIf you configure Raven with fluent API and specify a database name:\r\nEg:\r\n```c#\r\n.RavenPersistence(connectionStringName:"RavenDb", database:"Client")\r\n```\r\nthe database name is overwritten by the default profiler'
677,'andreasohlund','Verify if the machine is setup correctly on nuget initialization (init.ps1)\n* Check regkey to see if we have prepped the machine (optional, see how easy this)\r\n* if not verify if the machine is setup ok (pull the code into powershell)\r\n* if not pop a browser to a nservicebus.com/machinerequirements?MissingComponents={msm|dtc|etc}\r\n\r\nDo the above for each install|update'
676,'','Help users getting started by directing them to the website on first time nuget installs\nWhen a user installs the nsb package for the first time ask them if we should take them to the website\n\n* Detect if nsb studio is installed and use a different url depending'
675,'johnsimons','Install trial license when users install|update the NServiceBus package\n* Embed the regscript in the package\n* Run the regscript on both install.ps1 and update.ps1 (inline the script)'
674,'johnsimons','Modify the licensing to only prompt the users when trial license expire\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/licensing/NServiceBus.Licensing/LicenseManager.cs\n\nOnly do this in DEBUG mode\n\n* Pop a messagebox asking the users to go to nservicebus.com/getlicense if they want to continue using NServiceBus.\n* If they cancel, just let them continue running the endpoint\n* Make a browse button to browse and install the license\n\n* If the trial period hasn\'t expired run the endpoint with the equivalent of a "full" license(even if not in debug mode)'
673,'johnsimons','Convert the zip download to a msi\nTo give us a way to set things up automatically for users we need to change the zip download to be a msi instead. This way we can automatically setup a license for them etc\n\nHave the msi:\n\n* Unpack the folder structure\n* Install the trial license reg script'
672,'johnsimons','Add support for a single license file per machine\nTo simplify for users we should support a single license per machine.\n\nThe logic is as follows\n\n1. Look for a specific license in the bin folder (just like today) and use that one if found\n2. If not found look for a Registry key\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\NServiceBus\\License]\n"Path"="c:\\\\program files\\\\nservicebus\\\\license\\\\license.xml"\n```\n3. If regkey is found pull license information from that location\n\nWe probably have to modify RHino.Licensing for this to work'
671,'johnsimons','Add optimistic concurrency checks to the inmemory saga persister\nAt the moment multiple threads can read the same data and later update it without the persister throwing any exceptions. We need to add a version/timestamp so that we can detect if data has been changes between read and update so that we can throw a concurrency exception just like a database would do.\n\nThe current workaround is to run single threaded but since we are adding the "Volatile" mode of operations in 4.0 this needs to be fixed'
670,'',"Spring container blows up at startup in v4\nThe error is:\n```\nSystem.InvalidOperationException was caught\n  Message=You can't alter the registrations after the container components has been resolved from the container\n  Source=NServiceBus.ObjectBuilder.Spring\n  StackTrace:\n       at NServiceBus.ObjectBuilder.Spring.SpringObjectBuilder.NServiceBus.ObjectBuilder.Common.IContainer.Configure(Type concreteComponent, DependencyLifecycle dependencyLifecycle)\n       at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent(Type concreteComponent, DependencyLifecycle instanceLifecycle) in c:\\Projects\\NServiceBus\\src\\impl\\ObjectBuilder.Common\\ObjectBuilder.Common\\CommonObjectBuilder.cs:line 54\n       at NServiceBus.Installer`1.<InstallOtherInstallers>b__1(Type t) in c:\\Projects\\NServiceBus\\src\\installation\\NServiceBus.Installation\\Install.cs:line 132\n       at System.Collections.Generic.List`1.ForEach(Action`1 action)\n       at NServiceBus.Installer`1.InstallOtherInstallers() in c:\\Projects\\NServiceBus\\src\\installation\\NServiceBus.Installation\\Install.cs:line 131\n       at NServiceBus.Installer`1.Install() in c:\\Projects\\NServiceBus\\src\\installation\\NServiceBus.Installation\\Install.cs:line 106\n       at NServiceBus.Hosting.Windows.Profiles.Handlers.WindowsInstallerRunner.Run() in c:\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting.Windows\\Profiles\\Handlers\\WindowsInstallerRunner.cs:line 36\n       at NServiceBus.Configure.<Initialize>b__13(IWantToRunWhenConfigurationIsComplete o) in c:\\Projects\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 312\n       at System.Collections.Generic.List`1.ForEach(Action`1 action)\n       at NServiceBus.Configure.Initialize() in c:\\Projects\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 311\n       at NServiceBus.Configure.CreateBus() in c:\\Projects\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 261\n       at NServiceBus.Hosting.GenericHost.Start() in c:\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting\\GenericHost.cs:line 31\n  InnerException: \n\n```\n\nThe class that is modifying the registration is `SatelitesQueuesCreator`."
669,'',"NETBIOS 15 character limit not 14\nFrom everything I've read, including the microsoft link below, it looks like the NETBIOS limitation is 15, not 14. Can someone confirm this?\n\nThe reason this is an important issue is that Amazon changed their naming conventions for their EC2 instances, so NSB code won't run on any new EC2 instances.\n\nIf someone will confirm that it's 15, not 14, I'll submit the fix and hopefully we can get it into 3.3\n\nhttp://support.microsoft.com/kb/163409"
668,'andreasohlund',"Satellites always run with one worker thread\nThe satellites should use the same number of worker threads as it's main transport. Right now they only run with one.\n\n\nThis is a problem on both develop and master\n\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/satellites/NServiceBus.Satellites/SatelliteTran\nsportBuilder.cs"
667,'johnsimons',"Create a solution for all NServiceBus projects\nGiven that Vs2012 supports async loading of project it's now feasible to have one big solution for all projects (we can still keep more fine grained ones as well like NHibernate.sln, Azure.sln and so on)\n\n@kblooie has already done some spikes using http://code.google.com/p/merge-solutions/wiki/HOWTO and it looks promising"
666,'','AzureSubscriptionStorageConfig - configure the table name?\nIs there anyway that I can configure the name of the table for Azure subscription storage?\n\nIf there is no such setting, could you add it as an optional one?\n\nhttp://tech.dir.groups.yahoo.com/group/nservicebus/message/15940\n\nThanks.'
665,'',"Upgrade ASP.NET MVC integration to v4\nThis also requires upgrading all out sample to v4 (including Azure ones).\n\nAnd make sure we reference the ASP.NET MVC nuget package ( https://nuget.org/packages/Microsoft.AspNet.Mvc ), that way we don't need to have the ASP.NET MVC installed on our machines.\n\nFor reference how to upgrade from v3 to v4, see http://www.asp.net/whitepapers/mvc4-release-notes#_Toc303253806"
664,'johnsimons',"NServiceBus.Core has a dependency on System.Web.Mvc (version 2.0.0.0) \nOfficial package 3.2.8\n\nNServiceBus.Core has a dependency on System.Web.Mvc (version 2.0.0.0) ?\nOther adjacent references (system.xml for example)  are pointing at version 4.0.0.0\n\n<b>Why does an ESB need a dependency to a web MVC framework?</b>\n\nThe one example of this is demonstrated by binding faults in the  FullDuplex Sample, when version 2 of asp.mvc is not installed.\n\n```bash\nSystem.IO.FileNotFoundException: Could not load file or assembly 'System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of i\nts dependencies. The system cannot find the file specified.\nFile name: 'System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\n   at NServiceBus.Unicast.Callback.NServiceBus.ICallback.Register[T](Action`1 callback)\n   at MyClient.ClientEndpoint.Run() in f:\\NServiceBus.3.2.8\\samples\\FullDuplex\\MyClient\\ClientEndpoint.cs:line 27\n   at NServiceBus.Hosting.Configuration.ConfigManager.<>c__DisplayClass1.<Startup>b__0() in c:\\TeamCity\\buildAgent\\work\\nsb.master_8\\src\\hosting\\NServiceBus.Hos\nting\\Configuration\\ConfigurationManager.cs:line 70\n\n=== Pre-bind state information ===\nLOG: User = MS08R2-X64-NSB\\root\nLOG: DisplayName = System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n (Fully-specified)\nLOG: Appbase = file:///F:/NServiceBus.3.2.8/samples/FullDuplex/MyClient/bin/Debug/\nLOG: Initial PrivatePath = NULL\nCalling assembly : NServiceBus.Core, Version=3.2.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.\n===\nLOG: This bind starts in default load context.\nLOG: Using application configuration file: F:\\NServiceBus.3.2.8\\samples\\FullDuplex\\MyClient\\bin\\Debug\\MyClient.dll.config\nLOG: Using host configuration file:\nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config.\nLOG: Post-policy reference: System.Web.Mvc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\nLOG: Attempting download of new URL file:///F:/NServiceBus.3.2.8/samples/FullDuplex/MyClient/bin/Debug/System.Web.Mvc.DLL.\nLOG: Attempting download of new URL file:///F:/NServiceBus.3.2.8/samples/FullDuplex/MyClient/bin/Debug/System.Web.Mvc/System.Web.Mvc.DLL.\nLOG: Attempting download of new URL file:///F:/NServiceBus.3.2.8/samples/FullDuplex/MyClient/bin/Debug/System.Web.Mvc.EXE.\nLOG: Attempting download of new URL file:///F:/NServiceBus.3.2.8/samples/FullDuplex/MyClient/bin/Debug/System.Web.Mvc/System.Web.Mvc.EXE.\n```"
663,'','RunMeFirst.bat Crashes with VS 2012\nRunning RunMeFirst.bat on a machine with VS 2012 produces the following error:\n\n(3.2.8 Official package)\n\n```bash\n23/09/2012 10:05:04 PM - \t\t-------------------------------------------------------\n23/09/2012 10:05:04 PM - \t\tIdentifier   : 93373818-600f-414b-8181-3a0cb79fa785\n23/09/2012 10:05:04 PM - \t\tName         : Pattern Toolkit Manager\n23/09/2012 10:05:04 PM - \t\tVersion      : 1.2.0.0\n23/09/2012 10:05:04 PM - \t\tMoreInfoURL  : \n23/09/2012 10:05:04 PM - \t\tNested       : Yes\n23/09/2012 10:05:04 PM - \n23/09/2012 10:05:04 PM - \n23/09/2012 10:05:04 PM - Searching for applicable products...\n23/09/2012 10:05:04 PM - Found installed product - Microsoft Visual Studio Ultimate 2012\n23/09/2012 10:05:04 PM - Found installed product - Microsoft Visual Studio Premium 2012\n23/09/2012 10:05:04 PM - Found installed product - Microsoft Visual Studio Professional 2012\n23/09/2012 10:05:04 PM - Found installed product - Microsoft Visual Studio 2012 Shell (Integrated)\n23/09/2012 10:05:04 PM - Found installed product - Global Location\n23/09/2012 10:05:04 PM - VSIXInstaller.NoApplicableSKUsException: This extension is not installable on any currently installed products.\n   at VSIXInstaller.App.InitializeInstall()\n   at System.Threading.Tasks.Task.InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n```\n\n\n<b>Also: Why does this script assume that I want the Modelling tools ?</b>'
662,'mookid8000','Make sure SQL queues are created under the correct user identity\n'
661,'',"Make UnicastBus extensible\nUnicastBus does way too much. But that is besides the point :-)\n\nI need to change the behavior of `UnicastBus.Defer*` - that should either be factored out of UnicastBus, or UnicastBus has to be made extensible.\n\nIt is really hard to replace the Bus implementation, for various reasons:\n\n- `IUnicastBus` exists, but is rarely used - so currently a replacement needs to derive from `UnicastBus`\n- Methods in `UnicastBus` are not marked virtual\n- `ConfigUnicastBus.Configure` does not check, if a `UnicastBus` (or better  `IUnicastBus`) has been registered before\n- `ConfigUnicastBus.Configure` does not rely on `IUnicastBus` defaulting to `UnicastBus`, but on ` UnicastBus` itself\n-  `NServiceBus.Unicast.Config.StartupRunners` resolves `UnicastBus` directly in order to attach to an event that is also defined on `IStartableBus`\n- Gateway and Distributor  reference `UnicastBus` directly\n\nThats what i found for now.\n\nI managed to replace the UnicastBus without changes to the code - but man, it is ugly! I'm intercepting the component activation in Autofac, giving it my own UnicastBus-implementation that overrides all methods with `new` and then delegates to the real instance. Additionally i have to run the delegates registered on the base class' `Start` when `Start` on the real bus occurs.\n\n*What do you think?* Do you agree that it needs refactoring? Or should we just factor out `Defer` somehow?\n\nJust in case you are interested: we run a simulated mode, where time goes much faster: one day pr. minute. Runs like a charm - virtual times are propagated throughout the system with message headers.  Defer must then also occur much earlier - but the message will come back with a virtual time of when the timeout really would have occurred."
660,'','Incorrect Message Endpoint Mapping of hyphenated projects\nSummary\n--\nIf your project/assembly has an hyphenated name the generated queue name is underscored; however when mapping the assembly endpoint (using `<MessageEndpointMappings>`) the hypen isn\'t also parsed with an underscore to match.\n\nExample\n--\n**FAILS**\nSubscriber fails with missing queue / incorrect permissions exception.\n\n    Project/Assembly: CRM.Subscriber-Publisher.Messages\n    XML Mapping: <add Messages="CRM.Subscriber-Publisher.Messages" Endpoint="cRM.Subscriber-Publisher"/>\n\n**WORKS**\nSubscriber finds queue as endpoint mapping altered manually.\n\n    Project/Assembly: CRM.Subscriber-Publisher.Messages\n    XML Mapping: <add Messages="CRM.Subscriber-Publisher.Messages" Endpoint="cRM.Subscriber_Publisher"/>\n\nCan happily pass on an example project if required.'
659,'johnsimons','Local build script parametrizable\n'
658,'','Preserve exception stacktrace on failing messages\nHad a hard time finding the error - until i got the correct stack trace :-)'
657,'johnsimons',"Saga timeout testing fails if Saga doesn't implement IHandleTimeout<t>\nWhen using the NServiceBus testing framework to test sagas if  the saga calls \n\nRequestUtcTimeout<TMyTimeput>(TimeSpan.FromMinutes(x));\n\nbut doesn't implemement IHandleTimeout<TMyTimeout> then the testing framework will throw:\n\nObject of type 'System.TimeSpan' cannot be converted to type 'System.DateTime'.\n\n\n\n"
656,'','Make the default isolation level for endpoints ReadCommitted\nThe .net TransactionScope will default to Serializable which is not a suitable default for production use'
655,'','Improve the support for unobtrusive mode when unit testing\nToday you have to do this:\r\n\r\n```c#\r\nMessageConventionExtensions.IsMessageTypeAction =\r\n                t => t.Namespace != null && t.Namespace.EndsWith("Messages") && !t.Namespace.StartsWith("NServiceBus");\r\n\r\nTest.Initialize();\r\n````\r\nWe should improve this so that users can pass in the conventions to test initialize or similar'
654,'','Add support for arrange,act, assert(AAA) style testing for sagas and handlers\nAdd overloads to allow AAA style testing of sagas.\r\n\r\n```\r\nTest.Saga<PreferedCustomer.Policy>()\r\n    .Given(g =>{\r\n           g.Message<OrderAccepted>(m=>{m.OrderValue = 1000;m.OrderId="xyz";);\r\n           g.Timeout<OrderNoLongerValidForBonus>(t=>t.OrderId = "xyz")\r\n           }\r\n    )\r\n   .When<OrderAccepted>(m=>m.OrderValue = 4999)\r\n   .ShouldNotPublish<CustomerMadePrefered>();\r\n```\r\n\r\nWe\'ll also look into checking the mappings by making sure(Perhaps a option: strict) that the messages in "Given" actually has started a saga and the following messages have correlated to to that saga instance.  In the example above that would mean that the user would have to add a CustomerId to correlate the orders on.'
653,'','Internalized NLog interferes with external NLog\nNLog is internalized into NSB because RavenDB is dependent on it. NLog will automatically configure itself if there is a nlog.config file present in the application directory. If I want to configure NLog myself by having a nlog.config this means that the internalized nlog will also configure itself using this file. The effect will be 2 instances of NLog that writes to the same targets which is not very good if you for example have rolling file targets with exclusive lock.\n\nThe solution is to override the internalized NLog configuration and have it either going to a null target or maybe creating a bridge to NSB.Logging (NSB4) or log4net (NSB3). The latter could be useful if you want to troubleshoot ravendb issues.'
652,'','Username command line argument not used when assigning queue permissions\nWe need to assign the correct ACLs to the passed in username.\n\nThis is working in v3!\n'
651,'','Allow Granular Control over Infrastructure Installers\nAllow The ability to selectively install infrastructure components via the command line.  Not all components should be installed all the time.  See this user voice entry: http://nservicebus.uservoice.com/forums/24334-general/suggestions/3137429-allow-granular-control-over-infrastructure-install?tracking_code=1b44e5a940d246317f56a40e038fded0'
650,'andreasohlund',"Assign specific versions to nuget dependencies\nAt the moment if a user installs NServiceBus.NHibernate they get NHibernate 3.3.1.4000 because that is the latest stable release, however we are using NHibernate 3.3.0.4000 and because we use strong name versions, the users need to add binding redirects for this to work.\n\nBecause of a decision by the nuget team to not automatically add binding redirects for class lib projects (see http://nuget.codeplex.com/workitem/1428) our users need to manually invoke `Add-BindingRedirects`.\n\n99% of the time users don't do this because it is not intuitive.\n\nSo I'm wondering if we should lock in our nuget packages to use specific versions instead of greater or equal?\n\n"
649,'johnsimons','Turn on optimistic concurrency by default for NHibernate sagas\nIf the saga data isn\'t containing a Version property turn on  "optimistic-all".\n\nhttp://ayende.com/blog/3946/nhibernate-mapping-concurrency\n\nThis makes sure that the users isn\'t exposed to concurrency issues.\n\nGiven that user can be on "serializable" transaction scopes today without a Version property I don\'t think we can add this to  3.X in a backwards compatible way'
648,'','Add a overload to WhenSagaTimesOut that excepts a timespan\nThe WhenSagaTimesOut releases all timeouts. It can be interesting to "release all timeouts up to this time" so we should add an optimal timespan argument.\n\nWe could also look into a separate method:\n\n.WhenTimeHasPassed(TimeSpan.FromDays(2))\n'
647,'andreasohlund','Suppress the "no handlers found" warning if a callback is fired\nUsers transitioning from a more RPC like styles of systems sometimes needs to do a .Register() to get the results of a bus.Reply. This results in a the warning above since we only suppress that warning for Bus.Return\n\nEven though it\'s recommended to do it in this way (they shouldn\'t be using callbacks for any thing other than status codes) we should make sure to not warn if we detect that there was a callback that got invoked.\n\nThe current workaround is to either configure log4net to ignore the warn or add a dummy handler for the reply message.'
646,'','NServiceBus Host Process should configure service dependency automatically.\nas the whole library is convention over configuration, then when installing a service using the Host Process the service should discover and automatically add dependencies for the needed services like MSMQ, Distibuted Transaction Coordinator, etc.\n\n'
645,'johnsimons','Expanding registration options to work with Tasks\nAdding two new ways to register a callback that are more easily used with the Task Parallel Library and the new async/await features of .net 4.5.  These methods return a Task, or a Task<T> such that they can be consumed, for example, by an async webapi controller - or some other asynchronous operation.'
644,'','Latest\n'
643,'johnsimons','Turn off SLR for both the TimeoutManager and TimeoputDispatcher\nIn order to prevent a endless message loop SLR should not be used for the timeoutmanger and its dispatcher. This is because the SLR relies on the TM.\n\nRight now the SLR is "hardcoded" into to FaultsForwarder but we need to make it a first class concept in the TransactionalTransport'
642,'johnsimons','"Received an empty message" warning is misleading\nI get warning "Received an empty message". This message is misleading because, message body was not empty, but message was not registered in serializer. I think that this message should be corrected and should provide some valuable information about problem with deserializing.\n\nI\'m also think that no message should be ignored. There should be threw exception, and message should go to error queue.'
641,'',"ScheduledTask is not Serializable\nhttp://tech.groups.yahoo.com/group/nservicebus/message/15768\n\nI get the following error while trying to schedule a task using IWantToRunWhenTheBusStarts.\n\nException when starting endpoint, error has been logged. Reason: Type 'NServiceBus.Scheduling.Messages.ScheduledTask' in Assembly 'NServiceBus.Core, Version=3.2.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c' is not marked as serializable.\n\nMy endpoint has been configured to use binary serialization. Is there something I am missing here?\n\nCode snippet as follows:\n\npublic class ExpiredTicktesWatcher \n: IWantToRunWhenTheBusStarts\n{\nprivate readonly ITicketStore _ticketRep;\n\nprivate readonly IBus _bus;\n\npublic ExpiredTicktesWatcher(ITicketStore ticketRep,\nIBus bus)\n{\n_ticketRep = ticketRep;\n_bus = bus;\n}\n\npublic void Run()\n{\nSchedule.Every(TimeSpan.FromHours(1))\n.Action(() =>\n{\n// DO SOME WORK\n});\n}\n}"
640,'','XmlSerializer add support for IEnumerable<T> (even with private setter)\nIssue:\n\nA class with the following shape is not correctly serialized using the XmlSerializer since the Foo property is skipped at serialization time.\n\nclass MyEvent\n{\n  public MyEvent()\n  {\n      this.Foo = new String[]{ “a”, “b” };\n  }\n  public IEnumerable<String> Foo{ get; private set; }\n}\n\nWorkaround: change from IEnumerable<T> to T[] the return type.\n\n.m'
639,'','Add support for filtering messages by namespace on message endpoint mappings\nWe decided to use the following convention:\r\n\r\n`<add Assembly="Assembly name" Namespace="Filter by namespace" Type="Single message type" Messages="Old Style" Endpoint="EndpointA" />`'
638,'','IsTransactional value should be True by default\n'
637,'','SQL Server Unit test fails on Correlation ID\n'
636,'','SQL Server Transport is not thread safe\nWhen multiple readers exist, messages are read more than once'
635,'johnsimons',"In ExtensionMethods for Messages, check if the object passed is a message\nThis code looks great:\n`Bus.CurrentMessageContext.GetHeader(EventChainHeaderKey)`\n\nAnd will always return null. Thanks.\n\nOffering extension methods on object is bad by default. Doing so in the root namespace is irresponsible :-)\n\nNServiceBus.ExtensionMethods should check if the object passed is a Message (Command or Event), and fail if it isn't.\n*Code that asks for Headers on non-Messages should rather fail today!*\n\nAlso, as soon as breaking changes are allowed, the class should be moved to NServiceBus.Unobtrusive - but then offer those extensions for ICommand and IEvent directly in the root namespace."
634,'','Support pulling messages in from service broker\nCan use implementation found in the contrib project.'
633,'johnsimons','Upgrade to Raven 1.0.975\nIn order to fix the instability issues with the TM we need to upgrade to the patched raven.\n\nMake sure to update the resource files with the new server binaries as well'
632,'johnsimons',"Fix compiler warning\nWhen I reference NServiceBus from a .net 4.5 project, I get several compiler warnings similar to the following:\nThe predefined type 'System.Runtime.CompilerServices.AsyncTaskMethodBuilder' is defined in multiple assemblies in the global alias; using definition from 'c:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\mscorlib.dll'\n\nThis seems to be caused by the line I'm removing here. \xa0See the following:\nhttp://www.wwco.com/~wls/blog/2010/10/14/defined-in-multiple-assemblies/"
631,'','FTP receiver does not pick up existing messages\nIf the FTP site is up but the NServiceBus FTP Receiver application is not running & then later started, the receiver application does not pick up exisiting messages - it only picks up new messages.\n\nThe reason is because we are using a `FileSystemWatcher` and not checking at startup if there are any files.'
630,'','FTP transport does not send message to error queue if it fails to transmit file\nIf the destination FTP site is down, the only error displayed is at DEBUG level and the message is not sent to the Error queue.\nActually the message just disappears!\n\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/unicast/queuing/NServiceBus.Unicast.Queuing.Ftp/FtpMessageQueue.cs#L74'
629,'',"Saga-to-Saga Request/Response doesn't work out of the box\nSagas don't populate the necessary headers to make replying to another saga possible, so if you have a case where saga A calls saga B, ReplyToOriginator will fail because saga B never gets to see the OriginatingSagaId / OriginatingSagaType headers and saga B's output message fails to find saga A (it actually looks for saga B and fails because it's already been marked complete at this point).\n\nYou can still reply to another saga by using the pre-3.0 approach of a custom ConfigureMapping, but this seems like an oversight."
628,'','Check that machine name is shorter than 15 characters, in startup validation\nhttp://social.msdn.microsoft.com/Forums/en/windowstransactionsprogramming/thread/1ddb9665-1a28-4d3e-bddd-50de2f07543a'
627,'',"EncryptionMessageMutator.MemberInfoExtensions blows up with indexed properties (3.2.8)\nThis is a new bug introduced in 3.2.8.  The code for GetValue and SetValue assumes that properties aren't indexed:\n\n    public static class MemberInfoExtensions\n    {\n        public static object GetValue(this MemberInfo member, object source)\n        {\n            if (member is FieldInfo)\n                return ((FieldInfo)member).GetValue(source);\n\n            return ((PropertyInfo)member).GetValue(source, null);\n        }\n\n        public static void SetValue(this MemberInfo member, object target, object value)\n        {\n            if (member is FieldInfo)\n                ((FieldInfo)member).SetValue(target, value);\n            else\n                ((PropertyInfo)member).SetValue(target, value, null);\n        }\n\n    }\n\nBecause of this, if any object in a message's graph contains an indexed property, Bus.Send will fail on it because the mutator will throw a parameter count mismatch exception."
625,'andreasohlund',"Encryption doesn't support List<WireEncryptedString|Convention>\n## Testing procedures\n\n1. Run the encryption sample\n2. Make sure that the list of creditcard details are transmitted properly\n3. Verify that the message in the queue are indeed encrypted\n4. Verify the above with the json serilaizer as well"
624,'johnsimons',"Bug fix for WIndsorObjectBuilder.ConfigureProperty method.\nThis is a bug fix for: http://tech.groups.yahoo.com/group/nservicebus/message/15329.\n\nTargetType parameter of DependencyModel needs to be the concrete type of the property that we want to force to be resolved for the property on this component.\n\nLet me know if I did any of this wrong, I'm not too familiar with git and GitHub.\n\nThanks,\nCris"
623,'','Enable SqlServerTransport for SendOnly endpoints\n'
622,'johnsimons','Gateway does not work with SQL Transport\nRelated to issue #477'
621,'','Correlation ID is not set in Sql Transport\n'
620,'johnsimons',"UnityBuilder and IMessageModule\nHi, I having two problems with using IMessageModule with UnityBuilder in NSB 3.2.7. \n\nDuring building invoking UnityBuilder's method BuildAll there is checking that passed type is in DefaultInstances. Unfortunately it doesn't have IMessageModule interface (my current workaround is to add it manually). \n\nAnother problem is that BuildAll invoke Resolve of the Unity, so unity try Resolve interface IMessageModule which isn't registered.  I have registered two implementation of IMessageModule - both are registered with name."
619,'andreasohlund','Fixes #618\nGateway replies were working accidentally, by using KeyPrefixConventionSiteRouter instead of OriginatingSiteHeaderRouter.'
618,'andreasohlund','Cannot reply to gateway messages over HTTPS - KeyNotFoundException thrown\nI\'m using NSB 3.2.7\n\nConfiguration of SSL:\nI\'ve created a self-signed SSL certificate using\n`makecert -n "CN=localhost" -r -pe -eku 1.3.6.1.5.5.7.3.1 -ss MY -sr localmachine -sky exchange`\nUsing mmc console Certificates snap-in & wizards, I copied my localhost certificate from Personal->Certificates to Trusted Root Certification Authorities\n\nI then used the above certificate\'s thumbprint (found by double clicking the certificate->Details tab) to configure a HTTPS port\n`netsh http add sslcert ipport=0.0.0.0:25899 certhash=thumbprint appid={461f29bc-9243-4930-a132-88419d8d53cb}`\nnote: the appid is irrelevant and can be any valid Guid\n\nRan the gateway sample.\nBoth sites (SiteA and SiteB) receive the PriceUpdated message\nHowever, SiteA is unable to reply to the gateway message - Headers.DestinationSites contains `http,https://localhost:25899/Headquarter/NumberOfWorkerThreads=1Default=False`\nHowever, `GatewaySender.OnTransportMessageReceived` sees `https` as the channel type\nFor some reason, the `Headers.OriginatingSite` is not present in the headers\n\nHeadquarter\n```\n<GatewayConfig>\n    <Sites>\n      <Site Key="SiteA" Address="https://localhost:25899/SiteA/" ChannelType="Http"/>\n      <Site Key="SiteB" Address="https://localhost:25899/SiteB/" ChannelType="Http"/>\n    </Sites>\n    <Channels>\n      <Channel Address="https://localhost:25899/Headquarter/" ChannelType="Http" Default="true"/>\n      <Channel Address="https://localhost:25899/Headquarter2/" ChannelType="Http"/>\n    </Channels>\n</GatewayConfig>\n```\nSiteA\n```\n  <GatewayConfig>\n    <Channels>\n      <Channel Address="https://localhost:25899/SiteA/" ChannelType="Http" Default="true"/>\n    </Channels>\n  </GatewayConfig>\n```\nSiteB\n```\n  <GatewayConfig>\n    <Channels>\n      <Channel Address="https://localhost:25899/SiteB/" ChannelType="Http" Default="true"/>\n    </Channels>\n  </GatewayConfig>\n```\n\n### How to test\n\nSee above'
617,'','Add support for ZeroMQ\n'
616,'johnsimons','Enable specification of WCF namespaces\nAllow users to do the following:\n\n[ServiceContract(Namespace = "http://myorg.com/wcfintegration")]\npublic class CancelOrderService : WcfService<CancelOrder, ErrorCodes>\n\nWhich will set the namespace of the WCF binding in the WCF hosting code we have in NServiceBus.Hosting.\n\nInclude this in the sample.'
615,'andreasohlund','v2.X encryption is not compatible with 3.X endpoints\nThe serialization format has changed.\n\nv2.X\n```\n<Messages xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://tempuri.net/Messages">\n\t<MessageWithSecretData>\n\t\t<Secret>\n\t\t\t<EncryptedBase64Value>X040LyS4rEiJCOhx6Zs5m/hWVBF2/XqWGnLbIffihaA=</EncryptedBase64Value>\n\t\t\t<Base64Iv>8vdq6uGOMadA3TUAblNx6Q==</Base64Iv>\n\t\t</Secret>\n\t</MessageWithSecretData>\n</Messages>\n```\nv3.X\n```\n<Messages xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://tempuri.net/Messages">\n\t<MessageWithSecretData>\n\t\t<Secret>\n\t\t\t<EncryptedValue>\n\t\t\t\t<EncryptedBase64Value>7iTSSNQNahX339aIqVS/ecKhmrjPhMZUONdIRxOyORo=</EncryptedBase64Value>\n\t\t\t\t<Base64Iv>jp9B7prGYev+p82gaJ9Mcg==</Base64Iv>\n\t\t\t</EncryptedValue>\n\t\t</Secret>\n\t</MessageWithSecretData>\n</Messages>\n```\nNote that `<EncryptedValue >` is now wrapping the actual data.\n\nPossible solutions:\n\n1. Use a Incoming mutator to update v2.X messages. This will only work one way since we don\'t have that hook on the 2.X side.\n2. Add a setting to 3.2.8 that runs encryption in "2.X compat mode" essentially enabling another mutator that does the above.\n\nThis is only valid for customers using the xmlserializer.\n\n\nTo reproduce using Encryption sample\n\n1. Run client from 2.X\n2. Run server from 3.X\n3. Send a message\n\n## Test procedures\n\nUsing the encryption sample\n* Send a message from a 2.X client to a 3.2.8 server and make sure that it works\n* Send a message from a 3.2.8 client to a 2.X server\n* Verify that all content in the queues are encrypted\n* Turn of the compatibility mode (see the 3.2.8 client) and make sure that no extra properties are sent over the wire'
614,'andreasohlund','Msmq receives still require DTC to be on even though .SupressDTC is set\nWe need to use "Single" msmq transaction instead of "automatic" when .SupressDTC is set.\n\nThe workaround is to set .IsTransactional = false but that will disable the first level retries so it\'s not always acceptable\n\n### How to test\n\n* Configure a endpoint to supress dtc\n* Disable the DTC service\n\nRun the endpoint and make sure that it doesn\'t blow up'
613,'andreasohlund',"The TimeoutManager doesn't preserve the ReplyToAddress\nWhen sending a timeout to the TM the ReplyToAddress will always be set to Address.Local when the timeout fires.\n\n### How to test\nIn the timeout manager sample - Create a new endpoint (needs to be a new endpoint) that sends a message to start the SimpleSaga. Set a timeout and do a bus.reply when the timeout fires.\n\nReply should go back to the new endpoint"
612,'johnsimons',"SLR only retries once after a message has been sent back using ReturnToSourceQueue\nTo replicate:\n\n1. Run the ErrorHandling sample\n2. After a message reaches the Error Q, run RTTSQ.exe and have it sent back\n3. Notice that it's retried but then sent back to the error q immediately\n\nThe fix is to have the tool remove the NServiceBus.Retries header"
611,'andreasohlund','If SLR is on only log messagas failing the max times as WARN instead of ERROR\nThe ERROR log should happen when the SLR gives up'
610,'andreasohlund','Have the nuget nsb.host packate setup a EndpointConfig on install\nWhen the host package is installed in a new project we should create a template endpointconfig.cs\n\nEndpointConfig:IConfigureThisEndpoint,As_aServer //make this As_aPublisher if you intend to publish from this endpoint'
609,'andreasohlund','Reintroduce the SkipDeserialization flag\nIn 2.X we had this flag that turned of deserialization and prevented the invocation of handlers. This got lost when we refactored the transport in 3.0. We should add it back since its needed for users doing more infrastructure related things on the main endpoint.\n\n### How to test\nCreate a endpoint and new up a transactional transport. Set the flag to false and add a handler from TransportMessageReceived. Make sure that no serializer is invoked '
608,'andreasohlund',"Support throughput limitation across multiple threads\nRight now the MaxThroughput limit is confusing users since we force them to run on on thread and that makes the throughput bound to the time it takes for the messagehandler to execute. Eg. if your handler takes 100 ms the max throughput will be 10 msg/s even if you have a 32 msg/s license. We've already had a support case complaining about this. The code for this will be very tricky so there are great risks involved though. One way would be to create our own TaskScheduler like suggested here:\n\n#498\n\nThe upside would be:\n\n* Throughput limits would now be for the entire endpoint regardless of number of threads. Which makes more sense to our users.\n* We can remove the whole thread limitation thing. Essentially only using the throughput to limit the users , this makes it easier to explain to our users as well as simplifying license generation and management.\n* More flexible for users that needs multithreaded but not for throughput reasons.\n\nDownside\n* The code to do this will probably be non-trivial\n\nOther related issues:\n#384 "
607,'johnsimons','Timeouts may increase on endpoint restarts\nIf the endpoint is restarted while there are timeouts queued up in the timeout queue two things may happen:\n1. This only happens if using more than 1 thread:\n```\n2012-08-14 12:56:37,355 [4] FATAL NServiceBus.Hosting.GenericHost [(null)] - Raven.Client.Exceptions.NonAuthoritativeInformationException: Document TimeoutData/27285 returned Non Authoritative Information (probably modified by a transaction in progress) and AllowNonAuthoritativeInformation is set to false\nat Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity[T](String key, RavenJObject document, RavenJObject metadata)\nat Raven.Client.Document.SessionOperations.QueryOperation.Deserialize[T](RavenJObject result)\nat System.Linq.Enumerable.WhereSelectListIterator`2.MoveNext()\nat System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\nat System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\nat Raven.Client.Document.SessionOperations.QueryOperation.Complete[T]()\nat Raven.Client.Document.AbstractDocumentQuery`2.GetEnumerator()\nat Raven.Client.Linq.RavenQueryInspector`1.GetEnumerator()\nat System.Collections.Generic.List`1.InsertRange(Int32 index, IEnumerable`1 collection)\nat NServiceBus.Timeout.Hosting.Windows.Persistence.RavenTimeoutPersistence.GetAll()\nat NServiceBus.Timeout.Core.TimeoutRunner.CacheExistingTimeouts()\nat NServiceBus.Timeout.Core.TimeoutRunner.Run()\nat System.Collections.Generic.List`1.ForEach(Action`1 action)\nat NServiceBus.Unicast.UnicastBus.NServiceBus.IStartableBus.Start(Action startupAction)\nat NServiceBus.Hosting.GenericHost.Start() in c:\\TeamCity\\buildAgent\\work\\nsb.master_4\\src\\hosting\\NServiceBus.Hosting\\GenericHost.cs:line 34\n```\n  This brings down the endpoint\n\n2.The timeouts increase in the timeout queue if there were timeouts queued before the endpoint is shutdown\n'
606,'',"Gateway channel receiver throws ArgumentException when DataReceivedOnChannel called within ambient transaction\nhttp://tech.groups.yahoo.com/group/nservicebus/message/15464\n\nAll nested scopes must be configured to use exactly the same isolation level if they want to join an ambient transaction. If the nested scope's timeout is more than that of the ambient transaction, it has no effect.\n"
605,'','Update to StructureMap  2.6.4.1\n'
604,'','Provide a better api for the gateway notification mechanism\nWe should provide a better api that includes all relevant details\n\nRelated to #580'
603,'','Move the creation of queue into the satellite manager\nThe SM should create the input queues for its satellites:\n\n1. Get create a installer\n2. Get the ICreateQueues\n3. Loop through all the satellites\n4. if SAT.IsEnabled => get the SAT.Address and create the queue\n5. Remvove the relevant IWantQueueCreated from the individual satellites'
602,'','Add support for doing pub/sub over the gateway\nTo allow us to deprecate the proxy feature we should look into supporting pub/sub over the gateway.'
601,'','Better message when ConnectionString is not configured properly \nWhen working with SQL Server transport, when connection string is not supplied neither in the fluent API nor in the app.config, the user is not warned for it.\n\n## To reproduce: ##\nAdd usage of SqlServerTransport without specifying connection string at MyServer in FullDuplex sample.\n\n```C#\nnamespace MyServer\n{\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Server, IWantCustomInitialization {\n        /// <summary>\n        /// Perform initialization logic.\n        /// </summary>\n        public void Init()\n        {\n            Configure.With().DefaultBuilder().SqlServerTransport();\n        }\n    }\n}\n```\nRun the sample and watch the exception.\n'
600,'andreasohlund','Fixes #599\nReceiveChannel.Default on every channel returned from GatewayConfig.GetChannels() was always false'
599,'andreasohlund','Replies to gateway messages always come back on the first channel\nMoving Default=true to the second channel in the configuration of Headquarter project (gateway sample) does nothing\n\n&lt;Channels&gt;\n  &lt;Channel Address=&quot;http://localhost:25899/Headquarter/&quot; ChannelType=&quot;Http&quot;/&gt;\n  &lt;Channel Address=&quot;http://localhost:25899/Headquarter2/&quot; ChannelType=&quot;Http&quot; Default=&quot;true&quot;/&gt;\n&lt;/Channels&gt;\n\nThe reply from SiteA always comes back through the first channel\n\n### How to test\nRun the gateway sample and make sure that the response from site A is arriving on the channel marked as default'
598,'',"Make the NServiceBus info logging opt-in\nAt them moment we're automatically printing the info logging that nservicebus generates. We should:\n\n* Only print WARN and higher by default to avoid cluttering the output\n* Add a way for users to opt-in on the info logs. Perhaps a flag in the LoggingConfig section.\n\nThis would make the output from our samples easier to read and avoids distracting our users."
597,'johnsimons','Remove Get|SetHeader extension methods from object\nWe need to find another way to get|set the headers since having them as extension methods on object is cluttering the intellisense for our users. Related to #596\n\nPerhaps move them back to IMessage and add a Bus.SetMessageHeader(msg,key,value) +Bus.GetMessageHeader(msg,key) for users in unobtrusive mode'
596,'johnsimons','Remove unneeded extension methods from Object\nRemove all extension methods for object except GetHeader and SetHeader\n\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/core/NServiceBus/ExtensionMethods.cs#L66\n\nNot that SetDestinationSitesHeader is used. Just replace it with msg.SetHeader(Headers.DestinationSites, "xyz");'
595,'','Inform users when raven is not installed due to port 8080 beeing unavailable\nSee http://stackoverflow.com/questions/11954199/nservicebus-is-not-installing-ravendb-with-runmefirst-bat'
594,'andreasohlund','Enable dependency injection for our regular installers\n'
593,'','NullReferenceException during testing saga instance.\nDuring testing saga I get NullReferenceException:\n\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at NServiceBus.Testing.Saga`1..ctor(T saga, StubBus bus)\n   at NServiceBus.Testing.Test.Saga[T](T saga)\n   at ConsoleApplication5.Program.Main(String[] args) in i:\\Projekty\\ConsoleApplication5\\ConsoleApplication5\\Program.cs:line 22\n\nThis is caused after invoking the following code:\n\nvar saga = new MySaga(10);\nTest.Saga<MySaga>(saga);\n\nIt will be also great if Saga<T> Saga<T>(T saga) method will not force me to have parameterless constructor.'
592,'','Add support for polymorphic properties to the XML serializer\nTo allow for properties to be of type Animal while still allow Dogs and Cats instances to be passed'
591,'','Introduce Endpoint configuration class\n'
590,'johnsimons','Some gateway messages do not get sent when mixing convention and key addresses\n```\r\nBus.SendToSites(new[] { "http://localhost:25899/SiteA/", "SiteB" }, new PriceUpdated\r\n                {\r\n                    ProductId = 2,\r\n                    NewPrice = 100.0,\r\n                    ValidFrom = DateTime.Today\r\n                });\r\n```\r\nMessage is delivered to SiteB only\r\n\r\nProblem\'s in `GatewaySender.OnTransportMessageReceived().` `CloneAndSendLocal()` is called only once\r\n\r\nChanging \r\n`var destinationSites = GetDestinationSitesFor(messageToDispatch);`\r\nto\r\n`var destinationSites = GetDestinationSitesFor(messageToDispatch).ToList();`\r\nfixes the problem but seems like a hack.\r\n\r\nNot sure what the underlying issue is.\r\n\r\n'
589,'johnsimons','StackOverflowException at startup in the MessageMapper\nFound a strange behavior here in the MessageMapper:\n\n        private static string GetTypeName(Type t)\n        {\n            var args = t.GetGenericArguments();\n            if (args.Length == 2)\n                if (typeof(KeyValuePair<,>).MakeGenericType(args) == t)\n                    return t.SerializationFriendlyName();\n\n            return t.FullName;\n        }\n\nWe get at startup a StackOverflowException in the “GetGenericArguments” call, we do not know which is the type causing the exception, debugging it is a pain due to the stack overflow and the fact that we have something like 4000 types that get registered in the serializer.\nQuestion: should not the code be safely changed to?\n\n        private static string GetTypeName(Type t)\n        {\n            If( t.IsGenericType )\n           {\n                var args = t.GetGenericArguments();\n                 if (args.Length == 2)\n                     if (typeof(KeyValuePair<,>).MakeGenericType(args) == t)\n                         return t.SerializationFriendlyName();\n            }\n            return t.FullName;\n        }\n\nBecause I’ve seen that GetGenericArguments does a recursion that can be very long and maybe there are cases where if the type is not a generic type that recursion leads to a StackOverflowException.\n\n.m\n'
588,'','Ninject throws exception at startup v4 only\nTry to run Databus sample\n```\n2012-08-12 13:07:14,121 [10] ERROR NServiceBus.Unicast.UnicastBus [(null)] <(nul\nl)> - Problem occurred when starting the endpoint.\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at Ninject.Injection.DynamicMethodInjectorFactory.EmitMethodCall(ILGeneratoril, MethodInfo method) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Injection\\DynamicMethodInjectorFactory.cs:line 130\n   at Ninject.Injection.DynamicMethodInjectorFactory.Create(PropertyInfo property) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Injection\\DynamicMethodInjectorFactory.cs:line 78\n   at Ninject.Activation.Strategies.PropertyInjectionStrategy.AssignProperyOverrides(IContext context, InstanceReference reference, IEnumerable`1 propertyValues) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Strategies\\PropertyInjectionStrategy.cs:line 105\n   at Ninject.Activation.Strategies.PropertyInjectionStrategy.Activate(IContextcontext, InstanceReference reference) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Strategies\\PropertyInjectionStrategy.cs:line 83\n   at Ninject.Activation.Pipeline.<>c__DisplayClass2.<Activate>b__0(IActivationStrategy s) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Pipeline.cs:line 58\n   at Ninject.Infrastructure.Language.ExtensionsForIEnumerableOfT.Map[T](IEnumerable`1 series, Action`1 action) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Infrastructure\\Language\\ExtensionsForIEnumerableOfT.cs:line 32\n   at Ninject.Activation.Pipeline.Activate(IContext context, InstanceReference reference) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Pipeline.cs:line 58\n   at Ninject.Activation.Context.Resolve() in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Context.cs:line 182\n   at Ninject.KernelBase.<>c__DisplayClass10.<Resolve>b__c(IBinding binding) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\KernelBase.cs:line 386\n   at System.Linq.Enumerable.WhereSelectListIterator`2.MoveNext()\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.NServiceBus.ObjectBuilder.IBuilder.BuildAll>d__1`1.MoveNext() in c:\\Projects\\NServiceBus\\src\\impl\\ObjectBuilder.Common\\ObjectBuilder.Common\\CommonObjectBuilder.cs:line 156\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\n   at NServiceBus.Satellites.SatelliteLauncher.Build() in c:\\Projects\\NServiceBus\\src\\satellites\\NServiceBus.Satellites\\SatelliteLauncher.cs:line 39\n   at NServiceBus.Satellites.SatelliteLauncher.Start() in c:\\Projects\\NServiceBus\\src\\satellites\\NServiceBus.Satellites\\SatelliteLauncher.cs:line 28\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass19.<NServiceBus.IStartableBus.Start>b__18() in c:\\Projects\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 829\n```'
587,'',"Mugen Injection Object Builder\nHello, thanks for your project.\n\nThis is my project http://mugeninjection.codeplex.com/, I'm added my implementation for NServiceBus.ObjectBuilder.\nI'm tested it with your unit-test, and real examples and all work fine."
586,'andreasohlund','SLR retry: Wrong \'Response\' header value in MSMQ message\nThis issue is related to issue #525.\n\nThe fix for issue #525 makes sure that the messages in the error queue have the correct header.\n\nProblem now is with messages that don\'t reach the error queue, but are successfully processed during one of the Second level retries. These messages have the incorrect Response header.\n\n### How to test\nRun the ErrorHandling sample and make sure that the printed "ReplyToAddress" stays consistent across retries'
585,'johnsimons','Remove the IReceiveMessages.HasMessage\nAlso refactor the existing implementations and the transactional transport to not use it'
584,'andreasohlund','DataBus Properties do not get sent via the Gateway\nIdempotentChannelForwarder.TransmittDataBusProperties() never goes into the foreach loop, so IdempotentChannelForwarder.Transmit is never called for the databus messages. \nThe problem appears to be with the header prefix. All header keys appear to have "NServiceBus.Header" at the start.\n\n### How to test\nRun the gateway sample and make sure that the "LargeString" property is printed ok in both site A and B'
583,'johnsimons',"Misleading exception during send large message\nWhen I send message that is bigger than 4MB I get ConfigurationException, that contains QueueNotFoundException. It's a little misleading because configuration is valid and queue exist.\n\nCommon.Logging.ConfigurationException: The destination queue 'consoletest@slawek' could not be found. You may have misconfigured the destination for this kind of message (ConsoleApplication9.MyMessage) in the MessageEndpointMappings of the UnicastBusConfig section in your configuration file. It may also be the case that the given queue just hasn't been created yet, or has been deleted. ---> NServiceBus.Unicast.Queuing.QueueNotFoundException ---> System.Messaging.MessageQueueException: Insufficient resources to perform operation.\n   at System.Messaging.MessageQueue.SendInternal(Object obj, MessageQueueTransaction internalTransaction, MessageQueueTransactionType transactionType)\n   at System.Messaging.MessageQueue.Send(Object obj, MessageQueueTransactionType transactionType)\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageSender.NServiceBus.Unicast.Queuing.ISendMessages.Send(TransportMessage message, Address address)\n   --- End of inner exception stack trace ---\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageSender.NServiceBus.Unicast.Queuing.ISendMessages.Send(TransportMessage message, Address address)\n   at NServiceBus.Unicast.UnicastBus.SendMessage(List`1 addresses, String correlationId, MessageIntentEnum messageIntent, Object[] messages)\n   --- End of inner exception stack trace ---\n   at NServiceBus.Unicast.UnicastBus.SendMessage(List`1 addresses, String correlationId, MessageIntentEnum messageIntent, Object[] messages)\n   at NServiceBus.Unicast.UnicastBus.SendMessage(Address address, String correlationId, MessageIntentEnum messageIntent, Object[] messages)\n   at NServiceBus.Unicast.UnicastBus.SendMessage(String destination, String correlationId, MessageIntentEnum messageIntent, Object[] messages)\n   at NServiceBus.Unicast.UnicastBus.NServiceBus.IBus.Send(String destination, Object[] messages)\n   at ConsoleApplication9.Program.Main(String[] args)"
582,'andreasohlund','When configuring the SLR in app.config enabled should default to true\nIf you just add:\n\n  <SecondLevelRetriesConfig TimeIncrease="00:00:05" NumberOfRetries="1"/>\n\nit will be disabled'
581,'',"Testing framework doesn't support RequestUtcTimeout<T>(TimeSpan) in v2.6 mode\nHere is the exception you get:\n```\nSystem.ArgumentException: Object of type 'System.TimeSpan' cannot be converted to type 'System.DateTime'.\n\nSystem.RuntimeType.TryChangeType(Object value, Binder binder, CultureInfo culture, Boolean needsSpecialCast)\nSystem.RuntimeType.CheckValue(Object value, Binder binder, CultureInfo culture, BindingFlags invokeAttr)\nSystem.Reflection.MethodBase.CheckArguments(Object[] parameters, Binder binder, BindingFlags invokeAttr, CultureInfo culture, Signature sig)\nSystem.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)\nSystem.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\nSystem.Reflection.RuntimePropertyInfo.SetValue(Object obj, Object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture)\nSystem.Reflection.RuntimePropertyInfo.SetValue(Object obj, Object value, Object[] index)\nNServiceBus.Testing.StubBus.ProcessInvocationWithBuiltType(Type builtType, Dictionary`2 others, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\nsb.master_7\\src\\testing\\StubBus.cs: line 268\nNServiceBus.Testing.StubBus.ProcessInvocation[K](Type dualGenericType, Dictionary`2 others, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\nsb.master_7\\src\\testing\\StubBus.cs: line 250\nNServiceBus.Testing.StubBus.ProcessDefer[T](Object delayOrProcessAt, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\nsb.master_7\\src\\testing\\StubBus.cs: line 296\nNServiceBus.Testing.StubBus.Defer(TimeSpan delay, Object[] messages) in c:\\TeamCity\\buildAgent\\work\\nsb.master_7\\src\\testing\\StubBus.cs: line 164\nNServiceBus.Saga.Saga`1.RequestUtcTimeout[TTimeoutmessageType](TimeSpan within, TTimeoutmessageType timeoutMessage) in c:\\TeamCity\\buildAgent\\work\\nsb.master_7\\src\\core\\NServiceBus.Saga\\Saga.cs: line 178\nNServiceBus.Saga.Saga`1.RequestUtcTimeout[TTimeoutmessageType](TimeSpan within, Action`1 action) in c:\\TeamCity\\buildAgent\\work\\nsb.master_7\\src\\core\\NServiceBus.Saga\\Saga.cs: line 163\n```\n\nSample code to replicate problem:\n```c#\n using System;\n    using System.Reflection;\n    using NServiceBus;\n    using NServiceBus.Saga;\n    using NServiceBus.Testing;\n\n    \n    [TestClass]\n    public class MySagaTests\n    {\n        [TestInitialize]\n        public void Init()\n        {\n            Test.Initialize(Assembly.GetExecutingAssembly(), typeof(CompletionResult).Assembly);\n        }\n\n        [TestMethod]\n        public void WhenMessageATimeout()\n        {\n            Test.Saga<MySaga>()\n                .ExpectTimeoutToBeSetIn<int>((flag, span) => flag == 1 && span.TotalDays == 30)\n                .When(saga => saga.Handle(new Event()))\n                .AssertSagaCompletionIs(false);\n\n\n        }\n    }\n\n    public class MySaga : NServiceBus.Saga.Saga<Data>, IAmStartedByMessages<Event>\n    {\n\n        public override void Timeout(object state)\n        {\n            if ((int)state == 1)\n                MarkAsComplete();\n        }\n\n        public void Handle(Event message)\n        {\n\n            RequestUtcTimeout(TimeSpan.FromDays(30), 1);\n        }\n    }\n\n    public class Event : IEvent\n    {\n\n    }\n    public class Data : ISagaEntity\n    {\n        public Guid Id { get; set; }\n        public string Originator { get; set; }\n        public string OriginalMessageId { get; set; }\n    }\n```"
580,'andreasohlund','The gateway notification mechanism is broken\nChange MessageNotifier to be singlecall so that users can register for the notification.\n\nWe should also consider creating a better mechanism for those notifications\n\n### How to test\nRun the gateways sample and make sure that the sample notifier in the gateway project is invoked when a message has been sent to a site'
579,'','Container is not being disposed on stop\nBecause the container is not being disposed, components that implement `IDisposable` are not being Disposed!\n\nExample:\n```C#\n    public class MyComponent :IDisposable\n    {\n        public void Dispose()\n        {\n            Console.Out.WriteLine("This won\'t be called!");\n        }\n    }\n\n    public class RegisterMyComponent : INeedInitialization\n    {\n        public void Init()\n        {\n            Configure.Instance.Configurer.ConfigureComponent<MyComponent>(DependencyLifecycle.SingleInstance);\n        }\n    }\n```'
578,'johnsimons',"RavenDB and ResourceManagerId\nIn a side by side deployment (this also affect the Distributor if we have more than 1 worker on the same machine), RavenDB distributed transaction get assigned the same ResourceManagerId.\nAnd this causes the following error:\n```\n2012-08-08 13:33:50,470 [Worker.14] WARN  NServiceBus.Unicast.Transport.Transactional.TransactionalTransport [(null)] <(null)> - Failed raising 'transport message received' event for message with ID=6601cd40-306c-41fc-a0d5-fc5aa25d3218\\15347598\nSystem.Runtime.InteropServices.COMException (0x8004D102): A resource manager with the same identifier is already registered with the specified transaction coordinator. (Exception from HRESULT: 0x8004D102)\n   at System.Transactions.Oletx.IDtcProxyShimFactory.CreateResourceManager(GuidresourceManagerIdentifier, IntPtr managedIdentifier, IResourceManagerShim& resourceManagerShim)\n   at System.Transactions.Oletx.OletxResourceManager.get_ResourceManagerShim()\n   at System.Transactions.Oletx.OletxResourceManager.EnlistDurable(OletxTransaction oletxTransaction, Boolean canDoSinglePhase, IEnlistmentNotificationInternalenlistmentNotification, EnlistmentOptions enlistmentOptions)\n   at System.Transactions.Oletx.OletxTransaction.EnlistDurable(Guid resourceManagerIdentifier, ISinglePhaseNotificationInternal singlePhaseNotification, Boolean canDoSinglePhase, EnlistmentOptions enlistmentOptions)\n   at System.Transactions.TransactionStatePromotedBase.EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction)\n   at System.Transactions.Transaction.EnlistDurable(Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions)\n   at Raven.Client.Document.InMemoryDocumentSessionOperations.TryEnlistInAmbientTransaction() in c:\\Builds\\raven\\Raven.Client.Lightweight\\Document\\InMemoryDocumentSessionOperations.cs:line 874\n   at Raven.Client.Document.InMemoryDocumentSessionOperations.PrepareForSaveChanges() in c:\\Builds\\raven\\Raven.Client.Lightweight\\Document\\InMemoryDocumentSessionOperations.cs:line 773\n   at Raven.Client.Document.DocumentSession.SaveChanges() in c:\\Builds\\raven\\Raven.Client.Lightweight\\Document\\DocumentSession.cs:line 406\n   at NServiceBus.Timeout.Hosting.Windows.Persistence.RavenTimeoutPersistence.Remove(String timeoutId) in c:\\Projects\\NServiceBus\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\Persistence\\RavenTimeoutPersistence.cs:line 110\n   at NServiceBus.Timeout.Core.Dispatch.TimeoutDispatchHandler.Handle(TransportMessage message) in c:\\Projects\\NServiceBus\\src\\timeout\\NServiceBus.Timeout.Core\\Dispatch\\TimeoutDispatchHandler.cs:line 23\n   at NServiceBus.Timeout.Hosting.Windows.TimeoutMessageProcessor.OnTransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e) in c:\\Projects\\NServiceBus\\src\\timeout\\NServiceBus.Timeout.Hosting.Windows\\TimeoutMessageProcessor.cs:line 49\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg) in c:\\Projects\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 480\n```\nThe problem is that we use the [endpoint address to generate a deterministic guid](https://github.com/NServiceBus/NServiceBus/blob/master/src/impl/Persistence/RavenPersistence/NServiceBus.Persistence.Raven/RavenPersistenceConstants.cs#L30) to use as ResourceManagerId\n\nHowever as explained in [this thread](https://groups.google.com/d/topic/ravendb/LqnFP8dSgYM/discussion) we shouldn't need to assign a deterministic `Guid` and instead we could use `Guid.NewGuid`."
577,'johnsimons','Obsolete the LegacySiteRouter in the gateway\nAnd the LegacyEndpointRouter'
576,'johnsimons',"Message type header check in Unicastbus breaks v3 compatibility\nWe can't throw when 'the message intent is Subscribe, but the subscription message type header is missing' as this would break backward compatibility with v3 subscription messages"
575,'','SQL Queues cannot handle control message\nSQL Queues cannot handle control message where the message body is null'
574,'','SQL Queues is initialized as single instance\nSQL Queues is initializes as single instance, hence receiving endpoint is the last one configured'
573,'','In sendonly mode, no satellites should be invoked\n'
572,'johnsimons','Lambda support for Unity container\nSee #386'
571,'andreasohlund','SLR retries causes workers to send extra ready messages\nWith SLR enabled each retry will cause the worker to send a readymessage which will fool the distributor to think that the worker has more capacity that it really has. The fix is to not send a new ready message as the result of a retried message beeing processes.\n\n\n### Testing procedures\n1. Run the ScaleOut sample and have the handler throw an exception.\n2. This should not lead to the number of messages in the storage queue increasing beyond 3 (the sample has 3 workers with one thread each)'
570,'','Refactor ICreateQueues\nAt the moment I think the current implementation is not really abstracting anything for us, the actual abstraction is in ICreateQueues.\n\nSo currently to tell the framwork we want a queue created we have to do 2 things:\n- get ICreateQueues injected via container\n- call QueueCreator.CreateQueueIfNecessary\n\nSee:\n```C#\n    public class CreateMyQueue : IWantQueuesCreated<Installation.Environments.Windows>\n    {\n        public ICreateQueues QueueCreator { get; set; } // <-- This is extra work\n\n        public void Create(WindowsIdentity identity)\n        {\n            QueueCreator.CreateQueueIfNecessary(address, identity.Name, isVolatile); // <-- This is extra work\n        }\n    }\n```\nIMO this abstraction should be instead the following:\n```c#\n    public interface IWantQueueCreated\n    {\n        Address Address { get; }\n        bool IsDisabled { get; }\n    }\n```\nThis way all we have to worry about is provide the specs to create a queue to the framework, and the framework should handle the rest for us.\n\nMove the invocation of the installers from\n\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/installation/NServiceBus.Installation/Install.cs#L118\n\nto  a new class in \nhttps://github.com/NServiceBus/NServiceBus/tree/develop/src/unicast/NServiceBus.Unicast.Queuing\n\nIn there:\n1. Get all Configure.ScannedTypes that implements IWantQueueCreated\n2. Take a dependency on create queues\n3. Loop through #1 and call ICreateQueues.Create if the Enabled == true'
569,'johnsimons','Upgrade to Windsor 3.1\n'
568,'johnsimons','SatelliteTransportBuilder always use MsmqMessageReceiver\nSatelliteTransportBuilder always use MsmqMessageReceiver so it is impossible to use this feature with custom transport. It should be way to setup custom receiver like in TimeoutMessageProcessor.'
567,'','Add an IBus property to messages - extension method\nThis will allow us to do things like this:\n\npublic class H1 : IMessageHandler<MyMessage>\n{\n     public void Handle(MyMessage message)\n     {\n          message.Bus().Reply(something);\n     }\n}\n\nWhich will save on typing out the property or constructor injection - much less friction.'
566,'johnsimons','DBSubscriptionStorageConfig and hibernate-configuration in the same configuration file\nI am trying to configure DBSubscriptionStorageConfig with NSB 3.2.6 and NHibernate 3.3.0.400. Service is hosted with NServiceBus.Host.exe.\n\nMessage handlers are also using NHibernate as part of their logic and that leads us to have both \n```xml\n<DBSubscriptionStorageConfig UpdateSchema="true">\n...\nconfiguration for Subscription Storage database\n...\n</DBSubscriptionStorageConfig>  \n```\nand  \n```xml\n<hibernate-configuration xmlns="urn:nhibernate-configuration-2.2">\n...\nconfiguration for service database\n...\n</hibernate-configuration>\n```\nsections in configuration file.\n\nWhen I initialize the bus with the following code\n\n```C#\nconfigure\n   .DefaultBuilder()           \n   .DBSubcriptionStorage() \n```\nit fails with the following exception.\n\n```c#\nSystem.ArgumentException: An item with the same key has already been added.\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\n   at NHibernate.Cfg.Configuration.AddProperties(IDictionary`2 additionalProperties)\n   at NServiceBus.ConfigureNHibernateSubscriptionStorage.DBSubcriptionStorage(Configure config)\n   at IfInsurance.Core.MessagingCommon.DefaultNServiceBusEndpointConfig.ConfigureNServiceBus()\n   at IfInsurance.Core.MessagingCommon.DefaultNServiceBusEndpointConfig.Init()\n```\nIf I remove nhibernate-configuration section from config file it does not fail, but I have to specify NHibernate configuration for service database.\n\nAs a workaround service nhibernate configuration setting can be specified in hibernate.cfg.xml file. '
565,'johnsimons','Saga.RequestUtcTimeout(TimeSpan) seems mis-named\nNote: I may be confused about the intent of this method. feel free to correct me :)\n\nSo a timeout can be requested in 2 ways \n\n * A given date+time in the future. This is where UTC is important\n * A give period of time from now. In this case UTC is irrelevant\n\nIn fact talking about "timespans" in the context of UTC seems to make no sense in this case.\n\nTo further illustrate would ther be any difference bewtween the current Saga.RequestUtcTimeout(TimeSpan) and a hypothetical method Saga.RequestTimeout(TimeSpan)  ?\n\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/core/NServiceBus.Saga/Saga.cs'
564,'','Retire HttpChannelException from gateway\nThe GW used to be Http only so that is a left over from the refactoring to make it more generic. '
563,'johnsimons',"Fix #562: Create fluent configuration for .DisableGateway()\nSorry about the first commit with the spacing. I'll make sure Visual Studio is set to keep spaces from now on."
562,'',"Create fluent configuration for .DisableGateway()\nThere is currently no way to disable the gateway, and it is enabled by default by the Master profile. The only way currently to disable the Gateway is currently:\n\n* Do not use the Master profile\n* Have the endpoint configure AsMasterNode(), RunDistributor(true), and RunTimeoutManager() itself, either via fluent config or via different custom profile\n* Take into consideration that if using the Integration profile, you normally get RavenSubscriptionStorage if the Master/Worker/Distributor profiles are present (otherwise you get MSMQ storage), and that if you're rolling your own Master profile, you'll need to do this yourself.\n\nThis is too confusing and there should be an easy fluent configuration method to disable the gateway."
561,'','Fix serializer initialization with Spring container and Azure\n'
560,'johnsimons','Timeouts set in the past blows up with KeyNotFoundExceptions\nTo reproduce: (using the TimeoutManager sample)\n\nModify the start handler in the SimpleSaga to set a timeout in the past:\n\nRequestUtcTimeout<MyTimeOutState>(DateTime.Now.AddSeconds(-10));\n\nThis causes the saga infrastructure to do a SendLocal instead of a defer:\n\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/core/NServiceBus.Saga/Saga.cs#L144\n\nthis in turn causes the "NServiceBus.Expiry" header to not be set (that happens in the defer).\n\nWhen the message comes back in with no header this means that its not considered a timeout message:\n\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/Sagas/NServiceBus.Sagas.Impl/SagaDispatcherFactory.cs#L27\n\nand this means that the wrong method is invoked:\n\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/Sagas/NServiceBus.Sagas.Impl/SagaDispatcherFactory.cs#L76\n\n\nWe need to make sure that the header is set before we send local. Or push that check down into bus.Defer (which I think we already do on the master)\n\n'
559,'johnsimons','Call document store dispose on exit\nTo prevent:\n```\nStackTrace of un-disposed document store recorded. Please make sure to dispose any document store in the tests in order to avoid race conditions in tests.\nat Raven.Client.Document.DocumentStore..ctor()\nat Commenter.Handlers.SetupContainer.Init()\nat NServiceBus.Hosting.Configuration.ConfigManager.ConfigureCustomInitAndStartup()\nat NServiceBus.Hosting.GenericHost.PerformConfiguration()\nat NServiceBus.Hosting.GenericHost.Start()\nat Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter)\nat Magnum.StateMachine.State`1.RaiseEvent(T instance, BasicEvent`1 eevent, Object value)\nat Magnum.StateMachine.StateMachine`1.RaiseEvent(Event raised)\n```\nfrom showing to the user.\n\nSee https://github.com/ravendb/ravendb/blob/master/Raven.Client.Lightweight/Document/DocumentStore.cs#L263\n'
558,'andreasohlund','Use a comb guid as the transport message id instead of the MSMQ message id\nIn order to better support users running without the DTC we should use a guid generated by the unicastbus as the transportmessage id instead of relying on the id that MSMQ gives us back. This way we can know the ids ahead of time and there by support the "outbox" pattern mentioned here:\n\nhttp://blogs.msdn.com/b/clemensv/archive/2012/07/30/transactions-in-windows-azure-with-service-bus-an-email-discussion.aspx\n\nThis also decouples us further from MSMQ by not relying in the id.\n\nQ: What do we do about the datatype (header? new property on TM?, change the ID property to guid? keep it as string?)\n\n* Move the combguid generator to a more comon location so we can reuse it\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/Sagas/NServiceBus.Sagas.Impl/GuidCombGenerator.cs\n\n* Assign the guid when creating the transport message\n\n* Investigate how this affects the "OriginalId" header which is pretty much redundant with this change\n\n* Make sure that the id stays consistent across retries, SLR and the error q just like today\n\n* Make sure that we\'re backwards compatible with NSB 2.X /3.X messages\n\n* Test for performance implications\n\n'
557,'andreasohlund','DataBusProperty does not serialize correctly using XMLMessageSerializer in NSB v4.0\nHere is what the serialized message looked like before:\n```xml\n<?xml version="1.0"?>\n<Messages xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://tempuri.net/Receiver.Messages">\n\t<MessageWithLargePayload>\n\t\t<SomeProperty>This message contains a large blob that will be sent on the data bus</SomeProperty>\n\t\t<LargeBlob>\n\t\t\t<Key>2012-07-26_03\\cef1c00c-8853-491d-b250-59a0d0387bd1</Key>\n\t\t\t<HasValue>true</HasValue>\n\t\t</LargeBlob>\n\t</MessageWithLargePayload>\n</Messages>\n```\n\nHere is what it looks now:\n```xml\n<?xml version="1.0"?>\n<Messages xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://tempuri.net/Receiver.Messages">\n\t<MessageWithLargePayload>\n\t\t<SomeProperty>This message contains a large blob that will be sent on the data bus</SomeProperty>\n\t\t<LargeBlob>\n\t\t\t<value>\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</value>\n\t\t\t<_x003C_Key_x003E_k__BackingField>2012-07-30_10\\10e62ed0-364c-48b0-a745-ae8a4d9b15d1</_x003C_Key_x003E_k__BackingField>\n\t\t\t<_x003C_HasValue_x003E_k__BackingField>true</_x003C_HasValue_x003E_k__BackingField>\n\t\t</LargeBlob>\n\t</MessageWithLargePayload>\n</Messages>\n```'
556,'','Better logging of transaction expired exception\n**Mailing thread at yahoo groups:**\nhttp://tech.groups.yahoo.com/group/nservicebus/message/15077\n\n**My Findings:**\n\nUsing FullDuplex sample, and shortening the timeout by:\n```C#\nnamespace MyServer\n{\n    [EndpointSLA("00:00:30")]\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Server, IWantCustomInitialization {\n        public void Init()\n        {\n            Configure.With()\n                .DefaultBuilder()\n                .TransactionTimeout(TimeSpan.FromSeconds(10));\n        }\n    }\n}\n```\nAnd having a thread sleep for more than 10 seconds in the Receiver (server) handler, the message goes (after SLR) to the error queue.\n\nSo it seems the behavior is correct, just the wrong error if any is logged.\nAn exception is being thrown at the server side when it tries to reply to the sender.\nThe exception that is being generated from MSMQ is of type: TransactionEnlist: "Cannot enlist the transaction"\nBut then NServiceBus catch it, and erroneously (a bug), throw QueueNotFoundException exception instead with the innter exception set to the the thrown TransactionEnlist exception:\n \nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/unicast/queuing/NServiceBus.Unicast.Queuing.Msmq/MsmqMessageSender.cs#L39\n\nIf there is no Reply from the server (and no auditing), then the exception is caught at another place and also not logged:\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/impl/unicast/transport/NServiceBus.Unicast.Transport.Transactional/TransactionalTransport.cs#L240\n\nThe following is the exception at this scenario:\nSystem.Transactions.TransactionAbortedException occurred\n  Message=The transaction has aborted.\n  Source=System.Transactions\n  StackTrace:\n       at System.Transactions.TransactionStatePromotedAborted.BeginCommit(InternalTransaction tx, Boolean asyncCommit, AsyncCallback asyncCallback, Object asyncState)\n       at System.Transactions.CommittableTransaction.Commit()\n       at System.Transactions.TransactionScope.InternalDispose()\n       at System.Transactions.TransactionScope.Dispose()\n       at NServiceBus.Utils.TransactionWrapper.RunInTransaction(Action callback, IsolationLevel isolationLevel, TimeSpan transactionTimeout) in c:\\Users\\WorkUser\\NServiceBus\\src\\utils\\TransactionWrapper.cs:line 35\n       at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.Process() in c:\\Users\\WorkUser\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 229\n  InnerException: System.TimeoutException\n       Message=Transaction Timeout\n       InnerException: '
555,'','Allow ReturnToSourceQueue work also with SQL Queues\n'
554,'',"Expose ReturnToSourceQueue as a PowerShell cmdlet\nI'm sure we could expose quite a few nice PowerShell cmdlets to do other work instead of ps1 files.\n\nWe can also make snapins that are a collection of cdlets but they have a set folder structure and txt help files that respond to the get-help cmdlet.\n\nThe advantage is that is all C# code, and most of the code is already written :)\n\nHere is how it is done (link to nuget implementation):\nhttp://nuget.codeplex.com/SourceControl/changeset/view/40c52e38ef42#src%2fVsConsole%2fPowerShellCmdlets%2fInstallPackageCommand.cs \n\nWe could add this to NServiceBus.Core.dll so we wouldn't even need an extra dll. "
553,'johnsimons','#551 Added signing to NServiceBus.Testing assembly\n'
552,'','Bus.InMemory.Raise<> not using current child container\nThe call to Bus.InMemory.Raise<> is not using the current child container.\r\n\r\nThe problem is in [this code](https://github.com/NServiceBus/NServiceBus/blob/master/src/NServiceBus.Core/Unicast/UnicastBus.cs#L955) pasted here for convenience:\r\n```c#\r\nvoid IInMemoryOperations.Raise<T>(T @event)\r\n{\r\n    DispatchMessageToHandlersBasedOnType(Builder, @event);\r\n}\r\n```\r\n\r\nThe `Builder` passed in should be the current child container builder!\r\n'
551,'johnsimons','NServiceBus.Testing is not signed\nNServiceBus.Testing assembly should be signed to allow InternalsVisibleTo attribute to work.'
550,'','With() is called from IConfigureThisEndpoint implementing class only\nAlso check that with is called in the endpoint config'
549,'','DataBus doesn\'t support sending same message type multiple time at once\nIf we modify the DataBus sample (`SendingEndpoint.cs`) to be like this:\n```C#\n        while (true)\n\t{\n\t\t\t    var key = Console.ReadKey();\n\n                if (key.Key == ConsoleKey.E)\n                    SendMessageThatIsLargerThanMsmqCanHandle();\n                else if (key.Key == ConsoleKey.Enter)\n                {\n                    var m1 = new MessageWithLargePayload();\n                    m1.SomeProperty = "This message contains a large blob that will be sent on the data bus";\n                    m1.LargeBlob = new DataBusProperty<byte[]>(new byte[1024 * 1024 * 5]);\n\n                    var m2 = new MessageWithLargePayload();\n                    m2.SomeProperty = "This message contains a large blob that will be sent on the data bus 2";\n                    m2.LargeBlob = new DataBusProperty<byte[]>(new byte[1024 * 1024 * 5]);\n\n                    bus.Send(m1, m2);\n                    \n                    Console.WriteLine("Message sent, the payload is stored in: " + EndpointConfig.BasePath);\n                }\n\t}\n```\nYou receive the following error:\n```\nSystem.ArgumentNullException: Value cannot be null.\nParameter name: path2\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder childBuilder, TransportMessage msg) in c:\\TeamCity\\buildAgent\\work\\nsb.master_6\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1264\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e) in c:\\TeamCity\\buildAgent\\work\\nsb.master_6\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1181\n   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg) in c:\\TeamCity\\buildAgent\\work\\nsb.master_6\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 480\n```'
548,'','Gateway not abstracted from DataBus implementation\nBoth Gateway and DataBus use special "strings" to communicate via headers, see:\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/gateway/NServiceBus.Gateway/Sending/IdempotentChannelForwarder.cs#L79\nand\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/databus/NServiceBus.Databus/DataBusMessageMutator.cs#L12\n\nThis makes it difficult to replace either one of these features.'
547,'','Saga timeout messages stuck in the timeout queue and the timeout handlers are not invoked in the following scenario\nSaga timeout messages stuck in the timeout queue and the timeout handlers are not invoked in the following scenario:\n\n1. Have a NSB Host endpoint configured as a server.\n2. Have a bootstrapper to send a Bus.Local to start a saga in a while loop, so pressing enter keeps sending messages that will start saga.\n3. Have a saga that is started by that message, which requests a timeout in the handler. The timeout handler marks the saga complete.\n\nWhen a key is pressed, the bootstrapper sends a message, the saga is started. The saga when it requests the timeout, the timeout message is in the .timeouts queue and not in Raven. It will be stuck there and the timeout handler will never get invoked.\n\nBootstrapper Code:\nclass Bootstrapper : IWantToRunWhenTheBusStarts\n    {\n        public IBus Bus { get; set; }\n        public void Run()\n        {\n            // If you comment out the while loop and do a bus.sendLocal \n            // without a while loop, it works\n            //var newGuid = Guid.NewGuid();\n            //Bus.SendLocal<StartSagaMessage>(msg =>\n            //{\n            //    msg.TestID = newGuid;\n            //});\n            //Console.WriteLine("Message sent");\n\n            Console.WriteLine("Press any key");\n            while(Console.ReadLine() != null)\n            {\n                var newGuid = Guid.NewGuid();\n                Bus.SendLocal<StartSagaMessage>(msg =>\n                {\n                    msg.TestID = newGuid;\n                });\n                Console.WriteLine("Message sent");\n            }\n        }\n    }\n\nSaga Code:\n public class WeirdSaga : Saga<WeirdSagaSagaData>,\n        IAmStartedByMessages<StartSagaMessage>,\n        IHandleTimeouts<TimeToDoSomething>\n    {\n        public override void ConfigureHowToFindSaga()\n        {\n            ConfigureMapping<StartSagaMessage>(s => s.TestID, m => m.TestID);\n        }\n\n        public void Handle(StartSagaMessage message)\n        {\n            Data.TestID = message.TestID;\n\n            RequestUtcTimeout<TimeToDoSomething>(DateTime.Now.AddSeconds(5));\n            Console.WriteLine(String.Format("Saga Started", Data.TestID));\n        }\n\n        public void Timeout(TimeToDoSomething state)\n        {\n            Console.WriteLine("Timeout Handled");\n            MarkAsComplete();\n        }\n    }\n\n'
546,'johnsimons',"New send emails won't work if the users are not using the XmlSerializer\nNew public API to send emails (`public static void SendEmail(this IBus bus, MailMessage message)`) won't work if the users are not using the `XmlSerializer`.\n\n`System.Net.Mail.MailMessage` is not serializable."
545,'','In a Distributor/Workers environment, make sure erroneous messages are sent back to the distributor\nhttp://tech.groups.yahoo.com/group/nservicebus/message/14994\n \nWhat needs to be done is change the code in the MoveToErrorQueue method which overrides the endpoints return address.\n\nGiven that the current mode of operations is valid we should have a config setting to allow users to switch between the different modes'
544,'johnsimons','Add .DefineTimeToBeReceived(Func<Type,TimeSpan) as extension method on Configure\nAllow users to define Time To Be Received during Bus initialization.'
543,'','Using Release method for Castle Container\nThe Castle Windsor container implements a "Register Resolve Release" pattern for components.  When using the Castle builder with NServiceBus, the UnicastBus indirectly calls Resolve on the container to build a list of MessageModules that are run before and after each message is handled.  When the messages modules have been used (either HandleEndMessage or HandleError is called), the container is never called to Release the messages modules that were built.  Castle tracks the message modules and their dependencies until they are explicitly released, because that never happens it leads to a memory leak as everytime a message module is loaded it is never cleaned up.\n\nI\'ve added a Release method to the IContainer and IBuilder interfaces and called it where I think it is needed in the UnicastBus.\n\nhttp://blog.ploeh.dk/2010/09/29/TheRegisterResolveReleasePattern.aspx\nhttp://nexussharp.wordpress.com/2012/04/21/castle-windsor-avoid-memory-leaks-by-learning-the-underlying-mechanics/'
542,'',"Retries queue not found\nI have several NServicebus services running but apparently one of them is not able to create the `retries` queue. It's causing our error logs to blow to 30+ gigs in a matter of hours. This just started after upgrading from 3.0.3 to 3.2.6. Here's the error:\n\n```  \nFATAL 2012-07-19 14:00:00,010 14655480ms MsmqMessageReceiver    HasMessage         - Queue [DIRECT=OS:nemo\\private$\\myservice.retries] was not found while peeking queue. Exception: [System.Messaging.MessageQueueException (0x80004005): The queue does not exist or you do not have sufficient permissions to perform the operation.\n   at System.Messaging.MessageQueue.MQCacheableInfo.get_ReadHandle()\n   at System.Messaging.MessageQueue.StaleSafeReceiveMessage(UInt32 timeout, Int32 action, MQPROPS properties, NativeOverlapped* overlapped, ReceiveCallback receiveCallback, CursorHandle cursorHandle, IntPtr transaction)\n   at System.Messaging.MessageQueue.ReceiveCurrent(TimeSpan timeout, Int32 action, CursorHandle cursor, MessagePropertyFilter filter, MessageQueueTransaction internalTransaction, MessageQueueTransactionType transactionType)\n   at System.Messaging.MessageQueue.Peek(TimeSpan timeout)\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.HasMessage()]\n```  \n\nThis is on one of our QA machines but it's happening on all of our dev boxes too. It must be causing some infinite loop because we're only sending a few messages at any given time so it wouldn't be enough to cause multiple gigs of logs."
541,'','Scheduling based on starting time\nIt will be nice if I can schedule based on a starting time as well as interval.\n\nFor example, if my schedule is to run a certain task at 8pm every day. \n\nSchedule.Every takes a timespan, but will be nice if I can specify a start date time as well.'
540,'johnsimons','Disabling TimeoutManager and using AllowSubscribeToSelf in config fails at startup\nusing the following config:\n\nclass EndpointConfig : IConfigureThisEndpoint,\n     AsA_Publisher,\n     IWantCustomInitialization\n{\n     public void Init()\n     {\n          NServiceBus.Configure.With()\n                .Log4Net()\n                .DefaultBuilder()\n                .XmlSerializer()\n                .MsmqSubscriptionStorage()\n                .DisableRavenInstall()\n                .DisableTimeoutManager()\n                .Sagas()\n                     .WithMongoSagaPersister()\n                .MsmqTransport()\n                     .IsTransactional( true )\n                     .PurgeOnStartup( false )\n                .UnicastBus()\n                .AllowSubscribeToSelf()\n                .ImpersonateSender( false );\n     }\n}\n\nwith ".DisableTimeoutManager()" and ".AllowSubscribeToSelf()" fails at startup with the following exception:\n\nNo destination could be found for message type NServiceBus.Saga.TimeoutMessage. Check the <MessageEndpointMappings> section of to…. Bla bla…\n'
539,'','I have fixed an issue with sagas in the NServiceBus.Testing project\nThe NServiceBus testing project has a bug in it that causes an object reference error to be raised when sending a message to a specific address from a saga. '
538,'','Switching AsyncPagesMVC3 to Spring container causes an error\nSwitching AsyncPagesMVC3 to Spring container causes the error shown below. Apparently the MessageTypesInitializer.Serializer property is not set when Spring is used. \nEnvironment: Windows 7, 64 bit, Visual Studio 2010 SP1\n.NET Framework 4.5 RC\n\nSystem.NullReferenceException was unhandled by user code\n  HResult=-2147467261\n  Message=Object reference not set to an instance of an object.\n  Source=NServiceBus.Core\n  StackTrace:\n       at NServiceBus.Serializers.XML.Config.MessageTypesInitializer.Run() in c:\\TeamCity\\buildAgent\\work\\nsb.master_6\\src\\impl\\Serializers\\NServiceBus.Serializers.XML.Config\\MessageTypesInitializer.cs:line 23\n       at NServiceBus.Configure.<Initialize>b__d(IWantToRunWhenConfigurationIsComplete o) in c:\\TeamCity\\buildAgent\\work\\nsb.master_6\\src\\config\\NServiceBus.Config\\Configure.cs:line 305\n       at System.Collections.Generic.List`1.ForEach(Action`1 action)\n       at NServiceBus.Configure.Initialize() in c:\\TeamCity\\buildAgent\\work\\nsb.master_6\\src\\config\\NServiceBus.Config\\Configure.cs:line 304\n       at NServiceBus.Configure.CreateBus() in c:\\TeamCity\\buildAgent\\work\\nsb.master_6\\src\\config\\NServiceBus.Config\\Configure.cs:line 261\n       at AsyncPagesMVC3.MvcApplication.Application_Start() in E:\\software\\NServiceBus.3.2.6\\samples\\AsyncPagesMVC3\\AsyncPagesMVC3\\Global.asax.cs:line 36\n  InnerException: '
537,'','Make ScaleOut sample use other port than 8080 for its gateway\nThis will allow the sample to work without administrative rights.'
536,'johnsimons','Unobtrusive definition needed for using DataBus feature\nIt would be nice to be able to use the DataBus feature with unobtrusive mode. This should be definable just like the unobtrusive encryption feature.'
535,'','Removed NewActivationPropertyInjectStrategy\n...with Ninject 3 and greater\n\nFixes issue #514'
534,'',"NServiceBus queues connection timeout\nHi, \n\nI use Nservicebus with Oracle Queues OAQ instaed of MSMQ. \nI have a problem working with a dbms server that is shutdown every day at the same time. \nIn particular when my nservicebus host can't get the dbms connection it starts logging on. \nWhen the dbms is restarted my host restart or not randomly! However restarting my host everything is ok!\n\nAnother detail is that when my nservicebus host can't restart it logs a 'connection timeout message' every 15 seconds! \n\nWhat's the behavior of NserviceBus when it's reading from a queue and the dbms crash? What could i do to solve this problem?  \n\nthank you,\nR"
533,'',"Windows Service timing out\nI'm installing the NServiceBus host as a service and I'm deploying and starting multiple instances of the service (different configs) using a deployment script. some of them are failing to start up properly and time out. I'm using NET START to start the services. There are numerous assemblies in the application folder and scanning all of them to find the endpoint and configurations can cause time outs.\n\nI can start the services in the Control Panel -> Services after they time out or by running NET START again.\n\nThink happens when the service being started does not report back that it is alive and is initializing. AFAIK this could be handled by calling [SetServiceStatus][1] when windows service is being installed.\n\nWondering if this is related to NServiceBus Host or I should report this back to TopShelf?\n\n[1]: http://msdn.microsoft.com/en-us/library/ms686241.aspx"
532,'','Worker is not enlisting with Distributor when there is IP address Distributor control queue in work app.config \n'
531,'johnsimons','ArgumentException with the message "interface not found"\nIf user has "Break when exceptions cross AppDomain or managed/native boundaries (Managed only)" set, it cause the debugger to break on `HandlerInvocationCache` with the following error:\nArgumentException with the message "interface not found"\n\nSee http://tech.groups.yahoo.com/group/nservicebus/message/14800 for more info.'
530,'johnsimons'," NServiceBus.Core referencing 'AsyncCtpLibrary'\nThis assembly is part of RavenDB.\nIt should be internalized!"
529,'','Headers set in handler should be visible to downstream handlers\n--\r\n\r\nHeaders set on the incoming message by one handler in the pipeline should be visible to downstream handlers.\r\n\r\nBased on: http://stackoverflow.com/questions/11462618/if-i-have-2-handlers-for-the-same-message-with-nservicebus-and-one-handler-sets\r\n\r\n'
528,'','Add  to NServiceBus.NHibernate NuGet package a configuration file transformation\nAdd to NServiceBus.NHibernate NuGet package a configuration file transformation script to auto gen config settings for NHibernate persisters.\nHere is info on how to do it:\nhttp://docs.nuget.org/docs/creating-packages/configuration-file-and-source-code-transformations\n'
527,'','Dependency issue in NServicebus.NHibernate NuGet package\nWhen installing the NServicebus.NHibernate 3.2.5 package with NuGet, the dependent package NHibernate 3.2.0.4 is installed but NServicebus.NHibernate assembly uses NHibernate version 3.3.0.4.'
525,'johnsimons',"SLR set the wrong 'Response' value in MSMQ message\nIf SLR is enabled, the response value that the message has is incorrect in the following scenario:\n\n1. Originating Endpoint (NSB Host, configured as a publisher) sends a command to ServerA (NSB Host, configured as a server)\n2. ServerA has SLR enabled\n3. Server A handles the command and responds with a reply\n4. Originating Endpoint has a handler for the reply message\n\nSend a command such that, that command will fail and end up in the error queue.\n\nIf the command fails in ServerA and is forwarded to the errorQ, the response value has ServerA, instead of OriginatingEndpoint.\nSo, the problem is when I reprocess the error message from the error q(after fixing the message content, so ServerA can now reply), ServerA will get the message, but when it tries to reply, it will bomb out, with No handlers found for the message, because it is trying to respond to itself and it doesn't have a handler for the reply message.\n\nWith SLR enabled, the response value (when you look at the message properties in the error q, especially at the Response, its OS:<machinename>\\private$\\servera, instead it should be OS:<machinename>\\private$\\originatingendpoint).\n"
524,'','RavenPersister not picking up database name if specified via connectionstring\nI am trying to configure NServiceBus (3.2.5) to use Raven connection string from configuration file.  \nI added the following connection string into config file\n```xml\n<add name="NServiceBus.Persistence" connectionString="Url=http://localhost:8080;Database=FooBar"/>.\n```\nBut when NServiceBus.Host.exe starts it always create database with my endpoint name.\n\nThen I tried to specify connection string and database name from the code \n```C#\nconfigure\n .CastleWindsorBuilder(container)\n  .RavenPersistence("NServiceBus.Persistence", "FooBar")\n```\nIn this case it creates 2 Raven database: one FooBar and one with my endpoint name.\n\nWhen I looked inside databases, then then one with my endpoint name has 2 additional indexes: `RavenTimeoutPersistence/TimeoutData/BySagaId` and `RavenTimeoutPersistence/TimeoutDataSortedByTime`, but FooBar database does not have them.'
523,'','Dont error when cant create queue on remote machine.\nBut on this point why bother even trying to create queues on remote machines?'
521,'','RunMeFirst.bat should provide some information that it believes RavenDB is already installed\nRunMeFirst.bat could display something like "C:\\Program Files\\NServiceBus.Persistence exists. Raven appears to be installed."\n\nThis would be similar to how it informs you that DTC and MSMQ are already setup.\n\nI had uninstalled Raven with "Raven.Server.exe /uninstall". I didn\'t understand why Raven wasn\'t getting installed.'
520,'johnsimons',"InMemoryTimeoutPersistence doesn't assign a value to Id\nWhen I defer messages on the bus they go to storage field of `InMemoryTimeoutPersistence` class instance. \nHowever, `Id` property for each of `TimeoutData` is null. \nSo, when the time comes for a message to be processed it goes to error queue because `storage.Remove(storage.Single(t=>t.Id == timeoutId))` throws mentioned above exception. "
519,'','Install + Start GenericHost in the same AppDomain\nCurrently this works, but `PerformConfiguration` is run twice.\nPerform configuration should only be run once pr. instance.'
518,'johnsimons','Running /installinfrastructure from an endpoint output does not install MSMQ\nMSMQ should be installed when running /installinfrastructure, even if it is done from an endpoint, unless explicitly disabled via the api.'
517,'johnsimons','Automatic endpointname assumes class named "Program"\nSee http://tech.groups.yahoo.com/group/nservicebus/message/14686\n\nIn summary, `DefaultEndpointName.Get()` assumes the entry point class is called *Program*.\nAnd it also assumes that a namespace is used, Namespaces are optional in c#!'
516,'','Ability to "undefer" a message\nFrom customer notes:\n\nI have deleted deferred messages from RavenDB using the Silverlight based studio and also programmatically using the .Net Client API. The messages I delete still seem to process. I noticed when I deleted and restarted the endpoint it was the only way I could get rid of these messages. \n\nThis could be a showstopper for us unless I make changes to the apps catching "out of date" deferred work and ignore it. That\'s a fair amount of work to do for something that feels out of place if implemented outside of NSB.\n'
515,'johnsimons','Batch Send fails when sending multiple commands from different namespaces using the XmlSerializer\nRepro steps:\n\n1) Configure an NServiceBus host like so:\n\n```c#\nConfigure.With()\n   .DefineEndpointName(this.GetType().Assembly.GetName().Name.ToLower())\n   .StructureMapBuilder()\n   .XmlSerializer()\n   .Log4Net()\n   .UnicastBus()\n   .LoadMessageHandlers()\n   .MsmqTransport()\n   .IsTransactional(true)\n   .IsolationLevel(IsolationLevel.RepeatableRead)\n   .RunTimeoutManagerWithInMemoryPersistence()\n   .RunTimeoutManager()\n   .MsmqSubscriptionStorage();\n```\n\n2) Define a command in namespace A:\n\n```c#\nnamespace MyApp.Messages.Commands.A\n{\n   [Serializable]\n   public class Command1 : ICommand\n   {\n      public Guid Id { get; set; }\n\n      public Command1(Guid id)\n      {\n         this.Id = id;\n      }\n   }\n}\n```\n\n3) Define a command in namespace B:\n\n```c#\nnamespace MyApp.Messages.Commands.B\n{\n   [Serializable]\n   public class Command2 : ICommand\n   {\n      public Guid Id { get; set; }\n\n      public Command2(Guid id)\n      {\n         this.Id = id;\n      }\n   }\n}\n```\n\n4) Add a command handler to the host service:\n\n```c#\npublic class MyCommandHandler : IHandleMessages<Command1>,\n                                IHandleMessages<Command2>\n{\n   public void Handle(Command1 message)\n   {\n      Console.WriteLine(string.Format("Command1: {0}", message.Id));\n   }\n\n   public void Handle(Command2 message)\n   {\n      Console.WriteLine(string.Format("Command2: {0}", message.Id));\n   }\n}\n```\n\n5) From any client application, REST service, etc., send both commands in a\nbatch:\n\n```c#\nvar commands = new List<ICommand>();\n\ncommands.Add(new Command1(Guid.NewGuid()));\ncommands.Add(new Command2(Guid.NewGuid()));\n\nbus.Send(commands.ToArray());\n```\n\n6) Run the host and the client app and observe the output:\n\n2012-07-02 16:38:36,539 [Worker.17] WARN NServiceBus.Unicast.UnicastBus [(null)\n] <(null)> - Received an empty message - ignoring.\n2012-07-02 16:38:36,539 [Worker.17] WARN NServiceBus.Unicast.UnicastBus [(null)\n] <(null)> - Received an empty message - ignoring.\n\n7) Change the 2 Command definitions to use the same namespace and observe the\noutput:\n\nCommand1: bbe3b63d-f03d-40e1-b0d4-813334cd4e90\nCommand2: a3b578f6-80b5-4bf9-8338-95fca7638628\n\n8) Use different namespaces, but configure NServiceBus to use the\nBinarySerializer. Observe the output:\n\nCommand1: 33c1ccd8-6ada-4a8a-b01a-765d09990a99\nCommand2: 80aa3363-f418-4af2-9563-4f3894c5682c\n\n9) Use different namespaces and the XMLSerializer, but instead send the commands\none at a time and observe the output:\n\nCommand1: 45c3821a-9e16-4b85-8e6c-9546ab663850\nCommand2: 5323e18b-7651-4f3e-a256-b79aeda45b61\n\nObviously this is an over-simplified, non-semantic example, but it should be\nenough to demonstrate the error. Step 6 fails 100% of the time for us.\n\nLet me know if you need any more info.'
514,'johnsimons',"Possible deadlock with Ninject.ObjectBuilder\nI have recently upgraded NServiceBus from 3.0 to 3.2 (and as a result, Ninject from 2.2 to 3.0) and I started to see some weird behaviour on our production server. The server endpoint is configured with 8 worker threads and it stops any processing after a random period of time (ranging from as soon as it gets started to 30 min) without logging any error. When I enabled more logging on the server, the issue was still there, but it was hanging much less frequently. This indicated that it is most likely a thread locking issue as the only thing that changed was the thread blocking pattern.\n\nSo I created a dump file of the process and inspected it with WinDbg. I've found that at the moment I created the dump file, there were 2 threads that were holding 3 locks and both threads had the same end of stack trace:\n\n\t000000002183e0c0 000007fef4643a67 System.Collections.Generic.HashSet`1[[System.__Canon, mscorlib]].Contains(System.__Canon)\n\t000000002183e130 000007ff0023b2a0 NServiceBus.ObjectBuilder.Ninject.Internal.NewActivationPropertyInjectStrategy.Activate(Ninject.Activation.IContext, Ninject.Activation.InstanceReference)\n\t000000002183e170 000007ff00213668 Ninject.Infrastructure.Language.ExtensionsForIEnumerableOfT.Map[[System.__Canon, mscorlib]](System.Collections.Generic.IEnumerable`1<System.__Canon>, System.Action`1<System.__Canon>) [c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Infrastructure\\Language\\ExtensionsForIEnumerableOfT.cs @ 32]\n\t000000002183e1c0 000007ff002247bc Ninject.Activation.Context.Resolve() [c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Context.cs @ 180]\n\nThe 8 threadpool worker threads were all either on ntdll!NtWaitForSingleObject or on ntdll!ZwWaitForMultipleObjects which means that they were blocked. I can provide more information if needed, like sending the full dump file or extracting more specific information, like call stacks of each thread."
513,'johnsimons',"Cannot deserialize Dictionary<string,string>\nThis was observed on build 4.0.0-alpha2313. \n\nI have a simple Dictionary\\<string, string\\> defined on one of my messages. When I do a Bus.Send() with the message containing the string dictionary, it seems to get serialized correctly, but when the message is de-serialized, the dictionary is always empty. \n\nHas anyone else noticed this? I could try upgrading to the latest 4.0 build, but from reviewing the changesets this doesn't seem likely to produce any different results.\n\nDan"
512,'johnsimons','.RavenPersistence(connectionstringname) always reads "NServiceBus.Persistence" instead of the passed in value\nNSB is not taking into consideration the correct raven url if I specify a different connection string name and pass that into \n`.RavenPersistence(myconnectionstringname)` as opposed to "NServiceBus.Persistence".\n\nI have a NSB server endpoint, whose app.config is\n```xml\n<?xml version="1.0" encoding="utf-8"?>\n<configuration>\n  <configSections>\n    <section name="MessageForwardingInCaseOfFaultConfig" type="NServiceBus.Config.MessageForwardingInCaseOfFaultConfig, NServiceBus.Core" />\n  </configSections>\n  <MessageForwardingInCaseOfFaultConfig ErrorQueue="error" />\n  <connectionStrings>\n    <add name="NServiceBus.Persistence.Something" connectionString="Url = http://localhost:8081;" />\n  </connectionStrings>\n</configuration>\n```\n\nAnd here\'s my initialization code, where I pass a specified connection string that I defined in the app.config.\n```c#\n class ConfigurePersistence : IWantCustomInitialization\n    {\n        public void Init()\n        {\n            NServiceBus.Configure.Instance\n               .RavenPersistence("NServiceBus.Persistence.Something")\n               .RavenSubscriptionStorage()\n               .RavenSagaPersister()\n               .RunTimeoutManager();\n        }\n    }\n```\nThere\'s no way, this endpoint should start, because locally, Raven runs on 8080 on my machine, but it starts fine (its connecting to 8080!) and since I have raven running on 8080 it works!\n\nIf I change the app.config to \n```xml\n<connectionStrings>\n    <add name="NServiceBus.Persistence" connectionString="Url = http://localhost:8081;" />\n  </connectionStrings>\n```\nand my code to \n```c#\nclass ConfigurePersistence : IWantCustomInitialization\n    {\n        public void Init()\n        {\n            NServiceBus.Configure.Instance\n               .RavenPersistence()\n               .RavenSubscriptionStorage()\n               .RavenSagaPersister()\n               .RunTimeoutManager();\n        }\n    }\n```\nI then get the expected unable to connect error, because now, its actually using the url that I have provided!'
511,'','Fix SqlPersistence\n'
510,'andreasohlund','The wrong handle method fire when requesting a timeout for a message that the saga it self handles\nTo reproduce: (using the TimeoutManager sample)\n\n1. Modify the simple saga to request a timeout using the StartMessage (in the same method that handles the start message)\n2. Implement IHandleTimeouts of StartMessage\n3. Notice that when the timeout fires the Handle method fires instead of the Timeout method\n\nThis essentially creates a endless loop. The fix is to add the handler interface (IHandleMessages,IHandleTimeouts) to the invocation cache so that we can pick the correct one)'
509,'johnsimons','Running /installinfrastructure from an endpoint ouput\nIf I run NServiceBus.Host.exe /installinfrastructure on a fresh machine (no previous install of RavenDB) when there is a class implementing IConfigureThisEndpoint, then I get this error:\n\n```text\nNServiceBus.Host.exe /installInfrastructure\nInitializing the installer in the Install AppDomain\nExecuting the NServiceBus installers\n2012-07-02 15:05:12,515 [1] INFO  NServiceBus.Licensing [(null)] <(null)> - Chec\nking available license...\n2012-07-02 15:05:12,706 [1] INFO  NServiceBus.Licensing [(null)] <(null)> - Coul\nd not find license file: C:\\Projects\\NServiceBus\\Samples\\Notifications\\NotifySam\nple\\bin\\Debug\\License\\License.xml\n2012-07-02 15:05:12,716 [1] WARN  NServiceBus.Licensing [(null)] <(null)> - No v\nalid license file was found. The host will be limited to a throughput of 1msg/s.\n\nFailed to execute installers: System.Net.WebException: Unable to connect to the\nremote server ---> System.Net.Sockets.SocketException: No connection could be ma\nde because the target machine actively refused it 127.0.0.1:8080\n   at System.Net.Sockets.Socket.DoConnect(EndPoint endPointSnapshot, SocketAddre\nss socketAddress)\n   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Sock\net s4, Socket s6, Socket& socket, IPAddress& address, ConnectSocketState state,\nIAsyncResult asyncResult, Int32 timeout, Exception& exception)\n   --- End of inner exception stack trace ---\n   at System.Net.HttpWebRequest.GetResponse()\n   at Raven.Client.Connection.HttpJsonRequest.ReadStringInternal(Func`1 getRespo\nnse) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonReq\nuest.cs:line 288\n   at Raven.Client.Connection.HttpJsonRequest.ReadResponseString() in c:\\Builds\\\nRavenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonRequest.cs:line 207\n   at Raven.Client.Connection.HttpJsonRequest.ReadResponseJson() in c:\\Builds\\Ra\nvenDB-Stable\\Raven.Client.Lightweight\\Connection\\HttpJsonRequest.cs:line 611\n   at Raven.Client.Connection.ServerClient.DirectGet(String serverUrl, String ke\ny) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.\ncs:line 270\n   at Raven.Client.Connection.ServerClient.<>c__DisplayClass1.<Get>b__0(String u\n) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Connection\\ServerClient.c\ns:line 114\n   at Raven.Client.Connection.ServerClient.TryOperation[T](Func`2 operation, Str\ning operationUrl, Boolean avoidThrowing, T& result) in c:\\Builds\\RavenDB-Stable\\\nRaven.Client.Lightweight\\Connection\\ServerClient.cs:line 231\n   at Raven.Client.Connection.ServerClient.ExecuteWithReplication[T](String meth\nod, Func`2 operation) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Conne\nction\\ServerClient.cs:line 195\n   at Raven.Client.Connection.ServerClient.Get(String key) in c:\\Builds\\RavenDB-\nStable\\Raven.Client.Lightweight\\Connection\\ServerClient.cs:line 114\n   at Raven.Client.Extensions.MultiTenancyExtensions.EnsureDatabaseExists(IDatab\naseCommands self, String name, Boolean ignoreFailures) in c:\\Builds\\RavenDB-Stab\nle\\Raven.Client.Lightweight\\Extensions\\MultiTenancyExtensions.cs:line 53\n   at NServiceBus.ConfigureRavenPersistence.EnsureDatabaseExists(DocumentStore s\ntore) in c:\\Projects\\NServiceBus\\src\\impl\\Persistence\\RavenPersistence\\NServiceB\nus.Persistence.Raven\\Config\\ConfigureRavenPersistence.cs:line 148\n   at NServiceBus.ConfigureRavenPersistence.RavenPersistence(Configure config, I\nDocumentStore store) in c:\\Projects\\NServiceBus\\src\\impl\\Persistence\\RavenPersis\ntence\\NServiceBus.Persistence.Raven\\Config\\ConfigureRavenPersistence.cs:line 114\n\n   at NServiceBus.ConfigureRavenPersistence.RavenPersistence(Configure config) i\nn c:\\Projects\\NServiceBus\\src\\impl\\Persistence\\RavenPersistence\\NServiceBus.Pers\nistence.Raven\\Config\\ConfigureRavenPersistence.cs:line 33\n   at NServiceBus.Hosting.Windows.Profiles.Handlers.ProductionProfileHandler.NSe\nrviceBus.Hosting.Profiles.IHandleProfile.ProfileActivated() in c:\\Projects\\NServ\niceBus\\src\\hosting\\NServiceBus.Hosting.Windows\\Profiles\\Handlers\\ProductionProfi\nleHandler.cs:line 13\n   at NServiceBus.Hosting.Profiles.ProfileManager.<ActivateProfileHandlers>b__1c\n(IHandleProfile hp) in c:\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting\\P\nrofiles\\ProfileManager.cs:line 126\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\n   at NServiceBus.Hosting.Profiles.ProfileManager.ActivateProfileHandlers() in c\n:\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting\\Profiles\\ProfileManager.c\ns:line 126\n   at NServiceBus.Hosting.Profiles.ProfileActivator.Run() in c:\\Projects\\NServic\neBus\\src\\hosting\\NServiceBus.Hosting\\Profiles\\ProfileActivator.cs:line 19\n   at NServiceBus.Configure.<Initialize>b__10(Type t) in c:\\Projects\\NServiceBus\n\\src\\config\\NServiceBus.Config\\Configure.cs:line 303\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\n   at NServiceBus.Configure.ForAllTypes[T](Action`1 action) in c:\\Projects\\NServ\niceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 322\n   at NServiceBus.Configure.Initialize() in c:\\Projects\\NServiceBus\\src\\config\\N\nServiceBus.Config\\Configure.cs:line 300\n   at NServiceBus.Installer`1.Install() in c:\\Projects\\NServiceBus\\src\\installat\nion\\NServiceBus.Installation\\Install.cs:line 101\n   at NServiceBus.Hosting.GenericHost.Install[TEnvironment]() in c:\\Projects\\NSe\nrviceBus\\src\\hosting\\NServiceBus.Hosting\\GenericHost.cs:line 68\n   at NServiceBus.Hosting.Windows.WindowsHost.Install() in c:\\Projects\\NServiceB\nus\\src\\hosting\\NServiceBus.Hosting.Windows\\WindowsHost.cs:line 77\n   at NServiceBus.Hosting.Windows.Installers.WindowsInstaller.RunInstall() in c:\n\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting.Windows\\Installers\\Windows\nInstaller.cs:line 45\nStackTrace of un-disposed document store recorded. Please make sure to dispose a\nny document store in the tests in order to avoid race conditions in tests.\n   at Raven.Client.Document.DocumentStore..ctor()\n   at NServiceBus.ConfigureRavenPersistence.RavenPersistence(Configure config)\n   at NServiceBus.Hosting.Windows.Profiles.Handlers.ProductionProfileHandler.NSe\nrviceBus.Hosting.Profiles.IHandleProfile.ProfileActivated()\n   at NServiceBus.Hosting.Profiles.ProfileManager.<ActivateProfileHandlers>b__1c\n(IHandleProfile hp)\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\n   at NServiceBus.Hosting.Profiles.ProfileManager.ActivateProfileHandlers()\n   at NServiceBus.Hosting.Profiles.ProfileActivator.Run()\n   at NServiceBus.Configure.<Initialize>b__10(Type t)\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\n   at NServiceBus.Configure.ForAllTypes[T](Action`1 action)\n   at NServiceBus.Configure.Initialize()\n   at NServiceBus.Installer`1.Install()\n   at NServiceBus.Hosting.GenericHost.Install[TEnvironment]()\n   at NServiceBus.Hosting.Windows.WindowsHost.Install()\n   at NServiceBus.Hosting.Windows.Installers.WindowsInstaller.RunInstall()\n```'
508,'johnsimons','NSB.Testing, ExpectTimeoutToBeSetAt w/ timeout in the past\nIf you set a timeout that\'s in the past, NSB.Testing will fail `ExpectTimeoutToBeSetAt` specifications, although the timeout was set as expected. How NSB internally implements the timeout delivery (sending locally vs. using TimeoutManager) does not matter, IMHO. The observation *that* a timeout appeared does matter.\n\nI found a workaround (see `TimeoutInThePastAssertingSendLocal`) that works as long as you don\'t assert on actions happening after the timeout (see `TimeoutInThePastWithSendOnTimeout`).\n\nA little background: Just today a spec that was green turned red. It used 30/06/2012 12 PM as the timeout as has been green for a couple of weeks (when the timeout would be in the future). Today the timeout turned being the past, hence the red specs. The current implementation is not neccessarily making me fall into the pit if success and I would very much like it to be changed.\n\nThanks!\n\nSample/repro:\n```C#\n  public class Test\n  {\n    [TestFixtureSetUp]\n    public void TestFixtureSetUp()\n    {\n      MessageConventionExtensions.IsMessageTypeAction = t => t.Namespace != null &&\n                                                             t.Namespace.Contains(".Messages");\n      NServiceBus.Testing.Test.Initialize();\n    }\n\n    [Test]\n    public void TimeoutInThePast()\n    {\n      // Fails\n      // NSB doesn\'t handle the timeout with the TimeoutManager but sends the timeout immediately.\n\n      var message = new TheMessage { TimeoutAt = DateTime.MinValue };\n\n      NServiceBus.Testing.Test\n        .Saga<TheSaga>()\n        .ExpectTimeoutToBeSetAt<TheTimeout>((m, at) => at == DateTime.MinValue.ToUniversalTime())\n        .When(s => s.Handle(message));\n    }\n\n    [Test]\n    public void TimeoutInThePastAssertingSendLocal()\n    {\n      // Succeeds\n      // We can assert that the message is sent locally. I don\'t care, conceptually I\'m interested in the timeout.\n\n      var message = new TheMessage { TimeoutAt = DateTime.MinValue };\n\n      NServiceBus.Testing.Test\n        .Saga<TheSaga>()\n        .ExpectSendLocal<TheTimeout>(m => true)\n        .When(s => s.Handle(message));\n    }\n\n    [Test]\n    public void TimeoutInThePastWithSendOnTimeout()\n    {\n      // Fails\n      // More fun: Despite the fact that the timeout was asserted, WhenSagaTimesOut now throws a KeyNotFoundException.\n      // The error message probably something that can be improved as well (when the Saga cannot timeout).\n\n      var message = new TheMessage { TimeoutAt = DateTime.MinValue };\n\n      NServiceBus.Testing.Test\n        .Saga<TheSaga>()\n        .ExpectSendLocal<TheTimeout>(m => true)\n        .When(s => s.Handle(message))\n        .ExpectSend<TheMessageSentAtTimeout>()\n        .WhenSagaTimesOut();\n    }\n\n    [Test]\n    public void TimeoutInTheFuture()\n    {\n      // Succeeds\n\n      var message = new TheMessage { TimeoutAt = DateTime.MaxValue };\n\n      NServiceBus.Testing.Test\n        .Saga<TheSaga>()\n        .ExpectTimeoutToBeSetAt<TheTimeout>((m, at) => at == DateTime.MaxValue.ToUniversalTime())\n        .When(s => s.Handle(message));\n    }\n  }\n\n  public class TheSaga : Saga<TheData>,\n                         IAmStartedByMessages<TheMessage>,\n                         IHandleTimeouts<TheTimeout>\n  {\n    public void Handle(TheMessage message)\n    {\n      RequestUtcTimeout<TheTimeout>(message.TimeoutAt.ToUniversalTime());\n    }\n\n    public void Timeout(TheTimeout state)\n    {\n      Bus.Send(new TheMessageSentAtTimeout());\n      MarkAsComplete();\n    }\n  }\n\n  public class TheData : ISagaEntity\n  {\n    public Guid Id { get; set; }\n    public string Originator { get; set; }\n    public string OriginalMessageId { get; set; }\n  }\n\n  namespace Messages\n  {\n    public class TheMessage\n    {\n      public DateTime TimeoutAt { get; set; }\n    }\n\n    public class TheTimeout\n    {\n    }\n\n    public class TheMessageSentAtTimeout\n    {\n    }\n  }\n```'
507,'andreasohlund','Hanging DTC transaktions / only failed to notify\nFrom time to time I have left-over "only failed to notify" transactions. It seems to be an issue with distributed transactions across MSMQ and RavenDB.\n\nI can\'t really reproduce it. But it would be good to know, if the NSB team has seen those? Maybe after running mass tests?\n\nI have a very bad feeling about using this in production without having tracked it down.\n\nJust as a hint: when we used Raven sessions with uow, we had much more of these - now we are using very short living sessions.\n\nMight also be necessary to engage Oren Eini in this discussion.'
506,'','Prevent users from modifying the SagaData.Id\nMany users are modifying the saga id to avoid having to create their own properties , ex OrderId. This screws up the saga infrastructure. We should find a way to either prevent it or at least detect and throw a better exception. We can alos have the saga testing framework detect that the id changed and throw a exception'
505,'','invalid exception and process hangs when there are no sufficient resources\n1. set quota on whole message queuing to small numvber (500KB)\n2. start publishing events/sending messages\n3. when you reach your quota on Message Queuing:\n3a. you get false exception ("The destination queue could not be found") - the proper exception (insufficient resources) is inner exception\n3b. process hangs'
504,'','AsA_Server unicast settings override user IWantCustomInitialization unicast settings.\nThis will not work:\n```C#\npublic class EndpointConfig : IConfigureThisEndpoint, AsA_Server, IWantCustomInitialization\n{\n    public void Init()\n    {\n        Configure.With()\n            .DefaultBuilder()\n            .UnicastBus()\n            .MaxThroughputPerSecond(1);\n        }\n    }\n```\nSince the AsA_Server unicast settings will override.\n\nWhen separating the unicast settings into a separate IWantCustomInitialization, it will work.\n\nSolution:\nIn AsA_Server, make sure that if Unicast has been called, it will not be called again.\n'
503,'','processing continue if message queuing service goes down\n1. start sending/publishing messages\n2. turn message queueing service OFF while processing\n3. nservicebus tries to continue processing and throws exception after exception'
502,'','Improved error message on missing handlers\nHi, I would like to report the following bug I encountered while working on NServoceBus 3.2 in the following line of code in the file “UnicastBus.cs”:\r\n\r\n    var warning = string.Format("No handlers could be found for message type: {0}", messageToHandle);\r\n\r\nshould be:\r\n\r\n    var warning = string.Format("No handlers could be found for message type: {0}", messageToHandle.GetType().FullName);\r\n\r\nSince if the “messageToHandle” did override the “ToString()” method, the output would be incorrect.\r\nBest Regards,\r\nGeorge Alatrash\r\n'
501,'','gateway demands elevated privilidges\nWhen you create gateway, you have to have admin privileges to run it. Often, user accounts used to run windows services do not have admin privileges. There should be a possibility to run HttpListener without elevated privileges. This is done in RavenDB You can look at the code here: \n\nRaven.Database\\Server\\NonAdminHttp.cs'
500,'andreasohlund','Using SynchronizationContext.Post instead of Send which does not block c...\n...alling threads. Closes #495'
499,'','serializer is ignoring difference in xml namespaces between client and server\nWhen you specify namespace on on server \r\n\r\n    Configure.With().DefaultBuilder().XmlSerializer("http://xyz.com/");\r\n\r\nand you have different namespace on the client\r\n\r\n    Configure.With().DefaultBuilder().XmlSerializer("http://abc.com/");\r\n\r\nMessages is handled with no error - Bus is ignoring difference in namespaces. Bug?'
498,'johnsimons','Use TaskScheduler to manage our own pool of threads\nWith the new [TaskScheduler](http://msdn.microsoft.com/en-us/library/system.threading.tasks.taskscheduler.aspx) in .Net4 we should create a custom (or multiple) implementation of TaskScheduler that implements our rules:\n* Throttle;\n* Maximum concurrency;\n* ...\n'
497,'johnsimons','Separate nuget install.ps1 script from build script\nAt the moment the install.ps1 is generated by the build script.\nWe should separate it into its own file for easier maintenance.'
496,'',"NServiceBus Studio generates an IBus property for Sagas\nWhen you configure a component as a Saga and deploy to an endpoint, the autogenerated code for the saga includes a \n\npublic IBus Bus { get; set; }\n\ncausing the following exception:\n\nSystem.InvalidOperationException: No IBus instance availble, please configure one and also verify that you're not defining your own Bus property in your saga since that hides the one in the base class"
495,'','Callback with default SynchronizationContext does a send instead of post\nIf you do a Bus.Send().Register() in a client application or a webservice without specifying a synchronizer the default callback implementation does a SynchronizationContext.Current.Send. In my point of view that should be a Post. For all other cases such as when the target of the action is a Page or and AsyncController either a PageAsyncTask is registered on the page or an async operation is registered on the AsyncManager. Doing a SynchronizationContext.Current.Post() would mimic this behavior.\n\nIf you execute the following code in a windows form application or a webservice the registered delegate is never called until the calling thread is released (therefore the action delegate would only be called when the manual reset event runs into a timeout:\n\n            CredentialsVerificationState verificationState = CredentialsVerificationState.NotValid;\n\n            var syncEvent = new ManualResetEventSlim();\n\n            this.bus.Send<IVerifyCredentialsMessage>(m =>\n                {\n                    m.Username = username;\n                    m.Password = password;\n                }).Register\n                <CredentialsVerificationState>(\n                    state =>\n                        {\n                            verificationState = state;\n                            syncEvent.Set();\n                        });\n\n            syncEvent.Wait(TimeSpan.FromSeconds(30));\n\n            return verificationState == CredentialsVerificationState.Valid;\n\nIt is possible to workaround this issue by doing the following:\n\n            CredentialsVerificationState verificationState = CredentialsVerificationState.NotValid;\n\n            var syncEvent = new ManualResetEventSlim();\n\n            this.bus.Send<IVerifyCredentialsMessage>(m =>\n                {\n                    m.Username = username;\n                    m.Password = password;\n                }).Register\n                <CredentialsVerificationState>(\n                    state =>\n                        {\n                            verificationState = state;\n                            syncEvent.Set();\n                        },\n                        new SpecialContext());\n\n            syncEvent.Wait(TimeSpan.FromSeconds(30));\n\n            return verificationState == CredentialsVerificationState.Valid;\n\n        private class SpecialContext : SynchronizationContext\n        {\n            public override void Send(SendOrPostCallback d, object state)\n            {\n                Task.Factory.StartNew(() => d(state));\n            }\n        }\n\nAny thoughts?\n\nDaniel'
494,'','JSon Deserialization fails when using InterfaceOnly Messages\nWhen I use interface only messages the JSon Deserialization fails on the receiver side with the following exception:\n\n\t<HeaderInfo>\n\t\t<Key>NServiceBus.ExceptionInfo.Message</Key>\n\t\t<Value>Could not create an instance of type Server.MessageContracts.IVerifyCredentials. Type is an interface or abstract class and cannot be instantated.</Value>\n\t</HeaderInfo>\n\n\t<HeaderInfo>\n\t\t<Key>NServiceBus.ExceptionInfo.StackTrace</Key>\n\t\t<Value>   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateAndPopulateObject(JsonReader reader, JsonObjectContract contract, String id)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueNonProperty(JsonReader reader, Type objectType, JsonContract contract)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IWrappedCollection wrappedList, JsonReader reader, String reference, JsonArrayContract contract)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.&lt;&gt;c__DisplayClass1.&lt;CreateAndPopulateList&gt;b__0(IList l, Boolean isTemporaryListReference)\n   at Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(Type listType, Action`2 populateList)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateAndPopulateList(JsonReader reader, String reference, JsonArrayContract contract)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String reference)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueNonProperty(JsonReader reader, Type objectType, JsonContract contract)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType)\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\n   at Newtonsoft.Json.JsonSerializer.Deserialize[T](JsonReader reader)\n   at NServiceBus.Serializers.Json.JsonMessageSerializerBase.Deserialize(Stream stream)\n   at NServiceBus.Unicast.UnicastBus.Extract(TransportMessage m)</Value>\n\t</HeaderInfo>'
493,'','Add Basic16 and Basic32 license types\n'
492,'','RavenDB service is not installed when running NSB.Host /installinfrastructure through MSDeploy\nI use MSDeploy to install NSB services on my server. After copying the files I start up PowerShell and run `NServiceBus.Host.exe /installinfrastructure` (among other things) to ensure everything is in place. While testing locally, I noticed a popup window for a couple of milliseconds that I suspect will not work in a remote deployment scenario like MSDeploy employs.\n\nLooking at the code, I see you install the RavenDb service like this:\n```csharp\nvar process = Process.Start(new ProcessStartInfo\n{\n    Verb = "runas",\n    Arguments = "/install",\n    FileName = Path.Combine(installPath, "Raven.Server.exe")\n});\n```\n\nI guess that\'s what doesn\'t work, even if you check the exit code of the process (no errors in the output - see below) -- there\'s no RavenDb service on the machine.\n\nMSDeploy logs the following:\n```\n...\nInfo: Unpacking NLog to C:\\Program Files\\NServiceBus.Persistence\\NLog.dll\nInfo: Installing service\nInfo: NServiceBus.Persistence service started\n```\n\nBut no service:\n```\n>sc query NServiceBus.Persistence\n[SC] EnumQueryServicesStatus:OpenService FAILED 1060:\n\nThe specified service does not exist as an installed service.\n\n>sc query RavenDb\n[SC] EnumQueryServicesStatus:OpenService FAILED 1060:\n\nThe specified service does not exist as an installed service.\n```\n\nLet me know if I can be of any help while you try to resolve the issue - I think just `Process.Start`ing `ravendb.exe /install` should do the trick (that\'s what I do as a workaround).'
491,'johnsimons','Nuget install.ps1 fails to modify project file to include start program\nThe package gets installed properly.\nThen it prompts for the project file changes (overwrite, discard, cancel, etc dialog).\nClicking on Discard (to keep the new changes to the project file), the project becomes unavailable.\n\nThe problem is the xmlns tag in the PropertyGroup.\nRemoved it, saved it and reloaded the project and everything seems ok.'
490,'johnsimons','Enable bundling license more tightly\nFrom group: Perhaps only for royalty free license, e.g. Configure.With().RoyaltyFreeLicense(XmlElement elem) or something like that...that way, royalty free licenses can be included as a ressource in an application. \n\nJohannes: Configure.With().License("path\\license.xml") or in app.config\n\nJohn: Maybe a static License class file with 2 props, LicensePath and License.\nNot sure how this would marry with the multhost solution?\n\nHow about also support cmd line argument, like licensepath="path to license file".\nThis would make it a lot simpler for us to automate testing with different licenses.\n\nRavenDB allows 2 different ways in app.config:\nRaven/License which allows you to specify the full license string.\nRaven/LicensePath which allows you to specify the full license path.\nWhich I think is nice, thoughts?\n'
489,'johnsimons','NSB.Testing: ExpectSend cannot handle Bus.Send(m1, m2, m3)\nI just tried NSB.Testing for the first time:\n\n```csharp\nnamespace Blah\n{\n  public class TheHandler : IHandleMessages<Incoming>\n  {\n    public IBus Bus { get; set; }\n\n    public void Handle(Incoming message)\n    {\n      var one = Bus.CreateInstance<Ougoing>(m =>\n      {\n        m.Number = 1;\n      });\n\n      var two = Bus.CreateInstance<Ougoing>(m =>\n      {\n        m.Number = 2;\n      });\n\n      // Fails:\n      Bus.Send(one, two);\n\n      // Works:\n      // Bus.Send(one);\n      // Bus.Send(two);\n    }\n  }\n\n  public class Ougoing\n  {\n    public int Number { get; set; }\n  }\n\n  public class Incoming\n  {\n  }\n\n  public class When_an_incoming_message_is_received\n  {\n    It should_send_an_outgoing_message_with__one__ =\n      () => Test\n              .Handler<TheHandler>()\n              .ExpectSend<Ougoing>(m => m.Number == 1)\n              .OnMessage<Incoming>();\n\n    It should_send_an_outgoing_message_with__two__ =\n      () => Test\n              .Handler<TheHandler>()\n              .ExpectSend<Ougoing>(m => m.Number == 2)\n              .OnMessage<Incoming>();\n  }\n}\n```\n\nIt seems as if `ExpectSend` does not handle sending multiple messages as one transport message:\n```\nExpectedSendInvocation<Blah.Outgoing> not fulfilled.\nCalls made:\nSendInvocation<Blah.Outgoing>\n```'
488,'johnsimons','Upgrade to nuget 2.0\n'
487,'johnsimons','Centralize the NHibernate configuration properties\nToday you have to duplicate the NH properties for each of the storage types (Sub,Saga,Timeout). We should have a centrilized way to do this like we do with the .RavenPersistence().\n\n* .NHibernatePersistence()  \n* <NHibernatePersitenceConfig>\n<prop>\n* Keep the others for overrides + backwards compat'
486,'johnsimons','Limitation on number of workers for a distributor is not kept\nWhen starting ScaleOut sample, more than often, all three workers can get messages:\nThe distributor internal worker, worker1 and worker2.\n\nLimitation enforced by the license key should work.'
485,'johnsimons','Exception in serializer is swallowed with no error.\nIssue found when creating own IMessageSerializer implementation. If an exception occurs in Serialize/Deserialize, it is swallowed and an empty message is passed on in the pipeline. This is observed: Exception happening in Serialize. Logfile says handler received an empty message and ignoring. No exception is thrown and no error is written to log file. \n\nHowever, the message is correctly moved to error queue and the message headers contains the exception details from the serializer. So it seems that NSB is missing some rethrow actions.\n'
484,'andreasohlund','Add support for specifying addresses using IpV6\n<add Messages="MyMessages" Endpoint="MyServer@fe80::79f4:df9c:ae9c:2c9c%15"/>'
483,'johnsimons','Create a WorkerAvailabilityManager for NHibernate\nTo support running the distributor on non msmq platforms we should have a WorkerAvailabilityManager for relational datastores'
482,'','Create NHibernate Role\nMakes it easy for users to specify NHibernate persistence for everything.'
481,'','ReplyTo address should not be set for SendOnly endpoints\nAnd if a user tries to reply|return to a message coming from a sendonly endpoint we should:\n\n* Throw an exception if in debug mode\n* Warn if not in debug mode'
480,'','Endpoint does not gracefully die when queue is deleted while working\nStart pub/sub samples.\nAfter a while delete the queues.\n\nAll three endpoints (MyPublisher, Subscriber1 and 2) will go crazy and will not die gracefully, that is, they should set their receiving queues to 0 or call the .OnCriticalError().\n\nIn addition, in the peeking error message, queue name is missing:\n\n*System.Messaging.MessageQueueException (0x80004005): The queue does not exist or you do not have sufficient permissions to perform the operation.\n   at System.Messaging.MessageQueue.GenerateQueueProperties()\n   at System.Messaging.MessageQueue.get_QueuePath()\n   at System.Messaging.MessageQueue.get_QueueName()\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.HasMessage() in c:\\Users\\WorkUser\\NServiceBus\\src\\impl\\unicast\\queuing\\NServiceBus.Unicast.Queuing.Ms\nmq\\MsmqMessageReceiver.cs:line 67\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.HasMessage() in c:\\Users\\WorkUser\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Un\nicast.Transport.Transactional\\TransactionalTransport.cs:line 401\n2012-06-19 17:40:55,847 [Worker.13] ERROR NServiceBus.Unicast.Transport.Transactional.TransactionalTransport [(null)] <(null)> - Error in peeking a message from\n receiver.*\n'
479,'','Fix ScaleOut sample, add "using NServiceBus.Config" for INeedInitialization\n'
478,'johnsimons','Refactor the distributor to be a satellite\n'
477,'johnsimons','Refactor the gateway to be a satellite\n'
476,'johnsimons','Refactor the timeoutmanager to be a satellite\n'
475,'johnsimons','NHibernate persisters implementation need refactoring\nAt the moment our NHibernate persisters:\n* NServiceBus.SagaPersisters.NHibernate\n* NServiceBus.TimeoutPersisters.NHibernate\n* NServiceBus.Unicast.Subscriptions.NHibernate\n\nDo not differentiate between **Install** time vs **Running** time.\nAll the fluent APIs allow users to update the schema at run time, and do not have `INeedToInstallSomething` implementations to create the sql tables.'
474,'johnsimons','Convert Starbucks sample to use NHibernate for everything\nWith us now supporting NHibernate for Timeouts, Subscriptions and Sagas, we should have a NHibernate only sample to show the users how to go about configuring NHibernate for everything.'
473,'','Publisher with InMemory Subscription Storage Over Publishes\nI have a sample project that has a simple Pub/Sub configuration.  When I use InMemory storage on the Publisher, my subscriber gets 3 identical messages.  There are 3 messages in the message hierarchy, 1 concrete and 2 interfaces.  When I use MSMQ backed storage, I only get one message as desired.'
472,'','WireEncryptedString in message subproperties\nhttp://tech.groups.yahoo.com/group/nservicebus/message/14394'
471,'andreasohlund',"Support multiple timeout managers to store their data in the same Raven database\nCurrently we load all timeouts when we start, we should only load the ones that are related to our endpoint. This will allow multiple TM's to share the same DB"
470,'andreasohlund','Cache the results of the ip lookup\nWhen sending messages to servers identified by a IP-number the return address of the client is set to the local ip. The lookup to get that ip taked rougly 50-60 ms and slows down the sender since its performed on every send. We should cache this when we start to improve the performance. It also avoids exceptions caused by network devices coming online/offline'
469,'andreasohlund','Encrypted properties are only supported on the root message\nhttp://tech.groups.yahoo.com/group/nservicebus/message/14394\n\n## Test procedures\n1. Run the encryption sample and verify that all values are received correctly\n2. Only run the client and verify that all data in the queue is encrypted\n3. Run a < 3.2.8 client and verify that the server throws an exception when receiving the message\n4. Run a 3.X client and verify that it works\n5. Have the 3.2.8 client send a message to a 2.X server. Make sure it works'
468,'','XSLT support\nWe should look at introducing more explicit XSLT support into our gateway channel model, probably under something like our message mutator concept.'
467,'','Missing subscription storage\nWhen a user tries to publish an event when no subscription storage is configured, the exception recommends that they use the MsmqSubscriptionStorage.\n\nWe should be recommending the use of our RavenDB subscription storage instead.\n'
466,'andreasohlund','Improve API for saga message mapping\nSimilar to the rebus way: Incoming&lt;CustomerCreated&gt;(m => m.CustomerId).CorrelatesWith(s => s.CrmCustomerId);\n\nHave the API: ConfigureMapping&lt;SomeMessage&gt;(m => m.SomeProperty).ToSaga(s => s.SomeProperty);\n\n'
465,'johnsimons','Change the License Warning when the host starts and a license file is not present\nCurrently, when starting an endpoint, the licensing warning states "No valid license file was found. The host will be limited to 1 worker thread."?\nSince the basic version throttles message processing to 1 msg per second, please change the license warning to include that information.\nConsider changing the warning to "No valid license file was found. The host will be limited to a throughput of 1msg/s"'
464,'johnsimons','SpringObjectBuilder use with IApplicationContextAware, IObjectPostProcessor\nHi, Just found a line of code missing for the proper use of spring GenericApplicationContext with IApplicationContextAware, IObjectPostProcessor & other spring plumbing features.\n\nCan you just add the following line :\ncontext.Refresh() in the init method, just before setting \n"initialized = true;"\n\nThanks by advance.\n\nRegards.'
462,'johnsimons','Fix the spelling mistakes in ConfigureNHibernateSubscriptionStorage\nAll methods are spelled Subcription instead of Subscription.'
461,'johnsimons','Overload RunGateway(this Configure config, Type persistence) with a standard call\nIn addition to the following (non-standard):\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/gateway/NServiceBus.Gateway/Config/ConfigureGateway.cs#L39\nAdd an overload (more standard):\n\nRunGatewayWithSqlPersistence(this Configure config) ?'
460,'','Run profile handlers in order of profile list\nCurrently the profile handlers are run "unintentionally ordered" by the assemblies they reside in (iirc)..\n\nIt would be great, if they\'d run in the order the profiles are submitted (through command line args...)'
459,'','Fixed issue #458\n'
458,'andreasohlund','MsmqUtilities.GetReturnAddress throwing IndexOutOfRange exception\nI commented on the line of code here that I think is causing the issue. https://github.com/NServiceBus/NServiceBus/commit/b584490b1bd1c700ce44141e32510d82a052ae91. '
457,'johnsimons','Remove ForwardCurrentMessageTo from the testing api\nSee http://tech.groups.yahoo.com/group/nservicebus/message/14292'
456,'johnsimons','Create a NHibernate persister for the gateway\nNot sure we need it but we only support sqlserver today'
455,'johnsimons','Create a NHibernate storage for the gateway\n'
454,'johnsimons','Upgrade to NHibernate 3.3.1.4000\n'
453,'johnsimons','/installIfrastructure does not terminate the process after is finished\nThis happens when the /installinfrastructure is called from a location that contains an endpoint configuration, it starts hosting the endpoint and waits indefinitely.'
452,'andreasohlund','Empty message received in unobstrusive mode with BinarySerializer\nWhen trying to send a command in unobstrusive mode (without implementing IMessage, ICommand, ... ) and BinarySerializer I am getting a "Received an empty message - ignoring" message.  \n\n- Adding the ICommand interface to the commands solves the issue. \n- Just detected in BinarySerializer; XmlSerializer is working fine with the same configuration in unobstrusive mode.'
451,'johnsimons','Make sure that startup project is set when the host nuget is installed\nWe should modify the .csproj to contain the currect macros to start the host to get a better "F5 experience"'
450,'',"Throw excepton if IWantCustomInitialization is used in the wrong location\nThrow an exception if `IWantCustomInitialization` is used on anything which doesn't also implement `IConfigureThisEndpoint`."
449,'','The scannedassemblies cmd line arg should use file paths not assembly names\nTo supply the assemblies to scan via cmd line args, like this:\r\n\r\n    NServicebus.host.exe /installinfrastructure /scannedassemblies:"NServiceBus.dll;NServiceBus.Core.dll;NServiceBus.Host.exe" \r\n\r\nInstead of:\r\n```\r\nNServicebus.host.exe /installinfrastructure /scannedassemblies:"\r\nNServiceBus, Version=3.2.0.0,Culture=neutral, PublicKeyToken=9fc386479f8a226c;\r\nNServiceBus.Core, Version=3.2.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c;\r\nNServiceBus.Host, Version=3.2.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c"\r\n```'
448,'johnsimons','IWantToRunBeforeConfiguration is called to many times at startup\nExpected is : 1 time for a regular start + 1 if the installers are invoked from the generic host\n\nTo reproduce (will be called 3 times) \n\npublic class MyClass:IWantToRunBeforeConfiguration\n    {\n        public void Init()\n        {\n            Console.WriteLine("Init");\n        }\n    }'
447,'',"ReturnToSourceQueue.exe silently skips messages\nreturn to source queue tool silently skips messages, so I've started to wonder why it does so, and in source found line, that I think is responsible for that:\n```csharp\n      if (messageId != tm.Headers[TransportHeaderKeys.OriginalId]) continue;\n```\n\nAll messages in my error queue have different ids from OriginalId, so now I know the fact, but I don't know why this is like so and where to search for a problem.\nMy suggestion would be instead silent skipping of a message write reason for skipping and explain how to correct that."
446,'andreasohlund','Create a Bus.SendEmail satellite\nIn order to make sending of emails easier we should add a "Norification" satellite that wraps the SmtpClient.SendEmail()'
445,'johnsimons',"log4net errors when running NServiceBus.Host.exe with /installinfrastructure\nIf I run NServiceBus.Host.exe /installinfrastructure when there is a class implementing IConfigureThisEndpoint, then I get an error about acquiring a lock on the log file (as shown below).\n\nIf I delete the assembly containing my implementation of IConfigureThisEndpoint then re-run NServiceBus.Host.exe /installinfrastructure, then everything works as expected.\n\nError Details:\n\n> 2012-06-05 21:55:14,749 [1] INFO  NServiceBus.Licensing [(null)] <(null)> - Checking available license...\nlog4net: FileAppender: Opening file for writing [C:\\dev\\MyProject\\src\\MyProject.Billing.Handlers\\bin\\Debug\\Logs\n\\log4net.log] append [True]\nlog4net:ERROR [RollingFileAppender] Unable to acquire lock on file C:\\dev\\MyProject\\src\\MyProject.Billing.Handl\ners\\bin\\Debug\\Logs\\log4net.log. The process cannot access the file 'C:\\dev\\MyProject\\src\\MyProject.Billing.Hand\nlers\\bin\\Debug\\Logs\\log4net.log' because it is being used by another process.\nlog4net:ERROR [RollingFileAppender] OpenFile(C:\\dev\\MyProject\\src\\MyProject.Billing.Handlers\\bin\\Debug\\Logs\\log\n4net.log,True) call failed.\nlog4net.Appender.FileAppender+LockingStream+LockStateException: The file is not currently locked\n   at log4net.Appender.FileAppender.LockingStream.AssertLocked()\n   at log4net.Appender.FileAppender.LockingStream.get_CanWrite()\n   at System.IO.StreamWriter..ctor(Stream stream, Encoding encoding, Int32 bufferSize)\n   at log4net.Appender.FileAppender.OpenFile(String fileName, Boolean append)\n   at log4net.Appender.RollingFileAppender.OpenFile(String fileName, Boolean append)\n   at log4net.Appender.FileAppender.SafeOpenFile(String fileName, Boolean append)\nlog4net:ERROR [RollingFileAppender] No output stream or file set for the appender named [file].\n\n"
444,'johnsimons','License file or directory should be named less generically\nNobody looking at the directory structure of an application that uses NSB will know that "Licence\\License.xml" is for NServiceBus.  Please consider renaming the directory and/or file to include your product name.'
443,'',"System.ArgumentException: The handler object created does not implement IMessageHandler<T>\nI am trying to use the Test.Handler(T handler) overload, but when I do I get the following error:\r\n```\r\nSystem.ArgumentException : The handler object created does not implement IMessageHandler<T>.\r\nParameter name: handlerCreationCallback\r\nStack Trace:\r\n   at NServiceBus.Testing.Test.Handler[T](Func`2 handlerCreationCallback) in d:\\BuildAgent-03\\work\\nsb.master4\\src\\testing\\Test.cs:line 170\r\n   at NServiceBus.Testing.Test.Handler[T](T handler) in d:\\BuildAgent-03\\work\\nsb.master4\\src\\testing\\Test.cs:line 142\r\n```\r\n\r\nThe handler instance I'm passing in directly implements IHandleMessages<T> which in turn implements IMessageHandler<T>.\r\n\r\n\r\nThis is in 3.0.4."
442,'johnsimons','Add MessageEndpointMappings based on namespaces\nHi,\n\nAt the moment  add Messages works either at the assembly or type level. This means that every message needs to be specified manually if an assembly contains messages for more than one endpoint.  This is a tedious task and could be eliminated by having ability to map namespaces to endpoints.\n\nThanks\n\nPawel'
441,'','NServiceBus.Host32.exe not built in 32 bit\nWhen building in debug mode it is correctly building in 32bit.\nWhen compiling in release mode it is building in 64!\n\nSee http://tech.groups.yahoo.com/group/nservicebus/message/14192'
440,'','Change ScaleOut Sample to make it F5 workable\nAdd worker1 and worker2 with linked code to Orders.Handler.\nPressing F5 will start them all.'
439,'','Consider integrating with Elmah for monitoring\nhttp://code.google.com/p/elmah/'
438,'','Make obsolete consistent\nAdd Fody\nAdd ObsoleteEX\nAdd missing nuget.configs'
437,'','Make obsolete consistent\nAdd Fody\nAdd ObsoleteEX\nAdd missing nuget.configs'
436,'johnsimons',"Cannot run any hosts in build 3.2.2279 due to error with Performance Counters\nWhen running /installInfrastructure on an endpoint that has perf copunters enabled the following exception occures:\n\n> Failed to execute installers: System.InvalidOperationException: NServiceBus performance counter for Critical Time not set up correctly. Please run the NServiceBus infrastructure installers to rectify this problem. ---> System.InvalidOperationException: The requested Performance Counter is not a custom counter, it has to be initialized as ReadOnly.\n   at System.Diagnostics.PerformanceCounter.InitializeImpl()\n   at System.Diagnostics.PerformanceCounter..ctor(String categoryName, String counterName, String instanceName, Boolean readOnly)\n   at NServiceBus.Unicast.Monitoring.PerformanceCounterInitializer.InstantiateCounter(String counterName)\n   --- End of inner exception stack trace ---\n   at NServiceBus.Unicast.Monitoring.PerformanceCounterInitializer.InstantiateCounter(String counterName)\n   at NServiceBus.Unicast.Monitoring.PerformanceCounterInitializer.Run()\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\n   at NServiceBus.Configure.Initialize()\n   at NServiceBus.Installer`1.Install()\n   at NServiceBus.Hosting.Windows.Installers.WindowsInstaller.RunInstall() in d:\\BuildAgent-01\\work\\nsb.develop_2272\\src\\hosting\\NServiceBus.Hosting.Windows\\Installers\\WindowsInstaller.cs:line 45\n\nI get the exact same error when I run NServiceBus.Host.exe with the /installinfrastructure switch. The workaround is to either use RunMeFirst.bat or invoke the host.exe in a empty directory to avoid the endpoint config beeing loaded.\n\nThe reason for the bug is that all config code is invoked before the installers are run and that code assumed that the counters is installed. The fix is to change that code to put put a warning if no counters are installed\n\nThis only seems to happen on some systems. It is consistently reproducible on our Development server (Windows Server Datacenter SP2), but not on my local machine (Win7). It was also reproducible on another developer's machine that was running Win7 in a VM on a MacBook.\n\nI suspect that the following commit has something to do with the problem:\nhttps://github.com/NServiceBus/NServiceBus/commit/6e558ac85998b0b050df5b8bba635a50c1d44cd4\n\nI downgraded to build 3.1.2266 which is from the day before the above commit and then re-deployed to my Development environment and everything works fine again."
435,'','Change the default for Second-Level Retries to disabled\nLet me start out by saying that I am very happy to see second-level retries natively implemented in NServiceBus. I have implemented my own flavour of this functionality on a few projects in the past, and it always ended up being cumbersome.\n\nI see from the documentation of the feature (http://nservicebus.com/SecondLevelRetries.aspx) that it is enabled by default. I\'m curious to know what the rationale was behind that decision? By having this feature enabled by default, it means that without changing any configuration settings, each failed message will be processed 20 times by the handler (5 times per cycle, 4 cycles total). Since message processing could sometimes be expensive, doing it 20 times by default seems like it could be problematic. \n\nIn my experience, most of the errors that I see in my error queues are not there because of temporal issues, they are there because of a bug in the application, or a configuration issue on the server. \n\nThe SLR feature doesn\'t strike me as a "must-have" for all of my endpoints. Instead, it seems like an excellent tool that I would want to configure in a small percentage of my endpoints. \n\nWhat do you guys think about changing the default state to disabled?'
434,'','Queue permission error when running NServiceBus.Host.exe from the command line\nIn v3.2.2279, when I run the NServiceBus.Host.exe from a command line, I get the following error:\n\n"The queue does not exist or you do not have sufficient permissions to perform\nthe operation."\n\nI have Windows 7 with UAC disabled. I opened the command window by right clicking and selecting "Run as Administrator". Running in Powershell yields the same error.\n\nI have found two ways to get around this:\n1. Run NServiceBus.Host.exe /installinfrastructure\n2. Run NServiceBus.Host.exe from a Visual Studio debugger (without special command line switches)\n\nAny ideas why the behaviour is different between the command line and Visual Studio? Is the expectation that people will run the host with "/installinfrastructure" at least once before ever trying to just run the handler?'
433,'johnsimons','CI Builds should publish to Nuget as Prerelease packages\nThe CI builds should only show up in Nuget when the "Show Prerelease Packages" is selected.  Stable Builds should be the NSB releases only.\n\nhttp://nuget.codeplex.com/wikipage?title=Pre-Release%20Packages'
432,'johnsimons','Add a .gitattribute file\nTo deal with issues with CRLF.'
431,'','Add support for msmq4 subqueues\nOut satellites like TM, SLR, distributor (control + storage queues) would be nice to have a subqueues to keep the number of queues visible to our down  '
430,'johnsimons','Stop using HttpContext.Current to identify if running under web context\nWith all these new web frameworks (FubuMVC, NancyFx,...), HttpContext.Current is not a reliable way to identify if NSB is running under a web context, a better way is to use HttpRuntime.AppDomainAppId. \nIf HttpRuntime.AppDomainAppId is null then we are not running on web context otherwise we are. '
429,'','Turn on treat warnings as errors on all samples\n'
428,'',"Remove the ability to disable TimeoutManager\nThis includes removing the fluent api and cleaning up any 'if' statements that check if TimeoutManager is enabled or not."
427,'','Support JSON serialization\nDraw on work done in contrib project:\n\nhttps://github.com/NServiceBus/NServiceBus-Contrib/commit/4fffe54f652e860eb15135de291378170518e60c\n'
426,'johnsimons','Move IWantToRunWhenTheBusStarts to NSB.dll\nSplit from #258'
425,'','Create a Raven transport\nTo allow us to run without msmq we should consider creating a RavenDB transport'
424,'andreasohlund','Timeouts fails to load if there are more than 30*1024 timeouts in storage\nThis only applies to the RavenDB storage. If there are more than 30*1024 timeouts in storage Raven will throw the "max 30 calls per session limit was breached" exception. The fix is so turn this value up higher. This also relates to issue #388 and #389.\n\nBug was found after Johannes comment https://github.com/NServiceBus/NServiceBus/issues/388#issuecomment-5970646 and can be verified by changing the unit test to add 31*1024 timeouts and modifying the query to use WaitForNonStaleResults()'
423,'','Add support for Bus.InMemory.Raise<T>(T @event);\nThis will provide for a kind of "domain events" way of doing pub/sub between components deployed to the same process.\n\nShould call directly into regular UnicastBus message dispatching.'
422,'','Add a Amazon SQS channel to the gateway\nTo better bridge onsite and Amazon deployments we should support a SQS gateway channel'
421,'','Make our logging log4net agnostic\nhttp://tech.groups.yahoo.com/group/nservicebus-dev/message/2278'
420,'andreasohlund','AsyncPages sample using WithWeb()\nupdate to newer api With()'
419,'',"Make release of every major version easily available \nHi,\n\nAs per following thread http://tech.groups.yahoo.com/group/nservicebus/message/14057 it would be great to have a page with release notes of all the major versions. I can see what is in the latest version but I can't easily tell the difference between 3.1 and 3.2 and both of them are significant releases assuming NSB uses semantic versioning.\n\nThanks\n\nPawel"
418,'','Create a database backed transport\nThis will allow sqlserver only users to get up and running without msmq and will also help us moving to NIC platforms'
417,'johnsimons','Create a timeout storage for relational db using NHibernate\n'
416,'','Make the performancecounters on by default\nToday the performance counters are on when running in the production profile. We should make it so that they are always on:\n\n* Make sure they are always on\n* Add a method to the fluent api to turn them off\n* Obsolete the PerformanceCounter profile\n* Replace the code in the profile handler with a warning\n* Test that the exception you get when not having the counters installed gives a good msg directing the users to run the infra installers'
415,'johnsimons','Add Copyright to Nuget packages\nSee http://docs.nuget.org/docs/reference/nuspec-reference on how to do it.'
414,'andreasohlund','class EndpointConfig : IConfigureThisEndpoint \nWhen the EndpointConfig only implements IConfigureThisEndpoint no input queue is created (only error and retries are created).'
413,'','Non Authoritative Information in saga persister\nHaving ~7 sagas that all are started by the same message and a unique property, UId, in the saga data. \nData.UId = message.Id in saga handler.\n\n1st run -> ok, 7 new sagas are created and stored in database.\n2nd run -> In RavenSagaPersister.GetByUniqueProperty a call to Session.Load<SagaUniqueIdentity>(lookupId) is made. In the Raven console GET request "loops" for ~20 sec then an "Non Authoritative Information" exception is thrown.\n\nLess than 7 sagas works on my dev box.'
412,'','Saga data with [Unique] not set => NRE\nIf the property marked with [Unique] in a saga data is not set (by wrong code in handler), a Null Reference Exception is thrown.'
411,'johnsimons','Add a way to configure the max calls per session limit in raven\nWhen running multiple sagas per endpoint users risk hitting the limit (15 sagas is currently the max)'
410,'synhershko','Unnessesary calls to ISagaPersister.Get\nWhen running multiple saga types started by the same message on the same endpoint the number of calls to the sagapersister is numsagatypes squared. This can cause problems for the sagapersisters. Eg raven has a limit of 30 calls per session which means that 5 sagas per endpoint is the max limit.\r\n\r\nWhen adding a unique attribute on the property the problems goes away'
409,'','Implement PerformanceCounters in Production Profile\n'
408,'johnsimons','NServiceBus.Ninject NuGet package shows incorrect dependancy\nThe latest version of the NServiceBus.Ninject (3.1.1) NuGet package states that it depends on Ninject 2.2.1.4 however upon updating, it seems that the package has been updated to use Ninject 3.0.0.0.'
407,'','Update Versioning sample to implement latest best practices\nCurrently the log contains:\n\n2012-05-22 14:55:59,488 [9] INFO  NServiceBus.Unicast.MessagingBestPractices [(n\null)] <(null)> - You are using a basic message to do pub/sub, consider implement\ning the more specific ICommand and IEvent interfaces to help NServiceBus to enfo\nrce messaging best practices for you\n\nand\n\n2012-05-22 14:55:18,729 [1] INFO  NServiceBus.Unicast.UnicastBus [(null)] <(null\n)> - Future versions of NServiceBus will only autosubscribe messages explicitly\nmarked as IEvent so consider marking messages that are events with the explicit\nIEvent interface'
406,'',"SLR doesn't send message to error queue if disabled via fluent api\nSee http://tech.groups.yahoo.com/group/nservicebus/message/14031"
405,'','Better error message\nWhen getting the error message "The queue does not exist or you do not have sufficient permissions to perform the operation", show which queue nservicebus was trying to connect to.'
404,'','SLR queue should not be created of SLR is disabled\nTo reproduce configure a endpoint:\n    public class EndpointConfig:IConfigureThisEndpoint,AsA_Server,IWantCustomInitialization\n    {\n        public void Init()\n        {\n            Configure.With()\n                .DefaultBuilder()\n                .XmlSerializer().DisableSecondLevelRetries();\n        }\n    }\n\nThis should not cause us to create a retries queue'
403,'','Packages folders in samples are included i ZIP file\nWhen the .ZIP artifact is created the nuget "packages" folders are included with its binaries. This increases the size of the zip with ~30Mb.'
402,'','Only the InnerException comes in to the FaultManager\nhttp://tech.dir.groups.yahoo.com/group/nservicebus/message/13945.\n\nTo reproduce, create a handler and an inner exception class\n\n    public class MyMessageHandlerWithInnerException : IHandleMessages<MyMessage>\n    {\n        public void Handle(MyMessage message)\n        {\n            var innerException = new InnerException("This is an inner exception");\n            var ex = new Exception("This is the outer exception", innerException);\n\n            throw ex;\n        }\n    }\n\n    public class InnerException : Exception\n    {\n        public InnerException(string message) : base(message)\n        {            \n        }\n    }\n\nIn ProcessingAlwaysFailsForMessage(TransportMessage message, Exception e) in the FaultForwarder the Exception e is the InnerException and the outer exception is lost.'
401,'johnsimons',"Use static indexes in TimeoutManager\nBy default temp indexes in RavenDB automatically get promoted to static if they are used frequently, in our case, the timeout manager is using them quite frequently (from the code it looks like is every 1 sec) so I don't see the point of letting RavenDB create temp indexes that will be  promoted to static later on."
400,'','IManageMes\u200bsageFailur\u200bes only the innerexception comes in\nThe situation:\nImplement IManageMes\u200bsageFailur\u200bes for a custom FaultManager and configure it.\n\nWhen an exception is thrown that contains an innerexception, only the innerexception comes in ProcessingAlwaysFailsForMessage of the FaultManager.\n\nAn exception without innerexception comes in correct.\n\nTo test:\n\n* Throw exception from handler:            throw new Exception("Outer exception",new Exception("Inner exception"));\n\nOutput should be:\n2012-06-19 16:54:19,731 [Worker.12] WARN  NServiceBus.Unicast.UnicastBus [(null)\n] <(null)> - MessageWithLargePayloadHandler failed handling message.\nSystem.Exception: Outer exception ---> System.Exception: Inner exception\n   --- End of inner exception stack trace ---\n   at Receiver.MessageWithLargePayloadHandler.Handle(MessageWithLargePayload mes\nsage) in C:\\dev\\temp\\NServiceBus.3.2.3-beta5\\samples\\DataBus\\Receiver\\MessageWit\nhLargePayloadHandler.cs:line 11\n2012-06-19 16:54:19,770 [Worker.12] WARN  NServiceBus.Unicast.Transport.Transact\nional.TransactionalTransport [(null)] <(null)> - Failed raising \'transport messa\nge received\' event for message with ID=0784ecf5-20d5-41a4-9837-31121db10460\\5246\n699\nNServiceBus.Unicast.Transport.TransportMessageHandlingFailedException: Exception\n of type \'NServiceBus.Unicast.Transport.TransportMessageHandlingFailedException\'\n was thrown.\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder childBuilde\nr, TransportMessage msg) in c:\\TeamCity\\buildAgent\\work\\nsb.3.2.3_5\\src\\unicast\\\nNServiceBus.Unicast\\UnicastBus.cs:line 1264\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, Tra\nnsportMessageReceivedEventArgs e) in c:\\TeamCity\\buildAgent\\work\\nsb.3.2.3_5\\src\n\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1181\n   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTrans\nportMessageReceived(TransportMessage msg) in c:\\TeamCity\\buildAgent\\work\\nsb.3.2\n.3_5\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\Tran\nsactionalTransport.cs:line 480'
399,'andreasohlund','Lower Timeout log messages from Info to Debug\nINFO  Timeouts [(null)] <(null)> - Going to fetch existing timeouts from persister (RavenTimeoutPersistence)\nINFO  Timeouts [(null)] <(null)> - 0 timeouts loaded from storage in 0.2282566 seconds\nINFO  Timeouts [(null)] <(null)> - Total time for cache priming 0.2298256 seconds'
398,'','Create convention helpers for unobtrusive users\nWith the unobtrusive mode gaining traction we should make it easier for the users to define "namespace" conventions.\r\n\r\nPerhaps a `Configure.UseUnobtrusiveConventions() //.Events .Commands .Messages`\r\n\r\nand `Configure.MessagesInNamespace("Contracts")` etc etc'
397,'','The Nuget packages should include a link to the release notes on NServiceBus.com\nhttp://nservicebus.com/releasenotes/{X.Y.Z}\n\nPut the link in the release notes section of the nuget'
396,'','Look into enforcing total number of cores across machines\n'
395,'','Timeout manager will always return the message to the endpoint that called Defer\nI\'ll explain why this is problematic in our case by introducing you to our setup. For each AC, we have one endpoint for each message type being processed + a control endpoint that is hosting the timeout manager, receiving subscriptions etc.\n\nSample:\n\nAc1-Control\nAc1-Command1\nAc1-Command2\nAc1-EventFromOtherAc\n\nWe would consider using a multi host for this, but currently we have one Window service for each endpoint.\n\nWhen Ac1-Command1 is processing a message (Command1), it does some business logic and want to send a new command (Command2). That is only a problem if we want the message to be deferred/delayed, which we often do. In the current implementation, this is what would happen:\n\nAc1-Command1 sends a message of type Command2 to Ac1-Control with a timeout.expire header.\nWhen the message expires, Ac1-Control will send message Command2 back to Ac1-Command1, since the default timeout manager always sends the message to the ReplyToAddress specified in the message it received.\n\nI would like Ac1-Control to actually forward Command2 directly to Ac1-Command2, since that is the endpoint that is configured to handle those messages. Also the ReplyToAddress in the message from Ac1-Control should be Ac1-Command1. The timeout endpoint should be invisible - it is just about *delaying* the message, nothing else.\n\n\n**What I think would be the best solution:**\n\nStore the "normal" message destination inside a header (in UnicastBus.Defer). The timeout manager would read out the header value and send the message to that destination (and use the original ReplyToAddress as ReplyToAddress on the message sent).\n\nThe problem is that this would most likely break previous behavior if always applied, and thus we need people to decide what they want to use.\n\nI would like a signature of Defer be something like this:\n\n    /// <param name="alwaysProcessTimeoutLocally">If true (or not specified) the timeout manager will always return the message to the endpoint where this method was invoked. If false the normal message destination will be used.</param>\n    ICallback Defer(TimeSpan delay, bool alwaysProcessTimeoutLocally, params object[] messages);\n\nThe problem is that this change would break binary compatibility. The only options I see is to create an overload. Then maybe another name of the method would be better? SendDelayed, DeferSend, SendLater?\n\nOr maybe it would be enough to change the Sagas RequestUtcTimeout to use the "old behavior"? If people use Defer themselves, I think "my behavior" is what is normally wanted?\n\nWhat do you think?'
394,'johnsimons','Improve configuration override for gateway\nBased on this:\n\nhttp://stackoverflow.com/questions/10627745/nservicebus-need-to-configure-channels-for-my-gateway-with-code'
393,'','Add NServiceBusVersion Key to License File\nAdd a new NServiceBusLicense key to license file.\nCheck that the major version assembly (in X.Y.Z, is X.Y), is the same or lower as in the license\n'
392,'','Update Saga documentation to include RavenDB\nThis page http://nservicebus.com/Sagas.aspx does not mention RavenDB at all, let alone how to configure RavenDB + Sagas.'
391,'',"Exception being raised in PubSub Sample\nPubSub sample is throwing the following exception:\n```\nSystem.Exception was unhandled by user code\n  Message=Exception when starting endpoint, error has been logged. Reason: You can't alter the registrations after the container components has been resolved from the container\n  Source=NServiceBus.Host\n  StackTrace:\n       at NServiceBus.Hosting.GenericHost.Start() in c:\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting\\GenericHost.cs:line 45\n       at NServiceBus.Hosting.Windows.WindowsHost.Start() in c:\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting.Windows\\WindowsHost.cs:line 55\n       at NServiceBus.Hosting.Windows.Program.<>c__DisplayClass8.<Main>b__4(WindowsHost service) in c:\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting.Windows\\Program.cs:line 95\n       at Topshelf.Internal.ControllerDelegates`1.StartActionObject(Object obj) in d:\\dev\\open-source\\topshelf\\src\\Topshelf\\Internal\\ControllerDelegates.cs:line 18\n       at Topshelf.Internal.IsolatedServiceControllerWrapper`1.<>c__DisplayClass2.<set_StartAction>b__1(TService service) in d:\\dev\\open-source\\topshelf\\src\\Topshelf\\Internal\\IsolatedServiceControllerWrapper.cs:line 65\n       at Topshelf.Internal.ServiceController`1.<.cctor>b__1(ServiceController`1 sc) in d:\\dev\\open-source\\topshelf\\src\\Topshelf\\Internal\\ServiceController.cs:line 35\n       at Magnum.StateMachine.LambdaAction`1.Execute(T instance, Event event, Object parameter) in :line 0\n       at Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event event, Object parameter) in :line 0\n  InnerException: System.InvalidOperationException\n       Message=You can't alter the registrations after the container components has been resolved from the container\n       Source=NServiceBus.ObjectBuilder.Spring\n       StackTrace:\n            at NServiceBus.ObjectBuilder.Spring.SpringObjectBuilder.NServiceBus.ObjectBuilder.Common.IContainer.Configure(Type concreteComponent, DependencyLifecycle dependencyLifecycle)\n            at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent[T](DependencyLifecycle instanceLifecycle) in c:\\Projects\\NServiceBus\\src\\impl\\ObjectBuilder.Common\\ObjectBuilder.Common\\CommonObjectBuilder.cs:line 61\n            at NServiceBus.Management.Retries.Config.SecondLevelRetriesConfiguration.Run() in c:\\Projects\\NServiceBus\\src\\management\\retries\\NServiceBus.Management.Retries\\Config\\SecondLevelRetriesConfiguration.cs:line 22\n            at NServiceBus.Configure.<Initialize>b__c(Type t) in c:\\Projects\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 296\n            at System.Collections.Generic.List`1.ForEach(Action`1 action)\n            at NServiceBus.Configure.ForAllTypes[T](Action`1 action) in c:\\Projects\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 315\n            at NServiceBus.Configure.Initialize() in c:\\Projects\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 293\n            at NServiceBus.Configure.CreateBus() in c:\\Projects\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 261\n            at NServiceBus.Hosting.GenericHost.Start() in c:\\Projects\\NServiceBus\\src\\hosting\\NServiceBus.Hosting\\GenericHost.cs:line 30\n       InnerException: \n```"
390,'','Fix debug message of "has been allocated to endpoint @"\n"DEBUG NServiceBus.Unicast.UnicastBus [(null)] - Message NServiceBus.Scheduling.Messages.ScheduledTask has been allocated to endpoint @."\n\nTo verify:\n\n* Turn debug on \n* Start the endpoint\n\nOnly messages with a configured endpoint should be logged'
389,'johnsimons','Only cache the timeout id and expiry\nTo keep memory consumption down we should only cache the timeout id and expiry date. This means that we have to reload the timeout when it expires.'
388,'johnsimons','Load timeouts on demand\nToday we load all timeouts into memory. This can take a while so we should consider to only load the timeouts that are about to expire in the coming X hours'
387,'','Product version should be set in one place only\nAt the moment the ilmerge uses an empty assembly to read attribute from, including the assembly version.\n\nWe want the version and attributes to be read from the [script file](https://github.com/NServiceBus/NServiceBus/blob/master/default.ps1#L2)\n'
386,'','Add overload to IConfigureComponents.ConfigureComponent to allow the use of lambdas for component creation\nAdd extra overload `ConfigureComponent<X>((builder)=>{})`'
385,'','No api for removing container registrations\nAdd ability to remove registrations from container to IConfigureComponents.'
384,'','Allow users decrease message receiving throughput\n'
383,'','Monitor dead-letter queues\nMaybe need a satellite to be watching these queues and then have it send a message to the error queue directly.'
382,'andreasohlund','Install the modeling tools when users run RunMeFirst.bat\n* Verify that the nuget extension is installed\n* Call the vsix in /Modelling/'
381,'andreasohlund','Fix for #366: Upgrade to NHibernate 3.3.0.4000\n'
380,'','Add Basic Policy\n'
379,'andreasohlund','Port fix for #133 from 2.5 to 3.0\n'
378,'johnsimons','We have 2 Nuget folders under tools!\nsee https://github.com/NServiceBus/NServiceBus/tree/develop/tools'
377,'udidahan','Make WcfService<T> and WebService<T> not require IMessage\n'
376,'','Add a activemq sender and receiver\n'
375,'','Add a activemq channel for the gateway\nTo better enable cross platform operations we should add a activemq channel to our gateway'
374,'','Add a azure queues/.net servicebus channels for the gateway \nTo improve our support for cloud <=> on-premise bridging we should add channels for both azure queues and .net servicebus to our gateway'
373,'','Improve the DSL for the scheduler\nTo include scheduling at fixed times/days'
372,'andreasohlund','Improve error message when a to long type name causes the Unique constraint impl in Raven to blow up\nhttp://tech.groups.yahoo.com/group/nservicebus/message/13692'
371,'johnsimons','Remove ExceptionSanitizer\nIn the FaultManager there is a check, if (SanitizeProcessingExceptions) { e = ExceptionSanitizer.Sanitize(e); }. The Sanitize method only throws a NotImplementedException.'
370,'johnsimons','IWantToRunWhenTheBusStarts runs on the same thread as the host\nUnlike IWantToRunAtStartup (https://github.com/NServiceBus/NServiceBus/blob/master/src/hosting/NServiceBus.Hosting/Configuration/ConfigurationManager.cs#L81) IWantToRunWhenTheBusStarts  runs on the main thread. This means that you might hit the 30 second startup limit for windows services. In order to make both behave them same we should consider to run the IWantToRunWhenTheBusStarts  on a seprate thread as well.'
369,'andreasohlund','Existing timeouts are not fired after a restart when stored in RavenDB\nWhen restarting the TM we load the existing timeouts from storage. When we use RavenDB as storage the default limit of max 128 documents returned causes the TM to only cache the first 120 timeouts. The other timeouts will be left in the storage and expire on subsequent restarts.'
368,'','SendOnly host is creating queues when NServiceBus.Host is referenced\nsee: http://tech.groups.yahoo.com/group/nservicebus/message/13941\n'
367,'','Add a ICreateQueues abstraction\nTo better support we need to introduce a ICreateQueues interface and refactor our installers to use it'
366,'andreasohlund','Upgrade to NHibernate 3.3.0.4000\n'
365,'','Improve 404 page on the website\nTry to redirect to the search page having the previous url parsed and passed in as the query string.'
364,'johnsimons',"Retry on subscription failure when queue doesn't exist\nWhen running a solution for the first time, sometimes a subscriber starts up before a publisher has a chance to create its input queue thus causing the subscriber to blow up because it can't find the publisher.\r\n\r\nWe should catch that exception, sleep a couple of seconds, and retry (say, up to 5 times), and only if it still fails then throw the exception all the way out. "
363,'johnsimons',"When a unit of work fails in HandleTransportMessage, ProcessingStatistics.End throws another exception\nRunning NSB 3.0.3\r\n\r\nWhen there is an issue in a handler or another set up error the exception two exceptions get logged (see below).\r\n```\r\n2012-05-10 18:26:53,029 [Worker.13] ERROR NHibernate.Transaction.AdoTransaction [(null)] <(null)> - Begin transaction failed\r\nSystem.Data.SqlClient.SqlException (0x80131904): The server failed to resume the transaction. Desc:df0000000b.\r\nThe transaction active in this session has been committed or aborted by another session.\r\n   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection)\r\n   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning()\r\n   at System.Data.SqlClient.TdsParser.Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj)\r\n   at System.Data.SqlClient.TdsParser.TdsExecuteTransactionManagerRequest(Byte[] buffer, TransactionManagerRequestType request, String transactionName, TransactionManagerIsolationLevel isoLevel, Int32 timeout, SqlInternalTransaction transaction, TdsParserStateObject stateObj, Boolean isDelegateControlRequest)\r\n   at System.Data.SqlClient.SqlInternalConnectionTds.ExecuteTransactionYukon(TransactionRequest transactionRequest, String transactionName, IsolationLevel iso, SqlInternalTransaction internalTransaction, Boolean isDelegateControlRequest)\r\n   at System.Data.SqlClient.SqlInternalConnection.BeginSqlTransaction(IsolationLevel iso, String transactionName)\r\n   at System.Data.SqlClient.SqlInternalConnection.BeginTransaction(IsolationLevel iso)\r\n   at System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel isolationLevel)\r\n   at System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel isolationLevel)\r\n   at NHibernate.Transaction.AdoTransaction.Begin(IsolationLevel isolationLevel)\r\n   \r\n2012-05-10 18:26:53,107 [Worker.13] WARN  NServiceBus.Unicast.Transport.Transactional.TransactionalTransport [(null)] <(null)> - Failed raising 'transport message received' event for message with ID=9ec84006-a0a7-4032-8604-bc825b11d216\\143272\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at NServiceBus.Unicast.Monitoring.ProcessingStatistics.End(Exception ex)\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass33.<HandleTransportMessage>b__30(IManageUnitsOfWork uow)\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder childBuilder, TransportMessage msg)\r\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e)\r\n   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg)\r\n```\r\nThe message errors and is sent to the error queue, but the exception in the message is the 2nd exception (when the 1st is the real failure).  This looks to be caused by a second exception happening in ProcessingStatistics.End(Exception ex) which is called when the first exception is caught."
362,'johnsimons',"Installers are not being invoked if NServiceBus dll's are excluded from scanning\nIt seems like the installer are not run if you pass a list of assemblies not including the NSB  asm to Configure.With()"
361,'johnsimons','Enable users to define their own convention for express messages\nTo set Express on a message NSB must be referenced. To enable users to do this in unobtrusive mode we need to extract this into a convention'
360,'','Add support for specifying a convention for TTBR\nTo set TimeToBeReceived on a message NSB must be referenced. To enable users to do this in unobtrusive mode we need to extract this into a convention'
359,'andreasohlund',"Wrong method being called if message handler class contains more than one method accepting the message type\nIf you have more than one method accepting the message type we'll choose the one that we first find. We need to also check that it implements IHandleMessages or IHandleTimeouts. Workaround is to move the message handler method to the top of the class"
358,'johnsimons','Queues get created with permissions for the account running NServiceBus.Host /install\nWhen running install with NServiceBus.Host (3.0.3) permissions for the queues created is set for the account running the install, not the configured service account. This results in:\r\n\r\nFATAL NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver [(null)] <(null)> -\r\nDo not have permission to access queue [private$\\somequeue]. Make sure that the current user [someuser] has permission to Send, Receive, and Peek  from this queue. \r\n\r\nException: [System.Messaging.MessageQueueException (0x80004005): Access to Message Queuing system is denied.'
357,'','The queue does not exist exception without a queue name specified\nMake sure queue name is specified in the following exception (got it when running Orders.Handler worker before running the Distributor):\r\n2012-05-08 23:33:29,810 [1] FATAL NServiceBus.Hosting.GenericHost [(null)] - System.Messaging.MessageQueueException (0x8\r\n0004005): The queue does not exist or you do not have sufficient permissions to perform the operation.\r\n   at System.Messaging.MessageQueue.GenerateQueueProperties()\r\n   at System.Messaging.MessageQueue.get_QueuePath()\r\n   at System.Messaging.MessageQueue.get_QueueName()\r\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.QueueIsTransactional() in d:\\BuildAgent-03\\work\\nsb.master4\\s\r\nrc\\impl\\unicast\\queuing\\NServiceBus.Unicast.Queuing.Msmq\\MsmqMessageReceiver.cs:line 124\r\n   at NServiceBus.Unicast.Queuing.Msmq.MsmqMessageReceiver.Init(Address address, Boolean transactional) in d:\\BuildAgent\r\n-03\\work\\nsb.master4\\src\\impl\\unicast\\queuing\\NServiceBus.Unicast.Queuing.Msmq\\MsmqMessageReceiver.cs:line 32\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.NServiceBus.Unicast.Transport.ITransport.Start(\r\nAddress address) in d:\\BuildAgent-03\\work\\nsb.master4\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transacti\r\nonal\\TransactionalTransport.cs:line 156\r\n   at NServiceBus.Unicast.UnicastBus.NServiceBus.IStartableBus.Start(Action startupAction) in d:\\BuildAgent-03\\work\\nsb.\r\nmaster4\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 769\r\n   at NServiceBus.Unicast.UnicastBus.NServiceBus.IStartableBus.Start() in d:\\BuildAgent-03\\work\\nsb.master4\\src\\unicast\\\r\nNServiceBus.Unicast\\UnicastBus.cs:line 741\r\n   at NServiceBus.Hosting.GenericHost.Start() in d:\\BuildAgent-03\\work\\nsb.master4\\src\\hosting\\NServiceBus.Hosting\\Gener\r\nicHost.cs:line 32'
356,'','Provide clear fluent interface for InCode configuration\nI think there is a serious problem for newbies in the fluent configuration API. Almost everything is handled by extension methods which do not return a reduced API but instead return the original extended object. This can lead to serious troubles when configuring NServiceBus through code. For example the order in which the serializer and the unicast extension methods occur is crucial for NServiceBus to work properly. If clarification is needed I can provided a detailed example.'
355,'','FtpMessageQueue uses Address.ToString() which breaks the ftp address\nWhen the `FtpMessageQueue` retrieves the address of the ftp server from the Address, it uses `ToString()`.\r\nThe problem is that returns something like "localhost:1091**@machinename**".\r\nAnd that is not a valid ftp address, it should use `Queue` to just get  "localhost:1091".'
354,'','Make the build script build the projects in release mode\nThis one is fixed on the CI build is that correct Joseph?'
353,'','[Obsolete] attributes on messages causes the reflection based mapper to blow up\nTo reproduce, just add a [Obsolete] to the event message in the Unobtrusive sample (error only occurs for interface based messages)\r\n\r\n\r\nFull stack trace\r\n   at System.Reflection.Emit.CustomAttributeBuilder.EmitValue(BinaryWriter writer, Type type, Object value)\r\n   at System.Reflection.Emit.CustomAttributeBuilder.InitCustomAttributeBuilder(ConstructorInfo con, Object[] constructorArgs, PropertyInfo[] namedProperties, Object[] propertyValues, FieldInfo[] namedFields, Object[] fieldValues)\r\n   at System.Reflection.Emit.CustomAttributeBuilder..ctor(ConstructorInfo con, Object[] constructorArgs, PropertyInfo[] namedProperties, Object[] propertyValues)\r\n   at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.BuildCustomAttribute(Object customAttribute) in c:\\dev\\NServiceBus\\src\\impl\\messageInterfaces\\NServiceBus.MessageInterfaces.MessageMapper.Reflection\\MessageMapper.cs:line 258\r\n   at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.AddCustomAttributeToProperty(Object customAttribute, PropertyBuilder propBuilder) in c:\\dev\\NServiceBus\\src\\impl\\messageInterfaces\\NServiceBus.MessageInterfaces.MessageMapper.Reflection\\MessageMapper.cs:line 210\r\n   at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateTypeFrom(Type t, ModuleBuilder moduleBuilder) in c:\\dev\\NServiceBus\\src\\impl\\messageInterfaces\\NServiceBus.MessageInterfaces.MessageMapper.Reflection\\MessageMapper.cs:line 158\r\n   at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GenerateImplementationFor(Type interfaceType, ModuleBuilder moduleBuilder) in c:\\dev\\NServiceBus\\src\\impl\\messageInterfaces\\NServiceBus.MessageInterfaces.MessageMapper.Reflection\\MessageMapper.cs:line 98\r\n   at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.InitType(Type t, ModuleBuilder moduleBuilder) in c:\\dev\\NServiceBus\\src\\impl\\messageInterfaces\\NServiceBus.MessageInterfaces.MessageMapper.Reflection\\MessageMapper.cs:line 77\r\n   at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.Initialize(IEnumerable`1 types) in c:\\dev\\NServiceBus\\src\\impl\\messageInterfaces\\NServiceBus.MessageInterfaces.MessageMapper.Reflection\\MessageMapper.cs:line 38\r\n   at NServiceBus.Serializers.XML.Config.MessageTypesInitializer.Run() in c:\\dev\\NServiceBus\\src\\impl\\Serializers\\NServiceBus.Serializers.XML.Config\\MessageTypesInitializer.cs:line 22\r\n   at NServiceBus.Configure.<Initialize>b__d(IWantToRunWhenConfigurationIsComplete o) in c:\\dev\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 293\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Configure.Initialize() in c:\\dev\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 292\r\n   at NServiceBus.Configure.CreateBus() in c:\\dev\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 249\r\n   at NServiceBus.Hosting.GenericHost.Start() in c:\\dev\\NServiceBus\\src\\hosting\\NServiceBus.Hosting\\GenericHost.cs:line 30'
352,'','NServiceBus.Testing is not included in JustPrepareBinaries\nWhen using "build JustPrepareBinaries" the NServiceBus.Testing assembly is not built. Some sample projects (like the FullDuplex samle) will not work without that assembly.'
351,'','Repurpose IWantCustomInitialization to only be valid on the endpointconfig\nGiven that we now support `INeedInitalization` we should consider to either obsolete or introduce warnings to guide users to only use `IWantCustomInitialization` on the actual endpoint config (class that implements `IConfigureThisEndpoint`). This will remove the confusing as to why `IWantCustomInitialization` has a special meaning when on the endpoint config. '
350,'','/endpointname command line arg should override DefineEndpointName\nIf the user specifies an endpointName in the command line when running or installing, this endpoint name should override any existing convention or fluent config (DefineEndpointName) .'
349,'','NServiceBus.Host.exe help text not up to date with what is in the code and website\nThe following are out of sync:\r\n* [help.txt](https://github.com/NServiceBus/NServiceBus/blob/3.0.4/src/hosting/NServiceBus.Hosting.Windows/Content/Help.txt)\r\n* [code](https://github.com/NServiceBus/NServiceBus/blob/3.0.4/src/hosting/NServiceBus.Hosting.Windows/Arguments/HostArguments.cs)\r\n* [website](http://nservicebus.com/GenericHost.aspx)'
348,'johnsimons',"Randomly use different containers in samples\nAs part of the testing of the samples and the different combination of containers, I've noticed that most if not all of the samples are using the default container.\r\n\r\nTo ease the testing of the combination of containers per sample, we should change the samples to use different containers as the default.\r\n\r\nExample:\r\nAsyncPages           Windsor\r\nAsyncPagesMVC3    Ninject\r\nDataBus                AutoFac\r\nEncryption             Unity\r\nFullDuplex              StructureMap\r\nGenericHost           Unity\r\nManufacturing        Spring/StructureMap (Client/Server) \r\nMessageMutators   AutoFac\r\nPubSub                 Windsor\r\n....\r\n\r\nThis way we're always dogfooding our container integration as part of running different samples locally and we have samples to point users to go to in case they need help integrating a specific container."
347,'johnsimons','Obsolete Configure.WithWeb\nNo reason to burden the user to pick the correct `With`.\r\n\r\nReplace:\r\n```C#\r\n        /// <summary>\r\n        /// Creates a new configuration object scanning assemblies\r\n        /// in the regular runtime directory.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public static Configure With()\r\n        {\r\n            if (HttpContext.Current != null)\r\n                throw new InvalidOperationException("NServiceBus has detected that you\'re running in the context of a web application. The method \'NServiceBus.Configure.With()\' is not recommended for web scenarios. Use \'NServiceBus.Configure.WithWeb()\' instead, or consider explicitly passing in the assemblies you want to be scanned to one of the overloads to the \'With\' method.");\r\n \r\n            return With(AppDomain.CurrentDomain.BaseDirectory);\r\n        }\r\n \r\n        /// <summary>\r\n        /// Configures NServiceBus to scan for assemblies \r\n        /// in the relevant web directory instead of regular\r\n        /// runtime directory.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public static Configure WithWeb()\r\n        {\r\n            return With(HttpRuntime.BinDirectory);\r\n        }\r\n```\r\n\r\nWith:\r\n```C#\r\n        /// <summary>\r\n        /// Creates a new configuration object scanning assemblies\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public static Configure With()\r\n        {\r\n            if (HttpContext.Current != null)\r\n                return With(HttpRuntime.BinDirectory);\r\n \r\n            return With(AppDomain.CurrentDomain.BaseDirectory);\r\n        }\r\n```\r\n\r\nAnd Obsolete `WithWeb`.'
345,'andreasohlund','Timeouts fireing at the same time might be discarded if there is a problem with the previous timeout\nWe need to modify the eventhandler to supress exception and instead retry them\r\nRelated to: https://github.com/NServiceBus/NServiceBus/issues/238'
344,'andreasohlund','Timeouts with short expiry can cause duplicate timeouts to be fired\nWhen a timeout with short or negative expiry arrives there is a race condition that might cause the timeout to be left in the storage (the save occurs after the delete). To avoid this we need to check for expired timeouts in the timeout transportmessage handler'
343,'','Include XML Documentation\nInclude XML documentation to provide Intellisense in Visual Studio'
342,'','Remove .DoNotAutoSubscribe() from DataBus sample\nBoth Receiver and Sender do not need to use .DoNotAutoSubscribe() any longer now that ICommand is available.\r\n'
341,'johnsimons',"Remove .RunTimeoutManager() and NServiceBus.Time profile from Unobtrusive sample\nThe client uses the Time profile which is obsolete. \r\nThe Server uses .RunTimeoutManager() but it's not needed anymore since the profile is AsA_Publisher"
340,'','Standardise samples code\nAt the moment the samples code is not standardised across all samples, what does this mean:\r\n* Console logging output should be clear and same text if possible;\r\n* Naming of endpoint configuration classes;\r\n* Console shortcut keys used to send, publish, simulator, ... messages should be the same;\r\n* VS solution names;\r\n* VS project names;\r\n* Namespaces;\r\n* Ensure there is at least one test project;\r\n* ...'
339,'johnsimons','Add ExpectNotSend and other nots to testing\n'
338,'',"NServiceBus.Host.exe /install NServiceBus.ProfileThatDontExists\nIt doesn't show anything about the profile not existing in the log and installs with the NServiceBus.Production profile (that is written to the log). "
337,'','Make implementing alternate transports easier\nhttp://tech.groups.yahoo.com/group/nservicebus/message/13741'
336,'andreasohlund','Make sure that replication works for sagas and subscriptions\n'
335,'','Optimise the loads to use .Include()\nWhen we upgrade to Raven 909 we can optimise the Get(property) to use a multiget to load both the key document and the saga in one roundtrip.\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/pull/268\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/issues/302'
334,'johnsimons','Pull the Ninject child container fix\nhttps://github.com/remogloor/NServiceBus/commit/631e255b4c58c20ee4f7c707b1322345ea66d9f3#diff-1'
333,'','Castle shares UoW components across child containers\nWhen configuring a component as InstancePerUoW in the container the windsor build resolves the same component for all child containers this is not the expected behaviour since that will reuse messagehandlers across threads. \r\n\r\nHere is a failing test: (remove castle from the excluded builders to make it fail)\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/6eeb17b1b5cae29e4cf3771ece5e830ce8f2acd8/src/impl/ObjectBuilder/ObjectBuilder.Tests/When_using_nested_containers.cs#L33'
332,'','Fix info message when auto subscription for sagas is turned off\n'
331,'',"Core only nuget packages for private feeds\nI tweaked the build to create nuget packages for core-only packages, too.\r\n\r\nThe only assemblies directly included are Interop.MSMQ and Raven.Licencing as i couldn't find other nuget packages for those.\r\n\r\nAlso there is some duplication in the referenced versions - but that could easily be fixed with some extra ps brain power."
330,'',"Script for building local prerelease packages\nNot more, not less :-)\r\n\r\nThis time onto 'develop'."
329,'','Local package script\nJust a small side-script to create local prerelease packages.'
328,'',"Core only nuget packages for private feeds\nI tweaked the build to create nuget packages for core-only packages, too.\r\n\r\nThe only assemblies directly included are Interop.MSMQ and Raven.Licencing as i couldn't find other nuget packages for those.\r\n\r\nAlso there is some duplication in the referenced versions - but that could easily be fixed with some extra ps brain power."
327,'','Improve exception message when using Command or Event for reply\nException message in:\r\npublic static void AssertIsValidForReply(IEnumerable<object> messages):\r\n\r\n*"Reply is neither supported for Commands nor Events. Commands should be be sent to their logical owner using bus.Send and bus. Events should be Published with bus.Publish."*\r\n\r\nShould change to:\r\n* if command: You can\'t reply with a command please use a regular message instead or send it using Bus.Send()\r\n* if event:  You can\'t reply with an event please use a regular message instead or publish it using Bus.Publish()'
326,'','SecurityException when running from network drive\nCalling "ConfigurationManager.GetSection()" from an application that resides on a network share generates a "System.Security.SecurityException.\r\n\r\nI am able to solve the issue by slightly modifying the code in DefaultConfigurationSource as follows.\r\n\r\n```c#\r\npublic class DefaultConfigurationSource : IConfigurationSource\r\n{\r\nT IConfigurationSource.GetConfiguration<T>()\r\n{\r\nif (!typeof(ConfigurationSection).IsAssignableFrom(typeof(T)))\r\nthrow new ArgumentException("DefaultConfigurationSource only\r\nsupports .Net ConfigurationSections");\r\n\r\nif (HttpContext.Current != null)\r\n{\r\nreturn ConfigurationManager.GetSection(typeof(T).Name) as T;\r\n}\r\nelse\r\n{\r\nvar config =\r\nConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);\r\nreturn config.GetSection(typeof(T).Name) as T;\r\n}\r\n}\r\n}\r\n```\r\n\r\n\r\n'
325,'johnsimons','IndexOutOfRangeException in MessageHeaderManager\nI have come across this exception in version 3.0.3\r\n\r\nThe original code in ~\\src\\headers\\NServiceBus.MessageHeaders\\MessageHeaderManager.cs\r\n\r\n\r\n\tvoid IMutateOutgoingTransportMessages.MutateOutgoing(object[] messages, TransportMessage transportMessage)\r\n\t{\r\n\t\tforeach(var key in staticOutgoingHeaders.Keys)\r\n\t\t\ttransportMessage.Headers.Add(key, staticOutgoingHeaders[key]);\r\n\r\n\t\tif (messageHeaders != null)\r\n\t\t\tif (messageHeaders.ContainsKey(messages[0]))\r\n\t\t\t\tforeach(var key in messageHeaders[messages[0]].Keys)\r\n\t\t\t\t\ttransportMessage.Headers.Add(key, messageHeaders[messages[0]][key]);\r\n\t}\r\n\r\nThere are cases that messageHeaders is not null but it does not contain any items at index 0.\r\n\r\nthis is the amended code to fix this issue:\r\n\r\n\tvoid IMutateOutgoingTransportMessages.MutateOutgoing(object[] messages, TransportMessage transportMessage)\r\n\t{\r\n\t\tforeach(var key in staticOutgoingHeaders.Keys)\r\n\t\t\ttransportMessage.Headers.Add(key, staticOutgoingHeaders[key]);\r\n\r\n\t\tif (messageHeaders != null && messages.Length > 0 && messageHeaders.ContainsKey(messages[0]))\r\n\t\t\t\tforeach(var key in messageHeaders[messages[0]].Keys)\r\n\t\t\t\t\ttransportMessage.Headers.Add(key, messageHeaders[messages[0]][key]);\r\n\t}\r\n\r\nwhich is also found correctly in ~\\src\\unicast\\NServiceBus.Unicast.Tests\\Helpers\\MessageHeaderManager.cs\r\n\r\nRegards,\r\nSarmaad'
324,'','Add support for service instance name\nIf the host is installed using an instance parameter, for example:\r\n\r\nNServiceHost.exe /install /instance:PROD\r\n\r\nThen the instance name should be added to the endpoint name, for example: "Endpointname$PROD". Also, when defining your own endpoint name convention, the instance name should be available, for example as a parameter to the convention method.\r\n'
323,'johnsimons','SuppressDTC is misspelled\nI can not configure the SupressDTC property from external configuration. It would be nice to have a configuration point (perferrably external config) that allows me switch this flag in the transport. Currently I have to create a IWantCustomInitialization class that resolves a TransactionalTransport, or do it by Configure.Instance.Configurer.ConfigureProperty() and read it from the configuration file somehow. Would be nice to have this internally.\r\n\r\nAs a side note, SuppressDTC is spelled incorrectly (with one "p"), just thought you might want to fix that as well.'
322,'','Add MongoDB support for persistence\nWould be nice if there was built-in support for persisting sagas and subscriptions to mongodb.'
321,'andreasohlund',"Duplicate WindowsIdentityName header when processing 2.6 messages\nWe need to add a check to make sure that we don't add the WindowsIdentityName twice when processing 2.6 messages in NSB 3.0"
320,'andreasohlund','Exception when multiple application messages are sent using the gateway\nThe HttpHeaderManager will blow up with a duplicate key exception since we try to add the same transportmessage id more than once'
319,'','Add support for testing both expiry and state for saga timeouts\n'
318,'johnsimons','IWantToRunAtStartup.Stop method is not called if process is running longer than 5 minutes. \nTo reproduce the error (was tested in 2.6):\r\nSamples\\FullDuplex\\RequestResponse.sln.\r\n\r\n**1st scenario (Success)**\r\nPut breakpoint in stop method in client code - ClientEndpoint.cs. \r\nRun sample after few seconds press CTRL+BREAK. \r\nOn my machine Stop is handled, debugger breaks execution at breakpoint. \r\nAfter pressing F5 application stops.\r\n\r\n**2nd scenario (Failed)**\r\nRun application again, but wait more than 5 minutes before pressing CTRL+BREAK. (I remember that lease timeout is about 5 minutes). Stop method is not called now. \r\n\r\nI verified both scenarios by logging information to file, and by running host as windows service. Each time after 5 minutes the stop method was not called. \r\n\r\n'
317,'','Make the timeoutmanager on by default\nIn order for timeout related features like Bus.Defer, saga timeouts etc the timeout manager should be on by default.\r\n\r\n* Enable the TM in the server role\r\n* Make sure that Lite configures inmemory storage\r\n* Make sure that Production+Integration uses Raven storage\r\n* Obsolete the time profile\r\n* Modify the Time profile handler to warn and tell users to not use it\r\n* Time should not be inherited by the Lite profile anymore\r\n* Remove any Time profile and configs from the samples\r\n\r\nQ: Do we want to have it on by default when self hosting as well? (probably no)\r\n\r\n\r\n\r\n*TBD'
316,'','Warning about license expiration\nHave timer wake up once a day and check license expiration. If license will expire in 30 days or less, log a warning.\r\nIf license will expire in 7 days or less, change timer to fire once an hour, and log an error.'
315,'','Print failed expectation in saga tests\nSince saga tests are effectively written on a single line of code, output the specific expectation that caused the test to fail.'
314,'','Auto map saga properties marked as [Unique] to matching messages\nIf a saga has a unique attribute, check to see if one (or more) of the message types the saga is processing have a property of the same name and type. If so, do the ConfigureMapping automatically.'
312,'','Add documentation for remote usage\nAll of the documentation on the web page, and all of the samples in the download, assume that the multiple processes (distributor/worker, sender/receiver) will be running on the same machine.  I understand this makes it easier to download and run the samples, but we could really use some more in depth explanation of how to take those samples and distribute them.  Which config settings need to change? What should the settings be? Are there any code changes? What permissions need to be set on each box, etc.'
311,'','If a commandline parameter is specified but is empty and then show the help doc.\nAlso, part of my issue was using a space instead of a colon when specifying the configuration type:\r\n\r\n    /endpointConfigurationType "MyService.EndpointConfig, MyService"\r\n\r\nShould be\r\n\r\n    /endpointConfigurationType:"MyService.EndpointConfig, MyService"\r\n\r\nWhile this is definitely a stupid error on my part it would probably be beneficial to check if a commandline parameter is specified but is empty and then show the help doc.\r\n\r\nRelated to issue:\r\nhttps://github.com/NServiceBus/NServiceBus/issues/309#issuecomment-5268998'
310,'','Better validation when endpoint config type is not specified correctly\nhttps://github.com/NServiceBus/NServiceBus/issues/309#issuecomment-5268998'
309,'','EndpointTypeConfig and AllAssembliesExcept not being honored\nI have a non .net dll (libtidy.dll) in my bin directory. I\'m using the generic host. I have a NServiceBus.Host.exe.config file like this: \r\n\r\n    <?xml version="1.0" encoding="utf-8" ?>\r\n    <configuration>\r\n      <appSettings>\r\n        <add key="EndpointConfigurationType" value="MyService.EndpointConfig, MyService"/>\r\n      </appSettings>\r\n      <startup>\r\n        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/>\r\n      </startup>\r\n    </configuration>\r\n\r\nI also have tried this in my Endpoint Config file:\r\n\r\n    Configure.With(typeof(EndpointConfig).Assembly)...\r\n\r\nand \r\n\r\n    Configure.With(AllAssemblies.Except("libtidy.dll"))...\r\n\r\nWhen I try to install the service with this command \r\n\r\n    NServiceBus.Host.exe /install nservicebus.integration \r\n         /serviceName:MySvc /displayName:"My Service" \r\n        /description:"My Service Description" \r\n        /endpointConfigurationType "MyService.EndpointConfig, MyService"\r\n\r\n    c:\\MyService\\bin\\debug>NServiceBus.Host.exe /install nservicebus.integration ...  \r\n        /endpointConfigurationType "MyService.EndpointConfig, MyService" \r\n       Could not load c:\\MyService\\bin\\debug\\libtidy.dll. \r\n         Consider using \'Configure.With(AllAssemblies.Except("libtidy.dll"))\' to tell NServiceBus not to load this file.\r\n         Could not load file or assembly \'file:///c:\\code\\BoomTown\\BoomTown.Drip.Service\\bin\\QA\\libtidy.dll\' or one of its\r\n         dependencies. The module was expected to contain an assembly manifest.\r\n\r\nAt this point it just dies and doesn\'t install. If I run it in visual studio I get the same error message but it keeps running. Any ideas? Thanks!\r\n'
308,'','Unable to get NServicebus.Host x86 version from Nuget\nIs this avialable somewhere or do I need to download the source and compile it myself?\r\n\r\nThanks!'
307,'andreasohlund',"Make it so that it doesn't need ITimeoutState anymore\nAs I see it is also needed to implement ITimeoutState in order to be able to use IHandleTimeouts. This is another restriction like ISagaMessage in the current implementation. I need to reference NSB in my message assemblies."
306,'','Update Distributor web page documentation\nSome of the documentation at http://nservicebus.com/Distributor.aspx is referencing an older version of NServiceBus.'
305,'andreasohlund',"Make it so we don't need ISagaMessage any more\n- deprecate the ISagaMessage, but still support\r\n- set the sagaid+sagatype on out messages from sagas\r\n- refactor the settimeout\r\n- When a saga id+type header is received, store it in a thread static\r\n- When doing a reply or return on a saga message (id + type) make sure to copy the type and id over)\r\n- Fix the sample to use it"
304,'','Not consistent behavior when sending messages with empty and null array\nWhen sending message with an array:\r\n\r\nWhen array is null, message is received at receiver side\r\n\r\nWhen array is instantiated (string[] Words = new string[0]) but contains no values a serialization exception is thrown at receiver side and message is not processed:\r\n[System.MissingMethodException]: {"No parameterless constructor defined for this object."}\r\n\r\nWhen array is instantiated like this: string[] Words = new string[2]) , a serialization exception is thrown at sender side and message is  not sent to receiver.\r\n\r\n'
303,'','if the /install is specified, all relevant installers (also queues) should be executed\nTo reproduce, start the Orders.Handler (in ScaleOut sample) like this:\r\n\r\nNServiceBus.Host.exe /install NServiceBus.Integration NServiceBus.Distributor \r\n\r\nOnly the main queue will be generated. The other queues will be generated only after the service will be started.\r\n'
302,'andreasohlund','Upgrade Raven to Version 960 and disable HTTP compression\nstore.JsonRequestFactory.DisableHttpCompression = true;\n\n## How to test\n\nRun the TimeoutManager sample against a 960 version of Raven db and make sure that all works as expected'
301,'','MutateOutgoingTransportMessages for Bus.Return throws exception\n'
300,'','NullReferenceException when missing headers\nRelated to issue:\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/13361\r\n\r\n\r\nI am using a send only endpoint to send a message. When the message handler receives the message, the Handle method executes - however after it completes - an exception is thrown inside NServiceBus, and the handler is re-executed. The send only endpoint is wired up per the example. The handler is marked with AsA_Server and is using the NServiceBus console host. The exception is below. Any help would be appreciated.\r\n\r\nI get the same error when running the bus in my own process. Seems some headers are missing and when the message is being processed, in UnicastBus.HandledSubscriptionMessage, the GetSubscriptionMessageTypeFrom method returns a null string when trying to get the message header with key "SubscriptionMessageType", which does not exist on the message header, and then you\'ll get a NRE if you\'ve configured MSMQ Subscription Storage.\r\n\r\nThink it is best to get a clear error message when the SubscriptionMessageType is missing from the header, instead of a NRE.\r\n\r\n'
299,'','Add better support for NonDurable operations\nTBD (just notes so far)\r\n\r\nExpress\r\n\r\nNon tx queues\r\n\r\nInstall should create non-tx queues if the transport is non tx\r\n\r\n.NonDurable()\r\n\r\nProfile?\r\n\r\nCan we have another role?\r\n\r\nInmemory sub storage\r\nInmemory saga storage\r\nInmemory timeouts\r\n\r\nDo thorough perf testing'
297,'','NServiceBus.Host Endpoint name is ignored when configuring endpoint.\nRemove the ordering issues that can result in endpoint name being ignored\r\n\r\n--\r\n\r\nI am configuring an endpoint using the following:\r\n\r\n    class EndpointConfig : IConfigureThisEndpoint, AsA_Publisher, IWantCustomInitialization {\r\n        NServiceBus.Configure.With()\r\n                .StructureMapBuilder()\r\n                .XmlSerializer()\r\n                .DefineEndpointName("myEndpoint");\r\n    }\r\n\r\nAs far as I understand this, the initialization should look for and create an input queue named \'myEndpoint\' in this case or am I wrong? \r\n\r\nIn 3.0.0 it worked fine to use this method but in 3.0.3 it seems to ignore the endpoint name given using this method as it is createing a queue named after the namespace rather than the name I defined.\r\n\r\nI know about the INameThisEndpoint interface, but when using that method the config file used is the NServiceBus.Host.config and I need to read stuff from myAssembly.config when naming my endpoint. '
296,'','Add validation that makes sure that the user has supplied at least one mapping for any unique properties on each saga\n'
295,'','Add Raven to list of assemblies to exclude while scanning\n'
294,'johnsimons','Upgrade to Ninject 3.0\n'
293,'','Facilitate custom IMessageHandlers contracts\nUnobstrusive mode makes it easy to use custom message contracts for commands and events.\r\n\r\nAllow for custom IMessageHandlers contracts. After a brief inspection, It would imply to get rid of typeof(IMessageHandler) code inside HandlerInvocationCache.cs, UnicastBus.cs, ConfigUnicastBus.cs, Configure.cs.\r\n\r\nI would be nice to have another overridable convention for messagehandlers.'
292,'andreasohlund','Fix for AzureSagas sample logic\nFixing logical error when late payment is accepted despite disposed drink that got cold.'
291,'andreasohlund','Better exception message when a concurrency exception occurs in the raven persister\nCatch and retrow a better exception explaining to the user what\'s just happened (today we just emit the raven "put on non currrent etag" which make no sense to users at all.'
290,'andreasohlund','Unity reused instances across child containers\nLooking at the code for the Unity 2 ObjectBuilder, I noticed that the code assumes the container will properly dispose of the created instances. Unity will not actually call Dispose on its contained objects.\r\n\r\nThe way around this is to use child containers and the HierarchicalLifetimeManager. More details can be found on this at:\r\n\r\nhttp://www.devtrends.co.uk/blog/introducing-the-unity.mvc3-nuget-package-to-reconcile-mvc3-unity-and-idisposable\r\n\r\nAssuming NSB already creates a child container for every message, I think the solution is as simple as changing the LifetimeManager from TransientLifetimeManager to HierarchicalLifetimeManager.'
289,'udidahan',"Getting access to mocked IBus instance when testing\nI'm writing some tests to verify my class under test correctly publishes a message to the bus, the problem is I can not access the mocked IBus object that is intialized using Test.Initialize(). \r\n\r\nThe Test.Handler method has an overload with a callback that is called with the instance of the mock bus, so I'm going through a hoop to get instance of that, wondering if you could add an similar overload to Test.Initialize that accepts a callback?\r\n\r\nI don't want to create the IBus mock object myself as it is too much involved and there's already the support in the Tests assembly."
288,'','Create online documentation for the buildscript\n* Create a docu page that explains how to use the build script \r\n* Replace the relevant parts of the readme.txt to point to this page \r\n* Add a build.bat that invokes the build.ps1 so that it\'s "fool proof":)'
287,'','Port the 2.6 msmq storage for timeouts to 3.0\n* Port the impl from 2.6\r\n* Add config methods to configure it'
286,'andreasohlund','Send/Publish as the result of a gateway message being received blows up\nThe gateway message mutator assumes that correlation id is always set. This is not true for a when sending messages so it will blow up.'
285,'','ReturnToSourceQueue: ErrorManager should take part in ambient transaction and not always create a new transaction scope.\nCurrently, when calling the DLL directly from a NSB message handler, the message will always return to source whether the transaction of the message handler succeeds or fails.\r\n\r\nSource:\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/tools/management/Errors/ReturnToSourceQueue/NServiceBus.Tools.Management.Errors.ReturnToSourceQueue/ErrorManager.cs\r\n\r\nThe function ReturnMessageToSourceQueue creates a new TransactionScope in two places, instead of just participating in the ambient transaction (if one exists) and if not create a new transaction scope.\r\n\r\nHere is two spots where, TransactionScope.Required needs to be used.\r\n\r\n  public void ReturnMessageToSourceQueue(string messageId)\r\n        {\r\n            using (var scope = new TransactionScope())\r\n            {\r\n                try\r\n                {\r\n                    var message = queue.ReceiveById(messageId, TimeoutDuration, MessageQueueTransactionType.Automatic);\r\n...\r\n}\r\n  catch (MessageQueueException ex)\r\n                {\r\n                    if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)\r\n                    {\r\n                        Console.WriteLine(NoMessageFoundErrorFormat, messageId);\r\n\r\n                        foreach (var m in queue.GetAllMessages())\r\n                        {\r\n                            var tm = MsmqUtilities.Convert(m);\r\n\r\n                            if (tm.Headers.ContainsKey(TransportHeaderKeys.OriginalId))\r\n                            {\r\n                                if (messageId != tm.Headers[TransportHeaderKeys.OriginalId])\r\n                                    continue;\r\n\r\n                                Console.WriteLine("Found message - going to return to queue.");\r\n\r\n                               using (var tx = new TransactionScope(TransactionScopeOption.RequiresNew))\r\n                                {'
284,'','Automatically configure NHibernate UnitOfWork when configuring saga persister\nFixes #283'
283,'','Fluent configuration: Remove the need to call NHibernateUnitOfWork when using NHibernateSagaPersister\nCurrently when Saga Persistence is done using Raven, the unit of work is set to raven.\r\nWe should have the same behavior for NHibernate.\r\n\r\nThat is, if a user choose to configure NHibernateUnitOfWork(), we can spare the need to configure: NHibernateUnitOfWork()\r\n'
282,'','Improve exception message when Raven service is down.\nTo reproduce:\r\n\r\nManufacturing sample.\r\nStop the raven service, run the sample, you get the persistence of timeout manager exception. Make sure the exception is clear.\r\nThen, change the endpointconfig of OrderService to the following:\r\n Configure.Instance\r\n                .RunTimeoutManager()\r\n                .UseInMemoryTimeoutPersister();\r\n\r\nRun the sample, an exception from Saga persistence will be thrown. Make sure the exception is clear.'
281,'andreasohlund','Remove the need for a endpoint config when only using one of the satellites\nUsers that only wants to run the distributor,gateway, timeoutmanager stand alone should not have to create a dummy endpoint config. Modify the host to support running without a endpointconfig.'
280,'','Move the config extension for Ninject to the NServiceBus namespace\nTo make it easier for users to discover it'
279,'','Change check that masternode is not the localhost to a log\nToday we throw an exception but we should change it to do a Log.Warn instead to allow users to test locally.'
278,'','Extraction of messages when sending message with empty collection problem\nWhen extracting a message with an empty collection I\'m getting a warning "Received an empty message - ignoring.". \r\n\r\nThings that needs to be fixed:\r\n\r\n* Make sure that a proper deserialization exception is thrown so that the messages goes to the error queue when similar error occur\r\n* Fix the serializer to handle zero length arrays\r\n\r\n\r\nSample ...\r\nhttp://uploading.com/files/7em647e6/NServiceBusProblem.zip/'
277,'johnsimons','Using NServiceBus.Host, DefineEndpointName is useless\nIf using NServiceBus.Host, the name established with Configure.With().DefineEndpointName("endpoint") is overwritten and ignored, using the assembly name as queue name.'
276,'','The host blows up when it\'s installed as a service\n3.0.2 introduced a bug where /endpointName:"xyz" is added to the command line without checking if it\'s already there. This causes the host to blow up if the user is supplying /endpointName manually. \r\n\r\nWhen the host install  /endpointName is added automatically to allow for side by side operations. This means that the bug will always happen when running as a service.'
275,'','Add header that contains the Command/Event intent of the message\nThis will make it easier for audit systems to separate events from commands when storing the messages'
274,'','If no MSMQ section exists, no error is logged and endpoint does not process messages\nIf the MsmqTransportConfig section defined at the app config:\r\n<section name="MsmqTransportConfig" type="NServiceBus.Config.MsmqTransportConfig, NServiceBus.Core" />\r\n\r\nBut no MsmqTransportConfig element is specified then the endpoint doesn\'t process any messages.\r\nIn addition, no error/warnnings messages are logged.\r\n\r\n<MsmqTransportConfig NumberOfWorkerThreads="1" MaxRetries="5"/>\r\nIf I add this then the endpoint consumes messages.'
273,'','Isolate /installInfrastructure\nExecute NServiceBus.Host.exe /installInfrastructure from a folder containing only the required assemblies:\r\n\r\nlog4net.dll\r\nNServiceBus.Core.dll\r\nNServiceBus.dll\r\nNServiceBus.Host.exe\r\n\r\nDo that by:\r\n1. Creating  temp directory\r\n2. Move the relevant files over there\r\n3. Execute the command\r\n4. Delete the folder\r\n\r\n\r\n'
272,'','Make the licence check do a DEBUG log instead of INFO\nTo avoid filling the users logfiles (being filled with a INFO license command every 5 minutes):\r\n...\r\n2012-04-29 20:58:23,576 [26] INFO  Rhino.Licensing.LicenseValidator - License expiration date is 12/31/9999 23:59:59\r\n2012-04-29 21:03:23,582 [26] INFO  Rhino.Licensing.LicenseValidator - License expiration date is 12/31/9999 23:59:59\r\n2012-04-29 21:08:23,587 [26] INFO  Rhino.Licensing.LicenseValidator - License expiration date is 12/31/9999 23:59:59\r\n2012-04-29 21:13:23,593 [26] INFO  Rhino.Licensing.LicenseValidator - License expiration date is 12/31/9999 23:59:59\r\n...'
271,'','Support multiple sagas to wake up in response to a single message\nRight now each message will only find one saga. We should consider supporting multiple saga instances being loaded/created by a single message. \r\n\r\n'
270,'','Decrease loglevel to WARN for scanning exceptions\nAnd also add "raven.mvcintegration.dll" to the list of assemblies excluded by default from our scanning'
269,'andreasohlund','Add a option to avoid regular messages to be autosubscribed\nIn 3.0 we autosubscribe everything that is not a "command". This is to make sure that we\'re backwards compat with 2.6. We should add a option to only autosubscribe "events". And perhaps make this the default when we go to 3.2.'
268,'andreasohlund',"Please find sagas faster by eliminating unnecessary Query (with WaitForNonStaleResults)\n\r\n1. 90% of the time finding a Saga is spent in `Thread.Sleep(..)`. This actually results in 35% of our average message processing time\r\n\r\n2. The WaitForNonStaleResults is totally unnecessary, **if [UniqueProperty] is used**.\r\n\r\n3. NServiceBus should not allow `Get<T>(prop, val)` with non-unique properties (with configurable backwardscompat-switch)\r\n\r\n4. NServiceBus *might* allow multiple unique properties (which would be compatible to this patch)\r\n\r\n5. If NServiceBus in the future wants to support finding multiple sagas for a message, `WaitForNonStaleResults`shouldn't be part of the solution :-)"
267,'','Introduce support for second level retries\nAdd a satellite that will retries according to a configurable strategy before sending the message of the the error queue.\r\n\r\n* Modify the forwarding fault manager to forward to the sattelite\r\n    - Serialization errors go straight to the error q\r\n* Have the satellite listen to {endpointname}.errors\r\n* TBD- Strategies for retry?\r\n'
266,'andreasohlund',"Failures in satellites gets the wrong FailedQ address \nFailures in the Gateway, distributor or gateway can't be returned using returntosourcequeue.exe since they have the wrong FailedQ address. "
265,'johnsimons','Allow more powerful expressions with AllAssemblies\n- ignoring case\r\n- wildcard match using trailing dot\r\n- prefer to load from CurrentAppDomain instead of Assembly.Load\r\n- includes/excludes instead of only excludes\r\n\r\n**Example:**\r\n\r\n        AllAssemblies\r\n            .Matching("SomeAssembly") // NServiceBus. is included by default\r\n            .And("SomeOtherAssemblies.")\r\n            .Except("AsyncCtpLibrary")\r\n            .And("FluentAssertions")'
264,'johnsimons',"Make sure that the nservicebus dll's always are included when we scan\nThis will avoid these kind of issues:\r\n\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/13343\r\n\r\nand make sure that our own initializers always are being called."
263,'','Schedule(lambda).Every(Timespan);\n### Example usage\r\n\r\nHost:\r\n\r\nclass MyScheduledTask: INeedInitalization\r\n{\r\nConfigure.Instance.Schedule(x=>{Console.WriteLine("Hello world")}).Every(TimeSpan.FromMinutes(1));\r\n}\r\n\r\nSelf host:\r\nConfigure.With()\r\n...\r\n.Schedule(x=>{Console.WriteLine("Hello world")}).Every(TimeSpan.FromMinutes(1))\r\n.Schedule(x=>{Console.WriteLine("Hello world - 2")}).Every(TimeSpan.FromMinutes(2))\r\n\r\n\r\n### Implementation\r\n\r\n1. Store lambda and generate key (Guid.NewGuid())\r\n    * Kick the task off if the bus is started (to support adding task at runtime)\r\n2. Bus.Defer(new ScheduledTask{Key="guid for lambda"});\r\n3. IWantToRunWhenTheBusStarts - Iterate through tasks and start them\r\n4. Add a system convention for the ScheduledTask message to make sure its registered at all times\r\n5. Create a messagehandler that dispatches the lambdas\r\n   * Get the key and lookup the lambda\r\n   * Execute lambda on a new thread\r\n   * Set a new timeout (bus.defer()) right away\r\n   * Log a INFO if the task is not found\r\n6. Wrap the lambda and log the total time\r\n7. Traverse the callstack to get a name for the task when using the generic host\r\n8. Create a demo task in the TimeoutManager sample\r\n\r\n## Assumptions:\r\n\r\n* Task keys are regenerated on restarts so existing tasks will be discarded\r\n* State is not persisted across restarts\r\n* New thread means == no TX (user must create own scope if needed)\r\n* Every means that we defer right away. This means that tasks that takes a long time can "collide"\r\n\r\n## Future features\r\n* .After(TimeSpan.FromMinutes(1)) => executes the task 1 minute after the previous one finishes\r\n* .Named() to give the task a better name when self hosting\r\n* Add a IScheduledTask interface to make it even easier to create tasks in the future'
262,'','Remove the nuget key from the source\nFind a way to not have the nuget key in our source. Not sure how this will work with the TC build server. Perhaps we can add it in the build setting in Team City?\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/tools/NuGet/NuGetKey.txt'
261,'andreasohlund',"Make sure that we don't resolve components from the container before all config is done\nSpring doesn't support this so we need to make sure not to call .Build before all config is done.\r\n\r\nThis means that we need to introduce a INeedToRunWhenUserConfigurationIsDone so that we have a hook to set our defaults that will run after all other config code is done.\r\n\r\nThis also means that we need to refactor a few IWantToRunWhenConfiguration is complete to use the new interface"
260,'andreasohlund',"Refactor the configuration of the message mapper and xml serializer to not require multiple calls to RegisterSingleton\nSince spring doesn't support it we need to avoid it"
259,'','Refactor call for Address.Local.SubScope("Worker") in Distributor\nRefactor the call to Address.Local.SubScope("Worker")  at the following location:\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/distributor/NServiceBus.Distributor/Installers/WorkerInputInstaller.cs#L19'
258,'johnsimons','Move INeedInitalization and IWantToRunWhenTheBusStarts to NSB.dll\nTo make it easier for users to bootstrap their own things we should move INeedInitalization and IWantToRunWhenTheBusStarts to NSB.dll. For this to work we need to give them access to IConfigurer. We can pass this as a parameter to Init().\r\n\r\nSteps:\r\n\r\n1. Move interfaces to the core and make sure they are in the root NServiceBus namespace\r\n2. Add a the IConfigurer as a parameter to Init()\r\n3. Obsolete  IWantToRunAtStartup \r\n4. Add a warning if IWantCustomInitialization is used in other places than the endpoint config. Have the warning text guide users to INeedInitalization instead'
257,'','Add support for redirecting messages that would create new sagas to another endpoint\nIn order to better support moving sagas between endpoints when upgrading we should add explicit support for this in the core.\r\n\r\nWe can do this by adding the following configuration syntax:\r\n\r\n`     <RedirectNewSagasTo Enpoint="{address of new endpoint}"/> \r\n`\r\nUsing the above we can:\r\n\r\n1. Configure the saga finders to avoid starting new sagas for the specified saga types\r\n2. Implement and register a IHandleSagasNotFound that will forward the message to the relevant endpoint\r\n\r\nAlso add a powershell script that automates all this:\r\n\r\n1. Stop the endpoint\r\n2. Set the Redirect\r\n3. Start the endpoint\r\n4. Poll the saga storage \r\n5. When all sagas are completed => decommision the endpoint (stop? uninstall?)'
256,'','Register CompletionMessage as a system message\nAllow both compatibly with Version 2.6 and working in an unobtrusive mode.'
255,'','Saga.ConfigureMapping does allow multi dots on second parameter, but internal impl. doesn\'t support that\nIt is "allowed" to write code with multiple dots on the second expression argument like this:\r\n\r\n>     ConfigureMapping<MyMessage>(sagaData => sagaData.Prop, msg => msg.Sub.Prop);\r\n>\r\n> [ConfigureHowToFindSagaWithMessageDispatcher.cs#L17](https://github.com/NServiceBus/NServiceBus/blob/master/src/impl/Sagas/NServiceBus.Sagas.Impl/ConfigureHowToFindSagaWithMessageDispatcher.cs#L17)\r\n\r\nBut the internal implementation will just remember a `PropertyInfo` and then try to apply it to `TMessage` directly. That will result in  an `TargetException: Object does not match target type`.\r\n\r\n**Easy Solution**: Just set both to check for single dot in ConfigureHowToFindSagaWithMessageDispatcher.cs#L17\r\n\r\n**Better Solution**: Remember a Func against `TMessage` instead of the expression - the instance of `TMessage` will be available at runtime anyway.'
254,'andreasohlund','Clear timeouts for a saga leaves older timeouts in the cache\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/timeout/NServiceBus.Timeout.Core/DefaultTimeoutManager.cs#L78\r\n\r\nWe need to modify the logic to remove all timeouts regardless of what time they are set at.'
253,'','Introduce a "Satellite" concept \nThings like the TimeoutManager, Gateway, Distributor etc will be called a satellite so that we can:\r\n\r\n* Start the in a more controlled fashion\r\n* Restart them on failures\r\n* Stop the entire bus if they can\'t be restarted\r\n* Get the defaults for threading, errorhandling etc in a more controlled way\r\n* Make sure that errors are logged in a standardized way\r\n\r\nRelated issues:\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/issues/266'
252,'andreasohlund','Reverse the push and the add when processing a TimeoutMessage to avoid storing it in memory if the call to raven fails\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/timeout/NServiceBus.Timeout.Core/TimeoutTransportMessageHandler.cs#L43'
251,'johnsimons','Enable TCP connection sharing to improve raven performance\nAnd avoid:\r\n\r\nFrom time to time "Raven" gives up throwing System.Net.Sockets.SocketException (0x80004005): An operation on a socket could not be performed because the system lacked sufficient buffer space or because a queue was full 127.0.0.1:8080\r\n\r\n\r\nhttp://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.unsafeauthenticatedconnectionsharing.aspx\r\n\r\n\r\nTo set it:\r\ndocumentStore.JsonRequestFactory => req => ((HttpWebRequest)req).UnsafeAuthenticatedConnectionSharing = true;\r\n'
250,'','Make sure that the actual queue name is included in the exception when a queue is not found\nTest using Bus.Defer with a non existing timeout manager and a autosubscribe with a missing publisher queue'
249,'andreasohlund','Spring blows up with "Could not register object [Raven.Client.Document.DocumentStore] \n{"Could not register object [Raven.Client.Document.DocumentStore] under object name \'Raven.Client.IDocumentStore\': there\'s already object [Raven.Client.Document.DocumentStore] bound."}\r\n\r\nSeems like spring doesn\'t support multiple registrations even though the type is different'
248,'','Add a way for our advanced users to override the name of the inputqueue\nAdd a .DefineInputAddress(Action<< Address >>) to the configure project. Modify the address initalizer to use the function (defaulted to Configure.EndpointName)'
247,'johnsimons','Add a more gracefull way to shut the transport threads down.\nITransport.Shutdown() perhaps with a max time to wait before killing the threads.\n\nAlso make sure that we shutdown the satellite transports as well'
246,'andreasohlund','The timeout manager clear all timeouts for a saga on every timeout\nThis will cause future timeouts to be discarded for sagas that have more than one timeout set'
245,'',"Timeout handling issues\nI've been looking deeply into the timeout logic after we experienced some strange behavior.\r\n\r\nThe first issue was related to timeouts that expired before they were added. There is a timing issue causing some timeouts not to be deleted from the persistence store (raven) after they are fired. The result is that they are fired once more when the endpoint is restarted (since the timeouts are loaded from the store again). This is most likely related to stale indexes in raven.\r\n\r\nThere is also another issue: The current implementation does not properly support more than one timeout for each saga, but it does not fail when registering a second timeout. Actually the in-memory timeout manager does support it partially and will be able to handle multiple timeouts if there is no restart, but then every time a timeout expires, the persistence store will delete all timeouts for the saga, since IPersistTimeouts only implements a Remove(Guid sagaId).\r\n\r\nI'm not sure if these bugs can be fixed without a breaking change, so I have changed the implementation to handle these things as I think they should be."
244,'','Overriding Raven DB Persistence in a profile handler not working\nIf you create a new profile handler for integration/production to override Raven Persistence like so:\r\n\r\n```ruby\r\npublic class RavenProductionPersistenceSetup \r\n    : IHandleProfile<Production>\r\n{\r\n    public void ProfileActivated()\r\n    {\r\n        Configure.Instance\r\n            .RavenPersistence("MyProductionConnectionString");\r\n    }\r\n}\r\n```\r\n\r\nThe ProductionProfileHandler wipes out the custom connection string value here. The commits are just an example of how I would want to change the behavior, but since that project doesn\'t reference Raven, I didn\'t want to necessarily go that route.'
243,'johnsimons','Missing interfaces from NServiceBus.Interfaces package\nThe interfaces for NServiceBus.MessageMutator are still defined in NServiceBus.Core so they are not part of the NServiceBus.Interfaces package.'
242,'','Support serializing IEnumerable<T> when the list is empty\nThis pull never got into 3.0 https://github.com/NServiceBus/NServiceBus/commit/672595ec32cda2ba8008c336a0bc398c35916123'
241,'johnsimons','NSB should handle critical errors more gracefully\nThe default behavior now is:\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/hosting/NServiceBus.Hosting.Windows/WindowsHost.cs#L46\r\n\r\n        private void OnCriticalError()\r\n        {\r\n            Thread.Sleep(10000); // so that user can see on their screen the problem\r\n            Process.GetCurrentProcess().Kill();\r\n        }\r\n\r\nThe `so that user can see on their screen the problem` is already a small step towards developer-friendliness.\r\n\r\nI\'d suggest to go further, towards more fault-tolerance and some customer-friendliness :-)\r\n\r\nSee #238, why the current behavior is an issue with regards to DTC-transactions.\r\n\r\n1. Set NumberOfWorkerThreads to 0 to prevent the endpoint from doing more work\r\n2. Wait a configurable TimeSpan (rather 30 secs); "constantly" looking, if "CurrentNumberOfWorkingThreads" hits 0\r\n     * when a critical error happens at start time, CurrentNumberOfWorkingThreads will be 0 and the process will terminate immediately...\r\n3. If it doesn\'t hit 0, abort them individually.\r\n4. Kill the process. Maybe put a thread dump somewhere.'
240,'','Configure some temporary logging before we scan\nWe have no logging setup before we scan so any scanning errors never gets logged. Another option is to do a console.writeline instead'
239,'andreasohlund',"Stop using the childcontainers to manage the raven UoW since Ninject doesn't support them\nNot sure we should do this. Just putting it here as a placeholder. Spring dosn't support this either. So we need to fix this or remove support for sub-standard containers"
238,'andreasohlund','TimeoutRunner kills the endpoint when Poll fails\nWhen the timeout runner fails polling the raven db, it will just KILL the whole endpoint. This can leave to dtc transactions aborting ungracefully. (Left in "only failed to notify")\r\n\r\nInstead, the Timeout manager should just retry later; maybe, after a retry fail count somehow flag the error.\r\nI\'m not really sure how it could flag the error in a good way.\r\n\r\nIf the polls were triggered by messages, it would just apply the "default" fail-behaviour. Maybe Bus.SendLocal is an option. The message would be something like "FireTimeouts { UpUntilUtc = DateTime.UtcNow }".\r\n\r\n(I\'m running on build 2098, which has #211 yet applied => thread.IsBackground=true)'
237,'andreasohlund','Upgrade to Autofac 2.6.1.841\n'
236,'','Make callbacks V3 compatible with V2.6\n'
235,'andreasohlund',"Auto subscribe for sagas doesn't work when handling the parent class of a event\nhttps://twitter.com/#!/iceiony/statuses/182149524230373376"
234,'','Fixed a test with array of strings. Added array of datetimes\nMinor stuff related to #226'
233,'','Map array of ints and array of strings as serializable properties in the nhibernate saga persister \n\r\nFixes issue #226'
232,'andreasohlund','Message Deferment throws exception on current message.\nI may decide to defer a message while I\'m handling it.  For example:\r\n\r\n```csharp\r\npublic void Handle(HireEmployee cmd)\r\n{\r\n  if (command.HireDate > DateTime.Now)\r\n  {\r\n    _bus.Defer(command.HireDate, cmd);\r\n    return;\r\n  }\r\n\r\n  var employee = Employee.Hire(cmd.EmployeeId, cmd.Name, cmd.HireDate);\r\n  this._repository.Add(employee);\r\n}\r\n```\r\n\r\nHowever, it throws an InvalidOperationException "Cannot change headers on the message being processed."\r\n\r\nI can only defer the message successfully if I clone it first.'
231,'','Prevent erroneous Pub/Sub warning messages.\nChange .Publish so that AssertIsValidForPubSub uses the actual type of the first message. This is better than using typeof(T) because the caller may have boxed the message in an Object. This prevents the warning that is fired erroneously when publishing from an EventStore dispatcher. (See recent topic "Dispatching events to NServiceBus from EventStore" on the NServiceBus yahoo group.)'
230,'andreasohlund','Headers are not thread safe, casing sagas to not be found\nWhen running multiple threads the header management fails to return the correct headers. This causes the saga id to become null if a new message is starting to process. This causes the saga header id finder to get a null saga id and not find the saga.'
229,'','Support 3.0 endpoints subscribing to 2.6 endpoints\nIn order to help users upgrading from 2.X to 3.0 we should support 3.0 endpoints being subscribed to 2.6 endpoints'
228,'','Upgrade to RavenDB 888\nAnd change our projects to use the Raven.Client nuget where applicable'
227,'andreasohlund',"Warnings are displayed when sending timeouts\nRemove the warning that ICommand should be used when doing bus.Send since we really can't know if the users are doing a request response. We can consider putting it back in if we ever introduce  IRequest/IResponse interfaces"
226,'','ArgumentException when saga contains array property (NHibernate).\nAs per http://tech.groups.yahoo.com/group/nservicebus/message/13212\r\n\r\nAdd `public virtual int[] Foo { get; set; }` to `NServiceBus.SagaPersisters.NHibernate.Tests.TestSaga` and run any of the unit tests, e.g. `When_automapping_sagas`, latest NHibernate will blow up with `System.ArgumentException : Interface maps for generic interfaces on arrays cannot be retrived`.'
225,'andreasohlund','Add a Action<T> overload to RequestUtcTimeout to improve the syntax\n'
224,'johnsimons','Add support for child containers to the Ninject builder\nhttp://tech.groups.yahoo.com/group/nservicebus/message/13153'
223,'andreasohlund','Remove enums and other non-reference types from scanning\nThis can be done after we have applied the system conventions and any user convention'
222,'andreasohlund','Make SynchronizedInvoker inherit from ContextBoundObject\n'
221,'','Make  SynchronizedInvoker inherit from ContextBoundObject\n'
220,'andreasohlund','Possible bug with headers in unit tests\nhttp://tech.groups.yahoo.com/group/nservicebus/message/13018'
219,'',"Multiple receivers in single process\nI've wrote question about that in stackoverflow, but still haven't received clear answer (I'm offering bounty on it right now, also it is different case, why I would need several receivers in single process - http://stackoverflow.com/q/9411638/212121), so I'll try to describe situation and may be my approach is wrong in the first place.\r\nSo situation is this:\r\nThere is publisher, which generates events on product information change. \r\n\r\nAnd then there are several external sales channels, where product updates must be pushed (let's say amazon.com, ebay.com). \r\n\r\nEach channel is separate event subscriber, and all channels are in single process (although different threads, so they can run concurrently). So it turns out, that each channel needs own receiver, because if there would be single receiver and on event it would loop through channels and process event data, would be a problem if single channel fails - let's say amazon.com would not accept requests, ebay would not receive updates also.\r\n\r\nTo have all channels as separate processes also is not a solution, because we have double digit of them, management and deployment all as separate processes would be ... not very sweet."
218,'','Enhance ReturnToSourceQueue to view error queues\' messages content\nIf ReturnToSourceQueue is started with the /info switch, it should ask for error queue and message Id (or all), and then "dump" the error queue message/s content.\r\n\r\nIt should output (to the console):\r\nMessageId\r\nType of message\r\nReason of failure (exception is in the header).'
217,'',"Add documentation/self explaining exception to With usage\nDocumentation about using With is quite vague, as long as it does not specify, what is minimum set of types needed to pass to run:\r\nhttp://nservicebus.com/GenericHost.aspx\r\n\r\nIn 2.6 version I found, that Handler type, Event type and CompletionMessage type were enough to work, now in 3.0 looks like CompletionMessage isn't available anymore, so I'm trying to pass only Handler and Event types:\r\n\r\n\r\n```\r\n private static IBus GetBus<THandler, TEvent>()\r\n        {                        \r\n            var bus = Configure\r\n                .With(new List<Type>\r\n                                         {\r\n                                             typeof(THandler), \r\n                                             typeof(TEvent)                                             \r\n                                         })              \r\n                .Log4Net()\r\n                .DefaultBuilder()\r\n                .XmlSerializer()\r\n                .MsmqTransport()\r\n                .IsTransactional(true)\r\n                .PurgeOnStartup(false)\r\n                .UnicastBus()\r\n                .LoadMessageHandlers()                \r\n                .ImpersonateSender(false);                        \r\n\r\n            return bus.CreateBus().Start();\r\n        }\r\n```\r\n\r\nand that gives null reference error, which is somewhere in UnicastBus class, IBus IStartableBus.Start(Action startupAction) method\r\n```\r\nif (!DoNotStartTransport)\r\n                    transport.Start(InputAddress);\r\n```\r\ntransport is null.\r\n\r\nIf I'm running without specifying concrete types (just With()), it runs fine, so it looks like problem is in missing type?"
216,'andreasohlund','Impersonation blows up if the identity passed in the headers is null\nhttp://stackoverflow.com/questions/9685771/nservicebus-impersonation-issue-after-upgrading-from-2-6-to-3-0\r\n\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/13140'
215,'','NServiceBus.Tools 3.0.0 are not signed dlls\nThe NServiceBus.Tools.Management.Errors.ReturnToSourceQueue.dll in the NServiceBus.Tools nuget package is not signed using the NServiceBus key.'
214,'andreasohlund','Testing sagas that use interface messages fails\nTo reproduce just run the tests in the manufacturing sample'
213,'andreasohlund','Make the 3.0 timeoutmanager compatible with 2.6 timouts\n'
212,'andreasohlund','Inherited sagas causes timeouts to blow up\nhttp://tech.groups.yahoo.com/group/nservicebus/message/13123'
211,'','Modified TimeoutRunner to execute on a background thread\nHi guys,\r\n\r\nthe TimeoutRunner starts the polling thread on a foreground thread. This prevents applications like the Starbucks sample from shutting down.\r\n\r\nJust like the transport threads, the timeout runner should execute on a background thread.\r\n\r\nThanks,\r\nAlex'
210,'andreasohlund',"ReturnToSourceQueue doesn't work for clustered MSMQ\nhttp://tech.groups.yahoo.com/group/nservicebus/message/13109"
209,'',"Create a new NServiceBus.Interfaces package\nCreate a new package that only contains the NServiceBus.dll, don't change any of the other packages to depend on it just create a new one. This allows users to use nuget to reference NSB in their message projects"
208,'','Add DataBus to NServiceBus.Testing\nI added the following line in the following method to get the functionality going in my dev environment\r\n\r\nprivate static IUnicastBus MockTheBus(MockRepository mocks)\r\n{\r\n   ...\r\n   Configure.Instance.Configurer.RegisterSingleton<IDataBus>(mocks.Stub<IDataBus>());\r\n   ...\r\n}'
207,'','Allow a better abstraction that allows developers to hook into "debug time warnings\nRight now we do if(Debugger.IsAttached) throw... all over the place'
206,'','Updating NServiceBus.Host-CI package adds MessageForwardingInCaseOfFaultConfig to config file. \nI have just updated my NServiceBus.Host-CI assemblies from 3.0.2038 to 3.0.2046, which also made a modification to my configuration file. \r\n\r\nI found it had added ```<MessageForwardingInCaseOfFaultConfig ErrorQueue="error" />``` to the end of the file, even though there was already a config section for  ```<MessageForwardingInCaseOfFaultConfig ErrorQueue="urdms.error" />``` in the file.\r\n\r\n'
205,'',"Testing framework does not enforce message rules (ICommand)\nHello,\r\n\r\nWe're currently undergoing an upgrade of our solution to V3 and have found a potential missing feature in the testing framework, specifically related to new ICommand message type. The new types are there to enforce the architectural principals of the framework, and this is why we are updating our message types. However, after mistakenly labelling one of our internal messages with ICommand, rather than leaving it as IMessage, we we getting the following exception.\r\n\r\n\r\n2012-02-28 11:29:30,084 [Worker.9] WARN  NServiceBus.Unicast.UnicastBus [(null)] <(null)> - CreateSiteRequestHandler failed handling message.\r\nSystem.InvalidOperationException: Reply is not supported for Commands. They should be be sent to their logical owner using bus.Send\r\n\r\n\r\nThis was only apparent at runtime. The tests we have for the handler passed without fail, which is why we didn't catch it before. Should this not be something the testing framework catches?"
204,'',"Hint how to fix NinjectObjectBuilder\nWithout this check public properties with a none public setter are considered as valid targets for property injection even if Ninject is configured to inject only public members. This ends in a null reference in Ninject.\r\n\r\nNOTE: I didn't test this code. I'm just giving here a hint how to fix the problem due to a bug report on the Ninject project. I leave verification and adjustment of the unit tests to the NServiceBus maintainers.\r\n\r\nRelated information:\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/12853\r\nhttp://stackoverflow.com/questions/9484789/nservicebus-objectbuilder-ninject-critical-bug"
203,'',"Exception when using the NinjectBuilder\nThe following exception is thrown when a message is received, the message mutators and handlers are still called so I don't know if this is actually something that we should be concerned about or nor.\r\n\r\nWARN  NServiceBus.Unicast.Transport.Transactional.TransactionalTransport - Failed raising 'transport message received' event for message with ID=aecf8375-899f-464a-8a22-9bf056be1c0a\\63494\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Ninject.Injection.DynamicMethodInjectorFactory.EmitMethodCall(ILGeneratoril, MethodInfo method) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Injection\\DynamicMethodInjectorFactory.cs:line 130\r\n   at Ninject.Injection.DynamicMethodInjectorFactory.Create(PropertyInfo property) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Injection\\DynamicMethodInjectorFactory.cs:line 78\r\n   at Ninject.Planning.Strategies.PropertyReflectionStrategy.Execute(IPlan plan)\r\n in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Planning\\Strategies\\PropertyReflectionStrategy.cs:line 61\r\n   at Ninject.Planning.Planner.<>c__DisplayClass3.<GetPlan>b__1(IPlanningStrategy s) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Planning\\Planner.cs:line 68\r\n   at Ninject.Infrastructure.Language.ExtensionsForIEnumerableOfT.Map[T](IEnumerable`1 series, Action`1 action) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Infrastructure\\Language\\ExtensionsForIEnumerableOfT.cs:line 23\r\n   at Ninject.Planning.Planner.GetPlan(Type type) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Planning\\Planner.cs:line 68\r\n   at Ninject.Activation.Providers.StandardProvider.Create(IContext context)\r\n in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 74\r\n   at Ninject.Activation.Context.Resolve() in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Activation\\Context.cs:line 157\r\n   at Ninject.KernelBase.<Resolve>b__7(IContext context) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\KernelBase.cs:line 375\r\n   at System.Linq.Enumerable.<>c__DisplayClass12`3.<CombineSelectors>b__11(TSource x)\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source)\r\n   at Ninject.Planning.Targets.Target`1.GetValue(Type service, IContext parent)\r\n in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Planning\\Targets\\Target.cs:line 179\r\n   at Ninject.Planning.Targets.Target`1.ResolveWithin(IContext parent) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Planning\\Targets\\Target.cs:line 147\r\n   at Ninject.Activation.Providers.StandardProvider.GetValue(IContext context, ITarget target) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 97\r\n   at Ninject.Activation.Providers.StandardProvider.<>c__DisplayClass2.<Create>b__1(ITarget target) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 81\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Ninject.Activation.Providers.StandardProvider.Create(IContext context)\r\n in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 81\r\n   at Ninject.Activation.Context.Resolve() in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Activation\\Context.cs:line 157\r\n   at Ninject.KernelBase.<Resolve>b__7(IContext context) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\KernelBase.cs:line 375\r\n   at System.Linq.Enumerable.<>c__DisplayClass12`3.<CombineSelectors>b__11(TSource x)\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)\r\n   at Ninject.ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Syntax\\ResolutionExtensions.cs:line 151\r\n   at NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.<>c__DisplayClass5.<BindAliasesOfComponentToComponent>b__3(IContext ctx)\r\n   at Ninject.Activation.Providers.CallbackProvider`1.CreateInstance(IContext context)\r\n in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Activation\\Providers\\CallbackProvider.cs:line 45\r\n   at Ninject.Activation.Provider`1.Create(IContext context) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Activation\\Provider.cs:line 39\r\n   at Ninject.Activation.Context.Resolve() in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\Activation\\Context.cs:line 157\r\n   at Ninject.KernelBase.<Resolve>b__7(IContext context) in c:\\Projects\\Ninject\\Maintenance2.2\\ninject\\src\\Ninject\\KernelBase.cs:line 375\r\n   at System.Linq.Enumerable.<>c__DisplayClass12`3.<CombineSelectors>b__11(TSource x)\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.<NServiceBus.ObjectBuilder.IBuilder.BuildAll>d__1`1.MoveNext()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder childBuilder, TransportMessage msg)\r\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e)\r\n   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg)"
202,'','Timeout fails if the timeout object does not inherit from ITimeoutState\nNServicebus does not throw any errors when a timeout occurs and the timeout state does not inherit from ITimeoutState. The timeout method is not called and the timeout is cleared from storage. Should be a build constraint at compile or an error thrown on the first run of the saga.\r\n\r\n'
201,'','If the unobtrusive message definition throws an exception, the exception is not logged\nInstead another exception is logged that says that the configuration is not complete, which is confusing. \r\n\r\n'
200,'','ReturnToSourceQueue does not seem to be backwards compatible with 2.6\nIt only checks the headers when determining which queue to send the message back to.\r\n\r\nIf no original queue name is found in the headers, it should also check the label if the message comes from a 2.x endpoint.'
199,'','Fix to saga testing\nAdded support for scenario where more than one message type is expected for timeout'
198,'','When exiting a unit of work, first check for the existance of a session before saving changes\n'
197,'','If subscription storage is defined, do not override by configuring Raven\n'
196,'','Logging AsA_Server when using AsA_Publisher role\n'
195,'',"Azure host process debug build is x86-only\nThe NServiceBus.Hosting.Azure.HostProcess.exe project file is set to build as  'x86' in the debug configuration.  This causes the Azure compute emulator to blow up trying to load it.  It should be set to 'Any CPU' instead.  The release configuration appears to be okay."
194,'johnsimons','Re enable multi gets in the Raven sub storage\nWhen we upgrade to the next stable release of Raven we should put the multiget back in to get better performance. Was disabled in RC4 since there is a bug in Raven that blows up when you do a multi load with non existing ids'
193,'',"Added ExpectNotSend and ExpectNotSendLocal to test DSL\nHi there,\r\n\r\nwe hit a problem when we tried to validate that a message was not sent using the test DSL.\r\n\r\nThe DSL has a ExpectNotPublish but there is no corresponding ExpectNotSend. This commit adds those.\r\n\r\nIt's already been mentioned in a previous pull https://github.com/NServiceBus/NServiceBus/pull/30\r\n\r\nCheers,\r\nAlex"
192,'johnsimons','Wrap the raven IDocumentStore\nTo avoid any risk for conflicts (castle use a id generation scheme that might cause issues). We should wrap the store behind a \r\n\r\nNServiceBus.Persistence.IPersistenceSessionFactory to avoid any issues in the future.\r\n\r\nRelated to: https://github.com/NServiceBus/NServiceBus/issues/190'
191,'','Don\'t call infrastructure installers unless explicitly asked for\nModify the host to:\r\n\r\nWith no endpoint config:\r\n \r\nNServiceBus.Host.exe /installInfrastructure  => installs all infra( this is the "new" RunMeFirst.bat)\r\n \r\nNServiceBus.Host.exe /install  => exception\r\n\r\nWith endpoint config:\r\n \r\nNServiceBus.Host.exe /installInfrastructure  => installs all needed infra, raven if default settings are used, Msmq if the msmqtransport is used. Dtc if endpoint is transactional etc etc\r\n \r\nNServiceBus.Host.exe /install => Always just runs the regular installers'
190,'andreasohlund','Castle builder blows up when you try to register your own IDocumentStore\nWorks for the other builders. Castle seems to thing that the internalized store is the same as the external'
189,'',"NHMessageModule: Don't call rollback in HandleError() since it is called outside the transaction\nThis makes a rollback pointless and also causes the connection to be corrupted and unusable whenever someone fetches it again from the connection pool."
188,'andreasohlund','Add a profile that run the distributor exclusively\n'
187,'','Properties of attributes at generation of types of messages aren\'t copied\nFor a solution of a problem - it is necessary to modify https://github.com/NServiceBus/NServiceBus/blob/master/src/impl/messageInterfaces/NServiceBus.MessageInterfaces.MessageMapper.Reflection/MessageMapper.cs\r\nline 207, having replaced a method code "AddCustomAttributeToProperty"\r\nprivate void AddCustomAttributeToProperty(object customAttribute, PropertyBuilder propBuilder)\r\n\t\t{\r\n\t\t\tvar classConstructorInfo = customAttribute.GetType().GetConstructor(new Type[] { });\r\n\t\t\tif (classConstructorInfo == null)\r\n\t\t\t{\r\n\t\t\t\tLogger.Warn(string.Format("Ignoring attribute \'{0}\' on property {1}.{2} as it has no parameterless .ctor.", customAttribute.GetType(), propBuilder.DeclaringType.Name, propBuilder.Name));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar ignoredProperties = new[] { "TypeId" };\r\n\r\n\t\t\tvar propertyDescriptors =\r\n\t\t\t\t\t customAttribute.GetType()\r\n\t\t\t\t\t\t\t  .GetProperties(BindingFlags.Instance | BindingFlags.Public)\r\n\t\t\t\t\t\t\t  .Where(propertyInfo => !ignoredProperties.Contains(propertyInfo.Name))\r\n\t\t\t\t\t\t\t  .Select(\r\n\t\t\t\t\t\t\t  propertyInfo =>\r\n\t\t\t\t\t\t\t  new\r\n\t\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t\t  PropertyInfo = propertyInfo,\r\n\t\t\t\t\t\t\t\t  Value = propertyInfo.GetValue(customAttribute, new object[] { })\r\n\t\t\t\t\t\t\t  })\r\n\t\t\t\t\t\t\t  .Where(descriptor => descriptor.Value != null);\r\n\r\n\t\t\tforeach (var propertyDescriptor in propertyDescriptors)\r\n\t\t\t{\r\n\t\t\t\tif (!propertyDescriptor.PropertyInfo.CanWrite)\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow new NotSupportedException(\r\n\t\t\t\t\t\t\tstring.Format(\r\n\t\t\t\t\t\t\t\t\t "Attribute {0} is not supported. Setter for property {1} is not found.",\r\n\t\t\t\t\t\t\t\t\t customAttribute.GetType(),\r\n\t\t\t\t\t\t\t\t\t propertyDescriptor.PropertyInfo.Name));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar customAttributeBuilder = new CustomAttributeBuilder(\r\n\t\t\t\t\t classConstructorInfo,\r\n\t\t\t\t\t new object[] { },\r\n\t\t\t\t\t propertyDescriptors.Select(descriptor => descriptor.PropertyInfo).ToArray(),\r\n\t\t\t\t\t propertyDescriptors.Select(descriptor => descriptor.Value).ToArray());\r\n\r\n\t\t\tpropBuilder.SetCustomAttribute(customAttributeBuilder);\r\n\t\t}'
186,'andreasohlund',"Raven store is disposed when using StructureMap\nThe documentstore seems to be disposed even though its a singeton.\r\n\r\nThe SM documenation confirms that it shouldn't be disposed\r\nhttp://codebetter.com/jeremymiller/2010/02/10/nested-containers-in-structuremap-2-6-1/\r\n"
185,'',"Fix issues with Manufacturing OrderSaga test\nHi,\r\n\r\nA couple of proposed fixes\r\n\r\n1) The tests were throwing an exception because the MessageCreator property in the ExtensionMethods class hadn't been set. After a few different attempts, I settled on the Test.Initialize() method being the best place to set this.\r\n\r\n2) The tests were then failing because the ExpectSend wasn't occuring(instead, Bus.Defer was being called) - so changed the expectation in the tests to be ExpectTimeoutToBeSet.\r\n\r\nTests are now running successfully (for me at least :p)\r\n\r\nSorry about there being a lot of commits - still getting used to Git...\r\n\r\nAlso, I've already put in the request but against the develop branch - not sure if that was the right thing to do?\r\n\r\nCheers\r\n\r\nRichard\r\n"
184,'','Problems accessing the input queue when self hosting will cause an infinite loop\nWe need to make the default OnError action set the number of worker threads to 0'
183,'','Subscription Message from 2.6 is Unsubscribe in 3.0.0-beta6\nWhen a 2.6 endpoint subscribes to a 3.0 endpoint, the message intent is being parsed as Unsubscribe instead of Subscribe. I noticed in the MessageIntentEnum of 2.6, the first enum value is "Init", whereas in 3.0 "Init" has been removed. Renumbering in 3.0 should keep backwards compatibility, i.e. start Send at 1.'
182,'andreasohlund','Msmq subscription storage blows up when you specify a explicit queue name\nhttp://stackoverflow.com/questions/8912954/msmqsubscriptionstorageconfig-in-nservice-bus-3-beta'
181,'','Add a option to the AutoFac builder that will export all registered types to MEF\nhttp://code.google.com/p/autofac/wiki/MefIntegration'
180,'',"Fix issues with Manufacturing OrderSaga test\nHi,\r\n\r\nA couple of proposed fixes\r\n\r\n1) The tests were throwing an exception because the MessageCreator property in the ExtensionMethods class hadn't been set.  After a few different attempts, I settled on the Test.Initialize() method being the best place to set this.\r\n\r\n2) The tests were then failing because the ExpectSend<TimeoutMessage> wasn't occuring(instead, Bus.Defer was being called) - so changed the expectation in the tests to be ExpectTimeoutToBeSet.\r\n\r\nTests are now running successfully (for me at least :p)\r\n\r\nSorry about there being a lot of commits - still getting used to Git...\r\n\r\nCheers\r\n\r\nRichard"
179,'','When the worker profile is used, a master node config is mandatory\nModify the profilehandler to make sure that:\r\n\r\n1. There is a master node specified\r\n2. That the masternode != the local machine'
178,'',"Modifications to NServiceBus.Testing.Helper.cs (discovered when writing tests for a Saga)\nHi,\r\nI was experiencing a couple of issues when testing a saga.\r\n1) If I had something like;\r\n               .ExpectSend<FirstMessage>( m => m.SagaId == sagaId && m.Meta == someMeta)\r\n               .ExpectSend<SecondMessage>( m => m.SagaId == sagaId && m.Description == description )\r\nThe Expect.Call expectation was failing because it couldn't distinguish between the two different message types. To fix this, I altered the call to use the Arg<T>.Is.Any instead of passing in null.\r\n2) When using the ExpectReplyToOrginator() method, it was throwing an exception because the return type hadn't been specified. As the method is a void return, I added that to the setup.\r\n\r\nHope this makes sense - it's my first dabble with Git/NServiceBus and RhinoMock, so I'm well aware I might have got some bits wrong. My tests are at least passing now :)\r\nCheers\r\nRichard \r\n"
177,'','Make the inmemory saga persister honor the [Unique] attribute\nAdd support for the [Unique] attribute on properties. \r\n\r\nSupport multiple properties being unique if possible'
176,'',"No permission for queue causing process kill\nWhen there is no permission to queue, NServiceBus is killing current process. It isn't so good because if I have wcf or web application hosted on IIS that cause Application Pool stop and shutdown all web sites running under that pool. I think that NServiceBus shouldn't decide if I want to kill my application (at least in self hosted scenario) - it's not NServiceBus responsibility."
175,'','InMemorySagaPersister causes InvalidCast exception\nIn issue #77 a bug was fixed in the in-memory saga persister lookup by property to verify that the looked up value can actually be cast over to the required type.\r\n \r\nI believe a related fix needs to be made to the lookup by sagaId GUID as well.  In the app I’m working on I’ve got two sagas, both of which use timeouts.  When the timeout message arrives it uses the GUID based version of the Get function, which just blindly casts the found saga data over to T.  Looking at the code both in the 2.5 branch and the develop branch, this issue appears to exist in both places.\r\n \r\nChanging the lookup to something along the lines of this should fix the problem:\r\n\r\n```C# \r\nT ISagaPersister.Get<T>(Guid sagaId)\r\n    {\r\n        ISagaEntity result;\r\n        data.TryGetValue(sagaId, out result);\r\n \r\n        if (result != null && result is T)\r\n            return (T)result;\r\n        \r\n        return default(T);\r\n    }'
174,'','Issue resolving Unity 2 container using NServiceBus 3 object builder\nhttp://stackoverflow.com/questions/8651005/issue-resolving-unity-2-container-using-nservicebus-3-object-builder\r\n'
173,'','JSON Optimization\nI found out that using Assembly.GetName() is quite expensive and found an easy way to work around it. If there is a large number of type bindings, for example when serializing polymorphic types, the performance gain is staggering.\r\n\r\nThe performance of the json serializer is now comparable to the xml serializer. I made some (probably completely unscientific and biased) benchmarks:\r\n\r\n10000 messages, each message is an array of 100 messages:\r\n\r\nJSON: Serialize: 27.122 sec. Deserialize: 28.865 sec. Total:  55.987 sec. Size: 455,040,000 bytes\r\nXML:  Serialize: 39.368 sec. Deserialize: 8.1784 sec. Total: 121.152 sec. Size: 553,960,000 bytes\r\n\r\n50000 messages, each message is a single message:\r\n\r\nJSON: Serialize: 1.823 sec. Deserialize: 1.628 sec. Total: 3.451 sec. Size: 22,800,000 bytes\r\nXML:  Serialize: 2.283 sec. Deserialize: 5.918 sec. Total: 8.201 sec. Size: 37,400,000 bytes\r\n\r\nIn most cases, json is both faster and yields smaller payloads. Also, when looking at the process in the task manager, it seems like the memory footprint is smaller, around 10-20%.'
172,'','Turn off indentation in the json serializer\nThis will reduce size of messages by up to 30% '
171,'','Fixed raven saga persister so that it can correctly find the saga data document by id\nNote: This issue prevents the Raven saga persister from working in the current build.\r\n\r\nThe root cause of the problem was that original code was making the following call to RavenDB:\r\n/indexes/dynamic/AppHarborProvisioningSaga?query=Id%253Afb1940d3-9b96-4b68-b8fa-47fd79db9cea&start=0&pageSize=128&aggregation=None\r\n\r\nThe problem here is that the document name was not being included in the query parameter. Changing the RavenSagaPersister to use .WhereEquals() produces the following call to RavenDB:\r\n/indexes/dynamic/AppHarborProvisioningSaga?query=__document_id%253Aappharborprovisioning\r\nsaga%252Fea6220ec-496b-4d6e-ad00-98a624e3d265&start=0&pageSize=128&aggregation=N\r\none\r\n\r\nNotice how in the latter example the document name "appharborprovisioningsaga" is included in the query parameter.\r\n'
170,'','Force the log4net dependency to version 1.2.10\nThe nuspec files for NServiceBus were being generated with the dependency on log4net as "1.2.10". On Dec 21, version 1.2.11 of log4net was released, which caused NuGet to automatically grab it as the latest version.\r\n\r\nThis was causing runtime issues since other libraries (like Topshelf) are still using log4net 1.2.10.\r\n\r\nI changed the CreatePackages target in default.ps1 to specify the log4net version as "[1.2.10]", which should resolve the problem.'
169,'','Address.SubScope is creating invalid queue names for azure\nWhen either the gateway or timeout manager is used the default name is EndpointName.SubScope("XYZ") this creates addresses like MyServer.Timeouts and this is not a valid format for azure. We need a way to clean up the addresses.\r\n\r\nCorrection: It\'s the Gateway that is hardcoded to use MSMQ, change this to pickup the IReceiveMessages that is available in the container'
168,'','Unable to use Sagas in "unobtrusive mode"\nWhen using conventions to define messages, commands, and events, you get the following exception when trying to mark a saga as complete:\r\nType NServiceBus.Saga.TimeoutMessage was not registered in the serializer. Check that it appears in the list of configured assemblies/types to scan.\r\n\r\nThis problem goes away if you manually include a rule for the NServiceBus.Saga.TimeoutMessage type in the DefiningMessagesAs() configuration member.\r\n\r\nPresumably, clients shouldn\'t be forced to define a built-in NServiceBus type as a message when using the unobtrusive method of defining messages.\r\n\r\nBuild: 3.0.1828.0\r\n'
167,'','Transaction isolation set on bus is not honored in NH transaction in UoW (2.5)\nIn the message module for the saga persister, the transaction isolation level is always set to sql server default (usually  read committed). This is a serious bug since the user believes he uses repeatable read if he sets it on the bus when in fact he is using read committed.\r\n\r\nThis pull request fixes this by fetching the isolation level from the transaction scope before starting the NH transaction.\r\n'
166,'','Transaction isolation set on bus is not honored in NH transaction in UoW (3.0)\nIn the unit of work for the saga persister, the transaction isolation level is always set to sql server default (usually  read committed). This is a serious bug since the user believes he uses repeatable read if he sets it on the bus when in fact he is using read committed.\r\n\r\nThis pull request fixes this by fetching the isolation level from the transaction scope before starting the NH transaction.\r\n'
165,'','Improvements to the Json serializer\nThe following changes have been made:\r\n\r\n1. Get rid of the $messagetype property and use standard $type to determine object type\r\n2. Instead of using a custom converter with various hacks, use a custom SerializationBinder for serialization and a custom ContractResolver for deserialization.\r\n3. Serialize dates in Iso format and retain DateTime kind\r\n4. Added some more tests (or actually, more asserts)\r\n5. Updated Json.Net to 4.0.5 (required for the ContractResolver to work)'
164,'','Hide Bus property from Sage<T>\nI started of with a IHandleMessages<T> and added an IBus Bus { get; set}  property, so that I could access the Bus instance in my handler. After that I changed the implementation/inheritance to Sage<T> but forgot to remove the property.\r\n\r\nAs far as I know, Visual Studio never showed me a warning. That\'s my personal problem. However, if Visual Studio does, it gives you a warning that you hide the inherited Bus property. Because I never saw or notice the warning, my ReplyToOriginator did not work. Took me some time to figure it out! :)\r\n\r\nHere\'s more info on the subject:\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/12339\r\n\r\nPerhaps you could provide a better warning, instead of a "Null reference exception", because it\'s deep down into nServiceBus and we have no way of figuring out what\'s happening.\r\n\r\nThanks'
163,'',"Host forces dependency on MSMQ service\nThe host sets up a service dependency on MSMQ. This is not ideas for uses who are not using MSMQ transport and don't want to install MSMQ service. \r\n\r\nIdeally this should be configurable."
162,'',"Full duplex does not work when audit is turned on\nRegistered callback does not execute on the client, when the server has audit forwarding turned on. (v 2.6.0.1504)\r\nThis can be reproduced by enabling auditing on the server in the FullDuplex sample.\r\n(This could have something to do with the message id returned. With audit enabled, it's one off, but without audit it's two off...)\r\n"
161,'andreasohlund',"MessageModule.Begin is not called when message gets forwarded to the error queue\nWill only be fixed on 3.0 since it's not deemed to be a critical bug"
160,'','Make the raven sagapersister support the [Unique] attribute\n'
159,'','UnitOfWorkManager.End must be called inside the transaction scope\n'
158,'',"Remove the use of common assembly info and use the raven strategy of rewriting the AssemblyInfo.cs files for each project instead\n\r\n\r\nSee https://github.com/ravendb/ravendb/blob/master/default.ps1 for reference\r\nNot the use of the special buildnr (13) to make sure that local build won't create new the property files\r\nDo a global search replace in the .csprojs to remove the commonassemblyinfo.cs link"
157,'','RavenSagaPersister can now retrieve saga-entities by Id\nThis pull-request is for Issue #156\r\n\r\n```C#\r\npublic T Get<T>(Guid sagaId) where T : ISagaEntity\r\n{\r\n      using (var session = Store.OpenSession())\r\n      {\r\n          return session.Load<T>(sagaId.ToString());\r\n      }\r\n }\r\n```\r\n\r\nbecomes \r\n\r\n```C#\r\npublic T Get<T>(Guid sagaId) where T : ISagaEntity\r\n{\r\n      using (var session = Store.OpenSession())\r\n      {\r\n          return session.Load<T>(sagaId);\r\n      }\r\n }\r\n```\r\n\r\nThe persistence unit-tests now succeed, and have been un-ignored.'
156,'','RavenSagaPersister cannot Get by Id\nThe RavenSagaPersister cannot retrieve SagaEntities by their Guid Id.\r\n\r\nThe tests relating to persisting and retrieving a saga-entity are currently ignored, as they fail when attempting to retrieve the persisted entity.'
155,'','Exclusion of Raven types should be more specific\nThe string used to exclude Raven types was "raven", which could end up excluding non-RavenDB types such as "RavenFoo.Bar". This logic should be changed to exclude types that start with "raven.", as that would more accurately target the RavenDB set of types.'
154,'','CastleWindsorObjectBuilder now can build components registered after first call of build\nThis pull request is for Issue #153\r\n\r\nThe test I created to highlight the issue shows that the SpringObjectBuilder also fails.\r\n\r\nI have simply set the SpringObjectBuilder to be ignored for the test.  Someone else may wish to fix it.  '
153,'','CastleWindsorBuild cannot build components configured after first call to Build() \nWhen the UnicastBus is being resolved from the CastleWindsorObjectBuilder, the Transport property is not being set.  This results in a null-reference exception when attempting to start the bus.\r\n\r\nThe cause appears to be, in the current implementation of the CastleWindsorObjectBuilder, any components configured _after_ the _first_ call to the Build method will not be registered with the underlying container; and hence are not available for property-injection in this case. '
152,'','Minor fixes to NHibernate subscription storage\n'
151,'','Add support for unobtrusive IHandleMessages<IMessage>\nWe no longer require IMessage to be implemented, Perhaps a IHandleMessages<object> or IHandleMessages<dynamic> will do?'
150,'','Purge on startup is broken\nThe current implementation was calling builder.Build to early in the config process and that breaks the windsor builder.\r\n\r\nWe need to react on "configuration complete" instead'
149,'','NServiceBus-Host Nuget Package references both 32 & any CPU exe\nWhen adding or upgrading the NServiceBus-Host nuget package, both the any cpu and 32 bit host executables are referenced, which results in a broken build. To fix, you have to go to every project that references the host and manually remove the reference each time you upgrade. \r\n\r\nI think the any cpu exe should be referenced by default.'
148,'',"Make it easier to use the perfcounters when you're selfhosting\nhttp://tech.groups.yahoo.com/group/nservicebus/message/12143"
147,'andreasohlund','Bus.CurrentMessageContext has incorrect value in IMessageModule.HandleBeginMessage method\nBus.CurrentMessageContext has the previous message value in  IMessageModule.HandleBeginMessage method but  it should has current processing message inside.\r\n\r\nBus.CurrentMessageContext should be the same in IMessageModule.HandleBeginMessage  and IMessageModule.HandleEndMessage methods. But now it has correct message context in HandleEndMessage and incorrect in HandleBeginMessage.\r\n\r\nFound it issue in 2.5 version'
146,'','Stop using the label to store the address of the subscriber\nThe limit on the label can cause issues when subscribers have names >256 chars'
145,'andreasohlund','TimeToBeReceived attribute has no affect without explicit endpoint config\nThe TimeToBeReceived attribute on a message has no affect if there is no explicit endpoint configured for the message type. Issue reproduced in NSB 2.6.\r\n\r\nThere is a message:\r\n\r\n[TimeToBeReceived("0:00:05.000")]\r\npublic class TestMessage : IMessage\r\n...\r\n\r\nWhich is sent:\r\n\r\n_bus.Send<TestMessage>("ANoneExistingQueue@AMachineFarAway", m => { });\r\n\r\nResult: the message stays in the out queue for more than 5 seconds.\r\n\r\nCause: RegisterMessageType of UnicastBus sets the TTLs per message type. However, it is only called for explicit message endpoints.\r\n\r\nWorkaround: add to your config.\r\n\r\n<MessageEndpointMappings>\r\n<add Messages="NSBSystemTests" Endpoint="WeReallyDont@Care" />\r\n</MessageEndpointMappings>'
144,'',"Add explicit support in testing to verify RequestTimeout calls\nAs of right now I'm not sure how to add an ExpectSend or ExpectPublish or what not for when a Saga calls RequestTimeout[UTC] method.\r\n\r\n"
143,'andreasohlund','Use the deadletter queue by default\nWith an option to turn it off in the fluent interface'
142,'','Creating NServiceBus.Sample.PubSub NuGet package\nAdding an  **NServiceBus.Sample.PubSub NuGet package** will allow library users to download the latest samples, and get updates/fixes for them.'
141,'',"Build changes\n1. Move the buildnumber to comply with semver.org (current is 3.0.0.BUILDNR), should be 3.0.BUILDNR.0\r\n    - Fileversion should be set to the above but assembly version should always be MAJOR.MINOR.0.0\r\n\r\n2. Remove the version.txt and put the major.minor in the psake script to make the script simpler\r\n    - Today we set it to 3.0.0 but given #1 above we should only use 3.0 moving forward\r\n\r\n3. Remove the use of common assembly info and use the raven strategy of rewriting the AssemblyInfo.cs files for each project instead \r\n   - NSB should have ClcCompliant set to true always\r\n  - See https://github.com/ravendb/ravendb/blob/master/default.ps1 for reference\r\n  - Not the use of the special buildnr (13) to make sure that local build won't create new the property files\r\n  - Do a global search replace in the .csprojs to remove the commonassemblyinfo.cs link\r\n\r\n4. Is see no benefit in using the build.ps1 -> move the functionallity to default.ps1 and use psake targets instead"
140,'',"Exception at startup if message has Generic<Nullable<Anything>> property\nWe added a new message that has a property of type Delta<DateTime?> (where Delta<> is a trivial type with two values of type T) and as soon as we did it we noticed that NServiceBus at startup started failing with seemingly unrelated exception. The logs show the following:\r\n\r\n2011-10-19 13:32:46,573 [1] INFO  NServiceBus.Host [(null)] <(null)> - Going to\r\nactivate profile: NServiceBus.Lite, NServiceBus.Host, Version=2.6.0.1505, Cultur\r\ne=neutral, PublicKeyToken=9fc386479f8a226c\r\n2011-10-19 13:32:47,649 [1] FATAL NServiceBus.Host.Internal.GenericHost [(null)]\r\n<(null)> - System.InvalidOperationException: No message serializer has been con\r\nfigured.\r\n   at NServiceBus.Unicast.Transport.Msmq.MsmqTransport.CheckConfiguration()\r\n   at NServiceBus.Unicast.Transport.Msmq.MsmqTransport.Start()\r\n   at NServiceBus.Unicast.UnicastBus.NServiceBus.IStartableBus.Start(Action star\r\ntupAction)\r\n   at NServiceBus.Unicast.UnicastBus.NServiceBus.IStartableBus.Start()\r\n   at NServiceBus.Host.Internal.GenericHost.Start()\r\n\r\n\r\nNeedless to say our serializer is indeed being configured quite properly as far as I can tell, and it all works happily if we remove the aforementioned property.\r\n\r\nWe did some experimenting and it works if we have Delta<DateTime> (non-nullable) Delta<String> or any other non-nullable value type. Delta<Nullable<int>> fails however so the issue seems to be in general related to generic type closed over nullable value types.\r\n\r\nI'm happy to provide any more data if you guys need it.\r\n\r\nCheers,\r\nKrzysztof"
139,'',"Duplicate Identity Exception\nPassing a user token for a new WindowsIdentity results in a duplicate identity exception in some use cases primarily if the token represents the Current Windows Identity. There may be others.\r\n\r\nUsing WindowsIdentity.GetCurrent() instead of passing the token avoids this issue with the current identity. You can't compare tokens as they change intermittently so this could still happen with the Current Identity but at least the explicit WindowsIdentity.GetCurrent().Token is avoided now."
138,'','Subscription storage should ignore the minor and revion numbers\nhttp://tech.groups.yahoo.com/group/nservicebus/message/11943'
137,'','Fix for issue #131\nSet column types to varchar(450) on subscription table to avoid exceeding the primary key size'
136,'',"Create an additional set of binaries that aren't strongly named\nUsers who don't care about NServiceBus being strongly named are facing a great deal of friction when we release new builds that fix minor issues as they then have to recompile their whole code-base to the new build (as you can't have two assemblies referencing two different versions of NServiceBus in the same process without using the GAC)."
135,'','Extensible config for distributor + timeout manager\nCurrently the distributor and timeout manager use appsettings / ConfigurationManager directly which makes it difficult to centralize their configuration the way that it is possible with other NSB endpoints.'
134,'','A workaround for bug #133\nThis patch adds a workaround for #133 which is disabled by default, but which can be enabled during bus setup.\r\n\r\nThe workaround consists on filtering non-valid XML characters during deserialization using a filtering StreamReader.'
133,'johnsimons','xml serializer outputs documents with non-valid ASCII characters\nMessageSerializer.Serialize() performs (just before returning) a crude Encoding.UTF8.GetBytes() over the generated string, which may in some cases contain non-valid XML characters (like NULL which is a valid .net string character, but which sould be encoded as an entity on XML.\r\n\r\nFor example, serializing a message with an string property with value like "hello\\0" generates a messages which cannot be deserialized back.\r\n\r\nSample code demostrating the issue:\r\n\r\n\r\nusing System;\r\nusing System.IO;\r\nusing System.Xml;\r\nusing System.Collections.Generic;\r\n\r\nnamespace Test\r\n{\r\n        public class TestMessage : NServiceBus.IMessage {\r\n                public string Data { get; set; }\r\n        }\r\n\r\n        public static class Program {\r\n                public static void Main() {\r\n                        var tmp = new NServiceBus.Serializers.XML.MessageSerializer();\r\n                        var maper = new NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper();\r\n\r\n                        tmp.MessageTypes = new List<Type>() { typeof(TestMessage) };\r\n                        maper.Initialize(new[] { typeof(TestMessage) });\r\n                        tmp.MessageMapper = maper;\r\n\r\n                        using (var ms = new MemoryStream())\r\n                        {\r\n                                var obj = new TestMessage() { Data = "Hello\\0" };\r\n                                tmp.Serialize(new NServiceBus.IMessage[] { obj }, ms);\r\n\r\n                                ms.Seek(0, SeekOrigin.Begin);\r\n\r\n                                var ret = tmp.Deserialize(ms);\r\n                        }\r\n                }\r\n        }\r\n}\r\n'
132,'','Added ToString method to WireEncryptedString\nAdded ToString, which is useful when sending a WireEncryptedString instance to methods like ILog.Info(object message)'
131,'andreasohlund','Change the NHibernate sub storage to use varchar instead of nvarchar\nTo avoid exceeding the maximum primary key size '
130,'','ILMerge for NServiceBus.Host fails due to missing binaries\nWorking with the latest commit (f8777c483815333d9b737e6a7426d267ddf6db50), I tried building the source by running build.bat but ILMerge fails: \r\n\r\nILMerge version 2.10.219.0\r\nCopyright (C) Microsoft Corporation 2004-2006. All rights reserved.\r\nILMerge /keyfile:NServiceBus.snk /out:build\\output\\host\\NServiceBus.Host.exe build\\hosting\\NServiceBus.Hosting.Windows.exe build\\hosting\\NServiceBus.Hosting.dll build\\hosting\\Microsoft.Practices.ServiceLocation.dll build\\hosting\\Magnum.dll build\\hosting\\Topshelf.dll /internalize:ilmerge.exclude /target:exe /xmldocs /log:build\\output_windowshost.txt /targetplatform:v4,C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319 \r\nSet platform to \'v4\', using directory \'C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\' for mscorlib.dll\r\nRunning on Microsoft (R) .NET Framework v4.0.30319\r\nmscorlib.dll version = 4.0.0.0\r\nRead 6 lines from the exclusion file \'ilmerge.exclude\'.\r\nThe list of input assemblies is:\r\n\tbuild\\hosting\\NServiceBus.Hosting.Windows.exe\r\n\tbuild\\hosting\\NServiceBus.Hosting.dll\r\n\tbuild\\hosting\\Microsoft.Practices.ServiceLocation.dll\r\n\tbuild\\hosting\\Magnum.dll\r\n\tbuild\\hosting\\Topshelf.dll\r\nTrying to read assembly from the file \'C:\\dev\\Tools\\NServicebus\\git\\build\\hosting\\NServiceBus.Hosting.Windows.exe\'.\r\n\tSuccessfully read in assembly.\r\n\tThere were no errors reported in NServiceBus.Hosting.Windows\'s metadata.\r\nTrying to read assembly from the file \'C:\\dev\\Tools\\NServicebus\\git\\build\\hosting\\NServiceBus.Hosting.dll\'.\r\n\tSuccessfully read in assembly.\r\n\tThere were no errors reported in NServiceBus.Hosting\'s metadata.\r\nCould not find the file \'build\\hosting\\Microsoft.Practices.ServiceLocation.dll\'.\r\nAn exception occurred during merging:\r\nILMerge.Merge: Could not find the file \'build\\hosting\\Microsoft.Practices.ServiceLocation.dll\'.\r\n   at ILMerging.ILMerge.Merge()\r\n   at ILMerging.ILMerge.Main(String[] args)\r\n\r\nUpdate: \r\nUpon further investigation it seems this occurs because Microsoft.Practices.ServiceLocation.dll was found in the GAC and so wasn\'t copied into the output directory. It can be fixed by either forcing copy-local (setting "Private" to "true" in the assembly reference or deleting the assembly from the GAC (not recommended).'
129,'','V2.5 issue 128\nFix for issue #128 for branch v2.5/v.2.6'
128,'',"When using interfaces as messages instead of concrete classes, TransportMessage.Recoverable is never set as true.\nAfter inspecting the code UnicastBus.GetTransportMessageFor(IMessage) tries to find the passed object's type at recoverableMessageTypes list, however, as the passed object is a mock instance created dinamically by NSB, the lookup fails.\r\n\r\nThe line:\r\n   if (recoverableMessageTypes.Contains(message.GetType()))\r\n\r\nShould be insteas as: \r\n   if (recoverableMessageTypes.Any(x => x.IsAssignableFrom(message.GetType())))\r\n\r\nI'll try to send a pull request in a few minutes."
127,'','Consider OAuth Support\nInstead of having our impersonation model entirely based on Windows authentication, consider opening it up to OAuth as well.'
126,'','Update to Azure and AppFabric SDK 1.5, nuget to latest\nUpdate the libs and samples to use 1.5 SDKs\r\nUpdate nuget to latest version\r\nRemoved Microsoft.ServiceBus.Messaging.dll as rolled into Microsoft.ServiceBus.dll \r\nRan Build, No Test failures.'
125,'andreasohlund','Unhandled StructureMapException (build 1664)\nThis exception was thrown while running the Starbucks sample:\r\n\r\n```StructureMap.StructureMapException was unhandled\r\n  Message=StructureMap Exception Code:  207\r\nInternal exception while creating Instance \'bb2e8928-0ffe-4cb4-86fa-76eea6ec36f1\' of PluginType NServiceBus.Config.IWantToRunWhenConfigurationIsComplete, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.  Check the inner exception for more details.\r\n  Source=StructureMap\r\n  ErrorCode=207\r\n  StackTrace:\r\n       at StructureMap.Pipeline.LambdaInstance`1.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\LambdaInstance.cs:line 31\r\n       at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 109\r\n       at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n       at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n       at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n       at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 153\r\n       at StructureMap.BuildSession.CreateInstanceArray(Type pluginType, Instance[] instances) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 178\r\n       at StructureMap.Container.GetAllInstances(Type pluginType) in c:\\code\\structuremap\\Source\\StructureMap\\Container.cs:line 310\r\n       at NServiceBus.ObjectBuilder.StructureMap.StructureMapObjectBuilder.NServiceBus.ObjectBuilder.Common.IContainer.BuildAll(Type typeToBuild)\r\n       at NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.<NServiceBus.ObjectBuilder.IBuilder.BuildAll>d__1`1.MoveNext() in c:\\Projects\\NServiceBus\\git\\master\\NServiceBus\\src\\impl\\ObjectBuilder.Common\\ObjectBuilder.Common\\CommonObjectBuilder.cs:line 150\r\n       at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n       at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n       at NServiceBus.Configure.Initialize() in c:\\Projects\\NServiceBus\\git\\master\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 263\r\n       at NServiceBus.Configure.CreateBus() in c:\\Projects\\NServiceBus\\git\\master\\NServiceBus\\src\\config\\NServiceBus.Config\\Configure.cs:line 207\r\n       at Cashier.Bootstrapper.BootstrapNServiceBus() in C:\\Projects\\NServiceBus\\git\\master\\NServiceBus\\Samples\\Starbucks\\Cashier\\Bootstrapper.cs:line 24\r\n       at Cashier.Bootstrapper.Bootstrap() in C:\\Projects\\NServiceBus\\git\\master\\NServiceBus\\Samples\\Starbucks\\Cashier\\Bootstrapper.cs:line 14\r\n       at Cashier.Program.Main() in C:\\Projects\\NServiceBus\\git\\master\\NServiceBus\\Samples\\Starbucks\\Cashier\\Program.cs:line 15\r\n       at System.AppDomain._nExecuteAssembly(RuntimeAssembly assembly, String[] args)\r\n       at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()\r\n       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean ignoreSyncCtx)\r\n       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n       at System.Threading.ThreadHelper.ThreadStart()\r\n  InnerException: StructureMap.StructureMapException\r\n       Message=StructureMap Exception Code:  207\r\nInternal exception while creating Instance \'35e6d989-7acf-453e-8332-1edbf373abf3\' of PluginType NServiceBus.IStartableBus, NServiceBus, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.  Check the inner exception for more details.\r\n       Source=StructureMap\r\n       ErrorCode=207\r\n       StackTrace:\r\n            at StructureMap.Pipeline.LambdaInstance`1.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\LambdaInstance.cs:line 31\r\n            at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 109\r\n            at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n            at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n            at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n            at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 153\r\n            at StructureMap.BuildSession.<>c__DisplayClass3.<.ctor>b__1() in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 34\r\n            at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 192\r\n            at StructureMap.Pipeline.DefaultInstance.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\DefaultInstance.cs:line 22\r\n            at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 109\r\n            at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n            at StructureMap.Pipeline.ConstructorInstance.Get(String propertyName, Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 74\r\n            at StructureMap.Pipeline.ConstructorInstance.Get[T](String propertyName, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 79\r\n            at StructureMap.Pipeline.Arguments.Get[T](String propertyName) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Arguments.cs:line 18\r\n            at lambda_method(Closure , IArguments , Bootstrapper )\r\n            at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass11.<buildUp>b__e(IArguments args, T target) in c:\\code\\structuremap\\Source\\StructureMap\\Construction\\BuilderCompiler.cs:line 101\r\n            at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass2.<CreateBuilder>b__0(IArguments args) in c:\\code\\structuremap\\Source\\StructureMap\\Construction\\BuilderCompiler.cs:line 58\r\n            at StructureMap.Construction.InstanceBuilder.BuildInstance(IArguments args) in c:\\code\\structuremap\\Source\\StructureMap\\Construction\\InstanceBuilder.cs:line 34\r\n            at StructureMap.Pipeline.ConstructorInstance.Build(Type pluginType, BuildSession session, IInstanceBuilder builder) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 247\r\n            at StructureMap.Pipeline.ConstructorInstance.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 218\r\n            at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 109\r\n            at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n            at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n            at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n            at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 153\r\n            at StructureMap.BuildSession.<>c__DisplayClass3.<.ctor>b__1() in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 34\r\n            at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 192\r\n            at StructureMap.BuildSession.GetInstance[T]() in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 78\r\n            at NServiceBus.ObjectBuilder.StructureMap.StructureMapExtensions.Registration`2.<RegisterServiceInterface>b__0(IContext ctx)\r\n            at StructureMap.Pipeline.LambdaInstance`1.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\LambdaInstance.cs:line 25\r\n       InnerException: StructureMap.StructureMapException\r\n            Message=StructureMap Exception Code:  207\r\nInternal exception while creating Instance \'b69e8512-b067-4bc3-85e0-b29bf3b1898a\' of PluginType NServiceBus.Unicast.Subscriptions.ISubscriptionStorage, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c.  Check the inner exception for more details.\r\n            Source=StructureMap\r\n            ErrorCode=207\r\n            StackTrace:\r\n                 at StructureMap.Pipeline.LambdaInstance`1.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\LambdaInstance.cs:line 31\r\n                 at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 109\r\n                 at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n                 at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n                 at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n                 at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 153\r\n                 at StructureMap.BuildSession.<>c__DisplayClass3.<.ctor>b__1() in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 34\r\n                 at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 192\r\n                 at StructureMap.Pipeline.DefaultInstance.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\DefaultInstance.cs:line 22\r\n                 at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 109\r\n                 at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n                 at StructureMap.Pipeline.ConstructorInstance.Get(String propertyName, Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 74\r\n                 at StructureMap.Pipeline.ConstructorInstance.Get[T](String propertyName, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 79\r\n                 at StructureMap.Pipeline.Arguments.Get[T](String propertyName) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Arguments.cs:line 18\r\n                 at lambda_method(Closure , IArguments , UnicastBus )\r\n                 at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass11.<buildUp>b__e(IArguments args, T target) in c:\\code\\structuremap\\Source\\StructureMap\\Construction\\BuilderCompiler.cs:line 101\r\n                 at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass2.<CreateBuilder>b__0(IArguments args) in c:\\code\\structuremap\\Source\\StructureMap\\Construction\\BuilderCompiler.cs:line 58\r\n                 at StructureMap.Construction.InstanceBuilder.BuildInstance(IArguments args) in c:\\code\\structuremap\\Source\\StructureMap\\Construction\\InstanceBuilder.cs:line 34\r\n                 at StructureMap.Pipeline.ConstructorInstance.Build(Type pluginType, BuildSession session, IInstanceBuilder builder) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 247\r\n                 at StructureMap.Pipeline.ConstructorInstance.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 218\r\n                 at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 109\r\n                 at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n                 at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n                 at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n                 at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 153\r\n                 at StructureMap.BuildSession.<>c__DisplayClass3.<.ctor>b__1() in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 34\r\n                 at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 192\r\n                 at StructureMap.BuildSession.GetInstance[T]() in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 78\r\n                 at NServiceBus.ObjectBuilder.StructureMap.StructureMapExtensions.Registration`2.<RegisterServiceInterface>b__0(IContext ctx)\r\n                 at StructureMap.Pipeline.LambdaInstance`1.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\LambdaInstance.cs:line 25\r\n            InnerException: StructureMap.StructureMapException\r\n                 Message=StructureMap Exception Code:  206\r\nInvalid property value(s), InstanceKey "6b142061-7c27-4ea4-bd82-9521b753f724"\r\n                 Source=StructureMap\r\n                 ErrorCode=206\r\n                 StackTrace:\r\n                      at StructureMap.Pipeline.ConstructorInstance.Build(Type pluginType, BuildSession session, IInstanceBuilder builder) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 247\r\n                      at StructureMap.Pipeline.ConstructorInstance.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 218\r\n                      at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 109\r\n                      at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n                      at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n                      at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n                      at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 153\r\n                      at StructureMap.BuildSession.<>c__DisplayClass3.<.ctor>b__1() in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 34\r\n                      at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 192\r\n                      at StructureMap.BuildSession.GetInstance[T]() in c:\\code\\structuremap\\Source\\StructureMap\\BuildSession.cs:line 78\r\n                      at NServiceBus.ObjectBuilder.StructureMap.StructureMapExtensions.Registration`2.<RegisterServiceInterface>b__0(IContext ctx)\r\n                      at StructureMap.Pipeline.LambdaInstance`1.build(Type pluginType, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\LambdaInstance.cs:line 25\r\n                 InnerException: System.InvalidCastException\r\n                      Message=Unable to cast object of type \'System.String\' to type \'NServiceBus.Address\'.\r\n                      Source=StructureMap\r\n                      StackTrace:\r\n                           at StructureMap.Pipeline.ConstructorInstance.Get[T](String propertyName, BuildSession session) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 82\r\n                           at StructureMap.Pipeline.Arguments.Get[T](String propertyName) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\Arguments.cs:line 18\r\n                           at lambda_method(Closure , IArguments , MsmqSubscriptionStorage )\r\n                           at StructureMap.Construction.SetterBuilder`1.<>c__DisplayClass1.<BuildOptionalSetter>b__0(IArguments args, T target) in c:\\code\\structuremap\\Source\\StructureMap\\Construction\\SetterBuilder.cs:line 36\r\n                           at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass11.<buildUp>b__e(IArguments args, T target) in c:\\code\\structuremap\\Source\\StructureMap\\Construction\\BuilderCompiler.cs:line 107\r\n                           at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass2.<CreateBuilder>b__0(IArguments args) in c:\\code\\structuremap\\Source\\StructureMap\\Construction\\BuilderCompiler.cs:line 58\r\n                           at StructureMap.Construction.InstanceBuilder.BuildInstance(IArguments args) in c:\\code\\structuremap\\Source\\StructureMap\\Construction\\InstanceBuilder.cs:line 34\r\n                           at StructureMap.Pipeline.ConstructorInstance.Build(Type pluginType, BuildSession session, IInstanceBuilder builder) in c:\\code\\structuremap\\Source\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 233\r\n                      InnerException: \r\n```'
124,'',"NServiceBus.Tools package seems to be broken\nWe're getting reports that the tools package is missing files. Can you verify that it installs correctly and that tools like returntosourcequeue.exe can be execute successfully"
123,'','Add a package for nservicebus.integration.webservices.dll\n'
122,'','Move the azure host to the azure.sln\nRight now the hosting/ directory contains the azure host. Can you move it to the azure folder + sln\r\n'
121,'johnsimons','Ensure that the 3.0 gateway is compatible with the 2.6 gateway\nIn order to drop the 3.5 version we need to ensure that the gateways remain compatible'
120,'andreasohlund','Change the subscriptions to only store the major assembly version\n'
119,'','Update to latest nuget.exe (1.5)\n'
118,'andreasohlund','Better exception when exceeding the 256 char limit for msmq labels\nHi Udi,\r\n \r\n  I figured out the problem. The maximum Label size is only 250 symbols and in our case we exceeded the maximum size (http://msdn.microsoft.com/en-us/library/ms703218%28v=VS.85%29.aspx). \r\n \r\n  We fixed the problem by changing the queue name but it something that you might to think about in future.\r\n \r\n----------------  MESSAGE IS TOO BIG ---------------------------------------------------------\r\n<CorrId>7a88a8b4-19ae-4029-a787-51ae56e1d691\\6626</CorrId>\r\n<WinIdName>IIS APPPOOL\\publisher.sec.local</WinIdName>\r\n<FailedQ>Q4Orion.ServiceBus.SECFiling.Subscriber.InputQueue@q4orion-maximv</FailedQ>\r\n<OriginalId>a99e979c-e59f-4d44-9bba-069ae83e102a\\12913164</OriginalId>\r\n----------------  MESSAGE IS TOO BIG ---------------------------------------------------------'
117,'','Better exception text when autosubscribe blows up for commands\nWe have no way of not autosubscribing command, hence the introduction of a ICommand interface. The error message should point the users in this direction'
116,'udidahan','Add ICommand and IEvent marker interfaces\nAnd allow the users to override using lambdas'
115,'','Static outgoing headers are ignored when set using IWantToRunAtStartup\nhttp://tech.groups.yahoo.com/group/nservicebus/message/7665'
114,'','Modify the build to build both 3.5 and 4.0 in the same run\nIn order to push to nuget we must have our build to build all flavour that we want to publish'
113,'','Upgrade to latest nhibernate and fluent nhibernate\nOn hold until FNH pushed a nuget that is compatible with NH 3.2'
112,'','Make the jsonserializer build on 3.5\nWe need to fix the 3.5 build for the Json serializer\r\n\r\nhttp://teamcity.codebetter.com/viewLog.html?buildId=30211&buildTypeId=bt256&tab=buildLog\r\n\r\nWe probably need to do it like Jonathan is doing it in his event store:\r\n\r\nhttps://github.com/joliver/EventStore/blob/master/src/proj/EventStore.Serialization.Json/EventStore.Serialization.Json.csproj\r\n'
111,'','start powershell script with execution policy RemotedSigned\nstart powershell script with execution policy RemotedSigned\r\nfor make sure that configuration for powershell is not need for build.'
110,'','Meditation && ETL support?\nAny chance to see such functionality?'
109,'','Add a unit of work implementation for raven\nShould we use a messagemodule ala Ayende:\r\n\r\nhttp://ayende.com/blog/71681/ravendb-session-management-with-nservicebus\r\n\r\nOr\r\n\r\nA IManageUnitsOfWork impl\r\n\r\nOr\r\n\r\nUse the childcontainers feature in combination with a message module'
108,'','Host raven inside the generic host\n'
107,'','Add a NServiceBus[X]-CI nuget packages and have the CI build push them\nMake the CI build for the master to push automatically to nuget , name those packages [RegularName]-CI'
106,'','Create a NServiceBus.Azure package\nInclude the NServiceBus.Azure dll, add a dependency on NSB, NSB.core'
105,'','Create a nuget package for NServiceBus.NHibernate.dll\nWait unti we reference the offical nh nuget package'
104,'','The xmlserializer generates duplicate properties for inheritance chains\nTo reproduce:\r\n\r\npublic interface IMyOtherMessage : IMyMessage\r\npublic interface IMyMessage : IMyBaseMessage\r\npublic interface IMyBaseMessage : IMessage  \r\n    prop BaseProp\r\n\r\n\r\n\r\nThe bug was reported for 2.5, create a test to see if you can repo on master'
103,'udidahan','Remove the need for the IMessage marker interface\nRefactor the code to allow user to define their own conventions/marker interface for their messages. This will improve the versioning story since users no longer need to reference NServiceBus.dll from in their message assemblies'
102,'','Fix the broken 3.5 build using conditional compiles\n'
101,'','Fix for Issue#96\nAvoids throwing an exception when an IMessage interface/class uses some attribute without a parameterless .ctor, logging a Warning instead... keeping backwards compatibility.\r\n\r\n/cc @andreasohlund'
100,'','DB Subscription storage returns duplicate subscriptions\nIt seems like the DB sub storage returns multiple subscriptions fro the same endpoint when interface inheritance is used:\r\n\r\nMyMessage:ISomeInterface:IAnotherInterface\r\n\r\n'
99,'','Issue #98 addressed by changes in this branch\nThese changes allow the NServiceBus gateway to support registering of non-Http channel types as needed.'
98,'andreasohlund','NServiceBus Gateway still hardwired to only support Http Channel Types\nVarious components in the NServiceBus Gateway are still hardwired to only support "Http" as the channel type. It should become possible to add other channel types for non-http urls as needed (some potential examples: tcp, ftp etc...)'
97,'','Make timeout storage queue configurable\n'
96,'','Issue 95\nFixes Issue#95 by avoiding CustomAttributeBuilder when attribute has no parameterless .ctor\r\n\r\n/cc @andreasohlund'
95,'',"Problem with IMessage interfaces using Attributes w/o default constructor\nAfter upgrading to NSB v2.5 I'm having troubles with IMessages interfaces when any property has an Attribute w/o default constructor, like in this case:\r\n\r\nusing System.ComponentModel;\r\n\r\npublic interface SomeMessage : IMessage\r\n{\r\n   [DataObjectField(true)]\r\n   string RequestId { get; set; }\r\n}\r\n\r\nWhich results in the following exception being thrown while initializing NSB:\r\n\r\nCastle.MicroKernel.ComponentActivator.ComponentActivatorException: Error setting property set_MessageTypes on type NServiceBus.Serializers.XML.MessageSerializer, Component id is NServiceBus.Serializers.XML.MessageSerializer. See inner exception for more information. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentNullException: Argument cannot be null.\r\nParameter name: con\r\n  at System.Reflection.Emit.CustomAttributeBuilder.Initialize (System.Reflection.ConstructorInfo con, System.Object[] constructorArgs, System.Reflection.PropertyInfo[] namedProperties, System.Object[] propertyValues, System.Reflection.FieldInfo[] namedFields, System.Object[] fieldValues) [0x00000] in <filename unknown>:0\r\n  at System.Reflection.Emit.CustomAttributeBuilder..ctor (System.Reflection.ConstructorInfo con, System.Object[] constructorArgs) [0x00000] in <filename unknown>:0\r\n  at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.AddCustomAttributeToProperty (System.Object customAttribute, System.Reflection.Emit.PropertyBuilder propBuilder) [0x00000] in <filename unknown>:0\r\n  at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateTypeFrom (System.Type t, System.Reflection.Emit.ModuleBuilder moduleBuilder) [0x00000] in <filename unknown>:0\r\n  at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GenerateImplementationFor (System.Type interfaceType, System.Reflection.Emit.ModuleBuilder moduleBuilder) [0x00000] in <filename unknown>:0\r\n  at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.InitType (System.Type t, System.Reflection.Emit.ModuleBuilder moduleBuilder) [0x00000] in <filename unknown>:0\r\n  at NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.Initialize (IEnumerable`1 types) [0x00000] in <filename unknown>:0\r\n  at NServiceBus.Serializers.XML.MessageSerializer.set_MessageTypes (System.Collections.Generic.List`1 value) [0x00000] in <filename unknown>:0\r\n\r\nInspecting the code, it looks like the problem was introduced at https://github.com/NServiceBus/NServiceBus/commit/956e4d82af36b748ffb45eeefab5810e6bab7a8e and it is just because at AddCustomAttributeToProperty method an asumption is made by which every attribute should have a default .ctor, which is not the case here.\r\n\r\nMaybe a workaround is just to avoid CustomAttributeBuilder when no default .ctor is available on such attribute type."
94,'','Verify that all v2.5 samples work\nGo through all the v2.5 samples and make sure that:\r\n\r\n* They run ok when you hit F5\r\n* That they do what they are supposed to do\r\n* Note things that are confusing for you so that we can improve\r\n\r\nPlease prioritize this one after the host32 issue'
93,'','Include a x86 version of the host in 2.5\nThis is already fixed on the master.\r\n\r\nOn 2.5 \r\n\r\n* Add a target for a x86 host\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/master/nant.build  (look at the compile_host32 target)\r\n\r\n* Update the nuget host package to include it in a subfolder according to the nuget conventions\r\n\r\nI suggest that you do all this directly against the nservicebus repo. You have access to it so as soon as you have merged and committed your changes I suggest that you delete you fork and clone directly from \r\ngit@github.com:NServiceBus/NServiceBus.git'
92,'','Check the MessageForwardingInCaseOfFault\n'
91,'andreasohlund',"Serializer doesn't support multiple arrays in a message\npublic class MyMessage {\r\n Foo[] Foos { get; set; }\r\n Bar[] Bars { get; set; }\r\n}\r\n\r\nhttp://groups.yahoo.com/group/nservicebus/message/11039"
90,'','StructureMapObjectBuilder Configuration Bug\nThe StructureMapObjectBuilder configures a component with all of the interfaces it implements directly and indirectly via inheritance. This has the side effect of registering a component with the same interface more than one.\r\n\r\nFor example, a UnicastBus will be registered in the container as an IBus twice, because it implements IBus directly and indirectly through IUnicastBus.\r\n\r\nI recommend removing the recursion at the bottom of StructureMapObjectBuilder.GetAllInterfacesImplementedBy(Type t) per according to the document on Type.GetInterfaces() it is unecessary.\r\n\r\nhttp://msdn.microsoft.com/en-us/library/system.type.getinterfaces.aspx'
89,'','add lock to inmemory persisters\nadding locking for the in memory saga persistent.\r\nissue 36\r\n'
88,'',"Using StructureMapObjectBuilder appears to cause error\nI recently grabbed the latest version off the trunk(Jun 7). And was getting a very unfamiliar error on startup, which I have posted the log for below. Seems to happen only when I am using the StructureMapObjectBuilder. The easiest way to duplicate is just to take the Pub/Sub example and change the publisher endpoint.cs to look like this and it will give you the error located further below\r\n\r\n\r\n    class EndpointConfig : IConfigureThisEndpoint, AsA_Publisher, IWantCustomInitialization {\r\n        public void Init()\r\n        {\r\n            Configure.With()\r\n                .StructureMapBuilder()\r\n                .XmlSerializer();\r\n        }\r\n    }\r\n\r\n\r\n\r\n14:58:46.515 [1] WARN  NServiceBus.Unicast.UnicastBus - LocalAddress property of UnicastBusConfig not found. Using InputQueue property of MsmqTransportConfig instead. This will not be supported in the next version.\r\n14:58:46.788 [1] INFO  NServiceBus.Hosting.Roles.RoleManager - Role NServiceBus.AsA_Server configured\r\n14:58:46.818 [1] INFO  NServiceBus.Host - Going to activate profile: NServiceBus.Lite, NServiceBus.Host, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:46.829 [1] DEBUG NServiceBus.Host - Activating profile handler: NServiceBus.Hosting.Windows.Profiles.Handlers.LiteProfileHandler, NServiceBus.Host, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.638 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: MyMessages.IEvent, MyMessages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n14:58:50.641 [1] DEBUG NServiceBus.Serializers.XML - Handling property: EventId\r\n14:58:50.653 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Guid, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.653 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Time\r\n14:58:50.654 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Nullable`1[[System.DateTime, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.655 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.DateTime, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.656 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Duration\r\n14:58:50.657 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.TimeSpan, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.657 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: MyMessages.EventMessage, MyMessages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n14:58:50.658 [1] DEBUG NServiceBus.Serializers.XML - Handling property: EventId\r\n14:58:50.659 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Guid, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.659 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Time\r\n14:58:50.660 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Nullable`1[[System.DateTime, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.661 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.DateTime, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.668 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Duration\r\n14:58:50.669 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.TimeSpan, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.669 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Grid.Messages.ChangeNumberOfWorkerThreadsMessage, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.670 [1] DEBUG NServiceBus.Serializers.XML - Handling property: NumberOfWorkerThreads\r\n14:58:50.671 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.672 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Grid.Messages.GetNumberOfWorkerThreadsMessage, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.672 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Grid.Messages.GotNumberOfWorkerThreadsMessage, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.673 [1] DEBUG NServiceBus.Serializers.XML - Handling property: NumberOfWorkerThreads\r\n14:58:50.674 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.674 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Grid.Messages.ReadyMessage, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.675 [1] DEBUG NServiceBus.Serializers.XML - Handling property: ClearPreviousFromThisAddress\r\n14:58:50.676 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.677 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Serializers.Json.Test.A, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.677 [1] DEBUG NServiceBus.Serializers.XML - Handling property: I\r\n14:58:50.680 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.680 [1] DEBUG NServiceBus.Serializers.XML - Handling property: DateTime\r\n14:58:50.682 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.DateTime, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.683 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Ints\r\n14:58:50.685 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Collections.Generic.List`1[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.686 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.686 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.687 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.688 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.688 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Bs\r\n14:58:50.691 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Collections.Generic.List`1[[NServiceBus.Serializers.Json.Test.B, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.692 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Serializers.Json.Test.B, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.693 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Bstr\r\n14:58:50.695 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.696 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Serializers.Json.Test.B, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.696 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Serializers.Json.Test.B, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.697 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Serializers.Json.Test.B, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.698 [1] DEBUG NServiceBus.Serializers.XML - Handling field: Data\r\n14:58:50.707 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.707 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.708 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.708 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.709 [1] DEBUG NServiceBus.Serializers.XML - Handling field: S\r\n14:58:50.711 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.711 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Serializers.Json.Test.IA, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.712 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Data\r\n14:58:50.715 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.715 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.715 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.716 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.716 [1] DEBUG NServiceBus.Serializers.XML - Handling property: S\r\n14:58:50.719 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.719 [1] DEBUG NServiceBus.Serializers.XML - Handling property: I\r\n14:58:50.722 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.722 [1] DEBUG NServiceBus.Serializers.XML - Handling property: B\r\n14:58:50.724 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Serializers.Json.Test.B, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.725 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Unicast.Queuing.Azure.MessageWrapper, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.725 [1] DEBUG NServiceBus.Serializers.XML - Handling property: IdForCorrelation\r\n14:58:50.728 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.728 [1] DEBUG NServiceBus.Serializers.XML - Handling property: TimeSent\r\n14:58:50.731 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.DateTime, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.732 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Id\r\n14:58:50.734 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.734 [1] DEBUG NServiceBus.Serializers.XML - Handling property: MessageIntent\r\n14:58:50.737 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Unicast.Transport.MessageIntentEnum, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.737 [1] DEBUG NServiceBus.Serializers.XML - Handling property: ReplyToAddress\r\n14:58:50.740 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.740 [1] DEBUG NServiceBus.Serializers.XML - Handling property: TimeToBeReceived\r\n14:58:50.743 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.TimeSpan, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.743 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Headers\r\n14:58:50.746 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Collections.Generic.Dictionary`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.747 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.748 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.748 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Collections.Generic.KeyValuePair`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.749 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Key\r\n14:58:50.755 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.756 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Value\r\n14:58:50.757 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.757 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Collections.Generic.KeyValuePair`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.758 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Body\r\n14:58:50.760 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.760 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.761 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.761 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Byte, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.762 [1] DEBUG NServiceBus.Serializers.XML - Handling property: CorrelationId\r\n14:58:50.763 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.764 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Recoverable\r\n14:58:50.765 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.766 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Unicast.Transport.CompletionMessage, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.766 [1] DEBUG NServiceBus.Serializers.XML - Handling property: ErrorCode\r\n14:58:50.767 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.768 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Unicast.Transport.SubscriptionMessage, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.768 [1] DEBUG NServiceBus.Serializers.XML - Handling property: TypeName\r\n14:58:50.769 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.770 [1] DEBUG NServiceBus.Serializers.XML - Handling property: SubscriptionType\r\n14:58:50.771 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Unicast.Transport.SubscriptionType, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.771 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.IMessage, NServiceBus, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.772 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Saga.ISagaMessage, NServiceBus, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.772 [1] DEBUG NServiceBus.Serializers.XML - Handling property: SagaId\r\n14:58:50.773 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Guid, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.773 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.Saga.TimeoutMessage, NServiceBus, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.773 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Expires\r\n14:58:50.774 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.DateTime, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.775 [1] DEBUG NServiceBus.Serializers.XML - Handling property: SagaId\r\n14:58:50.777 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Guid, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.777 [1] DEBUG NServiceBus.Serializers.XML - Handling property: State\r\n14:58:50.779 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.779 [1] DEBUG NServiceBus.Serializers.XML - Handling property: ClearTimeout\r\n14:58:50.781 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.782 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: NServiceBus.EncryptedValue, NServiceBus, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n14:58:50.782 [1] DEBUG NServiceBus.Serializers.XML - Handling property: EncryptedBase64Value\r\n14:58:50.784 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.784 [1] DEBUG NServiceBus.Serializers.XML - Handling property: Base64Iv\r\n14:58:50.787 [1] DEBUG NServiceBus.Serializers.XML - Initializing type: System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n14:58:50.808 [1] DEBUG NServiceBus.Unicast.UnicastBus - Associated 'NServiceBus.Grid.Messages.ChangeNumberOfWorkerThreadsMessage' message with 'NServiceBus.Grid.MessageHandlers.ChangeNumberOfWorkerThreadsMessageHandler' handler\r\n14:58:50.810 [1] DEBUG NServiceBus.Unicast.UnicastBus - Associated 'NServiceBus.Grid.Messages.GetNumberOfWorkerThreadsMessage' message with 'NServiceBus.Grid.MessageHandlers.GetNumberOfWorkerThreadsMessageHandler' handler\r\n14:58:50.811 [1] DEBUG NServiceBus.Unicast.UnicastBus - Associated 'NServiceBus.IMessage' message with 'NServiceBus.Grid.MessageHandlers.GridInterceptingMessageHandler' handler\r\n14:58:50.811 [1] DEBUG NServiceBus.Unicast.UnicastBus - Associated 'NServiceBus.IMessage' message with 'NServiceBus.Sagas.Impl.SagaMessageHandler' handler\r\n14:58:50.855 [1] DEBUG NServiceBus.Utils - Checking that DTC is configured correctly.\r\n14:58:50.856 [1] DEBUG NServiceBus.Utils - DTC is configured correctly.\r\n14:58:50.872 [1] DEBUG NServiceBus.Utils - MSDTC status is good: Running\r\n14:58:50.872 [1] DEBUG NServiceBus.Utils - DTC is good.\r\n14:58:50.882 [1] DEBUG NServiceBus.Utils - Checking if MSMQ is installed.\r\n14:58:50.886 [1] DEBUG NServiceBus.Utils - MSMQ is installed.\r\n14:58:50.886 [1] DEBUG NServiceBus.Utils - Checking that only needed components are active.\r\n14:58:50.889 [1] DEBUG NServiceBus.Utils - Installation is good.\r\n14:58:51.037 [1] DEBUG NServiceBus.Utils.MsmqUtilities - Checking if queue exists: mypublisherinputqueue@hal9000.\r\n14:58:51.057 [1] DEBUG NServiceBus.Utils.MsmqUtilities - Queue exists, going to set permissions.\r\n14:58:51.372 [1] DEBUG NServiceBus.Unicast.UnicastBus - Invoking transport message mutator: NServiceBus.Gateway.HeaderManagement.GatewayHeaderManager\r\n14:58:51.376 [1] DEBUG NServiceBus.Unicast.UnicastBus - Invoking transport message mutator: NServiceBus.HttpHeaders.HttpHeaderManager\r\n14:58:51.377 [1] DEBUG NServiceBus.Unicast.UnicastBus - Invoking transport message mutator: NServiceBus.Impersonation.ImpersonationManager\r\n14:58:51.378 [1] DEBUG NServiceBus.Unicast.UnicastBus - Invoking transport message mutator: NServiceBus.MessageHeaders.MessageHeaderManager\r\n14:58:51.644 [6] DEBUG MyPublisher.ServerEndpoint - Calling ServerEndpoint\r\n14:58:52.888 [Worker.5] DEBUG NServiceBus.Unicast.UnicastBus - Received message with ID 2bded613-957c-42ab-9365-d3f6fa880b33\\10339 from sender mypublisherinputqueue@hal9000\r\n14:58:53.029 [Worker.5] WARN  NServiceBus.Unicast.Transport.Transactional.TransactionalTransport - Failed raising 'transport message received' event for message with ID=2bded613-957c-42ab-9365-d3f6fa880b33\\10339\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.MessageHeaders.Bootstrapper.<Run>b__0(IMessage msg, String key) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\headers\\NServiceBus.MessageHeaders\\Bootstrapper.cs:line 16\r\n   at NServiceBus.ExtensionMethods.GetHeader(IMessage msg, String key) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\core\\NServiceBus\\ExtensionMethods.cs:line 33\r\n   at NServiceBus.ExtensionMethods.GetOriginatingSiteHeader(IMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\core\\NServiceBus\\ExtensionMethods.cs:line 75\r\n   at NServiceBus.Gateway.HeaderManagement.GatewayHeaderManager.MutateIncoming(IMessage message) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\gateway\\NServiceBus.Gateway\\HeaderManagement\\GatewayHeaderManager.cs:line 14\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass1a.<ApplyIncomingMessageMutatorsTo>b__19(IMutateIncomingMessages m) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 891\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Unicast.UnicastBus.ApplyIncomingMessageMutatorsTo(IBuilder builder, IMessage originalMessage) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 889\r\n   at NServiceBus.Unicast.UnicastBus.HandleMessage(IBuilder builder, TransportMessage m) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 862\r\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder builder, TransportMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1077\r\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1026\r\n   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 414\r\n14:58:53.518 [Worker.5] DEBUG NServiceBus.Unicast.UnicastBus - Received message with ID 2bded613-957c-42ab-9365-d3f6fa880b33\\10339 from sender mypublisherinputqueue@hal9000\r\n14:58:53.532 [Worker.5] WARN  NServiceBus.Unicast.Transport.Transactional.TransactionalTransport - Failed raising 'transport message received' event for message with ID=2bded613-957c-42ab-9365-d3f6fa880b33\\10339\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.MessageHeaders.Bootstrapper.<Run>b__0(IMessage msg, String key) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\headers\\NServiceBus.MessageHeaders\\Bootstrapper.cs:line 16\r\n   at NServiceBus.ExtensionMethods.GetHeader(IMessage msg, String key) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\core\\NServiceBus\\ExtensionMethods.cs:line 33\r\n   at NServiceBus.ExtensionMethods.GetOriginatingSiteHeader(IMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\core\\NServiceBus\\ExtensionMethods.cs:line 75\r\n   at NServiceBus.Gateway.HeaderManagement.GatewayHeaderManager.MutateIncoming(IMessage message) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\gateway\\NServiceBus.Gateway\\HeaderManagement\\GatewayHeaderManager.cs:line 14\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass1a.<ApplyIncomingMessageMutatorsTo>b__19(IMutateIncomingMessages m) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 891\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Unicast.UnicastBus.ApplyIncomingMessageMutatorsTo(IBuilder builder, IMessage originalMessage) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 889\r\n   at NServiceBus.Unicast.UnicastBus.HandleMessage(IBuilder builder, TransportMessage m) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 862\r\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder builder, TransportMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1077\r\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1026\r\n   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 414\r\n14:58:53.549 [Worker.5] DEBUG NServiceBus.Unicast.UnicastBus - Received message with ID 2bded613-957c-42ab-9365-d3f6fa880b33\\10339 from sender mypublisherinputqueue@hal9000\r\n14:58:53.563 [Worker.5] WARN  NServiceBus.Unicast.Transport.Transactional.TransactionalTransport - Failed raising 'transport message received' event for message with ID=2bded613-957c-42ab-9365-d3f6fa880b33\\10339\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.MessageHeaders.Bootstrapper.<Run>b__0(IMessage msg, String key) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\headers\\NServiceBus.MessageHeaders\\Bootstrapper.cs:line 16\r\n   at NServiceBus.ExtensionMethods.GetHeader(IMessage msg, String key) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\core\\NServiceBus\\ExtensionMethods.cs:line 33\r\n   at NServiceBus.ExtensionMethods.GetOriginatingSiteHeader(IMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\core\\NServiceBus\\ExtensionMethods.cs:line 75\r\n   at NServiceBus.Gateway.HeaderManagement.GatewayHeaderManager.MutateIncoming(IMessage message) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\gateway\\NServiceBus.Gateway\\HeaderManagement\\GatewayHeaderManager.cs:line 14\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass1a.<ApplyIncomingMessageMutatorsTo>b__19(IMutateIncomingMessages m) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 891\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Unicast.UnicastBus.ApplyIncomingMessageMutatorsTo(IBuilder builder, IMessage originalMessage) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 889\r\n   at NServiceBus.Unicast.UnicastBus.HandleMessage(IBuilder builder, TransportMessage m) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 862\r\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder builder, TransportMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1077\r\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1026\r\n   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 414\r\n14:58:53.582 [Worker.5] DEBUG NServiceBus.Unicast.UnicastBus - Received message with ID 2bded613-957c-42ab-9365-d3f6fa880b33\\10339 from sender mypublisherinputqueue@hal9000\r\n14:58:53.596 [Worker.5] WARN  NServiceBus.Unicast.Transport.Transactional.TransactionalTransport - Failed raising 'transport message received' event for message with ID=2bded613-957c-42ab-9365-d3f6fa880b33\\10339\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.MessageHeaders.Bootstrapper.<Run>b__0(IMessage msg, String key) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\headers\\NServiceBus.MessageHeaders\\Bootstrapper.cs:line 16\r\n   at NServiceBus.ExtensionMethods.GetHeader(IMessage msg, String key) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\core\\NServiceBus\\ExtensionMethods.cs:line 33\r\n   at NServiceBus.ExtensionMethods.GetOriginatingSiteHeader(IMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\core\\NServiceBus\\ExtensionMethods.cs:line 75\r\n   at NServiceBus.Gateway.HeaderManagement.GatewayHeaderManager.MutateIncoming(IMessage message) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\gateway\\NServiceBus.Gateway\\HeaderManagement\\GatewayHeaderManager.cs:line 14\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass1a.<ApplyIncomingMessageMutatorsTo>b__19(IMutateIncomingMessages m) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 891\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Unicast.UnicastBus.ApplyIncomingMessageMutatorsTo(IBuilder builder, IMessage originalMessage) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 889\r\n   at NServiceBus.Unicast.UnicastBus.HandleMessage(IBuilder builder, TransportMessage m) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 862\r\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder builder, TransportMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1077\r\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1026\r\n   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 414\r\n14:58:53.614 [Worker.5] DEBUG NServiceBus.Unicast.UnicastBus - Received message with ID 2bded613-957c-42ab-9365-d3f6fa880b33\\10339 from sender mypublisherinputqueue@hal9000\r\n14:58:53.628 [Worker.5] WARN  NServiceBus.Unicast.Transport.Transactional.TransactionalTransport - Failed raising 'transport message received' event for message with ID=2bded613-957c-42ab-9365-d3f6fa880b33\\10339\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.MessageHeaders.Bootstrapper.<Run>b__0(IMessage msg, String key) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\headers\\NServiceBus.MessageHeaders\\Bootstrapper.cs:line 16\r\n   at NServiceBus.ExtensionMethods.GetHeader(IMessage msg, String key) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\core\\NServiceBus\\ExtensionMethods.cs:line 33\r\n   at NServiceBus.ExtensionMethods.GetOriginatingSiteHeader(IMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\core\\NServiceBus\\ExtensionMethods.cs:line 75\r\n   at NServiceBus.Gateway.HeaderManagement.GatewayHeaderManager.MutateIncoming(IMessage message) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\gateway\\NServiceBus.Gateway\\HeaderManagement\\GatewayHeaderManager.cs:line 14\r\n   at NServiceBus.Unicast.UnicastBus.<>c__DisplayClass1a.<ApplyIncomingMessageMutatorsTo>b__19(IMutateIncomingMessages m) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 891\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Unicast.UnicastBus.ApplyIncomingMessageMutatorsTo(IBuilder builder, IMessage originalMessage) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 889\r\n   at NServiceBus.Unicast.UnicastBus.HandleMessage(IBuilder builder, TransportMessage m) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 862\r\n   at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder builder, TransportMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1077\r\n   at NServiceBus.Unicast.UnicastBus.TransportMessageReceived(Object sender, TransportMessageReceivedEventArgs e) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\unicast\\NServiceBus.Unicast\\UnicastBus.cs:line 1026\r\n   at System.EventHandler`1.Invoke(Object sender, TEventArgs e)\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.OnTransportMessageReceived(TransportMessage msg) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 414\r\n14:58:53.644 [Worker.5] ERROR NServiceBus.Faults.InMemory.FaultManager - Message processing always fails for message with ID 2bded613-957c-42ab-9365-d3f6fa880b33\\10339.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.ProcessMessage() in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 279\r\n   at NServiceBus.Utils.TransactionWrapper.RunInTransaction(Action callback, IsolationLevel isolationLevel, TimeSpan transactionTimeout) in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\utils\\TransactionWrapper.cs:line 34\r\n   at NServiceBus.Unicast.Transport.Transactional.TransactionalTransport.Process() in c:\\Users\\CaptN\\Dev\\Github\\NServiceBus\\src\\impl\\unicast\\transport\\NServiceBus.Unicast.Transport.Transactional\\TransactionalTransport.cs:line 208\r\n14:58:53.647 [Worker.5] ERROR NServiceBus.Unicast.Transport.Transactional.TransactionalTransport - Message has failed the maximum number of times allowed, ID=2bded613-957c-42ab-9365-d3f6fa880b33\\10339.\r\n"
87,'','NinjectObjectBuilder child container binding traversal\nFix issue where HasComponent was only checking if a binding was present in the child kernel instead of all the way up the chain.'
86,'','StructureMap builder is not strong named\n'
85,'','Move the commonassemblyinfo generation from nant to psake\nAs a first step towards psake we should move the generation of the commonassemblyinfo.cs out to psake instead.\r\n\r\n* Modify the psake script accordingly (use the current nant target as a blueprint)\r\n* Pick the version from a VERSION.txt in the root\r\n* Pick the buildnr from teamcity (0 if not found)\r\n* Set the asmversion = Version.0\r\n* Set the asmfileversion = Version.Buildnumber\r\n* Remove the commonassemblyinfo from nant\r\n* Call psake and then nant from build.bat and build-3.5.bat '
84,'',"updating the master solution file's project references for the host --> the 4 hosting projects\n"
83,'','Create a nservicebus.tools package\nAdd all the tools + add the runner from runmefirst.bat so that users can do:\r\nNuget install nservicebus.tools\r\nNservicebus install-msmq //configures msmq using runner.exe'
82,'','V2.5 Incorrect deserialization of whitespaces\nThis fix solves the problem of exception appearing during deserialization of object when all its properties are null. See NestedObjectWithNullPropertiesShouldBeSerialized test that fails with "System.InvalidCastException: Unable to cast object of type \'System.String\' to type" without this fix.'
81,'',"Create a nsb25 sp1 from the latest build from Teamcity\n* Get the latest 2.5 builds from teamcity.codebetter.com\r\n\r\n* Create both a standard and community version of the .zip file (both 3.5 and 4.0, take a look at the download from nsb.com for reference)\r\n\r\n* Report when done so that we can upload both zip's to the website\r\n\r\n* Update our 2.5 nuget package with the latest community edition (including the processes)\r\n\r\n* Push to nuget (don't delete the old one from nuget!)"
80,'','Create and upload 2.5 package for all the "processes"\n* Include all of our processes\r\n* They are self contained so no dependency is needed'
79,'','Add packages for the different containers to the build script\nAdd packages and dependencies to the container package + the nservicebus package'
78,'','Create and upload 2.5 packages for the different containers\nManually create the packages and add the corresponding dependencies (container + NServiceBus package)'
77,'','Fix bug in InMemoryPersister issues #19\n'
76,'','Tuple support for XMLSerializer\nAdded support for Message properties of type Tuple<> to the XMLSerializer.  \r\n\r\nSee [issue #75](https://github.com/NServiceBus/NServiceBus/issues/75).\r\n\r\nAlso added for support for KeyValuePair<> types (as these are similar to a Tuple anyway).'
75,'','Tuple properties not supported by XML serializer\nMessages containing properties of type [Tuple](http://msdn.microsoft.com/en-us/library/dd387181.aspx) cause the XML serializer to throw an exception. '
74,'','Add support for HashSet<T> to XML Serializer\nAt the moment you get a StackOverflowException if you attempt to use the ISet<T> or HashSet<T> type on messages. It would be good if you could add support for this?'
73,'','Move the nuget things to a NuGet folder in the root\n"Packages" will soon be used to contain our own package references so we need to move the packit things to \r\n\r\n/master/nuget\r\n\r\nLook at Simple.Data for inspiration (I like the naming and folder structure)\r\n\r\nhttps://github.com/markrendle/Simple.Data/tree/master/NuGet'
72,'johnsimons',' DBSubscriptionStorageConfig, NHibernateProperties not typed as NServiceBus.Config.NHibernatePropertyCollection\nThe property NHibernateProperties is typed as NServiceBus.Unicast.Subscriptions.NHibernate.Config.NHibernatePropertyCollection instead of \r\nNServiceBus.Config.NHibernatePropertyCollection like how its defined in the NHibernateSagaPersisterConfig class.\r\n\r\nThere is no reason why these types should be different in both these classes.\r\n\r\nThis causes problems, when I try to add code to load both these configurations from the database assigning NHibernateProperties in code.\r\n\r\n\r\n'
71,'','NServiceBus.ObjectBuilder.CastleWindsor assembly version\nThe assembly version for the 2.5.1 release of NServiceBus.ObjectBuilder.CastleWindsor on nuget is incorrect. It is built as 1.0.0.0\r\n'
70,'','Add the NServiceBus.Testing (3.0) package to the build script\nInclude NServiceBus.Testing.dll'
69,'','Create and push the NServiceBus.Testing (2.5) package\nManual like we did before. Include NServiceBus.Testing.dll'
68,'',"Running powershell in net4.0 mode?\nAre we 100% sure that we need to do this for nuget to work?  \r\n\r\nThe reason I ask is that I have a hunch that it won't work on the buildservers since we can run as admin."
67,'','The script continues and creates a package (ok) with the dll.s from the previous build. \nThe script needs to aborted when compilation fails'
66,'','The script waits for user input:  "Do you want to upload the NuGet packages to the NuGet server?",  This wont work on the build server, upload only if it has been specified on the commandline the\n'
65,'','Dictionary<string,object> deserialization problem\nHi,\r\nI\'m sending message that contains Dictionary<string, object> property. Serialization works fine, but dictionary values disappear during deserialization. Dictionary contains pairs  like <string, int>, <string, decimal>, <string, string> etc. \r\nAfter spending some times debugging I found out that problem is related with this part of code: \r\n\r\n    public class MessageSerializer\r\n        private object GetPropertyValue(Type type, XmlNode n) {\r\n            foreach (XmlNode xn in n.ChildNodes) // go over KeyValuePairs\r\n            {\r\n                object key = null;\r\n                object value = null;\r\n\r\n                foreach (XmlNode node in xn.ChildNodes)\r\n                {\r\n                    if (node.Name == "Key")\r\n                        key = GetObjectOfTypeFromNode(keyType, node);\r\n                        // node.Name for pairs in my dictionary are string:Value, decimal:Value, int32:Value, so none of these values are deserialized\r\n                        if (node.Name == "Value")\r\n                            value = GetObjectOfTypeFromNode(valueType, node);\r\n                }\r\n\r\n                if (result != null && key != null) result[key] = value;\r\n            }\r\n\r\n\r\nAdding "else if" block fixed this: \r\n\r\n    if (node.Name == "Value") {\r\n        value = GetObjectOfTypeFromNode(valueType, node);\r\n    } \r\n    if (node.Name == "Value") {\r\n        value = GetObjectOfTypeFromNode(valueType, node);\r\n    }\r\n    else if (node.Name.Contains(":")) // should I use .EndsWith(":Value") instead?\r\n    {\r\n        Type dictValueType = Type.GetType("System." + node.Name.Substring(0, node.Name.IndexOf(":")), false, true);                        \t\r\n        value = GetObjectOfTypeFromNode(dictValueType, node);\r\n    }\r\n\r\n'
64,'','strong name NServiceBus.ObjectBuilder.StructureMap262.dll\n'
63,'',"Remove the extra dll's folder and pdb:s from the nservicebus package\nThe following files are installed when I install the 3.0.0.0 package    \r\n\r\nDirectory: C:\\Users\\andreas.ohlund\\nsbnuget\\NServiceBus.3.0.0.0\\lib\\net35\r\n\r\n\r\nMode                LastWriteTime     Length Name\r\n----                -------------     ------ ----\r\nd----        2011-06-08     21:20            containers\r\nd----        2011-06-08     21:20            x64\r\n-a---        2011-06-08     21:20     270336 log4net.dll\r\n-a---        2011-06-08     21:20    3760128 NServiceBus.Core.dll\r\n-a---        2011-06-08     21:20    8168960 NServiceBus.Core.pdb\r\n-a---        2011-06-08     21:20    3014021 NServiceBus.Core.xml\r\n-a---        2011-06-08     21:20      22016 NServiceBus.dll\r\n-a---        2011-06-08     21:20     669184 NServiceBus.Host.exe\r\n-a---        2011-06-08     21:20    1504768 NServiceBus.Host.pdb\r\n-a---        2011-06-08     21:20      36272 NServiceBus.Host.xml\r\n-a---        2011-06-08     21:20     669184 NServiceBus.Host32.exe\r\n-a---        2011-06-08     21:20    1504768 NServiceBus.Host32.pdb\r\n-a---        2011-06-08     21:20      36274 NServiceBus.Host32.xml\r\n-a---        2011-06-08     21:20      48640 NServiceBus.pdb\r\n-a---        2011-06-08     21:20     338944 NServiceBus.Testing.dll\r\n-a---        2011-06-08     21:20     794112 NServiceBus.Testing.pdb\r\n-a---        2011-06-08     21:20     273965 NServiceBus.Testing.xml\r\n-a---        2011-06-08     21:20      53011 NServiceBus.xml\r\n-a---        2011-06-08     21:20     135168 nunit.framework.dll\r\n-a---        2011-06-08     21:20     886272 System.Data.SQLite.DLL"
62,'','Packit fails\nI get the following error when running packit: (why am I getting promted for the OnlyUseLatestCLR)\r\n\r\nPS C:\\Users\\andreas.ohlund\\dev\\NServiceBus\\packages\\nuget\\PackagingUtils> .\\packit.ps1\r\nValue OnlyUseLatestCLR exists, overwrite(Yes/No)? Y\r\nThe operation completed successfully.\r\nValue OnlyUseLatestCLR exists, overwrite(Yes/No)? Y\r\nThe operation completed successfully.\r\nRename-Item : Cannot create a file when that file already exists.\r\nAt C:\\Users\\andreas.ohlund\\dev\\NServiceBus\\packages\\nuget\\PackagingUtils\\RunOnce.ps1:4 char:12\r\n+ Rename-Item <<<<  ./RunOnce.ps1 NeverRunMeAgain.txt\r\n    + CategoryInfo          : WriteError: (C:\\Users\\andrea...ils\\RunOnce.ps1:String) [Rename-Item], IOException\r\n    + FullyQualifiedErrorId : RenameItemIOError,Microsoft.PowerShell.Commands.RenameItemCommand\r\n\r\nPlease restart and execute me a again\r\nPS C:\\Users\\andreas.ohlund\\dev\\NServiceBus\\packages\\nuget\\PackagingUtils> .\\packit.ps1\r\nValue OnlyUseLatestCLR exists, overwrite(Yes/No)? Y\r\nThe operation completed successfully.\r\nValue OnlyUseLatestCLR exists, overwrite(Yes/No)? Y\r\nThe operation completed successfully.\r\nRename-Item : Cannot create a file when that file already exists.\r\nAt C:\\Users\\andreas.ohlund\\dev\\NServiceBus\\packages\\nuget\\PackagingUtils\\RunOnce.ps1:4 char:12\r\n+ Rename-Item <<<<  ./RunOnce.ps1 NeverRunMeAgain.txt\r\n    + CategoryInfo          : WriteError: (C:\\Users\\andrea...ils\\RunOnce.ps1:String) [Rename-Item], IOException\r\n    + FullyQualifiedErrorId : RenameItemIOError,Microsoft.PowerShell.Commands.RenameItemCommand\r\n\r\nPlease restart and execute me a again'
61,'','Remove build-net40.bat\nRemove the build-net4.0.bat-> we already have a build.bat that builds for net4 so you can use that one instead.\n\nI also suggest that you add a psake script in the root that does all the things you need (call nant for now) and then the copy and then packit.ps1\n'
60,'','Manual creation of the 2.5 package\nThe current public package is a mess and needs to be cleaned up , we can do this manually for now:\r\n\r\n1. Download the official 2.5 edition from nservicebus.com\r\n2. Create a nservicebus package without any pdb files and with a log4net dep\r\n3. Create a nservicebus.host package without any pdb files and with a nservicebus dep\r\n4. Push to nuget\r\n'
59,'johnsimons',"FileLoadException\nA FileLoadException (Could not load file or assembly. Access is denied.) is being thrown by the HostServiceLocator on line 25 (NServiceBus v2.5) when starting many endpoints simultaneously (Easy to repro with 20+ endpoints). This doesn't seem to be a problem with windows file system permissions or background indexers/virus scanners deadlocking the files.\n\n```\nMagnum.StateMachine.StateMachineException was unhandled\nMessage=Exception occurred in\nTopshelf.Internal.ServiceController`1[[NServiceBus.Host.Internal.GenericHost,\nNServiceBus.Host, Version=2.0.0.0, Culture=neutral,\nPublicKeyToken=9fc386479f8a226c]] during state Initial while handling OnStart\nSource=NServiceBus.Host\nStackTrace:\nServer stack trace:\nat Magnum.StateMachine.ExceptionActionDictionary`1.HandleException(T\nstateMachine, Event event, Object parameter, Exception exception)\nat Magnum.StateMachine.EventActionList`1.Execute(T stateMachine, Event\nevent, Object parameter)\nat Magnum.StateMachine.State`1.RaiseEvent(T instance, BasicEvent`1\neevent, Object value)\nat Magnum.StateMachine.StateMachine`1.RaiseEvent(Event raised)\nat\nSystem.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr\nmd, Object[] args, Object server, Int32 methodPtr, Boolean fExecuteInContext,\nObject[]& outArgs)\nat\nSystem.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage\nmsg, Int32 methodPtr, Boolean fExecuteInContext)\nException rethrown at [0]:\nat System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage\nreqMsg, IMessage retMsg)\nat System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&\nmsgData, Int32 type)\nat Topshelf.Internal.ServiceControllerProxy.Start()\nat Topshelf.Internal.ServiceCoordinator.Start()\nat Topshelf.Internal.Hosts.ConsoleHost.Run()\nat NServiceBus.Host.Program.Main(String[] args)\nInnerException:\nMessage=Exception when starting endpoint, error has been logged. Reason:\nCould not load file or assembly 'file:///MyEndpoint.dll' or one of its dependencies.\nAccess is denied.\nSource=NServiceBus.Host\nStackTrace:\nat NServiceBus.Host.Internal.GenericHost.Start()\nat Magnum.StateMachine.EventActionList`1.Execute(T stateMachine,\nEvent event, Object parameter)\nInnerException:\n```"
58,'','Always use an NH transaction even if ambient transaction exists (2.5)\n(This is a port from pull request #57 to v2.5)\r\n\r\nWhen using NHibernate with TransactionScope, best practice is to also use a regular session.BeginTransaction() as well. If BeginTransaction is not used, NH might leak connections in certain circumstances, especially if an exception occurs.\r\n\r\nThis pull request makes sure that an NH transaction is always created.'
57,'','Always use an NH transaction even if ambient transaction exists\n\r\nWhen using NHibernate with TransactionScope, best practice is to also use a regular session.BeginTransaction() as well. If BeginTransaction is not used, NH might leak connections in certain circumstances, especially if an exception occurs.\r\n\r\nThis pull request makes sure that an NH transaction is always created.'
56,'','Upgraded Castle Builder to use latest version of Castle\nupgraded Castle Container to use latest version, Castle.Core 2.5.2.0 and Castle.Windsor 2.5.3.0'
55,'','NServiceBus.Host package should configure the project to run NServiceBus.Host.exe for debug  \n Edit "Start external program" user configuration of the project to use NServiceBus.Host.exe'
54,'',"Installer chokes with the StructureMapBuilder plugging INeedToInitializeSomething into itself\nWhen stating up the Generic Host from the console using CustomInitialization to set the StructureMapBuilder I was getting the following exception:\r\n\r\nUnhandled Exception: \r\nMagnum.StateMachine.StateMachineException: Exception occurred in Topshelf.Internal.ServiceController`1[[NServiceBus.Hos\r\nting.Windows.WindowsHost, NServiceBus.Host32, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c]] durin\r\ng state Initial while handling OnStart ---> System.Exception: Exception when starting endpoint, error has been logged. \r\nReason: StructureMap configuration failures\r\nError:  104\r\nSource:  Registry:  StructureMap.Configuration.DSL.Registry, StructureMap, Version=2.6.2.0, Culture=neutral, PublicKeyToken=e60ad81abae3c223 Type Instance 'b9b47db6-ca34-433c-878d-7c05092dc29b' (Configured Instance of NServiceBus.Installation.INeedToInstallSomething, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c) cannot be plugged into type NServiceBus.Installation.INeedToInstallSomething, NServiceBus.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=9fc386479f8a226c\r\n\r\nTurns out that Installer.cs:45-46 was telling the container to register all types that implement INeedToInstallSomething and, at least when using the StructureMapBuilder, that included the interface INeedToInstallSomething itself.  StructureMap complained that the interface was not a valid instance to plug into the interface; adding this patch resolved the issue."
52,'','Create the NServiceBus package\nThe host package fails to install because it depends on the NServiceBus package '
51,'','Remove the NServiceBus.Host.exe.config manipulation\nThere should be no need to explicitly point to a endpoint config class the that part of host package can be removed'
50,'','Add nuget.exe to the tools directory\nInclude nuget.exe in our source in order to not require the build server to have it installed.\r\n\r\nPut it into ./tools/nuget/\r\n'
49,'','Add the full file version to the package name\nNServiceBus.Host.2.5.nupkg -> NServiceBus.Host.2.5.0.1446'
48,'',"Fix emptylist serializing\nThe default XML serializer throws an exception when deserializing an empty list containing complex types:\n\n```csharp\nSystem.InvalidCastException: Unable to cast object of type 'System.String' to type 'System.Collections.Generic.List`1[Messages.File.FileProcessResult]'.\nat SetResults(Object , Object )\nat NServiceBus.Serializers.XML.MessageSerializer.GetObjectOfTypeFromNode(Type t, XmlNode node) in c:\\SVN\\NServiceBus\\src\\impl\\Serializers\\NServiceBus.Serializers.XML\\MessageSerializer.cs:line 383\nat NServiceBus.Serializers.XML.MessageSerializer.Process(XmlNode node, Object parent) in c:\\SVN\\NServiceBus\\src\\impl\\Serializers\\NServiceBus.Serializers.XML\\MessageSerializer.cs:line 336\nat NServiceBus.Serializers.XML.MessageSerializer.Deserialize(Stream stream) in c:\\SVN\\NServiceBus\\src\\impl\\Serializers\\NServiceBus.Serializers.XML\\MessageSerializer.cs:line 275\nat NServiceBus.Unicast.Transport.Msmq.MsmqTransport.ReceiveFromQueue() in c:\\SVN\\NServiceBus\\src\\impl\\unicast\\NServiceBus.Unicast.Msmq\\MsmqTransport.cs:line 469\n```\n\nI patched the serializer to handle this case and added the appropriate unit tests. All existing serializer tests still pass."
47,'','Timeoutmanager utc fix\nThis patch ensures that TimeoutMessage keeps the timezone of the input DateTime in mind when converting to Utc.'
46,'','Added testing methods to saga\n'
45,'','Testing additions\nWe added some testing methods to Saga and took a few from another pull request.\r\nIt is now possible to test a saga for ExpectNotPublish and ExpectHandleCurrentMessageLater.'
44,'','Timeoutmanager utc fix\nThis is a fix for issue #31. It makes sure the TimeoutMessage respects the DateTimeKind of the DateTime that is being put in, without always assuming it is Utc.\r\n\r\nThis was a bug, since Saga.RequestTimeout puts in DateTime.Now instead of DateTime.UtcNow.'
43,'','Publish<TMessage> without Action does not publish\nJust spent several hours overlooking my nservicebus configurations till I found out that the following code is syntactically correct but does not publish the message:\n\nthis.Bus.Publish<IDiscoverMachineMessage>();\n\nwhen I use this.Bus.Publish<IDiscoverMachineMessage>(m => { });\n\nv2.5\n\nit works!'
42,'',"Use upgrade lock when fetching saga from db to get blocking behavior\nHi,\r\n\r\nAccording to Udi, if 2 messages arrive at the same time to a saga then one of the message handlers will block if the transaction isolation level is at least repeatable read. However, repeatable read is not enough, the select statement needs to use an upgrade lock as well, otherwise both the handlers will run and eventually one of them will deadlock. This is tested and confirmed when using MS Sql Server.\r\n\r\nThis pull request puts upgrade locks on both Get-methods in the NHibernate SagaPersister. I have tested the fix using a modified manufacturing sample and it does not deadlock after the fix.\r\n\r\nHowever, there are some potential problems with this fix that should be considered. \r\n\r\n1. Message throughput might be slower. For example 2 message handlers that don't change saga state would not deadlock anyway and in that case an upgrade lock would just slow them down.\r\n2. I put an upgrade lock on the Get method that uses a mapped property. For this to be efficient, that property needs a unique constraint, otherwise the entire table will be locked which could severely affect performance. When using the automapping feature in NSB it looks like it does NOT create a unique constraint on the mapped properties so this might be a problem.\r\n\r\nI decided to send this pull request anyway, since the expected behavior of the sagapersister is to block. However, maybe it would be better to have it as a configurable setting on the sagapersister instead...\r\n\r\nRegards,\r\nJohannes\r\n\r\nPS. How does the RavenDB persister behave? Is that supposed to block as well? DS."
41,'','Create overload OnMessage on Handler in Testing framework(now with fix lineending)\nI have created a overload for OnMessage on Handler in testing framework.\r\nto support messages that need a create to be send on the bus.'
40,'','Create overload OnMessage on Handler in Testing framework\nI have created a overload for OnMessage on Handler in testing framework.\r\nto support messages that need a create to be send on the bus. '
39,'','Fixed bug in NinjectObjectBuilder\nFixed bug in NinjectObjectBuilder. When a singleton is registered the lookupType is also tracked in the property heuristic. Without this when for example the ISessionFactory is built all types relying on ISessionFactory to be property injected would throw a NullReferenceException.'
38,'','Fix: Exception got thrown when deserializing an array with whitespace between the childnodes.\nHi,\r\n\r\nI got exceptions when trying to deserialize messages with arrays. It tried to parse nodes with whitespace and convert them to array items. This pull request contains a unittest + fix.\r\n\r\nThanks\r\n\r\n/Johannes'
37,'','Return to source queue is using the wrong source queue\nGot the following from Thor Halvor Frivold:\r\n\r\nWhen doing this i looked at the ReturnToSourceQueue in the git trunk:\r\n                var message = queue.ReceiveById(messageId, TimeoutDuration, MessageQueueTransactionType.Automatic);\r\n\r\n                if (message == null)\r\n                    Console.WriteLine(NoMessageFoundErrorFormat, messageId);\r\n                else\r\n                    using (var q = message.ResponseQueue)\r\n                        q.Send(message, MessageQueueTransactionType.Automatic);\r\n\r\nthis is incorrect and will send the message back to original Sender (who does not have an endpoint for this endpoint and it is therefore lost) (and sometimes the responsequeue element is not even there)\r\n\r\nThe correct code is in the exe packed in the downloadable code. (code which gets the responsequeue from the <failedqueue> element in the label)\r\nstring failedQueue = MsmqTransport.GetFailedQueue(m); m.Label = MsmqTransport.GetLabelWithoutFailedQueue(m); using (MessageQueue queue = new MessageQueue(failedQueue)) { Console.WriteLine("Returning message with id " + messageId + " to queue " + failedQueue); queue.Send(m, MessageQueueTransactionType.Automatic); }\r\n'
36,'andreasohlund','InMemorySagaPersister is not thread-safe\nRunning the InMemorySagaPersister under high load and with multiple worker threads causes "Collection has been modified" exceptions in the Get method. The Save methods potentially corrupt the dictionary.'
35,'',"NuGet Implementation\nI have been using 2.5 through NuGet and it's been wonderful except for one thing. Every time I add a reference and all I want in just NServiceBus.dll and NServiceBus.Core.dll I get all of the other extraneous dlls for the various DI containers and such.\r\n\r\nIt would be great if NServiceBus was broken down more like Castle Windsor. Perhaps you could have a package that just had NServicesBus.dll and NServiceBus.Core.dll and call it something like NServiceBus Core and then one for Host that then referenced the core. You could even separate the DI containers as well.\r\n"
34,'',"V2.5\nWe have found an issue with the runner utility\r\n\r\nMSMQ is not configured correctly for use with NServiceBus\r\n2011-04-18 16:34:45,453 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Checking\r\n if MSMQ is installed.\r\n2011-04-18 16:34:45,625 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - MSMQ is\r\nnot installed. Going to install.\r\n2011-04-18 16:34:45,625 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Creating\r\n installation instruction file.\r\n2011-04-18 16:34:45,625 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Installa\r\ntion instruction file created.\r\n2011-04-18 16:34:45,625 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Invoking\r\n MSMQ installation.\r\n2011-04-18 16:34:45,734 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Waiting\r\nfor process to complete.\r\n2011-04-18 16:34:54,328 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Installa\r\ntion of MSMQ successful.\r\n2011-04-18 16:34:54,359 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - MSMQ sta\r\ntus is NOT Running. Changing status...\r\nUnhandled Exception: System.InvalidOperationException: Cannot start service MSMQ\r\n on computer '.'. ---> System.ComponentModel.Win32Exception: Es wird bereits ein\r\ne Instanz des Dienstes ausgeführt\r\n   --- End of inner exception stack trace ---\r\n   at System.ServiceProcess.ServiceController.Start(String[] args)\r\n   at System.ServiceProcess.ServiceController.Start()\r\n   at NServiceBus.Utils.ProcessUtil.ChangeServiceStatus(ServiceController contro\r\nller, ServiceControllerStatus status, Action changeStatus)\r\n   at NServiceBus.Utils.MsmqInstallation.StartMsmqIfNecessary()\r\n   at Runner.Program.Main(String[] args)\r\n\r\nChanged to better exception handling and do not try to start service when already running."
33,'',"V2.5\nWe have found an issue with the runner utility\r\n\r\nMSMQ is not configured correctly for use with NServiceBus\r\n2011-04-18 16:34:45,453 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Checking\r\n if MSMQ is installed.\r\n2011-04-18 16:34:45,625 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - MSMQ is\r\nnot installed. Going to install.\r\n2011-04-18 16:34:45,625 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Creating\r\n installation instruction file.\r\n2011-04-18 16:34:45,625 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Installa\r\ntion instruction file created.\r\n2011-04-18 16:34:45,625 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Invoking\r\n MSMQ installation.\r\n2011-04-18 16:34:45,734 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Waiting\r\nfor process to complete.\r\n2011-04-18 16:34:54,328 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - Installa\r\ntion of MSMQ successful.\r\n2011-04-18 16:34:54,359 [1] DEBUG NServiceBus.Utils [(null)] <(null)> - MSMQ sta\r\ntus is NOT Running. Changing status...\r\nUnhandled Exception: System.InvalidOperationException: Cannot start service MSMQ\r\n on computer '.'. ---> System.ComponentModel.Win32Exception: Es wird bereits ein\r\ne Instanz des Dienstes ausgeführt\r\n   --- End of inner exception stack trace ---\r\n   at System.ServiceProcess.ServiceController.Start(String[] args)\r\n   at System.ServiceProcess.ServiceController.Start()\r\n   at NServiceBus.Utils.ProcessUtil.ChangeServiceStatus(ServiceController contro\r\nller, ServiceControllerStatus status, Action changeStatus)\r\n   at NServiceBus.Utils.MsmqInstallation.StartMsmqIfNecessary()\r\n   at Runner.Program.Main(String[] args)\r\n\r\nChanged to better exception handling and do not try to start service when already running."
32,'',"Support configurable msg.TimeToBeReceived on Audit Queue so that msg's can auto expire\n"
31,'','Saga<T>.RequestTimeout does not respect DateTimeKind\nWhen passing a DateTime of kind Utc, the subsctract of DateTime.Now can result in the wrong result.\r\n\r\n        protected void RequestTimeout(DateTime at, object withState)\r\n        {\r\n            RequestTimeout(at - DateTime.Now, withState);\r\n        }\r\n\r\nShould be:\r\n\r\n        protected void RequestTimeout(DateTime at, object withState)\r\n        {\r\n            RequestTimeout(at.ToLocalTime() - DateTime.Now, withState);\r\n        }'
30,'','NServiceBus.Testing.Handler.ExpectNotPublish\nAdded an ExpectNotPublish method to NServiceBus.Testing.Handler, and fleshed out the unit tests a bit to exercise it.  This work should maybe be replicated for the other Expects: ExpectNotReply, ExpectNotSend, etc.\r\n\r\nSee discussion here: http://tech.groups.yahoo.com/group/nservicebus/message/9992'
29,'',"RavenDb Saga persistence & subscription storage\nI ported over the RavenSagaPersister from the contrib & implemented subscription storage. For now, it's defaulting the Raven database to the assembly name of the endpoint. However, this will end up being the endpoint name when we get the auto config stuff done.\r\n\r\nI tried to make it to where the 2 components can be configured to use the same Document Store or to use their own. This will help out when we use them in the auto-configuration features.\r\n\r\nNote: Unsubscribe is broken. I'll try to fix that shortly."
28,'','Upgraded Windsor to 2.5.3\nThis pull request upgrades the Windsor builder to use v2.5.3.\n\nI used the .net 3.5 version of the assemblies so that it would be compatible with both net4.0 and net3.5 releases.\n\nI had a challenge:\n- In https://github.com/johnsimons/NServiceBus/commit/d8524d53094e8181716e771c1023e968132abc15#L13R127 I changed this to be by default transient, but that breaks UoW_components_in_the_parent_container_should_be_singletons_in_the_child_container unit test, so I exclude it https://github.com/johnsimons/NServiceBus/commit/d8524d53094e8181716e771c1023e968132abc15#L15R45\n\nWhat I found interesting is that the unit test says that "components in the parent container should be singletons in the child container" but then most implementations of the builders use transient has the lifecycle for InstancePerUnitOfWork. Just wondering if this is correct at all?'
27,'','Included ninject object builder in build\nSorry I took very long :( I was very busy...'
26,'','Second try ninject object builder\nHopefully this time with correct line endings'
25,'','Changed to use HttpRuntime.BinDirectory for the scanning of assemblies when using WithWeb()\nThe current solution uses AppDomain.CurrentDomain.DynamicDirectory which is a temp location used by ASP.NET that can contain the same Assembly multiple times.\r\nWith this change I think NServiceBus does not need to scan subfolders, speeding up the startup process.'
24,'',"Cannot use IP address in place of queue name\nNServiceBus.Utils.GetFullPath() states it will allow either an IP address or a machine name after the @ in a queue specifier. However when I try to use the IP address in the input queue name (so that replies are routed by IP address when the remote server can't resolve the name), NServiceBus.Unicast.Transport.Msmq.MsmqTransport.CheckConfiguration() throws and exception because it only accepts the machine name."
23,'','Test: Single_call_components_in_the_parent_container_should_be_singletons_in_the_child_container wrong?\n[Test]\r\n        public void Single_call_components_in_the_parent_container_should_be_singletons_in_the_child_container()\r\n        {\r\n            VerifyForAllBuilders(builder =>\r\n            {\r\n                builder.Configure(typeof(InstancePerUoWComponent), DependencyLifecycle.InstancePerUnitOfWork);\r\n\r\n                var nestedContainer = builder.BuildChildContainer();\r\n\r\n                Assert.AreEqual(nestedContainer.Build(typeof(InstancePerUoWComponent)), nestedContainer.Build(typeof(InstancePerUoWComponent)));\r\n            },\r\n             typeof(SpringObjectBuilder),\r\n            typeof(UnityObjectBuilder),\r\n            typeof(NinjectObjectBuilder));\r\n\r\nshould that be:\r\n\r\nThe description of the test does not match with the implemented specification. Is this copy paste to blame?\r\n\r\n\r\n        }'
22,'','Ninject Object Builder\nHy guys\r\nSorry that it took so long. I was very busy. Udi adviced to push it to contrib but in my point of view it suited better in the ObjectBuilder part and I had the generic tests to rely on.\r\n\r\nDaniel'
21,'udidahan','Specifying a DistributorControlAddress results in an exception\nBranch: master\n\nRepro:\n\nSpecify a DistributorControlAddress and a DistributorDataAddress in the App.config of MyServer in the RequestResponce sample and launch the debugger.\n\n(This also happens in my test project using different object builders)\n\nResult:\n\nNServiceBus.Grid.MessageHandlers.ReadyManager.SendReadyMessage()  (ReadyManager.cs line 41) is invoked before the Bus is initialised/started. This results in Transport.NumberOfWorkerThreads returning zero and Bus.Send(DistributorControlAddress, messages) (ReadyManager.cs line 70) being invoked with an empty set of messages. Even if messages where being sent the Bus would still exception as it is not yet started.\n\nThis means that buses cannot be configured to use Distributor.\n\nIt *looks* like SendReadyMessage() on the Grid.ReadyManager is being invoked too early during spin up.\n\nSorry I haven’t submitted an automated test\n'
20,'','exclude abstract types when searching for IConfigureThisEndpoint\nI was creating an endpoint configuration base (abstract) class in another assembly. \r\nNServiceBus complains about having multiple endpoint configurations.\r\n\r\nFixed this by excluding abstract types in the scanner. Tested and works.\r\n\r\nI applied this to Azure hosting too.'
19,'andreasohlund','InMemorySagaPersister throws InvalidCastException\nhttp://tech.groups.yahoo.com/group/nservicebus/message/9867'
18,'',"NHibernate sub. storage leaks connections\nHello,\n\nI experienced a connection leak when publishing messages. It looked like the subscriptionstorage never released the connections so I added a nhibernate transaction inside the transactionscope (which is best practice when using nh + transactionscope) and also comitted the transactions. After that the leaks stopped. I might add that I'm using NHibernate 3.0 GA with nsb which is why this might not have been discovered before, since nsb 2.5 uses nh 2.1.2.\n\nThanks\n/Johannes\n"
17,'',"Updating Azure SDK libraries to 1.3\nI had to make some changes to the Azure PubSub sample - it looks like some of the HttpContext and Azure objects are not available on the Application_Start event, or on the Azure RoleEntryPoint OnStart method.  Don't know enough about Azure to understand why I had to make these changes to make it work - but it does work now."
16,'','When exposing WCF endpoint, have it send automatically to Input Queue\nCurrently requires a UnicastBusConfig section to expose a WCF endpoint.'
15,'','Create queues at install time\nWhen using the generic host, create the queues as a part of the install process (as it will most likely be running under the admin privileges needed).'
14,'','MessageMapper AddCustomAttributeToProperty ArgumentNullException\nI found the bug in the MessageMapper implementation. Here is a detailed description of it:\r\n\r\nhttp://www.filedropper.com/nservicebus-messagemapper-bug\r\n\r\nIn short:\r\n\r\nWe have a message with a supressionattribute. The suppressionattribute does not have a default constructor. When the default constructor is acquired in AddCustomAttributeToProperty the constructor info is null. the next line does not check for null and creates a CustomAttributeBuilder with null as input argument. This fails.\r\n\r\nCould you fix that?\r\n\r\nDaniel\r\n'
13,'','NRE thrown when subscriber does not have MsmqTransportConfig defined\nWhen a subscriber does not have the MsmqTransportConfig section defined in its app.config file, an exception is thrown during Bus.Start (UnicastBus.cs, line 716) when it attempts call transport.Address.ToLower().  It should throw a more helpful exception, stating that a subscriber must have MsmqTransportConfig defined.\r\n\r\nThe documentation on NServiceBus.com regarding pub/sub also does not mention that a subscriber must have both UnicastBusConfig and MsmqTransportConfig sections defined.'
12,'','Updated NHibernate URL in acknowledgements text file. Also, terminated all URLs with forward slash for consistency.\n'
11,'','Generic Host Requires Configuration File\nin src\\hosting\\NServiceBus.Hosting.Windows\\Program.cs, a check is done(line 38) for a config file and always throws an error.  The expected result is to not throw the error, and informational message or warning could replace it.'
10,'','MessageMapper now populates custom attributes on derived instances\nAs per mailing list discussion (http://tech.groups.yahoo.com/group/nservicebus/message/9224)\r\n\r\nIncludes passing unit test.'
9,'','Saga autopersistence, added schema property to TableNameAttribute\nYou can now also specify the schema to autopersist to.'
8,'','Upgrade the host to use Topshelf 2.1\nWe need to upgrade and verify that everything works given that TS has removed the support for isolated services (separate appdomains)'
7,'','Endless loop when the faultmanager fails to handle a failed message\nRight now if there is an exception calling the fault manager we just rollback and there by causing an endless loop.\r\n\r\nWe should catch the error and log it as a fatal error and then exit the process to prevent the loss off messages.'
6,'andreasohlund','Make the transactional transport default to "transactional"\n Right now the transactional transport is non-transactional by default.\r\n\r\nI would suggest that we make it transactional by default and remove the\r\nTransactional() config method with NonTransactional()'
5,'','Upgrade to Autofac 2.3\nUpgrade the master to use Autofac 2.3'
4,'','Add a dependency lifecycle enum\ndeprecating the associated interface on the Configurer stuff which accepts ComponentCallEnum and then exposing a newer interface that works with a new DependencyLifecycle enum.  Under the hood the containers and builder stuff would work with DependencyLifecycle.\r\n\r\nThe names currently are:\r\n\r\n“None” means “the default for the container”, it’s not used anywhere.\r\n\r\n“Singleton” means the container will only construct one instance and all calls will return the same reference.\r\n\r\n“Singlecall” means that the container will build a new one each time “Build” is called.\r\n\r\n \r\n\r\nIn discussion with Andreas we determined that some different names might better to avoid confusion between the meaning of “Singlecall” and “Singleton”.  The names are:\r\n\r\nSingleInstance, formally Singleton\r\n\r\nInstancePerUnitOfWork\r\n\r\nInstancePerCall'
3,'',"Add support for Ninject to the trunk\nhttps://github.com/aaronjensen/nservicebus.objectbuilder.ninject\r\n\r\nDon't forget to add ninject to the test project as well"
2,'','The child container implementation for unity is broken\nSee the tests in When_using_childcontainers where unity is excluded'
1,'','The child container implementation for spring is broken\nSee the tests in When_using_childcontainers where spring is excluded'
2578,'','Samples. The best easy for newbies.\nAny sample console applications (Client and Server) for testing issues about MSMQ private queues ?\r\n\r\nConsole application in Client to send message and read message from/to private queue in Server.\r\n\r\nConsole application in Server to send message and read message from/toprivate queue.\r\n\r\n\r\nClient send Message A to private Queue in Server\r\n\r\nServer read Message A from private queue\r\n\r\nServer sendMessage B to private queue\r\n\r\nClient read Message B from private queue.\r\n\r\n\r\nConsole Application EXE is more easy. anyways, EXE can be installed like Windows Service in Server.\r\n\r\nany full source code sample in github?\r\n\r\n\r\nIMHO, the key important are good patterns and practices, and full source code samples using it \r\n\r\nAny final solution with full source code sample application ? IMHO, better samples for minimize learning curve are real applications with full source code and good patterns.\r\n'
2577,'','DiscardFailedMessagesInsteadOfSendingToErrorQueue still requires an error queue to be set\nThe following code throws an exception on the `Bus.Create` line.\r\n\r\n\tvoid Main()\r\n\t{\r\n\t\tvar busConfiguration = new BusConfiguration();\r\n\t\tbusConfiguration.EndpointName("Samples.DataBus.Server");\r\n\t\tbusConfiguration.UseSerialization<JsonSerializer>();\r\n\t\tbusConfiguration.UsePersistence<InMemoryPersistence>();\r\n\t\tbusConfiguration.EnableInstallers();\r\n\t\tbusConfiguration.DiscardFailedMessagesInsteadOfSendingToErrorQueue();\r\n\t\t\r\n\t\tusing (var bus = Bus.Create(busConfiguration))\r\n\t\t{\r\n\t\t\tbus.Start();\r\n\t\t\tConsole.WriteLine("To exit, Ctrl + C");\r\n\t\t\t\r\n\t\t\tConsole.ReadLine();\r\n\t\t}\r\n\t}\r\n\r\n> ConfigurationErrorsException: Faults forwarding requires an error queue to be specified. Please add a \'MessageForwardingInCaseOfFaultConfig\' section to your app.config\r\n or configure a global one using the powershell command: Set-NServiceBusLocalMachineSettings -ErrorQueue {address of error queue}'
2576,'','delay logging dir resolution\nfixes https://github.com/Particular/NServiceBus/issues/2570'
2575,'','Castle reference doesnt match nuget minimum range\nSo as part of the removal of ripple here https://github.com/Particular/NServiceBus/commit/4cca39f43079be11a11759126927f556f73df698\r\n\r\nthe dependency in ripple.config \r\n\r\n    <Dependency Name="Castle.Core" Version="3.2.1.0" Mode="Fixed" />\r\n\r\nwas incorrectly transcribed to \r\n\r\n    <package id="Castle.Core" version="3.3.1" targetFramework="net40" />\r\n\r\nBut the nuget still has a inferred dependency on 3.2.1 of `Castle.Core`.\r\n\r\nThis means an OOTB install of NServiceBus.CastleWindsor v4.7.x will result in a binding error.\r\n\r\nThe workaround it to add this redirect\r\n\r\n    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name="Castle.Core" publicKeyToken="407dd0808d44fbdc" culture="neutral" />\r\n        <bindingRedirect oldVersion="0.0.0.0-3.3.0.0" newVersion="3.2.0.0" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name="Castle.Windsor" publicKeyToken="407dd0808d44fbdc" culture="neutral" />\r\n        <bindingRedirect oldVersion="0.0.0.0-3.3.0.0" newVersion="3.2.0.0" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n\r\nThe fix is to change the Castle.Core nuget and reference back to 3.2.1'
2572,'',"Should assembly scanning include other Particular dlls, when specifying a type list to include?\nIn the following case:\r\n\r\n```c#\r\nNServiceBus.Configure.With(GetAssembliesToIncludeInScan())\r\n.Log4Net()\r\n```\r\nwhere `GetAssembliesToIncludeInScan` returns an `IEnumerable<Assembly>`, we automatically include NServiceBus core, because it is needed without which the endpoint won't function.\r\n\r\nHowever, does it make sense to also include other Particular assemblies, especially the ServiceControl plugin dlls. Not doing so, forces the user to include the Particular assemblies explicitly.\r\nShouldn't the plugin dlls be auto included just like the core?\r\n\r\n--\r\n\r\nRelated Desk Case: https://nservicebus.desk.com/agent/case/7811"
2571,'','Added support for individualizing endpoint instances\n@johnsimons @SimonCropp review please\r\n\r\n\r\nLeft to do:\r\n\r\n- [ ] Add doco'
2570,'','Allow logging to better handle exceptions from MapPath\nSo `NServiceBus.Logging.DefaultFactory` calls `HttpContext.Current.Server.MapPath("~/App_Data/")` which can throw.\r\n\r\nSo several actions required.\r\n\r\n1. defer the call to `MapPath` so it is not called from the constructor. this will allow users to override the dir http://docs.particular.net/nservicebus/logging-in-nservicebus#changing-settings-via-code and avoid the exception\r\n2. catch exceptions from `MapPath` and throw a better exception explaining how to override\r\n'
2568,'','Disable auto-wiring of properties when registering singletons via RegisterSingleton\nIt is not used and causes problems when properties set on the instance of singleton are overridden when resolving.'
2567,'','Allow transports to get name of the configured error queue\nSince transports use error queue to send messages which have invalid headers, it is required to pass the error queue name to the transport either when configuring or via the Init method. This is a potential breaking change if we go with Init.'
2565,'','Dynamic routing\nThis PR adds support to NServiceBus to support dynamic routing at send time.\r\n\r\n## What is dynamic routing\r\nDynamic routing is about **scaling out** at the client side.\r\nThe idea behind it is to instead of having the concept of a "Distributor" that does the "round robin" between all available workers, we are in essence doing the "distribution" at sending time.\r\nThis removes the need of the single "Distributor" because all clients can become "distributors".\r\n\r\n## How do I use it\r\nBy default NServiceBus ships with a implementation of dynamic routing using the file system.\r\nTo start using it, you need to do the following:\r\n\r\n1. Enable dynamic routing on your "senders"  \r\n\r\n        BusConfiguration config = new BusConfiguration();\r\n        config.UseDynamicRouting<FileBasedDynamicRouting>()\r\n         .LookForFilesIn(pathtoLookForFiles);\r\n\r\n\r\n1. Create routing files in `pathtoLookForFiles`, these files are plain txt files that contain a list of "workers", eg:\r\n\r\n        Sales@MachineA\r\n        Sales@MachineB\r\n        Sales@MachineC\r\nthe file names need to match the convention, so if in your mapping declaration you have something like:\r\n\r\n        <UnicastBusConfig ForwardReceivedMessagesTo="audit">\r\n            <MessageEndpointMappings>\r\n              <add Assembly="MyMessages" Type="MyMessages.Events.NewOrder" Endpoint="Sales@MachineA"/>\r\n              <add Assembly="MyMessages" Type="MyMessages.Events.OrderMoreStock" Endpoint="Factory@MachineD"/>\r\n            </MessageEndpointMappings>\r\n        </UnicastBusConfig>\r\nYou would create 2 files named `Sales.txt` for `MyMessages.Events.NewOrder` and `Factory.txt` for `MyMessages.Events.OrderMoreStock`.\r\nThese files will be automatically monitored for changes.\r\n\r\n\r\n## How to write a dynamic routing implementation\r\nLet\'s say you want to write your own provider for dynamic routing.\r\n\r\n1. You need to implement `IProvideDynamicRouting`, this is a very simple interface that either returns `true` when it has an address to provide for routing or `false` if there is no address.\r\nWhen there is no address, the address defined in `<MessageEndpointMappings>` is used.\r\n1. Create a class that derives from `DynamicRoutingDefinition`, this will give you the `config.UseDynamicRouting<MyDynamicRouting>()`\r\n1. Create a feature that depends on `DynamicRouting` and registers your own implementation of `IProvideDynamicRouting`, eg:\r\n    ```c#\r\n    class MyCustomDynamicRouting : Feature\r\n    {\r\n        public MyCustomDynamicRouting()\r\n        {\r\n            DependsOn("DynamicRouting");\r\n        }\r\n    \r\n        protected internal override void Setup(FeatureConfigurationContext context)\r\n        {\r\n    \t\tcontext.Container.RegisterSingleton<IProvideDynamicRouting>(new MyCustomDynamicRoutingImpl());\r\n        }\r\n    }\r\n    ```\r\n        \r\n1. That is it :smile:\r\n\r\n## Safe to disconnect notifications\r\nThis provides the hooks for a 3rd party to be notified when is safe for an endpoint to be shutdown.\r\n \r\nThere are two parts to this solution:\r\n\r\n1. Send message to endpoint, to trigger notification\r\nThis is done by sending a control message with a header named `NServiceBus.DisconnectMessage`.\r\nYou can also include extra headers, and these are passed to the observable event.\r\nHere is an example:\r\n    ```c#\r\n    var transportMessage = ControlMessage.Create();\r\n    transportMessage.Headers["NServiceBus.DisconnectMessage"] = "anything";\r\n    transportMessage.Headers["MySpecialHeader"] = "foo";\r\n    \r\n    MessageSender.Send(transportMessage, new SendOptions("DynamicRouting.Receiver1"));\r\n    ```\r\n\r\n1. Subscribe to `BusNotifications.Endpoint.SafeToDisconnect` on the endpoint that is to be disconnected.\r\nHere is an example:\r\n    ```c#\r\n    public class SubscribeToSafeToDisconnect : IWantToRunWhenBusStartsAndStops\r\n    {\r\n        readonly BusNotifications notifications;\r\n    \r\n        public SubscribeToSafeToDisconnect(BusNotifications notifications)\r\n        {\r\n            this.notifications = notifications;\r\n        }\r\n    \r\n        public void Start()\r\n        {\r\n            notifications.Endpoint.SafeToDisconnect\r\n                .ObserveOn(Scheduler.Default)\r\n                .Subscribe(data =>\r\n                {\r\n                    var myHeaderValue = data.Headers["MySpecialHeader"];\r\n                    // Do whatever here\r\n                });\r\n        }\r\n    \r\n        public void Stop()\r\n        {\r\n        }\r\n    }\r\n    ```'
2564,'','Capture warnings and fatals in acceptance tests\nSo here we only capture errors\r\nhttps://github.com/Particular/NServiceBus/blob/4ee392ffeb52db2966e47fcb3ba6322382917f11/src/NServiceBus.AcceptanceTests/EndpointTemplates/ContextAppender.cs#L103\r\n\r\nNot warning or fatals.\r\n\r\nNote the plan is to not catch "lower than warning" due to the expense of marshalling that much info across appdomains'
2554,'','Add fluent API for error queue\nWe have one for the audit queue so we should have the same for the error queue'
2550,'','Common set of acceptance tests for saga persisters\nExtract the saga persister tests (mostly from RavenDB impl) to a common project just like container tests and use them for all saga persistence implementations.\r\n\r\nA WIP pull is here https://github.com/Particular/NServiceBus/pull/2511'
2549,'','Include validation in our config sections\nThe .Net CLR allows for ConfigurationProperties in custom config sections to include validation.\r\n\r\nI have already modified [SecondLevelRetriesConfig](https://github.com/Particular/NServiceBus/blob/33947a34659fbad5e9636873aefe7ab2a6077533/src/NServiceBus.Core/SecondLevelRetries/Config/SecondLevelRetriesConfig.cs#L17-L19) to take advantage of it.\r\n\r\nThis is a good way to standardise the validation and defaults across code only and config file.\r\n\r\n\r\n'
2547,'',"Identifying remote queue\nWe currently compare machine names to identify if the queue about to be created is in a remote machine or not, see https://github.com/Particular/NServiceBus/blob/33947a34659fbad5e9636873aefe7ab2a6077533/src/NServiceBus.Core/Transports/Msmq/MsmqQueueCreator.cs#L35\r\n\r\nWouldn't it be better to identify if the machine is remote or not via:\r\n```c#\r\nstatic bool? IsLocalIpAddress(string hostName)\r\n{\r\n    if (string.IsNullOrWhiteSpace(hostName))\r\n    {\r\n        return null;\r\n    }\r\n    try\r\n    {\r\n        var hostIPs = Dns.GetHostAddresses(hostName);\r\n        var localIPs = Dns.GetHostAddresses(Dns.GetHostName());\r\n\r\n        if (hostIPs.Any(hostIp => (IPAddress.IsLoopback(hostIp) || (localIPs.Contains(hostIp)))))\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    catch\r\n    {\r\n        return null;\r\n    }\r\n    return false;\r\n}\r\n```"
2540,'','Revisit "Delegates are not synchronized by ConcurrentDictionary"\nSo this https://github.com/Particular/NServiceBus/commit/cd1185bf0365a60f9355bac9461a41eb2e401f86 moved over to passing in an instance to the the dictionary instead of using a delegate. This has no effect on thread safety. Both the construction of the instance and the execution of the delegate occur outside the lock. However the instance based approach is a little slower since the construction always occurs, where in the delegate approach the execution is differed \r\n'
2539,'','re-apply "Firing callback on replies only"\nSo this commit https://github.com/Particular/NServiceBus/commit/c0d0ce67ef350e650a75b2284814a7398af88116 had to be locked at version 5 as part oft his commit https://github.com/Particular/NServiceBus/commit/78f545b6aee433c878f3c246f35551c71d06ad8e\r\n\r\nsince version 4 still has a Send intent for return messages. So need to re-evaluate how to identify return message in below v5'
2538,'','Order of settings\nValues provided by users in ConfigSection should take precedence over values provided with Fluent API, while Fluent API overrides default values set by ConfigSeaction.\r\n\r\nConfigSection defaults --> Fluent API --> CofnigSection user values'
2531,'',"Add logging to Assembly scanner when we swallow typeload exceptions\nApparantly we don't log this condition, making it hard for users to figure out what is going on\r\n\r\nhttps://groups.google.com/forum/#!topic/particularsoftware/zlIYAcfulwA"
2525,'','Reply from finder results in invalid OriginatingSagaId header\nRun `When_reply_from_a_finder` and set a break point here https://github.com/Particular/NServiceBus/blob/a8f9b0036eb2f66e4cd3bb224ee2c3b1ab170e1d/src/NServiceBus.Core/Sagas/PopulateAutoCorrelationHeadersForRepliesBehavior.cs#L23\r\n\r\nYou will notice `saga.NotFound` is false so we enter and set invalid header ie `OriginatingSagaId` will be null.\r\n\r\nSo to fix we should fix the double negation and rename `saga.NotFound` to `saga.Found`, default it to false and set it to true when it is found'
2524,'',"Dump logs when acceptance tests fail\nRight now we don't capture logs. We should buffer the logs and dump them if the test fails"
2521,'',"Support receiving messages without a message id for integration scenarios\nAt the moment we require the transports to make sure each received message has a message id. We've seen a few (rabbitmq) customers asking for this limit to be removed.\r\n\r\nIn order to support this we would need to generate a stable id , for FLR to work correctly.\r\n\r\nMy idea is to generate a deterministic guid based on the headers + body.\r\n\r\nOther ideas?"
2519,'','Error message point to PS cmdlet that is not present\nThe core contain an error message that instruct the user to run a cmdlet that is not installed since it was moved out of the core.\r\n```\r\nNServiceBus performance counter for {0} is not set up correctly. Please run Install-NServiceBusPerformanceCounters cmdlet to rectify this problem.", counterName);\r\n```\r\n\r\n\r\n\r\n'
2518,'',"NSB 4.7.1 - Worker node not reporting in after message is sent to SLR\nNServiceBus 4.7.1\r\nNServiceBus.Distributor.MSMQ 4.4.6\r\n\r\nWe had an issue this morning when one of our database servers took a dive and it caused some of our NSB worker nodes to stop processing messages. The server dying caused every message to exceed the FLRs and be sent off for the SLRs. The SLR message was sent and the message was ultimately processed but the worker node never checked in to the distributor to say it could take more work. This caused all processing to grind to a halt once all worker threads were used until the worker nodes were restarted.\r\n\r\nI've modified the ScaleOut example to reproduce the issue.\r\n\r\nhttps://drive.google.com/file/d/0B68lziNQwCVLYWZrZjZkX01rSnM/view"
2511,'','Common ISagaPersister tests\nAdded a project containing common test cases for saga persisters. Copied over the test from Raven impl as it has the best coverage'
2510,'','MSMQ connection strings are not validated\nMSMQ connections strings support the following settings:\r\n```\r\ndeadLetter=true/false;\r\njournal=true/false;\r\ncacheSendConnection=true/false;\r\nuseTransactionalQueues=true/false;\r\ntimeToReachQueue=timespan\r\n```\r\n\r\nIf the user enters invalid keys and or value we should throw a exception that states what is wrong.'
2505,'',"Remove the retries satellite\nLooking through the code with @johnsimons we can't see a need to have a satellite for retries. We should be able to handle that in the main receiver.\r\n\r\n@nordbergmikael do U remember why we used a satellite?"
2486,'','InstallationSupport only enabled when Debugger.IsAttached\nThe following issue/confusion: https://github.com/Particular/NServiceBus.Azure/issues/181 was caused by the fact that InstallationSupport is only enabled when the debugger is attached\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Installation/InstallationSupport.cs#L22\r\n\r\nThis was a major gotcha for me, sean and the user (and took us 7 days to figure out collectively)... I would like to see the use of Debugger.IsAttached removed, so that the code base behaves consistently between debug and production behavior...\r\n'
2485,'','Expose the internal behavior in order to decorate it\nLet\'s consider this example:\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.AcceptanceTests/PipelineExt/FilteringWhatGetsAudited.cs\r\n\r\nThe problem of the replace is that you need to reimplement the existing auditing behavior by copy pasting the code. It would be awesome if the pipeline allows to decorate existing behaviors without knowing the concrete class of the core behavior. This could for example be achieved with the follwowing syntactic sugar:\r\n\r\n````\r\nclass FilteringAuditBehavior : IBehavior<IncomingContext>\r\n            {\r\n                public void Invoke(IncomingContext context, Action next)\r\n                {\r\n                    var auditBehavior = context.Get<IBehavior<IncomingContext>>(WellKnownSteps.AuditBehavior);\r\n                    var auditResult = new AuditFilterResult();\r\n                    context.Set(auditResult);\r\n                    next();\r\n\r\n                    //note: and rule operating on the raw TransportMessage can be applied here if needed.\r\n                    // Access to the message is through: context.PhysicalMessage. Eg:  context.PhysicalMessage.Headers.ContainsKey("NServiceBus.ControlMessage")\r\n                    if (auditResult.DoNotAuditMessage)\r\n                    {\r\n                        return;\r\n                    }\r\n                    auditBehavior.Invoke(context, next);\r\n                }\r\n\r\n                //here we inject our behavior\r\n                class AuditFilteringOverride : INeedInitialization\r\n                {\r\n                    public void Customize(BusConfiguration configuration)\r\n                    {\r\nconfiguration.Pipeline.Replace(WellKnownStep.AuditProcessedMessage, typeof(FilteringAuditBehavior), "A new audit forwarder that has filtering");\r\n                    }\r\n                }\r\n            }\r\n````\r\n\r\nThe classes can be left internal but it allows the user to decorate existing behaviors. Thoughts?'
2479,'','Default to disable timeouts and retries for acceptance tests\nFor most tests it is not required\r\n\r\nWill reduce "wall of queues" problem we currently have with queues.\r\n\r\nAlso less moving pieces will make run time and startup time faster\r\n\r\nAlso broken tests will fail sooner with no retries\r\n\r\nWe can re-enable it for tests that need it\r\n\r\nThoughts?'
2478,'','Move over to pure code based configuration\nSo as people know I have been pushing this for a while now an I think now that Asp vnext has decided to take this approach we should take the same route.\r\n\r\nFor those who havnt hear the next version of asp will not have a web config. it will be purely code based configuration. Have a listen to the latests Herding Code http://herdingcode.com/herding-code-198-damian-edwards-on-asp-net-vnext-tag-helpers-and-signalr/\r\n\r\nSo current we have the following approaches\r\n\r\n * Some using raw AppSettings eg `UseLegacyExceptionStackTrace`\r\n * some using Code or config sections eg encryption\r\n * some using just config sections eg error queue\r\n * some using code or attributes eg endpoint SLA\r\n * some only with code eg the pipeline and features\r\n\r\nAnd various other combinations of the above.\r\n\r\nThen we also have a random combo of the above that also use the registry\r\n\r\nAlso because there is no consistency it makes documenting the various approaches difficult.\r\n\r\nMy proposal is to move over to a "purely code based approach" and deprecate all the other approaches.\r\n\r\nThoughts?'
2477,'','Make endpointname mandatory\nSo we can avoid issues like #2453'
2469,'','Get rid of external container support\nStop supporting multiple DI containers that users can chose (and even optionally pass their own instances). Use factory (method) pattern instead, where applicable to allow users to use whatever method they want to create instances of handlers etc. Make sure these factories get enough context information (IBus, other APIs) to be a viable replacement for current approach (where user can inject anything that is public in the core).\r\n\r\nRelated to #2199 '
2468,'','Ignoring the Audit queue can result in disk space problems\nSo we currently we write all messages to an "Audit" queue.\r\n\r\nIf a system ignores this queue then they will eventually have disk space issues.\r\n\r\nHow can this be mitigated?\r\n\r\nrelated to https://github.com/Particular/ServiceControl/issues/333'
2461,'','Dont pass a "non thrown" exception to the fault manager\nSo this passes a new exception to the fault manager https://github.com/Particular/NServiceBus/blob/75ecd61f6cc62bb681d333610df7636420bbafd2/src/NServiceBus.Core/Unicast/Transport/TransportReceiver.cs#L292\r\n\r\nThis is problematic since it is not a "thrown exception" and hence it will have a null stack trace. This will result in no stack trace information being written to the error headers.\r\n\r\nAlso IManageMessageFailures is an extension point hence people handling an exception should be able to assume that the exception instance has a stack trace'
2460,'',"JSON Serializer plan of attack for v6\nToday we ilmerge json.net, this is the problems I see;\r\n\r\n* We can't expose json.net types since we ilmerge with /internalize (if not we'll run into type clash issues)\r\n* We wan't to switch to a more lightweight json lib in the core\r\n* Adds  1mb to the size of the core\r\n\r\nHow about this, for v6\r\n\r\n- [ ] Require serializer to be configured explicitly\r\n- [ ] Move the json.net serializer to a separate repo\r\n- [ ] Rename the serializer to JsonNetSerializer\r\n- [ ] Add obsolete to guide users to the new nuget for json.net\r\n- [ ] Add a more light weight json serializer to the core (eg. simple.json) as a .cs file\r\n"
2458,'','NSB V5 Install-NServiceBusPerformanceCounters is not recognized\nNSB V5, Exception is thrown:\r\n```\r\n{"NServiceBus performance counter for Critical Time is not set up correctly. Please run Install-NServiceBusPerformanceCounters cmdlet to rectify this problem."}\r\n```\r\n\r\nPackage Manager console doesn\'t recognize this command:\r\n```\r\nInstall-NServiceBusPerformanceCounters : The term \'Install-NServiceBusPerformanceCounters\' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the \r\nname, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ Install-NServiceBusPerformanceCounters\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Install-NServiceBusPerformanceCounters:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```'
2450,'','Obsolete CompletionResult.Messages\nSince we now only support single message sending, we should obsolete `CompletionResult.Messages` and introduce a single message prop instead'
2449,'','Remove .Init() from the ISubscriptionStorage\nTo make it inline with the other persisters.\r\n\r\nAny "init" needs should be handled in the feature it self or by adding an installer'
2445,'','Make the saga id generation scheme pluggable\nSince the current hardcoded scheme is Combguid which is ideal for sqlserver but less ideal for other stores like RavenDB. We also need an option when the user can specify a func of message since that will allow them to use one of the message properties as their saga id. This will allow for a special type of "single correlation id" saga where everything is synced around that one id.\r\n\r\nThis opens up scenarios like:\r\n\r\n* Skipping the unique document in raven and save 1 write and 1 extra read per saga\r\n* Allow us to use the eventstore to store sagas (since it doesn\'t have cross stream "consistency")\r\n\r\ncc @jbogard \r\n\r\nThis one depends on:\r\n\r\nhttps://github.com/Particular/NServiceBus/issues/2444'
2444,'','Make the saga id a string instead of a guid\nSo that we can better support other storages like the eventstore and RavenDB.\r\n\r\nThis will be tricky to do in a backwards compatible way'
2442,'','IAmStartedByMessage should require a mapping\nValidate that all sagas that has a IAmStartedByMessage<TMessage> also has a mapping for the TMessage'
2441,'',"When_receiving_that_completes_saga\nIs unable to handle retries after the saga has completed as the in memory persister blows up with 'Saga not found' exception"
2437,'','Improve the exception message thrown when a NSB v4 host is running with a Raven v2.5 server\nWhen starting a NSB version 4.x endpoint, the following exception is thrown on startup, however the message does not tell user how to get around the problem to continue using RavenDB v2.5. \r\n\r\nModify the exception message to include the additional info that helps the user that will allow user to continue using RavenDB v2.5. \r\ni.e. Install-Package NServiceBus.RavenDB -version 1.0.x and to add proper initialization code to invoke the new RavenDB persistence.\r\n\r\n--\r\n\r\n**Exception details**\r\n```\r\n2014-10-02 12:48:40,340 [1] FATAL NServiceBus.Hosting.GenericHost [(null)] <(nul\r\nl)> - Exception when starting endpoint.\r\nAutofac.Core.DependencyResolutionException: An exception was thrown while execut\r\ning a resolve operation. See the InnerException for details. ---> The RavenDB se\r\nrver you have specified is detected to be Product version: 2.5.0 / 6dce79a, Buil\r\nd version: 2916. NServiceBus requires RavenDB version 2.0 to operate correctly.\r\nPlease update your RavenDB server.\r\n\r\nFurther instructions can be found at:http://particular.net/articles/using-ravend\r\nb-in-nservicebus-installing (See inner exception for details.) ---> System.Inval\r\nidOperationException: The RavenDB server you have specified is detected to be Pr\r\noduct version: 2.5.0 / 6dce79a, Build version: 2916. NServiceBus requires RavenD\r\nB version 2.0 to operate correctly. Please update your RavenDB server.\r\n\r\nFurther instructions can be found at:http://particular.net/articles/using-ravend\r\nb-in-nservicebus-installing\r\n   at NServiceBus.ConfigureRavenPersistence.VerifyConnectionToRavenDBServer(IDoc\r\numentStore store) in c:\\BuildAgent\\work\\1b05a2fea6e4cd32\\src\\NServiceBus.Core\\Pe\r\nrsistence\\Raven\\ConfigureRavenPersistence.cs:line 317\r\n```\r\n\r\n**Workaround**\r\n1. If running NSB v4.x: `install-package NServiceBus.RavenDB -version 1.0.1 [projectName]`\r\n2. Add proper intialization code to invoke the new API\r\n\r\n```c#\r\n public class InitialzeRavenDBPersistence : INeedInitialization\r\n    {\r\n        public void Init()\r\n        {\r\n            Configure.Instance\r\n            .RavenDBStorage()\r\n             .UseRavenDBSubscriptionStorage() // Call this method to use Raven subscription storage\r\n              .UseRavenDBTimeoutStorage() // Call this method to use Raven timeout storage\r\n              .UseRavenDBSagaStorage(); // Call this method to use Raven saga storage\r\n\r\n        }\r\n    }\r\n```'
2433,'',"InMemorySagaPersister overwrites changes with stale data\nThere's checks in `InMemorySagaPersister` to ensure that reads after a write fail if the read has stale data, but the checks only work if the read and writes occur on different threads.\r\n\r\nIf they occur on the same thread then it's possible to overwrite changed data.\r\n\r\nNot sure how much of a priority this is as we shouldn't be using InMemorySagaPersister in a production environment. Right?"
2421,'gbiellem','Impact on NSB license when changing languages\nProblem raised by Startup customer jostein.aksnes@gmail.com\r\n\r\nTheir license file worked on one developer\'s machine, but not on another.  Upon further checking:\r\n\r\n"It seems like the problem was related to changing the date format on the\r\ndeveloper machine from Thai to English. When this was done NServicebus was\r\ncomplaining, and once it was set back to Thai it worked fine again.\r\n\r\nThe license was applied when the thai date time format was applied, so\r\nmaybe there are some issues when the dates are stored in the registry etc.\r\nfor the license?"'
2420,'',"Exhausting FLR with Timeout Manager Disabled Should Be an Error\nI have an endpoint configured with DisableTimeoutManager().  When my handler throws an exception, the message is correctly retried X times (FLR)\r\n\r\nAfter that I see the following in my log:\r\n\r\n[38] WARN   Message with 'e8a66a27-d40e-4bb3-9b1e-a3b50102b855' id has failed FLR and will be handed over to SLR for retry attempt 1.\r\n\r\n1. This message should be suppressed since SLRs should be disabled.\r\n2. This should be an ERROR level log message.\r\n3. The message should go immediately to the error queue (it appears to never arrive there).\r\n\r\n"
2419,'','Fix timeouts not firing\nApparently some timeouts are still not firing with version 3 when using RavenDB, this pull request will try to deal with this issue\r\n\r\nNot ready to be merged yet'
2412,'','Obsolete .ScaleOut().X \nSince its no longer used. All transports should support seamless scaling'
2410,'','Acceptance tests are reusing endpoint names\nThis will cause them to be flaky, eg:\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.AcceptanceTests/Sagas/When_doing_request_response_between_sagas.cs'
2405,'','InMemorySubscriptionStorage: Fixed thread safety and performance issues\n* Thread safety issues with the underlying lists of client Addresses\r\n* Better performance with key lookups - O(1) vs O(n) for most ops'
2404,'','Persister errors are logged as INFO, should be ERROR\nSee log below - it was using the internalized RavenDB (e.g. 2.0) as persistence.\r\n\r\n```\r\n2014-09-21 01:12:34,616 [29] INFO NServiceBus.Unicast.Transport.TransportReceiver [(null)] - Failed to process message\r\nSystem.Transactions.TransactionAbortedException: The transaction has aborted. ---> System.IO.IsolatedStorage.IsolatedStorageException: Unable to create mutex. (Exception from HRESULT: 0x80131464)\r\nat System.IO.IsolatedStorage.IsolatedStorageFile.Open(String infoFile, String syncName)\r\nat System.IO.IsolatedStorage.IsolatedStorageFile.Lock(Boolean& locked)\r\nat System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, IsolatedStorageFile isf)\r\nat System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf)\r\nat System.IO.IsolatedStorage.IsolatedStorageFile.CreateFile(String path)\r\nat Raven.Client.Document.RavenClientEnlistment.Prepare(PreparingEnlistment preparingEnlistment) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Document\\RavenClientEnlistment.cs:line 51\r\n--- End of inner exception stack trace ---\r\nat System.Transactions.TransactionStatePromotedAborted.PromotedTransactionOutcome(InternalTransaction tx)\r\nat System.Transactions.CommittableTransaction.Commit()\r\nat System.Transactions.TransactionScope.InternalDispose()\r\nat System.Transactions.TransactionScope.Dispose()\r\nat NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Action() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqDequeueStrategy.cs:line 269\r\n2014-09-21 01:12:34,678 [23] INFO NServiceBus.Unicast.Transport.TransportReceiver [(null)] - Failed to process message\r\nSystem.Transactions.TransactionAbortedException: The transaction has aborted. ---> System.IO.IsolatedStorage.IsolatedStorageException: Unable to create mutex. (Exception from HRESULT: 0x80131464)\r\nat System.IO.IsolatedStorage.IsolatedStorageFile.Open(String infoFile, String syncName)\r\nat System.IO.IsolatedStorage.IsolatedStorageFile.Lock(Boolean& locked)\r\nat System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, IsolatedStorageFile isf)\r\nat System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf)\r\nat System.IO.IsolatedStorage.IsolatedStorageFile.CreateFile(String path)\r\nat Raven.Client.Document.RavenClientEnlistment.Prepare(PreparingEnlistment preparingEnlistment) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Lightweight\\Document\\RavenClientEnlistment.cs:line 51\r\n--- End of inner exception stack trace ---\r\nat System.Transactions.TransactionStatePromotedAborted.PromotedTransactionOutcome(InternalTransaction tx)\r\nat System.Transactions.CommittableTransaction.Commit()\r\nat System.Transactions.TransactionScope.InternalDispose()\r\nat System.Transactions.TransactionScope.Dispose()\r\nat NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Action() in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus.Core\\Transports\\Msmq\\MsmqDequeueStrategy.cs:line 269\r\n```'
2394,'','Stop using acronyms like FLR in our error logging\nTo avoid confusing users.\r\n\r\nExample: https://github.com/Particular/NServiceBus/blob/83ddf0d9b2bb6ab791ec55b44b9759c603a355ad/src/NServiceBus.Core/Faults/Forwarder/FaultManager.cs#L62\r\n\r\ncc @udidahan '
2390,'','Split callback support into a separate component\nMove the IBus.Send().Register()  to a separate component so that transports can chose to not support it and also allow us to guide the users better when they turn it on.\r\n\r\n'
2389,'',"Implement IAmStartedByMessages<T> as an explicit handler separate from IHandleMessages<T>\nTo simplify handler logic for case when Saga is started by a message T vs when it's handling a message of T during saga in flight, implement ```IAmStartedByMessages<T>``` explicitely in the following way:\r\n\r\n```c#\r\npublic class InvoiceProcessingSaga : Saga<SomeSagaData>, \r\nIAmStartedByMessages<Message> /*Start*/, \r\nIHandleMessages<Message>/*Handle*/\r\n    {\r\n        public void Start(Message message)\r\n        {\r\n        }\r\n        public void Handle(Message message)\r\n        {\r\n        }\r\n  }      \r\n```\r\n\r\nA few benefits of this will be\r\n 1. Explicit invocation of handlers and no ambiguity (saga started by message, or started by message and handles it later as well)\r\n * Initialization of saga data can be moved to ```Start()``` and separated from ```Handle()``` code, having less conditions in ```Handle()``` to verify message is just started vs in flight. \r\n\r\n//cc @johnsimons @indualagarsamy "
2388,'',"Provide a better warning when message mappings are defined and the message conventions haven't been resolved\n**Steps to repro**\r\n1. Have an POCO message library\r\n2. Reference this POCO message library in a NSB Server endpoint. \r\n3. Add message mappings that uses this POCO library\r\n4. Do not have message conventions defined. Note that the endpoint starts up without any errors or warning. \r\nThis is misleading. A warning or an error will be more useful to the user to correct this misconfiguration."
2372,'','DeadLetter\nIt would be useful to have a way to customize the behaviour, for MSMQ or any other transport with the concept of dead letter, of DeadLetter for some specific messages. (maybe using an attribute like [Express] or [TimeToBeReceived])\r\n\r\nNow the deadletter is configured in the connectionstring of the Transport and affect all the message that are submitted to the queue. \r\n\r\nMy case is a Web Site that needs to send message in a reliable way (using dead letter + TTBR=infinite) but also needs to send some messages that can be processed or not and should disappear in the receiving queue after some time (using dead letter=false + TTBR = 1 minute)  without polluting the dead letter of the sender machine if not processed in the given time (TTBR).\r\n\r\nThanks.'
2368,'','How should transports handle ExceptionHeaders that cause the message to exceed the message limit\nSo exceptions stack trace can be very large. should we trim them?\r\n\r\nShould the transport supply the "how long"?'
2364,'','IManageMessageFailures is incompat with non transactional \nSince IManageMessageFailures is called from within `FirstLevelRetries`. and `FirstLevelRetries` is only executed for transactional https://github.com/Particular/NServiceBus/blob/master/src/NServiceBus.Core/Unicast/Transport/TransportReceiver.cs#L313\r\n\r\nSo IManageMessageFailures  wont execute. and hence error queue wont execute.\r\n\r\nFirst is this correct? Need to write an acceptance test  So since there are incompat should we throw an exception if someone defines both?'
2342,'','move more Host concepts out of the core\nThese are all host specific concepts and should not exist in the core\r\n\r\n* `EndpointSLAAttribute` \r\n* `EndpointNameAttribute` \r\n* `IConfigureThisEndpoint`\r\n\r\nalso So here\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Configure.cs#L253\r\n\r\nthere is this code\r\n\r\n    var hostPath = Path.Combine(baseDirectory, "NServiceBus.Host.exe");\r\n\r\nin BusConfiguration'
2341,'','Component Registration API on bus configuration not consistent to extension aproach used elsewhere\nthis lambda API feels off now that most of the builder is extension based: \r\n\r\nbuilder.RegisterComponents(c => c.ConfigureComponent<DebugFlagMutator>(DependencyLifecycle.InstancePerCall));\r\n\r\nshould be \r\n\r\nbuilder.RegisterComponents().ConfigureComponent<DebugFlagMutator>(DependencyLifecycle.InstancePerCall));'
2340,'','Address overloads\nMy head is spinning.\r\n\r\nSo here is the dump of addresses in the Settings:\r\n\r\n1. PublicReturnAddress\r\n- NServiceBus.LocalAddress\r\n- MasterNode.Address\r\n- EndpointName\r\n\r\nFirst question, do we need these many?\r\nWhat is used for?'
2336,'','Xml in a message can cause a SO during message deserialization\nWhen the endpoint is attempting to deserialize a message, if the content has unescaped xml, this causes a StackOverflow exception.\r\n\r\nThis only happens in interop situations, messages serialized by NServicesBus xml serializer are escaped correctly.\r\n--\r\n\r\n**Steps to reproduce**\r\n- Create a NSB endpoint\r\n- Have a message definition as \r\n```c#\r\n  public class Tie3ConfirmedEvent \r\n    {\r\n        public DateTime TieConfirmedTime { get; set; }\r\n        public int TieId { get; set; }\r\n        public string IpAddress { get; set; }\r\n        public string ConfigContent { get; set; } \r\n    }\r\n``` \r\n- Have a message handler for this in the endpoint\r\n- Send a message with xml as below using QueueExplorer or any other tool with the following:\r\n```xml\r\n<?xml version="1.0"?>\r\n<Messages xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://tempuri.net/ClassLibrary1.MyEvents">\r\n\t<Tie3ConfirmedEvent>\r\n\t\t<TieConfirmedTime>2014-08-26T19:38:01.2188085-07:00</TieConfirmedTime>\r\n\t\t<TieId>255</TieId>\r\n\t\t<IpAddress>172.255.243.222</IpAddress>\r\n\t\t<ConfigContent>\r\n\t\t\t<anything name="Andrew" value="DidStuff" dataType="string" />\r\n\t\t</ConfigContent>\r\n\t</Tie3ConfirmedEvent>\r\n</Messages>\r\n```\r\nNote that this throws a SO\r\n![image](https://cloud.githubusercontent.com/assets/854553/4054864/90eb14ba-2d97-11e4-9244-eeb5ba3c87f5.png)\r\n\r\n**Workaround**\r\n-  Change the message definition for the type that is expecting XML to `XElement` instead of `string`\r\n```\r\n public class Tie3ConfirmedEvent \r\n    {\r\n        public DateTime TieConfirmedTime { get; set; }\r\n        public int TieId { get; set; }\r\n        public string IpAddress { get; set; }\r\n\r\n        public XElement ConfigContent { get; set; } \r\n    }\r\n```\r\n\r\n-  Add endpoint initialization that sets up the deserialization properly such as:\r\n\r\n```c#\r\npublic class SetupXmlDeserialization : IWantToRunBeforeConfiguration \r\n{ \r\n  public void Init() \r\n  { \r\n    Configure.Serialization.Xml(m => m.DontWrapRawXml()); \r\n  } \r\n}\r\n```'
2332,'','Acceptance tests Conventions class uses statics\nWe need to remove those statics.\r\n\r\n@andreasohlund can u think of a nice way?'
2326,'',"Our use of internal extension methods\nAs part of reviewing #2322 I noticed that @SimonCropp is using an extension method in the PR and I raised whether we really needed it.\r\n\r\nHere is the extract of the conversation between @SimonCropp and I:\r\n\r\n> johnsimons\r\n> Does this method really need to be an extension method?\r\n> Even though we are not making this public I still think it would be better to restrict our usages of extension methods that are used infrequently and do not really provide much gain.\r\n> \r\n> \r\n> SimonCropp\r\n> @johnsimons disagree. extension methods should be used when they result in more readable code\r\n> \r\n> and this\r\n> ```c#\r\n> if (type.IsTypeFromParticularAssembly())\r\n> {\r\n>     return false;\r\n> }\r\n> ```\r\n> is more readable than this\r\n> ```c#\r\n> if (ParticularAssemblyHelper.IsTypeFromParticularAssembly(type))\r\n> {\r\n>     return false;\r\n> }\r\n> ```\r\n> in this case the type name is only noise.\r\n> \r\n> \r\n> johnsimons\r\n> @SimonCropp my issue is that in this case we are adding an extension method to a CLR type and that means that now every time we have a type instance that shows up in intellisense.\r\n> If this particular method becomes helpful to other areas of the code, then yes we can then re-evaluate whether it is a good idea to expose it as an extension method to as you point out making the code more readable, but in this occurrence the extension method is really only called from a single place in the framework (excluding tests). So I am wondering if this is a premature optimisation.\r\n> \r\n> In summary I would really dislike to see us with intellisense like this:\r\n> ![350e82b0-28d0-11e4-96b5-521ab5bdd4bc](https://cloud.githubusercontent.com/assets/122651/3991018/659a2d2c-28d9-11e4-8b9c-548e27976178.png)\r\n> This happens when we reference RhinoMocks!\r\n> \r\n> \r\n> SimonCropp\r\n> That is an unfair comparison. I am extending a very specific class. no polluting intenseness for all objects\r\n> \r\n> \r\n> johnsimons\r\n> Well I think that depends, you are extending `Type` which is actually used quite frequently in our framework, so IMO I see it as an unnecessary requirement for this case as explained in the previous comment.\r\n> Anyway, I'm just pointing out that slowly our intellisense is becoming bloated with extension methods that majority of time are only really used in a single class which begs the question whether it should be easily exposed everywhere or kept private within the scope of that class.\r\n> Pretty much what we are doing with the features classes.\r\n> \r\n> \r\n> SimonCropp\r\n> while I am happy to have this discussion it should not happen as part of this PR. This extension method approach is in keeping with the current code base. for example https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Utils/Reflection/ExtensionMethods.cs\r\n> \r\n> so feel free to raise a new issue that this conversion can happen on and the outcome can be applied consistently across the entire codebase.\r\n\r\nSo what does everyone else think ?\r\nDo we need to put rules in place, the same way as we currently have the rule that **we do not add public extension methods to types that we do not own** ?"
2325,'','Scheduler API created an unnecessary extra thread to execute the users action\nSo the way our Schedule API works is by using a special message `ScheduledTask` that gets deferred.\r\nWe then have a [handler in the core](https://github.com/Particular/NServiceBus/blob/release-5.0.0/src/NServiceBus.Core/Scheduling/ScheduledTaskMessageHandler.cs) that is handling those messages.\r\n\r\nThat handler is calling `scheduler.Start` which if we dig into that code calls the users action in a new thread, see https://github.com/Particular/NServiceBus/blob/761877c61d6968661f719a23576d13b09e2be6dd/src/NServiceBus.Core/Scheduling/DefaultScheduler.cs#L45\r\n\r\nThis to me seems to be unnecessary since the handler is already using its own thread.\r\n\r\nI propose we remove the creation of a new thread.\r\nThis also has the added benefit of enlisting in the current `TransactionScope` and `ThreadStatics` would also work.'
2318,'','Add fluent API for disabling AutoSubscribe\ncurrently we have this\r\n\r\n        Configure.With(b => b.DisableFeature<AutoSubscribe>());\r\n\r\nwould be better and more consistent to have\r\n\r\n        Configure.With(b => b.AutoSubscribe(settings => settings.Disable()));'
2306,'',"Class implementing IWantToRunWhenBusStartsAndStops is not invoked when using Castle.Windsor with convention based registration\nFull details can be found here: http://stackoverflow.com/questions/25297603/nservicebus-class-implementing-iwanttorunwhenbusstartsandstops-is-not-invoked\r\n\r\nUltimately, I am using Castle.Windsor as the IoC container for NServiceBus, and when I added a class which implements IWantToRunWhenBusStartsAndStops, it is never invoked.\r\n\r\nI have a Castle.Windsor installer which registers classes using this format:\r\n\r\n````\r\ncontainer.Register(\r\n\tClasses.FromAssemblyInThisApplication()\r\n\t.Pick()\r\n\t.WithServiceDefaultInterfaces()\r\n\t.LifestyleTransient());\r\n````\r\n\r\nI believe that when NServiceBus scans for classes that implement the various marker interfaces such as IWantToRunWhenBusStartsAndStops, it relies on Castle.Windsor for this, and hence it is not finding my BusStartStop class, because it is not registered (or perhaps, not registered properly).\r\n\r\nIf I modify the installer so that it only registers components in other assemblies (and not the assembly acting as the host), everything works fine. If NServiceBus handles the registration/scanning for the host assembly, and Castle.Windsor handles everything else, it seems to work. But using both for the host assembly results in my issue.\r\n\r\nI've managed to work around the problem but it was suggested that I raise a bug anyway. It would be good if NServiceBus could play nice with Castle.Windsor when using conventions to register components - or at the least some documentation to indicate the best way to configure the two."
2301,'','When an event is derived from multiple interfaces that don\'t have a hierarchy, only handlers for the first interface are called\nWhen an event is composed of multiple inheritance where there is no hierarchy among the interfaces, only handlers for the first interface is called. Handlers for the other interfaces are not invoked.\r\n\r\nFor example, a publisher publishes event of type `MyEvent`:\r\n```c#\r\npublic class MyEvent :  ISomeInterface, ISomeOtherInterface\r\n{\r\n}\r\n```\r\n\r\nThe interfaces are defined in a common library as follows:\r\n```c#\r\npublic interface ISomeInterface\r\n{\r\n}\r\n\r\npublic interface ISomeOtherInterface\r\n{\r\n}\r\n```\r\n\r\nA subscriber that has the following message handler does not get invoked\r\n```c#\r\npublic class MyHandler : IHandleMessages<ISomeOtherInterface>\r\n{\r\n\tpublic void Handle(ISomeOtherInterface message)\r\n\t{\r\n\t\tConsole.WriteLine("Message received");\r\n\t}\r\n}\r\n```\r\n\r\nMore details, please see:\r\nhttps://groups.google.com/forum/#!msg/particularsoftware/9COmFPo3MIo/Ua7ZRcRvKAUJ\r\n'
2290,'','Remaining static fields\n* [ ] Address.Undefined\r\n* [ ] Address.Self\r\n* [ ] Address.defaultMachine\r\n* [ ] Address.preventChanges\r\n* [ ] Address.ignoreMachineName\r\n* [x] Configure.instance\r\n* [x] DataBusReceiveBehavior.cache https://github.com/Particular/NServiceBus/issues/2381\r\n* [x] DataBusSendBehavior.cache https://github.com/Particular/NServiceBus/issues/2381\r\n* [x] ExtensionMethods.SetHeaderAction\r\n* [x] ExtensionMethods.GetHeaderAction\r\n* [ ] ~~ExtensionMethods.currentMessageBeingHandled~~ ThreadStatic\r\n* [x] Unicast.UnicastBus.HostIdForTransportMessageBecauseEverythingIsStaticsInTheConstructor\r\n* [x] Features.Sagas.SagaEntityToMessageToPropertyLookup https://github.com/Particular/NServiceBus/issues/2378\r\n* [x] Features.Sagas.MessageTypeToSagaTypesLookup https://github.com/Particular/NServiceBus/issues/2378\r\n* [x] Features.Sagas.SagaEntityTypeToSagaTypeLookup https://github.com/Particular/NServiceBus/issues/2378\r\n* [x] Features.Sagas.SagaTypeToSagaEntityTypeLookup https://github.com/Particular/NServiceBus/issues/2378\r\n* [x] Features.Sagas.FinderTypeToSagaEntityTypeLookup https://github.com/Particular/NServiceBus/issues/2378\r\n* [x] Features.Sagas.FinderTypeToMessageToMethodInfoLookup https://github.com/Particular/NServiceBus/issues/2378\r\n* [x] Features.Sagas.SagaTypeToMessageTypesRequiringSagaStartLookup\r\n* [x] Features.Sagas.SagaMessageFindingConfiguration https://github.com/Particular/NServiceBus/issues/2378\r\n* [ ] ~~MsmqUtilities.localIp~~ this caches the local machine ip address which does not change\r\n* [x] Encryption.EncryptionMutator.cache (Since this is purely reflection based with no config interaction it can be ignored)\r\n* [x] SecondLevelRetries.DefaultRetryPolicy.NumberOfRetries https://github.com/Particular/NServiceBus/issues/2374\r\n* [x] SecondLevelRetries.DefaultRetryPolicy.TimeIncrease https://github.com/Particular/NServiceBus/issues/2374\r\n* [x] SecondLevelRetries.DefaultRetryPolicy.RetryPolicy https://github.com/Particular/NServiceBus/issues/2375\r\n* [x] MessageInterfaces.MessageMapper.Reflection.MessageMapper.SUFFIX\r\n* [x] MessageInterfaces.MessageMapper.Reflection.MessageMapper.interfaceToConcreteTypeMapping\r\n* [x] MessageInterfaces.MessageMapper.Reflection.MessageMapper.concreteToInterfaceTypeMapping\r\n* [x] MessageInterfaces.MessageMapper.Reflection.MessageMapper.nameToType\r\n* [x] MessageInterfaces.MessageMapper.Reflection.MessageMapper.typeToConstructor\r\n* [x] ObjectBuilder.Common.CommonObjectBuilder.sync https://github.com/Particular/NServiceBus/issues/2376\r\n* [x] Serializers.XML.XmlMessageSerializer.typeToProperties\r\n* [x] Serializers.XML.XmlMessageSerializer.typeToFields\r\n* [x] Serializers.XML.XmlMessageSerializer.typesToCreateForArrays\r\n* [x] Serializers.XML.XmlMessageSerializer.typesToCreateForEnumerables\r\n* [x] Serializers.XML.XmlMessageSerializer.typesBeingInitialized\r\n* [ ] ~~Serializers.XML.XmlMessageSerializer.defaultNameSpace~~ ThreadStatic\r\n* [ ] ~~Serializers.XML.XmlMessageSerializer.prefixesToNamespaces~~ ThreadStatic\r\n* [ ] ~~Serializers.XML.XmlMessageSerializer.messageBaseTypes~~ ThreadStatic\r\n* [ ] ~~Serializers.XML.XmlMessageSerializer.namespacesToAdd~~ ThreadStatic\r\n* [ ] ~~Callback.AsyncControllerType~~ not an issue since this is per machine\r\n* [x] Unicast.HandlerInvocationCache.HandlerCache\r\n* [x] Unicast.HandlerInvocationCache.TimeoutCache\r\n* [ ] ~~Unicast.Transport.TransportReceiver.needToAbort~~ ThreadStatic\r\n* [x] CircuitBreakers.RepeatedFailuresOverTimeCircuitBreaker.NoPeriodicTriggering\r\n\r\nSince the below are purely reflection based with no config interaction they can be ignored\r\n* [x] Utils.Reflection.DelegateFactory.PropertyInfoToLateBoundProperty\r\n* [x] Utils.Reflection.DelegateFactory.FieldInfoToLateBoundField\r\n* [x] Utils.Reflection.DelegateFactory.PropertyInfoToLateBoundPropertySet\r\n* [x] Utils.Reflection.DelegateFactory.FieldInfoToLateBoundFieldSet\r\n* [x] Utils.Reflection.ExtensionMethods.IsSystemTypeCache\r\n* [x] Utils.Reflection.ExtensionMethods.TypeToNameLookup'
2280,'','Obsolete ISpecifyMessageHandlerOrdering and budies\nAt the moment we have a very IMO unintuitive API to specify message ordering.\r\n1. The user needs to implement `ISpecifyMessageHandlerOrdering`, eg \r\n```c#\r\nclass EnsureOrdering : ISpecifyMessageHandlerOrdering\r\n{\r\n    public void SpecifyOrder(Order order)\r\n    {\r\n        order.Specify(First<H1>.Then<H2>());\r\n    }\r\n}\r\n```\r\n2. The user can also specify order via the `config.LoadMessageHandlers` overloads, eg:\r\n```c#\r\nconfig.LoadMessageHandlers(First<H1>.Then<H2>().AndThen<H3>().AndThen<H4>())\r\n```\r\n\r\n### My proposal\r\nRemove all the above API and instead:\r\n```c#\r\nbuilder.InvokeTheseHandlersFirst(IEnumerable<Type>)\r\n```'
2245,'',"NServiceBus.AcceptanceTests.Sources has wrong dependencies\nShould only depend on the core + acceptance testing but seems to depend on all core builders\r\n\r\nhttps://www.myget.org/feed/particular/package/NServiceBus.AcceptanceTests.Sources\r\n\r\nThis is since we let ripple autogen the nuspec and we do have refs to all the above builders.\r\n\r\nShould we remove those refs as we're moving all builders to a separate repo?"
2239,'','Support authenticated flag in MSMQ queue\nTo restrict who can send to a queue, the queue needs to have the authenticated flag **on**, see\r\n ![capture](https://cloud.githubusercontent.com/assets/122651/3622616/9993b216-0e39-11e4-8879-9c2147e8b536.JPG)\r\nand the sending code needs to set authenticated property of a messagequeue instance to true.\r\n'
2232,'','Databus storage should be part of the persistence API\nDatabus storage should be part of the persistence API'
2220,'','Feature request: Async message handler\nIs there any chance to have an async message handler? Something like:\r\n\r\n```\r\ninterface IAsyncMessageHandler<TMessage>\r\n{\r\n    Task Handle( TMessage message );\r\n}\r\n```\r\n\r\nThe scenario is:\r\nGiven that there are tons of library out there that support the async pattern it is pretty easy for the end user to be required to go down to the async/await pattern or, worse, to be required to use the TPL directly, in this last case 2 things can happen:\r\n\r\n```\r\nclass MyHandler : IHandleMessages<MyMessage>\r\n{\r\n    public void Handle( MyMessage message )\r\n    {\r\n             Task.Run( ()=> { ... } );\r\n    }\r\n}\r\n```\r\n\r\nthe above will generate a new thread, or something handled by the TPL, and the the message handler will end before the real work is completed, and second if there is any Exception in the generated task we cannot capture it and we are requiring the user to write a contiuation, check for failure and manually raise the exception for us.\r\n\r\nComments?\r\n.m'
2211,'',"Pipeline instrumentation\nThe idea is to add instrumentation to the execution of each instance of the pipeline.\r\n\r\nI've added the duration for each behavior execution.\r\n\r\nI've implemented this using the `IObservable` but still need to test it and need to ping @distantcam for code reviews.\r\n"
2204,'','File based persitence for development time\nWIP\r\n\r\nPlan of attack:\r\n\r\n- [ ] Timeoutstorage\r\n- [ ] Sagas\r\n- [ ] Outbox\r\n- [ ] Gateway\r\n- [ ] Subscriptions'
2202,'','Ability to opt out of using message conventions\nThe message conventions allow the users to convey the intent of messages. But they already convey that intent by calling bus.publish/ bus.send or bus.reply. so allowing users to "also convey the intent via conventions" should be an optional second check.'
2200,'','Dont Merge Json.net\npossible use simplejson'
2199,'','Dont ILMerge Autofac\npossible use tiny IOC'
2169,'synhershko','Remove TimeoutData.Id\nTo separate persistence from this DTO\r\n\r\nSee https://github.com/Particular/NServiceBus.RavenDB/commit/5d053f256e55bac528de4916c0883bc6dae16578#commitcomment-6581498\r\n\r\n@andreasohlund @johnsimons @SimonCropp '
2145,'','InMemoryDataBus should ignore timeToBeReceived\n@johnsimons @andreasohlund  so is this a bug? '
2132,'',"Have MSMQ throw if CheckMachineNameForComplianceWithDTCLimitation isn't satisfied\nIf we are to be safe by default for production, shouldn't we be throwing in the `CheckMachineNameForComplianceWithDTCLimitation`, see https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Transports/Msmq/Config/CheckMachineNameForComplianceWithDTCLimitation.cs#L50-L51\r\n\r\n@andreasohlund @indualagarsamy @SimonCropp thoughts?"
2131,'',"When parsing timespan, we must use Invariant culture\nWhen parsing timestamps, we must Invariant culture to avoid Timespan's entered in a certain locale and then deployed to a different server with a different locale to be treated the same.\r\n\r\nFor example: https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/TimeToBeReceivedAttribute.cs#L18\r\n\r\nIn ServiceMatrix, the user can enter timespan string's (currently the plan is to use Invariant Culture), but the Core parses using default. This might cause a problem, if the code is deployed to a different machine with a different locale. "
2119,'','StackOverflowException with EncryptionMessageMutator\nHello,\r\n\r\nI got that one when serializing this entity:\r\n\r\n```c#\r\npublic class BogusEntity\r\n{\r\n    public int Id { get; set; }\r\n    public byte[] Data { get; set; }\r\n\r\n    //This property generates a stackoverflow\r\n    public List<BogusEntity> Graphics\r\n    {\r\n        get\r\n        {\r\n            return new List<BogusEntity> { new BogusEntity { Id = Id, Data = Data} };\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ninside this message:\r\n```c#\r\npublic interface IBogusEntityMessage : IMessage\r\n{\r\n    BogusEntity Entity { get; set; }\r\n}\r\n```\r\n\r\nand sent this way:\r\n```c#\r\nBus.Send<IBogusEntityMessage>("StackOverflowRepro", message =>\r\n{\r\n    message.Entity = new BogusEntity\r\n    {\r\n        Id = 1,\r\n        Data = new byte[] { 1, 2, 3, 6, 5, 4, 7, 8, 9, 5, 2, 1, 4, 5, 2, 1, 4, 5, 8, 7, 4, \r\n                5, 2, 1, 4, 5, 6, 8, 7, 4, 21, 63, 6, 8, 4, 4, 5, 69, 69, 7 }\r\n    };\r\n});\r\n```\r\n\r\nThe \'Graphics\' property is causing this. I also wonder why it is trying to transform a property with no setter. \r\n\r\n'
2114,'','Spike to use pipeline to configure the bus\n'
2098,'','http://stackoverflow.com/questions/21679093/returntosourcequeue-tool-of-nservicebus-is-not-working\n@udidahan asked that engineering take a closer look at the reported issue and the "non-elegant" way it was solved.\r\n\r\nhttp://stackoverflow.com/questions/21679093/returntosourcequeue-tool-of-nservicebus-is-not-working'
2085,'','Make MSMQ CircuitBreaker configurable\nfrom [NServiceBus.SqlServer #7](https://github.com/Particular/NServiceBus.SqlServer/issues/7)\r\n\r\n```\r\n<appSettings>\r\n  <add key="NServiceBus/MsmqDequeueStrategy/Threshold" value="100"/>\r\n  <add key="NServiceBus/MsmqDequeueStrategy/ResetEvery" value="00:00:30"/>\r\n</appSettings>\r\n```\r\n\r\nrelated code [here](https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Transports/Msmq/MsmqDequeueStrategy.cs#L363)'
2083,'','Redundant use of DelegateFactory.CreateSet in XmlMessageSerializer\nso in here `XmlMessageSerializer`\r\n\r\nwe have \r\n\r\n            foreach (var p in props)\r\n            {\r\n                logger.Debug("Handling property: " + p.Name);\r\n\r\n                DelegateFactory.Create(p);\r\n                if (!isKeyValuePair)\r\n                {\r\n                    DelegateFactory.CreateSet(p);\r\n                }\r\n\r\n                InitType(p.PropertyType);\r\n            }\r\n\r\n            foreach (var f in fields)\r\n            {\r\n                logger.Debug("Handling field: " + f.Name);\r\n\r\n                DelegateFactory.Create(f);\r\n                if (!isKeyValuePair)\r\n                {\r\n                    DelegateFactory.CreateSet(f);\r\n                }\r\n\r\n                InitType(f.FieldType);\r\n            }\r\n        }\r\n\r\nNote the use of `DelegateFactory.CreateSet` that doesnt use the return value.  So either this is a bug or it is redundant code. No idea which ATM'
2080,'',"IHandleSagaNotFound fires multiple times for a message that targets multiple sagas\nThe current api is confusing, here is the definition of how it should work:\r\n\r\n* `IHandleSagaNotFound` should only fire if no saga was invoked for the message\r\n* `IHandleSagaNotFound` should only fire once per message\r\n* `IHandleSagaNotFound` should not fire for timeouts - fixed\r\n* `IHandleSagaNotFound` should only fire if no explicit `IHandleSagaNotFound<T>` has been called\r\n\r\nSemantics for `IHandleSagaNotFound<T>` (new interface) is:\r\n\r\n* Can only be defined on a saga that is handling the give message\r\n* Is invoked if the given saga couldn't be found for the message\r\n* Should not apply for timeouts\r\n"
2074,'','Include the details of the last exception when moving messages to SLQ or Error\nModify \r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Faults/Forwarder/FaultManager.cs#L53\r\n\r\nand\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Faults/Forwarder/FaultManager.cs#L59\r\n\r\nto include the exception details\r\n\r\n'
2063,'','SendOnly endpoint messages are getting a ReplyToAddress once audited or SLR\n'
2062,'','Trial licence date being written at install time\nBecause we sure a INeedInitialization the start sate is written at install time.\r\n\r\nBefore we were only doing license stuff when the bus started, obviously that does not work for send only endpoints.\r\nAlso because you can install NServiceBus to run under a different account from the one that runs it, this is point less\r\n'
2049,'','Easing gc pressure\nBecause message bodies are just `byte[]`, I wonder if we would be better off with this buffered stream to read the message bodies?\r\nhttps://github.com/EventStore/EventStore/tree/master/src/EventStore/EventStore.BufferManagement\r\n'
2035,'','Multi threading - EF with DependencyLifecycle.InstancePerUnitOfWork\nWe currently using Entity Framework and used a Unit Of Work pattern, along with Repository. We inject the the Repository and the unit of Work using DependencyLifecycle.InstancePerUnitOfWork. For example:\r\n```c#\r\n    public class SetupContainer : IWantCustomInitialization\r\n    {\r\n        public void Init()\r\n        {\r\n            Configure.Component<ConfigProvider>(DependencyLifecycle.InstancePerUnitOfWork);\r\nConfigure.Component<QirUnitOfWork>(DependencyLifecycle.InstancePerUnitOfWork);\r\n           Configure.Component<QirStaging_FeedSetRepository>(DependencyLifecycle.InstancePerUnitOfWork);\r\n        }\r\n    }\r\n```\r\nThis all works fine when running as a single concurrency but when the MaximumConcurrencyLevel is increased, we get the error message on certain threads.\r\n\r\n"System.InvalidOperationException: ExecuteReader requires an open and available Connection. The connection\'s current state is closed."\r\n\r\nThis is normally fixed by having a separate DBContext/Connection per thread. I thought I would have this with the current setup. In regards that InstancePerUnitOfWork would create one per message and increasing the MaximumConcurrencyLevel would just allow more messages to be handled. '
2032,'',"Better error logging when RavenDB connection fails (e.g. due to a timeout)\nI'm following a case from a customer facing strange issues on a test environment. Those issues seems to be related to a missing RavenDB connection string in the configuration file.\r\nAfter fixing the configuration file the environment started behaving correctly.\r\nThe hiccup was that discovering that the issue was not easy. RavenDb and the web servers are on different boxes. They only spotted this due to the timeouts coming from reading from the timeout store and then triggering a circuit breaker. It may be useful for NServiceBus to throw a specific error if it can’t communicate with Raven to make this a bit more obvious."
2028,'','IEnumerable fails to serialize with the Json serializer\nWe had a message in 4.0.4 that used IEnumerable<T> as a property. This worked just fine in 4.0.4, but in 4.4.2 it stopped working. The problem seems to be that it is not possible to use Enumerables derived from a linq expression as properties in a message any longer. Is that how it should be?\r\n\r\nI tried both: \r\n\r\n    Bus.Send(new StartSaga() { Text = line, EnumerableOfThings = new List<string>{"abc", "abb", "bcd", "add", "ccc"}.Select(y => y)});\r\n\r\nand \r\n\r\n    Bus.Send(new StartSaga() { Text = line, EnumerableOfThings = new List<string>{"abc", "abb", "bcd", "add", "ccc"}.Where(y => y.StartsWith("a"))});\r\n\r\nand they work in 4.0.4 but I get a serialization error in 4.4.2.'
2026,'',"audit queue name should be required\nI just tried to enable audit feature. I have forgotten to specify audi queue name so my transport code throw exception becasue of invalid name of queue. I've changed to MSMQ transport and there everything was ok, but I don't think that queue was created.\r\n\r\n    2014-03-21 18:37:04,189 [9] DEBUG NServiceBus.Transports.Msmq.MsmqQueueCreator [(null)] <(null)> - Queue is on remote machine.\r\n    2014-03-21 18:37:04,190 [9] DEBUG NServiceBus.Transports.Msmq.MsmqQueueCreator [(null)] <(null)> - If this does not succeed (like if the remote machine is disconnected), processing will continue.\r\n    2014-03-21 18:37:04,190 [9] DEBUG NServiceBus.Transports.Msmq.MsmqQueueCreator [(null)] <(null)> - Checking if queue exists: @.\r\n    2014-03-21 18:37:04,242 [9] DEBUG NServiceBus.Unicast.Queuing.QueuesCreator [(null)] <(null)> - Verified that the queue: [@] existed\r\n"
2018,'',"Auto correlation for ReplyToOriginator between sagas doesn't work\nIf calling ReplyToOriginator from either:\r\n\r\n1. A timeout handler\r\n2. A handler that didn't start the saga\r\n\r\nthe autocorrelation for request/response doesn't work. This is because the saga id of the initating saga is needed to correlate back. This is lost when the saga instance is rehydrated.\r\n\r\n### Repro\r\n\r\nA full set of acceptance tests showing this can be found here:\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/4e4ab0317960bd827e2ff3f77e52042ab7131abc/src/NServiceBus.AcceptanceTests/Sagas/When_doing_request_response_between_sagas.cs\r\n\r\n### Workaround\r\n\r\nThe workaround is to specify mappings so that the infrastructure can find the originating saga using some property in the reply message.\r\n\r\n### Solution\r\nWe need to store the saga id of the starting saga in some kind of metadata field . (We should move the OriginatingEndpoint and OriginatingMessageId there as well)\r\n\r\n\r\n\r\nThis issue is opened to not confuse users seeing this issue:\r\n\r\nhttps://github.com/Particular/NServiceBus/issues/629"
2016,'',"Should the transport expose an API to aid in verifying if a target queue exists?\nGiven that we have multiple transports today, it would be nice to have an API that exposes IfQueueExists whose implementation would be based on the transport being used.\r\n\r\nThis would come in handy:\r\nwhen endpoints need to fail on startup if certain queues don't exist, rather than having to send a message and to catch a `QueueNotFoundException`\r\n\r\n@andreasohlund @johnsimons - Thoughts??"
2015,'',"IS with multiple worker processes not supported\nIIS has a very nice feature that allows a user to scale out a website in IIS.\r\nThis feature is called Web Garden:\r\n![mjzl7](https://f.cloud.github.com/assets/122651/2442392/86b87b40-ae21-11e3-8c57-9b5551382e56.png)\r\n\r\nUnfortunately, scaling out IIS this way won't work with NServiceBus.\r\nThings that will break are:\r\n- Callbacks\r\n- Event subscriptions\r\n"
2010,'','Clean up the way we invoke the serializers\nWe need to remove the `IMessageMapper` from the serializers since that is concern for the upper layers.\r\n\r\nHere is some notes from me and @indualagarsamy talking this through:\r\n\r\n## Scenarios\r\n\r\n1. NSB => NSB comms\r\n\t* Set a header in sender ("NServiceBus.EnclosedMessageType")\r\n\t* Read header in receiver\r\n\r\n\tif we can\'t figure out the message type  we should throw (not done today)\r\n\r\n2. Interop => NSB\r\n\t* They don\'t want to muck around with NSB headers  (there is a AMQP "MessageType" header we could support though)\r\n\r\n\t* Interop partners just send data\r\n\r\n\tThis means:\r\n\r\n\t1. We can\'t figure out message type before de-serializing\r\n\t2. If the serializer can figure out the CLR type from the "raw data" we can see if that matches a messagetype we know. If not we throw\r\n\r\n\teg:\r\n\r\n\t<MyEvent/>  //Unique match on *.MyEvent | MyEvent\r\n\r\n\t<Acme.MyEvent/> //exact match'
1999,'','Change the license expiration dialog to display appropriate messages when the license expires. \n- [ ] Implement the license expiration dialog to be consistent with the rest of the platform.\r\n- [ ] Use proper message when trial expires\r\n- [ ] Use proper message when upgrade protection expires\r\n\r\nRelates to https://github.com/Particular/Requirements/issues/20\r\n\r\ncc/ @andreasohlund '
1975,'','IBus.OutgoingHeaders API doco is wrong and is a confusing API\nThe purpose of `IBus.OutgoingHeaders` is to add global outgoing headers to all messages being sent out from this endpoint.\r\n\r\nWe should make the setting up of these global header more explicit at config time and prevent from being changed during runtime.'
1974,'','MessageIntent for Saga.ReplyToOriginator should be Reply\n@andreasohlund @indualagarsamy @SimonCropp \r\n\r\nIn this code, https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus/Saga/Saga.cs#L282\r\n\r\nThe message intent is going to be "Send", I think it should be Reply, thoughts?'
1963,'','NServiceBus Inconsistency Regarding The Configuration Of The Audit Queue\nMy scenario is that successfully processed orders are always being sent to a local Audit queue as opposed to a remote queue on another machine via Audit@MachineName. We desire to have the Audit messages sent to a dedicated server where ServiceControl will process them and expose the API that drives ServiceInsight and ServicePulse.\r\n\r\nI found the following URL which helped me figure this out http://particular.net/articles/auditing-with-nservicebus. From my perspective though this is an issue that should still be addressed.\r\n\r\nLet me explain. I originally had my service configured with this setting\r\n and I was running using NServiceBus 4.3. With this configuration it always writes to the local audit queue. I was pulling my hair out over this issue. I just upgraded to Version 4.4 and the same thing happens. \r\n\r\nHowever, if I reconfigure it to use\r\n \r\nand remove the ForwardReceivedMessagesTo entry it works. That is to say it sends it to the remote server.\r\n\r\nI was pulling my hair out for half a day trying to figure this out as we were working on setting up and testing ServiceControl and ServiceInsight (by the way ServiceInsight rocks now), as I did not see this in release notes or I missed it. In either case, it appears that we are trying to have our cake and eat it too. If we are attempting to be backward compatible then in my estimation, ForwardReceivedMessagesTo should continue to work as in the past. In which case I would consider this a bug worth fixing. Likewise, if both settings are present and we are attempting to be backward compatible then the question raised is this an exception case or do we by convention honor the newest configuration setting (this could work but is confusing to say the least). However, if backward compatibility is not the goal, then the Bus should throw an exception indicating that ForwardReceivedMessagesTo is deprecated and specify the new configuration mechanism to used moving forward. \r\n'
1957,'',"ReturnToSourceQueue is single threaded \nRecently we had a huge amount of error messages in our errorqueues and ran ReturnToSource queue, it is however singlethreaded.\r\n\r\nSo at least make it multithreaded, we found that 5 concurrent threads were the best match for our IO system but your milage may vary so maybe it should be configurable or an optional parameter to the CLI.\r\n\r\nTo speed up the process even more we removed the GetAllMessages call and just did Receive from the Error queue from a couple of threads, this makes startup faster so your system can get back to processing faster. However there is a lot of challenges here that you don't get a snapshot so if messages fail again you could run forever. I don't know of a pretty solution that takes this approach, so i guess GetAllMessages needs to be in there."
1942,'','Subscriptions should respect specific type\nrepro https://github.com/Particular/BugsRepro/tree/master/1942SubscriptionsShouldRespectSpecificType\r\n\r\nso I have a mapping in the subscriber\r\n    \r\n    <add Assembly="Publisher.Messages" Type="Publisher.Messages.OneEvent" Endpoint="Publisher" />\r\n\r\nNote I am explicitly saying I am interested in `OneEvent`. \r\n\r\nAnd in the subscriber I have a handler\r\n\r\n    public class EventHandler : IHandleMessages<IMyEvent>\r\n    {\r\n        public IBus Bus { get; set; }\r\n\r\n        public void Handle(IMyEvent message)\r\n        {\r\n            Debug.Assert(message is OneEvent);\r\n        }\r\n    }\r\n\r\nIn the publisher I do this\r\n\r\n            Bus.Publish(new OneEvent());\r\n            Bus.Publish(new TwoEvent());\r\n\r\nNow because the subscriber has said in the mapping "i am interested in OneEvent" then it should only receive `OneEvent`. However it receives both `OneEvent` and `TwoEvent`\r\n\r\nSo the logic we currently have for subscriptions is\r\n\r\n * look through the mappings\r\n * for any of the types check if we have handlers  **for the base types** \r\n * subscribe to the base types\r\n\r\nThis has unintended side effects as I have shown above.\r\n\r\nTo further illustrate how this is wrong a user should not expect these 3 mappings to behave the same way\r\n\r\n    <add Assembly="Publisher.Messages" Type="Publisher.Messages.TwoEvent" Endpoint="Publisher" />\r\n\r\n    <add Assembly="Publisher.Messages" Type="Publisher.Messages.OneEvent" Endpoint="Publisher" />\r\n\r\n    <add Assembly="Publisher.Messages" Type="Publisher.Messages.IMyEvent" Endpoint="Publisher" />\r\n\r\nIf we are interpreting both `TwoEvent` and `OneEvent` to mean `IMyEvent` we should throw an exception in the first two cases to avoid allowing the user to ambiguous+misleading configuration'
1941,'','Subscription is overwritten and hence fails to receive messages\nOccurs in 4.2 \r\n\r\nGet this solution https://github.com/Particular/BugsRepro/tree/master/1941OverWrittenSubscription\r\nRun it twice to ensure the subscriptions have a chance to wire up.\r\nOn the second run an exception should be thrown since the subscriber only receives an event from publisher 2. Event though the subscriber message mappings says it wants to subscribe to both publishers \r\n\r\n    <MessageEndpointMappings >\r\n      <add Assembly="Publisher1.Messages" Endpoint="Publisher1" />\r\n      <add Assembly="Publisher2.Messages" Endpoint="Publisher2" />\r\n    </MessageEndpointMappings>\r\n\r\nIf you look in the log file for the subscriber you will notice\r\n\r\n```\r\nNServiceBus.Unicast.Routing.StaticMessageRouter [(null)] <(null)> -\r\nRouting for inherited message: Common.Messages.IMyEvent(Publisher2.Messages.MyEvent) updated from Publisher1 to Publisher2\r\n```\r\n\r\nSo it seems NSB is explicitly overwriting the `Publisher1` subscription with the  `Publisher2` subscription.\r\n\r\n'
1939,'','Better error message for overlapping endpoint mappings\nso this\r\n\r\n```\r\n    <MessageEndpointMappings >\r\n      <add Assembly="Common" Endpoint="endpoint1" />\r\n      <add Assembly="Common" Endpoint="endpoint2" />\r\n```\r\n\r\nresults in this\r\n\r\n```\r\nSystem.Configuration.ConfigurationErrorsException occurred\r\n  HResult=-2146232062\r\n  Message=The entry \'Common\' has already been added. (C:\\Code\\ProductionTests\\src\\WireCompatTest\\Current\\bin\\Debug\\Current.dll.config line 12)\r\n  Source=System.Configuration\r\n  BareMessage=The entry \'Common\' has already been added.\r\n  Filename=C:\\Code\\ProductionTests\\src\\WireCompatTest\\Current\\bin\\Debug\\Current.dll.config\r\n  Line=12\r\n  StackTrace:\r\n       at System.Configuration.ConfigurationElementCollection.BaseAdd(ConfigurationElement element, Boolean throwIfExists, Boolean ignoreLocks)\r\n  InnerException: \r\n```\r\n\r\nNow @andreasohlund says we "explicitly dont support this".\r\n\r\nIf this is a scenario we explicitly dont support we should throw an explicit error message explaining why.'
1930,'','Intermittent license registry key error on SendOnly startup in web app\nI have seen this multiple times now, thankfully not in production yet, but on test servers, when the SendOnly bus initializes.  It does not happen frequently.  When it does, app recycle seems to fix it.\r\n\r\nThe app is in IIS 7.5, and running as a domain user account.\r\nServer 2008 R2 Standard.\r\nNServiceBus 4.0.3\r\n\r\n```csharp\r\nSystem.IO.IOException: Illegal operation attempted on a registry key that has been marked for deletion.\r\n\r\n   at Microsoft.Win32.RegistryKey.Win32Error(Int32 errorCode, String str)\r\n   at Microsoft.Win32.RegistryKey.CreateSubKeyInternal(String subkey, RegistryKeyPermissionCheck permissionCheck, Object registrySecurityObj, RegistryOptions registryOptions)\r\n   at Microsoft.Win32.RegistryKey.CreateSubKey(String subkey, RegistryKeyPermissionCheck permissionCheck)\r\n   at NServiceBus.Licensing.LicenseManager.ConfigureNServiceBusToRunInTrialMode()\r\n   at NServiceBus.Licensing.LicenseManager.Validate()\r\n   at NServiceBus.Licensing.LicenseManager.get_CurrentLicense()\r\n   at NServiceBus.Unicast.Transport.Config.Bootstrapper.Init()\r\n   at NServiceBus.Configure.<>c__DisplayClass47`1.<ActivateAndInvoke>b__44(Type t)\r\n   at System.Collections.Generic.List`1.ForEach(Action`1 action)\r\n   at NServiceBus.Configure.ActivateAndInvoke[T](Action`1 action, Nullable`1 thresholdForWarning)\r\n   at NServiceBus.Configure.Initialize()\r\n   at NServiceBus.ConfigureExtensions.SendOnly(Configure config)\r\n```\r\n\r\nNote: This is SendOnly, so a change to not touch the license manager might be good enough for me :)  Or if you figure out the root cause within LM, all the better.'
1929,'','Native Support for FLR / SLR\nTransports that support dead-lettering and delivery counting should be allowed to use those native capabilities when evaluating number of message processing attempts for FLR and SLR.\r\n\r\nWith the current implementation its non-deterministic such that depending on the number of nodes I have competing and processing messages the max number of attempts could be unknown.  This becomes more problematic when we have things like autoscaling for our service such that number of nodes may not be known.\r\n\r\nWith Azure ServiceBus not being able to known how many times the message it becomes difficult to properly configure max Delivery Attempts before Azure uses its native poison message handling to dead letter the message.'
1928,'','First Level Retries Leaks w/ Competing Consumers\nIt looks like FLR uses an internal dictionary to track attempts which could cause leaks as messages fail on consumer A and complete on consumer B, they are never cleaned up from A.\r\n\r\nhttps://groups.google.com/forum/#!topic/particularsoftware/dpvLC96p5Og\r\n\r\n\r\n '
1924,'',"Switch to Json as the default serializer\nI'd say we should switch to simple.json and move the json.net impl to a separate repo"
1920,'yvesgoeleven','Get rid of shared endpoint definitions in acceptance tests\nTests can influence each other because of this, if one fails, a bad message (or subscription in the case where I detected it), may cause another test to behave differently. '
1919,'','PubSub running performance tests\nI get the following exception when running PubSub.ps1:\r\n```\r\nUnhandled Exception: Raven.Client.Exceptions.NonAuthoritativeInformationException: Document Subscriptions/bba8ece5-a307-\r\nc852-7de5-4d5c5e80a1ef returned Non Authoritative Information (probably modified by a transaction in progress) and Allow\r\nNonAuthoritativeInformation  is set to false\r\n   at Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity[T](JsonDocument documentFound) in c:\\Builds\\Ra\r\nvenDB-Stable\\Raven.Client.Lightweight\\Document\\InMemoryDocumentSessionOperations.cs:line 335\r\n   at Raven.Client.Document.SessionOperations.MultiLoadOperation.<Complete>b__4[T](JsonDocument document) in c:\\Builds\\R\r\navenDB-Stable\\Raven.Client.Lightweight\\Document\\SessionOperations\\MultiLoadOperation.cs:line 71\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Raven.Client.Document.SessionOperations.MultiLoadOperation.Complete[T]() in c:\\Builds\\RavenDB-Stable\\Raven.Client.\r\nLightweight\\Document\\SessionOperations\\MultiLoadOperation.cs:line 70\r\n   at Raven.Client.Document.DocumentSession.LoadInternal[T](String[] ids) in c:\\Builds\\RavenDB-Stable\\Raven.Client.Light\r\nweight\\Document\\DocumentSession.cs:line 347\r\n   at NServiceBus.Persistence.Raven.SubscriptionStorage.RavenSubscriptionStorage.GetSubscriptions(IEnumerable`1 messageT\r\nypes, IDocumentSession session) in c:\\Projects\\NServiceBus\\src\\NServiceBus.Core\\Persistence\\Raven\\SubscriptionStorage\\Ra\r\nvenSubscriptionStorage.cs:line 87\r\n   at NServiceBus.Persistence.Raven.SubscriptionStorage.RavenSubscriptionStorage.NServiceBus.Unicast.Subscriptions.Messa\r\ngeDrivenSubscriptions.ISubscriptionStorage.Subscribe(Address client, IEnumerable`1 messageTypes) in c:\\Projects\\NService\r\nBus\\src\\NServiceBus.Core\\Persistence\\Raven\\SubscriptionStorage\\RavenSubscriptionStorage.cs:line 30\r\n   at PubSubTestCase.Run() in c:\\Projects\\NServiceBus\\src\\NServiceBus.PerformanceTests\\PubSub\\PubSubTestCase.cs:line 101\r\n\r\n   at Runner.Program.Main(String[] args) in c:\\Projects\\NServiceBus\\src\\NServiceBus.PerformanceTests\\Program.cs:line 32\r\nPS C:\\Projects\\NServiceBus\\src\\NServiceBus.PerformanceTests\\TestSuites> .\\PubSub.ps1\r\n```'
1916,'',"Issue JsonMessageSerializerBase - TypeNameHandling.None\nThe serializer method has different serializerSettings than the deserializer. This means the serializer has TypeNameHandling = TypeNameHandling.Auto but the deserializer has the TypeNameHandling = TypeNameHandling.None\r\n\r\nSo the deserializer can't benefit from the special json attributes $type, which has been created by the serializer, and causes the deserialization to fail.\r\n\r\nThe deserializer has the following condition\r\n\r\n    var requiresDynamicDeserialization = mostConcreteType != null && mostConcreteType.IsInterface\r\n\r\nIn my case looks the event as following\r\n\r\nIMyInterface\r\n\r\nMyBaseClassProperty\r\nSo MyBaseClassProperty is an abstract class and can represent multiple concrete types. Because the event it self is an interface you are turning the TypeNameHandling to None. MyBaseClassProperty requires the TypeNameHandling = Auto to be able to deserialize.\r\n\r\nAn abstract class or interface can have properties which are also interfaces or abstract classes and so on\r\n"
1906,'',"Introduce a naming convention for our different headers\nTo make easier to distinguish between runtime, user headers and diagnostics headers we should start using a naming convention. This has the following benefit:\r\n\r\n1. We can highlight the diagnostics headers better in our tooling\r\n2. Educate users to understand them better when using their native tools\r\n3. Remove the diagnostics headers when retrying from our tools\r\n4. Remove diagnostics headers on incoming messages\r\n\r\nProposed naming standards:\r\n\r\nRuntimeHeaders: NServiceBus.*\r\nDiagnostics headers: $diagnostics.*\r\nUser headers:  Anything that doesn't matches the above"
1867,'','Configure.Features.Enable<Audit> with no audit in config does not give useful error\nif we dont have a Audit queue configured `<AuditConfig QueueName="audit" />` but we have `Configure.Features.Enable<Audit>();`\r\n\r\nwe get \r\n\r\n```\r\nSystem.Messaging.MessageQueueException occurred\r\n  HResult=-2147467259\r\n  Message=Invalid queue path name.\r\n  Source=System.Messaging\r\n  ErrorCode=-2147467259\r\n  StackTrace:\r\n       at System.Messaging.MessageQueue.ResolveFormatNameFromQueuePath(String queuePath, Boolean throwException)\r\n  InnerException: \r\n```\r\n\r\nand then \r\n\r\n```\r\nSystem.ArgumentException occurred\r\n  HResult=-2147024809\r\n  Message=Invalid destination address specified\r\nParameter name: destination\r\n  Source=NServiceBus\r\n  ParamName=destination\r\n  StackTrace:\r\n       at NServiceBus.Address.Parse(String destination) in y:\\BuildAgent\\work\\31f8c64a6e8a2d7c\\src\\NServiceBus\\Address.cs:line 85\r\n  InnerException: \r\n```\r\n\r\n'
1862,'',"Add MaxRetries to SettingsHolder\nRight now it's deeply embedded into the core and cannot be changed without impact on the user's preferences."
1844,'','Move AutoCreation feature from Azure transports to the core (to replace DoNotCreateQueues)\nFeature.Disable<QueueAutoCreation>() is improvement over .DoNotCreateQueues()'
1838,'',"Improve our transport level interface for subscriptions\nThe current one make to many msmq (message driven pub sub) assumptions.\r\n\r\n\r\nCurrent:\r\n\r\n```\r\nvoid Subscribe(Type eventType, Address publisherAddress);\r\n```\r\n\r\nThe address isn't needed for the brokers. I propose the following breaking change:\r\n\r\n```\r\nvoid Subscribe(Type eventType, SubscribeOptions options);\r\n```\r\n\r\nThis way each transport can extend with their own extentions as needed, eg:\r\n\r\n```\r\nclass RabbitSubscribeOptions: SubscribeOptions \r\n{\r\n        public string TopicFilter;\r\n}\r\n```\r\n\r\nThis change would mean that the address lookup in UnicastBus:\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/UnicastBus.cs#L371\r\n\r\nwould be moved into the MessageDrivenSubscriptionManager where it belongs:\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Subscriptions/MessageDrivenSubscriptions/MessageDrivenSubscriptionManager.cs#L29\r\n\r\n\r\nRelated to: https://github.com/Particular/NServiceBus.RabbitMQ/issues/14\r\n\r\n\r\n\r\n"
1815,'','Extend the pipeline to include receiving from the transports\nIn essense each transport would provide the root receive behavior that would kick off physical receive pipelines as messages comes in'
1793,'','Simplify the way we attach headers to messages\nI propose the following:\r\n\r\n1. Add a Headers property to the upcoming SendOptions\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/SendOptions.cs#L5\r\n2. Obsolete Headers.SetMessageHeader https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus/Headers.cs#L234 and guide users to the Bus.Send(SendOptions) if they need to setheaders\r\n3. Obsolete the Headers.GetMessageHeaders method and guide users to the current message context if they need access to headers on incoming messages https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus/IBus.cs#L315\r\n\r\nThis would greatly simplify they way we manage headers with little impact on usability.\r\n\r\nThoughts?'
1779,'',"Allow MessageID to be set by users\nAdd MessageId to SendProperties to allow message id's to be set by users\r\n\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/SendOptions.cs#L5\r\n\r\nWe need this to allow users to make use of the builtindedup features of the underlying infrastructure. (like AzureServiceBus)\r\n\r\nFull discussion here:\r\n\r\nhttps://groups.google.com/forum/#!msg/particularsoftware/wsusY1_99RQ/X4VKNA98-8cJ\r\n\r\n"
1773,'','Should not populate exception headers before the message is forwarded to the error queue!\n**Steps to repro**\r\n1. Set up SLR\r\n2. Stop the endpoint after the FLR has attempted and the message has been  SLR retried but not forwarded to the error queue.\r\n3. Inspect the headers and notice that it has all of the headers relating to exceptions.\r\n\r\nWe should only add the exception headers when the message is going to be forwarded to the error queue and not before.\r\n\r\nSee code here:\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Faults/Forwarder/FaultManager.cs#L32\r\n\r\nInstead, this should only happen when forwarding to the error queue.\r\n\r\n@HEskandari @dannycohen - If we fix this issue, how will this affect ServiceInsight? '
1764,'','Use ConcurrentDictionary for TypeToNameLookup\nUsing a ConcurrentDictionary here https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Utils/Reflection/ExtensionMethods.cs would allows us to just lock on key not on the entire instances.\r\n\r\nSo simpler code and faster'
1742,'',"AssemblyScanner round 2\nWe are not done yet!\r\n\r\nWhat's left to do:\r\n- [ ] Skip assemblies that do not reference NServiceBus.dll;\r\n- [ ] Delay loading of message metadatas\r\n- [ ] make `MessageMapper` lazy. delete `MessageMapper.Initialize` and dive down the rabbit hole\r\n- [ ] make `XmlMessageSerializer` lazy. delete `XmlMessageSerializer.Initialize`. and dive down the rabbit hole\r\n- [ ] look at usages of `Configure.TypesToScan`. it will now only contain types from assemblies that reference NServiceBus.dll. As such need to confirm that no assumptions are made about it having types from assemblies that dont reference NServiceBus.dll\r\n- [ ] since `MessageMapper` and `XmlMessageSerializer` will be lazy they also need to be threadsafe in how they cache type information"
1738,'','Introduce Satellite conventions to be able to specify queue addresses\nCurrently the satellites such as the timeout feature use subscopes of the endpoints address. This for example creates various queues like:\r\n\r\nendpoint.retries\r\nendpoint.timeouts\r\n...\r\n\r\nThe problem with this is that when we want to specify a broker convention on the ActiveMQ broker we cannot do it globally but we have to repeat each configuration for each created queue. If we could name those queues or change the naming convention we would be able to use the following naming:\r\n\r\ntimeouts.endpoint\r\nretries.endpoints\r\n\r\nWhich would then allow to define broker conventions like:\r\n\r\ntimeouts.*\r\nretries.*'
1730,'','Introduce SendOptions to make IBus.Send more terse\nFull discussion here:\r\n\r\nhttps://github.com/Particular/NServiceBus/pull/1347#issuecomment-27769257'
1722,'','Split MessageMappers into specific uses\nSo as part of 4.2 we obsoleted MessageMapper  #1624 \r\n\r\nOn v5 this needs to be finished. \r\n\r\nThere are two implementations of `IMessageMapper`/`IMessageCreator`:  \r\n\r\n * `SimpleMessageMapper` used by `BinarySerialization`\r\n * `MessageMapper` used by `BsonSerialization`, `JsonSerialization` and `JsonSerialization`\r\n\r\nThe plan is to remove `IMessageMapper` and `IMessageCreator`  make the implementations specific use classes for their serializers.\r\n\r\n'
1715,'','Questionable FaultsHeaderKeys.FailedQ header handling in ReturnToSourceQueue\nSo here \r\nhttps://github.com/Particular/NServiceBus/blob/2081b66f35001b7d8da8425d1b77bf1910c37566/src/ReturnToSourceQueue/ErrorManager.cs#L61 \r\nWe read from the queue\r\n\r\nAnd here https://github.com/Particular/NServiceBus/blob/2081b66f35001b7d8da8425d1b77bf1910c37566/src/ReturnToSourceQueue/ErrorManager.cs#L84 \r\nWe catch `MessageQueueException` and handle the  `MessageQueueErrorCode.IOTimeout` \r\n\r\nThe problem is that the exception handling makes the assumption that the `FaultsHeaderKeys.FailedQ` header exists\r\nhttps://github.com/Particular/NServiceBus/blob/2081b66f35001b7d8da8425d1b77bf1910c37566/src/ReturnToSourceQueue/ErrorManager.cs#L117\r\nWhile the code that is executing indicates that the `FaultsHeaderKeys.FailedQ` header is optional\r\nhttps://github.com/Particular/NServiceBus/blob/2081b66f35001b7d8da8425d1b77bf1910c37566/src/ReturnToSourceQueue/ErrorManager.cs#L65\r\n\r\nso there are two options here\r\n\r\n1. `FaultsHeaderKeys.FailedQ` is optional and the catch should handle that\r\n2. `FaultsHeaderKeys.FailedQ` is required and the `ContainsKey` and null checks on  `FaultsHeaderKeys.FailedQ` are redundant.'
1711,'',"JSonSerialization exceptions when upgrading to NSB 4.1.1\n**Steps to repro:**\r\n1. Convert attached repro in https://nservicebus.desk.com/agent/case/3175 to use 4.1.1\r\n2. Press enter on the server to publish the event\r\n3. See the exception on the client\r\n\r\n**NOTE:** The attached sample works in version 3.3.8\r\nThe attached sample does not work when XmlSerialize is used in version 3.3.8\r\n\r\n**Message Hierarchy**\r\n\r\n    public interface ISomethingHappenedEvent\r\n    {\r\n        IList<IDtoWithMetaData> MetaDatas { get; set; }\r\n    }\r\n\r\n    public interface IDtoWithMetaData\r\n    {\r\n        Guid SomeId { get; set; }\r\n        DtoBase Dto { get; set; }\r\n    }\r\n\r\n    public abstract class DtoBase \r\n    {\r\n        public string SomeBaseProperty { get; set; }\r\n    }\r\n\r\n    public class ADto : DtoBase\r\n    {\r\n        public string A { get; set; }\r\n    }\r\n    public class BDto : DtoBase\r\n    {\r\n        public string B { get; set; }\r\n    }\r\n    public class CDto : DtoBase\r\n    {\r\n        public string C { get; set; }\r\n    }\r\n\r\n**Event being published:**\r\n\r\n    public void Handle(DoSomethingCommand message)\r\n    {\r\n        List<IDtoWithMetaData> eventData = new List<IDtoWithMetaData>();\r\n\r\n        foreach (var dtoBase in message.Items)\r\n        {\r\n            eventData.Add(new DtoWithMetaData() { Dto = dtoBase, SomeId = Guid.NewGuid()});\r\n        }\r\n        Bus.Publish<ISomethingHappenedEvent>(m =>\r\n            {\r\n                m.MetaDatas = eventData;\r\n            });\r\n    }\r\n\r\n**Deserialization exception on the client:**\r\n\r\n    2013-10-25 14:39:57,460 [18] ERROR NServiceBus.Unicast.Transport.TransportReceiv\r\n    er [(null)] <(null)> - Failed to serialize message with ID: c64d685e-1e86-4ade-b\r\n    851-a26200f1ad04\r\n    System.Runtime.Serialization.SerializationException: Could not deserialize messa\r\n    ge. ---> Newtonsoft.Json.JsonSerializationException: Could not create an instanc\r\n    e of type Messages.DtoBase. Type is an interface or abstract class and cannot be\r\n     instantiated. Path '[0].MetaDatas[0].Dto.A', line 1, position 214.\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject\r\n    (JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMem\r\n    ber, JsonProperty containerProperty, String id, Boolean& createdFromNonDefaultCo\r\n    nstructor) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(Js\r\n    onReader reader, Type objectType, JsonContract contract, JsonProperty member, Js\r\n    onContainerContract containerContract, JsonProperty containerMember, Object exis\r\n    tingValue) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInte\r\n    rnal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty mem\r\n    ber, JsonContainerContract containerContract, JsonProperty containerMember, Obje\r\n    ct existingValue) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValu\r\n    e(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract\r\n    containerContract, JsonProperty containerProperty, JsonReader reader, Object tar\r\n    get) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(\r\n    Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty m\r\n    ember, String id) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(Js\r\n    onReader reader, Type objectType, JsonContract contract, JsonProperty member, Js\r\n    onContainerContract containerContract, JsonProperty containerMember, Object exis\r\n    tingValue) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInte\r\n    rnal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty mem\r\n    ber, JsonContainerContract containerContract, JsonProperty containerMember, Obje\r\n    ct existingValue) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IL\r\n    ist list, JsonReader reader, JsonArrayContract contract, JsonProperty containerP\r\n    roperty, String id) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(Json\r\n    Reader reader, Type objectType, JsonContract contract, JsonProperty member, Obje\r\n    ct existingValue, String id) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInte\r\n    rnal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty mem\r\n    ber, JsonContainerContract containerContract, JsonProperty containerMember, Obje\r\n    ct existingValue) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValu\r\n    e(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract\r\n    containerContract, JsonProperty containerProperty, JsonReader reader, Object tar\r\n    get) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(\r\n    Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty m\r\n    ember, String id) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(Js\r\n    onReader reader, Type objectType, JsonContract contract, JsonProperty member, Js\r\n    onContainerContract containerContract, JsonProperty containerMember, Object exis\r\n    tingValue) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInte\r\n    rnal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty mem\r\n    ber, JsonContainerContract containerContract, JsonProperty containerMember, Obje\r\n    ct existingValue) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IL\r\n    ist list, JsonReader reader, JsonArrayContract contract, JsonProperty containerP\r\n    roperty, String id) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(Json\r\n    Reader reader, Type objectType, JsonContract contract, JsonProperty member, Obje\r\n    ct existingValue, String id) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInte\r\n    rnal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty mem\r\n    ber, JsonContainerContract containerContract, JsonProperty containerMember, Obje\r\n    ct existingValue) in :line 0\r\n       at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(Jso\r\n    nReader reader, Type objectType, Boolean checkAdditionalContent) in :line 0\r\n       at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type\r\n     objectType) in :line 0\r\n       at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectT\r\n    ype) in :line 0\r\n       at NServiceBus.Serializers.Json.JsonMessageSerializerBase.Deserialize(Stream\r\n    stream, IList`1 messageTypes) in :line 0\r\n       at NServiceBus.Unicast.UnicastBus.Extract(TransportMessage m) in :line 0\r\n       --- End of inner exception stack trace ---\r\n       at NServiceBus.Unicast.UnicastBus.Extract(TransportMessage m) in :line 0\r\n       at NServiceBus.Unicast.UnicastBus.HandleMessage(IBuilder builder, TransportMe\r\n    ssage m) in :line 0\r\n       at NServiceBus.Unicast.UnicastBus.HandleTransportMessage(IBuilder childBuilde\r\n    r, TransportMessage msg) in :line 0\r\n\r\n\r\n"
1705,'','Decide what to do about `HandleCurrentMessageLater`\nThe current behavior in 4.1 (and probably also in the upcoming 4.2) is that `Bus.HandleCurrentMessageLater()` will send the transport message currently being handled to the back of the input queue - and nothing else! \r\n\r\nThree fifths of the core team expected that the message handler pipeline would stop after having executed the handler in question, but that was not the case.\r\n\r\nIOW, when the doco states that "the message will be moved to the back of the input queue", I would argue that the word "moved" ought to be changed into "copied".\r\n\r\nIn 4.3 we should probably decide whether we want to a) change the behavior so that any handlers following the current handler will be aborted, or b) change the doco and/or change the API to be more intuitive.\r\n\r\nI\'m leaning towards (b) and renaming it to `ForwardCurrentMessageToSelf`, because then the behavior we expected can easily be achieved by going \r\n\r\n    Bus.ForwardCurrentMessageToSelf();\r\n    Bus.DoNotContinueDispatchingCurrentMessageToHandlers();\r\n\r\n`ForwardCurrentMessageToSelf` would be a better name IMO because it matches the already existing `ForwardCurrentMessageTo(destination)`'
1703,'','How to create queue when self hosting?\nWhen NServiceBus is self hosted, the "installation time" is not well defined, specifically how does a user create the queues at install time?\r\n\r\nCurrently most self hostings out there are calling:\r\n```c#\r\nConfigure.Instance.ForInstallationOn<Windows>().Install();\r\n``` \r\nAnd usually this is called from:\r\n```c#\r\n...\r\n.CreateBus()\r\n.Start(() => Configure.Instance.ForInstallationOn<Windows>().Install());\r\n```\r\n\r\nEven though the above works and this is what we have been telling people to do, it is not the correct way to do it because the code above will run every time the self hosted is restarted and if the user follows best security practices the account running the self hosted should be as restrictive as possible and therefore not have rights to create queues.\r\n\r\n**So the question is, how do we provide a nice install time for self hosting?**\r\n\r\n'
1702,'','Dealing with a message handler that is unresponsive\nCreating issue as per skype discussion with @SimonCropp ...\r\n\r\nWhat happens if a dev writes a msg handler that has Thread.Sleep(forever) in it?\r\nOr if the msg handler sync calls a badly behaved service with a stupidly long timeout.\r\n\r\nIs there any way to terminate runaway/rogue threads in the host?\r\n\r\nWhen using the DTC this is obviously handled by DTC with a timeout.  But I would expect this to be a problem common to all non-DTC brokered transports - would be preferable to have this handled at an NSB level rather than within msg handlers.'
1682,'','Allow configurable message retry upon failure to support broker failover\nNServiceBus 4.0 does not appear to have native retry support for non-MSMQ HA broker failover.  You can get an exception when you send a message to a broker node that has gone down. Client code can catch that exception and retry.  The message will go through if you try and send again because the cluster will fail over to the new master messaging node and NServiceBus creates a new connection for messages following failover.  I believe this works because some of the client code,  Rabbit code,in particular, has settings for MaxRetries and RetryDelay that are used in the TryToConnect() to re-establish the connection.\r\n\r\nThe dev team has said that there is code to handle re-connection in endpoints when the Bus.Send() or Bus.Publish happens inside of a  message handler.  There are cases where messages are sent from code that is not a handler. In these cases there is no retry behavior. Ex: applications that produce change events as part of their normal processing. These applications are not NServiceBus endpoints and do not have  NServiceBus handlers.  \r\n\r\nEvery Bus.Send() and Bus.Reply() call needs to be wrap-able with retry logic. That currently has to happen in custom code. It might be possible to create a wrapper object that is configured in the DI container and injected into application code. That won\'t be enough because "Bus"/"IBus" is injected into a bazillion NServiceBus classes so there isn\'t any obvious way to wrap the Bus class with a proxy, wrapper or aspect to add the retry behavior. Someone could add a helper hook to the dependency configuration for a wrapper/proxy.  That would let folks pick which type of retry they want including the number of retries and the roll off times and algorithms.  Supporting different retry behavior for different message types seems useful but more complicated.\r\n\r\nHow do people create robust apps that handle cluster failover?\r\n\r\n\r\n\r\nOriginal question at https://groups.google.com/forum/#!topic/nservicebus/iOnPVXuuoKs\r\n'
1651,'','When using Msmq as transport, when a message is unable to be delivered to one of the subscribers (on the local machine), no subscribers get the event\n**Steps to Repro:**\r\n\r\n1. Have a publisher publish an event\r\n2. Have 2 subscribers listen to that event (one of them local)\r\n3. Delete the local queue for one of the subscribers\r\n4. When the publisher attempts to publish an event, it will throw an exception, and all other subscribers will not receive the event.\r\n\r\n![image](https://f.cloud.github.com/assets/854553/1309823/d8b6978c-31e5-11e3-922d-b16519d25fad.png)\r\n\r\n**NOTE:**\r\n**For the message not to be sent, it has to be an extreme case, where someone deleted the queue. Or messed with the subscription entries.** '
1648,'','Change Bus.Schedule to use a control message instead of a real message\nhttps://github.com/Particular/NServiceBus/issues/1574'
1626,'','Remove use of [ThreadStatic] from XmlMessageSerializer \nSo `XmlMessageSerializer` makes heavy use of `[ThreadStatic ]`\r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/XML/XmlMessageSerializer.cs#L1382\r\n\r\nThis is not great for several reasons\r\n\r\n* Unintended side effects: Threads can be re-threads or multiple actions can happen on the same thread. So it can be easy for bugs to occur as code evolves.\r\n* Performance implications: [The cost of ThreadStatic attribute](http://tips.x-tensive.com/2008/10/cost-of-threadstatic-attribute.html)\r\n\r\n`XmlMessageSerializer` should be changed to use the factory pattern  and create lightweight instances of "serializers" or "deserializers". Then these instances can have their own instance variables.\r\n\r\nThis would also have a side effect of splitting `XmlMessageSerializer` into 3, more manageable, parts.'
1625,'','Serializers should not be configuring MessageMapper\nCurrently the `MessageMapper` is configured inside the Serializers\r\n\r\n * https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/XML/Config/XmlSerialization.cs\r\n * https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/Json/Config/BsonSerialization.cs\r\n * https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/Json/Config/JsonSerialization.cs\r\n\r\nHowever it is not just "a serialization concern". For example `UnicastBus` relies on it https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/UnicastBus.cs#L768\r\n\r\nSo is someone wants to create their own serializer they would need to know to also configure `MessageMapper`. This is not a great scenario.\r\n \r\n`MessageMapper` config should be treated as seperate concern.'
1623,'','Remove static caching from XmlMessageSerializer\nSo `XmlMessageSerializer` is scoped as `SingleInstance` https://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/XML/Config/XmlSerialization.cs#L11\r\n\r\nYet it does static caching \r\nhttps://github.com/Particular/NServiceBus/blob/develop/src/NServiceBus.Core/Serializers/XML/XmlMessageSerializer.cs#L1371\r\n\r\n\r\n'
1620,'','Refactor serializers to not depend on message mapper\nwe have the knowledge of the types outside the serializers. we should pass that in at serialization time so the serializers dont need to re-query the message mapper'
1619,'','Refactor UnicastBus to capture message type earlier\nbasically we know from the `T` when someone is sending an interface what the message type is. We use it to create the interface proxy and construct the instance. The re re-query the mapper when doping the serialization. '
1618,'','Make the mapper throw if no mapped type is found for interfaces\nie throw instead of warn here\r\n\r\n        void GenerateImplementationFor(Type interfaceType, ModuleBuilder moduleBuilder)\r\n        {\r\n            if (interfaceType.GetMethods().Any(mi => !(mi.IsSpecialName && (mi.Name.StartsWith("set_") || mi.Name.StartsWith("get_")))))\r\n            {\r\n                Logger.Warn(string.Format("Interface {0} contains methods and can there for not be mapped. Be aware that non mapped interface can\'t be used to send messages.",interfaceType.Name));\r\n                return;\r\n            }\r\n            var mapped = CreateTypeFrom(interfaceType, moduleBuilder);\r\n            interfaceToConcreteTypeMapping[interfaceType] = mapped;\r\n            concreteToInterfaceTypeMapping[mapped] = interfaceType;\r\n            typeToConstructor[mapped] = mapped.GetConstructor(Type.EmptyTypes);\r\n        }'
1617,'','Enable lazy messages\nplaceholder that will be fleshed out later'
1610,'','Stop sending .net specific type info in the EnclosedMessageTypes header\nWe\'re leaking platform info and it should be enough to send the Fullname eg Acme.OrderPlaced (we actually already support this on the receiving side) and the message version. \r\n\r\nThis will also solve a concrete issue we have in ServiceControl where the EndpointPlugin merges the messages dll so it\'s sent as:\r\n\r\n    EndpointPlugin.Messages.Heartbeat, EndpointPlugin"\r\n\r\nBut the backend doesn\'t ilmerge so the heartbeat message is in a assembly called EndpointPlugin.Messages.\r\n\r\nThis causes the messages to fail unnecessarily.\r\n\r\n# Testing\r\n\r\n* Make sure that performance is not effected'
1583,'','Subscribe to same event type from multiple publishers \n#### Here is the scenario:\r\n\r\nTwo publishers publish different event types, eg MyEvent1 and MyEvent2\r\nBoth of these events share the same base interface/abstract class, eg:\r\n\r\n```c#\r\npublic interface MyEvent1 : MyCommonInterface {}\r\npublic interface MyEvent2 : MyCommonInterface {}\r\n```\r\n\r\nA subscriber want to subscribe to both of those events using the base interface, eg:\r\n```xml\r\n<MessageEndpointMappings>\r\n      <add Assembly="boo" Type="MyCommonInterface" Endpoint="MyEndpointA" />\r\n      <add Assembly="boo" Type="MyCommonInterface" Endpoint="MyEndpointB" />\r\n</MessageEndpointMappings>\r\n```\r\nThe above does not work and it fails saying ""MyCommonInterface" is already subscribed."\r\n\r\nShould this be supported?\r\n/cc @andreasohlund @udidahan \r\n'
1573,'',"Local backoff for outbox\nAs an extension to the planned outbox feature (which supports non-DTC), it would be beneficial for some remote storages to have a backoff outbox as well in case it would not be reachable from the machine, this should be an opt in feature and we need to communicate explicitly though that we're in best effort mode at that time, f.e. the machine gets recycled in azure"
1565,'','Handlers should get the child container IBuilder\nSince handlers are called in the context of a child container, they should get that instance!\r\n\r\nUnfortunately this is very broken :disappointed: \r\n\r\nSo, if I have the following handler:\r\n```c#\r\npublic class RequestDataMessageHandler : IHandleMessages<RequestDataMessage>\r\n{\r\n    public IBuilder Builder { get; set; } // This gets a new IBuilder instance! Not the main one nor the child one!!!!\r\n\r\n    public void Handle(RequestDataMessage message)\r\n    {\r\n        var b = Configure.Instance.Builder; // This gets the main IBuilder, not the child IBuilder!\r\n    }\r\n}\r\n```'
1545,'indualagarsamy','Fix the Scaleout Sample\n**Problem:**\r\n\r\nThe sample for the ScaleOut has the following issues:\r\n\r\n- It leads users in thinking that they can run distributor + worker on the same box!!! (which is an anti-pattern)\r\n- It gets confusing (rightfully so) when the messages occasionally get lost (while they hide in the Orders.Handler.Guid queue)\r\n\r\n\r\n**Suggested fix:**\r\n\r\n- Modify the scaleout sample to only contain the master node.\r\n- Document how to scale out by either copying the bin folder to another machine or copy to the local machine and tweek the endpoint name + distributor address to simulate a scale out scenario\r\n- Also point the users to the ScaleOut HOL\r\n- Remove the code in the core that auto generates unique input queue names\r\n- Create a acceptance test that runs a master node (valid for msmq only)'
1542,'','Audit events published by a publisher even when there are no subscribers\n\r\n**Current Behavior:**\r\n\r\nThe events will only be audited, as long as there is a subscriber that handles the event published. Messages are forwarded to the audit queue, after they have been successfully processed by the message handlers.\r\n\r\n**Proposed Behavior:**\r\n\r\nWhen Auditing is turned on, the events published by the publisher should also get audited regardless of there are subscribers that handle those events or not.'
1497,'','Refactor satellites to abstract class\n### Proposal\r\n- [ ] Create an abstract class called `Satellite` that will wrap `bool Handle(TransportMessage message);` in a child container\r\n- [ ] Update all satellites to use new abstract class\r\n- [ ] New abstract class will implement both `ISatellite` and `IAdvancedSatellite` and make the definitions overridable\r\n\r\nI would also mark `ISatellite` and `IAdvancedSatellite` as obsolete in favor of the new abstract class.\r\nWe could also get rid of `SatelliteContext` and push all that logic into the abstract `Satellite` class.\r\n'
1489,'','Creating queues automatically while in development, good or bad?\n### Current situation\r\nThe F5 problem free experience that we currently give our users where we run the installers(queues get automatically created, databases get created, ...) by default if the user is running inside VS (debugger is attached) is quite nice. **But it also has its own disadvantages.**\r\n\r\n### Disadvantage\r\nWhen it comes time to deploy in a real environment, users don\'t actually know the procedure on how to do it!\r\nYes you need to run the installers! If running with our host you need to call -install!\r\n\r\nSo I wonder if in this case "the cure is worse than the disease", thoughts?\r\n\r\n'
1482,'','XML deserialization fails for nested interfaces if the nested interface instance has no properties set\nWe have two nested interfaces. ie: the outer interface contains two properties that are the 2nd interface. There are three possibilities for the values in the nested interfaces.  We use the NServiceBus tooling to create autogenerated proxies for the interfaces.  XML Deserialization fails in certain situations.\r\n\r\n1. child Interface property not set\r\n2. child Interface property set to auto-generated proxy impl with no properties set\r\n3. child Interface property set to auto-generated proxy impl that has properties set\r\n\r\nAll three scenarios work when using the JSON serializer\r\nTwo of the three scenarios work with the XML serializer.  It fails when a complex property interfaced type property is populated with a proxy that has no properties set.\r\n\r\n\r\n------------ This test program demonstrates the problem -------------\r\n\r\n```\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing NServiceBus;\r\nusing NServiceBus.Serializers.XML;\r\nusing NServiceBus.Serializers.Json;\r\nusing NServiceBus.MessageInterfaces;\r\nusing NServiceBus.MessageInterfaces.MessageMapper.Reflection;\r\nusing log4net;\r\n\r\nnamespace Messages.Tests\r\n{\r\n    /// <summary>\r\n    /// This class demonstrates some of the issues we had with serialization fo nested interfaces\r\n    /// </summary>\r\n    [TestClass]\r\n    public class InterfaceSerializerTest\r\n    {\r\n        private static readonly ILog Log = LogManager.GetLogger(typeof(InterfaceSerializerTest));\r\n\r\n        IMessageMapper mapper;\r\n        XmlMessageSerializer aXmlSerializer;\r\n        JsonMessageSerializer aJsonSerializer;\r\n        MemoryStream ourMemoryStream;\r\n\r\n        [TestInitialize]\r\n        public void TestSetup()\r\n        {\r\n            Type[] ourTypes = new Type[] { typeof(IFooProperties), typeof(IFooMessage), };\r\n            mapper = new MessageMapper();\r\n            /// handles the interface to dynamic class creation\r\n            mapper.Initialize(ourTypes);\r\n            aXmlSerializer = new XmlMessageSerializer(mapper);\r\n            /// handles the serialization mapping\r\n            aXmlSerializer.Initialize(ourTypes);\r\n\r\n            aJsonSerializer = new JsonMessageSerializer(mapper);\r\n\r\n            ourMemoryStream = new MemoryStream();\r\n            ourMemoryStream = new MemoryStream();\r\n        }\r\n\r\n        [TestCleanup]\r\n        public void TestCleanup()\r\n        {\r\n            ourMemoryStream.Close();\r\n\r\n        }\r\n\r\n        ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        /// <summary>\r\n        /// Test where the outer interface has only one fully filled out instance of an child\r\n        /// </summary>\r\n        [TestMethod]\r\n        public void Test_InterfaceSerialization_Xml_NoPrevious()\r\n        {\r\n            /// this creates the proxy for IFooMessage\r\n            IFooMessage event1 = CreateProxyWithCurrentNoPrevious();\r\n            object[] results;\r\n            aXmlSerializer.Serialize(new[] { event1 }, ourMemoryStream);\r\n            ourMemoryStream.Flush();\r\n            LogStreamContentsAndReset(ourMemoryStream);\r\n            results = aXmlSerializer.Deserialize(ourMemoryStream);\r\n            /// verify the original interface type\r\n            Assert.IsTrue(results[0] is IFooMessage);\r\n            IFooMessage deserialized = (IFooMessage)results[0];\r\n            Assert.IsNotNull(deserialized.Current);\r\n            Assert.IsNull(deserialized.Previous);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Test where the outer interface has only one fully filled out instance of an child\r\n        /// </summary>\r\n        [TestMethod]\r\n        public void Test_InterfaceSerialization_Json_NoPrevious()\r\n        {\r\n            /// this creates the proxy for IFooMessage\r\n            IFooMessage event1 = CreateProxyWithCurrentNoPrevious();\r\n            object[] results;\r\n            aJsonSerializer.Serialize(new[] { event1 }, ourMemoryStream);\r\n            ourMemoryStream.Flush();\r\n            LogStreamContentsAndReset(ourMemoryStream);\r\n            results = aJsonSerializer.Deserialize(ourMemoryStream);\r\n            /// verify the original interface type\r\n            Assert.IsTrue(results[0] is IFooMessage);\r\n            IFooMessage deserialized = (IFooMessage)results[0];\r\n            Assert.IsNotNull(deserialized.Current);\r\n            Assert.IsNull(deserialized.Previous);\r\n        }\r\n\r\n        ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        /// <summary>\r\n        /// Test where the outer interface has one fully filled out and one with no properties set\r\n        /// </summary>\r\n        [TestMethod]\r\n        public void Test_InterfaceSerialization_Xml_EmptyPrevious()\r\n        {\r\n            /// this creates the proxy for IFooMessage\r\n            IFooMessage event1 = CreateProxyWithCurrentNoPrevious();\r\n            /// try an empty interface sub-object\r\n            IFooProperties previous = mapper.CreateInstance<IFooProperties>();\r\n            /// create and use an empty previous instance\r\n            event1.Previous = previous;\r\n            ourMemoryStream.Seek(0, SeekOrigin.Begin);\r\n            aXmlSerializer.Serialize(new[] { event1 }, ourMemoryStream);\r\n            ourMemoryStream.Flush();\r\n            LogStreamContentsAndReset(ourMemoryStream);\r\n            object[] results;\r\n            results = aXmlSerializer.Deserialize(ourMemoryStream);\r\n            /// verify the original interface type\r\n            Assert.IsTrue(results[0] is IFooMessage);\r\n            IFooMessage deserialized = (IFooMessage)results[0];\r\n            Assert.IsNotNull(deserialized.Current);\r\n            Assert.IsNotNull(deserialized.Previous);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Test where the outer interface has one fully filled out and one with no properties set\r\n        /// </summary>\r\n        [TestMethod]\r\n        public void Test_InterfaceSerialization_Json_EmptyPrevious()\r\n        {\r\n            /// this creates the proxy for IFooMessage\r\n            IFooMessage event1 = CreateProxyWithCurrentNoPrevious();\r\n            /// try an empty interface sub-object\r\n            IFooProperties previous = mapper.CreateInstance<IFooProperties>();\r\n            /// create and use an empty previous instance\r\n            event1.Previous = previous;\r\n            ourMemoryStream.Seek(0, SeekOrigin.Begin);\r\n            aJsonSerializer.Serialize(new[] { event1 }, ourMemoryStream);\r\n            ourMemoryStream.Flush();\r\n            LogStreamContentsAndReset(ourMemoryStream);\r\n            object[] results;\r\n            results = aJsonSerializer.Deserialize(ourMemoryStream);\r\n            /// verify the original interface type\r\n            Assert.IsTrue(results[0] is IFooMessage);\r\n            IFooMessage deserialized = (IFooMessage)results[0];\r\n            Assert.IsNotNull(deserialized.Current);\r\n            Assert.IsNotNull(deserialized.Previous);\r\n        }\r\n\r\n        ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        /// <summary>\r\n        /// Test where the outer interface has two fully filled out interface proxies for the two children\r\n        /// </summary>\r\n        [TestMethod]\r\n        public void Test_InterfaceSerialization_Xml_WithPrevious_WithProps()\r\n        {\r\n            /// this creates the proxy for IFooMessage\r\n            IFooMessage event1 = CreateProxyWithCurrentNoPrevious();\r\n            /// try an empty interface sub-object\r\n            IFooProperties previous = mapper.CreateInstance<IFooProperties>();\r\n            /// create a prevoius with at least one value on it\r\n            event1.Previous = previous;\r\n            previous.ZipCode = "00900";\r\n            ourMemoryStream.Seek(0, SeekOrigin.Begin);\r\n            aXmlSerializer.Serialize(new[] { event1 }, ourMemoryStream);\r\n            ourMemoryStream.Flush();\r\n            LogStreamContentsAndReset(ourMemoryStream);\r\n            object[] results;\r\n            results = aXmlSerializer.Deserialize(ourMemoryStream);\r\n            /// verify the original interface type\r\n            Assert.IsTrue(results[0] is IFooMessage);\r\n            IFooMessage deserialized = (IFooMessage)results[0];\r\n            Assert.IsNotNull(deserialized.Current);\r\n            Assert.IsNotNull(deserialized.Previous);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Test where the outer interface has two fully filled out interface proxies for the two children\r\n        /// </summary>\r\n        [TestMethod]\r\n        public void Test_InterfaceSerialization_Json_WithPrevious_WithProps()\r\n        {\r\n            /// this creates the proxy for IFooMessage\r\n            IFooMessage event1 = CreateProxyWithCurrentNoPrevious();\r\n            /// try an empty interface sub-object\r\n            IFooProperties previous = mapper.CreateInstance<IFooProperties>();\r\n            /// create a prevoius with at least one value on it\r\n            event1.Previous = previous;\r\n            previous.ZipCode = "00900";\r\n            ourMemoryStream.Seek(0, SeekOrigin.Begin);\r\n            aJsonSerializer.Serialize(new[] { event1 }, ourMemoryStream);\r\n            ourMemoryStream.Flush();\r\n            LogStreamContentsAndReset(ourMemoryStream);\r\n            object[] results;\r\n            results = aJsonSerializer.Deserialize(ourMemoryStream);\r\n            /// verify the original interface type\r\n            Assert.IsTrue(results[0] is IFooMessage);\r\n            IFooMessage deserialized = (IFooMessage)results[0];\r\n            Assert.IsNotNull(deserialized.Current);\r\n            Assert.IsNotNull(deserialized.Previous);\r\n        }\r\n        ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        private IFooMessage CreateProxyWithCurrentNoPrevious()\r\n        {\r\n            IFooMessage event1 = mapper.CreateInstance<IFooMessage>();\r\n            /// create a valid object to put on the current property\r\n            IFooProperties current = mapper.CreateInstance<IFooProperties>();\r\n            current.ZipCode = "90210";\r\n            event1.Current = current;\r\n            return event1;\r\n        }\r\n\r\n        public void LogStreamContentsAndReset(MemoryStream stream)\r\n        {\r\n            // the test is short data so we can cast\r\n            int sLength = (int)stream.Length;\r\n            // diagnostic\r\n            stream.Seek(0, SeekOrigin.Begin);\r\n            byte[] buffer = new byte[sLength];\r\n            stream.Read(buffer, 0, sLength);\r\n            string foo = System.Text.Encoding.Default.GetString(buffer);\r\n            Log.Debug("xml string content is: " + foo);\r\n            stream.Seek(0, SeekOrigin.Begin);\r\n        }\r\n    }\r\n\r\n    public interface IFooMessage : IMessage\r\n    {\r\n        IFooProperties Previous { get; set; }\r\n        IFooProperties Current { get; set; }\r\n    }\r\n\r\n    public interface IFooProperties\r\n    {\r\n        string ZipCode { get; set; }\r\n    }\r\n}\r\n```'
1471,'',"Add ability to turn off checks for messaging best practices on case by case basis\nI have a publisher that does Bus.Publish(ISomeEvent). I'd also like to send this information to other sites over the gateway. However, Bus.SendToSites fails because of the message [best practices check](http://support.nservicebus.com/customer/portal/articles/856271-introducing-ievent-and-icommand).\r\n\r\nIn v4.0, when using the unobtrusive mode, I have to either \r\n- translate the event to a command, send it over the gateway and translate back to event at the other end\r\n- register the event as a command in my unobtrusive conventions\r\n\r\nSee [here](http://tech.groups.yahoo.com/group/nservicebus/message/20340) for more details\r\n"
1469,'','Allow endpoints to use multiple transports\nTo better support users with a mixed environment we should support multiple transports for each endpoint\r\n\r\n* Pub/Sub should be seamless without sharing substorages\r\n\r\n* Each endpoint has a default transport\r\n\r\n* Endpoint mappings/routing should support specifying transport type\r\n\r\n* ServiceControl needs to support multi transport to allow for a "uber central error q" if needed\r\n'
1465,'','Rename UnicastBusConfig to RoutingConfig \nAfter separating out the audit, and the distributor config from UnicastBusConfig, it makes more meaning to call it Routing config, as it essentially provides the endpoint message mappings.\r\n\r\nAlso what needs to be happen to the `TimeoutManagerAddress` which is currently specified in the UnicastBusConfig?\r\n\r\nShould it be `RoutingConfig` or `MessageRoutingConfig` ?'
1394,'','Add ability to disable message version discard feature\nAs defined here http://www.particular.net/articles/publish-subscribe-configuration\r\n\r\n> In NServiceBus V3.0 and onwards subscriptions for types with the same Major version are considered compliant. This means that a subscription for MyEvent 1.1.0 will be considered valid for MyEvent 1.X.Y as well.\r\n\r\nHowever some users of NServiceBus dont control their versioning scheme. For example some are forced into a YYYY.MM.DD.Build version number.\r\n\r\nSo for these people it would be helpful to be able to disable the version incompat check. \r\n\r\nthis is a simpler alternative to #1035'
1383,'','Default queue name for brokers transports is problematic in development\nThe default queue name for broker transports when using the `As_AClient` role or self hosting is EndpointName@MACHINENAME.\r\n\r\nThis unfortunately has the disadvantage of not working in a development team environment as the mappings would be different in each developer machine :disappointed: \r\n\r\n//cc @andreasohlund '
1370,'','Setting MaximumConcurrencyLevel to 0 throws exception under MSMQ\nRelated to #1361\r\n\r\nThis is required to decommission distributor workers'
1350,'','Move over to lean interfaces combined with extension methods\nTake UnicastBus + IBus  for example\r\n\r\nIt has many combinations of overloads that just point to the real implementation.\r\n\r\nSo instead of this approach how about make IBus much leaner. Only the methods that are required with all the parameters. The other methods can just be extension methods off IBus. This would trim a significant amount of noise from UnicastBus and make implementing IBus much simpler for other people.\r\n\r\nNote that I am using IBus as an example. the same could help keep other interfaces leaner. \r\n\r\n\r\n\r\n '
1273,'',"Move the FLR check to run after the message has been processed\nThis will make sure that we don't rollback the message to the queue only to pull it up only to sent it to SLR\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Transport/TransportReceiver.cs#L308"
1272,'','Change the transportmessage to use a stream instead of a byte[] for the body\nThis will make it easier to control updates to the body and will save memory since we can stream the payload straight into the serializers without copying it into memory'
1250,'','High Critical time reported when Timeout message arrives.\nWhen a timeout message with a header like the example below arrives a very high value is reported by the Critical time performance counter. This could cause false alarms for administrators if they are monitoring Critical time.\r\nHeaders:\r\n\r\n\t <HeaderInfo>\r\n\t  <Key>NServiceBus.Version</Key>\r\n\t  <Value>3.3.5</Value>\r\n\t </HeaderInfo>\r\n\t <HeaderInfo>\r\n\t  <Key>NServiceBus.TimeSent</Key>\r\n\t  <Value>2013-06-13 07:37:04:712995 Z</Value>\r\n\t </HeaderInfo>\r\n\t <HeaderInfo>\r\n\t <HeaderInfo>\r\n\t  <Key>NServiceBus.Timeout.Expire</Key>\r\n\t  <Value>2013-06-19 23:00:10:000000 Z</Value>\r\n\t </HeaderInfo>\r\n\r\nFull message exported using Queue explorer\r\nhttps://dl.dropboxusercontent.com/u/5142781/TimeoutMessage.mq\r\n'
1217,'','Using non-FIPS compliant encryption (MD5)\nMD5 encryption is being used in RavenPersistenceConstants. MD5 is not FIPS compliant.\r\n\r\nSee this thread for details:\r\n\r\nhttp://tech.groups.yahoo.com/group/nservicebus/message/19200\r\n'
1199,'','DataBus should support Stream types\nIt would be nice if you could just define a property of type Stream\r\n\r\n\tpublic class MyUberFatCommand\r\n\t{\r\n\t\tpublic Stream Payload { get; set; }\r\n\t}\r\n\r\nThat would also make it *much* easier and lightweight as currently you must read the payload in memory with has a pretty big performance impact when the payload is large.\r\n\r\nSecond, defining the databus property naming convention is then also pretty simple!\r\n\r\n\t.DefiningDataBusPropertiesAs(pi => typeof(Stream)==pi.PropertyType)\r\n\r\n\r\nDoes that make any sense?\r\n'
1184,'','consolidate on one mocking framework\nSeems Moq, NUnit.Mocks and RhinoMocks are being used\r\n\r\nAny specific reason for this?\r\n\r\nOr can they be consolidated?'
1177,'','Add support to serialize access to a specific saga instance\nFor sagas with high concurrency its more efficient to lock the "row/document/key/whatever" in the storage when fetching the instance. This avoid alot of rollback if there is a lot of concurrency for the given saga.\r\n\r\nWe could either do\r\n\r\n1. inmemory across all threads with a mutex\r\n   - Pros: works for all persisters\r\n   - Cons won\'t work when scaled out or when multiple endpoints access the same saga instance\r\n\r\n2. With eg a attribute on the saga instance/saga data that would hint the storage\r\n    - Pros: More efficient to do it in the storage, supports scaled out endpoints\r\n    - Cons: Require each storage to handle this. Some storage might not support locking\r\n\r\n'
1161,'',"clear saga timeouts when timeout manager is disabled\nHi\r\nI use NSB 3.2.7 and I've noticed that when I disable timeout manager `DisableTimeoutManager` then nsb still send message to timeouts queue after saga complete (Clear saga timeouts). As a result I end up with full queue because nothing read from timeout queue. I think that in NSB 4.0 this problem still appear."
987,'','IAuthorizeSubscriptions not supported by broker implementations (RabbitMQ and ActiveMQ)\nBecause the brokers do not need to send a Subscribe/Unsubscribe message to the publisher,  `IAuthorizeSubscriptions` is never invoked for these transports!\r\n\r\n#### The first task that needs to be done is:\r\n* [ ] Work out if we still need `IAuthorizeSubscriptions`, does anyone actually use this?\r\n\r\nIf the interface is required then\r\n#### Brokers implementation:\r\n* Do we make the authorisation part of the broker itself?\r\n* If the authorisation is on the broker, do we rename the interface to be transport specific?\r\n* Do the authorisation in [UnicastBus](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/UnicastBus.cs#L422) instead of [Mutator](https://github.com/NServiceBus/NServiceBus/blob/develop/src/NServiceBus.Core/Unicast/Subscriptions/MessageDrivenSubscriptionManager.cs)\r\n* Or do the authorisation on each `IManageSubscriptions` impl\r\n'
925,'','Make the subscription version strategy pluggable\nToday we always include the Major version of a subscribed message so that you need to resubscribe if the major version is bumped. This is not suitable for all users so we should make this configurable'
881,'','Have a non generic Saga.RequestTimeout with no state\nTake this example\r\nhttps://github.com/NServiceBus/NServiceBus/blob/develop/IntegrationTests/TimeoutManager/MyServer/Saga/SimpleSaga.cs#L15\r\n\r\nIf i dont have any state for the call back it looks like this\r\n\r\n     public class SimpleSaga:Saga<SimpleSagaData>,\r\n        IAmStartedByMessages<StartSagaMessage>,\r\n        IHandleTimeouts<MyTimeOutState>\r\n    {\r\n        public void Handle(StartSagaMessage message)\r\n        {\r\n            Data.OrderId = message.OrderId;\r\n            RequestTimeout<int>(TimeSpan.FromSeconds(10));\r\n        }\r\n\r\n        public override void ConfigureHowToFindSaga()\r\n        {\r\n            ConfigureMapping<StartSagaMessage>(s => s.OrderId, m => m.OrderId);\r\n        }\r\n\r\n        void LogMessage(string message)\r\n        {\r\n            Console.WriteLine(string.Format("{0} - {1} - SagaId:{2}", DateTime.Now.ToLongTimeString(),message,Data.Id));\r\n        }\r\n\r\n        public void Timeout(int fake)\r\n        {\r\n            LogMessage("Marking the saga as complete, be aware that this will remove the document from the storage (RavenDB)");\r\n            MarkAsComplete();\r\n        }\r\n\t\t\t}\r\n\r\nNote that i need a fake type to work around the missing non-generic version'
846,'','FileShareDataBus.Start implement cleanup\nCurrently the databus does not implement cleanup logic for files which have a timetobereceived set. This could actually use NSB scheduling featuers to cleanup the files periodically.'
794,'','DefiningMessagesAs includes NServiceBus interfaces and throws exceptions\nWriting a sample app I stumbled onto an issue where DefiningMessagesAs includes NServiceBus interfaces and throws exceptions.\n\nhttps://github.com/kijanawoodard/WebApiRavenNsbSample/blob/master/Sample.NServiceBus.Conventions/UnobtrusiveConventions.cs#L15\n\nBy commenting out that line, everything worked as expected.\n\nI saw one of the samples had:\n&& !t.Namespace.StartsWith("NServiceBus")\n\nThat makes sense, but should every dev need to remember to do this? Should NServiceBus classes be automatically excluded when DefiningXYZAs?\n\nForum thread:\nhttp://tech.groups.yahoo.com/group/nservicebus/message/17214\n\nI agree with Andreas other DLLs could cause problems. Maybe a "best practice", *cough*, would be to scope Messages to the project\'s namespace. For SOA purposes, Messages, Commands, and Internal Events shouldn\'t leave the Service scope anyway.'
778,'','Enable users to control the parallelism for each individual satellite\n'
750,'','Add support for clients to use their fully qualified hostname as their return address\nWe should add a flag to use Dns.GetHostEntry(serverName).HostName instead of the Environment.MachineName. \n\nDepending on how we do this the check for a local input queue might need to be modified\nhttps://github.com/NServiceBus/NServiceBus/blob/master/src/impl/unicast/queuing/NServiceBus.Unicast.Queuing.Msmq/MsmqMessageReceiver.cs#L28'
748,'','Add support for auto tuning of the number of worker threads\nGiven that we now can monitor throughput and change worker threads dynamically there is a possibility to auto-tune the number of threads. This takes the burden of the user who needs to do this manually to find the optimum number for each specific endpoint.'
736,'','Support multiple serialization formats when receiving messages\nThis is a prerequisite for #693\r\n\r\n### Proposed solution\r\n\r\n* [ ] On startup load all found serializers, mark the configured one as default. Use the default serializer for outgoing messages\r\n\r\n* [x] Add a content type header to outgoing messages\r\n\r\n* [ ] When receiving: If header exists use that serializer, if not fall back to the default one\r\n\r\n* [ ] Introduce to `IMessageSerializer` the following method\r\n```c#\r\n/// <summary>\r\n/// Whether the IMessageSerializer can deserialize the content type.\r\n/// </summary>\r\n/// <param name="contentType">Content type to deserialize.</param>\r\n/// <returns>True if supported, false otherwise.</returns>\r\nbool CanDeserialize(string contentType)\r\n```\r\n'
626,'','Databus properties are not supported for fields lists and subproperties\nDetect this on scanning and throw a good exception\r\n\r\n## Workaround\r\n\r\nThe current workaround is to skip the databus and design the message contract to only pass links to the big properties. Essentially mimicking what the databus is doing'
526,'','Possible infinite loop caused by hitting the 4MB MSMQ limit\nThis is a situation that hopefully will never happen but it could.\n\nSo the situation is if the Server receives a message that is just off by a few bytes from hitting the 4MB MSMQ limit.\nIf the message fails to process due to a bug in a handler, we would add extra headers to that message including stacktrace.\nThese extra header could put the message just above the 4MB limit!\n\nWhen we try to send the message to the error queue it would fail. So the message would be rolled back into the input queue.\n\nAnd then we would process the message again .... and again ... and again ...'
522,'','Add the "owning" endpoint to each saga instance\nIn order to support versioning better we should tag each saga instance with the owning endpoint. Related to #257'
463,'',"Treat custom implementation of IManageMessageFailures in the same way as the built in FaultManager is treated\nHi,\r\n\r\nWhen a custom implementation of IManageMessageFailures is provided then ErrorQueue property is not being set.\r\nAdditionally it's impossible to extend the built-in FaultManager via inheritance because it implementes IManageMessageFailures explicitly. \r\nIf it's possible please register the built-in implementation in the container so it can be extended using composition.\r\n\r\nThis is a sample implementation that works for me but feels more like a hack than a proper solution.\r\n\r\nThanks\r\n```\r\npublic class CustomFaultManager : IManageMessageFailures\r\n    {\r\n        private readonly IManageMessageFailures faultManager;\r\n        static CustomFaultManager()\r\n        {\r\n            Configure.Instance.MessageForwardingInCaseOfFault();\r\n        }\r\n\r\n        public CustomFaultManager()\r\n        {\r\n            faultManager = new FaultManager();\r\n            ((FaultManager)faultManager).ErrorQueue = ConfigureFaultsForwarder.ErrorQueue;\r\n        }\r\n\r\n        void IManageMessageFailures.SerializationFailedForMessage(TransportMessage message, Exception e)\r\n        {\r\n            faultManager.SerializationFailedForMessage(message, e);\r\n        }\r\n\r\n        void IManageMessageFailures.ProcessingAlwaysFailsForMessage(TransportMessage message, Exception e)\r\n        {\r\n            faultManager.ProcessingAlwaysFailsForMessage(message, e);\r\n            //Custom code goes here\r\n        }\r\n\r\n        void IManageMessageFailures.Init(Address address)\r\n        {\r\n            faultManager.Init(address);\r\n        }\r\n    }\r\n```"
346,'','Make auto correlated properties [Unique] by default\nProperties set to be auto correlated by the user, CorrelatedBy(s=>s.CustomerId); should be [Unique] by default'
313,'','Set auto correlated saga properties automatically on incoming messages\nIf there is a mapping for a message property on the incoming message we should set the correlated saga data property with the value of the message property.\r\n\r\n'
298,'','Support multiple saga instances to be activated for the same message\nRight now we don\'t support multiple saga instances being activated by the same message. To do this we must modify the ISagaPersister interface to allow the Get(string property..) (https://github.com/NServiceBus/NServiceBus/blob/master/src/core/NServiceBus.Saga/ISagaPersister.cs#L37)\r\nto return a IEnumerable instead. \r\n\r\nIf we find that we have a unique constraint for the given property we would use the safer and better performing way of fetching the saga mentioned here:\r\n\r\nhttps://github.com/NServiceBus/NServiceBus/pull/268\r\n\r\nIn order to support this in a safe way for our users we must consider batching when the number of returned sagas is greater than X. Otherwise there would be to much things going on inside a single transaction and the risk for a TX timeout would be high. To support this we could do a bus.SendLocal() for each saga instance putting the saga id and type in the headers. This would effectively make each instance execute in its own transaction.\r\n\r\nNote: To do this we must avoid our own conventions since it\'s not allow to "send" events.\r\n'
53,'','Support for debug symbols\nAdd support for pushing our debug symbols using the nuget integration with symbol source\r\n\r\nhttp://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-symbol-package'
