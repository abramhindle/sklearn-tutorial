@relation large.json
@attribute id integer
@attribute owner string
@attribute content string
@data
4454,'PaulAdamDavis',"Permalink UI Revisited\nI've just tried out the permalink UI in master, and it seems to be broken (it doesn't do anything, and there are console errors).\r\n\r\nI'm also not 100% sure how it is supposed to work, and the only description I can find is that it is supposed to work like squarespace. \r\n\r\nPlease could you take a few minutes to revisit this, see if it needs fixing, and also do a writeup / LiceCAP describing and showing the intended behaviour? Then we can get stuck in :)"
4432,'felixrieseberg',"Navbar user menu doesn't close in Safari\nThe navbar user menu dropdown does not close when clicking an item inside to or clicking outside.\r\nThe publish button uses the same component, but actions instead of `#link-to`.\r\n\r\nI have added a console log to the [close function](https://github.com/TryGhost/Ghost/blob/master/core/client/components/gh-dropdown.js#L67-L69) and the close function does fire, but doesn't work.\r\n\r\n![safari-navbar](https://cloud.githubusercontent.com/assets/390392/4992034/287312e2-6993-11e4-834a-84a3fa908624.gif)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Log into Ghost\r\n2. Click the user menu button\r\n3. Get angry\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: master (latest commit: 0b35df49e459b2acea501a5dd0d9661dfb7eb6ab)\r\n* Client OS: Mac OS X 10.10\r\n* Browser: Safari 8.0 (desktop)"
4400,'novaugust',"Autosave causing the 'do you want to leave' nag on new posts\nThis has been reported as happening in Mac OS Chrome via twitter: https://twitter.com/webalys/status/529882514760818688\r\n\r\nI have not been able to reproduce it, but my Mac is not yet on Yosemite. User has confirmed it's only happening on new posts.\r\n\r\nIt's not yet clear whether the alert is the browser one:\r\n\r\n![](http://puu.sh/cE2D5.png)\r\n\r\nor our modal:\r\n\r\n![](http://puu.sh/cE2Ah.png)\r\n\r\n But I'd guess the browser one.\r\n\r\nOn a slight tangent, but possibly related if it is the browser one, I've seen reports of it firing when focusing from the title to the main editor on some more obscure browsers (which makes sense but shouldn't be happening) and in IE I've repeatedly seen the message which is supposed to display, appear as 'null'. \r\n\r\nHaving worked with `window.onbeforeunload` before, I seem to remember it works slightly differently in different browsers and is quite sensitive to subtle things like whether the return value is empty, `null` or `undefined`.\r\n\r\n## Steps to reproduce\r\n\r\n1. Open a post\r\n2. Enter text in the title\r\n3. Enter text in the body\r\n4. Wait for autosave\r\n\r\n## Technical Details\r\nBrowser: Chrome (does not happen on FF)\r\nOS: Mac OSX\r\n\r\n## Possibly related:\r\n\r\nhttps://code.google.com/p/chromium/issues/detail?id=341476\r\n"
4390,'PaulAdamDavis','Incorrect menu transition on publish button\nCorrect (fast fade-in/out)\r\n\r\n![menu-good](https://cloud.githubusercontent.com/assets/120485/4899952/5c85aecc-6421-11e4-88d9-c811511da84c.gif)\r\n\r\nBroken (slow fade-in/out)\r\n\r\n![menu-bad](https://cloud.githubusercontent.com/assets/120485/4899958/6584d674-6421-11e4-973a-1843eb3e57ba.gif)\r\n'
4369,'novaugust','Hitting Cmd + S on the meta tab clears the data\nThis might well be related to #4366 - something seems to be a bit wonky with keeping the data correctly in sync on save of the meta tab.\r\n\r\nIf you hit `ctrl/cmd + s` after filling out the meta title and description, the post is saved but the fields are wiped clean.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new post\r\n2. Go to the meta tab in the post settings menu (PSM)\r\n3. Fill out the fields\r\n4. Press `ctrl / cmd + s` without closing the PSM\r\n5. See that the fields are now blank\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: master / 0.5.3'
4344,'PaulAdamDavis','Fix hardcoded image path in navbar\nThe `-navbar` template defaults to a user profile image with a hard path, `src="/shared/img/user-image.png"`. Needs to use gh-paths to make sure it works when the blog is in a subdirectory'
4340,'PaulAdamDavis',"Tiny visual issue with editor floating headers on scroll\nThis is so subtle I could even be imagining it. When scrolling in the editor in 0.5.3 I can see tiny vertical shadows in the floating headers:\r\n\r\n![](http://puu.sh/cri2d.png)\r\n\r\nI'm sure they weren't there before?"
4330,'PaulAdamDavis',"Bug: Inconsistent handling of profile picture aspect ratio\n### Issue Summary\r\nIn the author profile and at the head of each post, the aspect ratio of the uploaded picture is unchanged, but in list view and in the top bar of the admin area, the profile picture appears to be 'squarified' before the circle is cut.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Upload a not-square profile picture\r\n2. Observe the difference between the smaller circle in the top right of the admin area, and in the 'edit user' area within the admin area (other locations listed above work, this shows them all in one place.\r\n\r\nThis is a bug because...\r\nIt's inconsistent behaviour. I don't actually know if this is a theme issue or not, but I *thought* the admin area was not part of themes, so let's stick with that specifically.\r\n\r\nHere are two screenshots, first from the admin area, observe the bigger bottom left, and the smaller (squished) top right:\r\n![screen shot 2014-10-23 at 3 55 10 pm](https://cloud.githubusercontent.com/assets/450860/4760286/ab3b1458-5aee-11e4-9080-03a90439ea20.png)\r\nAnd from the author posts-list page, a little bigger, but compage the top middle circle and the one next to the post name:\r\n![screen shot 2014-10-23 at 3 55 25 pm](https://cloud.githubusercontent.com/assets/450860/4760293/bb3ecd9a-5aee-11e4-872e-73d64f4f9d7b.png)\r\n\r\n\r\n### Technical details\r\n\r\n* Ghost Version: master - latest commit:  INSERT COMMIT REF\r\n* Client OS: OS X 10.9\r\n* Server OS: Ubuntu 14.04.1\r\n* Node Version: 0.10.25\r\n* Browser: Chrome 38.0.2125.104\r\n* Database: default (sqlite)"
4316,'jaswilli','Cannot signin on iOS 8.0-8.1 Safari\n### Issue Summary\r\n\r\nWhen you try to login into ghost admin on an iPhone 5c, a blank page appears. This means i cannot login to ghost with Safari.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Try to go to /ghost and try to login\r\n2. You are greeted with a blank page\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 0.5.2\r\n* Client OS: iOS 8.1\r\n* Server OS: 14.04.1 LTS\r\n* Node Version: 0.10.32\r\n* Browser: Safari\r\n* Database: SQLite\r\n\r\nRelated community post: https://ghost.org/forum/using-ghost/16371-ios-8-problem/'
4279,'novaugust',"Stable branch shows a blank admin page\n__Summary__\r\nStable is not stable anymore, admin page is blank with nothing on the screen\r\n\r\n__Steps to reproduce__\r\n* Clean clone of ghost \r\n* checkout stable\r\n* npm install\r\n* grunt init \r\n* npm start. \r\n* go to /ghost/\r\n* setup first informations & submit.\r\n\r\n__Observed result__\r\nwhen it's done you have nothing of the admin page, it's juste the background and you got an error in the console : `Brace expanded properties cannot contain spaces, e.g. 'user.{firstName, lastName}' should be 'user.{firstName,lastName}'`\r\n\r\n__Expected result__ \r\nAdmin page displayed entirely and correctly\r\n\r\n__Additional Information__\r\nGhost Version: Stable (last commit 1a303b0328df553f06d638d4a58ac417bb4b2118)\r\nServer OS: OSX 10.9.5\r\nNode: 0.10.32\r\n"
4265,'novaugust',"Change keyboard shortcut context\ncloses #4247\r\n- added scope to every shortcut, the scope of shortcut is default to\r\n  'default'\r\n- add shortcut `enter` to modal which confirm the modal\r\n- shortcut `enter` and `esc` now have scope 'modal'\r\n- when lunch a modal, scope is switching to 'modal', and set back to\r\n  'default' when close\r\n- shortcut `enter` now confirm the dialog without conflicting with route\r\n  shortcuts"
4260,'cobbspur','Create Tags Management Stubs for Ember\nThis is part of the #4248 epic.\r\n\r\nTo get things started on the client side, the HTML added in #4171 should be moved into Ember.\r\n\r\nThis has three bits:\r\n\r\n1. New settings subroute, "tags"  (`/settings/tags`)\r\n\r\n    a) Make a new "tags" route inside of the settings routes.\r\n    b) Add the route to `router.js`\r\n    c) Link the route from the settings.hbs template\r\n\r\n2. New settings view, "tags"\r\n\r\n    Follow the pattern of extending the [base settings view](https://github.com/TryGhost/Ghost/blob/master/core/client/views/settings/users.js) to keep mobile compatibility\r\n\r\n3. Pull the correct markup out of the static HTML page and put it in a "settings/tags" handlebars template.\r\n\r\nNo functionality for the tab management page needs to be implemented at this point, we just want to be able to get to the page.'
4235,'felixrieseberg','Case sensitivity for email addresses in user operations\nThere are (at least) a couple issues right now relating to user email addresses and case sensitivity:\r\n\r\n* An invitation to an email address with at least one uppercase letter will result in an invitation that will not be allowed to create a new user account.\r\n\r\n* Logging in with an email address is treated in a case insensitive manner (which is good) but password reset requests require the user to know the case of all the letters in their email address as it exists in the database.\r\n\r\nThe API methods need to be adjusted to not lowercase email addresses and/or use `getByEmail` to query for the correct email address.'
4231,'cobbspur','Create theme image helpers with absolute attributes\nCurrently we use handlebars to output raw data from:\r\n\r\n* `{{image}}`\r\n* `{{author.image}}`\r\n\r\nThese output relative url paths to the image files. It would be helpful if these were turned into helpers supporting an absolute value, eg.\r\n\r\n* `{{image absolute="true"}}`\r\n* `{{author.image absolute="true"}}`\r\n\r\nWith output including `@blog.url` prepended to the image path.\r\n\r\nPrimary use-case: For valid output in meta tags, eg. in #3900 '
4225,'jaswilli','Various broken theme behavior when using symlinks\nAssuming identical content of "casper_mod_1" and "casper_mod_2" in the following directory structure, if "casper_mod_2" is a symlinked folder:\r\n```\r\n./Ghost/content/themes$ ls -l\r\ndrwxr-xr-x 4 ghost_blog ghost_blog 4096 Sep 29 19:25 casper\r\ndrwxr-xr-x 4 ghost_blog ghost_blog 4096 Oct  1 19:01 casper_mod_1\r\nlrwxrwxrwx 1 ghost_blog ghost_blog   24 Sep 26 16:07 casper_mod_2 -> ../../../themes/casper_mod_2/\r\n```\r\n* The tag view (tag.hbs) will not be read (specifically ```!themePaths.hasOwnProperty(\'tag.hbs\')``` doesn\'t return as expected and you get index.hbs instead)\r\n* Similarly, any specialized page views aren\'t read (you get the default view)\r\n* The name doesn\'t show up properly when switching themes in settings.\r\n\r\nI  suspect all the above are related to the way symlinks are read or handled though.'
4211,'felixrieseberg',"Enhancement: Shorter user slugs\nIf I enter my name as `John O'Nolan` the slug generated is `john-onolan` which is awesome in most places, but in the context of user slug you almost always want the shortest thing possible.\r\n\r\nIn an ideal world, trim at the first space character - so if `john` is available is a slug, I get that - if not, it tries `john-onolan` - and finally if that's not available, it tries `john-onolan-1` (like normal)"
4208,'PaulAdamDavis','Layout of edit page is not compatible with Chrome\n![capture](https://cloud.githubusercontent.com/assets/4638046/4436791/401e5aa6-4782-11e4-87ed-fa12d44fc3e1.PNG)\r\n\r\nIE works well, bug chrome...'
4196,'novaugust',"Resetting password doesn't log me in\n## Issue Summary\r\n\r\nWhen I successfully re-enter my password, having entered it twice, I am then redirected to the sign-in screen. Even though the admin client knows my email, and my password at this point, it makes me write it all over again.\r\n\r\nIt would be nice if resetting my password just logged in me; this is the behavior I intuit.\r\n\r\n--------------------------\r\nI just want to make it clear: I don't think the API should do this, I think Ember should."
4189,'javorszky',"Abstract away deprecated options in config\nCurrently the list of deprecated items is hardcoded into the method that checks it here: https://github.com/TryGhost/Ghost/blob/1f5a378b4c7beccd380ee5a9ed09661ad9cda2af/core/server/config/index.js#L322\r\n\r\nI'd like to move it out of there and into the `config.set()` method mirroring pretty much any other option options.\r\n\r\nPlease assign to me. :)"
4186,'PaulAdamDavis',"Bug: Correct header element is hidden on mobile\nTo help make Ghost feel more native, we use `-webkit-overflow-scrolling: touch;` which enables elastic-like scrolling in places where `overflow: auto;` is used.\r\n\r\nHowever, this doesn't play nicely with `position: fixed;` elements, so things get stacked incorrectly, as seen in the screenshot below.\r\n\r\nThe markup for the settings screens needs to be changed a bit to allow the proper use of `-webkit-overflow-scrolling: touch;`.\r\n\r\n![slack_for_ios_upload](https://cloud.githubusercontent.com/assets/390392/4420993/8bdb0408-457f-11e4-8acd-c1485f4942b6.png)"
4164,'PaulAdamDavis','Hover state on publish button gets stuck when clicked\n![highlightbug](https://cloud.githubusercontent.com/assets/120485/4404262/27a9add4-44af-11e4-972b-61bfbceebef1.gif)\r\n'
4157,'ErisDS',"Bug: /api/ has lost cache-control headers\nAll of the /api/ endpoints are getting served with the header \r\n\r\n`cache-control:public, max-age=0`\r\n\r\ninstead of \r\n\r\n`cache-control:no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0`\r\n\r\nApparently, the API tests don't actually check these headers!\r\n"
4150,'PaulAdamDavis','Landscape mode on mobile messes up tag bar\n1. Open "Getting Started" post on mobile in landscape mode\r\n2. Tap text to start editing\r\n3. Tap the burger menu button\r\n4. Observe the result below\r\n\r\n![unnamed](https://cloud.githubusercontent.com/assets/176576/4395783/81c3c556-442e-11e4-9a03-7f8e27c63033.png)\r\n\r\nTested on: Ghost 0.5.2-rc1'
4138,'PaulAdamDavis','Bug: Flicker when closing dropdown menu component\nWhen closing any dropdown by clicking on the chevron, there is a flicker.\r\n\r\n1. Click on the chevron\r\n2. Wait at least a second\r\n3. Click on the chevron again\r\n\r\nResult:\r\n\r\n![flicker](https://cloud.githubusercontent.com/assets/120485/4387206/3442b912-43da-11e4-9144-93840c966382.gif)\r\n'
4130,'novaugust',"About page top contributors is a bit squiffy\nWhen we first started work on the top contributors for the about page, we were pre 0.5.0 and not really sure how the new release stuff was all going to pan out.\r\n\r\nNow that we're here about to do a release, it makes sense that we count from 0.5.0. It may be that we count from 0.5.0 until 0.6.0, or that there are significant enough releases in the middle to reset. We should probably do something consistent, so for now I think we should assume it's going to be the last minor version bump (so 0.5.0, then 0.6.0...).\r\n\r\nRunning `git shortlog -s -n --no-merges 0.5.0..master` gives me something [like this list](https://gist.github.com/ErisDS/a849772266fd028e5c40) and is the command I usually run to generate the list for the release post.\r\n\r\nThe current implementation of top contribs for the about page uses the specified tag to fetch a date, and then uses the date to fetch the top contributors according to the github stats page here on the repo.\r\n\r\nAs it is possible for commits to have been done before the tag was cut, this means we get a slightly different result, which is confusing.\r\n\r\nI recommend instead using the following API endpoint to get all the commits between two points, and manually looping over the commits and counting how many their are per author. Merge commits can be removed by checking the message doesn't start with 'Merge pull request'.\r\n\r\nhttps://api.github.com/repos/TryGhost/Ghost/compare/0.5.0...master\r\n\r\nIt would be great to be able to specify both the start and end points as grunt options:\r\n\r\n`grunt buildAboutPage --force --from=0.5.0  --to=0.5.2` ??\r\n\r\nAlternatively having them hardcoded is fine as I have to commit the HTML for the page anyway ;).\r\n"
4123,'PaulAdamDavis',"Tag suggestions bubble has gone AWOL\nYet another AWOL component :(\r\n\r\nWhen typing a tag into the tag input, there are no longer any suggestions shown. It exists in the markup, it just can't be seen. Guessing this is another z-index bug?"
4121,'jaswilli',"Post Settings Menu: Make the default publish date and slug values editable\nIssue history:\r\n\r\nThis issue is being raised in favour of #3204 and #3382 - two separate issues which each covered the same usability problem, one for the slug and one for the published date.\r\n\r\nFor reference, the original issue which described the desired behaviour of these 2 fields is here: #1351. \r\n\r\nWe have also had PRs for these two issues: #3875 for #3204 (date) and #3390 for #3382 (slug), however both of the PRs are currently stalled.\r\n\r\n---\r\n\r\nThe underlying usability problem with the two of these fields, is that the placeholder value, which is the default value, is something that a user might reasonably want to edit. However as they are implemented as placeholders, the data disappears as soon as you focus the field.\r\n\r\nThe intention is to change the behaviour of the two fields, so that the default value can be edited. However this isn't quite straightforward as the two fields behave slightly differently:\r\n\r\n- On a new post, the slug placeholder updates it's value as the title updates, until the post is saved for the first time. According to #1351, this is meant to stay a placeholder until the post is published, but I believe this was deliberately changed (although I'm not 100%).\r\n- On a new post, the date is set to the current time by default. It doesn't get converted to a value on save, so each time the post is reopened, the updated current time will be shown until either a custom date is entered, or the post is published.\r\n\r\nSo in short:\r\n- slug -> default converted to saved value on first save\r\n- date -> default converted to saved value on publish\r\n\r\nIn order to make these defaults editable, we need to set them as values, rather than as the placeholder. \r\nHowever, if the values aren't edited by the user, the defaults should continue to update until the point at which they become a proper saved value in the same way as they do now."
4114,'PaulAdamDavis','Tags are completely broken on mobile\nThis whole thing is horrible and needs to be completely rewritten - but we need some sort of very basic fix for this right now.\r\n\r\n![mobiletags](https://cloud.githubusercontent.com/assets/120485/4369977/6d46205a-4303-11e4-8ee2-9f066b0db776.gif)\r\n'
4106,'PaulAdamDavis','Update editor specific overlay\nThis should be a part of the settings-menu component, and used everywhere that there is a settings menu. It is not specific to the editor.\r\n\r\n```CSS\r\n//\r\n// Post Settings Menu\r\n// --------------------------------------------------\r\n\r\n body.right-outlet-expanded {\r\n\r\n    .editor-cover {\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        z-index: 600;\r\n        transition: transform $side-outlet-transition-duration cubic-bezier(0.1, 0.7, 0.1, 1);\r\n        transform: translate3d(-350px, 0px, 0px); // Not off the screen, to give a parallax effect\r\n    }//.editor-cover\r\n}//body.right-outlet-expanded\r\n```'
4104,'PaulAdamDavis','Regression: Dropdown menu animations are all broken\nDejavú #352\r\n\r\nIgnore the empty menu itself - this issue is about the hover/active states of the dropdown arrow. This should work as it used to in 0.4.\r\n\r\nThis is a blocker for release - and top priority.\r\n\r\n![dropdown-animations](https://cloud.githubusercontent.com/assets/120485/4368528/face692e-42ee-11e4-8013-823c5d5b2bc4.gif)\r\n'
4103,'PaulAdamDavis','Rename Settings Menu Component\nAs discussed quite extensively before, it\'s really important for components to be properly and semantically named in order to be useful. Currently the post settings menu is being injected with the name "right outlet" which is both unsemantic, and frustratingly vague.\r\n\r\nThe name of the post settings menu component is "settings menu" - and the only thing which will ever slide out from the right side of the screen is a settings menu component. As such, the name would make a lot more sense if it reflected that.'
4087,'halfdan','Long post meta description is punitively killed\n## Issue Description\r\n\r\nIf you type more than 200 characters in the meta description box, everything you typed is killed via a rollback() since the server says there\'s an error.\r\n\r\nThis is bad, because, I put a lot of work into those 201 characters! Don\'t take it away from me!\r\n\r\n## Repro Steps\r\n\r\n1. Open the editor\r\n3. write > 200 characters in the meta description\r\n4. click out\r\nBOOM\r\n\r\n## Suggestions\r\n\r\nValidate on the client! Or shoot, just don\'t rollback. That\'s so mean!\r\n\r\nAlso, if we want the user to get back the original content of the meta description box, perhaps a "Reset" button would be nice? \r\nMeow'
4086,'ErisDS',"Add Gmail-style shortcuts\nRef #3940\r\n- add `j`/`k` for navigating posts down / up\r\n- `c` for opening a new post\r\n-  `o` to open the selected post\r\n- update keymaster dep to allow for multiple key unbinds (`key.unbind('up, j')`)"
4082,'javorszky','Config: allow for checkDeprecated to traverse the config recursively\nWhen checking for `mail.fromAddress`, I had to go deeper in the config object. The current implementation of `checkDeprecated` only allows for the immediate properties to be checked.\r\n\r\nFunctionality already done, will get it in with the same PR to #4018 as a separate commit. Pl0x assign to me :).'
4069,'halfdan',"Renaming: express vs app vs server vs instance - what am I?\nDue to refactoring, and then refactoring again, and then refactoring a bit more, we've ended up with a cacophony of naming conventions for various bits of server-side Ghost.\r\n\r\nIn particular, the main `index.js` file for Ghost (which people using Ghost as a module will need to replicate) has a confusing set of variable names at present, which includes using `server` for an express instance, and `instance` for an instance of `GhostServer`.\r\n\r\nThe first and least controversial change proposal here is to always use `ghostServer` for any instance of `GhostServer`. This should make it 100% clear what that variable is, as using upper case for classes and lower for instances is a common convention.\r\n\r\nNext, we need a convention for various express instances. Express is always included as \r\n`express = require('express')` and then needs instances creating. Therefore we can't use `express` as a name for an instance, plus it's kind of log and a weird name anyway.. what is an `express` when it's at home?\r\n\r\nIn the express docs, the common name for an instance is `app`. Nice and short and sort of indicates what it is, sort of... however we have many of them, so I recommend always using a prefix.\r\n\r\nTo that end, let's have a rule: general terms like `app`, `server`, `instance`, `object` should not be used as variable names without a clarifying prefix. Sooo `adminApp` and `blogApp` are fine, `ghostServer` is fine etc??\r\n\r\nAlso whilst we're here, lets also clarify that the naming convention for files should be all lower cased and dashed. So `ghost-server.js` not `GhostServer.js` and `object-type-model-map.js` and `local-file-store.js` and so on and so forth for all the oddities.\r\n\r\n### TL;DR\r\n\r\n* `app`, `server`, and `instance` cannot be used as a var name without a clarifying prefix like `ghostServer`\r\n* instances of classes should start with lowercase, so `ghostServer` is an instance of `GhostServer`\r\n* All filenames should be lower cased and dashed so `ghost-server.js`\r\n"
4036,'halfdan','Login screen times out\nI can\'t login, the login screen times out.\r\n\r\n### Issue Summary\r\n\r\nI can hit pages/posts just fine, but I can\'t hit `/ghost` or any of the editor screens. I am using the `dockerfile/ghost` container: https://github.com/dockerfile/ghost.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Pull docker image (`docker pull dockerfile/ghost`)\r\n2. `docker run -d -p 2368:2368 dockerfile/ghost`\r\n3. See logs below:\r\n\r\n```\r\n192.168.70.131 - - [Mon, 15 Sep 2014 15:10:39 GMT] "GET /ghost/setup/ HTTP/1.1" - - "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:30.0) Gecko/20100101 Firefox/30.0"\r\n\r\nERROR: connect ETIMEDOUT\r\n Checking for updates failed, your blog will continue to function.\r\n If you get this error repeatedly, please seek help from https://ghost.org/forum.\r\n Error: connect ETIMEDOUT\r\n    at errnoException (net.js:904:11)\r\n    at Object.afterConnect [as oncomplete] (net.js:895:19)\r\n```\r\n\r\nI expect the page to load regardless of being able to get ghost updates.\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 0.5.1 release\r\n* Client OS: Mac OS X 10.9.4\r\n* Server OS: Ubuntu 14.04\r\n* Node Version: 0.10.31\r\n* Browser: Chrome 37.0.2062.120\r\n* Database: SQLite'
4035,'PaulAdamDavis','Properly align word-count\nno ref\r\n- Re-adds word-count styles\r\n\r\nSomehow got lost (settings screen, text areas)'
4032,'novaugust',"Don't redirect /ghost to a specific post on mobile\nThis is a subtask whose details are spelled out in #4031.\r\n\r\nSee also #3584."
4027,'novaugust','Bug: Post preview does not scroll when caret near bottom of markdown editor\n### Issue Summary\r\n\r\nNormally the scroll position of the markdown editor and post preview are kept in sync. Placing the edit cursor in the markdown editor at or near the bottom of a long post disables the scroll sync feature.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Place cursor near bottom of long post in markdown editor.\r\n2. Scroll markdown editor.\r\n\r\nThis is a bug because the scroll sync should not be disabled by moving the cursor.\r\n\r\n### Technical details\r\n\r\n* Ghost Version: 0.5.1\r\n* Client OS: Windows 7\r\n* Server OS: Ubuntu 14.10\r\n* Node Version: v0.10.31\r\n* Browser: Firefox 32\r\n* Database: SQLite'
4018,'javorszky',"Mail: Improve the `fromaddress` functionality\nIt is possible to set `fromaddress` inside the `mail` object in `config.js`. If set, this get's passed through as  the `from` setting for nodemailer, which if you take a quick peek [at the docs](https://github.com/andris9/Nodemailer#tldr-usage-example) you'll see can be more than just an email address.\r\n\r\nFurther still, our default behaviour, when no `fromaddress` is provided, is to use `ghost@blog.url` as the default, which is fine... but it means all the emails that come through say they're from 'ghost'. \r\n\r\n![](http://puu.sh/bv1Td.png)\r\n\r\nThis is ok, but I think we can do better.\r\n\r\nLet's make the following changes:\r\n\r\n- [ ] deprecate\\* `fromaddress` and support `from` instead\r\n- [ ] use `Blog Title <ghost@blog.url>` as the default from address\r\n\r\n**Update:**\r\n\r\n- [ ] if `from` contains just an email address, rather than a full name and email string, the Blog Title should still be used.\r\n\r\n\\* The almost ready #3874 PR has a deprecation feature for config.js"
4016,'jaswilli',"Bug: PSM only shows first 15 authors in dropdown\nIf you have more than 15 users on your blog, you'll find yourself unable to choose from all of them in the PSM - only the first 15 are ever shown.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Have more than 15 users on your blog\r\n2. Open the PSM and try to change author to the last one you added\r\n\r\nI believe the User API will accept `limit=all` as a query parameter, which should help to resolve this.\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: master (0.5.2-1)"
4008,'PaulAdamDavis','Markdown modal is wrongly positioned\n## Issue Summery\r\n\r\nThe Markdown help modal is positioned in the top left. It should be right in the middle. \r\n\r\n![screen shot 2014-09-10 at 19 24 41](https://cloud.githubusercontent.com/assets/390392/4222979/00da0c1e-3918-11e4-8201-b55883d0c7b5.png)\r\n'
4000,'PaulAdamDavis',"Can scroll right on post list view on mobile\nA screen shot is going to say this better than I can. I'm using a trackpad to scroll right\r\n\r\n![scroll-right](https://cloud.githubusercontent.com/assets/1207005/4212362/0d2e984e-389c-11e4-8330-266318957f3f.gif)\r\n\r\n\r\nPS: Issue 4k!"
3955,'jaswilli',"Bug: Unsaved title changes are lost when interacting with the PSM\nAny unsaved title changes are overridden when interacting with the PSM. This is pretty unexpected, the content doesn't reset in these cases, but the title does.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new post, add a title and save a draft\r\n2. Change the title, and without saving, edit the permalink, date, change author, or click the static page checkbox\r\n3. Notice your title change has gone\r\n\r\nOrrrrr\r\n\r\n1. Create a new post, add a title and save a draft\r\n2. Change the title, and without saving, edit the permalink, and go straight to the save button\r\n3. Title change is still gone\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: 0.5.2-1"
3940,'novaugust',"Up and Down to read a draft post\nIn the content tab, you have the list of posts on the left side, and the currently selected post text displayed on the right side. I noticed that using the up and down keys switches the currently selected post. I expected the post content to scroll up or down.\r\n\r\nI know I can use Page Up and Page Down to scroll up and down the post content but I don't feel it natural to use these keys.\r\n\r\nI don't think it's a bug, it's just a comment on usability."
3939,'halfdan',"Post Settings Menu 3: Meta data screen\nThe new Post Settings Menu #3822 is pretty ambitious, so we're doing it in a couple of steps.\r\n\r\nOnce #3936 and #3937 are complete, we should have all the basic pieces of the PSM in place so that we can start building out sub menus.\r\n\r\nThe first one to build is the shiny new meta data screen, shown below.\r\n\r\nThe requirement for this is that it becomes possible to set the meta_title and meta_description on a post.\r\n\r\n- `meta_title` should be set to the post's title by default\r\n- `meta_description` should be blank by default\r\n- the search engine preview should update on-the-fly with the meta_title, correct permalink for the post including blog address, and the meta_description (this may need additional styling which can be done separately if need's be)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/3943035/cadcadc0-2584-11e4-8a47-5abe1402cda5.png)\r\n\r\n"
3937,'novaugust',"Post Settings Menu 2: Sub menu and sub-views\nThe new Post Settings Menu #3822 is pretty ambitious, so we're doing it in a couple of steps.\r\n\r\nThis step covers adding the ability to create sub-menus, and their accompanying sub-view."
3936,'halfdan',"Post Settings Menu 1: Add new with the existing settings\nThe new Post Settings Menu #3822 is pretty ambitious, so we're doing it in a couple of steps.\r\n\r\nThis first step is to get the post settings menu into it's new home, with the new white design & fancy slide out behaviour, but rather than also adding new settings and sub screens, we want to set it up with only the existing settings:\r\n\r\n- url/slug\r\n- date\r\n- author\r\n- static page\r\n- delete\r\n\r\nSo it should look and work like this: \r\n\r\n![](http://f.cl.ly/items/0Q3y1C3w3o461k02473F/psm.gif)\r\n\r\nBut with just the original 5 settings: no image, no submenus etc and with the static page check box on the first screen."
3920,'PaulAdamDavis','Permalinks UI\n<a href="https://github.com/JohnONolan"><img src="https://avatars.githubusercontent.com/u/120485?v=2" align="left" width="96" height="96" hspace="10"></img></a> **Issue by [JohnONolan](https://github.com/JohnONolan)**\n_Thursday Apr 17, 2014 at 12:43 GMT_\n_Originally opened as https://github.com/TryGhost/Ghost-UI/issues/24_\n\n----\n\nRelated to https://github.com/TryGhost/Ghost/issues/1631 (functional implementation)\r\n\r\nSketch3 file - http://cl.ly/V3cW\r\n\r\nThere are a couple of components to this:\r\n\r\n1. Bootstrap style popover which appears on hover - this should be the default style for all popovers\r\n2. Dynamic input with variables, I totally stole this from SquareSpace, so it\'s worth having a look at how their implementation works\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/2731445/bef43b3e-c62c-11e3-979f-9afc39bfd3ff.png)\n'
3915,'ErisDS','Replaces sendmail with direct\nCloses #1538\r\n* rips out sendmail\r\n* adds direct\r\n* updates nodemailer to 0.7.1\r\n* changes unit tests for mail\r\n* changes integration tests for mail\r\n* adds api tests for mail'
3909,'halfdan',"Revert the addition of configuration API permissions\nPR #3841 added permissions for the configuration API, but unfortunately we don't yet have a migration system that will allow us to add these permissions to existing blogs, and so the new permissions will only work on brand new blogs.\r\n\r\nBecause adding a migration system for permissions is non-trivial (see #3910), and the API is still behind auth, we're going to temporarily remove the permissions to be re-added later once we're able to add them safely."
3908,'sebgie','Delete revoked tokens\ncloses #3758\r\n- new API method to delete access and refresh token\r\n- use new ember-simple-auth config to revoke tokens on logout\r\n- new method to delete tokens by .. token'
3900,'cobbspur','Output structured data in {{ghost_head}}\n**NB:** *This issue is currently a WIP specification document.*\r\n\r\nIn order to make Ghost more useful as a blogging platform, it should be outputting structured data which allows published content to be more easily machine-readable. This allows content to be easily discoverable in search engines as well as popular social networks where blog posts are typically shared.\r\n\r\nThere are a couple of contexts for this, the most important of which are listed below - along with a proposed implementation structure.\r\n\r\nOne additional consideration is that it should be possible for apps to modify and extend this output. Eg. a Disqus app might want to add a `commentCount` property, and social apps might want to add `interactionCount` values.\r\n\r\nAs a part of this issue, Privacy.md should be updated with details of what data is being output and why. There should also be a flag available for config.js which disables automatic structured data from being output at all.\r\n\r\nComments, additions or suggestions on the proposed structure below are welcome.\r\n\r\n## Tasks\r\n\r\n- [ ] Update Privacy.md (@JohnONolan)\r\n- [x] Add flag to disable output in config.js\r\n- [ ] Implement Schema.org output\r\n- [x] Implement Open Graph output\r\n- [ ] Implement Twitter Cards output\r\n- [x] Implement hooks to allow apps to modify output\r\n\r\n## Schema.org\r\n\r\nWith the [news](http://searchengineland.com/goodbye-google-authorship-201975) that Google is ending support for Authorship came the followup of a [renewed focus](https://plus.google.com/+JohnMueller/posts/HZf3KDP1Dm8) on Schema.org microformats. Until now we\'ve been shy to adopt this despite multiple PR\'s to add it to Casper, mainly because it makes a horrendous mess of the markup and no clear indication that it was a focus of major search engines.\r\n\r\nNow there\'s a clear focus from a major search engine, and I\'ve also recently discovered the [JSON Linked Data](http://www.seoskeptic.com/json-ld-google-knowledge-graph-schema-org-seo/) ([JSON-LD](https://en.wikipedia.org/wiki/JSON-LD)) format which means that not only can we have uncluttered markup - but we can also keep the structured data abstracted from the theme. Meaning Ghost (not the theme) does the implementation. Good news all round.\r\n\r\nThe following is a proposed sample ouput in `{{ghost_head}}` on post.hbs following the schema.org [Article](http://schema.org/Article) and [BlogPosting](http://schema.org/BlogPosting) specifications.\r\n\r\nShould be tested against http://www.google.com/webmasters/tools/richsnippets\r\n\r\n```HTML\r\n<script type="application/ld+json">\r\n{\r\n  "@context": "http://schema.org",\r\n  "@type": "Article",\r\n  "publisher": "{{@blog.title}}",\r\n  "author": {\r\n      "@type": "Person",\r\n      "name": "{{author.name}}",\r\n      "image": "{{author.image}}",\r\n      "url": "{{author.url}}",\r\n      "sameAs": "{{author.website}}"\r\n    },\r\n  "headline": "{{title}}",\r\n  "url": "{{url absolute=\'true\'}}",\r\n  "datePublished": "{{date format=\'YYYY-MM-DDTHH:mm:ssZ\'}}",\r\n  "dateModified": "{{date updated_at format=\'YYYY-MM-DDTHH:mm:ssZ\'}}",\r\n  "image": "{{image}}",\r\n  "keywords": "{{tags}}",\r\n  "description": "{{meta_description}}"\r\n}\r\n</script>\r\n```\r\n\r\n## Open Graph\r\n\r\nThe below represents proposed output for post.hbs in `{{ghost_head}}` based on the [Open Graph protocol](http://ogp.me/) specification.\r\n\r\n**NB:** The `og:author` value has been deliberately omitted due to [conflicting information](http://surniaulula.com/2014/03/01/pinterest-articleauthor-incompatible-with-open-graph/) on how it should be correctly used. Based on this it is probably more useful not to specify it explicitly, rather than provide invalid data to one or more services.\r\n\r\nShould be tested against https://developers.facebook.com/tools/debug and https://developers.pinterest.com/rich_pins/validator/\r\n\r\n```HTML\r\n<meta property="og:site_name" content="{{@blog.title}}" />\r\n<meta property="og:type" content="article" />\r\n<meta property="og:title" content="{{title}}" /> \r\n<meta property="og:description" content="{{meta_description}}..." />\r\n<meta property="og:url" content="{{url absolute=\'true\'}}" />\r\n<meta property="og:image" content="{{image}}" />\r\n<meta property="article:published_time" content="{{date format=\'YYYY-MM-DDTHH:mm:ssZ\'}}" />\r\n<meta property="article:modified_time" content="{{date updated_at format=\'YYYY-MM-DDTHH:mm:ssZ\'}}" />\r\n{{#foreach tags}}\r\n  <meta property="article:tag" content="{{name}}" />\r\n{{/foreach}}\r\n```\r\n\r\n## Twitter Cards\r\n\r\nThe below represents proposed output for post.hbs in `{{ghost_head}}` based on the [Twitter Cards](https://dev.twitter.com/docs/cards) specification.\r\n\r\nShould be tested against https://dev.twitter.com/docs/cards/validation/validator\r\n\r\n```HTML\r\n<meta name="twitter:card" content="summary_large_image" />\r\n<meta name="twitter:title" content="{{title}}" />\r\n<meta name="twitter:description" content="{{meta_description}}" /> \r\n<meta name="twitter:url" content="{{url absolute=\'true\'}}" />\r\n<meta name="twitter:image:src" content="{{image}}" />\r\n```\r\n\r\n**NB: all image meta tags should be conditional on whether the post has an image**'
3887,'sebgie',"Uncapitalise middleware should not affect tokens\nno issue\r\n\r\n- Whilst testing on next, I noticed trying to signup didn't prepopulate email addresses any more, and this is why\r\n\r\nAnyone think of anything else this ought not to touch? It doesn't touch query params, just paths and now it doesn't touch reset or signup tokens."
3886,'ErisDS',"Move Ghost-UI back into the Ghost repository\nBack in [March](http://dev.ghost.org/no-more-ruby-dependency/) we moved all of Ghost's SASS over to the [Ghost-UI](https://github.com/TryGhost/Ghost-UI) repository so that we no longer had a ruby dependency here in the main Ghost repo.\r\n\r\nWe also hoped to turn the SASS into a Bootstrap-esque framework for creating interfaces that look like Ghost. We hoped to share the code between Ghost and Ghost.org, as well as provide an easy way for people building internal and external apps for Ghost to maintain consistency.\r\n\r\nThis was an experiment, and the experiment has failed for a number of reasons. \r\n\r\nFirstly, maintaining code across 2 repositories is a nightmare. Issues get raised in one, the other, or both, and it's always confusing, pull requests which change html & css have to be done in 2 places, and links between issues in the 2 repos aren't clear.\r\n\r\nSecondly, the move to Ember makes it *almost* impossible to build flexible, generic and reusable components outside of the Ghost repository. This removes half the point of having a separate framework for the UI. It makes it less likely the code will be shared, and it means creating components is just a lot more work.\r\n\r\nWhilst the SASS has been in the [Ghost-UI](https://github.com/TryGhost/Ghost-UI) repo, it has been reviewed, refactored and a big redesign done. The result is that we no longer really need to use ruby SASS, as we are no longer depending on the extended features of it and of bourbon.\r\n\r\nTherefore, the plan is to switch to libsass, move the SASS code back to the Ghost repository, and go back to the way things were but still without the awful ruby dependency.\r\n\r\n- [x] convert the SASS to libsass (@pauladamdavis)\r\n- [x] move the code back to the Ghost repo (@ErisDS)\r\n- [x] wire up grunt to build the SASS (@ErisDS)\r\n- [x] move the ghost-ui issues back to the Ghost repo"
3885,'felixrieseberg','[Feature] Post Cover Images\nA long awaited feature, with the [new PSM](https://github.com/TryGhost/Ghost/issues/3822) design, comes the UI for uploading post cover images. This uses our existing upload dropzone, to store an image to be saved in the `image` field on the post model.\r\n\r\nAs well as making it possible to upload an image, some work will need to be done to expose this to themes in a nice way.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/3943035/cadcadc0-2584-11e4-8a47-5abe1402cda5.png)\r\n\r\n- [ ] Add the uploader component to the PSM\r\n- [ ] Store the path for the uploaded file in the `image` field in the `post` table\r\n- [x] Reimplement the {{content words="0"}} functionality [#3884](http://github.com/TryGhost/Ghost/issues/3884)\r\n- [ ] Helper for themes is then {{image}} which should *just work*'
3876,'novaugust',"Redirect user if signup invitation isn't valid\nCloses #3565\r\n- Added server API isInvitation (analog to isSetup), checking if an\r\ninvitation exists for a given email address.\r\n- If the invitation is no longer valid (or didn’t exist in the first\r\nplace), the user is redirected and an error notification is shown."
3858,'felixrieseberg','Authored permalinks feature\nSince Ghost is now supporting multiple authors, it would be nice to have an option in the admin to support "Authored permalinks" which would make permalinks based on the author of the blog entry (e.g. my-ghost-blog.com/authorname/getting-started )'
3857,'ErisDS',"Odd behaviour when `/ghost/` contains uppercase\nThere's some weird behaviour going on purely with the `/ghost/` route when you include one or more uppercase letters.\r\n\r\n### Reproducing\r\n\r\n`/logout/` -> correctly redirects to `/ghost/signout/`\r\n`/LOGOUT/` -> isn't matched by the admin route, so gets picked up by the catch all `single` frontend route, doesn't match a post, and then 404s\r\n\r\n(assuming you're logged out)\r\n`/ghost/` -> redirects to `/ghost/signin/`\r\n`/GHOST/` -> gets incorrectly matched by the admin route, but doesn't get `isAdmin` set because of the capitals, and then ends up rendering a weird blank page.\r\n\r\nWhy on earth is this the only route that gets matched with any combination of upper and lower case? It doesn't happen for any other route... is it the star?\r\n\r\n`router.get('/ghost/*',...`\r\n\r\nI'm baffled!\r\n\r\n### Technical details\r\n\r\n**Ghost version**: 0.5.0 "
3851,'sebgie','Removing hard-coded port number\ncloses #1391'
3841,'sebgie','Implements new Configuration API\ncloses #3619\r\n- adds new permissions for configuration API\r\n- adds integration tests\r\n- adds configuration API for reading allowed values'
3795,'ErisDS',"A few outdated modules\n### Steps to reproduce\r\n```sh\r\n$ git clone https://github.com/tryghost/Ghost.git Ghost\r\n$ npm install\r\nWARN - deprecated - static-favicon@1.0.2: use serve-favicon module\r\nWARN - deprecated - set-immediate@0.1.1: Use `setimmediate` instead\r\n\r\n$ npm shrinkwrap --dev\r\nwrote npm-shrinkwrap.json\r\n\r\n# $ sudo npm i nsp -g\r\n$ nsp audit-shrinkwrap --no-color\r\n\r\nName  Installed  Patched  Vulnerable Dependency\r\nqs      0.6.6     >= 1.x  ghost > bower > bower-registry-client > request\r\nqs      0.6.6     >= 1.x  ghost > bower > bower-registry-client > request\r\nqs      0.6.6     >= 1.x  ghost > bower > request\r\nqs      0.6.6     >= 1.x  ghost > bower > request\r\nqs      0.5.6     >= 1.x  ghost > grunt-contrib-watch > tiny-lr\r\nqs      0.5.6     >= 1.x  ghost > grunt-contrib-watch > tiny-lr\r\nqs      0.6.6     >= 1.x  ghost > request\r\nqs      0.6.6     >= 1.x  ghost > request\r\nqs      0.6.6     >= 1.x  ghost > sqlite3 > node-pre-gyp > request\r\nqs      0.6.6     >= 1.x  ghost > sqlite3 > node-pre-gyp > request\r\nqs      0.6.5     >= 1.x  ghost > supertest > superagent\r\nqs      0.6.5     >= 1.x  ghost > supertest > superagent\r\n```\r\nIt looks like we're using an outdated version of **request** (**request@2.40.0** fixed the issue w/ **qs**).\r\nAll the rest of the vulnerable modules are sub-dependencies. :/\r\n\r\nAnd the outdated modules are...\r\n```sh\r\n$ npm outdated --depth 0\r\nPackage                     Current       Wanted       Latest  Location\r\nbcryptjs                     0.7.10       0.7.10        2.0.2  bcryptjs\r\nbody-parser                   1.6.3        1.6.3        1.6.4  body-parser\r\nbookshelf                     0.7.6        0.7.6        0.7.7  bookshelf\r\nbusboy                        0.2.3        0.2.3        0.2.8  busboy\r\nconnect                  3.0.0-rc.1   3.0.0-rc.1        3.1.1  connect\r\ncookie-parser                 1.0.1        1.0.1        1.3.2  cookie-parser\r\ndownsize                      0.0.5        0.0.5        0.0.6  downsize\r\nexpress                       4.8.3        4.8.3        4.8.4  express\r\nexpress-hbs                  0.7.10       0.7.10       0.7.11  express-hbs\r\nexpress-session               1.0.4        1.0.4        1.7.5  express-session\r\nfs-extra                      0.8.1        0.8.1       0.11.0  fs-extra\r\ngrunt-contrib-clean           0.5.0        0.5.0        0.6.0  grunt-contrib-clean\r\ngrunt-contrib-compress        0.5.3        0.5.3       0.10.0  grunt-contrib-compress\r\ngrunt-contrib-concat          0.4.0        0.4.0        0.5.0  grunt-contrib-concat\r\ngrunt-contrib-copy            0.4.1        0.4.1        0.5.0  grunt-contrib-copy\r\ngrunt-contrib-jshint          0.8.0        0.8.0       0.10.0  grunt-contrib-jshint\r\ngrunt-contrib-watch           0.5.3        0.5.3        0.6.1  grunt-contrib-watch\r\ngrunt-mocha-cli               1.4.0        1.4.0        1.9.0  grunt-mocha-cli\r\nknex                         0.6.21       0.6.21       0.6.22  knex\r\nmocha                        1.15.1       1.15.1       1.21.4  mocha\r\nmoment                        2.4.0        2.4.0        2.8.1  moment\r\nmorgan                        1.0.0        1.0.0        1.2.2  morgan\r\nmysql                         2.1.1        2.1.1        2.4.2  mysql\r\nnock                         0.27.2       0.27.2       0.44.3  nock\r\nnode-polyglot                 0.3.0        0.3.0        0.4.1  node-polyglot\r\nnodemailer                   0.5.13       0.5.13        1.1.1  nodemailer\r\nrequest                      2.29.0       2.29.0       2.40.0  request\r\nrewire                        2.0.1        2.0.1        2.1.0  rewire\r\nrss                           0.2.1        0.2.1        0.3.2  rss\r\nsemver                        2.2.1        2.2.1        3.0.1  semver\r\nshould                        2.1.1        2.1.1        4.0.4  should\r\nshowdown                0.3.2-ghost  0.3.2-ghost        0.3.1  showdown\r\nsinon                         1.7.3        1.7.3       1.10.3  sinon\r\nstatic-favicon                1.0.2        1.0.2  2.0.0-alpha  static-favicon\r\nsupertest                     0.8.3        0.8.3       0.13.0  supertest\r\nvalidator                     3.4.0        3.4.0       3.17.0  validator\r\nwhen                          3.2.3        3.2.3        3.4.4  when\r\n```"
3790,'ErisDS',"Bug: Update Check reports the wrong version\nThe version output in the update check is the `package.json` current version number, rather than the new version fetched from the update server. This won't affect anyone until the next release of Ghost, but needs fixing!\r\n\r\n### Steps to Reproduce\r\n\r\n1. Set your version number in package.json to be something less than 0.5.0, like 0.5.0-rc1\r\n2. Start Ghost, and login to the admin\r\n3. It tells you `0.5.0-rc1` is available, rather than telling you 0.5.0 is available\r\n\r\nThis is a bug because...\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: 0.5.0"
3779,'sebgie',"HTTP Status 'invalid_grant'\nUnder certain circumstances, `authentication/token` returns 'invalid_grant' as a status code. This is weird and wrong.\r\n\r\nI believe it may be to do with expired tokens, but I haven't tracked down the exact reproduction steps yet. I thought I'd raise this now anyway in case anyone else knows. If not I'll update this issue when I figure it out ;)\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: 0.5"
3756,'felixrieseberg',"Bug: Author dropdown should not appear for authors.\n### Issue Summary\r\n\r\nWhen logged in as an author and editing a post, it is possible to change the author of your post to someone else, thus losing the ability to edit it.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Creating a new user with role 'Author' and log in as that user\r\n2. Create a new post\r\n3. Set the author of that post to be someone else\r\n\r\n![2014-08-12 12 41 03](https://cloud.githubusercontent.com/assets/3869932/3886439/fa924c4e-21da-11e4-8556-1b7c58617feb.png)\r\n3. Saving failed.There was an error saving this post: You do not have permission to edit this post. \r\n\r\n### Technical details:\r\n\r\nGhost Version: master (latest commit:  b6507be)\r\nClient OS: Ubuntu 14.04\r\nServer OS: Ubuntu 14.04\r\nNode Version: v0.10.24\r\nBrowser: Chrome 35.0.1916.114\r\nDatabase: SQLite"
3750,'ErisDS',"Can't delete a user that has already logged in due to failed FK constraints\nAfter upgrading to 0.5 I created a test user and logged in, I then tried to delete it and eventually after 60 seconds I got a 504 from Nginx a message in the UI and the UI was broken until a refresh.\r\n\r\nExamining the error logs I found the following:\r\n\r\n    Potentially unhandled rejection [9] TypeError: Object Error: ER_ROW_IS_REFERENCED_: Cannot delete or update a parent row: a foreign key constraint fails (`ghostdb`.`accesstokens`, CONSTRAINT `accesstokens_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)) has no method 'indexOf'\r\n\r\nAfter manually cleaning out the accesstokens table I for a similar error for refreshtokens:\r\n\r\n    Potentially unhandled rejection [19] TypeError: Object Error: ER_ROW_IS_REFERENCED_: Cannot delete or update a parent row: a foreign key constraint fails (`ghostdb`.`refreshtokens`, CONSTRAINT `refreshtokens_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)) has no method 'indexOf'\r\n\r\nFinally, after cleaning out refreshtokens I was able to delete the user without issue.\r\n\r\nJust a general observation - there are FKs on these tables and not other tables that reference a user, e.g. posts, permissions_users, roles_users. A bit inconsistent."
3683,'sebgie','Adding overzealous jquery removal\nfixes #3676\r\n\r\n- this was removed as part of my attempt to clean up the release but is needed for dev mode'
3676,'ErisDS','Bug: Jquery.js not include in theme\n### Issue Summary\r\n\r\nWhen I use `{{ghost_foot}}` it\'s returns `<script src="/public/jquery.js?v=a537d2d61d"></script>`, but file not found. When I go to `/core/built/public` I see only `jquery.min.js`. When I renamed it all works fine.\r\n\r\n### Steps to Reproduce\r\n1. Go and use theme which requires correct `jquery.js` for work. \r\n2. And it\'s not work.\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 0.5.0 rc2 (latest commit: a65cc15e569643a16e79c88987d3f6fdd2603145)\r\n* Client OS: Mac OS X 10.9.4\r\n* Server OS: CentOS 7 x64\r\n* Node Version: 0.10.30\r\n* Browser: Chrome 36.0.1985.125\r\n* Database: SQLite'
3660,'sebgie',"Don't obscure errors from api/authentication/token\nNot sure if this is a generic error in the error500 handling, or specific to this end point, but when debugging #3638 and #3639 it wasn't possible to see the true error message, instead all you see is this in the UI:\r\n\r\n![](http://puu.sh/aIFnM.png)\r\n\r\nand this in the server logs:\r\n\r\n![](http://puu.sh/aIFu2.png)\r\n\r\nThere was a much more sensible error underneath it though, so it would be good to make it possible to see the proper error instead, both in the server logs and in the UI.\r\n\r\nI noticed another bug, which I was going to raise separately but might be fixable as part of this:\r\n\r\nIf you attempt to login when the server is stopped, you get the same blank error notification, instead of the server gone away error you get if you're logged in and attempt an action."
3659,'sebgie',"Improve handling of SQLITE_READ_ONLY errors\nCurrently, these errors are bubbling up with really unhelpful contextual info:\r\n\r\n![](https://www.evernote.com/shard/s28/sh/58bfab46-d49a-44d2-bf3b-2b84a6b77f53/a0410a8b9a998090cb48f0f1680e7a02/res/028f4595-6c45-4cb4-8c2c-6a56eea380c1/skitch.png?resizeSmall&width=832)\r\n\r\nThe contextual info should detail that this is a permissions error, and that the blog owner needs to check the permissions of their DB file, rather than having error messaging around apps because that's where the problem happened.\r\n\r\nI think this needs some really low level catch to pick this error up and output a nice context and help message to go with it?"
3658,'ErisDS',"Don't validate user on login\nSo after much debugging from @sebgie we have determined that #3638 & #3639 are both caused by validation errors on login.\r\n\r\nThe user model is validated (as part of saving the user with an `active` state & `last_login` time), and if there's an error, it gets thrown.\r\n\r\nThe problem here is that as mentioned in #3657 we now have strict validation on the `website` field, which didn't exist before, and in many cases `website` has been set to an invalid value.\r\n\r\nThis means that no one can login to fix the bloody problem.  #WINNING!"
3657,'ErisDS',"User website validation wreeking havoc\nFrom #3304:\r\n\r\n> We should handle this intelligently by automatically interpreting the input and using validation if we can't. The user should not have to know or care about what http is.\r\n\r\nWe have added strong validation to this field on the user, which includes requiring a protocol. https://github.com/chriso/validator.js has an option to not require a protocol when doing the validation for a URL which we should probably use."
3653,'sebgie',"Fix grunt commands to work with spaces in path\ncloses #3206\r\n\r\n- We were escaping paths for the bower commands, but this didn't work on\r\n  windows\r\n- Use the same pattern for the coverage command"
3649,'javorszky',"Bug: Sending Test Email Goes to Owner, Not Admins Email Address\n### Issue Summary\r\n\r\nIf you log in with an admin user and go to /ghost/debug and hit the send test email. Instead of it going to the admin user that is logged in's email, it goes to the owner. Should prob go to the admin so if they are doing testing, they can receive the emails themselves\r\n\r\n### Steps to Reproduce\r\n\r\n1. Go to url.com/ghost/debug\r\n2. Click on Send test email\r\n3. It will send to owner email address, not the admin who is logged in\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 0.5.0-rc2\r\n* Client OS: Mac 10.9\r\n* Server OS: Mac 10.9\r\n* Browser: Chrome\r\n* Database: SQLite\r\n* Local"
3600,'sebgie','Fix the author context block\nfixes #3599\r\n\r\n- If the author helper is called as a block (i.e. fn is present) then\r\n  treat it as a with call'
3599,'ErisDS',"Bug: Author context block doesn't work\nIn the theme API, it's common to use context blocks like\r\n\r\n```\r\n{{#post}}\r\n<h1>{{title}}</h1>\r\n.. do more stuff with post here..\r\n{{/post}}\r\n```\r\n\r\nInside of every post block, is an author block \r\n\r\n```\r\n{{#post}}\r\n   {{#author}}{{name}}{{/author}}\r\n{{/post}}\r\n```\r\n\r\nBut the author block is currently not working, unless you specifically use the `with` helper:\r\n\r\n```\r\n{{#post}}\r\n   {{#with author}}{{name}}{{/with}}\r\n{{/post}}\r\n```\r\n\r\nThis is because it is being overriden by the `{{author}}` helper."
3597,'rwjblue','Post preview disappears when resizing\n### Issue Summary\r\n\r\nWhen I resize the content window to mobile size the post preview disappears as expected. If a post is selected and I resize the window back to normal the post preview is still not visible.\r\n\r\n![resize-problem](https://cloud.githubusercontent.com/assets/539213/3811350/42b34d94-1c9e-11e4-9990-1637c3812bc2.gif)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Go to content\r\n2. resize window to mobile size\r\n3. select a post and navigate back\r\n4. resize window back to original size\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: master (latest commit: aec440bbd0bc27bb3dd1bf45722da06fb9962c6f)\r\n* Client OS: Mac OS X 10.9\r\n* Server OS: Ghost(pro)\r\n* Node Version: 0.10.26\r\n* Browser: Chrome 36.0.1985.125\r\n* Database: MySQL'
3568,'novaugust','[Feature] "About Ghost" page\nSee tryghost/ghost-ui#23 for design specs.\r\n\r\nIt would be wonderful to have this in with 0.5.1.\r\n\r\n@PaulAdamDavis added the HTMLz in [`core/client/html/about-page.html`](https://github.com/TryGhost/Ghost/blob/master/core/client/html/about-page.html)'
3546,'PaulAdamDavis',"UI: CSS transition + cursor pointer missing for profile missing.\nHello,\r\n\r\n**CSS Transition** \r\n\r\nI'm not 100% sure about the CSS transition when clicking on the top right for the profile drop down. It feels 'slow' to me.\r\n\r\n    animation: fade-in 1s;\r\n\r\nPerhaps it would be a good idea to reduce it down to 0.6 or 0.5? \r\n\r\n**Profile - cursor pointer missing**\r\n\r\nWhen clicking on the profile name in the top right corner. There isn't a pointer icon, just a text selector.\r\n\r\n    .navbar nav li a\r\n       cursor: pointer\r\n\r\nTested on OS X Mavericks 10.9.4\r\nBrowser: Safari Version 7.0.5 (9537.77.4) and Chrome Version 36.0.1985.125"
3544,'sebgie','repeated succesfful login / logout locks you out\nSummary of Issue \r\n------------------------------- \r\n\r\nSuccessfully logging in and out will lock you out\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n* Log in and out 6 times\r\n* trying to log in the 7th time will lock you out\r\n\r\n\r\nObserved result \r\n------------------------------- \r\n\r\n```Only 5 tries per IP address every 3600 seconds.```\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.9.4\r\nServer OS: Mac OS X 10.9.4\r\nNode Version: v0.10.21\r\nGhost Build Number: 0.5.0 rc1\r\nLatest Commit:\r\nGhost Database: SQLite3\r\nBrowser: Chrome 36.0.1985.125'
3542,'halfdan','No error message when trying to reset password for invited user that has not accepted\nSummary of Issue \r\n------------------------------- \r\n\r\nNo error message when trying to reset password for invited user that has not accepted\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n* invite a user\r\n* go to reset password page (http://127.0.0.1:2368/ghost/forgotten/)\r\n* fill in email address for invited user\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nNormally on the forgot password page when a user that does not exists is entered the following message is displayed:\r\n\r\n```Invalid email address```\r\n\r\nDesired result \r\n------------------------------- \r\n\r\nSome sort of messaging should be displayed\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nUser Role: Administrator / Editor / Author / Owner\r\nClient OS: Mac OS X 10.9.4\r\nServer OS: Mac OS X 10.9.4\r\nNode Version: v0.10.21\r\nGhost Build Number: 0.5.0 rc1\r\nLatest Commit:\r\nGhost Database: SQLite3\r\nBrowser: Chrome 36.0.1985.125'
3473,'jaswilli',"0.5 Transient Test Failures\nWe currently have a number of frequently occurring test failures. There are issues open for 2 of them, but not for several others. Rather than having individual issues for each, I thought it might be easier to group them all together into one through issue.\r\n\r\n-----\r\n\r\n### MySQL missing tags [FIXED]\r\n![](http://puu.sh/alahA.png)\r\nGist: https://gist.github.com/ErisDS/5f0cb495b3b706a9912f\r\nOccurs: Infrequently on MySQL. Hasn't been seen on SQLite.\r\nOriginal issue: #3119\r\nPossible cause: bookshelf??\r\n\r\n### Undefined 'key' (Missing App Fields) [FIXED]\r\n![](http://puu.sh/ayw8Y.png)\r\nGist: https://gist.github.com/ErisDS/feba1bb6f97e30499cc2\r\nOccurs: Frequently on SQLite and Local `grunt validate`\r\nOriginal issue: #3429 \r\nPossible cause: App field fixture loading not working properly, or timing errors with bookshelf returning multiple relations\r\n\r\n### API Post can Read [FIXED]\r\n![](http://puu.sh/aywpu.png)\r\nGist: https://gist.github.com/ErisDS/11fe2afd5a37f430b23f \r\nOccurs: Only ever occurs after the undefined key error, never seen it alone, and only seen on SQLite3 and local\r\nPossible cause: unknown\r\n\r\n### Import Test Timeout [FIXED]\r\n![](http://puu.sh/aywdT.png)\r\nGist: https://gist.github.com/ErisDS/2ee6916935dc2219081c\r\nOccurs: Seen on SQLite3 and locally\r\nPossible cause: tests were added recently, there's likely something wrong with the tests.\r\n\r\n### CasperJS: Stuck on sign in [FIXED]\r\n![](http://puu.sh/aywAA.png)\r\nGist https://gist.github.com/ErisDS/5e4bc8a94213f7728018\r\nOccurs: On various CasperJS tests\r\nPossible cause: signout not working properly, this one may be fixed?\r\n\r\n-----\r\n\r\nNone of this is required for an RC, but I would feel much, much better about the release if we could iron out, or at least locate reason for, one or two of them.\r\n\r\nI've assigned this to @jaswilli (hope you don't mind) instead of #3119 and #3429 because he is the king of finding & fixing these sorts of things. I'll still be taking any spare time I have to look into them as well :)"
3469,'novaugust',"Fixup Keyboard Shortcuts for 0.5 release\nThere are a couple of tasks we need to do to get this to a bare-minimum standard for 0.5, in a rough order of priority vs ease.\r\n\r\nThe [keyboard shortcuts wiki page] has a reference of what all the old shortcuts were, we should try to get most of them back and working:\r\n\r\n1. Up & Down arrows\r\n\r\nThese need removing https://github.com/TryGhost/Ghost/blob/master/core/client/routes/posts.js#L36\r\n\r\n2. Keyboard shortcuts for mac vs win:\r\n\r\nhttps://github.com/TryGhost/Ghost/issues/3029\r\n\r\nAt the moment, I'm not even sure if any of the shortcuts work on mac at all! That needs fixing :/\r\n\r\n3. Fix broken shortcuts\r\n\r\nBasically this lot:\r\n\r\nhttps://github.com/TryGhost/Ghost/blob/master/core/client/utils/codemirror-shortcuts.js#L83\r\n\r\nI think select word and new line need to be removed actually. The casing shortcuts are somewhat unimportant, but desirable to have them back if they're easy. CopyHTML is covered in a bit...\r\n\r\n4. Heading shortcuts\r\nHere\r\nhttps://github.com/TryGhost/Ghost/blob/master/core/client/utils/codemirror-shortcuts.js#L18 and here https://github.com/TryGhost/Ghost/blob/master/core/client/mixins/editor-route-base.js#L52 \r\n\r\nshould be `ctrl + alt + num`. Ideally this would work by either cycling through `ctrl + h` or with a sequence like `ctrl + h, 1` or some other combo because this is broken on all foreign keyboards, but that's for bonus points and is what this issue is meant to cover: \r\nhttps://github.com/TryGhost/Ghost/issues/3019\r\n\r\n5. CopyHTML\r\n\r\nCopyHTML is supposed to open a modal window that lets you copy the HTML which would be generated for either all your markdown, or just the bit that was selected at the time the shortcut was entered.\r\n\r\nThis is pretty involved and probably can be punted.\r\n"
3468,'sebgie',"Forgotten password rate limiter\nWith multiple email addresses in the system, we need to be a bit more savvy about not leaking them through the forgotten password form. \r\n\r\nRather than doing something really obscure with horrible UX like saying 'If we know who you are we have emailed you', we want to limit the number of attempts that can be made to reset a password to something like:\r\n\r\n> Only X tries per IP address every Y numbers of Z timeframe\r\n\r\nWe need to figure out what the defaults are, and it would be idea if they were adjustable via config.js. That way we can set the defaults quite high, and anyone who struggles (i.e. a large org behind a public IP) can loosen them off."
3462,'sebgie',"Post list: authors only see their own posts\nissue #3446, #3086 \r\n\r\nThis PR filters the content all over the admin:\r\n\r\n- If you're an author, you only see / have access to your own posts\r\n- If you're an editor, you only see / have access to author users\r\n\r\n"
3455,'sebgie','User API ability to filter users by role\nrefs #3446\r\n\r\n- This only covers the API changes needed for #3446'
3429,'jaswilli','Transient test failure\nNeeds finding and fixing: https://gist.github.com/ErisDS/feba1bb6f97e30499cc2\r\n\r\n'
3428,'novaugust',"Invite user should select 'Author' role by default\nFrom the comments on #3420:\r\n\r\nThe invite new user modal should select the author role by default, rather than the top role by default:\r\n\r\n![](http://puu.sh/aue7Q.png)\r\n\r\nThe order that users are listed in the dropdown should remain the same: Admin, Editor, Author. However, Author should be the one that is selected when the modal opens."
3426,'sebgie',"Move Transfer Ownership to own API endpoint\nAs I've been working on writing tests for #3196 and also getting the user permissions correct and tested for #3096 I've hit a roadblock whereby it's impossible to make all of the conditions pass.\r\n\r\nEssentially, I have what I believe is a full suite of tests, where one test always fails. Every time I fix the permissions so that the broken test passes, that change breaks another test.\r\n\r\nThere are a couple of underlying problems with the permissions model which is causing this:\r\n\r\nFor user edit and add we now have 2 permissions checks:\r\n\r\n`canThis(context).add/edit.user(userId)` and `canThis(context).assign.role(roleId)`\r\n\r\nThis is a bit restrictive in that:\r\n\r\n1. We can't ask if the context can assign a role to a specific user, essentially the code should probably be:\r\n\r\n`canThis(context).add.roleUser(roleId, userId)`\r\n\r\nBut joinTables aren't treated as models and canThis isn't really setup for testing the join tables. `canThis(context).add.role(roleId, userId)` or `canThis(context).add.role(roleId).to.user(userId)` would be great, but will require extensive reworking of canThis. \r\n\r\nThe side effect of this is that the check which prevents modifying your own role has to be outside of the permissions system: https://github.com/TryGhost/Ghost/pull/3395/files#diff-e1c52a506c4dfb4202439ef6db5f2de0R111\r\n\r\nThis is not so bad, and we'll likely have an issue to extend `canThis` and fix this later.\r\n\r\n2. Inside of testing for `assign` permissions, we don't know whether we're assigning to a new or existing user.\r\n\r\nThe rules for assigning to an existing user, and assigning to a brand new user are subtly different:\r\n\r\n- no one can assign the owner role to a new user\r\n- owners can assign the owner role to an existing admin user\r\n\r\nThis could be solved by having 2 permissions: assignToNew and assignToExisting, but the above latter rule is actually just one very special case purely for transferring ownership. When the owner wants to transfer their ownership to another user, they can do so only if the other user exists and is already an admin. No one else is ever allowed to perform this action, and this action is already considered to be different to a standard edit in the UI (there's a different control),\r\n\r\nFurthermore, it seems odd to me that in a certain case, calling edit on a user model can cause more than one user to be updated. \r\n\r\nFinally this would resolve both my problems with the permissions model and #3403 in one fell swoop. Therefore I believe, making an endpoint just for this change makes the most sense.\r\n\r\nThat just leaves what to call it.. I'm looking at:\r\n\r\n` router.put('/users/owner', api.http(api.users.transferOwnership));`"
3417,'novaugust',"[Discussion] Client coding styles: `.property()` vs  `Ember.computed`\nWe've been having discussions off on disparate PRs here and there, I'd like to get it in one place and talk about it formally and maybe even get a PR in to consolidate our style.\r\n\r\n## Properties in Ember\r\nEmber has two methods for making complex (computed) object properties. The first is `Ember.computed(dependencies, theFunction)` and the second is the `property` method that Ember metal puts on function prototypes `theFunction(){}.property(dependencies)`\r\n\r\n\r\nUp until now, our style has been to use the `property` method for custom functions, but we still see `Ember.computed` for its submethods like `alias`, `readOnly`, `oneWay`, etc.\r\n\r\n### Argument for switch to `Ember.computed`\r\n\r\n@rwjblue and @jaswilli have both advocated for using `Ember.computed` over `.property` because it places the fact that *this is a property* at the very beginning of the property definition, rather than obscuring it by placing it at the end of the function. Similarly, it puts the dependencies of the property up front.\r\n\r\nI've been whining about PRs that use `Ember.computed` over property simply because we have until now been using `property` and I like consistency, but maybe it's time to do a revamp and switch everything over to `Ember.computed` and drop all `.property` uses?"
3414,'PaulAdamDavis',"New pluralise Handlebars helper\nThere's a use-case in the new Casper theme which calls for a pluralised string. We should discuss the name for this helper and any issues we could come into.\r\n\r\nThe name I'm working with at the moment is `plural_count`\r\n\r\n```hbs\r\n{{plural_count pagination.total 'post'}}\r\n```\r\n\r\nIf `pagination.total` == 1, outputs `post`\r\nIf `pagination.total` == 0, 2 or more, outputs `posts`"
3409,'hswolff','New `home.hbs` template\nFollowing on from the conversation in #2648, it would be good to add the option to have a custom handlebars template in a theme which is used to render the homepage.\r\n\r\nThis template `home.hbs` will not be required. Ghost will continue to render `index.hbs` as the homepage if `home.hbs` is not present.\r\n\r\nIf `home.hbs` is present in the theme, then this template will be used to render the first page in the list of posts, but not the second or 3rd pages.'
3402,'novaugust','Edit User Profile: Role dropdown\nIn the template for the user edit screen, there is a commented out role dropdown:\r\nhttps://github.com/TryGhost/Ghost/blob/master/core/client/templates/settings/users/user.hbs#L67\r\n\r\n![](http://puu.sh/aqj6X.png)\r\n\r\nWe now have the Roles API browse endpoint for fetching the roles that the currently logged in user is allowed to assign (although it won\'t function 100% until #3395 is merged)\r\n\r\nWe also have the User API edit endpoint updated to expect to have to change a role, and to check permissions for what roles can be assigned.\r\n\r\nTherefore, all the pieces should be in place to wire this up. The dropdown needs uncommenting, populating with a list, and hiding if the list is empty.\r\n\r\nYou can reference https://github.com/TryGhost/Ghost/issues/3083 to see who should be allowed to assign a given role, but in short:\r\n\r\n* Owners & Admins can assign all roles, except the \'Owner\' role won\'t appear in the list, that role  can only be assigned via the \'Make owner\' button #3400.\r\n\r\n* Editors can assign the author role.\r\n\r\n* Authors are not allowed to assign any roles, so this dropdown should be empty, and therefore should be hidden for authors.\r\n\r\n**Update:**  This dropdown shouldn\'t appear when editing the current logged in user\'s profile, i.e. it shouldn\'t be possible to edit your own role as it\'s a pretty destructive action & too easy to do. Authors can\'t edit roles, owners can\'t relinquish their ownership without doing the explicit "Transfer ownership" action, so only admins and editors are affected, and they are only prevented from downgrading themselves which seems like a minimal use-case anyway.'
3401,'morficus','Edit User Profile: Slug field\nIn the template for the user edit screen, there is a commented out slug field: https://github.com/TryGhost/Ghost/blob/master/core/client/templates/settings/users/user.hbs#L55\r\n\r\nThis slug field needs to be uncommented and wired up to work correctly:\r\n\r\n* It should allow users to edit the slug\r\n* It should not permit duplicate slugs\r\n\r\nEssentially, it should function the same as the permalink slug field in the Post Settings Menu. If the  slug is duplicate, it should update with a `-2` on the end.\r\n\r\nAs we already do all of this for posts, and users are also understood to have slugs (along with tags) I believe all of the pieces are in place for this.'
3389,'ErisDS',"Add {{title}} helper\nRefs #3387 \r\n\r\nTo make titles on the frontend consistent with what is shown in the admin I would like to propose a helper to return the escaped title (`{{title}}`). This helper works similar as  `{{content}}` and by converting the escaped title into a safestring it doesn't matter to the user if he double- or triple-stashes the output,  the result is always the same.\r\n\r\nIf we don't want to add a new helper it is also possible to remove the triple-stash from Casper and let the user decide (or randomly discover) how the titles are handled.\r\n\r\n"
3387,'sebgie','XSS filtering\nAfter a lot of thought and three failed attempts to do the *right* thing I think that we have found a viable approach. XSS vulnerabilities have in fact nothing to do with the API because we don\'t serve HTML directly and we don\'t know what kind of client is going to interpret the data. In addition to that we would have to add a new parameter to choose between escaped and unescaped data. Our admin for example would need escaped data, but the frontend doesn\'t. XSS is a problem of our admin and we should solve the problem there.\r\n\r\nI have started to implement a first version where the client removes embedded scripts.  `<script>` and `<iframe>` tags are replaced by a placeholder that indicates that there is content that is not executed in admin.\r\n\r\nEditor:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/539213/3688897/f80d08a0-133a-11e4-9ba2-e7893013b907.png)\r\n\r\nPosts:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/539213/3688900/ffe190fa-133a-11e4-9e5f-f25f0a1d12c2.png)\r\n\r\nFrontend:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/539213/3688903/0501aa5c-133b-11e4-8b23-6c33fcaf58cb.png)\r\n\r\nOpen points:\r\n- What other elements should be removed?\r\n- We need to sanitize `<a href>` and `<button>` to prevent `onClick` actions\r\n- @JohnONolan do you have any design/wording suggestions?\r\n- Make sure that all values that are rendered directly from an API response are "double-stashed" to be escaped correctly.\r\n'
3378,'ErisDS',"Permissions and Models.User.permissable\nThere's a hook in the permissions system where a model class can have a `permissable` method which allows it to make a decision on pending operations against it:\r\nhttps://github.com/TryGhost/Ghost/blob/master/core/server/permissions/index.js#L123\r\n\r\nThe User model does this:\r\nhttps://github.com/TryGhost/Ghost/blob/master/core/server/models/user.js#L446\r\n\r\nWhich needs to be rethought before MU ships as it opens up a potential privilege escalation issue (e.g., a user can change his or her role).\r\n"
3364,'jaswilli',"Close user settings popover\nThe popover that allows to 'transfer ownership' and 'delete a user' on the user settings page is not closed after an action is executed. I think there is currently no functionality to close this popover?"
3339,'sebgie',"Importer not getting correct mime type\nI'm trying to import files on the latest master, and getting this quite unhelpful error:\r\n\r\n![](http://puu.sh/ajPVg.png)\r\n\r\nIn my server console I can see the following error:\r\n\r\n![](http://puu.sh/ajPYL.png)\r\n\r\nYou can see that I dumped out the type to try to understand why this was happening, and discovered that it is getting `application/octet-stream` instead of `application/json`\r\n\r\n### Steps to Reproduce\r\n\r\n1. navigate to `/ghost/debug`\r\n2. attempt to upload a file (I used `core/server/export/exported-test.json`)\r\n3. witness the wonder\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: master (latest c\r\nommit: )\r\n* Client OS: Windows 7\r\n* Server OS: Localhost\r\n* Node Version: 0.10.26\r\n* Browser: Chrome 36.0.1985.125m (also reproduced in IE 11)"
3333,'ErisDS',"`{{url}}` helper doesn't work correctly in tag context\nWhen using the `{{url}}` helper in the context of a post, it is expected that you get a URL for a tag page, something like `/tag/:slug`.\r\n\r\nHowever, at present the `{{url}}` helper always outputs `/` - which is incorrect.\r\n\r\n### Steps to Reproduce\r\n\r\nReplace `{{tags}}` in your theme with something like\r\n\r\n```\r\n{#foreach tags}}\r\n    {{name}} {{url}}\r\n{{/foreach}}\r\n```\r\n\r\nAnd you'll see the URL is incorrect.\r\n\r\nThis will seriously mess with a large number of our themes.\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: master (latest commit: )\r\n"
3290,'ErisDS',"Remove all hardcoded references to user:1\nThroughout the codebase, in various places in the models and API, there are still references to the user with `id:1`.\r\n\r\nWe need to remove every last one of these, with the singular exception of setting the created_by field for the very first user. Every other instance should change to either be a reference to the current logged in user's ID, or should fetch the single user with the role 'Owner'."
3285,'ErisDS','Import 003\nSplit from #2600 \r\n\r\n----\r\n\r\nData version info is here: [Ghost versions](https://github.com/TryGhost/Ghost/wiki/Version-Info)\r\n\r\n- Test that / ensure that the importer correctly imports from 000, 001, and 002 versions\r\n- Make sure the importer can import from 003 version once #3284 is complete\r\n- Move the import logic so that it belongs to the right data version.\r\n- Ensure that the error messages are as useful as possible: #3274\r\n\r\n\r\n### Test Results \r\n\r\nData Version | SQLite | MySQL | *PostGres*\r\n----:|:----|:----|:----\r\n000 |\r\n001 |\r\n002 |\r\n003 |\r\n\r\n'
3284,'ErisDS','Export 003\nSplit from #2600 \r\n\r\n----\r\n\r\nThe export tool needs improving for 003, to ensure that data that needs exporting is exported correctly, and stuff that ought not to be exported like the tokens is left behind.\r\n\r\nAdditionally, it would be good to sure up the export tool against broken data, in order to resolve #3242\r\n\r\nProbably a good idea to create a basic database for all data versions, with a user and a couple of tags/posts, and store the database in [ghost versions](https://github.com/TryGhost/Ghost/wiki/Version-Info) along with an export file'
3281,'jgable',"Lazy Load Settings doesn't work\nLazy loading settings isn't working properly at present - it seems to fail silently, and cause problems later.\r\n\r\nI noticed this when trying to upgrade a 000 blog to 003, but there is a much easier way to reproduce it:\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the user api integration tests on their own:\r\n\r\n> $ NODE_ENV=testing mocha --timeout=15000 --ui=bdd --reporter=spec core/test/integration/api/api_users_spec.js\r\n\r\nClearly this shows this test isn't independent, but it also is a really easy way to reproduce the problem that happens when the settings don't populate. There are no errors, it just doesn't work and the test fails.\r\n\r\n### More info\r\n\r\nI've been debugging this for a while, and have identified what is going on:\r\n\r\n1. The findOne in `populateDefault` in the settings model is missing a return:\r\n- https://github.com/TryGhost/Ghost/blob/6628127297494074a4a52c4235ae4b80ed119bfc/core/server/models/settings.js#L124\r\n\r\n2. `populateDefaultSetting` in the settings API calls `readSettingsresult` and then `updateSettingsCache` both of which expect to operate on a bookshelf collection thing, but it calls them with a JSON representation of a single setting: https://github.com/TryGhost/Ghost/blob/6628127297494074a4a52c4235ae4b80ed119bfc/core/server/api/settings.js#L199\r\n\r\nI think the missing return was masking the bigger problem?"
3279,'jgable',"settings/users/user always pulls down 'me'\nThe settings / users / user screen doesn't pull the user it's supposed to, it always shows you your own account.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Invite a shiny new user to your blog. \r\n2. Logout\r\n3. Open your email, and accept the invitation\r\n4. Login and try to view the 2 accounts - they're both you!\r\n\r\nI guess this hasn't been changed from being the current user's profile screen yet?\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: master (latest commit: 5095c6f0dd5dea15ecafc5eaa8f752c4c08e4814)\r\n* Client OS: Mac OS X 10.8.5\r\n* Server OS: Localhost\r\n* Node Version: 0.10.18\r\n* Browser: Chrome 31.0.1650.63"
3275,'ErisDS','created_by / updated_by always defaults to 1\nNow that we have the ability to login as multiple users, it has become apparent that the currently logged in user is not used to save / create objects.\r\n\r\nThis is hard to tell with the permissions currently as they are because authors are not currently able to create posts due to another bug. With that fixed, it becomes apparent that every post is marked as belonging to user 1.\r\n\r\nThis appears to be the same for any / all objects created or updated.\r\n\r\nP.S. I am working on a fix for this.'
3274,'ErisDS',"Regression: Import Error Messaging is No Longer Useful\nPreviously (0.4.2) when you imported a large json file which failed due to a duplicate slug error (which is pretty common) the error message would be:\r\n\r\n> A problem was encountered while importing new content to your blog. Error: Error importing data: RejectionError: ER_DUP_ENTRY: Duplicate entry 'self-improvement' for key 'tags_slug_unique' \r\n\r\nIn latest master that error message now reads simply as...\r\n\r\n> A problem was encountered while importing new content to your blog. Error: Error importing data: Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: tags.slug\r\n\r\nI am able to solve the issue I'm having based on the former error message. The latter error leaves me totally in the dark."
3271,'PaulAdamDavis','User website should be allowed to be empty\nCurrently, the validations on both the client and server side are checking to see if the website is a valid URL, but they are not taking into account that the website is allowed to be empty.\r\n\r\n![serverside](http://puu.sh/aaYyn/4bc468c493.png)\r\n\r\nAdditionally, the website field gets autofilled by chrome with my email address, which is not a valid URL:\r\n\r\n![pre-populated](http://puu.sh/aaJfF/8332ad1a8b.png)'
3252,'sebgie','Move image upload to API\nThe image upload endpoint is registered at `/ghost/upload/`. This endpoint is currently not protected by oAuth and it is the last endpoint that has not been moved to the API.\r\n\r\nI would like to propose to move the image upload to `/ghost/api/v0.1/images`.'
3226,'jaswilli','BUG: Theme setting missing\n### Issue Summary\r\nWhen navigating to the settings page the theme setting is not pre-selected. If I save settings without any changes Ghost is broken because the empty setting is written to the database.\r\n\r\nClosing PR should solve 2 problems:\r\n- active theme has is selected in admin\r\n- API has to check if the theme is valid\r\n\r\n### Steps to Reproduce\r\n\r\n1. log in\r\n2. navigate from content to settings using the navigation bar\r\n3. press save\r\n4. Refresh and enjoy error 500 `The currently active theme null is missing.`\r\n\r\n### Technical details\r\n\r\n* Ghost Version: master - latest commit:  09e03f4d78d17b2d1b1b3f452aff6933cd7cf1f6\r\n* Client OS: OSX 10.9.3\r\n* Server OS: Vagrant\r\n* Node Version: v0.10.26\r\n* Browser: Chrome\r\n* Database: sqlite\r\n'
3222,'morficus',"Users settings screen pagination\nOnce we have all the API endpoints in place and working properly, need to get the user management screen pagination working properly:\r\n\r\nFrom https://github.com/TryGhost/Ghost-UI/issues/21: \r\n\r\n> I'd say 20 records, and infinite scroll after that. \r\n\r\nThat is, the screen should show 20 records, and then use infinite scroll"
3214,'morficus','Wire up resend button for invited users\nResending invitations (see #3078 for reference) is already implemented on the backend. The API call that is used to resend an invitation is the same as inviting a user. If the user is already invited the email will be resent.\r\n\r\nAPI Call: `POST /ghost/api/v0.1/users/`\r\nPayload: `{users: [{email: <email>, role: <role>}]}`'
3206,'ErisDS','`grunt init` bower task fails if space in directory name (and as a result /ghost/signup page appears blank)\nHey guys,\r\n\r\nJust cloned a fresh copy of the repo to start on some theme development, and ran into this issue. Basically after following the install steps and navigating to /ghost/signup, I was served with a blank page. After looking into it, it appears to be caused by `grunt init`\'s "shell:bower" task failing due to my local directory having a space in it.\r\n\r\n```\r\n$ grunt init -v\r\n\r\n...\r\n\r\nRunning "shell:bower" (shell) task\r\nVerifying property shell.bower exists in config...OK\r\nFile: [no files]\r\nOptions: stdout, stderr=false, stdin, failOnError=false\r\nCommand: /Users/jamesduffy/Dropbox (Personal)/_Development/duffx.com/node_modules/.bin/bower install\r\nOptions: stdout, stderr=false, stdin, failOnError=false\r\n/bin/sh: -c: line 0: syntax error near unexpected token `Personal\'\r\n/bin/sh: -c: line 0: `/Users/jamesduffy/Dropbox (Personal)/_Development/duffx.com/node_modules/.bin/bower install\'\r\n```\r\n\r\nAfter moving the file to a directory with no space, `grunt init` works fine.\r\n\r\nNot sure if it\'s within the Ghost team\'s power to fix or if this is an issue with the bower module, but figured I\'d open an issue in case other people are having this problem in the future.'
3197,'sebgie',"Add role to user object\nPrerequisite for #3086.\r\n\r\nTo be able to adapt the admin interface to the role of the currently logged in user we need to add roles and permissions to the user object. A user object should return its role and associated permissions. Role and role.permissions are expandable attribute and are requested by sending the `include=role` or `include=role,role.permissions` query parameters.\r\n\r\n\r\nGet User object: `GET /ghost/api/v0.1/users/me/`\r\n\r\n```\r\n{\r\n    users: [{\r\n        id: 1,\r\n        name: 'Joe Bloggs',\r\n        email: 'jbloggs@example.com',\r\n        ...,\r\n        role: 1\r\n    }]\r\n}\r\n```\r\n\r\nGet User with role details: `GET /ghost/api/v0.1/users/me/?include=role`\r\n\r\n```\r\n{\r\n    users: [{\r\n        id: 1,\r\n        name: 'Joe Bloggs',\r\n        email: 'jbloggs@example.com',\r\n        ...,\r\n        role: {\r\n            id: 1,\r\n            description: 'Administrators,\r\n            name: 'Administrator',\r\n            permissions:[1,2,3],\r\n            ...\r\n        }\r\n    }]\r\n}\r\n```\r\n\r\nGet user with role and permissons: `GET /ghost/api/v0.1/users/me/?include=role,role.permissions`\r\n\r\n```\r\n{\r\n    users: [{\r\n        id: 1,\r\n        name: 'Joe Bloggs',\r\n        email: 'jbloggs@example.com',\r\n        ...,\r\n        role: {\r\n            id: 1,\r\n            description: 'Administrators,\r\n            name: 'Administrator',\r\n            ...,\r\n            permissions: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Edit posts',\r\n                    ...,\r\n                },\r\n                {...}\r\n            ]\r\n        }\r\n    }]\r\n}\r\n```"
3196,'javorszky','Add role endpoint\nTo make available roles accessible by the frontend we need an endpoint to fetch all available roles.\r\n\r\n- `GET /ghost/api/v0.1/roles/`: returns all available roles\r\n\r\nAs second endpoint will be needed to get all roles a user is allowed to assign #3079.\r\n\r\n- `GET /ghost/api/v0.1/roles/?permission=<my-role>`: returns all roles filtered by permissions. For example an admin will get all available roles except for the owner role and an editor will get the author role only. Implementation will have to be in accordance with #3083.'
3182,'JohnONolan','[Placeholder] Delete or transfer user content modal \nSpec / design for action where content is transferred in ownership from one user to another user when the first user is deleted'
3177,'sebgie','Exporter on /ghost/debug/ screen shows signin error\nIf you press the export button on the `/ghost/debug/` screen this is what happens:\r\n\r\n> `{"type":"error","message":"Please Sign In","status":"passive"}`'
3175,'novaugust',"Persistent notifications won't close if there's an error saving them\n## Issue Summary\r\n\r\nIf there's an error on the `delete` request for a `permanent` (er, non-passive) notification, nothing whatsoever happens. This makes the application seem unresponsive.\r\n\r\n## Reproduction Steps\r\n\r\nI'm not skilled enough (read: have yet to google) with my browser dev tools to make an api call fail, so here's my strong-armed way of doing it.\r\n\r\n1. Start ghost with a permanent notification (my method, start up a fresh install with no email settings)\r\n2. Load the admin\r\n3. Kill your server or otherwise ensure api calls will fail\r\n4. Try to close that permanent notification.\r\n\r\n## Specs\r\n\r\nWin8, Chrome, master latest.\r\n\r\n\r\n## Proposed Solutions\r\n\r\nI see two paths here for making us look good.\r\n\r\n#### Cloes even on fail\r\n\r\nThe first is simply, close the notification even though its api call failed. **Pro**: Responsive! **Con**: They'll see the notification again next load\r\n\r\n#### Notify of api errors\r\n\r\nThe second, which can actually be combined with the first, is to create a passive notification warning the user that their connection seems to have gone wonky. Downside here is, we just created a notification when you tried to close a notification :/  Upside is, this could be used beyond just notifications api failures. Any failed request could send one of these bad boys."
3167,'jaswilli','Unhandled rejection during tests\nSee here: https://gist.github.com/ErisDS/dccd6e99e05c28d1cdcf\r\n\r\nSeen during MySQL build\r\n\r\nMaster: 5cb5c5cf49e709183935efe2121fc2d8d5029f96'
3166,'PaulAdamDavis',"Passive notifications blink out on hover\n## Issue Summary\r\n\r\nPassive notifications aren't sticking around on a hover - in fact, something pretty much the opposite happens. Hover kills the poor guys!\r\n\r\n## Reproduction steps\r\n\r\n1. Do something that creates a passive notification (Quick and easy: Toggle a post into a static page)\r\n2. Mouse over the notification\r\n3. Be sad that went away\r\n4. and that these little things keep popping up at the end of the Ember milestone, that's sad too\r\n4. Feel better, because you know that somewhere out there, there's a @javorszky watching over you, and he's going to make it all better.\r\n\r\n## Specs\r\n\r\nDoes everyone have my operating system and browser of choice down yet?\r\n\r\nWindows 8, Chrome latest\r\n\r\nLatest master, which is `c35884ea6ec6`"
3161,'jaswilli',"Get Ember ready for production\nWe need to look at having different modes for the ember admin. Things like logging need to be toned down, meanwhile concatenation and minification need to be ramped up.\r\n\r\nI'm not sure what other considerations there might be, this needs a bit of research / pro knowledge."
3160,'PaulAdamDavis','Test the update notification works still\nThe update notification is a special persistent notification which appears in the top of the UI. It is most likely broken since the Ember re-write.\r\n\r\nIt needs checking / re-implementing before we release.'
3158,'novaugust','Post Settings Menu: Reset slug & date on error\nSimilar to #3134 , see also [this comment](https://github.com/TryGhost/Ghost/pull/3135#issuecomment-47550907)'
3147,'sebgie',"[Ember.js] Redirect authenticated user from signin -> posts\nI found another bug with the new oAuth flow. A user that is authenticated is not redirected when accessing the page. I'm opening this issue to keep track of problems with the oAuth flow. I'll look into it.\r\n\r\nProbably the same solution as #3145 "
3145,'sebgie','Emberjs Setup Screen Should Redirect if already "setup"\n## Issue Summary\r\n\r\nUsers can still go to `/setup` (I can see this happening in the real world with a push of the back button - say they changed their mind about the title) after already setting up their blog. \r\n\r\nClicking the "Okay, let\'s do this" button a second time will give them a "only one user at a time!" error message, rather than a "Bro. Broooo. Your blog is already set up" message. \r\n\r\nI\'d propose doing a `beforeModel` on the `SetupRoute` that redirects if the site has already been setup.\r\n\r\n## Repro steps\r\n\r\n1. Setup your blog\r\n2. Go back to `/setup` \r\n\r\n## Specs\r\n\r\nCommit: master, latest: `2d64372` '
3143,'novaugust','[Ember.js] Bug: Saving a new post with the PSM doesn\'t work right\n### Issue Summary\r\n\r\nSaving a new post via the Post Settings Menu doesn\'t change the route or save the whole post. The markdown field is still empty since the `markdown` property is only set equal to the `scratch` property [on saving via save button](https://github.com/TryGhost/Ghost/blob/master/core/client/mixins/editor-base-controller.js#L182) but not on the other times we save the model. [Here\'s one example](https://github.com/TryGhost/Ghost/blob/master/core/client/controllers/post-settings-menu.js#L22).\r\n\r\nI think we should probably create some kind of abstraction to be mixed among the editor controllers and PSM, and whatever else may need it in the future, that performs actions necessary on every save automatically.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Click "New Post".\r\n2. Write up a title and some markdown, and perhaps a tag or two.\r\n3. Click on the PSM button (the cog).\r\n4. Click the checkbox to save as a static page. You\'ll see no route change.\r\n5. Visit the admin home screen in a new window. You\'ll see the the post was saved, but the markdown was not.\r\n\r\nThis is a bug because... well, should be obvious by now. :smile_cat: \r\n\r\n### Technical details\r\n\r\n* Ghost Version: master - latest commit:  7eab416'
3136,'sebgie',"Move setup to the API\nSee https://github.com/TryGhost/Ghost/issues/3072#issuecomment-47340914 for reference.\r\n\r\nThe signup action should get it's own route on the API. I would like to propose the route `/ghost/api/v0.1/authentication/setup` because it looks like we are going to assemble all authentication related end points there? The implementation should be moved to `/core/server/api/authentication.js` as well."
3134,'novaugust','[Ember.js] Setting staticPage in the editor succeeds on failure\nIf there\'s a validation error or server error when toggling the "Static Page" checkbox in the editor, the setting will still take effect in the UI. This needs to be reset if errors occur.'
3128,'sebgie',"Restore spam prevention\nDue to the introduction of oAuth the spam prevention is broken. The API end points have changed and the an error is thrown before the spam prevention could do it's thing. To fix this, the prevention checks have to be done before an oAuth error is thrown."
3125,'sebgie','Signin after Signup\nWhen a new user signs up he was immediately logged in with the old client implementation. Due to the switch to oAuth this flow is broken now. The login is done by a mixin which handles the authentication with the server and stores the access_token that is returned from the server. I see currently two options to solve that problem:\r\n\r\n- find out if ember-simple-auth could be fed with data that comes back from the signup request and return an access_token when a user was successfully signed up\r\n- send the authentication request right after the sign up request finished and find out how  the authentication information could be set in ember_simple_auth \r\n\r\nAny other ideas?'
3119,'jaswilli','Random MySQL test failure needs investigation\nSee here: \r\n\r\nhttps://gist.github.com/ErisDS/5f0cb495b3b706a9912f'
3114,'halfdan',"[Discussion] API endpoint for paging included \n> Note: tag pages were implemented with an API call that effectively fetches posts filtered by a tag + that tags info, rather than a tag + its posts. This isn't technically correct (as covered by #2667). Given the short time frame for MU, it may be quicker to implement user pages in the same way for now, and replace #2667 with an issue to fix both of these API calls later.\r\n\r\n(from #3077 / @ErisDS)\r\n\r\nI have looked into this issue and now wonder how the API endpoint for the fix should look like. We are fetching a single user in #3077 and want all the user’s posts - this includes pagination.\r\n\r\n1. `/api/v0.1/users/1/?include=posts` - this does not include pagination and `&page=1` isn’t clearly bound to the posts.\r\n2. `/api/v0.1/users/1/posts/?include=posts.tags,posts.fields&page=1` - this seems better, it however is unclear whether this would only return posts (by user.id=1) or the user including all posts.\r\n3. `/api/v0.1/users/1?include=posts,posts.tags,posts.fields&posts.page=1` - this seems the most reasonable and consistent. We fetch user 1, all the user’s posts and paginate posts. This could potentially easily be abstracted so we can paginate e.g. `post.fields` when we fetch a post.\r\n\r\nSuggestions? Ideas?\r\n\r\n"
3105,'novaugust',"Disable success notification for feature/unfeature action\nJust tell me if/when something goes wrong. I don't need my entire screen spammed up just because a minor action worked correctly.\r\n\r\n![notificationhell](https://cloud.githubusercontent.com/assets/120485/3387217/a4e41afe-fc7b-11e3-83ac-a5e6559059f4.gif)\r\n\r\n\r\n\r\n"
3103,'PaulAdamDavis',"Touchscreen Editor Needs padding?\n## Issue Summary\r\n\r\nWhen both the editor and preview panes are simultaneously visible, the first few lines of the post disappear behind the floating header.\r\n\r\n![Demo Gif](http://www.novaugust.net/blog/wp-content/uploads/2014/06/padding.gif)\r\n\r\n## Repro Steps\r\n\r\n1. Be on a touchscreen laptop (See my specs below)\r\n2. Open the editor screen\r\n3. Have the window wide enough that the MQ for editor+preview kicks in\r\n4. Type some text. It's below the header :(\r\n\r\n## Specs\r\n\r\nLaptop: Lenovo Yoga (Touchscreen Laptop)\r\nOS: Win 8\r\nBrowser: Chrome 35\r\nCommit: `df8e7263e17cec86`"
3101,'PaulAdamDavis','Missing hrefs on <a> tags\n![image](https://cloud.githubusercontent.com/assets/120485/3386607/2b478c94-fc76-11e3-9e9e-8968fee3e0d8.png)\r\n\r\nThe post management settings cog has lost its `href` - which means the `:hover` state of the cursor no longer functions. It needs an `href` - even if it\'s just `#` + disabling the default functionality\r\n\r\nClarification: missing href removes browser default hover state. Eg. cursor:pointer\r\n\r\nThis is currently an issue in several places:\r\n\r\n- Post management settings cog\r\n- Editor settings cog\r\n- Global usermenu dropdown (also, I\'m unable to right-click on this, why?)\r\n- The "delete" item in the post-settings menu'
3100,'javorszky','Users API: deleting users\nJSON API                 | Admin | Editor | Author           | NoAuth\r\n-------------------------|-------|--------|------------------|------------------------\r\nusers.browse          | y     | y   | y     | \r\nusers.read              | y     | y    | y    | y\r\nusers.edit                | y     | y (user == self or user == author)     | y (user == self) | \r\nusers.add               | y     | y (user == author)    |                  | \r\nusers.delete           | y (user != owner)    | y (user == author)   |   |                 |  \r\n\r\nNote, authors cannot delete even their own account.\r\n\r\nThe flow of deleting a user will include a way to transfer ownership of stuff.'
3096,'ErisDS','User API Permissions: Restrict based on role\nIn #2264 the permissions for the user API were defined as: \r\n\r\nJSON API                 | Admin | Editor | Author           | NoAuth\r\n-------------------------|-------|--------|------------------|------------------------\r\nusers.browse             | y     | y      | y                | \r\nusers.read               | y     | y      | y                | y\r\nusers.edit               | y     | y      | y (user == self) | \r\nusers.add                | y     | y      |                  | \r\n\r\nThis is not quite correct, and should be:\r\n\r\nJSON API                 | Admin | Editor | Author           | NoAuth\r\n-------------------------|-------|--------|------------------|------------------------\r\nusers.browse             | y     | y   | y     | \r\nusers.read               | y     | y    | y    | y\r\nusers.edit               | y     | y (user == author)     | y (user == self) | \r\nusers.add                | y     | y (user == author)    |                  | \r\n\r\nThis is related to #3080 and #3083'
3087,'sebgie','Transfer ownership\nRequires https://github.com/TryGhost/Ghost-UI/issues/33\r\n\r\n---\r\n\r\nAn owner has one power that no other user has, and that is the power to transfer ownership:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/3074228/3fa8b6fc-e32d-11e3-9bc9-c240240f8be0.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/3074230/5dd208ea-e32d-11e3-9a50-63efaa46ddc0.png)\r\n\r\nThis issue covers both implementing the UI (which can only be seen by an owner) and any API changes needed. '
3085,'halfdan',"Users API: advanced browsing\nThe Browse method of the User API needs updating to have more advanced functionality:\r\n\r\n- It needs to be paginated, with a default of 20 items\r\n- Only users with a status of `active` should be returned by default\r\n- There should be a query param to request alternative statuses including 'invited', 'inactive' or 'all', \r\n    - An author / no-auth user can only see active users"
3084,'novaugust','Post Settings Menu: Author dropdown\nThis is awaiting an issue in ghost-ui to style this correctly \r\n\r\n---\r\n\r\nThere is a plan for a shiny new post settings menu, but in the meantime we are just going to add a dropdown to the existing post settings menu.\r\n\r\n* The dropdown should list all of the available authors in the system.\r\n* The dropdown should not be available to authors\r\n* On a new post, it should default to selecting the current logged in user\r\n* On an existing post, it should default to selecting the author of the post\r\n* Changing the dropdown should change the author of the post, and fire a notification to say so'
3083,'jaswilli',"User & Roles API: Who can invite what role\nThe User API will need to be updated to honour the following:\r\n\r\n* The new owner role can do anything it likes.\r\n* An admin can invite a user, and that user can have the admin, editor or author role.\r\n* An editor can invite a user, but that user can only have the author role.\r\n* An author cannot invite a user.\r\n\r\nAs well as enforcing that a user is not able to create a user with a role it shouldn't be able to, we also need a way to determine the list of roles a user can create, in order to correctly populate the dropdown in #3079 \r\n\r\nThe dropdown should be correctly populated as a result of this issue."
3082,'morficus',"Invite Email & Signup screen UI changes\nhttps://github.com/TryGhost/Ghost-UI/issues/22 may introduce a new HTML email template, and there are likely to also be minor amendments to the signup screen to make it clearer that you're accepting an invite after #3081.\r\n\r\nThis issue is a placeholder for those changes."
3081,'sebgie',"User API: Accept an invite\nPlease see the invite flow description in #2982 \r\n\r\n----\r\n\r\nFollowing on from #3080, the old signup screen should be re-purposed to allow a user to accept an invite. This also requires API changes, but it should be straightforward enough to do both the API changes and the screen changes in one go.\r\n\r\n* The user should land on the signup screen with a token which should be checked.\r\n* Their email address should be pre-populated, but editable.\r\n* Given the token is valid and their credentials are also valid, submitting the form should update the existing user with the correct values. \r\n* The user's status should be set to `active` and they should be automatically logged in"
3080,'sebgie',"User & Roles API: Invite a user\nPlease see the invite flow description in #2982 \r\n\r\n----\r\n\r\nRather than a straight 'create' endpoint for adding users, we need to be able to invite users.\r\n\r\nInviting users should do the following:\r\n\r\n* create a new user in the DB with a populated email address, but most other fields should be blank / a single space / a random value depending on whether the field can be null.\r\n    * an invited user should have a status of 'invited'\r\n    * an `invited` user should not be able to login\r\n    * all invited users should default to being `authors` to begin with until #3083 is implemented\r\n* send an email to the given email address, very similar to the forgotten password email which invites them to signup and gives them a URL with a token similar to a reset password token.\r\n    * the token should be valid for longer than a forgotten password token, maybe 2 weeks?"
3077,'ErisDS','Helper updates for User Pages\nRequires #3076 we need helper updates for our user pages, similar to #2112 \r\n\r\n---\r\n\r\n### Url helper update for user pages\r\n\r\nOnce the feature for user pages exists, the `{{url}}` helper can be updated to support outputting URLs in the user context.\r\n\r\n**Question:** should we also update the default output of the `{{author}}` tag? We did this for `{{tags}}` and it broke a lot of themes quite badly. Perhaps we should output a warning that it will be changing in a future version? '
3076,'ErisDS',"Shiny new user pages\nIn a very similar vein to #2111 (Tag pages) for MU we want to add user pages.\r\n\r\nA user page is the profile page for a particular user, which contains details about a user and a paginated list of their posts.\r\n\r\nThe route for user pages should be `/users/:slug/`.\r\n\r\nThe user page will provide the template with a paginated set of posts for the given user, which can be accessed via {{#foreach posts}} in exactly the same way as the standard post list is rendered using index.hbs.\r\n\r\nAdditionally, user pages will provide the template with all the data for the given user such that it can be accessed via {{#user}} in the same style as the post.hbs template.\r\n\r\nThe new user controller will support a template/view hierarchy much like page.hbs > post.hbs. If there is a template called user.hbs this will be used to render the page, otherwise user pages will use the standard index.hbs which lists out posts.\r\n\r\nIf the user doesn't exist, the page should 404, not show an empty list - see #2667 \r\n\r\n**Note:** tag pages were implemented with an API call that effectively fetches posts filtered by a tag + that tags info, rather than a tag + its posts. This isn't technically correct (as covered by #2667). Given the short time frame for MU, it may be quicker to implement user pages in the same way for now, and replace #2667 with an issue to fix both of these API calls later.\r\n\r\n**Question:** is there a need to be able to turn this feature off either for all users or specific ones?"
3075,'sebgie','Owner permissions\nRequires #3073 \r\n\r\n----\r\n\r\nAn owner should automatically have all permissions, regardless of whether they are core or created by an app or any other means should it ever exist.\r\n\r\nI recommend that canThis be updated to always return true if the user has the role `owner`'
3074,'sebgie','Change setup to hijack the owner user\nRequires #3072 and #3073 \r\n\r\n---\r\n\r\n* Instead of creating a new user on setup, update the existing owner user with the name, email and password provided in the setup flow.\r\n\r\n* Set the status of the user to `active` so that they can login\r\n\r\n'
3073,'sebgie','Owner role, fixtures and migration\nSee "The new owner role" explanation in #2982 \r\n\r\n---- \r\n\r\n* Add a new \'owner\' role\r\n* Setup a fixture for a user which has the owner role\r\n* That user should not be able to sign in by default - their status should be \'inactive\' and they should not be allowed to login\r\n* If a Ghost blog doesn\'t have a user, the owner user fixture should be added to the DB\r\n* If a Ghost blog already has a user, the owner user fixture should not get added, but instead the existing user should get the owner role'
3072,'halfdan','New setup screen and process for blog installation\nReplacing the old issue: #1794 \r\n\r\n----\r\n\r\n![first-run](https://f.cloud.github.com/assets/120485/1821507/9a5e1af8-7134-11e3-9767-ae2a431c5374.png)\r\n\r\n* When installing Ghost / setting up the first user, Ghost should redirect to /ghost/setup/ instead of /ghost/signup/.\r\n\r\n* The setup screen should look like the above screenshot. Pre-styled markup for the screen exists here: https://github.com/TryGhost/Ghost/blob/master/core/client/html/setup.html\r\n\r\n* The setup process has \'blog title\' which is additional to the old signup process. This will need validating and wiring up to get saved on the server side. \r\n\r\n* On the server side, the blog.description should be automatically set to: "Thoughts, stories and ideas by [user.name]"\r\n\r\n* Everything else should work exactly as per the old signup screen, the user should be created and automatically logged in, the welcome email should be sent, etc.\r\n\r\n**Question**: should the setup be posted to an admin route, or do we need to move this onto the API? I\'d say leave it as an admin route for now.\r\n\r\n**Note**: the routes mentioned assume the ember admin is now the default, but that doesn\'t *have* to be done first.'
3056,'ErisDS','[Draft] [Ember.js] Make the ember admin "live"!\nThis is somewhere to keep track of the things that will need doing, so that when we\'re ready it\'s easy to do:\r\n\r\n* Delete the clientold folder\r\n* Change the root url for the ember admin to just `/ghost/`\r\n* Remove the old server side admin routes\r\n* Remove the no-longer-needed admin handlebars helpers\r\n* Delete the old casper tests\r\n* Remove references to `/ember/` from the new casper tests\r\n* Beware of the `/ghost/login` redirect and the test for it in signin_test.js\r\n'
3047,'ErisDS',"[Ember.js] Admin doesn't work under subdirectory\nAdding a subdirectory to your URL in `config.js` causes Ghost to be served from that subdirectory, and subsequently the ember admin to not work at all\r\n\r\n### Steps to Reproduce\r\n\r\n1. Change your url in config.js to something like `http://localhost:2368/test/`\r\n2. Try to load `/test/ghost/ember/`\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: master"
3040,'halfdan','[Ember.js] Trim title on editor screen\nThe old admin has a feature whereby the title is trimmed on blur:\r\n\r\nhttps://github.com/TryGhost/Ghost/blob/master/core/clientold/views/editor.js#L46\r\n\r\nThis needs implementing on the ember editor.\r\n\r\nNote: PR #3034 has a commented out test for this.'
3038,'halfdan','[Ember.js] Focus title field when new editor is loaded\nAs per the old admin, when the ember version of the editor is loaded, the title field should be focused, ready for the user to start typing.\r\n\r\n'
3037,'novaugust','[Ember.js] Add nprogress for save events\nFollowing on from PR #3024, it would be really nice to have nprogress work on post, settings, and other save events - i.e. whenever data is sent off to the server and we are waiting for the server to respond before continuing.\r\n\r\nThis would be an improvement over the old editor.'
3036,'jaswilli','[Ember.js] Validation for settings/general\nFollowing on from #2846, settings/general needs validations setting up. \r\n\r\nThe existing validations are here: https://github.com/TryGhost/Ghost/blob/master/core/clientold/views/settings.js#L166\r\n\r\n```\r\nif (!validator.isLength(title, 0, 150)) {\r\n                validationErrors.push({message: "Title is too long", el: $(\'#blog-title\')});\r\n            }\r\n\r\n            if (!validator.isLength(description, 0, 200)) {\r\n                validationErrors.push({message: "Description is too long", el: $(\'#blog-description\')});\r\n            }\r\n\r\n            if (!validator.isEmail(email) || !validator.isLength(email, 0, 254)) {\r\n                validationErrors.push({message: "Please supply a valid email address", el: $(\'#email-address\')});\r\n            }\r\n\r\n            if (!validator.isInt(postsPerPage) || postsPerPage > 1000) {\r\n                validationErrors.push({message: "Please use a number less than 1000", el: $(\'postsPerPage\')});\r\n            }\r\n\r\n            if (!validator.isInt(postsPerPage) || postsPerPage < 0) {\r\n                validationErrors.push({message: "Please use a number greater than 0", el: $(\'postsPerPage\')});\r\n            }\r\n```\r\n\r\nPlease note, PR #3034 includes some [commented out tests](https://github.com/ErisDS/Ghost/commit/33401990e5e57d4bc76af6c09441b83e29209c95#diff-c623c02cb19739e3d9120b7ce3356f1eR112) for these.\r\n'
3035,'halfdan',"[Ember.js] Settings character countdown\nFrom https://github.com/TryGhost/Ghost/issues/2846#issuecomment-46679448, via @novaugust:\r\n\r\nOn the clientold, the blog description is counting down from 200 characters\r\n![image](https://cloud.githubusercontent.com/assets/1207005/3340734/2ab4cba0-f881-11e3-9b14-c8caa01bf18c.png)\r\n\r\nOn ember, the blog description is counting how many words you've typed, which isn't quite so useful.\r\n![image](https://cloud.githubusercontent.com/assets/1207005/3340726/1c214348-f881-11e3-9de8-3b91975c94d0.png)\r\n\r\nNote that the counter also changes colour when you start running out of characters"
3031,'ErisDS','[Ember.js] Settings/Apps pane should only be available if set in config.js\nThe settings/app pane is a WIP, in the old admin it is only available if `apps:true` is set in config.js. This needs reimplementing in Ember.\r\n\r\nThis is related to #2956 as both of them require a way to pass a config option to ember.'
3029,'novaugust',"Keyboard shortcuts: for Ctrl/⌘ should only work for ⌘ under mac\nSee the wiki page: https://github.com/TryGhost/Ghost/wiki/Keyboard-Shortcuts (currently WIP)\r\n\r\nAny keyboard shortcut that is listed as `Ctrl/⌘+?` needs to work with Ctrl on every platform except for Mac. On Mac it is different, and the shortcut ought to only work with `⌘`.\r\n\r\n**Update:** Can use `if (navigator.userAgent.indexOf('Mac') !== -1)` to detect Mac."
3027,'sebgie',"[Ember.js] Session expiry is not handled\nIf you leave the admin panel open over night, when you come back to it, you will have lost your server side session. You can still click around the admin, but nothing will work. The content screen will show the 'loading' pane forever, etc\r\n\r\n### Steps to Reproduce\r\n\r\n1. Log in to the admin panel\r\n2. Leaving the admin panel, cause your session to expire (you can change it in the DB)\r\n3. Click around the admin panel, inc visiting 'content'\r\n\r\nI believe any `401` response from the server should cause the admin panel to redirect to the signin page.\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: master (latest commit: ae728534ea6aadcab16d4c111e71e801b0d677a8)"
3018,'darvelo',"[Ember.js] Bring across mobile features from old admin\nWe're not going to have time to implement a big mobile plan for #2333, so in the short term we need to make sure that the new ember admin is at least as good as the old admin on mobile.\r\n\r\nTherefore, we need to port across the [mobile interactions](https://github.com/TryGhost/Ghost/blob/master/core/clientold/mobile-interactions.js) from the old admin into Ember.js."
3017,'halfdan','[Ember.js] Notifications: Implement closeAll()\nSee #3016 \r\n\r\nImplement `closeAll()` for notifications, to remove all the currently visible passive (only passive) notifications from being visible:\r\n\r\nStub is here: https://github.com/TryGhost/Ghost/blob/bb88b3664fae3d6bed092e2098975fef89f71133/core/client/utils/notifications.js#L51'
3016,'jgable','Keyboard Shortcuts: ESC to close modals\nRef #2752, #1463 \r\n\r\n----\r\n\r\nThere is currently a `TODO` in the codebase for this: https://github.com/novaugust/Ghost/blob/e10c0f20cfcb6e8a19cd2abcd8580e7ea5f90b3e/core/client/routes/application.js#L11\r\n\r\n`ESC` closes popovers and notifications, it should also close modals.'
3013,'ErisDS',"[Ember.js] Post first save issue on error\nIf you try to save a brand new post with no title, then an error appears in the console. This error prevents the blank title error notification from displaying. It does appear along with the success notification if you then do a successful save:\r\n\r\n```\r\nTypeError: Cannot read property 'get' of undefined\r\n    at http://localhost:2368/ghost/scripts/ghost-dev-ember.js:949:30\r\n    at invokeCallback (http://localhost:2368/ghost/scripts/vendor-ember.js:29979:19)\r\n    at publish (http://localhost:2368/ghost/scripts/vendor-ember.js:29649:9)\r\n    at publishFulfillment (http://localhost:2368/ghost/scripts/vendor-ember.js:30069:7)\r\n    at http://localhost:2368/ghost/scripts/vendor-ember.js:38345:7\r\n    at Object.DeferredActionQueues.flush (http://localhost:2368/ghost/scripts/vendor-ember.js:26093:24)\r\n    at Object.Backburner.end (http://localhost:2368/ghost/scripts/vendor-ember.js:26181:27)\r\n    at Object.Backburner.run (http://localhost:2368/ghost/scripts/vendor-ember.js:26220:18)\r\n    at Object.Ember.run (http://localhost:2368/ghost/scripts/vendor-ember.js:26630:27)\r\n    at Object.handleRegisteredAction [as handler] (http://localhost:2368/ghost/scripts/vendor-ember.js:58462:15) vendor-ember.js:23487\r\nUncaught Error: Assertion Failed: TypeError: Cannot read property 'get' of undefined vendor-ember.js:20039\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open the Ember admin with the console open\r\n2. Click 'New Post'\r\n3. Click save\r\n\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: master (latest commit: bb88b3664fae3d6bed092e2098975fef89f71133)"
3012,'halfdan','[Ember.js] Passive notifications should clear on user action\nAny passive notifications should be cleared when a user interacts with the admin again - for example:\r\n\r\n- If a user transitions to another screen\r\n- If a user presses a save button (editor, settings), or otherwise triggers a save (via post settings or keyboard shortcut)'
3008,'darvelo',"[Ember.js] First item in post list is not always the active item\nOn the content screen, if it is accessed without a specific post ID, then the first item in the list should be marked as active. \r\n\r\nWhilst testing the ember admin with MySQL, where the database doesn't get rest and there ends up being hundreds of draft posts after time, the first item in the list isn't always active. Sometimes the 3rd or 4th item seems to be the active item.\r\n\r\nI have a feeling this is to do with the reordering code?\r\n\r\n### Steps to Reproduce\r\n\r\n1. Setup your `testing` env to use MySQL\r\n2. Run `grunt test-functional` a few times\r\n3. Uncomment the test on L47 of content_test.js\r\n4. Run `grunt test-functional` a few more times\r\n5. Run `NODE_ENV=testing npm start` and login to the ember admin to witness this first hand\r\n\r\nThis is a bug because...\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: master (latest commit: 9145d3cfc1558f4f4e555fe7e617cf53bf0fc2c6)\r\n* Only repro'd on MySQL, but may also occur on SQLite."
2998,'darvelo',"[Ember.js] Calls to post API should all have include=tags\nWhen a post is fetched,  created or updated, the call to the API needs to send 'include=tags' so that we get tags back in the response. "
2989,'ErisDS','[Ember.js] Functional Tests\nWe desperately need to get our Casper.js test suite to run against the ember tests, so that we have some idea of how the new admin is matching up with the old one.'
2988,'ErisDS',"Keyboard shortcuts: Alt + Shift + Z  for Zen writing mode\nThis depends upon #2752 \r\n\r\n----\r\n`Alt + Shift + Z` should toggle the class 'zen' on the body element. This will transition the editor into zen writing mode.\r\n\r\n![zen mode](http://puu.sh/9y4zu/ede449e7ae.png)"
2982,'ErisDS',"[Feature] Multi-User\n## Description\r\n\r\nAdding multi-user support for ghost so that teams of people can write a blog together. This involves administrators, editors and authors. Shazam.\r\n\r\n----\r\n\r\n## Details:\r\n\r\n### The new owner role\r\n\r\nThe `owner` is a user which is one level above admin. An owner can do absolutely anything - no permissions apply to them, or rather `canThis` should default to `true` if the user has role `owner`.\r\n\r\nThere can only ever be one `owner` in a Ghost blog, and a user with role `owner` cannot be deleted. \r\n\r\nAn `owner` can choose to transfer `ownership` (that is the `owner` role) to any other admin user.\r\n\r\nThe `owner` role will be setup with a single user as a fixture. That user will be 'commandeered' or taken-over by the first signup (setup). In existing Ghost blogs, the single current admin user will be upgraded to an owner.\r\n\r\n### The new setup flow\r\n\r\nGhost blogs will be 'installed' or 'setup' from the new setup screen, the signup screen will no longer be used for creating the first user, but only for creating new users.\r\n\r\nThe setup screen includes the blog title as well as the user details.\r\n\r\nThe setup screen will hijack the new 'owner' role user which will be a fixture.\r\n\r\n### The invite flow\r\n\r\nUsers will be added to a Ghost blog by being invited. The invite screen is shown here: https://github.com/TryGhost/Ghost-UI/issues/21.\r\n\r\nThe new owner role can do anything it likes.\r\nAn admin can invite a user, and that user can have the admin, editor or author role.\r\nAn editor can invite a user, but that user can only have the author role.\r\nAn author cannot invite a user.\r\n\r\nAn invite creates a user with an empty name and password, but with an email address. The invited user has a status of 'invited'.\r\n\r\nOnce invited, a user is sent an email with a URL with a token, similar to a forgotten password URL. The URL takes them to the signup screen and allows them to enter their name and password, and pre-fills their email address (it can be changed).\r\n\r\nThe signup process then completes the details of the user, and changes the status to 'active'. The user is automatically logged in.\r\n\r\n---- \r\n\r\n## The Plan!\r\n\r\nI don't normally write up a plan of what issues need to be done first, but in order to deliver MU very very fast, I thought it would help.\r\n\r\nGetting Ghost MU-ready involves three main tasks: 1. making it possible to create and manage multiple users 2. making the admin safe for multiple users and 3. adding features to make Ghost work nicely with multiple users. The 3 individual tasks should be able to run concurrently, although it will be tricky to test the safety and features without having at least 2 users in the system, and that will be easier once the creation and management tools are in place, so that has to take slight priority.\r\n\r\nTo that end, I've grouped the issues above into 2 phases that can happen concurrently. I will ask that people pick up and deliver items from phase 1 first, followed by phase 2.\r\n\r\n### Phase 1 issues (For 8th July):\r\n\r\n * Setup:\r\n      * [x] Setup Screen Wiring #3072\r\n      * [x] Owner role, fixtures and migration #3073, #2399 \r\n      * [x] First pass: new user management settings screen #3078\r\n      * [x] Invite a user modal #3079\r\n      * [x] User & Roles API: Invite a user #3080\r\n      * [x] User API: Accept an invite #3081\r\n      * [x] Users API: deleting users #3100\r\n\r\n * Security:\r\n      * [x] XSS prevention - #1378 (probably needs a new issue)\r\n      * [x] CSP - #332 \r\n\r\n * Features:\r\n      * [x] Shiny new user pages #3076\r\n      * [x] Helper updates for User Pages #3077\r\n\r\n### Phase 2 issues (For 15th July):\r\n\r\n* Setup:\r\n     * [x] Change setup to hijack the owner user #3074\r\n     * [x] Invite Email & Signup screen UI changes #3082\r\n     * [x] Users API: advanced browsing #3085\r\n     * [x] User management settings screen part 2 - #2422  / TryGhost/Ghost-UI#21 (needs a new issue)\r\n     * [x] User edit/profile screen  - #2422 / TryGhost/Ghost-UI#33 (needs a new issue)\r\n     * [x] [Draft] Finish up the 003 data version #2600\r\n\r\n* Security:\r\n     * [x] Race condition fix #1834 \r\n     * [x] Transfer ownership #3087 \r\n\r\n* Permissions:\r\n     * [x] Owner permissions #3075\r\n     * [x] Additional permissions #2739\r\n     * [x] User API Permissions: Restrict based on role #3096 \r\n     * [x] User & Roles API: Who can invite what role #3083\r\n     * [x] UI Cleanup: Who can see what? #3086\r\n\r\n* Features:\r\n      * [x] Post Settings Menu: Author dropdown #3084\r\n      * [x] User email address hide publicly #2330 \r\n"
2976,'jgable',"[Ember.js] Signin / signup validation\nI am aware that at present there isn't a clear plan for how to implement validation. Once decided, we need to re-add validation to the signin and signup forms.\r\n\r\n@rjackson @darvelo Am I right in thinking you two have talked about validation a bit? Can you please document the discussion / link to the IRC chats in comments here so that we can move it forward? Thanks!"
2973,'halfdan','[Discussion] Possible App states\nWhile working on the Apps API it became clear that when deactivating/soft-deleting an app, all the belonging app_fields should be deactivated as well. This however brought up the question what app states there are and how an app can transition between those \r\n\r\n * Active\r\n * Inactive\r\n\r\nDo we just have a toggle between (Active->Inactive->Active->...) or is there a need for something like `installed`, `uninstalled`, `deleted`? Limiting the states to just `active` and `inactive` would help me a lot. A `deleted` status would be non-existent and only mean that a hard-delete has been performed (entries in apps, app_fields, app_settings deleted).'
2957,'darvelo','[Ember.js] Reimplement mobile editor\nFollowing on from #2426/#2895 we need to also make the editor work on mobile again.\r\n\r\nThe mobileCodeMirror shim needs porting across to Ember. For now it can load under the same conditions as it did previously, however there are known bugs with this (see #2570) that can be fixed at the same time if the person doing this has a bright idea.\r\n\r\nIf not - then it should simply load as a replacement editor if the current device is a touchscreen device.'
2956,'ErisDS','[Ember.js] Reimplement filestorage option for uploads\nThere is a config.js option called `fileStorage` which needs to be updated to work in the Ember admin.\r\n\r\nThe `fileStorage` option is a rough version of our plan to eventually allow different methods of storing files. At present, you can store files locally in the file system, or you can turn file storage off completely, which currently only applies to images.\r\n\r\nIn the event that `fileStorage` is set to `false`, the uploader dropzone in the editor, and on the settings pages, should show the URL screen by default, instead of the upload/drop screen, and should disable access to the upload/drop screen.\r\n\r\nThe value of `fileStorage` essentially needs to be prefetched data stored as an HTML data attribute or some such in order for this to work.'
2951,'darvelo',"Ember Editor Route can't find posts with low IDs\n## Issue Summary\r\n\r\nWhen you have a large enough number of posts to have them broken into multiple pages in the api, you are unable to go directly to `/ghost/ember/editor/1` as the first post is not returned in [this api call](https://github.com/TryGhost/Ghost/blob/master/core/client/routes/editor/edit.js#L23)\r\n\r\n## Repro\r\n\r\n1. Create enough posts to start paging (>15 I think)\r\n2. Enter `/ghost/ember/editor/1` in your browser and go\r\n3. Redirected to `/ghost/ember` as post 1 was not returned by the api :(\r\n\r\n## Specs\r\n\r\nWin 8, master `df8ba5f439062119922f98ab`"
2883,'darvelo','[Ember.js] Out-of-order loading of posts\nIf we allow a post to be loaded individually from the API via the EditorRoute or PostsPostRoute, during a refresh/back button, it should be in the correct spot of the posts list as more models are loaded during infinite scroll.'
2851,'ErisDS',"[Ember.js] Error Pages: 404 etc\nAt the moment, 404's render a blank page in Ember, this should be our nice error page as it was before.\r\n\r\nAlso, visiting `/ghost/ember/as;dkas;ldks;a` style URLS, redirects back to `/ghost/ember/:top_id` - if the id param in the URL isn't even close to being a valid ID, we should probably make this 404."
2850,'halfdan','[Ember.js] Save post notifications\nThe old admin has an extensive map of notification messages used when saving a post in various ways:\r\n\r\nhttps://github.com/TryGhost/Ghost/blob/master/core/clientold/views/editor-actions-widget.js#L31\r\n\r\nThis needs porting over to the ember admin. \r\n\r\nIt might be a good idea to make the save button a component so that this logic can live in the component itself, rather than in the post controller?'
2849,'jaswilli','[Ember.js] Delete posts\nNow that we have ember data, it should be possible to wire up the delete post action:\r\n\r\n- hitting yes in the modal should delete the post\r\n- success / error should result in a notification with the same text as in the old admin\r\n\r\n'
2847,'jaswilli','[Ember.js] Debug screen\nSo far, the export and import functions work correctly, however there are no notifications and the delete all and email functions do not work, therefore the following tasks need to be completed:\r\n\r\n- Make the delete all button work\r\n- Make the test email button work\r\n- Ensure there are notifications for all successes and failures, and that they are the same as they were in the old admin.'
2846,'jaswilli','[Ember.js] Settings:General tab needs to use real data\nThe Settings:General tab needs wiring up with real data:\r\n\r\n- it should fetch and store settings using the REST API\r\n- it should validate the settings, at least as well as the old admin, if not better\r\n- it should provide notifications on save or error the same as the old admin\r\n\r\n**Note:** the upload modal still requires finishing before we can complete every part of this tab.'
2845,'novaugust',"[Ember.js] Post Settings menu\nThe post settings menu needs work:\r\n\r\n- ~~change to use Ghost popover~~ done in #2840\r\n- ~~make it so it displays correctly with the arrow pointing in the right direction~~ done in #2840\r\n- it should be correctly populated with placeholders using the same logic as in the old admin\r\n- consider moving it into it's own component or rendering a separate view & controller as it has quite a lot of code relating to it and keeping it in the post controller is quite messy I think.\r\n- ensure that the notification messages are identical to what they were in the old admin"
2843,'javorszky',"[Ember.js] Forgotten password flow\nAt present there are screens and controllers for the forgotten password flow, but the process isn't working, and there is also work left to do such as validation and notifications.\r\n\r\nIt should be possible to complete the flow and have everything working 100% the same as before, except I'm not sure if it depends on #2822 ?"
2836,'javorszky','mailer module refactor\nAs #2742 painfully reminded us, the mailer module needs a boatload of refactor. The current implementation has circular dependency between mailer and the api.\r\n\r\nThe module should only concern itself with sending mail as per given data, and returning a status depending on whether sending it was successful or not. API calls and settings readings should be done earlier.\r\n\r\n@ErisDS, can you assign this to me, please? I have a few ideas of where to move stuff*.\r\n\r\n*subject to all other ideas, obviously'
2833,'halfdan',"Cache invalidation for post update\nRecently, we did #2632 - the idea being that the `X-Cache-Invalidate` header should only be sent if a post is published, because draft posts wouldn't be cached.\r\n\r\nThere was a complexity, in that we also had to ensure we captured the change from `published` to `draft` so that if a post became unpublished the cache would be cleared and it would disappear properly.\r\n\r\nIt has just occurred to me, that when we were implementing and testing this, we got so hung up one capturing status change, that we **only** set the headers if the status has changed and not when a post is updated.\r\n\r\nThe `X-Cache-Invalidate` header should be sent if a published post is in anyway updated, as well as if the status changes in either direction. The only time it should not be sent is if a draft post, which was already a draft post is updated and the update does not include setting the status to published."
2831,'jaswilli','[Ember.js] Fix slug generation for Ember admin\nSlug generation on the ember admin is currently throwing a tonne of 404s, it needs updating in the same vein as #2826 :+1: '
2822,'sebgie',"Cleanup & Prepare the User API for Multi-User\nSee https://github.com/TryGhost/Ghost/issues/2601#issuecomment-40710901 for reference\r\n\r\nThere are several changes that need to be made to the User API:\r\n\r\n* Add a destroy method\r\n* Move changePassword to be part of `user.edit` (if old and new password are provided, change the password)\r\n* Move resetPassword to be part of `user.edit` - if new password and token are provided, reset the password\r\n* Move internally used functions `validateToken`, `check` and `doesUserExist` to be private\r\n* Change generateToken to be `POST /ghost/api/v0.1/users/token` with the body set to `{token: [{email: user@example.com}]}` (this will move onto a new 'authentication' resource when we start looking at oAuth)\r\n\r\nThere will be further issues to change the behaviour of add / register to work for multiuser."
2785,'jaswilli','[Ember.js] Correctly handle post loading / display\nIn the current Ember admin after signing in to `/ghost/ember` you are redirected to `/ghost/ember/0/`. When refreshing the page with CMD+R it hangs in a `Loading...` screen, presumably because a request to `/ghost/api/v0.1/posts/0/` returned a 404.\r\n\r\n![screen shot 2014-05-21 at 11 15 57](https://cloud.githubusercontent.com/assets/176576/3038076/a5ceeab2-e0c8-11e3-93d7-1f846d64054f.png)\r\n\r\nIn addition to the above, when selecting a post that exists in the database (api requests returns properly) and then refreshing the page, the post will not get highlighted on the post listing sidebar.\r\n\r\n![ember-admin](https://cloud.githubusercontent.com/assets/176576/3038111/1130f16a-e0c9-11e3-9b0e-69aaff636d63.gif)\r\n\r\n'
2781,'ErisDS',"image upload (feedback?) stops when editing markdown\nThere are lots of image upload bugs, so sorry if dupe!\r\n\r\nTested Firefox 30, mac\r\n\r\nWhen editing the markdown as an image upload is progressing, all visual indication of the upload happening goes away and the upload never populates the editor.\r\n(haven't check to see if the actual image upload stops - but whether it does or not, the UI failure makes you have to upload it again)"
2776,'halfdan','Cookie Expires test randomly failing\nHad a test for the 12hour session cookie randomly failing earlier on: https://travis-ci.org/halfdan/Ghost/jobs/25140028\r\n\r\nWill provide a PR to fix that.'
2775,'halfdan','Notifications API: Request format & cleanup\nIn my PR #2732 [WIP] Cleanup & Refactor API option names, I deliberately left out notifications because they appeared to not have the correct request format just yet.\r\n\r\nIt looked to me like they could use a little look over to bring them up to date with the cleanup / consistency changes made. Related to #2739 the notifications API also needs canThis permissions adding to it.'
2759,'sebgie',"[Ember.js] Authentication with OAuth\nIn order to entirely separate our Ember admin UI from the server side, we're going to need to build a slightly different authentication mechanism.\r\n\r\nGiven that we want to add an OAuth-provider to Ghost in order to allow OAuth for the API, it seems to make sense to also use OAuth for the main user login.\r\n\r\nThere is a library called [ember-simple-auth](https://github.com/simplabs/ember-simple-auth) which adds support for doing all kinds of authentication, including oauth. By including this library, I think we open up a lot of potential possibilities for people to extend the Ghost login with different oauth or other authentication providers which is something that has been asked about quite a bit.\r\n\r\nNot sure if this is the best library, it was just the first I've come across, but I thought I'd put this out there as it's related to #2413 and we're going to want to look at putting authentication into the Ember admin pretty soon.\r\n\r\n"
2752,'novaugust','[Ember.js] Keyboard shortcuts\nHave a good read of #1463!\r\n\r\nThe Ghost app has a number of different types of keyboard shortcuts:\r\n\r\n- Markdown shortcuts, like `ctrl + shift + i` for the image upload \r\n- Editor shortcuts like `ctrl + s` to save\r\n- component shortcuts like `esc` to clear a notification or the tag suggestion bubble\r\n- Navigation shortcuts like up and down arrows to move through the tag suggestion bubble\r\n\r\nThese are just the start of what we want to do. Ideally we want to have a whole set of action shortcuts for navigating around the admin like press `n` when not in a content editable field to make a new post.\r\n\r\nIt would also be good to have `esc` cause all modals, popovers, notifications, etc to close.\r\n\r\nWe also need to overhaul the existing shortcuts to make them not clash with foreign characters in various locales, see #1463 for the epic which links to most of the existing bugs.\r\n\r\nBecause we want to have to many different types of shortcut, we need to have a holistic approach to implementing them. We need to decide on if we want to use a tool or library to help us, if there is a truly "Ember" way to do this, and what it ought to look like - do the markdown shortcuts need to live elsewhere to the navigation ones, etc?\r\n\r\nSee this [comment](https://github.com/TryGhost/Ghost/issues/2752#issuecomment-45213684) for details of what the outcome from this issue should be.'
2748,'halfdan',"[Ember.js] Content screen: Featured posts\nOn the content screen there is a star button that is meant to allow you to mark a post as featured: \r\n\r\n![featured](http://puu.sh/8LbdT.png)\r\n\r\nCurrently the button exists on the ember admin, but it doesn't work. Additionally, items marked as featured don't get the star in the left hand list. This should automatically update when the featured star gets clicked.\r\n\r\n![ember featured](http://puu.sh/8Lbba.png)\r\n"
2742,'javorszky','Mail API: Implement a way to change the transport, and add test\nThis is closely tied to #2650 and #2715, where @sebgie had a great idea, so PR incoming shortly hopefully.'
2739,'ErisDS','Additional permissions\nRelated to #2600 and #2264:\r\n\r\n003 needs to contain some additional permissions:\r\n- for mail (send, send test)\r\n- for tags (adding, editing, deleting)\r\n- for notifications (browsing, adding, deleting, and possibly fine grained reading of individual instances)\r\n\r\nI suggest the following:\r\n\r\n# Tag\r\n\r\nJSON API                 | Admin | Editor | Author           | NoAuth\r\n-------------------------|-------|--------|------------------|------------------------\r\ntag.browse             | y     | y      | y                | y\r\ntag.read                | y     | y      | y                | y\r\ntag.edit                | y     | y      |  | \r\ntag.add                | y     | y      |  y                | \r\ntag.delete          | y     | y      |                  | \r\n\r\n\r\n# Notification\r\n\r\nJSON API                 | Admin | Editor | Author           | NoAuth\r\n-------------------------|-------|--------|------------------|------------------------\r\nnotification.browse             | y       |          |                      | \r\nnotification.add*                 | y       |          |                      | \r\nnotification.delete              | y       |          |                       | \r\n\r\n*add should probably be possible as an internal thing\r\n\r\n# Mail\r\n\r\nJSON API                 | Admin | Editor | Author           | NoAuth\r\n-------------------------|-------|--------|------------------|------------------------\r\nmail.send                | y      |          |                   | \r\nmail.sendTest         | y      |          |                    | '
2738,'sebgie',"'Permissable' doesn't take apps into account\nAs discussed here: https://github.com/TryGhost/Ghost/pull/2732#issuecomment-42937859\r\nAnd on IRC: http://107.20.237.151:8081/logs/%23ghost/20140513#am102634\r\n\r\nPost.permissable & User.permissable don't take into account app permissions. We may also need a Settings.permissable?\r\n\r\nIt may also be worth considering how we can deal with the special noAuth rules = where published posts and blog settings are available to all etc as defined #2264 so that this can be part of canThis() rather than a workaround in the API."
2690,'sebgie','Add distinct error classes\nThis issue is an improvement to our error handling suggested by @appleYaks in https://github.com/TryGhost/Ghost/issues/2643#issuecomment-42112831. We are using the following errors with the corresponding error code in `api/index.js`:\r\n\r\n- BadRequest: 400\r\n- Unauthorized: 401\r\n- NoPermission: 403\r\n- NotFound: 404\r\n- RequestEntityTooLarge: 413\r\n- ValidationError: 422\r\n- EmailError: 500\r\n- InternalServerError: 500\r\n\r\nAll existing API errors should be replaced by an error class that holds the corresponding error code. Internal API requests are expected to deal with the error object returned and `api.requestHandler()` has to convert the object into a valid JSON response.'
2675,'ErisDS','Fenced code blocks should use "language-*" classes\nHi,\r\n\r\ncurrently fenced code blocks just translate the language (if given) directly into the class:\r\n\r\n    ```javascript\r\n    content\r\n    ```\r\n\r\nproduces:\r\n\r\n    <pre><code class="javascript">content</code></pre>\r\n\r\n[According to the HMTL5 spec](http://www.w3.org/TR/html5/text-level-semantics.html#the-code-element), the recommended way to markup code with a "language-" prefixed class:\r\n\r\n    <pre><code class="language-javascript">content</code></pre>\r\n\r\n\r\nI think Ghost should follow the spec here.'
2660,'sebgie','Add option to disable login limiter for testing env\nOur phantom.js + casper.js functional tests are quite slow, and the build takes a while.\r\n\r\nOne optimisation we could make is to disable the login limiter so that we can run those tests without a 2 second pause to prevent triggering the login limiter.\r\n\r\nWe would however still need a way to verify that the login limiter works.'
2650,'javorszky',"Mail API: Move to primary doc format + status messages\nIn the same vein as #2593, we need to update the Mail API to use a JSON format for requests and responses that matches with the other objects:\r\n\r\n```\r\n{\r\n    mail: [{...},{...}]\r\n}\r\n```\r\n\r\nI believe that when requesting an email to be sent the format should look something like:\r\n\r\n```\r\n{\r\n    mail: [{\r\n        message: {\r\n            to: ...,\r\n            subject: ...,\r\n            ...\r\n        },\r\n        options: { ... }\r\n    }, {...}]\r\n}\r\n```\r\n\r\nWhere `message` contains the details of the email to be sent, and `options` isn't used at the moment, but in the future I imagine it may contain things like schedule info.\r\n\r\nThe response back from the API will similarly respond with something along the lines of:\r\n\r\n```\r\n{\r\n    mail: [{\r\n        message: {\r\n            to: ...,\r\n            subject: ...,\r\n            ...\r\n        },\r\n        status: { ... }\r\n    }, {...}]\r\n}\r\n```\r\n\r\nWhere status contains information about the status of message sending - was it scheduled/queued, do we know it sent successfully, or did we send it without knowing the outcome etc?\r\n"
2643,'sebgie','Error message responses\nDuring yesterday\'s [public meeting](http://dev.ghost.org/public-dev-meeting-22nd-apr/) we discussed the need for a unified error response format.\r\n\r\nI think we have determined that our key requirements are: \r\n\r\n* to be able to return multiple errors \r\n* to be able to link an error to a particular property on an object (i.e. validation errors)\r\n* to be able to return a sane and consistent response from both the internal and HTTP calls, preferably without duplicating status codes in the response object\r\n\r\nThe solution suggested was something along the lines of:\r\n\r\n```\r\n{ \r\n    errors: [\r\n    {\r\n        "message":"Maximum length of 150 exceeded.",\r\n        "property":"title", \r\n        "type":"ValidationError"\r\n    },\r\n    {...}\r\n    ]\r\n}\r\n```\r\n\r\nWhere message is the description of the problem (may or may not be shown to the user), property indicate which property on the object the error relates to if there is one, and type is a human-readable name for the error which would map to an HTTP status code.\r\n\r\nSome questions / concerns I have:\r\n\r\n**Message:**\r\nSome formats such as the [http_problem](http://www.mnot.net/blog/2013/05/15/http_problem) or [collection+JSON])http://amundsen.com/media-types/collection/format/#objects-error) format define both a title and a message/detail field. When logging errors to the console in Ghost we try to provide an error message, a context message and a help message. This makes sense on the console where there is no other visual context to a message, and doesn\'t really make sense in the UI where a simple message with visual context is probably more helpful. However it does beg the question, what should the error message \'be\', does it need one or two parts and should we expect it to be shown directly to the user?\r\n\r\nI think that in general we should consider that these messages are being passed between different parts of an application, regardless of whether they are sent via HTTP (to the Ember client) or internally (to some server side code or to an App) and that the application will try to do something useful with the message, such as display it in context to the user, change it for a user-friendly version, translate it, or if it doesn\'t know what to do, display it directly. I think that one message should be enough, no need for a title?\r\n\r\n**Property:**\r\nThis relates directly to the object / endpoint in question, so if the error is in a response from the post API, the property is *probably* a property of the post model.\r\n\r\nGiven the example of `title` should we return simply `title` or `posts.title` or even `posts[0].title` ?? The need to consider this becomes clearer if you think about returning a validation error for author name? Should it be `name`, `author.name`, `posts.author.name`?\r\n\r\n**Type:** \r\nI really like the idea of using a type -> status code map. There can be multiple error types which map to a single code, and it would even be possible to introduce subclassing so we could have a generic `ServerError` (500) and apps could return a `MyAppServerError` or `MyApp-ServerError` or `ServerError.MyApp` or something similar - any completely unknown type should map to 500 I think?\r\n\r\nAlso up for debate is whether it should be a simple human-readable string like ValidationError, ServerError, etc, or whether it should be returned in the form of a URI like docs.ghost.org/api/errors#ServerError or https://github.com/TryGhost/Ghost/wiki/API/Errors#ServerError?\r\n\r\nI think having a URL would be nice, but a lot of extra work to maintain, perhaps we could add this later as a separate field?\r\n\r\nHere are some examples of what it might end up looking like\r\n```\r\n{ \r\n    settings: [{...}],\r\n    errors: [{\r\n        "message":"Maximum length of 150 exceeded for key \'title\'.",\r\n        "property":"settings[5].value", \r\n        "type":"ValidationError"\r\n    },\r\n    {\r\n        "message":"Invalid email for key \'email\'",\r\n        "property":"settings[10].value", \r\n        "type":"ValidationError"\r\n    }]\r\n}\r\n```\r\n\r\n```\r\n{ \r\n    db: [{...}],\r\n    errors: [{\r\n        "message": "Unsupported Media Type: *.bmp",\r\n        "type":"UnsupportedMediaError"\r\n    }]\r\n}\r\n```\r\n\r\n\r\n        '
2638,'sebgie','Boolean handling\nAs it is implemented now all boolean values are converted to integers to be consistent with the values stored in sqlite. Since we have `schema.js` we know what type the values should be and we could change the values to real booleans now.\r\n\r\nThe purpose of this change is to have boolean datatypes for API responses without doing another conversion in `toJSON()`.\r\n\r\nThis issue would need updates to the `fixBools()` method, updates to tests and probably changes to validations.'
2637,'halfdan','Notifications API: Proper endpoints for persistent notifications\nFor full details of how notifications are intended to work, please see #1454\r\n\r\n---\r\n\r\nThe API for persistent notifications needs updating and bringing into line with the rest of the API. Although this only stores information in-memory, it should still operate as if this were not the case.\r\n\r\nThe notifications API has 4 functions available:\r\n\r\n* `add`\r\n* `browse`\r\n* `destroy`\r\n* `destroyAll`\r\n\r\nThere is no need, as far as I can tell, for edit or read operations.\r\n\r\n`destroyAll` is only used in tests, and does not need to be made available via HTTP.\r\n\r\nThe `add`, `browse` and `destroy` methods should be made available via HTTP routes:\r\n\r\nPOST `/ghost/api/v0.1/notifications/` \r\nGET `/ghost/api/v0.1/notifications/` \r\nDEL `/ghost/api/v0.1/notifications/1/` \r\n\r\nAs mentioned by @sebgie in https://github.com/TryGhost/Ghost/issues/1454#issuecomment-31344888 below, the `add` method should not require an ID to be sent as it does now, it should only send the data to be stored, and the ID and any other calculated or default properties should be stored with that data. The creation should return the object with an ID as well as having a location header as per #2635 as this is the correct route for DEL operations, even though there is no GET.\r\n\r\nEach notification should have:\r\n* a concept of an id \r\n* message to display\r\n* type (success, error, warn, info)\r\n* status is always persistent\r\n* whether it can be dismissed/closed/removed, true by default\r\n* location it should appear - bottom or top\r\n\r\nA DELETE request to a non-dismissable/closable notification should fail for the time being.\r\n\r\nThe response from these API calls should conform with the new JSON-API standard\r\n\r\n```\r\n{ \r\n    notifications: [{...}, {...}]\r\n}\r\n```\r\n'
2620,'sebgie','Post API: Returning additional objects\nThis issue is a result of the API format discussion in #2362, and is part of a larger project to move our API towards the JSON-API format which is documented in the Epic: #2124. This is one step in the journey towards achieving the Post JSON object format laid out in #2347, and is related to #2604.\r\n\r\n---\r\n\r\nThe posts API is currently the most functional API. It is the only API which handles proper browse requests with pagination and other options. This is logical and will continue to be built upon. \r\nOne of the extra features in the post browse request, is the ability to return all the posts which have a particular tag. This will soon be expanded to also allow you to request all the posts which have a particular user. When making these requests, the object queried for (tag or user) is also included in the response.\r\n\r\nCurrently this object is returned as a top level property called `aspect`:\r\n\r\n```\r\n{\r\n    posts: [{...}, {...}],\r\n    aspect: {\r\n        tag: {...}\r\n    }, \r\n    limit: #,\r\n    ...\r\n}\r\n```\r\n\r\nWe want to move this `aspect` object into the `meta` object:\r\n\r\n```\r\n{\r\n    posts: [{...}, {...}],\r\n    meta: {\r\n        pagination: {...},\r\n        aspect: {...}\r\n    }\r\n}\r\n```\r\n\r\nWe also want to consider whether `aspect` is the right name for this object, or if there is a better name for it... any suggestions?'
2610,'ErisDS',"[Discussion] Options vs Args for API methods\nMost methods across the API take at least one argument, and usually just the one. There is vast inconsistency between how these arguments are named.\r\n\r\nThe argument, in the majority of cases, is a big smooshed together JS object containing all of the data that may have been sent to the API. This is because much of the time, the API is requested over HTTP in which case the [requestHandler](https://github.com/TryGhost/Ghost/blob/master/core/server/api/index.js#L46) creates the options argument by merging together the request body, any files, any query parameters and any url parameters. \r\n\r\nIn many cases this is treated like it is just the request body, containing an object to add or edit. In this case the argument is often named after the type of object and suffixed with `Data`, so in the user API the argument is called `userData` and in the post API it is called `postData`.\r\n\r\nIn other cases, the argument is called `options` or `args`.\r\n\r\nSome API methods, particularly some of the less RESTful user methods for managing passwords, take multiple arguments.\r\n\r\nThe end goal here is to simplify what arguments the API takes, to clarify what they are for each method, and to make sure they are consistently named and used regardless of whether the method gets called via a route or internally.\r\n\r\nThere are a couple of different things we could do here. \r\n\r\nOne possibility would be to specify that API methods only ever take one argument, call it `options` and document what options **must** and **may** contain for each method.\r\n\r\nA different approach would be to consider the object separately to any possible options. Change the `requestHandler` to keep the `req.body` separate, merge together `req.query` and `req.params` and do something clear and consistent with `req.files`. Then the method signature for each method would be `method(object, options)`.\r\n\r\nPerhaps the best option is a hybrid approach where each method still only takes a single argument (let's call it `request`) and this contains structures for the main object and any options. The newly updated post API's `edit` method takes an argument called `postData` which looks like:\r\n\r\n```\r\n{ \r\n   posts: [ \r\n        {\r\n            status: 'draft',\r\n            title: 'Testing Titles\r\n            ...,\r\n            author: [Object],\r\n            fields: []\r\n        }\r\n   ],\r\n   id: '143' \r\n}\r\n```\r\n\r\nRather than leaving id + any other url params, query params or files out in the cold, lets wrap them in a `meta` object the same as we would with a response?\r\n\r\n```\r\n{ \r\n   posts: [{...}],\r\n   meta: {\r\n       id: '143' \r\n   }\r\n}\r\n```\r\n\r\nOr for an example with query params:\r\n\r\n```\r\n{ \r\n   settings: [{...}],\r\n   meta: {\r\n       type: 'blog,theme,app' \r\n   }\r\n}\r\n```\r\n\r\nI'm not sure if the meta object would be confusing or not? So putting this out for discussion before we do any work.\r\n\r\nRegardless of the decision made, the output from this issue should be:\r\n\r\n* All arguments to all API methods named the same\r\n* Clear documentation on what **must** and **may** appear in the arguments for each method"
2609,'sebgie','Post API: Explicit includes\nThis issue is a result of the API format discussion in #2362, and is part of a larger project to move our API towards the JSON-API format which is documented in the Epic: #2124. This is one step in the journey towards achieving the User JSON object format laid out in #2347.\r\n\r\n---\r\n\r\nAt present, we default to including certain data with a post, including `tags`, `fields` and the `author`.\r\n\r\nThese objects should only be included if they are explicitly requested using `?include`. \r\n\r\nThe API should be updated to accept the `include` parameter, and to only return these objects if they were requested. This should also involve passing the information down to the model layer, so that the additional `withRelated` queries are only done if the API needs that data.\r\n\r\nAdditionally, it should be possible to optionally include any of: tags, fields, author, created_by, updated_by or published_by.\r\n\r\nThis change will require requests to the Post API to be updated in various places, ensuring to request only the additional objects which are needed at any given point.'
2606,'jgable','Settings API: move to primary document format\nThis issue is a result of the API format discussion in #2362, and is part of a larger project to move our API towards the JSON-API format which is documented in the Epic: #2124. This is one step in the journey towards achieving the Settings JSON object format laid out in #2350. \r\n\r\n---\r\n\r\nThe equivalent task for Posts (#2580) has been done with the PR #2596, however the task for settings is SIGNIFICANTLY different.\r\n\r\nAt present, the settings API responses are completely different to all of our other APIs. The response when requesting a single setting looks like:\r\n\r\n```\r\n{\r\n    key: "title",\r\n    value: "Ghost"\r\n}\r\n```\r\n\r\nAnd when requesting a collection, you get a response like:\r\n\r\n```\r\n{\r\n    title: "Ghost",\r\n    description: "Just a blogging platform.",\r\n    email: "john.blogs@myblog.com"\r\n}\r\n```\r\n\r\nThe aim of this task is to make these responses consistent with all of our other JSON-API-esque responses. That is, return the full object (with anything sensitive omitted), with a plural-form named key:\r\n\r\n```\r\n{\r\n    settings: [{...}, {...}]\r\n}\r\n```\r\n\r\nIn terms of the API itself, this is going to involve ripping out a LOT of code, but the settings API is the most heavily used, and so will require a lot of work updating the various places where it is called. \r\n\r\nThe settings API is also the only are which has an in-memory cache, which should also be transformed to work with the new format.\r\n\r\nThe request format should also be changed, meaning the client side models and code for saving settings will need adjusting.\r\n\r\nThe weird hacks for adding `availableThemes` and `availableApps` can remain for the time being, until the work on the individual `Apps` and `Themes` APIs are completed.\r\n\r\nFinally, all the tests should be updated, and coverage should be added where it is missing.\r\n\r\nIt would also be appreciated if you would add docs to this (#2125) as you go. Thanks :+1: '
2604,'sebgie',"Post API: pagination -> meta\nThis issue is a result of the API format discussion in #2362, and is part of a larger project to move our API towards the JSON-API format which is documented in the Epic: #2124. This is one step in the journey towards achieving the Post JSON object format laid out in #2347.\r\n\r\n---\r\n\r\nCurrently, all of our pagination data is included as top-level items on a response:\r\n\r\n```\r\n{\r\n    posts: [{...}, {...}],\r\n    page: 1,\r\n    limit: 15,\r\n    pages: 2,\r\n    total: 33\r\n}\r\n```\r\n\r\nAs part of our move towards JSON-API, these items should all be included in a `meta` object:\r\n\r\n```\r\n{\r\n    posts: [{...}, {...}],\r\n    meta: {\r\n        pagination: {\r\n            page: 1,\r\n            limit: 15,\r\n            pages: 2,\r\n            total: 33\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThere are some additional complexities to this issue, in order to ensure that this response remains consistent throughout the Ghost application and to reduce / remove the need for the post-processing which currently exists in [controllers/frontend.js](https://github.com/TryGhost/Ghost/blob/9c1fe62173d0be5fc3af1e35164ba5a7554dcfbb/core/server/controllers/frontend.js#L23).\r\n\r\nThe final `pagination` object expected by themes looks like:\r\n\r\n```\r\npagination: {\r\n    page: #, // The current page number\r\n    prev: #, // The previous page number, not present if there is no previous page\r\n    next: #, // The next page number, not present if there is no next page\r\n    limit: #, // The number of items per page\r\n    total: #, // The total number of items available in the complete set\r\n    pages: # // The total number of pages available in the complete set\r\n}\r\n```\r\n\r\nAll of these properties, some of which are computed, are provided to the theme because themes can't do the math. \r\n\r\nThese items need to be returned by the API instead of calculated afterwards, so that all apps, themes and internal requests get the same data.\r\n\r\nThe `meta.pagination` object can then be passed directly to the theme. For the time being it should be passed as its old name `pagination`."
2600,'ErisDS',"Finish up the 003 data version\nThis issue serves as a note-to-self that we will need to have issues to clean up / wrap up / finish up the import, export, migrate etc code for 003 before we do a release.\r\n\r\nSome tasks that need doing:\r\n\r\n- look for and add any missing fields we know we'll need soon (tag management indicates cover image for tag etc)\r\n- ensure we can upgrade from all [versions](https://github.com/TryGhost/Ghost/wiki/Version-Info)\r\n- ~~ensure we can import from all [versions](https://github.com/TryGhost/Ghost/wiki/Version-Info)~~ #3285\r\n- ~~move the import logic so that it belongs to the right version.~~ #3285\r\n- ~~make sure the exporter behaves correctly~~ #3284\r\n- ~~test on MySQL as well as SQLite3 (and add blank MySQL dump files to https://github.com/TryGhost/Ghost-Config/tree/master/ghost-versions)~~ #3286"
2593,'ErisDS','User API: move to primary document format\nThis issue is a result of the API format discussion in #2362, and is part of a larger project to move our API towards the JSON-API format which is documented in the Epic: #2124. This is one step in the journey towards achieving the User JSON object format laid out in #2349. \r\n\r\n---\r\n\r\nThe equivalent task for Posts (#2580) has been done with the PR #2596 and should serve as an example of how to do this for Users.\r\n\r\nThe aim of this issue is to change the format of the user object in all requests and responses so that both the single user and user collection has the user object being contained in an array with the key `users`:\r\n\r\n```\r\n{\r\n    users: [{...}]\r\n}\r\n```\r\n\r\nThis will involve changing the request format, changing the response format, updating all of the places in which the response is used, updating the tests and adding coverage where it is missing.'
2592,'halfdan','Add API endpoints for Themes\nThe following API end points are intended to manage Themes using the GUI:\r\n\r\n- `GET /ghost/api/v0.1/themes/`: get a list of all available themes\r\n- `PUT /ghost/api/v0.1/themes/<themes-name>`: update which theme is the current active theme \r\n\r\nAt present, setting the active theme means updating the setting in the `settings` table. In future, this may call something to actually switch the active theme, rather than doing this passively on the next request.'
2580,'sebgie','Post API: move to primary document format\nThis issue is a result of #2362, and is part of a larger project to move our API towards the JSON-API format which is documented in #2124. This is one step in the journey towards achieving the format laid out in #2347\r\n\r\nCurrent response format:\r\n\r\nSingle Post:\r\n\r\n```\r\n{\r\n    id: 1,\r\n    uuid: "f1e6bf27-fdd5-47a1-85a7-90eb2d05a0e5",\r\n   ...\r\n}\r\n```\r\n\r\nPost Collection:\r\n\r\n```\r\n{\r\n    posts: [{...}, {...}],\r\n    page: 1,\r\n    limit: 15,\r\n    pages: 2,\r\n    total: 33\r\n}\r\n```\r\n\r\nThe aim of this issue is to change this so that the single post response matches the response from the collection, with the post object being contained in an array with the key `posts`:\r\n\r\n```\r\n{\r\n    posts: [{...}]\r\n}\r\n```\r\n\r\nThis will involve changing the response format, changing the request format, updating all of the places in which the response is used, updating the tests and adding coverage where it is missing.'
2570,'ErisDS',"Bugs with the touchscreen editor.\nThis is one of those things where I don't really have enough information to raise the issue properly. Nonetheless I want to track the issue to ensure it doesn't get lost.\r\n\r\nThere seem to be two vaguely separate issues with relation to  touchscreen computers - laptops, ultrabooks, large-screened devices with touchscreens.\r\n\r\nFirstly, some people are reporting that the editor doesn't work for them in Chrome on Windows on these sorts of devices.\r\n\r\nSecondly, regardless of whether the editor works or not, these devices have mouse and keyboard as their primary inputs, so the touchscreen editor is not the right thing for them.\r\n"
2544,'sebgie',"New toJSON method to return JSON according to the JSONAPI standard\nAs defined in the following issues, we want to reformat the JSON response from our API to match the standard laid out by [JSONAPI](http://jsonapi.org/) (with the exception of keeping objects inline).\r\n\r\n* Posts: #2347 \r\n* Tags #2348 \r\n* Users #2349 \r\n* Settings #2350 \r\n\r\nThe JSON response provided by our API is currently a [slightly modified](https://github.com/TryGhost/Ghost/blob/master/core/server/models/base.js#L94) version of the JSON format provided by [bookshelf](http://bookshelfjs.org/docs/dialects/base/model.html) when calling its `toJSON` method.\r\n\r\nOnce we have duplicated the old api so that the admin UI remains stable on master (#2543), we can then create a new version of the `toJSON` method i.e. the `toJSONAPIJSON` method, that will be used by the new API to provide JSON objects in the JSONAPI format.\r\n\r\nThis will mean placing relations into `link` objects instead of inlining them as the existing API does. It will also mean moving additional properties such as pagination data into meta objects.\r\n\r\nThis issue covers the creation of a new base method for producing JSON from bookshelf objects and the associated unit tests. It doesn't cover ensuring that it gets used in the right places (which would require functional/integration tests). That will be done in other issues (will add links once they are created).\r\n"
2543,'sebgie','Clone the current api to legacy-api & use in the admin on master\nAs a result of #2362 we have decided to take the API cleanup work a step farther and refactor our API to match the [JSONAPI](http://jsonapi.org/) standard as closely as we can.\r\n\r\nIn order to do this without breaking the existing admin (which is currently being rebuilt on the ember branch), we want to clone the existing api and call it the `legacy-api`. The duplicate version which will then be the `api` will then be refactored in line with the spec. The current admin UI will be switched over to use the `legacy-api` for the time being.\r\n\r\nThe new version will be regularly merged into the ember branch so that it can be used to build the ember admin UI.'
2507,'ErisDS',"Ghost won't start if there's no apps directory\nWhen trying to upgrade from old versions of Ghost as per the upgrade instructions, I try to start Ghost, and it quits without an error.\r\n\r\nIt seems that this is due to the fact that I have a plugins dir, rather than an apps dir.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Install an old version of Ghost\r\n2. Follow the upgrade instructions \r\n  - delete core\r\n  - replace core + root files\r\n  - replace old casper with new casper\r\n  - run `npm install --production` \r\n3. Start ghost\r\n4. Ghost dies.\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: 0.4.2-rc2\r\n"
2499,'halfdan',"Bug: pg random test failures\nStill seeing test failures for pg builds, some were fixed in #2075 \r\n\r\nBut I'm seeing the following:\r\n\r\nhttps://gist.github.com/ErisDS/51b967755c732b1a074e\r\n"
2493,'halfdan','Import leaves file in root level of Ghost directory\nSummary of Issue \r\n------------------------------- \r\n\r\nPerforming an import in the /ghost/debug/ tools leaves a json file in the root directory of Ghost.\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n* go to /ghost/debug/\r\n* click export\r\n* click choose file for import and select the file you just exported\r\n* click Import\r\n* after import is complete look in the root level of your Ghost directory\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nAfter performing an import I have a file called "1395636690831c2d24c907828416a25ef41902a4039cb" with the contents of my GhostData.json that was exported. \r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.9.2\r\nServer OS: Amazon Linux AMI 2013.09.2\r\nNode Version: v0.10.26\r\nGhost Build Number: 0.4.2-rc1\r\nGhost Database: MySQL\r\nBrowser: Chrome 33.0.1750.152'
2492,'sebgie','Using Delete button on debug tools does not delete tags\nSummary of Issue \r\n------------------------------- \r\n\r\nOn the /ghost/debug/ page the Delete button says that it will "Delete all posts and tags from the database" but it does seem to be deleting tags.\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n* create post with tags\r\n* go to /ghost/debug/ and click Delete button\r\n* go to /ghost/ and click New Post\r\n* in the tag area start to type in tag that you used in original post\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nWhen typing in tag I am receiving the tag suggestion box.\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.9.2\r\nServer OS: Amazon Linux AMI 2013.09.2\r\nNode Version: v0.10.26\r\nGhost Build Number: 0.4.2-rc1\r\nGhost Database: MySQL\r\nBrowser: Chrome 33.0.1750.152'
2491,'PaulAdamDavis','Tag display issues\nSummary of Issue \r\n------------------------------- \r\n\r\nWhen a post has a large number of tags they will display weird in the lower right hand corner\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n* create a post\r\n* add tags and continue to do so till the tags stretch all the way to the right hand side \r\n\r\nObserved result \r\n------------------------------- \r\n\r\n* the last tag that is submitted has the rounded corners cut off\r\n* the first few characters of the tag being typed in are grey instead of white\r\n \r\n![screen shot 2014-03-23 at 9 08 18 pm](https://f.cloud.github.com/assets/4643742/2495912/1f04b110-b30a-11e3-8347-1297b8a60313.png)\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.9.2\r\nServer OS: Amazon Linux AMI 2013.09.2\r\nNode Version: v0.10.26\r\nGhost Build Number: 0.4.2-rc1\r\nGhost Database: MySQL\r\nBrowser: Chrome 33.0.1750.152'
2434,'jgable',"canThis handles no user and internal user\nIt would be great if canThis would reject if no user is present? That would remove the need to check for a user everytime canThis is called (https://github.com/TryGhost/Ghost/blob/master/core/server/api/posts.js#L64).\r\n\r\nAs we'll probably need to do internal operations that should have all permissions it would be sensible to add a special case for internal operations as well. I think of something like calling `canThis` with the user set to `internal` will grant all permissions?\r\n\r\n`canThis('internal').edit.post(postData.id)`"
2426,'ErisDS',"[Ember.js] Editor: Markdown Entry + Preview Mirroring \nThis is an advanced task.  This is focusing primarily on text input on the left pane and mirroring its preview on the right pane\r\n\r\nThere is currently a naive implementation of this in place, however it needs to be brought into parity with what currently exits in production.\r\n\r\nWhoever takes this on please keep in touch with how it's going as this is the core of Ghost.\r\n\r\n**Please note**\r\n* for all Ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress.\r\n* If you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find a resolution.  Usually these blocking issues are also blockers on other issues.\r\n* Right now the aim is to reach parity with production."
2425,'hswolff','[Ember.js] Editor Screen: Implement the Tag Editor Component\nThis is specifically the component that sits at the bottom of the editor window which handles creating and modifying tags for that post.\r\n\r\n![tag editor](http://puu.sh/8L1CI.png)\r\n\r\nThis task is to only create that individual unit of functionality, responding properly to user behavior and persisting all pertinent behavior that exists in the current production version.\r\n\r\nCurrent production version of the widget: https://github.com/TryGhost/Ghost/blob/ember/core/clientold/views/editor-tag-widget.js\r\n\r\nImplement as is best fitting: Ember View or Component or whatever.  Preferably something modular. \r\n\r\n**Please note**\r\n* for all Ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress.\r\n* If you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find a resolution.  Usually these blocking issues are also blockers on other issues.\r\n* Right now the aim is to reach parity with production.\r\n\r\n**Updated by @ErisDS** - Added a screenshot above\r\n\r\nThe tag editor allows user to add a tag to a blog post. The tag can/should be completed by typing a comma, hitting enter, or on blur. Tags can contain any character with the exception of a comma.\r\n\r\nAs the user types, the tag editor should display a list of suggestions of possible tags. The up / down arrow keys can be used to navigate the list, and enter selects. \r\n\r\nClicking the cross removes the tag.'
2422,'hswolff','[Ember.js] Settings: User Tab\nThis currently exists in the ember branch in a non-functional manner.\r\n\r\nThis task is to port over the existing behavior into Ember so that the screen behaves as it currently does in production.\r\n\r\n**Please note**\r\n* for all Ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress.\r\n* If you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find a resolution.  Usually these blocking issues are also blockers on other issues.\r\n* Right now the aim is to reach parity with production.\r\n\r\n### Tasks\r\n* Implement Controller, porting over logic from existing Backbone.View\r\n\t* https://github.com/TryGhost/Ghost/blob/ember/core/clientold/views/settings.js#L344\r\n* Update current template to remove the blocks of code that have @TODO comments above them\r\n   * Probably depends on `{{asset}}` helper to be implemented \r\n* Handle uploading images, perhaps abstract functionality'
2421,'jgable','[Ember.js] Settings: General Tab\nThis currently exists in the ember branch in a non-functional manner.\r\n\r\nThis task is to port over the existing behavior into Ember so that the screen behaves as it currently does in production.\r\n\r\n**Please note**\r\n* for all Ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress.\r\n* If you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find a resolution.  Usually these blocking issues are also blockers on other issues.\r\n* Right now the aim is to reach parity with production.\r\n\r\n### Tasks\r\n* Implement Controller, porting over logic from existing Backbone.View\r\n\t* https://github.com/TryGhost/Ghost/blob/ember/core/clientold/views/settings.js#L157\r\n* Implement word counter for description area'
2418,'hswolff',"[Ember.js] Popovers\n* Need some system in place to allow for popovers.  \r\n\r\n* They're currently used by the admin dropdown and the post settings view, so this behavior should be abstracted and reusable. \r\n\r\nThis should probably be implemented as an Ember.Component with an API such as:\r\n\r\n```\r\n{{#ghost-popover open=popoverOpen}}\r\n   Popover contents\r\n{{/ghost-popover}}\r\n```\r\n\r\nWhere `open` is a property on the Component and the `popoverOpen` property is defined in the template that is using the component - i.e. either the Controller or Route.\r\n\r\n**Please note**\r\n* If you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find a resolution.  Usually these blocking issues are also blockers on other issues.\r\n* Right now the aim is to reach parity with production."
2413,'jgable','[Ember.js] Signin Screen\nThis screen currently exists in the ember branch in a non-functional manner.\r\n\r\nThis task is to port over the existing behavior into Ember so that the screen behaves as it currently does in production.\r\n\r\n**Please note**\r\n* for all Ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress.\r\n* If you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find a resolution.  Usually these blocking issues are also blockers on other issues.\r\n* Right now the aim is to reach parity with production.\r\n\r\n### Tasks\r\n* Implement controller form submit handler, as it currently exists in Backbone.View logic\r\n\t* https://github.com/TryGhost/Ghost/blob/ember/core/clientold/views/login.js#L24\r\n\r\nURL: http://127.0.0.1:2368/ghost/ember/signin'
2410,'halfdan','[Ember.js] Signup Screen Behavior\nThis screen currently exists in the ember branch in a non-functional manner.\r\n\r\nThis task is to port over the existing behavior into Ember so that the screen behaves as it currently does in production.\r\n\r\n**Please note** \r\n* for all Ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress.\r\n* If you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find a resolution.  Usually these blocking issues are also blockers on other issues.\r\n* Right now the aim is to reach parity with production.\r\n\r\n### Tasks\r\n\r\n* Wire up controller to handle form submission, ensure all functionality is maintained\r\n\t* https://github.com/TryGhost/Ghost/blob/ember/core/clientold/views/login.js#L92\r\n* Send mock ajax request to sign a user up and handle success/response correctly\r\n\t* https://github.com/TryGhost/Ghost/blob/ember/core/clientold/views/login.js#L119\r\n\r\nURL: http://127.0.0.1:2368/ghost/ember/signup'
2385,'ErisDS',"Don't use CodeMirror on Touchscreen devices\nCodeMirror doesn't work on Touchscreens / mobile. At all. \r\n\r\nThis is the number 1 thing that people are missing from Ghost, so let's fix it by removing CodeMirror and using a plain old textarea on a touchscreen device.\r\n\r\nWhilst we're at it, lets refactor the existing editor and add some separation of concerns, so that dropping in replacements to CodeMirror, or showdown, or the view management (i.e. switching from Backbone to Ember) is easy. \r\n\r\nNot only will this make it possible for us to fix the lack of mobile support, but it should help us get the editor rebuilt in Ember much quicker."
2381,'ErisDS',"Make the showdown extensions make sense\nCurrently there are 3 showdown extensions used in Ghost. This issue attempts to quantify and explain all the ways in which they are confusing / broken.. and then get that fixed:\r\n\r\n### The image preview extension\r\nLocated at: `/core/client/assets/lib/showdown/extensions/ghostdown.js`\r\n\r\n**Problems:**\r\n\r\n* Is poorly named 'ghostdown' even though it actually isn't a ghost version of markdown at all, but just the code which transforms normal image markdown `![]()` into the placeholder for uploading\r\n* Is located in `core/client/assets` because it is used in the admin UI only - frontend UI should show a normal image or nothing.\r\n* Oddly contains the 4-or-more-underscore 'fix' which means this is only happening client side - no idea how I missed this, this should always have been in the GFM extension\r\n\r\n**Solutions:**\r\n\r\n* rename it to ghostImagePreview - that's what it is\r\n* move it to `/shared/` with the other extensions, even though it's only used in the admin client, this will be far less confusing. I can never find it and I wrote it!\r\n* move the 4-or-more-underscore 'fix' and tests to the GFM extension\r\n\r\n### The GFM extension\r\n\r\nLocated at: `/core/shared/lib/showdown/extensions/github.js`\r\n\r\n**Problems:**\r\n\r\n* poorly named, originally started out as showdown's own `github.js` extension but has had a great deal of additions and amendments such that having the same name is now confusing\r\n* it's buggy as hell! A large number of the [editor bugs](https://github.com/TryGhost/Ghost/issues?direction=desc&labels=bug%2Ceditor&milestone=&page=1&sort=created&state=open) come from this file, and in particular the logic of whether something should be pre or post processed or processed with certain blocks extracted\r\n* the file is under-commented and probably under-tested - given it's complexity and importance\r\n\r\n**Solutions:**\r\n\r\n* Rename it to 'ghostGFM' to make it clear that this is a custom implementation of GFM features\r\n* Look through the list of [editor bugs](https://github.com/TryGhost/Ghost/issues?direction=desc&labels=bug%2Ceditor&milestone=&page=1&sort=created&state=open) , and kill anything that's a quick win (with lots of tests)\r\n* Add a crap-tonne of comments\r\n* Look for missing edge-cases in tests\r\n\r\n### The Typography extension\r\n\r\nLocated at: `/core/shared/lib/showdown/extensions/typography.js`\r\n\r\n**Problems:**\r\n\r\n* When it was added, it wasn't added to the integration tests, thus it actually breaks a tonne of things and we didn't know so it needs to be tested (See #2312)\r\n* It breaks stuff so it needs to be fixed (See #2312)\r\n* It's not versioned or in bower :(\r\n* Because of the use of fonts on the editor, it isn't being put to good use (See https://github.com/TryGhost/Ghost-UI/issues/12)\r\n\r\n**Solutions:**\r\n\r\n* Add it to our integrated showdown tests\r\n* Fix the problems with it\r\n* Try to get a version added / it added to bower (See https://github.com/caerphoto/showdown_typography/issues/2)\r\n* Get the editor fonts changed (See https://github.com/TryGhost/Ghost-UI/issues/12)"
2370,'ErisDS','Serve default robots.txt\ncloses #2062\r\n- Server robots.txt from theme if available\r\n- Serve default robots.txt from /core/shared/ otherwise\r\n- Added tests for default robots.txt'
2354,'sebgie','User schema changes\nAs part of the multi-user project (0.6) we will need to make some changes to the user schema. \r\nMaking column modifications will require #601 \r\n\r\n* The `name` field unique constraint needs to be removed\r\n* The `slug` field needs to have a unique constraint added\r\n* More changes TBD'
2341,'ErisDS','Rss support for tags\ncloses #2260\r\n- added routes for /tag/:slug/rss and /tag/:slug/rss/page/:page\r\n- added support for tag in the rss controller\r\n- added route tests for each extra case'
2330,'sebgie',"Feature Request: User email address hide publicly\nAt the moment we have the ability to user `{{author.email}}` in themes, which is great for creating a `mailto:` link if users would like it to be there.\r\n\r\nHowever if a user doesn't want their email address public and the theme they use shows it, they can't delete their address from the user settings field as it's required for notifications.\r\n\r\nAs such the options at present are:\r\n\r\n* Themes don't use the `{{author.email}}` tag to ensure privacy\r\n* Themes do use the tag and users have to delete it if they don't want their email shown\r\n\r\nIt would be great if there were an option in the admin settings UI that a user could switch to determine whether a theme could access their email address or not.\r\n\r\nThat way themes could safely use the `{{author.email}}` tag to create `mailto:` links for those who want them, without comprimising the privacy of those who don't."
2312,'ErisDS','Bug: Markdown renderer messes with embedded HTML\n### Issue Summary\r\n\r\nMarkdown supports HTML and should just print it out as is. The showdown renderer seems to add additional `<br />`s after certain tags, causing them to break.\r\n\r\n### Steps to Reproduce\r\n\r\nEnter the following text into the markdown editor:\r\n```\r\nTest\r\n\r\n<table class="test">\r\n  <tr>\r\n  \t<td>Foo</td>\r\n  </tr>\r\n  <tr>\r\n  \t<td>Bar</td>\r\n  </tr>\r\n</table>\r\n\r\n<audio class="podcastplayer" controls>\r\n\t<source src="foobar.mp3" type="audio/mp3" preload="none"></source>\r\n    <source src="foobar.off" type="audio/ogg" preload="none"></source>\r\n</audio>\r\n\r\nTest\r\n```\r\n\r\nResult:\r\n```\r\n<p>Test</p>\r\n\r\n<table>  \r\n  <tr>    \r\n      <td>Foo</td>\r\n  </tr>\r\n  <tr>    \r\n      <td>Bar</td>\r\n  </tr>\r\n</table>\r\n\r\n<p><audio class=“podcastplayer” controls> <br />\r\n    <source src="foobar.mp3" type="audio/mp3" preload="none"></source>\r\n    <source src="foobar.off" type="audio/ogg" preload="none"></source>\r\n</audio></p>\r\n\r\n<p>Test</p>\r\n```\r\n\r\nNote that the `table` renders just fine without additional elements added. The `audio` tag however is surrounded by a `<p>` and has an additional `<br />` added inside causing the element to break in Chrome (at least for me).\r\n\r\nNote that the rendered markdown also contains fancy quotation marks (which is probably related to #1795).\r\n\r\n![screen shot 2014-03-02 at 16 30 02](https://f.cloud.github.com/assets/176576/2304462/f4dd5b12-a21f-11e3-8bd5-e8591eab189e.png)\r\n \r\n\r\n### Technical details\r\n\r\n* Ghost Version: master - latest commit:  b84c8a47\r\n* Browser: Chrome 33'
2308,'ErisDS',"Feature Request: Enhance edit post usability\nThe Content page in the admin interface has one little issue that has been bugging me more and more as I use it. Selecting a post in the left pane is easy, but going to edit that post, particularly on a widescreen monitor with no touch, is not easy. The distance between the left pane and the edit icon on the far right is too great. Not too mention that the pencil icon is a tiny target. Not to get all Fitt's Law up in here, but to me that seems like a serious enough usability issue to warrant discussion and correction.\r\n\r\nI'm looking to @JohnONolan for suggestions here and for a verdict, but my one idea is to add some edit/delete buttons to the actual post item in the left pane. I would only show them on hover over the actual item.\r\n\r\nScreenshot for posterity:\r\n![widescreen edit example](https://f.cloud.github.com/assets/1540648/2303332/1ebf7110-a1b5-11e3-9449-cb31a8fc0fd2.png)"
2285,'hswolff',"Reformat month based image upload directories\nI'm honestly just opening this before someone else does. Currently we save uploads in the folder structure `/images/2014/jan/image.jpg` - which is pretty fucking weird.\r\n\r\nIt would probably make a lot more sense if it was `/images/2014/01/image.jpg`"
2277,'halfdan',"Linting ES6\nSadly, JSLint doesn't cope with ES6 modules.\r\n\r\nIn order to keep our code standards up, we're going to need a new linting solution. It needs to be as close to the strictness of JSLint as possible.\r\n\r\nThe obvious question that always pops up when talking about this is why do we use JSLint in the first place? \r\n\r\nQuite simply the answer is because JSLint removes the option to configure it, this means that there is less opportunity for debates & arguments about what our code style should be, and we can get on with coding. \r\n\r\nIf we *have* to switch to JSHint, we need to pick a configuration - basically the same (or as similar as it can get to) as JSLint, and stick to it."
2272,'halfdan',"Switch to bower for managing frontend dependencies.\nTo date we've had no management around our various frontend dependencies. As we switch to ember, we're going to want to use bower.\r\n\r\nI think it would be really good to do this in master for our current setup and merge it back into the ember branch... thoughts?\r\n\r\nWe can probably put the majority of our dependencies in bower.json, and then run `bower install` as part of `npm install`:\r\n\r\nhttps://github.com/stefanpenner/ember-app-kit/blob/master/package.json#L17\r\n\r\nThis should be reasonably straight forward to do, however there are a couple of considerations:\r\n\r\n- what to do about our shared vs client dependencies - the intention was always that 'shared' should contain anything that might be shared between the admin client and the theme. This has become a little bit confused over time.\r\n- /shared/vendor/showdown/github.js is a heavily modified version of the original used on both the client and server\r\n- /client/assets/vendor/showdown/extensions/ghostdown.js is a custom extension used client side only to manage image uploads + deal with multiple underscores\r\n\r\nIf we can make a sensible decision about how to sort these bits out, this might even be a good candidate for a `beginner` issue?"
2264,'sebgie','JSON API Permissions\nIn preparation for #2058, #2059 and #2124 I have summarized a list of roles and their permissions for the JSON API. This is not a complete list of API functions yet.\r\n\r\n# Roles\r\n\r\n- **Admin**: somebody who has access to all the administration features on your blog.\r\n- **Editor**: somebody who can publish and manage posts including the posts of other users.\r\n- **Author**: somebody who can publish and manage their own posts.\r\n- **NoAuth**: somebody who is not authenticated yet.\r\n\r\n\r\n# Posts\r\n\r\nJSON API                 | Admin | Editor | Author                                        | NoAuth\r\n-------------------------|-------|--------|-----------------------------------------------|------------------------\r\nposts.browse             | y     | y      | y (status == published or created_by == self) | y (status == published)\r\nposts.read               | y     | y      | y (status == published or created_by == self) | y (status == published)\r\nposts.edit               | y     | y      | y (created_by == self) | \r\nposts.add                | y     | y      | y                                             | \r\nposts.destroy            | y     | y      | y (created_by == self)                        | \r\nposts.getSlug            | y     | y      | y                                             | \r\n\r\n\r\n\r\n# Settings\r\n\r\nJSON API                 | Admin | Editor | Author           | NoAuth\r\n-------------------------|-------|--------|------------------|------------------------\r\nsettings.browse          |       |        |                  | \r\n- core                   |       |        |                  | \r\n- blog                   | y     | y      | y                | y\r\n- app                    | y     | y      | y                | \r\n- theme                  | y     | y      | y                | \r\nsettings.read            |       |        |                  | \r\n- core                   |       |        |                  | \r\n- blog                   | y     | y      | y                | y\r\n- app                    | y     | y      | y                | \r\n- theme                  | y     | y      | y                | \r\nsettings.edit            |       |        |                  | \r\n- core                   |       |        |                  | \r\n- blog                   | y     |        |                  |  \r\n- app                    | y     |        |                  | \r\n- theme                  | y     |        |                  | \r\n\r\n# DB\r\n\r\nJSON API                 | Admin | Editor | Author | NoAuth\r\n-------------------------|-------|--------|--------|--------\r\ndb.exportContent         | y     |        |        |\r\ndb.importContent         | y     |        |        |\r\ndb.deleteAllContent      | y     |        |        |\r\n\r\n\r\n# User\r\n\r\nJSON API                 | Admin | Editor | Author           | NoAuth\r\n-------------------------|-------|--------|------------------|------------------------\r\nusers.browse             | y     | y      | y                | \r\nusers.read               | y     | y      | y                | y\r\nusers.edit               | y     | y      | y (user == self) | \r\nusers.add                | y     | y      |                  | '
2261,'ErisDS',"Redirect /feed/ to /rss/\nA great deal of people coming in from WP are used to the /feed/ route from their previous installs. They are now having an issue of old /feed/ urls 404'ing. \r\n\r\nIt would be useful if we reserved the /feed/ route and redirected it to /rss/\r\n\r\nIdeally this would take into account the current URL - so that it's compatible with #2260"
2257,'ErisDS','Bug: Reset link redirects to signin\n### Issue Summary\r\n\r\nThe reset link which is sent out in emails is currently redirecting to the signin page.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Go to /ghost/forgotten/ enter your email address and generate a new token (requires mail configured\r\n2. Click on the link in the email that is sent\r\n\r\nThe link goes to /ghost/reset/ but is automatically redirected to /ghost/signin/?blah\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: master (latest commit: )\r\n'
2239,'ErisDS',"Update package.json for publishing to npm\naddress #2078\r\n\r\n- removes private: true flag from package.json\r\n- created .npmignore file to exclude files\r\n from being included in the npm package\r\n\r\n\r\nSo as I currently understand it, `npm publish` will take all contents in the folder (excluding those specified in the `.npmignore` file) and pack that to be included in the npm package.\r\n\r\nThis means that it'll include the compiled assets by default, addressing item 1 in #2078.  However before publishing we need to ensure `grunt prod` is run so the assets are up to date.\r\n\r\nI previously tried doing that with the `prepublish` script ([docs here](https://www.npmjs.org/doc/misc/npm-scripts.html)) however that is also ran on `npm install`, something we cannot do.\r\n\r\nThe publish process looks like this:\r\n\r\n```\r\ngrunt prod\r\nnpm publish\r\n```\r\n\r\nWhich we could turn into a grunt task however that seems necessary.\r\n\r\nThat part is up to you @ErisDS, as you'll be the one doing the publishing ;)."
2238,'sebgie','Support for urlSSL config option and forceAdminSSL 403 response\ncloses #1838\r\n- adding `forceAdminSSL: {redirect: true/false}` option to allow 403 over non-SSL rather than redirect\r\n- adding `urlSSL` option to specify SSL variant of `url`\r\n- using `urlSSL` when redirecting to SSL (forceAdminSSL), if specified\r\n- dynamically patching `.url` property for view engine templates to use SSL variant over HTTPS connections (pass `.secure` property as view engine data)\r\n- using `urlSSL` in a "reset password" email, if specified\r\n- adding unit tests to test `forceAdminSSL` and `urlSSL` options\r\n- created a unit test utility function to dynamically fork a new instance of Ghost during the test, with different configuration options'
2236,'ErisDS','Fix importer adds the same tags to every post\nfixes #2234\r\n- updateTags used tags that were overwritten by an async operation'
2235,'ErisDS','Removed legacy code modifying .open class on toggles\nFixes #1311\r\n\r\n'
2233,'ErisDS','[Apps] Added friendly handling for nonexistent apps\nFixes #1829\r\n\r\n* Added try-catch block in core/server/apps/loader.js to catch and reject with an error when getAppByName fails (meaning app loading failed, meaning the app directory doesn\'t exist). Error message as follows:\r\n> Error loading app named <name>; app directory (/content/apps/<name>) does not exist."\r\n\r\n* Added .otherwise blocks with error logs to core/server/apps/index.js to catch the new rejections and log error message to console'
2229,'ErisDS','Schema additions for apps.\nfixes #2102\r\n- Added app_settings, app_fields, app_fields_relations tables'
2226,'ErisDS','Update delete post button labels\nAs pointed out in [an ADN post](https://alpha.app.net/isaiah/post/23202339), the prompt to delete a post is confusing.\r\n\r\n![image_1](https://f.cloud.github.com/assets/15747/2215332/f7f64adc-99ed-11e3-935d-c49bbf50cc47.png)\r\n\r\nThis pull request changes the labels to "Delete" and "Cancel". It\'s still confusing that the delete button is green, but it doesn\'t look like there is an easy way to change that without swapping the accept and reject functions in the JS, which would be confusing.\r\n\r\nIf there is a good way to do it, I\'d be happy to update the pull request.'
2225,'ErisDS',"Add promise to ghost startup process to allow\nhooking into when ghost has finished loading\r\n\r\naddresses item 9 in #2078\r\n\r\n- has files that startup ghost return a promise\r\n that is resolved once ghost has finished loading\r\n\r\n\r\nFor example, this can be used like so:\r\n\r\n```\r\nvar ghost = require('ghost');\r\n\r\nghost().then(function() {\r\n  console.log('ghost has loaded')\r\n});\r\n```"
2220,'ErisDS','Add validation from schema.js\ncloses #1401\r\n- added data/validation/index.js\r\n- added generic validation for length\r\n- added generic validation for nullable\r\n- added validations object to schema.js for custom validation\r\n- removed pyramid of doom from api/db.js'
2211,'ErisDS',"Ghost Admin Shootout: AngularJS\nCreating pull request just for discussion purposes.  Diff view doesn't allow comments :("
2207,'ErisDS','[WIP] Integration with  downsize ContextualTags API.\nThis commit is an initial attempt to integrate with the downsize contextual tags API ([commit](https://github.com/cgiffard/Downsize/commit/00f9fd88f6a0d0a7261f4d037dedd119e8d899ef)).\r\n\r\nThis implementation would allow you to pass context="true" to {{content}}, and not get your \'core\' markdown generated elements clipped. i.e. the elements p, ol, ul, pre, and blockquote would all not be clipped. Instead, whatever element the character limit or word limit was hit inside of would be finished before the html is clipped.\r\n\r\nI\'ve tried to adhere to code and API conventions, please let me know if there\'s anything you\'d like me to change! (This is my first ghost PR, so I\'d love feedback :))\r\n\r\nRelates to:\r\n* https://github.com/TryGhost/Ghost/issues/2206\r\n* https://github.com/TryGhost/Ghost/issues/2166\r\n\r\nBest regards,\r\n\r\n-adam\r\n\r\n##commit message:\r\nIntroduces the context="true" API to {{content}}.\r\nCurrently defaults to false.'
2199,'sebgie',"Add app permission checking to canThis\nProgress on #2059\r\n\r\n- Create apps table and App model (Increments schema to 003)\r\n- Pass permissions loading to buildObjectTypeHandlers to eliminate shared state\r\n- Load both app and user permissions to check in canThisResult\r\n- Check app permissions if present after user checks.\r\n- Move effectiveUserPermissions to permissions/effective.js so logic is one place.\r\n- Change permissable interface to take context; has user and app and could contain more in future.\r\n- Add unit tests for app canThis checks and effective permissions\r\n\r\nNot really sure if I'm doing the schema stuff correctly, so feel free to review that.\r\n\r\nIn order to start using this #2179 will need merged, and then we'll need to push the loaded permissions into the database during app loading.  I thought this was big enough by itself without adding that stuff in."
2187,'sebgie',"Provide proper status codes for API operations\n@halfdan linked me http://tools.ietf.org/html/rfc2616. I was thinking whether it'd be a good idea / OCD / doing it right thing if we provided the proper status codes for API responses. Currently we're using 500, 404, 415, 413, 403, 401 and 200 (along with the 304 for caching).\r\n\r\nThe RFC allows for more granular bits, like\r\n* [201 Created](http://tools.ietf.org/html/rfc2616#section-10.2.2) - could be used for new posts / users / tags\r\n* [202 Accepted](http://tools.ietf.org/html/rfc2616#section-10.2.3) - could be used to get back to the browser once data is here, but before promises resolve and a proper response gets back (not sure though)\r\n\r\nThoughts?"
2179,'sebgie','App Permissions from package.json\nProgress on #2095 and #2059\r\n\r\n- Add new AppPermissions class with read() method\r\n- has default permissions to read and browse posts\r\n- uses default permissions if no package.json\r\n- uses default permissions if no ghost object in package.json\r\n- ~~uses default permissions~~ errors when reading malformed package.json\r\n- uses ghost.permissions if found in package.json'
2173,'sebgie','Add logging config option\ncloses #2103\r\n- Deactivate logging for testing environments\r\n- Override logging with settings from config'
2171,'sebgie',"Session expiry error message is an arse\nGhost's sessions last 12 hours. Some people keep the window open a lot lot longer than that. If they do, their session goes away and when they go to save they get an unhelpful error message which just says 'Unknown Error'.\r\n\r\nIt would be great to upgrade that message to say something sensible like 'Oops, you're not logged in'.\r\n"
2169,'ErisDS','Improvements for models\n#closes #1655\r\n- removed models as parameter for bookshelf-session\r\n- changed to read permittedAttributes from schema.js\r\n- changed updateTags to be executed at saved event\r\n- added validate to execute after saving event\r\n- added test for published_at = null (see #2015)'
2164,'JohnONolan',"New first-run\nReferences #1794\r\n\r\nDoesn't redirect to /ghost/setup if there's no user (yet). I'll add if desired."
2156,'ErisDS','Added package.js support for themes (and plugins)\nCloses #2081\r\n* Amended require-tree to allow package.json file parsing to return the contents of the file as json on the `package.json` key. \r\n* settings api populates theme data `package.json` if it exists. Otherwise it assigns `false` to it\r\n* `general.hbs` (salute) was reworked to if there is the `package.json` key on the theme is not false, it will use the `name` and `version` keys of that. You can break it by not having a `name` or `version` in the package.json file.'
2155,'ErisDS','Update express-hbs to fix block helper issue.\nfixes #2127\r\n- Update express-hbs to 0.7.9'
2153,'ErisDS','Implements the #has Block helper\ncloses #2115\r\n- Added new #has block helper\r\n- Added several tests for #has helper\r\n\r\nkudos to @s0x for some crazy JS-fu'
2150,'halfdan','Properly display escaped tags in tag editor.\nfixes #2149\r\n- Escape tag before displaying in editor tag widget'
2149,'halfdan','Bug: Tags are not escaped in editor widget\n### Issue Summary\r\n\r\nIt\'s possible to create a tags with HTML, e.g. `<a href="#">Foo</a>` which is then not properly escaped in the editor tag widget.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Enter a tag with some HTML \r\n\r\nThis is a bug because it not only allows you to enter HTML that is then not escaped but also break the document (by simply several closing tags `</div></div>`.\r\n\r\n![tag-escape](https://f.cloud.github.com/assets/176576/2117154/668e5752-90b9-11e3-987a-46d47ad499e7.gif)\r\n\r\n### Technical details\r\n\r\n* Ghost Version: master '
2148,'halfdan',"SEO: Add RPC Update Services for Faster Indexing\nAt present, new posts published with Ghost are slightly slow to find their way into the search indexes. One way to accelerate this process is with the use of an XML-RPC to ping various services and let them know that a new post exists. \r\n\r\nThere are various extents to which this can be implemented. WordPress ships with a single service (pingomatic) - and mostly SEO-boffs ramp that up to 50+ services (overkill).\r\n\r\nI would suggest that we implement a default, behind the scenes RPC connection which pings the 3 most popular services - any further modification to enable or disable more or less services should then be done via apps.\r\n\r\nThis is the list of what I believe is generally considered to be the top 3:\r\n\r\n1. http://rpc.pingomatic.com\r\n2. http://blogsearch.google.com/ping/RPC2\r\n3. http://rpc.technorati.com/rpc/ping *(looks dead, but I believe it actually only responds to POST requests)*\r\n\r\nWe can review adding more by default later if it seems sensible, but 3 is probably a good starting point.\r\n\r\nIt's probably worth looking closely at how WordPress does this for reference. Not sure if pings should be sent only when a post is first published, or also when it is updated.\r\n\r\nWould be great to get this into 0.5 if possible, but not essential.\r\n\r\n//cc @halfdan "
2145,'JohnONolan','"From" address on welcome email is triggering spam filters\nCurrently the "welcome to your new ghost install" email is sent "from" [user\'s email address] - this is triggering spam filters heavily, as the user is receiving an email "from" and "to" the same address, but from a different origin IP (classic email spam/spoofing/phishing)\r\n\r\nI think it would be advisable to update all system emails to come "from"\r\n\r\n~~ghost@[blog.url]~~\r\n\r\n**Update:** webmaster@[blog.url] where blog.url is taken from config.js'
2128,'sebgie','[Multi-user] Prevent race condition which allows multiple users to be created.\ncloses issue #1834\r\n- Added an integration test which attempts to add multiple users asynchronously.\r\n- Added closure to User.add()  which holds a state variable to determine if a user has been added.\r\n-- This will NOT work in a multi-process or load-balanced environment as it depends on the current process state.'
2127,'halfdan','URL helper in contentFor\nWhen inside the {{#post}} tags it\'s possible to retrieve the url of the post by using the URL helper {{url}}. When using a contentFor block however this doesn\'t seem to work.\r\n\r\nFor the sake of explaining this issue i will use my own example.\r\nOn my default.hbs i have created a block like this:\r\n`{{{block "meta"}}}`\r\n\r\nI want to fill this block from the post.hbs and there i have the following code in my post.hbs:\r\n`{{#contentFor "meta"}}   \r\n    <meta property="og:title" content="{{title}}" />\r\n    <meta property="og:description" content="{{ date post.published_at format=\'DD MMM YYYY\' }} - {{title}}" />\r\n    <meta property="og:url" content="{{@blog.url}}{{url}}"/>\r\n\r\n    <meta name="twitter:url" content="{{@blog.url}}{{url}}">\r\n    <meta name="twitter:title" content="{{title}}">\r\n    <meta name="twitter:description" content="{{ date post.published_at format=\'DD MMM YYYY\' }} - {{title}}">\r\n{{/contentFor}}`\r\n\r\nEverything is working fine except for the {{url}} helper. This gives me back random strings which are different on almost every refresh of the page. These strings look like the following example: `__lHQbzGwu__`.'
2124,'ErisDS',"JSON Data API cleanup for consistency\nThe API needs:\r\n\r\n- a clear naming convention for functions\r\n- some thought about the names of non BREAD functions\r\n- a clear naming convention for options / arguments\r\n- some thought about what options / arguments are available to each function\r\n- clear convention for return values\r\n- consistent behaviour for error and warning handling \r\n\r\nOnce this work is complete, we should rename the API routes from v0.1 to v1.0\r\n\r\n---- \r\n\r\nUpdate by @ErisDS 10-04-14:\r\n\r\nAs a result of the discussion which occurred in #2362, we now have a clear plan of what we want to do with our API in order to make it clear, consistent and easy to make decisions about how things should work.\r\n\r\nWe want to move our API towards supporting JSON-API, but with one major difference - all included objects should get included inline, rather than using linked objects. Linked object support will be added in the future via some sort of switch. \r\n\r\nThe move towards the [JSON API response format](http://jsonapi.org/) includes a number of distinct changes:\r\n\r\n- The response is an object with a number of keys, one of those keys should be the pluralised name of the primary document type which is being returned. In terms of Ghost, this means `posts`, `tags`, `users`, `settings` etc.\r\n- The response object can also contain a `meta` key, this will be used to return pagination data\r\n- The key for the primary document type always contains an array, even when only one object is returned. Therefore the response for a single post would look like: `{ posts: [{ id: 1, uuid: ... } ] }`\r\n- Related objects should default to using their relation name as the key. Therefore in the post response, there should be an `author` key, not an `author_id` key.\r\n- Related objects should only be exanded into full objects when explicitly declared with `include`.\r\n- The headers on the response should include a content-type header of 'application/vnd.api+json', 'application/json'.\r\n- The response to a create request should include a location header like Location: `http://my`blog.com/ghost/api/posts/12`\r\n- The keys for pagination data should be moved into a top-level `meta` object\r\n- We should add support for PATCH requests (long term)\r\n- We should add support for the sort query param (long term)\r\n\r\nThere are quite a few changes, some of them bigger and harder than others, the following is a list of issues which should get us from where we are to where we want to be.\r\n\r\n- [x] Move to primary document format: Posts ~~#2580~~, Tags~~ #2605~~, Users ~~#2593~~, Settings ~~#2606~~, DB #2647?, Mail #2650?,\r\n- [x] Notifications API: Proper endpoints for persistent notifications #2637\r\n- [x] Tag API: parent relation #2607\r\n- [x] Post API: author relation #2608\r\n- [x] Post API: pagination -> meta #2604\r\n- [x] Post API: Explicit includes #2609\r\n- [ ] Non-REST function / route names #2601\r\n- [x] Options vs Args #2610\r\n- [x] Internal cleanup / consistency\r\n- [x] Provide proper status codes for API operations #2187\r\n- [x] Error messages ~~#2643~~, #2690\r\n- [ ] Complete documentation #2125\r\n"
2115,'halfdan','The `{{#has}}` block helper\nNote: Originally discussed in #1574 and #1562 \r\n\r\nThe idea for the `has` block helper is the result of much discussion, and is an attempt to provide the tools theme developers need to do different things based upon the context they are in.\r\n\r\nWe deliberately and specifically avoid logic in templates where possible. Handlebars only allows boolean conditionals. The `has` helper is generic enough to solve many scenarios for Ghost theme devs, whilst still not entering into the murky land of defining what is pretty much an entire programming language.\r\n\r\nThe intention is that the `has` helper will allow you to ask questions about the object in the current context. Starting with asking questions about what tags the current post has like:\r\n\r\nIf the current post has the tag \'funny\':\r\n```\r\n{{#post}}\r\n    {{#has tag="funny"}}\r\n        ... do something with all the posts which have a tag of funny ...\r\n    {{else}}\r\n        ... do something with all the posts which don\'t have a tag of funny ...\r\n    {{/has}}\r\n{{/post}}\r\n```\r\n\r\nThe attribute `tag` allows for asking questions about tags. With just one tag provided it checks for just the single tag. \r\n\r\nHowever, there are other formats available for asking other questions \r\n\r\nIf the post has the tags \'funny\' **or** \'video\':\r\n`{{#has tag="funny, video"}}...{{/has}}`\r\n\r\nIf the post has the tags \'funny\' **and** \'video\':\r\n`{{#has tag="funny & video"}}...{{/has}}`\r\n\r\nFor simplicity, the **and** and **or** forms cannot be used together. \r\n\r\nAs a block helper, `has` needs to support inversing so that the **not** form of any question can be done by using handlebars\' `^` or `else` syntaxes:\r\n\r\n`{{^has tag="funny, video"}}...{{/has}}`\r\n`{{#has tag="funny, video"}}...{{else}}...{{/has}}`\r\n'
2112,'halfdan','Helper updates for Tag Pages\nThese changes require #2111 to make any sense, and will depend on changes to the `urlFor` function, so it is possibly worth considering #1833.\r\n\r\n### Tag helper update for tag pages\r\n\r\nOnce the feature for tag pages exists, the `{{tags}}` helper can be updated to output tags in an a tag by default, with an option to turn this off.\r\n\r\nI propose the option could be:\r\n\r\n`{{tags autolink="false"}}` but would like some feedback from the community on this\r\n\r\n### Url helper update for tag pages\r\n\r\nOnce the feature for tag pages exists, the `{{url}}` helper can be updated to support outputting URLs in the tag context.\r\n\r\nThis means that if someone wants to create a customised list of tags, rather than using the `{{tags}}` helper, they can do so by doing something like:\r\n\r\n```\r\n<ul>\r\n{{#tags}}\r\n   <li><a href="{{url}}>{{title}}</a></li>\r\n{{/tags}}\r\n</ul>\r\n'
2111,'hswolff',"[Feature] Tag pages\nTag pages allow the for the browsing of posts which have a particular tag, by visiting the route:\r\n\r\n> `/tag/:slug/`\r\n\r\nWhere `:slug` is the slug of a particular tag. \r\n\r\nThe tag page will provide the template with a paginated set of posts for the given tag, which can be accessed via `{{#foreach posts}}` in exactly the same way as the standard post list is rendered using `index.hbs`.\r\n\r\nAdditionally, tag pages will provide the template with all the data for the given tag such that it can be accessed by the tag via `{{#tag}}` in the same style as the `post.hbs` template.\r\n\r\nThe new tag controller will support a template/view hierarchy much like `page.hbs` > `post.hbs`. If there is a template called `tag.hbs` this will be used to render the page, otherwise tag pages will use the standard `index.hbs` which lists out posts.\r\n\r\n**Note:** for this to be truly useful, there are some changes need to some of our handlebars helpers as covered by #2112\r\n\r\n**Note:** for users to really love this feature, they're going to need to be able to manage their tags - delete unused ones, edit descriptions, etc. This will come along in #2119 "
2108,'ErisDS','Editor doesn\'t find the correct char offset to edit in Internet Explorer 11\n### Issue Summary\r\nI was doing some tests with different browsers to reproduce the error described in #1007 and I noticed an issue with the editor in Internet Explorer 11, it seems to calculate the offset of the chars to edit wrong sometimes.\r\n\r\n### Steps to Reproduce\r\n\r\nStart with a default installation of Ghost and change the text of the starter article to\r\n\r\n````\r\nthe lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The \r\n````\r\n\r\nThe edit window inserts a linebreak line this\r\n\r\n````\r\nthe lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\r\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The \r\n````\r\n\r\nHowever when moving the cursor around, the editor seems to think that the first line ends after brown and the 2nd line has 4 more characters that appear as blanks.\r\n\r\nWhen editing the 2nd line, the typed chars are inserted 4 chars to the left, e.g. if you type a char into the 2nd char of the line (between j and u), it is inserted in the previous word resulting in fQopx.\r\n\r\nFor some reason the calculation assumes that the last word in the previous line is wrapped around to the beginning of the 2nd line.\r\n\r\n### Technical details\r\n\r\n* Ghost Version: 0.4.1\r\n* Client OS: Windows 7 64 bit\r\n* Server OS: Windows 7 64 bit\r\n* Node Version: node.js v0.10.24\r\n* Browser: Internet Explorer 11.0.2\r\n\r\nSince this is probably related to the font layout, I should mention that my screen has a resolution of 1920x1080\r\n\r\nPlease take a look at the screen recording, there you should see the error.\r\n\r\n![ghost_edit](https://f.cloud.github.com/assets/156144/2070132/74462866-8d17-11e3-9ca3-948b9721f79f.gif)\r\n\r\nBasically the offset is 4 chars to the left, which is the the width of the " fox" word in the line above and the additional spaces in the current line.\r\n'
2103,'halfdan',"Connect logging as a config option\nGhost uses connect's logging: [connect logging docs](http://www.senchalabs.org/connect/logger.html). \r\n\r\nIn production & testing modes the default is used, and in development mode the special `dev` mode is used.\r\n\r\nThere are a number of scenarios I have encountered recently where custom logging is necessary:\r\n\r\n- debugging request / response issues\r\n- debugging header issues\r\n- consoles which don't support dev color codes: #2096\r\n\r\nTherefore, I'd like to make it possible to pass in any configuration which connect accepts as an option in config.js which should simply be called `logging`. Ghost should continue to use its own defaults unless an override is provided in config.js for the current environment."
2102,'halfdan',"Database / Schema Additions for apps\n[Draft] I'm keeping this as a draft for now as I'd like some input on the exact schema.\r\n\r\nTo give apps some ability to store sensible data in a consistent way we need to add a few new default tables.\r\n\r\nThe first is the `app_settings` table which provides for apps to store their own settings:\r\n\r\n```\r\napp_settings: {\r\n    id: {type: 'increments', nullable: false, primary: true},\r\n    uuid: {type: 'string', maxlength: 36, nullable: false},\r\n    key: {type: 'string', maxlength: 150, nullable: false, unique: true},\r\n    value: {type: 'text', maxlength: 65535, nullable: true},\r\n    owner: {type: 'string', maxlength: 150, nullable: false},\r\n    created_at: {type: 'dateTime', nullable: false},\r\n    created_by: {type: 'integer', nullable: false},\r\n    updated_at: {type: 'dateTime', nullable: true},\r\n    updated_by: {type: 'integer', nullable: true}\r\n}\r\n```\r\n\r\nIt is pretty much identical to the `settings` table, but with an `owner` column which should contain a string to identify which application created the setting, instead of a `type`  column. Do we need anything else here?\r\n\r\nThe second thing I'd like to add is the `custom_data` and `posts_custom_data` tables. Better names are VERY MUCH WELCOME :bulb:!\r\n\r\nThese tables should allow apps to effectively create new columns on the posts table, or rather add additional properties to the posts object.\r\n\r\n```\r\ncustom_data: {\r\n    id: {type: 'increments', nullable: false, primary: true},\r\n    uuid: {type: 'string', maxlength: 36, nullable: false},\r\n    name: {type: 'string', maxlength: 150, nullable: false, unique: true}, \r\n    value: {type: 'text', maxlength: 65535, nullable: true},\r\n    type: {type: 'string', maxlength: 150, nullable: false, defaultTo: 'html'},\r\n    owner: {type: 'string', maxlength: 150, nullable: false},\r\n    created_at: {type: 'dateTime', nullable: false},\r\n    created_by: {type: 'integer', nullable: false},\r\n    updated_at: {type: 'dateTime', nullable: true},\r\n    updated_by: {type: 'integer', nullable: true}\r\n},\r\npost_custom_data: {\r\n    id: {type: 'increments', nullable: false, primary: true},\r\n    post_id: {type: 'integer', nullable: false, unsigned: true, references: 'id', inTable: 'posts'}\r\n    custom_data_id: {type: 'integer', nullable: false, unsigned: true, references: 'id', inTable: 'custom_data'}\r\n}\r\n```\r\n\r\nThere is more to consider here:\r\n* Should the `custom_data` table be this general?\r\n* Should the `post_custom_data` table have proper foreign keys?\r\n* Is the type column needed on `custom_data`, or does this belong elsewhere?\r\n* Is there more information needed to be stored for each item of `custom_data`, like validation or permission rules, or should this information be kept somewhere else?\r\n\r\nAlso something I'm thinking about:\r\n\r\n With this schema, how should we fetch the data? \r\n\r\nShould we always fetch the additional columns, or should we add use a 'with' option that that apps can pass via the API, and augment the queries elsewhere in the app by using filters? Is that too complicated? How is this going to affect performance? Etc."
2098,'ErisDS','Remove shim files that were created to address #1873\nno issue\r\n\r\n- safe to remove going into 0.5'
2095,'jgable',"App Permissions\nRef: [App Ideas Permissions](https://github.com/TryGhost/Ghost/wiki/App-Ideas-Permissions) and #2007 \r\n\r\nWe want applications to be able to define the permissions they require to work. These permissions cover api / acl style CRUD permissions on models, like add post, edit user, and also potentially more general permissions on non-objects like 'add route'.\r\n\r\nThese permissions are used in two ways:\r\n\r\n1. for implementing access control throughout Ghost see #2059\r\n2. to present to the user when installing a theme, to give the user visibility on what an app might be doing.\r\n\r\nWe need a way for apps to define what permissions it needs. This needs to be accessible throughout the application so that the ACL tools can read & check against them.\r\n\r\nUser ACL exists in the form of roles, permissions, user_roles, user_permissions, and role_permissions tables in the database.\r\n\r\nThe first problem that we need to solve is how should apps define their permissions? Is having their own config.js as suggested by [App Ideas Permissions](https://github.com/TryGhost/Ghost/wiki/App-Ideas-Permissions) the best solution? Or could this be done in package.json?\r\nThe main difference being that a .js file can contain JavaScript, and that a package.json has a specified format and is used by other things, so might end up with its own permissions option which would clash.\r\n\r\nThe second problem is how to make these permissions available to the application. Is loading the permissions object / array into memory enough or should we load these into the database?\r\n\r\nAs a result of this issue, I'd like to see a defined spec for a basic set of app permissions and how to define them on the wiki, as well as implementing the loading of these permissions in the app loader."
2090,'hswolff','Bug: Page.hbs sometimes not recognised\nIn certain situations the `pages.hbs` file is ignored.\r\n\r\n## Scenarios & Observed results\r\n\r\n> If I switch themes to a different theme, the `page.hbs` file is being called. \r\n> If I copy `page.hbs` from Casper into my theme folder, it does not get called. \r\n> If I rename my theme folder to something else, the `page.hbs` file gets called. \r\n> If I rename my theme folder back to the original name, `page.hbs` does not get called\r\n\r\n## Desired result\r\n\r\nThe `page.hbs` is always referenced if it exists.\r\n\r\n## Forum topics related\r\n* https://ghost.org/forum/bugs-suggestions/5065-v0-4-1-page-hbs-doesn-t-seem-to-do-anything/\r\n\r\n## Additional Information\r\n\r\n**Version**: 0.4.1'
2083,'javorszky','Apps initial lifecycle and setting screen UI\nWe have the draft designs in #2065 \r\n\r\nIn order to make the app UI pretty, we need to first setup a settings screen and wire up a little bit of the App lifecycle.\r\n\r\nIt would be good to start out with:\r\n\r\n1. a new screen in the settings area \r\n2. a list of app names and versions pulled from the content/apps folder & package.json files (requires #2081)\r\n3. the ability to activate and deactivate an app\r\n\r\nSomething like this:\r\n\r\n![apps](http://puu.sh/6DB1T.png)'
2081,'javorszky',"Add package.json support for Themes\nRequire tree already reads all of the contents of a theme directory, but we want to add support for reading the contents of a `package.json` file.\r\n\r\nOn the settings page, if a theme does have a `package.json` file, we should read the name and version number and use these in the dropdown like:\r\n\r\n![themes](http://puu.sh/6DAvD.png)\r\n\r\nIf there is no `package.json` file, we should use the directory name as before.\r\n\r\nAlso if a theme does not have a `package.json` file output a warning on the console explaining that themes should have `package.json` files, and a link to a page explaining what's going on. The URL for that page is TBD.\r\n\r\nIt is worth considering how and where we load the data from the `package.json` file probably at the same time as doing the requireTree - and also when to output the warning - at start when the directory is loaded? When the theme is activated? I'd recommend both.\r\n\r\n**Note:** This is a temporary improvement to introduce package.json files. Long term we will add support for more information via a much better UI.\r\n\r\n**Also note:** When implementing this, consider that apps, which are not currently used in the UI anywhere, will also need to have package.json files which are loaded."
2079,'ErisDS',"Add post status filters to the ghost admin.\nThis adds links just above the post list on the left hand side of the Ghost Admin. I added these links because I had a lot of drafts and couldn't (easily) find my published posts.\r\n\r\nI'm not sure how it should be styled so I just left it as a set of links."
2075,'halfdan',"Bug: pg has random tag-related test failures\n### Issue Summary\r\n\r\nThe pg build frequently but inconsistently fails the following test:\r\n\r\n> Tag Model a Post setting tags from an array on update attaches one tag that exists in the Tags database and two tags that are new to the Tags database:\r\n      + expected - actual\r\n      +4\r\n      -5\r\n\r\n[full gist here](https://gist.github.com/ErisDS/903c874724e156c0f40b)\r\n\r\nwhich is really weird. It also regularly fails with:\r\n\r\n> 1) Settings Model API can read:\r\n     TypeError: Cannot read property 'should' of null\r\n\r\nAlso shown in the same gist. \r\n\r\n### Steps to Reproduce\r\n\r\nUnknown - trigger a few builds, one is bound to fail! \r\n\r\n### Technical details: \r\n\r\n* Ghost Version: 0.4\r\n"
2067,'ErisDS','Bug: cannot set date on unpublished post\n### Issue Summary\r\n\r\nIt is currently not possible to set the date on an unpublished post, *again* - it throws an error in the browser console.\r\n\r\nReally need to add some functional tests for the post-settings menu.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new post, give it a title, save it as a draft\r\n2. Change the published date \r\n3. See the error message in the console.\r\n\r\nThis is a bug , because I broke it by not adding a guard here: https://github.com/TryGhost/Ghost/blob/master/core/client/views/post-settings.js#L161\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: 0.4.1-rc1'
2062,'halfdan','SEO: Serve default robots.txt\nRobots look for robots.txt - not having one causes lots of 404s. Ghost should serve a default (very liberal) robots.txt which can optionally be overridden by a robots.txt in a theme folder if the user chooses to create their own.\r\n\r\nOnce #623 is complete, the default robots.txt should also contain the line:\r\n\r\n`Sitemap: path/to/sitemap.xml`'
2061,'jgable',"ACL and Strict rules for settings API\nThe Settings API needs an overhaul in terms of permissions. This issue depends on #2060, and is an amalgamation of #736 and #1473 into one, much clearer issue.\r\n\r\nThe goal of this issue is to make the settings API as safe and secure as possible.\r\n\r\nThe following rules should be true:\r\n\r\n* The only settings that should ever be created, are ones which are defined in default-settings.json.\r\n* Settings of type `core` are private. Apps can never read these settings, and nor should requests which come from the client side or any other external context. Effectively these can only be read internally by Ghost. They can however be read by any Ghost user.\r\n\r\n\r\nHow reading / creating settings should work:\r\n\r\nWhen a specific setting is requested via GET, if it isn't found, we check to make sure it isn't specified in the default settings JSON.  If it is, we should return the default value and also load it into the DB\r\n\r\nWhen trying to create or edit settings via PUT/POST, if a setting is not yet in the DB, we should again check if it is specified in the default settings JSON. If it is we should create it, but with the supplied value, if it isn't we should not create it and we should return saying the setting was invalid.\r\n\r\nIt doesn't matter where the request comes from, these rules should occur.\r\n\r\nAdditionally:\r\n\r\nIf the request is not internal any request to edit, read, add or browse a setting with type 'core' will return an access denied type error message. \r\n\r\nAll settings API methods should be protected by standard ACL, allowing us to deny access to certain settings for different user groups.\r\n\r\nThe only question here is whether or not Apps would validly need to know what databaseVersion Ghost is currently running. If this is true, then we need to find a different way to deny access to the dbHash."
2059,'jgable',"ACL for Apps\nAs per the explanation here: https://github.com/TryGhost/Ghost/wiki/App-Ideas-Permissions#wiki-permissions\r\n\r\nWe want to make it possible for Apps to register for permissions in the same way that users have permissions. Those permissions are enforced in various places, most importantly in the API.\r\n\r\nApps need to make internal requests to the API methods via the proxy object. \r\n\r\nTherefore we need a way to:\r\n\r\n1. Determine or define which app is making the request. \r\n     - This should probably be an extension of the apiContext (see #2058) as we still need to know on behalf of which user the request is being made.\r\n2. Determine what permissions the app has.\r\n    - This should probably be done by fetching those permissions from the correct app's config\r\n3. Provide a way to ask if the current app and the current user have permission to perform the action they are trying to perform\r\n    - This should likely be an extension of canThis, which takes a more complex context than a single user. `canThis({app: 'my-app', user: 1}).edit.post(2);\r\n\r\nIt's important to deal with permissions for both the app and the user, as otherwise in future it could be possible for a less privileged user to use an app to do things they shouldn't be able to."
2058,'sebgie',"ACL & the API: Current user everywhere\nIn order to roll out full access control, we need to update, improve and fix the concept of `apiContext` which exists in the [API request handler](https://github.com/TryGhost/Ghost/blob/master/core/server/api/index.js#L47).\r\n\r\nCurrently API context is set to:\r\n\r\n> `user: req.session && req.session.user`\r\n\r\nThis is wrong, by accident, the `&&` evaluates to `true` which evaluates to `1` which is the correct user ID in the majority of cases, but I believe this should really be:\r\n\r\n> `user: req.session && req.session.user ? req.session.user : null`\r\n\r\nIn addition to this, we need to consider how to pass this concept of user through to every action which makes a change on a model, so that the `created_by`, `updated_by` and other user id's are set correctly."
2057,'hswolff',"Support for additional permalink structures\nCurrently, Ghost supports the following permalink structures:\r\n\r\n* Standard: `/:slug/`\r\n* Dated: `/:year/:month/:day/:slug/`\r\n\r\nIn order to make it easier for people to move their blogs from other platforms to Ghost, we want to support any permalink structure which contains any of the following items:\r\n\r\n* `:slug`\r\n* `:id` \r\n* `:year`\r\n* `:month`\r\n* `:day`\r\n* santised custom text containing a-z, 0-9, - or _\r\n\r\nTo be a valid permalink, each item must be separated by a '/', and there should be a maximum of 5 items. the permalink must contain one of `:slug` or `:id` so that the post can be identified.\r\n\r\nSo I could set my blog posts to have a URL like any of these:\r\n\r\n* `/:year/:month/:slug/\r\n* `/:year/:slug/\r\n* `/blogpost/:id/\r\n* `/post/:year/:month/:day/:slug/`\r\n\r\nAt the completion of this issue, Ghost should support these structures if the permalink setting is modified directly in the DB. The UI for configuring the permalink in admin is covered by issue #1631. \r\n\r\n*Note:*\r\n\r\nSome things we should consider for the future are:\r\n* whether or not to support adding `.html` to the end of URLs so that imports from blogger work, \r\n* whether to import custom data and allow that in the URL, like the id which is in tumblr URLs\r\n\r\nWe do want to make it possible to have an app that does mass re-writing/redirecting of URLs... so we could solve these problems by having an app 301 redirect the .html out of blogger urls, and the id out of tumblr urls, in which case blogger becomes `/:year/:month/:slug/` and blogger becomes `/post/:slug/`or even the default `/:slug/`.\r\n"
2049,'sebgie','Guard against multiple signup events\nFixes #1841\r\n* Added initial flag "no" for submission into Signup View\r\n* Flag set to "yes" if submit button clicked\r\n* Error thrown if flag is "yes", thus no subsequent submission sent to API\r\n* Flag set to "no" if ajax returns with error\r\n\r\nResubmitted against 0.4-maintenance'
2048,'sebgie',"Fix error page resources loading when forceAdminSSL is true\ncloses #1837\r\n- moved admin theme static resource service above 'checkSSL', otherwise\r\n  when forceAdminSSL is true it will try to redirect them to HTTPS, and\r\n  error pages will be unstyled"
2047,'sebgie',"Detect SSL connection whether or not behind a proxy\ncloses #1836\r\n- adding server.enable('trust proxy') to let connect framework do the work\r\n  of detecting X-Forwarded-Proto header\r\n- replacing explicit checking for the X-Forwarded-Proto header with just\r\n  'req.secure' boolean check"
2044,'ErisDS',"Move styling from some elements from IDs to classes\nCloses #1605\r\n\r\n* Move styling for `#signup`, `#forgotten`, `#reset`, `#login`, `#usermenu` and `#notifications` to classes\r\n\r\nNo IDs have been added or removed, so any events shouldn't be affected and it passes all tests."
2042,'sebgie','Refactor click handlers on upload button.\nInstead of binding and unbinding, bind the data to the outer scope.\r\n\r\nFixes https://github.com/TryGhost/Ghost/issues/2028.'
2036,'ErisDS',"bug caused by unidecode's bug\nclose #1986\r\n- remove URL reserved chars after unidecode, because unidecode will produce some URL reserved chars."
2035,'sebgie',"Post settings don't render on change\nThis is an alternative solution to #1908\r\n\r\nfixes #1908\r\n\r\n- each individual update function handles rendering its own item on success or failure, rather than re-rendering the whole group\r\n- also resolved a bug where the published date didn't get reset properly on error"
2032,'ErisDS','Have NProgress called for all ajax calls\nfixes #2011\r\n\r\n- rather than trigger NProgress for fetch calls\r\n I’ve moved it to be used for all sync calls\r\n\r\n- issue #2011 was a result of NProgress only being\r\n called during a fetch() call, which when saving\r\n is not used - save() is.  Sync is used by all\r\n ajax calls.'
2025,'sebgie','Start up safely when the activeTheme is not present\nfixes #2000\r\n\r\n- resolves errors when attempting to start Ghost without the active theme present\r\n- the frontend will render a 500 error page safely\r\n- issues with themes that have an error template are resolved separately in #2018'
2024,'sebgie',"Use absolute path when storing images\ncloses #1983\r\n\r\nImages were uploaded to a relative location, based on the current directory. So if you start Ghost using `node ~/Ghost/index.js`, it would put all images at `~/content/images`.\r\n\r\nThis changes it to use a absolute directory, based on Ghost's root directory (see `server/config/paths.js`)."
2010,'ErisDS','Remove the template method in Ghost.Views.Notification, because it has already inherits from Ghost.TemplateView.\nRemove the template method in Ghost.Views.Notification, because it has already inherits from Ghost.TemplateView.'
2008,'hswolff','[Docs] Documentation regarding Ghost as an NPM module\nI am excited that the newest version of Ghost supports its usage as an NPM module. However, I could not figure out how to use it properly, specifically how to create custom routes to new pages (ex: about, contact, etc)'
2000,'ErisDS',"Bug: Bad behaviour when active theme is not available\n### Issue Summary\r\n\r\nIf someone removes or renames the currently active theme then regardless of whether we are already running, or restarting, and whether we are in prod or dev mode, the admin should always continue to function normally (which it does) and the blog frontend should always display a proper 500 error explaining the problem.\r\n\r\nCurrently:\r\n\r\nIf the blog is running when the theme is removed, a load of unhandled rejection errors are thrown (only visible in dev mode), but we do eventually get a proper 500 page.\r\n\r\nIf the blog is running, and the theme did have an error.hbs template, then we get a really ugly error message about not being able to find that template.\r\n\r\nIf the blog is restarted the frontend gets an unhandled promise rejection error (only visible in dev mode). In dev mode it hangs, and in production mode it seems to crash / show an 'Internal Server Error' message.\r\n\r\n### Steps to Reproduce\r\n\r\n1. navigate the frontend of the blog to make sure the theme is working\r\n2. rename the currently active theme\r\n3. navigate the blog again, see the ugly error messages\r\n4. try restarting\r\n5. repeat these steps in dev mode and production mode and with themes that do and don't have a custom error.hbs template\r\n\r\nNo matter what happens, Ghost should keep running and serving error messages both as pages, and in the console so that people can debug the problem.\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: 0.5.\r\n"
1992,'ErisDS',"Bug: meta_title shouldn't explode if no title is available\n### Issue Summary\r\n\r\nIf meta_title gets handed a context that doesn't contain `.post.title` it shouldn't explode\r\n\r\n### Steps to Reproduce\r\n\r\n1. create an error.hbs template in your currently active theme\r\n2. add a helper that won't work on error pages, such as `{{meta_title}}`\r\n3. restart the blog and visit a 404 page\r\n4. witness the blog crashing with the error below\r\n\r\n![error](http://cl.ly/image/392o211K2x3y)\r\n\r\nWe have no control over how theme devs use our helpers, so if the context they are used in doesn't make sense, we need to be sure to output nothing, rather than throwing an error\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: 0.4"
1991,'ErisDS',"Bug: Errors in a theme error.hbs should not crash Ghost\n### Issue Summary\r\n\r\nIf a user defines their own template for rendering errors, and then there is a problem trying to render that template, Ghost should fall back to the standard error template.\r\n\r\n### Steps to Reproduce\r\n\r\n1. create an error.hbs template in your currently active theme\r\n2. add a helper that won't work on error pages, such as `{{meta_title}}`\r\n3. restart the blog and visit a 404 page\r\n4. witness the blog crashing with the error below\r\n\r\n![error](http://cl.ly/image/392o211K2x3y)\r\n\r\nErrors thrown by error handlers is always a horrible state to be in! We should never allow this to happen.\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: 0.4"
1990,'novaugust','Update frontend JS to use `js-` prefixed classes as hooks into the DOM\nAs per our (should have been updated months ago) [frontend code standards](https://github.com/TryGhost/Ghost/wiki/Code-standards#frontend-development-standards-html--css)\r\n\r\nWe are trying to use the [slightly obtrusive JavaScript](http://ozmm.org/posts/slightly_obtrusive_javascript.html) method of separating classes used for presentation from those used for behaviour.\r\n\r\nTherefore anything used to hook in from jQuery or Backbone should use a class name which is prefixed with `js-` and never use ids etc.\r\n\r\nThere are a few places where this is not done including, but not limited to:\r\n\r\n- login view: [client/views/login.js#L14](https://github.com/TryGhost/Ghost/blob/master/core/client/views/login.js#L14)\r\n- mobile interactions [/client/mobile-interactions.js#L11](https://github.com/TryGhost/Ghost/blob/master/core/client/mobile-interactions.js#L11)\r\n- etc, etc!\r\n\r\nVice versa, `js-` prefixes should never appear in our SASS, so https://github.com/TryGhost/Ghost/blob/master/core/client/assets/sass/modules/global.scss#L949 needs to be removed.'
1988,'JohnONolan',"Rename 'plugins' to 'apps'\nThere are several places throughout the codebase where we need to rename `plugins` to `apps`.\r\n\r\nThis includes, but is not limited to:\r\n\r\n- The `content/plugins` folder\r\n- The `core/server/plugins` folder\r\n- Variables throughout Ghost\r\n- Settings\r\n- Any comments\r\n\r\nIt would be a good idea to get this done as early as possible."
1983,'jgillich','Starting server outside of root causes upload issues\nWhen starting the server from outside the root, ie `forever start ~/sites/ghost/index.js` any uploaded file will end up in `~/content/images/2014/Jan`.\r\n\r\nSorry for not using the issue template. Felt as an easy enough issue to describe.\r\n\r\nThis happened both on 0.4.0 and master @ 91902575087adfea51ab86d4e74f516609751f15'
1979,'ErisDS','Fix for session handling\ncloses #1978\r\n- wait for async calls before callback()'
1978,'sebgie','Bug: Timing issue with database sessions\nThis is a bug I can not reproduce, but was reported on the forum. \r\n\r\nhttps://ghost.org/forum/installation/4435-cannot-login-after-upgrading-to-0-4/\r\n\r\nAfter some investigation I think that there is a problem with asynchronous calls in `bookshelf-session.js`.'
1975,'ErisDS','Theme Errors should not crash the blog\n### Issue Summary\r\n\r\nThis is the second part, or follow up to #1964 \r\n\r\nNo matter what happens in a theme, or how bad an error is, the blog should not crash, it should just show a 500 error page with details of the error.\r\n\r\n### Steps to Reproduce\r\n\r\n* Add an invalid handlebars helper to a partial, such as {{http://my-ghost-blog.com}}\r\n* Add an empty partial and include it in the default template\r\n\r\n### Technical details: \r\n\r\n* Ghost Version: 0.4.0\r\n* Mode: Production'
1969,'hswolff','Custom Page Templates\nNew feature:\r\n\r\npage.hbs is the default template used for pages, but I should be able to create custom layouts for custom pages.\r\n\r\nLet\'s say I create a page called "Contact" - it generates a slug of `contact` - Ghost should check to to see if page-contact.hbs exists, and if it does, use it.\r\n\r\nIt should also add `page-template-contact` to `{{body_class}}`\r\n\r\nCustom page templates in the context of Ghost are intended as one-off, special templates for individual pages. Not multi-use-case templates like "full width" which have a 1:many application.'
1967,'ErisDS','body_class overhaul\nWhen _page.hbs_ template is used, `body_class` list "post-template" instead of "page-template".\r\n"*-template" class name should change based on currently used `.hbs` filename.\r\nThat would be really helpful when developing themes.'
1964,'ErisDS',"Empty partials cause error 500\nSince 0.4 there is an exception thrown on main index page:\r\n```\r\nYou must pass a string or Handlebars AST to Handlebars.compile. You passed function (context, options) { if (!compiled) { compiled = compileInput(); } return compiled.call(this, context, options); }\r\n```\r\n\r\nOccurs when one of below custom/partials is blank:\r\nhttps://github.com/oswaldoacauan/ghostium/tree/master/src/partials/custom\r\n\r\nException is thrown here:\r\n```\r\n// If the partial view is not compiled, it compiles and saves in handlebars\r\n    if (typeof partial === 'string') {\r\n        partial = hbs.handlebars.compile(partial);\r\n        hbs.handlebars.partials[name] = partial;\r\n    }\r\n```\r\n\r\nhttps://github.com/TryGhost/Ghost/blob/968176c7d70cd171f22f4f67476a46f227c1c855/core/server/helpers/template.js#L19\r\n\r\nAdding below to an empty partial fixes an issue:\r\n```\r\n{{! any comment here }}\r\n```\r\n\r\n* Ghost Version: master (latest commit: c82d2eadba0176ce96ec91d57bfa8582cae50f95)\r\n* Server OS: Archlinux, Ubuntu 13.04, OSX 10.8.5\r\n* Node Version: 0.10\r\n\r\nOriginal issue reported [here](https://github.com/oswaldoacauan/ghostium/issues/47#issuecomment-32184528)"
1961,'halfdan','Bug: Ghost crashes under high load\n### Issue Summary\r\nWhen Ghost is under load it crashes when opening admin. This issue is probably related to #1960. When using 10 times the users Ghost doesn\'t return an error anymore, it crashes.\r\n\r\n### Steps to Reproduce\r\n\r\n- I used `siege` (http://www.joedog.org/siege-home/) to put some load on Ghost.\r\nFor the test I used `siege -c 100 -r 100 -b http://local.tryghost.org/` (-c 100 = 100 users; -r 100 = 100 repetitions; -b = no delay between requests)\r\n- While Ghost is under siege I opened http://local.tryghost.org/ghost with a web browser and got the following error.\r\n\r\n```\r\nERROR: Failed to lookup view "index"\r\nErrorPage\r\nGhost caught a processing error in the middleware layer.\r\n\r\nError: Failed to lookup view "index"\r\n    at Function.app.render (/home/vagrant/code/Ghost/node_modules/express/lib/application.js:493:17)\r\n    at ServerResponse.res.render (/home/vagrant/code/Ghost/node_modules/express/lib/response.js:798:7)\r\n    at /home/vagrant/code/Ghost/core/server/controllers/frontend.js:60:21\r\n    at NearFulfilledProxy.when (/home/vagrant/code/Ghost/node_modules/when/when.js:501:43)\r\n    at Promise._message (/home/vagrant/code/Ghost/node_modules/when/when.js:426:25)\r\n    at deliver (/home/vagrant/code/Ghost/node_modules/when/when.js:319:7)\r\n    at Array.4 (/home/vagrant/code/Ghost/node_modules/when/when.js:316:63)\r\n    at runHandlers (/home/vagrant/code/Ghost/node_modules/when/when.js:385:12)\r\n    at drainQueue (/home/vagrant/code/Ghost/node_modules/when/when.js:836:3)\r\n    at process._tickCallback (node.js:415:13)\r\n    at process._tickFromSpinner (node.js:390:15) \r\n\r\n\r\nERROR: Failed to lookup view "index"\r\nErrorPage\r\nGhost caught a processing error in the middleware layer.\r\n\r\nError: Failed to lookup view "index"\r\n    at Function.app.render (/home/vagrant/code/Ghost/node_modules/express/lib/application.js:493:17)\r\n    at ServerResponse.res.render (/home/vagrant/code/Ghost/node_modules/express/lib/response.js:798:7)\r\n    at /home/vagrant/code/Ghost/core/server/controllers/frontend.js:60:21\r\n    at NearFulfilledProxy.when (/home/vagrant/code/Ghost/node_modules/when/when.js:501:43)\r\n    at Promise._message (/home/vagrant/code/Ghost/node_modules/when/when.js:426:25)\r\n    at deliver (/home/vagrant/code/Ghost/node_modules/when/when.js:319:7)\r\n    at Array.4 (/home/vagrant/code/Ghost/node_modules/when/when.js:316:63)\r\n    at runHandlers (/home/vagrant/code/Ghost/node_modules/when/when.js:385:12)\r\n    at drainQueue (/home/vagrant/code/Ghost/node_modules/when/when.js:836:3)\r\n    at process._tickCallback (node.js:415:13)\r\n    at process._tickFromSpinner (node.js:390:15) \r\n\r\n\r\n/home/vagrant/code/Ghost/node_modules/express-hbs/node_modules/handlebars/dist/cjs/handlebars/base.js:58\r\n      throw new Error("Missing helper: \'" + arg + "\'");\r\n            ^\r\nError: Missing helper: \'foreach\'\r\n    at Object.<anonymous> (/home/vagrant/code/Ghost/node_modules/express-hbs/node_modules/handlebars/dist/cjs/handlebars/base.js:58:13)\r\n    at program1 (eval at <anonymous> (/home/vagrant/code/Ghost/node_modules/express-hbs/node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js:179:23), <anonymous>:15:150)\r\n    at Object.prog [as fn] (/home/vagrant/code/Ghost/node_modules/express-hbs/node_modules/handlebars/dist/cjs/handlebars/runtime.js:124:12)\r\n    at Object.<anonymous> (/home/vagrant/code/Ghost/node_modules/express-hbs/node_modules/handlebars/dist/cjs/handlebars/base.js:129:22)\r\n    at Object.eval (eval at <anonymous> (/home/vagrant/code/Ghost/node_modules/express-hbs/node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js:179:23), <anonymous>:96:26)\r\n    at /home/vagrant/code/Ghost/node_modules/express-hbs/node_modules/handlebars/dist/cjs/handlebars/runtime.js:92:31\r\n    at /home/vagrant/code/Ghost/node_modules/express-hbs/node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js:467:21\r\n    at render (/home/vagrant/code/Ghost/node_modules/express-hbs/lib/hbs.js:268:15)\r\n    at renderIt (/home/vagrant/code/Ghost/node_modules/express-hbs/lib/hbs.js:323:18)\r\n    at /home/vagrant/code/Ghost/node_modules/express-hbs/lib/hbs.js:353:14\r\n\r\nnpm ERR! ghost@0.4.0 start: `node index`\r\nnpm ERR! Exit status 8\r\nnpm ERR! \r\nnpm ERR! Failed at the ghost@0.4.0 start script.\r\nnpm ERR! This is most likely a problem with the ghost package,\r\nnpm ERR! not with npm itself.\r\nnpm ERR! Tell the author that this fails on your system:\r\nnpm ERR!     node index\r\nnpm ERR! You can get their info via:\r\nnpm ERR!     npm owner ls ghost\r\nnpm ERR! There is likely additional logging output above.\r\nnpm ERR! System Linux 3.2.0-51-generic\r\nnpm ERR! command "/home/vagrant/nvm/v0.10.24/bin/node" "/home/vagrant/nvm/v0.10.24/bin/npm" "start"\r\nnpm ERR! cwd /home/vagrant/code/Ghost\r\nnpm ERR! node -v v0.10.24\r\nnpm ERR! npm -v 1.3.21\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! \r\nnpm ERR! Additional logging details can be found in:\r\nnpm ERR!     /home/vagrant/code/Ghost/npm-debug.log\r\nnpm ERR! not ok code 0\r\n```\r\n\r\n\r\n### Technical details\r\n\r\n* Ghost Version: master - latest commit:  91902575087adfea51ab86d4e74f516609751f15\r\n* Client OS: OSX 10.9\r\n* Server OS: Ubuntu 12.04 on Vagrant\r\n* Node Version: v0.10.24\r\n* Browser: Chrome 31.0.1650.63\r\n\r\n'
1956,'sebgie','Show message and don\'t start if javascript files have not been built\ncloses #1782\r\n- added builtFilesExist function to check for files during startup. If built files do not exist Ghost startup is stopped and a link to the documentation is displayed\r\n- exported a scriptFiles object from server/helpers\r\n- removed "js-msg" about missing javascript from the UI'
1951,'ErisDS','Prevent stacking of password mismatch notification on /reset/\ncloses #1902\r\n- Missing call to clearEverything caused the new notifications to pile up on multiple failed submissions'
1950,'ErisDS','Enable Escape key to close tag suggestion popup\ncloses #1893\r\n\r\n- Checking the contents of search term after evaluating the keycode caused the suggestion box to be hidden and immediately reshown\r\n- Moving the if/else to the top of the function enables us to fix the issue without complicating the suggestion update logic'
1949,'sebgie','Including theme partials in a way that supports symbolically linked directories\nIncluding theme partials in a way that supports symbolically linked directories. This closes #1937\r\n\r\nI fixed all the JSLint errors being reported by `grunt validate` but I\'m not sure if everything\'s passing now. Excuse my unfamiliarly with node, I\'m not a NodeJs developer, just making a blog!\r\n\r\nThe tests end the same way that a vanilla checkout does:\r\n\r\n```bash\r\nRunning "express:test" (express) task\r\nStarting background Express server\r\nGhost is running in testing... \r\nListening on 127.0.0.1:2369 \r\nUrl configured as: http://127.0.0.1:2369 \r\nCtrl+C to shut down\r\n\r\nRunning "spawn-casperjs" task\r\nFatal error: \r\nPROMPT>\r\n```\r\n\r\nThis pull request uses `0.4-maintenance` as a base'
1948,'ErisDS','Fix display update notification\ncloses #1932\r\n\r\n- added showUpdateNotification with version check\r\n- added temp workaround for boolean values in database\r\n- changed default value from false to null\r\n- updated tests'
1947,'sebgie',"Post html and markdown columns should use mediumtext\nThis only affects MySQL\r\n\r\nAs per the old schema: https://github.com/TryGhost/Ghost/blob/ccd7b211f22472fd14577f996f43e2586c161a27/core/server/data/migration/000.js \r\n(Although I'm not convinced 'medium\r\n\r\nThe `html` and `markdown` columns of the Post table should use medium text, not just text.\r\n\r\nWe need to fix this in the schema at the very least, such that any blogs created with 0.4.1 are correct.\r\n\r\nWe also need to come up with a way to fix this on any blogs which were created with 0.4. This is tricky as knex doesn't yet let us do column type migrations. I think potentially we could add a piece of custom knex.raw code for MySQL 0.4.1 as part of the migrations initialization.\r\n\r\nLong term we can replace this with the automatic migrations when column type migration is supported.\r\n\r\n"
1941,'sebgie','sqlite3@2.2.0\nUpdates node-sqlite3 to v2.2.0\r\n\r\nThis version is compatible with 2.1.x but includes:\r\n\r\n - updated internal libsqlite3 from 3.7.17 -> 3.8.2 (http://www.sqlite.org/news.html) which includes the next-generation query planner http://www.sqlite.org/queryplanner-ng.html\r\n - improved binary deploy system using https://github.com/springmeyer/node-pre-gyp\r\n - binary install now supports http proxies\r\n - source compile now supports freebsd\r\n - fixed support for node-webkit\r\n - binaries are available: http://node-sqlite3.s3.amazonaws.com/index.html?path=Release/\r\n\r\nBecause of the update of the internally bundled libsqlite3 version this should be tested before going into production.'
1934,'JohnONolan','Show version number in admin\nI would like to see the current Ghost version running in the admin section so I can validate that I\'m running the latest version.\r\n\r\nWith validate I mean the current package version and not if I successfully upgraded to the newest version. I could off-course look at the package.json file but to do so I\'ll need shell access and know how npm/nodejs work.\r\n\r\nIf I look at #1260 I can see that work is done to get something like\r\n\r\n```\r\n{\r\n    "currentVersion": "0.3.3"\r\n}\r\n```\r\n\r\nAll I would like is to display this information on the admin pages.'
1932,'sebgie',"Bug: Update checker notification doesn't refresh after upgrade\n### Issue Summary\r\n\r\nAfter updating my Ghost 0.4-pre3 installation to 0.4, I noticed that the update checker didn't go away.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Install Ghost 0.4-pre3\r\n2. Load admin panel, notice super awesome friendly update notification.\r\n3. Upgrade to Ghost 0.4\r\n4. Load admin panel again. Notice the super awesome friendly update notification isn't gone :(.\r\n\r\nThis is a bug because upgrading Ghost should clear the update notification.\r\n\r\nIt looks like it's caused because when the update checker checks, it sets nextUpdateCheck in the settings table to the next date the update checker should run (really good idea). It also sets displayUpdateNotification if ghost should display a notification. Upgrading doesn't clear this, and it won't clear until the next update check.\r\n\r\n### Technical details\r\n\r\n* Ghost Version: 0.4\r\n* Client OS: Debian Jessie\r\n* Server OS: Debian Jessie\r\n* Node Version: 0.10.24\r\n* Browser: Chrome"
1928,'ErisDS','[WIP] Added friendly handling/error message for nonexistent plugin\nFixes #1829\r\n\r\n* Added try-catch block in `core/server/plugins/loader.js` to catch and reject with an error when `getPluginByName` fails (meaning `require(getPluginRelativePath(name))` failed, meaning the plugin directory doesn\'t exist).  Error message as follows:\r\n\r\n> Error loading plugin named \\<name>; plugin directory (/content/plugins/\\<name>) does not exist."\r\n\r\n* Added .otherwise blocks with error logs to `core/server/plugins/index.js` to catch the new rejections and log error message to console'
1927,'sebgie','Fixed issue with adding multiple new tags to a post\nFixes #1907\r\n\r\nRefactored `updateTags` to correct a loop issue where the `insert`\r\nmethod was mistakingly being passed rather than `update`, triggering a\r\nduplicate PK SQL error.'
1901,'ErisDS','randomly logged out\nSummary of Issue \r\n------------------------------- \r\n\r\nI am randomly (but reproducibly) logged out of /ghost interface when viewing Content tab.\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\nThese are the steps I performed when I noticed this issue.  I started over and did them again step by step and was able to reproduce it.  I have NOT tried to simplify the test case yet.  \r\n\r\n* delete ghost database\r\n* start ghost with npm start --production\r\n* go to yoururl.com/ghost\r\n* create user\r\n* click on New Post\r\n* fill in title and body\r\n* change to publish now\r\n* click publish now\r\n* go to yoururl.com in a new tab\r\n* open your new post\r\n* go back to other tab with ghost admin interface\r\n* refresh the page\r\n* click on Content tab\r\n\r\n(animated gif to large to attach here so here it is: https://www.dropbox.com/s/5mdgijj3vjevj7f/logged%20out.gif)\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nI am logged out of ghost and taken to the following URL:\r\n\r\n/ghost/signin/\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.5\r\nServer OS: Amazon Linux AMI 2013.09.2\r\nNode Version: 0.10.24\r\nGhost Build Number: 0.4.0-pre2\r\nLatest Commit:\r\nBrowser: Chrome 31.0.1650.63\r\n\r\nWith debug on in the config.js file this is the out put from right before I am logged out\r\n\r\n```97.94.130.109 - - [Sat, 11 Jan 2014 04:34:29 GMT] "GET /ghostdebug/ HTTP/1.1" 304 - "http://ec2-54-200-239-157.us-west-2.compute.amazonaws.com/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36"\r\n{ sql: \'insert into "sessions" ("expires", "id", "sess") values (?, ?, ?)\',\r\n  bindings: \r\n   [ 1389458069830,\r\n     \'aRSPeZdTKa503yKxpZTEkEof\',\r\n     \'{"cookie":{"originalMaxAge":43200000,"expires":"2014-01-11T16:34:29.830Z","httpOnly":true,"path":"/ghost"}}\' ],\r\n  __cid: \'__cid1\' }\r\n97.94.130.109 - - [Sat, 11 Jan 2014 04:34:29 GMT] "GET /shared/vendor/jquery/jquery.js?v=9a923f2500 HTTP/1.1" 304 - "http://ec2-54-200-239-157.us-west-2.compute.amazonaws.com/ghostdebug/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36"\r\n97.94.130.109 - - [Sat, 11 Jan 2014 04:34:29 GMT] "GET /assets/js/jquery.fitvids.js?v=9a923f2500 HTTP/1.1" 304 - "http://ec2-54-200-239-157.us-west-2.compute.amazonaws.com/ghostdebug/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36"\r\n97.94.130.109 - - [Sat, 11 Jan 2014 04:34:29 GMT] "GET /assets/css/screen.css?v=9a923f2500 HTTP/1.1" 304 - "http://ec2-54-200-239-157.us-west-2.compute.amazonaws.com/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36"\r\n97.94.130.109 - - [Sat, 11 Jan 2014 04:34:29 GMT] "GET /assets/js/index.js?v=9a923f2500 HTTP/1.1" 304 - "http://ec2-54-200-239-157.us-west-2.compute.amazonaws.com/ghostdebug/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36"\r\n97.94.130.109 - - [Sat, 11 Jan 2014 04:34:29 GMT] "GET /assets/css/normalize.css HTTP/1.1" 304 - "http://ec2-54-200-239-157.us-west-2.compute.amazonaws.com/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36"\r\n97.94.130.109 - - [Sat, 11 Jan 2014 04:34:30 GMT] "GET /assets/fonts/icons.woff HTTP/1.1" 304 - "http://ec2-54-200-239-157.us-west-2.compute.amazonaws.com/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36"\r\n{ sql: \'select "sessions".* from "sessions" where "id" = ? limit 1\',\r\n  bindings: [ \'aRSPeZdTKa503yKxpZTEkEof\' ],\r\n  __cid: \'__cid1\' }\r\n{ sql: \'select "users".* from "users" where "id" is null limit 1\',\r\n  bindings: [],\r\n  __cid: \'__cid1\' }\r\n{ sql: \'select "users".* from "users"\',\r\n  bindings: [],\r\n  __cid: \'__cid1\' }\r\n{ sql: \'select "sessions".* from "sessions" where "id" = ? limit 1\',\r\n  bindings: [ \'aRSPeZdTKa503yKxpZTEkEof\' ],\r\n  __cid: \'__cid1\' }\r\n97.94.130.109 - - [Sat, 11 Jan 2014 04:34:33 GMT] "GET /ghost/ HTTP/1.1" 302 84 "http://ec2-54-200-239-157.us-west-2.compute.amazonaws.com/ghost/editor/3/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36"\r\n{ sql: \'update "sessions" set "expires" = ?, "id" = ?, "sess" = ? where "id" = ?\',\r\n  bindings: \r\n   [ 1389458073078,\r\n     \'aRSPeZdTKa503yKxpZTEkEof\',\r\n     \'{"cookie":{"originalMaxAge":43200000,"expires":"2014-01-11T16:34:33.078Z","httpOnly":true,"path":"/ghost"},"_csrfSecret":"0yZMA79HgUsyZEcCCAczwU8g"}\',\r\n     \'aRSPeZdTKa503yKxpZTEkEof\' ],\r\n  __cid: \'__cid1\' }\r\n{ sql: \'select "sessions".* from "sessions" where "id" = ? limit 1\',\r\n  bindings: [ \'aRSPeZdTKa503yKxpZTEkEof\' ],\r\n  __cid: \'__cid1\' }\r\n{ sql: \'select "users".* from "users" where "id" is null limit 1\',\r\n  bindings: [],\r\n  __cid: \'__cid1\' }\r\n{ sql: \'select "users".* from "users"\',\r\n  bindings: [],\r\n  __cid: \'__cid1\' }\r\n{ sql: \'select "sessions".* from "sessions" where "id" = ? limit 1\',\r\n  bindings: [ \'aRSPeZdTKa503yKxpZTEkEof\' ],\r\n  __cid: \'__cid1\' }\r\n97.94.130.109 - - [Sat, 11 Jan 2014 04:34:33 GMT] "GET /ghost/signin/ HTTP/1.1" 200 2518 "http://ec2-54-200-239-157.us-west-2.compute.amazonaws.com/ghost/editor/3/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36"\r\n{ sql: \'update "sessions" set "expires" = ?, "id" = ?, "sess" = ? where "id" = ?\',\r\n  bindings: \r\n   [ 1389458073149,\r\n     \'aRSPeZdTKa503yKxpZTEkEof\',\r\n     \'{"cookie":{"originalMaxAge":43200000,"expires":"2014-01-11T16:34:33.149Z","httpOnly":true,"path":"/ghost"},"_csrfSecret":"0yZMA79HgUsyZEcCCAczwU8g"}\',\r\n     \'aRSPeZdTKa503yKxpZTEkEof\' ],\r\n  __cid: \'__cid1\' }```'
1855,'sebgie','How to setup SSL \nFull documentation on how to setup and configure Ghost with SSL'
1854,'sebgie','Import should be done via ajax instead of form submit\nIn some senses this is a duplicate of #1654\r\n\r\nHowever, this issue refers only to changing how import is done, so that import and upload can both be moved after the csrf middleware.\r\n\r\nThe import tool should be changed to work in much the same way as the reset tool, such that the form is submitted using ajax and csrf is set using headers, rather than a form field.\r\n\r\nThis means that the field does not need to be parsed out in order for csrf to work, and the csrf middleware can be moved before the upload and import routes.\r\n\r\nGhost busboy should then be set as part of the middleware stack for the specific routes in routes/admin and routes/api rather than being set in middleware/index, so that it is explicit and clear that these routes require auth and csrf protection.'
1841,'javorszky',"Signup UI permits race condition\nOn a raspberry pi, bcrypt is slow as a\r\n![dolla-dolla-bill-yall-sloth-meme](https://f.cloud.github.com/assets/1196299/1844511/46347b4a-7533-11e3-8af4-d0fa97e5ccdb.jpg)\r\n\r\nThis of course means that when signing up, that might take a while. However, there is no indicator that anything is happening, so one might click the sign up button a bunch of times before Ghost ever gets back to you. If you do that, Ghost will flip a table. In slow motion. Much like \r\n![l5o-qkzsaku0yq36vaqymq2](https://f.cloud.github.com/assets/1196299/1844514/c706c714-7533-11e3-87e6-e1d7849f2646.gif)\r\nResulting in\r\n![screenshot 2014-01-04 11 22 26](https://f.cloud.github.com/assets/1196299/1844515/d0dcbcc6-7533-11e3-8401-caeefb8e0101.png)\r\n\r\nThe problem is that Ghost receives the data from the frontend, and starts working on it, but it takes time to actually finish hashing the password. During this time the front end is not updated, thus leaving the end user clueless about whether anything is happening. If the user then clicks the signup button, Ghost receives subsequent requests to create new users. Because the first request is not finished yet, the test whether there's already a user present in the system will fail, so Ghost will process the request as if there wasn't, trying to add a new user. Meanwhile the first request finishes, adds the user, and the second request is halfway through. That will mean that the second request got past Ghost's check, and encounters nasty database constraints, resulting in epic failure. The first user is still in though, and as far as I can tell, it's not broken, but unpleasant."
1809,'sebgie',"Fixing Admin force SSL redirect, adding more options\nFixing SSL redirect handling behind a proxy (`sever.enable('trust\r\nproxy')`). Also fixing handling of Admin theme resources, which should be\r\nserved via HTTP when requested.\r\n\r\nAdding more options:\r\n\r\n  1. Send a non-301 response - for example, 401 Unauthorized\r\n  2. Configure a different hostname for SSL (e.g. 'https://secure.myblog.com')\r\n\r\nFixing #1836, #1837. Implementing #1838."
1800,'ErisDS',"[Build Failure] Date permalinks don't enforce format\nThe functional tests are currently failing because we're now in January, and dated permalinks are lapsing to\r\n\r\n`/2014/1/1/slug`\r\n\r\ninstead of \r\n\r\n`/2014/01/01/slug`\r\n\r\nEither works for fetching a post as does\r\n\r\n`/2014/201/01/slug`\r\n\r\nWe need to be a little stricter and enforce the  4/2/2 number format \r\n\r\nEffectively.. we've got a millenium bug :astonished: "
1794,'ErisDS','New first-run/install process\nIn 0.5 we want to have a slightly more comprehensive (and sexy) first-run process for users. \r\n\r\nIt\'s a little more verbose/helpful - and includes an option to set blog title right off the bat. \r\n\r\nThere are two main parts to this issue:\r\n\r\n## The Front End\r\n\r\nThis is the new design for the front end for the first-run process. It is similar to `/ghost/signup/` but different. It should probably live on `/ghost/setup/`\r\n\r\nThis should re-use as many of our standard form and button style components as possible. Only over-riding where required.\r\n\r\nThis needs to be fully responsive, again leveraging existing patterns. \r\n\r\n![first-run](https://f.cloud.github.com/assets/120485/1821507/9a5e1af8-7134-11e3-9767-ae2a431c5374.png)\r\n\r\nNotes:\r\n\r\n* Wrapper max-width: 500px\r\n* Wrapper padding: 30px\r\n* Title: 2.6rem\r\n* Subtitle: 1.6rem\r\n* Labels: 1.4rem\r\n* Input descriptions: 1.2rem\r\n* Light text = $lightgrey\r\n* Dark text = $midgrey\r\n\r\n## The Back End\r\n\r\nIn addition to the new UI - we also want to do a couple of automated/nice (sexy) things behind the scenes.\r\n\r\n1. It would be great if we could try to handle the setting of blog_url in a nicer way. Ideally: check if it has been set to something other than "my-ghost-blog.com" in config.js - if so, do nothing - if not write the blog_url in config.js with the base url from wherever example.com/ghost/setup/ is run. \r\n\r\n2. Set an automatically generated blog.description of "Thoughts, stories and ideas by [user.full_name]"'
1776,'ErisDS','Opening rss feed with no user created results in:  "404 - User not found"\nSummary of Issue \r\n------------------------------- \r\n\r\nBefore creating a Ghost user if you click on the RSS link you will get a "404 - User not found" error\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n* Install new instance of Ghost\r\n* do NOT create a user\r\n* on the Ghost home page click on the rss link at the bottom\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nnasty 404 error\r\n\r\nDesired result \r\n------------------------------- \r\n\r\nif no users exsist use "Ghost" as author?\r\ndisable rss feed until user is created?  \r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.5\r\nServer OS: Amazon Linux AMI 2013.09.2\r\nNode Version: 0.10.24\r\nGhost Build Number: 0.3.1\r\nLatest Commit: 64cf2b1b24642d9814e851a67ec610c73b526bc3\r\nBrowser: Chrome 31.0.1650.63'
1765,'ErisDS',"URL inconsistencies in helpers & res.locals\nThere are a number of inconsistencies about how urls are generated / built in the server side helpers, and elsewhere.\r\n\r\n- url uses some fancy code which should be much more exhaustive, and usable by other parts of the codebase\r\n- ghost_head generates the wrong route for canonical - should be using the same code as url, and uses two different url generation techniques - one for relative and one for absolute \r\n- pageUrl doesn't provide the subdir\r\n\r\nThere are no unit tests yet to ensure the helpers cope with subdirs\r\n\r\nExtensive use is made of this.ghostRoot, and res.locals also defines a path variable - this can probably be cleaned up / renamed.\r\n\r\n**Note:** I'm raising this half way through fixing these issues - it is an extension to #1754\r\n"
1755,'ErisDS','Putting Ghost under a "ghost" subdirectory doesn\'t work\nIn my config file, I did:\r\n\r\n```\r\nconfig = {\r\n    development: {\r\n        url: \'http://127.0.0.1:2368/ghost/subdir\',\r\n...\r\n```\r\n\r\nThis broke the website:\r\n\r\n![screen shot 2013-12-25 at 11 45 31 am](https://f.cloud.github.com/assets/1204698/1808977/d65ef7a0-6d94-11e3-9c70-7173928cfd2c.png)\r\n\r\nThis issue can be taken one of two ways:\r\n\r\n * If Ghost wants to support users using a subdirectory named `ghost`, then this issue needs to be fixed\r\n * If Ghost doesn\'t want to support users using a a subdirectory named `ghost`, then this should be explicitly documented'
1752,'JohnONolan','short cover image hides profile page header\nI have a short (50px tall) image as my author cover which causes the header on the profile edit page to shift upwards too much. This causes the user name input box and the change cover button to be out of reach.\r\n\r\n[Screenshot here](https://f.cloud.github.com/assets/3165757/1807803/4d3937a2-6d16-11e3-9b77-8a8235c03940.png).\r\n'
1730,'ErisDS',"Content disappearing from the content screen\nIt has been reported a few times on [the forums](https://ghost.org/forum/using-ghost/3609-posts-on-content-gone-missing/2/) that posts go missing on the content screen after publishing a post.\r\n\r\nInspecting the databases has shown that the post is marked as having published status, but the `published_at` and `published_by` fields are set to NULL. \r\n\r\nThis means that the underlying issue is probably to do with the mis-timing of the `saving` and `creating` functions in bookshelf. I believe that this is largely resolved in the later versions of bookshelf, such that the events happen one after the other.\r\n\r\nHowever, in the case that the status is published, but the date is null, this causes a JavaScript error on the content screen including showing the 'no posts yet' message after you add a new one - meaning it's almost impossible to get out of this weird situation.\r\n\r\nWe need to at the very least fix the JS error.\r\n"
1722,'pmgarman','Tags not included in RSS feed\nTags of a blogpost are not included as categories in the RSS feed.\r\n\r\nOriginally posted on the forum here: https://ghost.org/forum/bugs-suggestions/3689-tags-not-included-in-rss-feed/'
1718,'ErisDS',"Unhandled promise rejection error when sending password reset\nWhen trying to send a password reset email, an unhandled promise rejection error is thrown if mail is not set\r\n\r\nSteps to reproduce:\r\n\r\n- ensure that there is no mail config in config.js\r\n- attempt to reset password at `/ghost/forgotten/`\r\n- see error in console:\r\n\r\n```\r\n[promises] Unhandled rejections: 1\r\n[ { reason: [Error: Email Error: Cannot read property 'fromaddress' of undefined],\r\n    message: 'Error: Email Error: Cannot read property \\'fromaddress\\' of undefined',\r\n    stack: \r\n     [ '=== Unhandled rejection escaped at ===',\r\n       '    at GhostMailer.send (/Users/hannah/Ghost/Ghost/core/server/mail.js:102:8)',\r\n       '    at api.users.generateResetToken.then.then.notification.type (/Users/hannah/Ghost/Ghost/core/server/controllers/admin.js:172:27)',\r\n       '  --- new call stack ---',\r\n       '    at GhostMailer.send (/Users/hannah/Ghost/Ghost/core/server/mail.js:93:32)',\r\n       '    at api.users.generateResetToken.then.then.notification.type (/Users/hannah/Ghost/Ghost/core/server/controllers/admin.js:172:27)',\r\n       '  --- new call stack ---',\r\n       '    at Object.read (/Users/hannah/Ghost/Ghost/core/server/api/settings.js:129:53)',\r\n       '    at GhostMailer.send (/Users/hannah/Ghost/Ghost/core/server/mail.js:93:18)',\r\n       '  ...[filtered frames]...',\r\n       '    at api.users.generateResetToken.then.then.notification.type (/Users/hannah/Ghost/Ghost/core/server/controllers/admin.js:172:27)',\r\n       '  --- new call stack ---',\r\n       '    at Object.read (/Users/hannah/Ghost/Ghost/core/server/api/settings.js:129:20)',\r\n       '    at GhostMailer.send (/Users/hannah/Ghost/Ghost/core/server/mail.js:93:18)',\r\n       '  ...[filtered frames]...',\r\n       '    at api.users.generateResetToken.then.then.notification.type (/Users/hannah/Ghost/Ghost/core/server/controllers/admin.js:172:27)',\r\n       '  --- new call stack ---',\r\n       '    at Object.read (/Users/hannah/Ghost/Ghost/core/server/api/settings.js:129:20)',\r\n       '    at GhostMailer.send (/Users/hannah/Ghost/Ghost/core/server/mail.js:93:18)',\r\n       '  ...[filtered frames]...',\r\n       '    at api.users.generateResetToken.then.then.notification.type (/Users/hannah/Ghost/Ghost/core/server/controllers/admin.js:172:27)',\r\n       '=== Caused by reason ===',\r\n       'Error: Email Error: Cannot read property \\'fromaddress\\' of undefined',\r\n       '    at /Users/hannah/Ghost/Ghost/core/server/mail.js:108:28' ] } ]\r\n```\r\n\r\n"
1715,'JohnONolan',"Web fonts are aliased in Chrome on Windows\nWeb fonts like 'Open Sans' tend to be aliased on Chrome on Windows, making them harder to read than we would like. This is a [well-known issue](http://stackoverflow.com/questions/11487427/is-there-any-font-smoothing-in-google-chrome) with Chrome, and it can be worked around a little bit by modifying the -webkit-text-stroke CSS property.\r\n\r\nTo show an example, here are before and after screenshots of the following style sheet applied on top of the Ghost default: \r\n\r\n    .rendered-markdown, .content-preview, .markdown-help-container {\r\n        -webkit-text-stroke: 0.6px;\r\n    }\r\n\r\n    .content-preview h1, .markdown-help-container th {\r\n        -webkit-text-stroke: 0.1px;\r\n    }\r\n\r\n    .content-preview h2 {\r\n        -webkit-text-stroke: 0.3px;\r\n    }\r\n\r\nBefore:\r\n![before](https://f.cloud.github.com/assets/130693/1785771/da739ecc-68e9-11e3-9261-156837f60dba.jpg)\r\n\r\nAfter:\r\n![after](https://f.cloud.github.com/assets/130693/1785774/e43d914c-68e9-11e3-92a4-1ed622a494a4.jpg)\r\n\r\nCare should be taken to not be overzealous with this property, however, as a wide stroke can lead to heavy shadowing and blurriness.\r\n\r\nGhost: 0.3.3\r\nBrowser: Chrome: 31.0.1650.63 m\r\nOS: Windows 7 SP1"
1712,'ErisDS','Featured posts, left hand column on content screen does not update\nWhen marking a post as featured, the left hand column does not update to show the featured star.\r\n\r\nThe left hand column in general does not listen for updates to the model.'
1703,'ErisDS',"Featured post star doesn't appear for drafts\nThe featured post star in the content management ~~system~~ screen is not appearing for drafts.\r\n\r\n![featured star](http://f.cl.ly/items/1x2i0c0q0M0K0M2a1e1R/Image%202013.12.18%2014%3A52%3A50.png)\r\n\r\nAlso - it appears to be misaligned - possibly didn't get updated when the admin font did."
1685,'sebgie','Unable to find setting: dbHash\n## To reproduce\r\n\r\n* Clean db\r\n* Sign up with an account\r\n* Immediately log out\r\n* Go to password recovery\r\n* Try to recover your password\r\n* Behold the glorious error message that is that. Screencap included for clearer instructions.\r\n\r\n## Screencap\r\n\r\n![unabletoreadsetting](https://f.cloud.github.com/assets/1196299/1751177/0dee189e-65d0-11e3-98f0-389f170b3453.gif)\r\n\r\n## Env\r\n* Mac OSX 10.9\r\n* node 0.10.22\r\n* npm 1.3.14\r\n* Chrome 31.0.1650.63'
1681,'ErisDS',"Importer: Don't override users or theme, or log out!\nThe original Ghost import tool on `/ghost/debug` was intended as a backup and restoration tool purely for Ghost.\r\n\r\nAs we are making this useful as an import tool for importing content from other blogs, and as more people are making use of it, we need to get rid of the functionality that overrides a user's credentials and logs them out.\r\n\r\nInstead, if a matching email address is found for a user that is to be imported, the feature can update any also matching name, bio, url, and location fields, but should not override the email address (as that is what is matched on), password, status or date fields (like last login). The import should also not cause a logout.\r\n\r\nEqually, activeTheme should not get overwritten. If the new theme isn't present on the new blog then the blog will fail to start."
1680,'sebgie','Secure Cookies\nIf a blog is using https it should probably use secure cookies too.\r\n\r\nProper explanation by @sebgie here: https://github.com/TryGhost/Ghost/issues/1300#issuecomment-29445650\r\n\r\n> Since the cookie is now only available on admin it would be sensible to change it to `secure` if HTTPS is forced. The secure flag will tell the browser to transmit the cookie over HTTPS only.\r\n\r\n> Should look something like this, but needs thorough testing:\r\n\r\n```\r\nexpress.session({\r\n    proxy : true, // add this when behind a reverse proxy, and you need secure cookies\r\n    cookie : {\r\n        secure : true,\r\n        ...\r\n    }\r\n}\r\n```'
1673,'ErisDS','Uploader UI Niggles\nWhen filestorage is set to false in config.js, the uploader should only ever show the URL mode, not dropzone mode. In this case, the icon to toggle back to dropzone mode should not show:\r\n\r\n![iconthing](http://f.cl.ly/items/3X441o1L2z3u3v2W3g35/Image%202013.12.14%2014%3A59%3A07.png)\r\n\r\nAlso, the icon to toggle does not have the right cursor, and also has a very small click area meaning you often end up with horrible blue chrome highlight everywhere:\r\n\r\n![uploaderhighlighted](http://f.cl.ly/items/3i430u3Z2H0T2g1U0Z0k/Image%202013.12.14%2015%3A06%3A29.png)'
1672,'sebgie','Image uploads default to url as though filestorage is set to false\nThis seems to have been caused by #1606 \r\n\r\nWhen you go to the editor and try to insert an image, the image uploader shows the url box instead of the dropzone:\r\n\r\n![no dropzone](http://f.cl.ly/items/0t2H3q1X423Q2n411w1O/Image%202013.12.14%2014%3A59%3A47.png)\r\n\r\nThis is behaving as though fileStorage is set to false in the `config.js` file, despite the fact that it is not. Not sure why the changes to express-hbs and our handlebars management is causing this, but I have tested various commits and it seems to be this one causing it.'
1655,'sebgie','Improvement: Refactor Models\nI have come across the issue that the post model has a problem with handling `saving` and `creating` events, since the two methods  are called simultaneously and rely partly on each other. Behavior I have seen so far:\r\n\r\n- slug fails validation since it is not set when validation is done  (prerequisite for #1401)\r\n- slug generation fails when multiple posts are imported with the same title'
1654,'sebgie','Improvement: Remove res.redirect() from API calls\nCalls to the public API (`ghost/api/...`) should not call `res.redirect()`. A return value should indicate if the operation was successful or not and the client side JavaScript is responsible to redirect the user to the appropriate user interface. This would allow third party applications to use the API methods with a custom user interface.'
1633,'sebgie',"[WIP] Replace validator's xss() with caja's sanitize()\nThis is not yet ready (tests fail for some reason), just putting it here for feedback.\r\n\r\nAs discussed in #1378, this replaces node-validator's xss filter with the one from caja.\r\n\r\nWhen you look at the changes, you will notice that this does not escape or replace the elements, instead it removes them entirely. This means that if you enter something like `<script></script>` in the title, you get told that an empty value isn't allowed. Probably not the best way to handle this.\r\n\r\nI did some digging and as far as I can see, escaping would require us to modify caja heavily. What we could easily do is white/blacklisting of elements & attributes (sanitize() uses a internal list of elements that it considers unsafe, probably fine for our use case), but escaping instead of removing them is not really what it's been made for."
1604,'ErisDS','Password reset link in email broken if url has trailing slash\nIn `config.js`, if you specify the url as `http://mydomain.com/`, then the reset link will have a double `//` in it. See:\r\n* `http://my-ghost-blog.com//ghost/reset/MTM4NjAwMzE1NjkzOXxnYWJvckBqYXZvcnN6a3kuY28udWt8UE1CeEtTNkozTHNkOFdzdm9MbWJPRTN4RVdReUdiM3lxSThpRFJEclNnaz0=/`\r\n*  `http://localhost:2368//ghost/reset/MTM4NjAwMjk4OTI3NXxnYWJvckBqYXZvcnN6a3kuY28udWt8OEZQdFJSTGkvUys1T2pLeHNjUnIrVFh6MEoyOGNmMCtKeU1GTHlkWjFyYz0=/`\r\n\r\nYou get the idea. One solution is not to set a trailing slash in `config.js`. Another is to remove that.\r\n'
1587,'JohnONolan',"Scoping tag styling to the tag control\nfixes #1309\r\n\r\nNot sure if we want to do this, but it seems logical and it's a simple fix which results in some pretty neat functionality :+1: "
1583,'ErisDS','Theme switching is broken\nProbably as a result of some of the refactoring work, but live switching themes no longer works.'
1582,'hswolff','Post Settings: Delay & debounce onBlur save event\nThis is a part of or continuation on from #1350 and #1351 \r\n\r\nAt the moment, whenever a change is made in the post settings menu, the post model is saved. This happens on blur and can be very quick.\r\n\r\nWe want to separate the save/sync from the model updates, and then introduce a delay of 0.5 seconds, and a debounce so that the model updates get made less frequently. This gives a user some time to make multiple changes quickly.'
1575,'hswolff','Kill the Ghost singleton (and any others) with fire\nFrom #360 \r\n\r\nIt is, at long last, time to get rid of the Ghost singleton. :fire: :boom: \r\n\r\nHallelujah!'
1563,'jgable','Enhancement: Invalidate cache header only for published posts\nWith the current implementation `X-Cache-Invalidate` headers are sent with every `POST`, `PUT`, `DELETE` response from `/ghost/api/posts`. Only posts with status = published should invalidate the cache.\r\n\r\nTricky part is that a change from published to draft and from draft to published needs to be detected to implement a working solution.\r\n\r\n'
1560,'matthojo','[Docs] Adding basic documentation for configuring nginx\nThis adds information for a basic nginx setup as a proxy with Ghost running in the background.\r\n\r\nThis closes #1324 (partially)\r\n\r\nFor adding a how to on setting up Apache and maybe other web servers it should be considered to "restructure" the documents, since it is very long already, i think.\r\n\r\nI also cleaned up the above sections a bit and added information to avoid minor pitfalls.'
1558,'PaulAdamDavis','Notifications: really long error messages cannot be dismissed\nWhen importing data it is possible to get a really really really long error message.\r\n\r\nI can provide a file which will cause this to happen so that it can be reproduced.\r\n\r\n![large error](http://f.cl.ly/items/0w0i013z2Q3V0g0B3u0x/Image%202013.11.25%2008%3A49%3A01.png)\r\n\r\nThis is an edge case, and we want to do further work to handle those error messages in this case, but nonetheless, I think the toaster style notifications should be tweaked to ensure the close button can never be outside of the viewport.\r\n\r\n**Update:** This can be reproduced by using the following old wordpress-ghost export file: https://dl.dropboxusercontent.com/u/531857/ghost/wp2ghost_export_1381230960.json\r\n\r\nThe bug that caused this to happen has been fixed in the later versions of the ghost wordpress plugin, but people may still try to use the old one and get error messages that are undismissable like this.'
1538,'javorszky','Nodemailer supports "direct" sending since v0.5.8\nCurrently if mail settings are not configured and sendmail command can not be found, sending e-mails [is disabled](https://github.com/TryGhost/Ghost/blob/119b0ea430552dc1a29c5d5af958d77ff227ed0c/core/server/mail.js#L35). \r\n\r\nUnderlying Nodemailer includes a new transport mechanism callled [direct](https://github.com/andris9/Nodemailer#setting-up-direct-transport) since v0.5.8 that is able to send e-mails directly without any relays by connecting to the recipients MX server. If sendmail is not found, this transport mechanism could be used by Ghost instead of disabling all mail.'
1498,'ErisDS','Email should not be considered case sensitive when logging in\nUsers are struggling to log back into Ghost, reported in #1469\r\nI think this is *sometimes* because the email is being treated as case-sensitive\r\n\r\n\r\n\r\n\r\n'
1491,'matthojo','[Translations: /it] Italian translation\n:)'
1478,'jgable',"Ghost Developer Tools 'proxy' object for apps\nAt the moment we pass the weird and wonderful `ghost` object to apps. This needs to change.\r\n\r\nWe need to create a new object for passing to apps which provides access to the data api, and to all of the registerXXX functions from Ghost, and will eventually provide access to all the apis in the Ghost Developer Tools.\r\n\r\nThen we need to swap in this new object in place of the ghost object when intialising apps."
1471,'jgable','Improved password reset tool\nWe need to improve the robustness of the password reset tool.\r\n\r\n* When someone hits the password reset button, ghost should generate a URL with a token which will take the user to a password reset form. That URL should then be emailed to the user.\r\n* If the email fails in anyway, we should show a useful message pointing the user to the mail configuration documentation.\r\n* The token should only be valid for 24 hours\r\n* The password reset form should allow a user to choose their own new password. It should be entered twice.\r\n* The password should be reset to the new password on successful completion of this form.\r\n* The reset password form should look much the same as the current forgotten password form, \r\n* The reset password form should live at /ghost/reset/\r\n* /ghost/reset/ should redirect to /ghost/forgotten/ if someone tries to access it without a valid token, if the token has expired this should be clearly messaged.'
1470,'ErisDS','Cache Control Headers\nRequires #1405 \r\n\r\nOnce we have asset management in place we can fully set cache control headers for Ghost.\r\n\r\nWe need to set proper cache headers for\r\n\r\n* /ghost/ admin routes \r\n* /ghost/api routes \r\n* frontend routes\r\n* managed assets\r\n* unmanaged assets (i.e. from themes not using the helper)\r\n* error pages\r\n* redirects\r\n\r\nI had a first stab at doing this here: 3f4a9e00ac\r\n\r\nMy idea was to create profiles which could be applied:\r\n\r\n* **Private** `no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0` - used for admin & api routes + error pages\r\n*  **Public** `public, max-age=0, must-revalidate` - used for frontend routes, unmanaged assets and probably for redirects\r\n* **Asset** `public, max-age=one-year, must-revalidate` - used for all managed assets\r\n\r\nWe can start to add a lot of this to non-assets without the asset management. '
1467,'JohnONolan','If no user exists, go to first-run process\nIf Ghost has just been set up and no user exists - we should send users to a first-run process which guides them through setting up the first user account and logging into Ghost for the first time.\r\n\r\nEverything should redirect to this page until the process has been completed. \r\n\r\nNeeds designs.\r\n\r\nSidenote: Cache control headers need to be set on this entire process to make sure that the redirects to this page are not cached.'
1466,'sebgie',"500 when should be 404 error message\nDon't know if you already know but commit `bb17e1c0e9a4bf93df059d4c40a9088f5e71c47d` broke the default error handeling.\r\nFor every 404 page it is showing a 500 message with `[object][object]` message.\r\n\r\nI have tested it with commit `dee054e2c3931135f1c63b3becd01333af99800b` and that is still showing proper 404 messages. Commit `bb17e1c0e9a4bf93df059d4c40a9088f5e71c47d` shows 500 messages.\r\n\r\nLooks like the changes in `core/server/api/index.js` are the problem here.\r\n\r\n"
1464,'gotdibbs','Automatic Update Available Notifications\nVery related, but separate to #1260 \r\n\r\nRegardless of any other functionality related to updates, the following should exist as a standalone thing:\r\n\r\nGhost should automatically check what the latest version of Ghost is and compare it to the version which is currently being used.\r\n\r\nIf an update is available, we should fire a green notification that reads:\r\n\r\n> A new version of Ghost is available! Hot damn.  [Upgrade now](#) \r\n\r\nUpgrade now should go to http://ghost.org/download/ for now. If/when #1362 is merged then it should go to ugly debug tools\r\n\r\n**Update:**\r\n\r\nThe endpoint to check for updates also records some anonymous usage statistics. The endpoint requires a POST request to https://updates.ghost.org/ with a JSON-encoded body containing the following keys. blog_id must be provided in order for saving to occur.\r\n\r\n* blog_id - string - a hash of the blog URL\r\n* ghost_version - string\r\n* node_version - string\r\n* npm_version - string\r\n* env - string - production/development\r\n* database_type - string - SQLite, MySQL, pg\r\n* email_transport - string - mail.options.service, or otherwise mail.transport\r\n* blog_created_at - unix epoch timestamp - created_at timestamp from settings.dbHash\r\n* post_count - integer - total number of posts\r\n* user_count - integer - total number of users - always 1 for now\r\n* theme - string - value of settings.activeTheme\r\n* apps - text - comma separated list of activePlugins - empty for now\r\n\r\nOpting out of update notifications should be possible with a setting in config.js of `updateCheck: false`.\r\n\r\nThe end point returns the time which the next check may be performed. Ghost should check to see if the current time is greater than the next update allowed time, and if it is, fire another update.\r\n\r\nThe update time returned by the endpoint should be 24 hours after the request was made, but this may change. Our sessions currently last 12 hours, so we should only check once per session.\r\n\r\n'
1434,'ErisDS','Clean up errors thrown by casper tests\nThe functional tests record several page errors, which I think can be cleaned up.'
1401,'sebgie','Add validation to models using schema attributes\ndepends on #1398 (Create schema.js)\r\nrelated to #970 (more validation)\r\n\r\nModels should use the constraints provided by schema.js to validate values.'
1400,'sebgie','Refactor migration (database is out of date)\ndepends on #1398  (Create schema.js)\r\n\r\nRefactor migration from one database version to another. The changes should be determined by comparing the actual database with the schema.js file. Any changes found should be applied to the database to reflect the new version.\r\n\r\nSupported operations:\r\n- CREATE TABLE\r\n- DROP TABLE\r\n- ALTER TABLE\r\n    - ADD COLUMN\r\n    - DROP COLUMN\r\n    - MODIFY COLUMN\r\n\r\nTable and column renaming needs some investigation on how to do this.\r\n\r\nThe same mechanism could be used to generate tables for Apps. An App has to provide its own schema.js file and whenever a new App is activated the database is updated with the new instructions from schema.js.'
1399,'sebgie','Refactor migration (database not yet created)\ndepends on #1398 (Create schema.js)\r\n\r\nRefactor the initial setup of the database to use the JSON Object from schema.js. If  the database was not yet created, the migration tool should use the object from schema.js to create the version 000 of the database.'
1398,'sebgie','Create schema.js\nThe schema.js file should contain a representation of the database for the current required database version as a JSON object. A starting point for this was made with the constraints object found in `/core/server/data/migration/000.js`.'
1397,'sebgie','X-Cache-Invalidation Tests\nAdd unit tests for the X-Cache-Invalidation headers\r\n'
1396,'sebgie','Move API tests to /integration/\nIn order to be useful, need #1393 to be merged.\r\n\r\nAll tests which depend on the database now live in /integration/ and will be tested against multiple DBs by travis.'
1395,'jgillich','Customisable Permalinks\nGhost should be able to support the common\r\n\r\n`/year/month/day/title/`\r\n\r\nformat, as well as the current flat \r\n\r\n`/title/`\r\n\r\nOther formats may be added, but making Ghost support 2 is a big enough task for one issue :)\r\n\r\nFor now, the UI to switch over should be a checkbox on the general settings screen.'
1394,'ErisDS',"Add importJSONData to api/db.js for import plugins\n- Abstract out the common functionality from the existing\r\n  import function.\r\n- Refactor to remove circular ghost and api references so we can add\r\n  unit tests.\r\n- Add unit tests for getVersion() and importJSONData()\r\n\r\nWhile working on the [Wordpress Import Plugin](https://github.com/jgable/ghost-plugin/blob/wordpressImport/example/WordpressImport/index.js) I needed a way to import the parsed data and didn't have access to the req, res objects.  This change will make it easier for our import plugins to use the existing db import functionality.\r\n\r\n```javascript\r\n}).then(function (ghostImportFormatData) {\r\n    // Inject data using import api\r\n    return self.app.api.db.importJSONData(ghostImportFormatData);\r\n});\r\n```"
1391,'ErisDS',"Test API createRequest doesn't use port specified in config\n`core/test/unit/utils.api.js` has port fixed to 2369 even though it should be using the port specified in the config.\r\n\r\nhttps://github.com/TryGhost/Ghost/blob/master/core/test/unit/utils/api.js#L17"
1390,'hswolff','Standardise getting paths and abs URLs\nWe need a standardised way to get paths and urls for Ghost.\r\n\r\nAt the moment we have the ghost.paths() function, but this is a bit limited, and is not used everywhere.\r\n\r\nWe need to be able to get things like \r\n* the base path for subdirectory installs, \r\n* an absolute and relative url\r\n* absolute and relative paths to the various content directory\r\n* details of available paths for themes (i.e. which templates are available) and plugins\r\n\r\nWould like to see this as a module with a set of useful functions.'
1378,'sebgie',"Investigate XSS filtering \nAt the moment Ghost uses node-validator's xss filter.\r\n\r\nHowever this has at least one known issue (#1328) in Ghost and has been removed from node-validator 2.0.0.\r\n\r\nWe need to investigate a better way to add a layer of XSS filtering to fields like titles.  Additionally, we should consider the need to add some level of (potentially configurable) filtering to the markdown -> html conversion we use for post content.\r\n\r\nMain questions to answer here is:\r\nIs [Google Caja](https://code.google.com/p/google-caja/) sanitizer the best solution?  Is it flexible / configurable / extensible?\r\nIf not what else is there?  \r\nIf it is, which npm wrapper is best (i think [this one](https://npmjs.org/package/sanitizer))?\r\n"
1373,'ErisDS',"Infra: Proper frontend functional tests\nPreviously we were unable to run any frontend functional tests which depended on the Casper theme because the repository was private and we couldn't (or at least never spent the time to) get Travis to get hold of the submodule.\r\n\r\nIt should now be possible to do this, and it would be good to run through some basic tests on the frontend, checking that the homepage loads, a post page loads, that rss loads, and that the output from helpers is present and as expected.\r\n\r\n"
1359,'halfdan','Add support for rel="next" and rel="previous"\nIn `{{ghost_head}}` we should output these tags on all archive pages, according to the specification here: http://googlewebmastercentral.blogspot.co.at/2011/09/pagination-with-relnext-and-relprev.html'
1357,'cobbspur','Regression: {{body_class}} outputting wrong data on single post\nOn a single post template view - the `{{body_class}}` is outputting `home-template` - it should be outputting `post-template`\r\n\r\nNeed to fix the issue,  as well as whatever test is failing to check this properly.'
1351,'hswolff','Post Settings UX\nInitial draft of the intended UX for post settings menu:\r\n\r\n## Write New Post\r\n\r\nPost settings menu looks like\r\n\r\n* URL: the-post-title\r\n* Post Date: Now\r\n\r\nThese two should be *placeholders* - `<input type="text" placeholder="Now" />`\r\n\r\nFor the URL, the placeholder === the title (with dashes instead of spaces, etc) - if the title changes, the placeholder changes. If the title is empty, the placeholder is empty.\r\n\r\n## Save Post as Draft\r\n\r\nThe above placeholders stay exactly as they are\r\n\r\n## Publish Post Without Changing Post Settings\r\n\r\nPost settings should now convert their placeholder values to actual values\r\n\r\n* URL: the-post-title\r\n* Post Date: 30 Oct 13\r\n\r\nThese are now *values* `<input type="text" value="30 Oct 13" />`\r\n\r\n## Edit Post Settings and Save as Draft\r\n\r\nIn this instance I change my post date to yesterday\r\n\r\n* URL: the-post-title\r\n* Post Date: 29 Oct 13\r\n\r\nand save as draft. As I have now entered content into the text input, this is converted from *placeholder* to *value* and stored.\r\n\r\n## Publish Post with Edited Post Settings\r\n\r\nWhen publishing a post with edited post settings, placeholders convert to values. Any existing values are maintained.\r\n\r\n## Remove Value from Draft\r\n\r\nLet\'s say I change my mind about setting my post date to yesterday, I delete the date from the field. My browser automatically puts the HTML5 placeholder back into the field when the value is empty, so once again it looks like:\r\n\r\n* URL: the-post-title\r\n* Post Date: Now\r\n\r\nWhen I save the post, an empty value is detected and converted back to a placeholder. '
1350,'ErisDS',"Static page issues\nCan't set static page until post has been saved as draft - weird/unexpected UX.\r\n\r\nNotifications fire when I check/uncheck the static page box. These should fire on Save - not on click. We don't need to hot-swap a post on the fly between post/page. This is only relevant on save/publish.\r\n\r\n![page](https://f.cloud.github.com/assets/120485/1436344/0186afca-4155-11e3-9278-2ce4ed79a016.gif)\r\n"
1349,'JohnONolan',"Refactor desktop notifications to suck less\nThe current notifications (on desktop / large-viewport) push around the entire UI, get in the way, and are generally annoying. I'd like to take a pass at refactoring them to be a little more like Growl / FB\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1435659/6e9ac458-4145-11e3-90bd-20d2ac365d5d.png)\r\n"
1341,'halfdan','[SEO] Rel="canonical" support\nWe should support the rel="canonical" tag everywhere possible for SEO purposes, and output this in `{{ghost_head}}`'
1332,'halfdan',"Editing publish date of unpublished post yields JavaScript error\nWhen creating a new post that is not yet published you can't edit the publish date since it yields a JavaScript error:\r\n\r\n`Uncaught TypeError: Cannot call method 'indexOf' of undefined `\r\n\r\n\r\nI'm preparing a PR."
1326,'hswolff',"Make it possible to require ghost as a module\nI think this will probably require a significant amount of refactoring, especially when considering the pre-loading of config and plugins.\r\n\r\nHowever, many many people have expressed a desire for this to be possible, and several people have offered to make it possible, so I figured I'd track that conversation through this issue.\r\n\r\nIn short, at the moment, Ghost can only be used as a standalone application. It would be great if it was possible to require('ghost') and use it as part of a larger application. The extension of this would be to make Ghost work as express middleware as per #827, but I don't think that's the only use-case."
1308,'jgillich','Special state for post management when there are no posts\nWhen there are no posts in ghost, the post management screen looks like this\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1418071/7aea5ac8-3fa8-11e3-8cca-55ca9ccfdd3d.png)\r\n\r\nLet\'s make it look like this:\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1418095/39c507cc-3fa9-11e3-8410-a09685200990.png)\r\n\r\n## Notes\r\n\r\n* Heading colour is $brown\r\n* Button should be `<a class="button-add large" href="#">`\r\n* The content should be vertically centered using a parent element of display:table and a child element of display:table-cell (see login/signup screens for an example)\r\n* This should scale appropriately for mobile devices'
1300,'pmgarman','Enhancement: Remove "Insecure Content" warning for backend over SSL\nGhost admin and API should be accessed using SSL to prevent stealing of private  data. If Ghost is used with SSL images will cause insecure content warnings. To get rid of these warnings the following improvements should be made:\r\n- If an image is uploaded, the link to the embedded image should contain no scheme\r\n- If an image is embedded from an URL, the image should be fetched using a proxy.\r\n\t- example backend image url: https://myblog.ghost.org/imageproxy?imageURL=http://cdn.whatever.com/image.png\r\n\t- frontend image url: http://cdn.whatever.com/image.png\r\n'
1287,'ErisDS','Infra: Functional Tests are not reliable\nSee the output here: https://gist.github.com/ErisDS/aed9c041ef165e020c14\r\n\r\nTest fail and then seem to go into an infinite loop. '
1268,'cgiffard','No inline script for Ghost.init\nCurrently in `core/server/views/default.hbs` we have an inline script which calls `Ghost.init()` this should be done in a JavaScript file as shown in #899 '
1267,'ErisDS','Content Security Policy - Report only mode\nBefore we do any of #332 or #899, we want to turn on the content security policy in report only mode so that we can collect data on how Ghost is used and what might ought to go on a Whitelist.'
1249,'sebgie',"Enhancement: Move /api to /ghost/api\nTo simplify the configuration of SSL the API endpoint `/api/` should be moved to `/ghost/api/`. After this change SSL would only have to be available for `/ghost/*` and it would give us the chance to remove the cookie from `/` as long as it isn't needed."
1230,'sebgie','Replace cookieSession with session\nWe want to remove cookieSession, and replace it with a server-side session to \r\nimprove security.\r\n\r\nWe will create a bookshelf session store to keep session data in the database. \r\n\r\n'
1227,'gotdibbs','Connect.multipart() deprecation warning (Update multipart() to busboy)\nFiring up Ghost from GitHub currently yields the following deprecation warnings:\r\n\r\n```\r\nconnect.multipart() will be removed in connect 3.0\r\nvisit https://github.com/senchalabs/connect/wiki/Connect-3.0 for alternatives\r\nconnect.limit() will be removed in connect 3.0\r\n```\r\n\r\nThe [wiki page](https://github.com/senchalabs/connect/wiki/Connect-3.0) suggests a few alternatives that could be used instead of the multipart middleware.'
1205,'ErisDS','Ghost unusable without JavaScript.\nThe use of Backbone to render the Ghost UI means that if JavaScript files fail to load for any reason, or if the user has disabled JavaScript, a blank UI is presented.\r\n\r\nIf the Ghost team subscribes to the [progressive enhancement is dead](http://tomdale.net/2013/09/progressive-enhancement-is-dead/) philosophy, then at least providing an error message to the effect that "this page cannot be displayed with out JavaScript, either enable it if disabled, or ensure the required files are available."\r\n\r\nAlternatively, Ghost could provide server-rendered pages using something like Airbnb\'s [Rendr](https://github.com/airbnb/rendr), in the case that front-end JavaScript is not available.\r\n\r\nGiven the wide audience that I believe Ghost is targeting, I would propose that the latter solution is better. And as issue #951 is already open, this could be rolled into that work without adding *too* much overhead.'
1203,'gotdibbs',"partials not cleared on theme switch\nWhile working with a theme that has a custom pagination partial then swapping to one that does not, the new theme displays the prior theme's pagination partial.\r\n\r\nFor example, I set Ghost to use my custom theme that used a custom partials/pagination.hbs, restarted the server, then switched to casper.  The casper theme pagination controls were rendering the code from my theme's custom partial.\r\n\r\nThis is on Ghost 0.3.3 on node 0.10.20 and Mac 10.8.5."
1189,'sebgie',"API Unit Tests\nThe API unit test created by @gotdibbs failed as a result of the new security measures.  I have commented it out as I don't have time to fix it and I know that @sebgie is going to be working on the API and unit testing it this week.\r\n\r\nJust raising this so all involved have visibility on what is happening :)"
1180,'jgillich','Convert Docs from HTML to Markdown\nOur docs on the /gh-pages/ branch are using Jekyll, which supports both HTML and Markdown inputs. Currently we use HTML. It would be awesome + make a lot of sense + make translations much easier.... if we used Markdown.\r\n\r\nThis task is to convert our current /gh-pages/ implementation to be markdown based rather than HTML based - keeping all the same styles and functionality.\r\n\r\nThis is an open issue to anyone who wants to pick up / submit a PR.'
1179,'halfdan',"Gear icon popups are different between content and edit modes\nAs a user of Ghost I expect similar UI constructs to be the same, even in different contexts. Currently the popup tooltip in content mode and the popup tooltip in edit mode are different. I'm attaching screenshots as an illustration.\r\n\r\nContent mode:\r\n\r\n![content-mode-gear-popup png](https://f.cloud.github.com/assets/563460/1366306/da7c0626-38c8-11e3-8a53-c248509ddb66.png)\r\n\r\nEdit mode:\r\n\r\n![edit-mode-gear-popup png](https://f.cloud.github.com/assets/563460/1366307/e0e31fc2-38c8-11e3-902f-074b61459416.png)\r\n\r\nIf the differences were significant I'd say don't worry about it but functionally they're identical in behaviour and appearance (not counting font size). The only difference is the delete button."
1125,'ErisDS',"After scrolling down the list of posts, I can not see any content.\nI'm using Ghost 0.3.2 and imported a couple dozen of posts from my previous blog. I noticed a weird behavior when I scroll down the list of posts in the admin panel:\r\n\r\nAfter the delayed load of new posts took place, adding more posts to the bottom of the list, I can not access any of the post contents - not the first couple posts and not the added posts.\r\n\r\nIn my firefox console I can see this kind of requests:\r\n\r\n    [20:44:29.219] GET http://MYDOMAIN:2368/api/v0.1/posts/?status=all&page=4&orderBy%5B%5D=updated_at&orderBy%5B%5D=DESC [HTTP/1.1 304 Not Modified 62ms]\r\n    [20:44:31.143] GET http://MYDOMAIN:2368/api/v0.1/posts/?status=all&page=5&orderBy%5B%5D=updated_at&orderBy%5B%5D=DESC [HTTP/1.1 200 OK 206ms]\r\n\r\nI think whenever a *304* is returned, the list of posts is not updated correctly. I can access the posts from the last requests (which returned a *200*)."
1115,'sebgie','Issue with the signin cookie\nSignIn process is checking for correct value of connect.sess cookie.\r\n\r\nThe cookie value is aways the same for the current user, even when he logout and login again, or change his password.\r\n\r\nIf an attacker obtains access to this cookie - remotely or locally, he gains access to the blog admin panel.\r\n\r\nThe value of the cookie when admin is logged \r\n![cookie_1](https://f.cloud.github.com/assets/763119/1341801/bb7e59e0-3652-11e3-8c32-a1180f8ef5a0.jpg)\r\n\r\nThe value of the cookie when admin is about to log in\r\n![cookie_logged_out](https://f.cloud.github.com/assets/763119/1341815/fc656566-3652-11e3-8f10-0a9f217ac930.jpg)\r\n\r\n\r\n\r\n'
1053,'hswolff','npm test currently doesn\'t work without globally installing grunt-cli\n`npm test` currently doesn\'t work in a freshly cloned + npm installed repo because `grunt-cli` isn\'t in `devDependencies`\r\n\r\ncommands in the `scripts` field of package.json e.g. `{"scripts": {"start": "ghost"}}` will resolve to the local module scope instead of requiring global installation. This means that working versions of modules can get bundled with applications. \r\n\r\nfor example, in the above example when `npm start` runs it will look for a module in the local available `require` scope that provides a `ghost` bin, and will use that. if it can\'t find a local module it will try the $PATH. \r\n\r\nif I had two applications on my computer that both depend on ghost, but one depends on ghost v1 and another on ghost v2 (for example), it would suck if I had to `npm install -g ghost@1.0.0` every time I went into the first project and then `npm install -g ghost@2.0.0` in the other one. using npm scripts solves this problem. (I hope my explanation makes sense)\r\n'
1023,'ErisDS','TravisCI badge should point to a public travis page\nRight now, the Travis badge points to a private travis pro page.  Now that the repository is open source, the badge should link to a public page (and build statuses should be public)'
1005,'ErisDS',"Hosting docs update\nDon't push this til Monday - \r\n\r\nAdd details of BitNami installers, Rackspace install & DO install + anyone else that comes through."
1004,'matthojo','Usage docs: Markdown guide esp images\n^'
1003,'ErisDS','DO writeup\nWrite up tutorial for how to get started with DO'
988,'cobbspur','Bug: Image upload url method \nRe: 956\r\n\r\nwhilst working on this issue i can see that the image url still has some bugs. if multiple images are present the id gets confused - quirky results such as saving to wrong image placeholder or removing wrong image on trash can etc'
987,'ErisDS','Post classes from tags aren\'t correctly processed\nFrom [the forum](https://en.ghost.org/forum/themes/567-casper-theme-classes-for-tags-not-correct)\r\n\r\nTags are appearing like this:\r\n\r\n```\r\n<article class="post tag-Startup Life"></article>\r\n<article class="post tag-A Project of Mine"></article>\r\n<article class="post tag-Sustainable Open Source"></article>\r\n```\r\n\r\nwhen it should be like \r\n\r\n```\r\n<article class="post tag-startup-life"></article>\r\n<article class="post tag-a-project-of-mine"></article>\r\n<article class="post tag-sustainable-open-source"></article>\r\n```'
981,'ErisDS',"If the theme is missing, admin crashes\n(On the latest nightly)\r\n\r\nIf you remove or rename a theme's directory and then restart Ghost everything is blank. Template issues like this should probably not crash the backend, letting the user go in and pick a new theme.\r\n\r\nhttp://c.pmgr.mn/AgWF\r\n\r\nTerminal Output\r\n```\r\nERROR: The currently active theme GhostBacker is missing.\r\n\r\n\r\nERROR: The currently active theme GhostBacker is missing.\r\nErrorPage\r\nGhost caught a processing error in the middleware layer.\r\n\r\nError: The currently active theme GhostBacker is missing.\r\n    at Object.errors.throwError (/home/pmgarman/ghost/core/server/errorHandling.js:26:19)\r\n    at Object.errors.logAndThrowError (/home/pmgarman/ghost/core/server/errorHandling.js:69:14)\r\n    at Object.manageAdminAndTheme [as handle] (/home/pmgarman/ghost/core/server.js:214:24)\r\n    at next (/home/pmgarman/ghost/node_modules/express/node_modules/connect/lib/proto.js:190:15)\r\n    at next (/home/pmgarman/ghost/node_modules/express/node_modules/connect/lib/proto.js:165:78)\r\n    at next (/home/pmgarman/ghost/node_modules/express/node_modules/connect/lib/proto.js:165:78)\r\n    at next (/home/pmgarman/ghost/node_modules/express/node_modules/connect/lib/proto.js:165:78)\r\n    at Object.favicon [as handle] (/home/pmgarman/ghost/node_modules/express/node_modules/connect/lib/middleware/favicon.js:77:7)\r\n    at next (/home/pmgarman/ghost/node_modules/express/node_modules/connect/lib/proto.js:190:15)\r\n    at Object.logger (/home/pmgarman/ghost/node_modules/express/node_modules/connect/lib/middleware/logger.js:156:5) \r\n\r\n\r\nERROR: Theme error template not found\r\nAdd an error.hbs template to the theme for customised errors.\r\n```"
975,'cobbspur','Image URL is not persisted\nAs demonstrated in my LxJS talk, if you go back to the URL view of the uploader when you have already inputted a URL, the URL is not actually there.'
974,'jamesbloomer','Markdown bug: no new line inserted when quotes are used\nSee below for a demonstration\r\n\r\n![linebreak](https://f.cloud.github.com/assets/1196299/1279063/bef25922-2f2d-11e3-8c25-bffde1e3786b.gif)\r\n'
970,'sebgie','More validation \nSetup server side validation for fields which have limited length and type '
967,'ErisDS','Add tags to bodyclass\n`{{bodyclass}}` should include the current tags assigned to a post when on post.hbs view\r\n\r\nAlso requested via forum here: https://en.ghost.org/forum/themes/537-tags-as-part-of-body-classes'
965,'matthojo',"Add multi-lang support for docs\nWe've got a ton of translation offers, docs is probably the best possible place we can start to make use of them.\r\n\r\nLet's have a look at making out gh-pages jekyll branch support multiple languages.\r\n\r\nhttp://developmentseed.org/blog/multilingual-jekyll-sites/"
956,'cobbspur','Bug: Image link is not removed from markdown\nThe link to an uploaded image is not removed in markdown, when pressing the trashcan icon in the preview.\r\n\r\n**Steps to reproduce**\r\n- insert image using `![]()`\r\n- upload an image\r\n- press the trashcan icon\r\n- link is not removed from markdown\r\n- start typing -> the removed image shows up again\r\n'
953,'JohnONolan',"Ghost Importer: UI love\nI think it's high time the Importer got a bit of UI and design love and attention.\r\n\r\nFollowing on from #952, I really want to make the importer much more user friendly, with a validation or check step, and a save step.\r\n\r\nI also think we need to make the importer (and exporter) accessible through the UI, or at least put them on a nice page which isn't called 'Ugly Debug Tools'.. although this does seem to have done the job of making people aware this is unfinished stuff quite well so far.\r\n\r\n**updated with more detail**\r\n\r\nThere are at least 2 different types of importer - the first being file upload as per the current Ghost import, and the second being API based where we authenticate with a 3rd party and pull data in directly.\r\n\r\nThere will be the ability to run a pre-check to test the imported data is valid to insert into Ghost. In the cases where it isn't (things which break our uniqueness constraints, or strings which are longer than Ghost permits), we need to message this to the user, and preferably provide a simple UI to fix the issues.\r\n\r\nA successful import should probably also message the user with some details about what has been imported (i.e. successfully imported 321 posts, with 56 tags)."
943,'javorszky',"Admin notifications should only appear when logged in\n`Ghost is attempting to use your server's sendmail to send e-mail. It is recommended that you explicitly configure an e-mail service, See http://docs.ghost.org/mail for instructions`\r\n\r\nShould not appear unless logged in.\r\n"
942,'jamesbloomer','Able to download anything from the active theme directory.\nFrom [the forum](https://en.ghost.org/forum/bugs-suggestions/467-bug-able-to-view-download-anything-in-the-current-theme-directory)\r\n\r\n> I found this bug a few minutes ago, where anyone is able to download/view the contents of any file in your current theme directory. This includes being able to download the handlebars templates, which isn’t really a desired ability.\r\n\r\n>e.g. as an example, http:///post.hbs will download the post handlebars template, the same thing happens with README.md.\r\n\r\nWe should probably lock down theme static assets to not serve .hbs files, or to only serve things from the subdirectories?'
937,'sebgie',"Disable filestorage\nGiven that right now we don't have 3rd party storage as an option, and storage doesn't work on platforms like heroku, I'm thinking it would be a good idea to have a config.js option of `fileStorage:false`\r\n\r\nWhen explicitly set to false, Ghost should no longer offer the option to upload images. From a UI perspective, we can default to the URL screen in the image uploader, and not provide the dropzone or file upload dialog.\r\n\r\n"
932,'ErisDS','Cache Control headers\nNeed to set these up properly / reliably across the system\r\n\r\n/ghost urls need private\r\nfrontend urls need public\r\nscripts & styles need public\r\n/api is no cache for now, might need to be cache + invalidation headers\r\n\r\n+ more.'
928,'javorszky',"WP Export Plugin: path issue\nFrom [the forum](https://en.ghost.org/forum/using-ghost/165-importing-posts)\r\n\r\n> Unfortunately it looks like there’s a couple of problems with both the ghost plugin and the importer.\r\n\r\n> The plugin seems to assume a path and fails without error unless I explicitly set it to that of the plugin. It then downloads a file which has no content. I’ve modified the ghost-class.php so it works for me as follows:\r\n\r\n> https://gist.github.com/iwootten/6700474\r\n\r\n@javorszky hope you don't mind me punting this at you :)"
921,'gotdibbs',"Infra: Run unit tests against sqlite and mysql\nWe need to be running the unit tests against both sqlite and mysql.\r\n\r\nHowever, I think this is probably something that should be turned off by default in the testing environment, and turned on by default in the travis environment.\r\n\r\nThis means that devs who don't have MySQL installed locally can still run the tests, but Travis will pick up the rare instance where SQLite3 tests pass and MySQL ones don't. Hopefully people who are working on models and other stuff that is likely to affect MySQL will install MySQL & turn the testing option on.\r\n\r\nAlso note, MySQL is not in our dependencies... I think it might need/want to go in optionalDependencies?"
919,'javorszky','Regression: User is no longer redirected to admin after signup\nOn a new install, after signing up, the user is no longer redirected to `/ghost/` after signing up.'
916,'PaulAdamDavis',"Consider switching to javascript:void(0) for hrefs\nI know this can be kind of contentious / personal taste issue, but the #'s in our urls can potentially cause us problems down the road with backbones routing on browsers like IE9 that don't support pushState.\r\n\r\nWe should consider switching to javascript:void(0) to avoid changing the url when clicking about.  Or, we could start using button's where semantically they would be more correct."
904,'ErisDS',"Usage docs - how to edit config.js\nUsage docs need to cover editing config.js, why you need to edit it, what to edit, and possibly some details on how to edit it using SSH only.\r\n\r\nOne of the most common questions we're getting is 'Ghost is working, but surely the IP being 127.0.0.1 is wrong and I need to set it to <insert external IP here>' so this should be covered.\r\n\r\nShould cover editing URL, including setting it to localhost:2368 for development\r\n\r\nShould point to mail docs for editing mail setup\r\n\r\n\r\n\r\n"
894,'ericterpstra',"Ghost won't install with node 0.10.19\nYesterday's release of 0.10.19 seems to have caused an error. I think this is with Chris Lea's PPA version of node, but it needs checking.\n\nIt has been reported here: https://github.com/joyent/node/issues/6263 and on the installation forum.\n\nIt is probably a problem with a single dependency, possibly uglify.\n\nIf anyone has 5 mins, please upgrade to .19 and try this out - see I'd you can narrow it down to a dependency and whether it is the PPA version or all node"
890,'ErisDS',"MySQL & SQLite - importer explodes if tags are duplicates\nThe importer explodes on duplicate tags in mysql\r\n\r\n> Error importing data: Error: ER_DUP_ENTRY: Duplicate entry 'getting-started' for key 'tags_slug_unique': insert into `tags` (`created_at`, `created_by`, `description`, `meta_description`, `meta_title`, `name`, `parent_id`, `slug`, `updated_at`, `updated_by`, `uuid`) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) \r\n\r\nAnd on SQLite\r\n\r\n> Error importing data: SQLITE_CONSTRAINT: column slug is not unique "
888,'ErisDS',"MySQL - exporter doesn't work \nIf using MySQL, exporter only outputs meta, no data."
886,'sebgie','RSS Feeds should display full post content\nRSS currently contain only a link to the blog from whence they came. They should include the `{{content}}`'
884,'sebgie',"Template overriding is not working\nVia [the forum](https://en.ghost.org/forum/themes/173-default-partials)\r\n\r\nIf I add a pagination.hbs file to /partials inside my theme and restart Ghost, I don't get the content of my file, I still get the standard one."
880,'jamesbloomer','Keep meta generator tag version number to 2 decimal places\nCurrently `<meta name="generator" content="Ghost 0.3.0" />`\r\n\r\nShould be `<meta name="generator" content="Ghost 0.3" />`\r\n\r\nPer \r\n\r\nhttps://en.ghost.org/forum/everything-else/207-security-issue'
872,'sebgie','Change email address for Ghost mailer\nFrom the forum:\r\n\r\nhttps://en.ghost.org/forum/installation/167-change-email-address-for-ghost-mailer\r\n\r\nThis should be an item in the mail config I think, which defaults to Ghost mailer?'
871,'sebgie',"Sendmail bug\nThis one has been reported & fixed at least twice on the forum, here's one:\r\n\r\nhttps://en.ghost.org/forum/using-ghost/263-bug-stray-n-character-when-auto-detecting-sendmail"
869,'ErisDS','Add multipart for importer route\nImporter is currently broken.'
867,'jgable','Better error messages for broken config.js\nThis is the one file people are touching, we want to make the error messages make sense. E.g if the config for the current env cannot be found or parsed.'
866,'ErisDS',"If someone creates a placeholder, but doesn't upload an image, don't output it\nIf someone leaves a ![something] in markdown and never uploads an image, it should output nothing at all in post html.\r\n\r\nTo prevent:\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1190790/7a86c5ba-243e-11e3-971f-b494bb335707.png)\r\n\r\nI'd really like to get this into 0.3.1 if possible"
865,'ErisDS',"Markdown: don't autolink urls inside of pre blocks\nFrom the forum:\r\n\r\nhttps://en.ghost.org/forum/using-ghost/75-bug-urls-inside-fenced-blocks-should-not-be-parsed"
864,'cobbspur',"Image Upload URL doesn't save in the right place\nFrom the forum:\r\n\r\nhttps://en.ghost.org/forum/using-ghost/233-bug-setting-image-using-link"
858,'ErisDS',"MySQL post / tag deletion bugs\nPosts <-> Tags relationship is setup with a foreign key and therefore have constraints around deletion. \r\n\r\nSeveral issues have been reported on the forum, need to get this fixed asap\r\n\r\nHere's some of the bug reports:\r\n\r\nhttps://en.ghost.org/forum/using-ghost/175-delete-my-first-post-in-ghost-on-mysql\r\n\r\nhttps://en.ghost.org/forum/using-ghost/131-bug-mysql-er_parse_error\r\n\r\nhttps://en.ghost.org/forum/using-ghost/215-bug-er_row_is_referenced-mysql"
857,'ErisDS','`<script>` cuts off post, crashes editor after save\n[From the forum](https://en.ghost.org/forum/using-ghost/191-bug-script-cuts-off-post-crashes-editor-after-save)\r\n\r\nI tried publishing following article, that previously was served through poet: (careful, german!):\r\n\r\nhttp://pastebin.com/dAj48CBp\r\n\r\nAt the `<script>` part Ghost seems to fail after the post is saved. When I open it again the last visible character of the post is the ` and I can’t edit the post, the markdown preview is not generated.\r\n\r\nI’m on 0.3, using Firefox 24, Arch Linux\r\n\r\nAm I doing it wrong or should this be escaped somehow?'
855,'JohnONolan','Remove Ghost version number from user menu\nAm I crazy? How did we miss this?\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1186034/2887b9c6-22dc-11e3-9aff-732919193371.png)\r\n'
851,'matthojo','Support links point to wrong place\n> “Help/Support” leads to http://forum.tryghost.org/. I think it would be most suitable if that lead to http://ghost.org/forum/ and maybe even opened in a new tab.\r\n\r\nhttps://en.ghost.org/forum/using-ghost/55-bug-ghost-help-support-option'
850,'jamesbloomer','Admin redirect issue\n> I just set up ghost on an EC2 instance, running behind nginx. When i log in to /admin i get redirected to /ghost//admin/ which 404s. If i amend the URN to be /ghost it works fine - looks like a nice simple one to solve :-)\r\n\r\nhttps://en.ghost.org/forum/using-ghost/85-redirect-issue-on-logging-in-to-admin'
849,'matthojo','KB Shortcut for Date Insertion is Borked\n> When in edit mode, if you attempt to insert current date (ctrl + shift + 1), if the letterCount of the date string is and odd number the entire interface freezes. This is related to line 127 of the markdown-actions.js file, which divides the letterCount by 2 to place the cursor in the middle of the text string.\r\n\r\n> I believe the solution is to change line 127 from: this.elem.setCursor({line: cursor.line, ch: cursor.ch - (letterCount / 2)}) to: this.elem.setCursor({line: cursor.line, ch: cursor.ch - Math.floor(letterCount / 2)}); This will account for odd length inputs.\r\n\r\n> But from a user perspective adding the cursor to the center of an inserted date is odd behavior, so after line 115 md = moment(new Date()).format("D MMMM YYYY") adding text = true; will cause the cursor to be placed at the end of the inserted date.\r\n\r\nhttps://en.ghost.org/forum/using-ghost/37-insert-current-date-shortcut-bug'
847,'gotdibbs','Database migration - export a backup first\nDuring the migration initialisation process, if a migration is needed to be run I think it would be a good idea to automatically backup first.\r\n\r\nWe have an export tool which is capable of generating and storing a backup file.\r\n\r\nCurrently the act of writing the file to disk is part of the `api/db.js#exportContent` function. This will require some refactoring, either so that we can call the api function without resulting in also downloading the file, or moving the file writing part elsewhere.\r\n\r\nHowever it is achieved, I think it would be very sensible to generate a backup file before running the migration, just in case :+1: '
844,'javorszky','Clicking Sign Up button does not always redirect to /ghost\nSummary of Issue \r\n------------------------------- \r\n\r\nClicking Sign Up button does not always redirect to /ghost\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\nfollow the steps in the screencast exactly....\r\n![clicking signup does not redirect to ghost](https://f.cloud.github.com/assets/4643742/1170420/d1817a12-20d9-11e3-81ae-f99390db32a7.gif)\r\n\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nfilling out the signup form and then pressing return will result in the page refreshing and the field emptying and this message: POST /ghost/signup/ 200 2736ms - 27b\r\n\r\nBut it does not redirect to /ghost\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6.4\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: ea9c50f49eeb511af4a7278b225699e39b6ab2e6\r\nBrowser: Chrome 29.0.1547.65'
840,'javorszky','clicking import on /debug without file selected needs its own alert message\nSummary of Issue \r\n------------------------------- \r\n\r\nclicking import on /debug without file selected needs its own alert message\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- go to /ghost/debug\r\n- click import\r\n\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nalert message: Failed to parse the import file \r\n\r\nDesired result \r\n------------------------------- \r\n\r\nalert message: Please select an export to import\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6.4\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: ea9c50f49eeb511af4a7278b225699e39b6ab2e6\r\nBrowser: Chrome 29.0.1547.65'
838,'cobbspur','hard to see trashcan icon when there is no image\nSummary of Issue \r\n------------------------------- \r\n\r\nhard to see trash can icon when there is no image\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- add blog cover image\r\n- click incon in the lower left to add by address\r\n- fill in address of "www.google.com"\r\n- click save\r\n- click on broken image icon\r\n\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nbroken image icon to small to display whole trashcan icon\r\n\r\n![screen shot 2013-09-18 at 6 30 49 pm](https://f.cloud.github.com/assets/4643742/1170147/26a65ce2-20cb-11e3-871e-61f29afe9d8f.png)\r\n\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6.4\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: ea9c50f49eeb511af4a7278b225699e39b6ab2e6\r\nBrowser: Chrome 29.0.1547.65\r\n'
837,'sebgie','importing a bad database that fails to import still imports content\nSummary of Issue \r\n------------------------------- \r\n\r\nimporting a bad database that fails to import still imports content\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- export your database\r\n- change the email address to not be an email address\r\n- import your database\r\n- the import will fail with the message : Error importing data: Please check your email address. It does not seem to be valid. \r\n\r\n\r\nObserved result \r\n------------------------------- \r\n\r\n- Go to Content tab\r\n- content from imported DB is present\r\n\r\nDesired result \r\n------------------------------- \r\n\r\nI would expect that if a DB import fails everything would be as was before the import.\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6.4\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: ea9c50f49eeb511af4a7278b225699e39b6ab2e6\r\nBrowser: Chrome 29.0.1547.65'
830,'gotdibbs',"Test deploying to Windows Azure\nWe don't imagine it's going to work, but it would be good to know what the blockers are and whether they can be mitigated in some way."
826,'jamesbloomer','2 of the image tests fail on Windows\n```\r\n  1) Admin Controller uploader valid file can upload two different images with t\r\nhe same name without overwriting the first:\r\n\r\n      {actual} [expected]\r\n\r\n      /content/images/2013/Sep/IMAGE{}[-1].jpg\r\n\r\n      at Object.Assertion.equal (c:\\Ghost\\Ghost\\node_modules\\should\\lib\\should.j\r\ns:303:10)\r\n      at Object.<anonymous> (c:\\Ghost\\Ghost\\core\\test\\unit\\admin_spec.js:121:33)\r\n\r\n...\r\n\r\n  2) Admin Controller uploader valid file can upload five different images with\r\nthe same name without overwriting the first:\r\n\r\n      {actual} [expected]\r\n\r\n      /content/images/2013/Sep/IMAGE{}[-4].jpg\r\n\r\n      at Object.Assertion.equal (c:\\Ghost\\Ghost\\node_modules\\should\\lib\\should.j\r\ns:303:10)\r\n      at Object.<anonymous> (c:\\Ghost\\Ghost\\core\\test\\unit\\admin_spec.js:138:33)\r\n```\r\n\r\nThe images are uploaded and stored with incremental file names as expected, it is only the tests which are failing, and afaik only on Windows.\r\n'
823,'JohnONolan','Better default user image design\nThis.'
815,'matthojo','Usability: Clicking on Post Settings labes does not shift focus to appropriate field\n## Summary of Issue\r\n\r\nThe labels for the Pub Date and Slug post settings fields do not actually tie to their input fields, so tapping/clicking on them does not shift the focus to the corresponding input field.\r\n\r\n## Steps to Reproduce\r\n\r\n 1. Navigate to the content editor via New Post\r\n 2. Click the settings widget in the bottom right hand corner\r\n 3. Tap/click on the Pub Date label\r\n\r\n## Observed Result\r\n\r\nFocus is not shifted to the Pub Date input field.\r\n\r\n## Additional Information\r\n\r\nClient OS: Windows 8 Professional x64\r\nServer OS: Vagrant Box\r\nNode Version: v0.10.5\r\nLatest Commit: f661ad9a63ab3752fb56fefa49544cd472f788b0'
812,'JohnONolan','Default user image\nAt least you need to decide on a name and extension. Prettiness/creativity can follow.\r\n\r\nNO HEADS AND SHOULDERS SILLHOUTTES'
810,'matthojo','Create single page site for my-ghost-blog.com\nCreate this as a single page (1 index.html file) site which will live on my-ghost-blog.com\r\n\r\nEssential info:\r\n\r\n* H1 - 50px\r\n* H2 - 17px\r\n* Body copy - 14px / line-height 24px\r\n* Red: #E44007\r\n* Beige: #E9E8DD\r\n\r\nCenter with table-cell method which @ErisDS excellently demonstrated in #809.\r\n\r\nDoes not need to be responsive. Does not need to be fancy. Does not need a favicon. SUPER simples.\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1162223/34d131fc-2008-11e3-859b-3c4d4f1807c5.png)\r\n'
807,'ErisDS','Make an htaccess for my-ghost-blog.com\n'
798,'cgiffard',"/settings/anything should 404\nsettings pages which don't have routes need to 404"
795,'cobbspur','Meta title & description for themes\nCreate two new helpers\r\n\r\n`{{meta_title}}`\r\n\r\n`{{meta_description}}`\r\n\r\nWhich work in a similar way to the body helper & returns different results depending on the page you are on\r\n\r\nIf you are on a post:\r\n\r\n`{{meta_title}}` outputs the post title\r\n`{{meta_description}}` outputs an empty string\r\n\r\nIf you are on the home or archive pages\r\n`{{meta_title}}` outputs the blog title\r\n`{{meta_description}}` outputs the blog description\r\n\r\nThey should have filters the same as body class'
792,'cgiffard','404 / 500 page design stuff\nWe need a 404 & 500 error page we can deliver to themes in lieu of them creating their own.\r\n\r\nThis should live in server/views but be stand-alone (no layout, depend on shared assets) and preferably be \r\n\r\nWe also need a 404 and 500 error page for Ghost, these can have a layout and depend on admin assets. We currently have a 404 page called error.hbs which has a visual bug #791 \r\nWe probably want to name it differently to distinguish between the one we serve to themes and ghost admin - maybe put the theme one in views/themes or something.\r\n\r\nThere is no requirement that the 404 and 500 templates be different for either Ghost admin or themes, they can take the code & message, and use that to render differently depending on the code.\r\n\r\n'
790,'ErisDS','Welcome to Ghost fixture needs updating\n'
789,'matthojo',"Images don't respect max-width: 100% in Firefox\nWeird bug - not sure why this is happening...\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1156913/626b562e-1f95-11e3-9d79-a5da7974f735.png)\r\n"
788,'gotdibbs','Settings Menu Bugs\nTwo issues with this:\r\n\r\n1.) When the settings menu is open, the settings icon should be "active" (aka maintain its hover state)\r\n\r\n2.) Opening any settings menu inside #publish-bar should first close all other settings menu inside #publish-bar (eg. the screenshot below should not be possible).\r\n\r\n@gotdibbs I think you\'re probably most familiar with this stuff at the moment - would you mind? :)\r\n\r\n---\r\n![image](https://f.cloud.github.com/assets/120485/1156634/0819cb54-1f8d-11e3-9506-ef6c1f248ce5.png)\r\n'
785,'ErisDS',"Published at should be available before publishing\nIt should be possible to set the publish date before you publish, and for the date you set to be used rather than today's date"
784,'JohnONolan','Post delete button needs icon\n'
783,'ErisDS',"Delete post button should be disabled if post is not saved yet\nOn the editor, the delete button doesn't do anything if you haven't saved yet."
782,'javorszky',"Notifications don't get cleared on new action\nWhen a user performs an action which can cause notifications, the existing notifications should clear down.\r\n\r\ni.e. If I save a post without a title, and then save it successfully, the error message should disappear"
780,'sebgie',"Cover images with brackets in the file name don't display\nWe need to sanitize the file names for uploaded cover images. Currently the name is embedded as a CSS background image as is. This fails for files with brackets `(` or `)` in the file name."
778,'JohnONolan','User profile picture fails to be appropriately round\n### Setup\r\n\r\nUpload a portrait-orientation or non-square image as the user avatar/profile picture. The more exaggerated the image dimensions the more obvious the bug.\r\n\r\n### Expected behaviour\r\n\r\nThe image should be cropped square — either on the client side or on the server, or it should at least be squashed to shape without care for the aspect ratio.\r\n\r\n### Actual\r\n\r\n![Image failure mode](https://files.app.net/p1r8SWFd.png)\r\n\r\nAs shown, the image fails to fit the bounds of the box, overflowing into the content area.\r\n\r\n### Browsers Exhibiting the Bug\r\n\r\n(Not exclusive list)\r\n\r\n* Safari 7.0\r\n* Chrome 24\r\n* Firefox 23'
776,'ErisDS','Share links in Casper do nothing\nNeed to decide what to do with the 3 little share links at the bottom of the single casper post view. '
766,'ErisDS','404 on jquery.min.map\n.'
761,'ErisDS',"Ghost middleware is registered again and again and again\nThe way that the theme middleware is being registered in `server.js` through `ghost.initTheme(server)` is actually causing the `app.use` and `app.set` calls to happen *every* time a request is made to the server. This is causing express' stack to get massively bloated as each one of these handlers is registered over and over again.\r\n\r\n![app stack](https://f.cloud.github.com/assets/1540648/1146648/c1718f74-1e75-11e3-9951-b34e7f4785d0.gif)\r\n"
755,'sebgie','Refactor to use API for data access\nOne step towards #360 (Big fat refactor). Refactor ghost.js so that the following data is  available with functions in api.js only:\r\n\r\n- config\r\n- settings\r\n- dataprovider\r\n\r\nSettingsCache, ghost.config() and ghost.dataProvider should be moved to api while keeping initialization and migrations working.'
740,'JohnONolan','Button active state\nCos did I press it? Did I miss? WHAT HAPPENED?'
735,'jgable',"*BONUS* - temporary importer from old version\nThere will be no upgrade path to the new data model unless we can introduce a temporary importer to import old exports.\r\n\r\nThis is only for the ~200 people who have Ghost already, and is not high priority, but I'd still like to get it done if possible."
734,'ErisDS','Migrations: Update Importer for new data model\nAfter #632 will need to update the importer & remove the old ones.'
733,'ErisDS',"Migrations: Export - one exporter to rule them all\nUse raw SQL queries to list the tables & dump them all. I think we can flatten export down into a single, simple tool by querying the database and asking what's there. We will have a data version stamp which we can put in the meta data, and I recommend also adding the Ghost version number, just in case."
732,'ErisDS','Migrations: Fresh install / first run is different to an upgrade\nFrom #482:\r\n\r\nMigrations should deal with a fresh install differently to an upgrade, including managing fixtures and settings being loaded: #731\r\n\r\nThey should also throw sensible error messages if the currentVersion is too high or not readable.\r\n\r\ncurrentVersion should be kept track of by the migration controller, \r\n\r\ncurrentVersion should probably be renamed to databaseVersion'
731,'ErisDS','Migrations: Fixtures: Load on fresh install only\nFrom #482:\r\n\r\nFixtures should be one file which is loaded on a fresh install of Ghost.\r\nNow that settings are separated, it is much clearer that this makes more sense.\r\n\r\nFixtures should be loaded via `Bookshelf`, rather than using `knex.insert` - we should eat our own dog food and ensure our models are correct.'
726,'gotdibbs','We need a global loading icon\nOn a slow connection - it is impossible to tell if the server is actually doing something or not. We need some indication of whether or not ghost is current loading/working to do something.\r\n\r\nI have some ideas for this - will put up tomorrow'
725,'matthojo','Fucked up icons on firefox\n![image](https://f.cloud.github.com/assets/120485/1140430/fccbc1ee-1c9e-11e3-930f-605aaa284681.png)\r\n'
723,'ErisDS',"Minor Bug: RSS uses database version\nRSS uses database version as generator version number:\r\n\r\n`generator: 'Ghost v' + ghost.settings().currentVersion.value`\r\n\r\nSoftware version is not available atm."
719,'ErisDS','clicking new post button does not automatically put insertion point into post title\nWhen clicking the new post button I would expect the insertion point to automatically be inserted into the post title text box.'
718,'matthojo','a few long tags do no display nicely\nSummary of Issue \r\n------------------------------- \r\na few long tags do no display nicely\r\n\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- create a new post\r\n- several long tags\r\n\r\nObserved result \r\n------------------------------- \r\n\r\neventually the tags fall down to the next line and are unreadable  \r\n![screen shot 2013-09-13 at 12 45 28 am](https://f.cloud.github.com/assets/4643742/1136620/899b30de-1c48-11e3-9bdd-e9042c203d97.png)\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6.4\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: c82ebb15d8f85c42a9261600b42b8d76e5d19f41\r\nBrowser: Chrome 29.0.1547.62\r\n\r\n'
715,'sebgie','Post title of <[[ my post title ]]> breaks rss feed\n- create a post with the title ```<[[ my post title ]]>```\r\n- open rss feed'
708,'JohnONolan','user profile bug\na scroll bar is now present on right side of window that controls user picture and  and full name fields \r\n![userprofile](https://f.cloud.github.com/assets/4405395/1125910/67f2d7b8-1b1a-11e3-8f04-1bfc1ee53c8f.jpg)\r\n'
705,'jamesbloomer','Image Upload: file storage amends\nTwo improvements:\r\n\r\n1) Instead of checking the file extension for .gif etc, check the file type\r\n2) Instead of copying the file from the temporary location to the correct one, move it, or otherwise delete the temporary file (should fix #502)'
702,'cobbspur','Image upload: add image from link\n![image upload](http://f.cl.ly/items/321h2j2R0Z1D3m1U300J/Image%202013.09.11%2009%3A24%3A17.png)\r\n\r\nLink item when clicked should display an input field for pasting a URL like so:\r\n\r\n![link upload](http://f.cl.ly/items/242J3V1617290l3M1v16/Image%202013.09.11%2009%3A27%3A45.png)\r\n\r\nNot sure what the interaction should be for triggering the import? Pressing enter? @JohnONolan '
701,'cobbspur','Clean Up: Image uploader features\nImage uploader currently displays buttons to "Add image from link" and "Add image from webcam". Both have no functionality atm. Are these features for later milestones?\r\n\r\n![image upload](http://f.cl.ly/items/321h2j2R0Z1D3m1U300J/Image%202013.09.11%2009%3A24%3A17.png)'
685,'cobbspur','next and prev rel links in head\nAs per the links at the bottom of this post, we need to add next and prev `<link>` tags to the head section of Ghost to indicate the next and previous page in the paged archives.\r\n\r\nNeed to figure out the best way to wire up the contenxt and output with `{{ghost_head}}`.. prob using filters. Probably need to move the concept of what the prev/next URL is back from the pageUrl helper back to the controller, so that we can do this.\r\n\r\n- http://googlewebmastercentral.blogspot.co.uk/2011/09/pagination-with-relnext-and-relprev.html\r\n- http://yoast.com/rel-next-prev-paginated-archives/\r\n- http://msdn.microsoft.com/en-us/library/ie/jj883726(v=vs.85).aspx'
683,'matthojo',"Kill the all posts menu\nThis is the only bit of the UI left which doesn't do anything yet. Lets remove it til we're ready for it."
682,'ErisDS','First run message / modal\nDesign coming from @JohnONolan '
680,'matthojo','Remove the dashboard & make content the default screen\nFor launch we want to take the dashboard out. The default screen should be the content screen.\r\n\r\nThis includes removing as much code, assets and etc as possible.  \r\n\r\nI will branch/tag the version before this gets done so that we can easily pull the code back in later.\r\n\r\n'
679,'matthojo','User menu links\n@JohnONolan where should all these links go?\r\n\r\n![user menu](http://f.cl.ly/items/2t160L3w3s0v1D1P2L3b/Image%202013.09.10%2010%3A17%3A02.png)'
675,'JohnONolan','Default mobile icons (apple-touch-icon, windows 8 tile)\nGhost should provide default precomposed apple-touch-icons for Apple and Android devices as well as a Tile Icon for Windows 8.'
669,'ErisDS',"On Windows, uploaded file paths are generated with `\\` instead of `/`\nWindows file system paths use `\\` as a path separator instead of `/`\r\n\r\nHowever, resource URIs used to fetch images in css (and other places) need to use `/`.\r\n\r\nCurrently if you run on windows and upload a file, you get a back-slashed path, which means that you can't fetch this resource to use as a background image."
667,'gotdibbs',"Publish button amends\nThere are some amends we'd like to make to our trusty friend the publish button:\r\n\r\n![publish button 1](http://i.imgur.com/yeBeNPT.png)\r\n\r\nFirst, remove **Add to Queue** and **Publish On** for now, so that the only options in the menu are:\r\n - **Publish Now** which when activated would transition the post to *published*\r\n - **Save Draft** which when activated would save the post in the current status which is *draft*\r\n\r\nThese two options reflect the two statuses that a post can be in, *draft* and *published*, and two transitions that can occur: *draft* -> *published* and *published* -> *draft*. Whatever state the post is currently in, there are always two options, one to save as is and one to transition. When the button is set so that the next action would be a transition, the button should be red.\r\n\r\nTo explain in full:\r\n\r\nInitially a post which has not yet been saved should behave the same as a post which has been saved as a draft. The button should be blue, and read **Save Draft**. If you open the menu, **Save Draft** should have a tick next to it (currently it doesn't).\r\n\r\nPressing the button should save the post in its current state of *draft*.\r\n\r\nOpening the menu, and choosing **Publish Now** should put a tick next to **Publish Now** and set the button to say **Publish Now**. The button should be red - this requires adding the classes `splitbutton-delete` and `button-delete` instead of `splitbutton-save` and `button-save`.\r\n\r\nNow clicking the button should publish the post, i.e. transition the post status from draft -> published.\r\n\r\nOnce published, the whole split button should go back to being blue. The two options in the menu should change to:\r\n - **Update Post** which when activated would save the post in its current state of *published* and\r\n - **Unpublish** which when activated would transition the post back to a *draft*.\r\n\r\nThe button should be set to **Update Post** by default, on opening the menu **Update Post** should have a tick next to it.\r\n\r\nClicking the button will now save the post in its current state of *published*\r\n\r\nOpening the menu and selecting **Unpublish** should should put a tick next to **Unpublish** and set the button to say **Unpublish**. The button should be red, - this requires adding the classes `splitbutton-delete` and `button-delete` instead of `splitbutton-save` and `button-save`.\r\n\r\nPressing the button should unpublish the post, i.e. transition the post status from draft -> published.\r\n\r\nThe button should revert back to its original state - that is be blue with the words **Save Draft**, and with a tick next to **Save Draft** when the menu is open.\r\n\r\n**Note:** Ideally, this should be closed with a CasperJS test which checks the full circle of options, including labels, colour and which item is ticked.\r\n\r\n**Related:** #352 The spinny arrow on the split button should point up when the menu is open and down otherwise.\r\n\r\n**Related:** #511 clicking publish now with no post title reset button to save draft"
666,'jfi','Notification cleanup\nFrom #648 there are a couple of things that still need doing:\r\n\r\n1. if an error occurs, the old statuses are still used:\r\n\r\nhttps://github.com/jfi/Ghost/blob/ad46b853c4d20610dd4e7c91c074335ff3ca169f/core/client/views/editor.js#L219\r\n\r\nIt looks like this is going to require a separate errorMap or something similar setting up, that has e.g.:\r\n\r\n```\r\n        errorMap: {\r\n            \'draft\': \'could not be saved as a draft\',\r\n            \'published\': \'could not be published\',\r\n            \'scheduled\': \'could not be scheduled\',\r\n            \'queue\': \'could not be added to the queue\',\r\n            \'publish-on\': \'could not be published\'\r\n        },\r\n```\r\n\r\n2. We need to drop scheduled from the maps, publish-on should say "could/could not be scheduled"'
662,'cobbspur','Loading cat gets confused on slow connections\nUsing [Charles proxy](http://www.charlesproxy.com/latest-release/download.do) to simulate a slow connection on localhost, Loading cat appears after the image has loaded:\r\n\r\n![cat bug](http://f.cl.ly/items/0o0j1F0w0s1M0O1e1e3U/uploadbug.gif)\r\n'
659,'matthojo','Modals are not centered, again.\nWhy are we *constantly* having this issue?\r\n\r\nI thought we were already using bootstrap modals, which reliably solve this problem - is that not the case? This is **such** a basic thing, we literally do not have time at the moment to be screwing around with it for this long.\r\n\r\n![modalbug](https://f.cloud.github.com/assets/120485/1105358/3a99bc5c-1924-11e3-8379-fb9b97db5209.gif)\r\n\r\nOn load: not centered\r\nAfter opening / closing dev tools: centered\r\n\r\n'
658,'skattyadz','Cannot save post first time if it has a tag\nI thought I already raised this as a bug :/\r\n\r\nIf a post has not yet been saved for the first time, and you add a tag straight away, it cannot be saved, but throws the error "Cannot call method \'related\' of null".\r\n\r\nThis is because the updateTag code in the server side post model assumes that a post has already been created.'
657,'ErisDS',"Theme switcher doesn't work unless server is restarted\nChanging theme + save:\r\n\r\nExpected behaviour: refreshing front end shows new theme\r\n\r\nActual behaviour: front end maintains current theme until server is restarted"
653,'cobbspur','If no user exists, redirect to signup\nIf no user exists, redirect\r\n\r\n/ghost/ => /ghost/signup/\r\n\r\n/ghost/signin/ => /ghost/signup/'
651,'matthojo','Random flashbar div in source of login (and presumably, rest of admin)\nWhat is a flashbar? Why is it here? Why does it need to exist at all? Why is it empty?\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1103182/186acec8-188e-11e3-8bd0-0c842e747124.png)\r\n'
639,'ErisDS',"`{{url absolute}}` doesn't actually work\nDid this in a rush didn't I? Fixing..."
635,'ErisDS',"Server-side image upload refactor\nAt the moment, Ghost image uploads are thrown straight at the local file system. This is great and exactly what we want for standard Ghost - no config of an external system required.\r\n\r\nHowever, it does pose a problem for hosting. Most node hosting platforms do not persist the local file system, and this will be true for our own platform.\r\n\r\nThe server-side part of accepting and handling uploads, along with the retrieval of images needs to be refactored such that the local file system handler is a module and is the 'default' image upload handler.\r\n\r\nThe handler should support upload/post requests, retrieve/get requests, and delete requests, but not modify. The handler should store the files in an immutable fashion, using a unique filename (closing #619). \r\n\r\nGhost should then be wired up in such a way that if another handler is configured it will use that, but otherwise it will use the local file system handler by default for all requests to store or retrieve an image (there's no concept of delete in the UI yet).\r\n\r\nWe will also need to implement a different file upload handler, but the details of what it should do, and whether or not it should be core or a plugin are not yet confirmed."
633,'matthojo',"Regression: Delete Post modal has mis-aligned buttons\n![screen shot 2013-09-05 at 10 33 35](https://f.cloud.github.com/assets/367517/1087100/46ac4e92-160e-11e3-9982-ee9a3020a5ef.png)\r\n\r\nThis is caused by https://github.com/TryGhost/Ghost/commit/e61f3684d55097fcaf772b3f211aea2fe5a94d9d#L2L1024\r\n\r\nI'll fix this as soon as I can."
632,'ErisDS',"Lock down the schema for 003 & implement migrations\nRequires: #601 \r\n\r\nHere's the schema so far.\r\n\r\nhttps://gist.github.com/ErisDS/cd0f3d33072410309f37\r\n\r\nMain things left to consider are:\r\n\r\n- what should the max length be for generic string columns - needs to be cross-db compatible\r\n- what should the max length be for generic text/blog columns - needs to be cross-db compatible\r\n- what should be `nullable` and what should just default to an empty string? Is there much different between the two? What works cross-db\r\n- what indexes should we add?"
630,'ErisDS',"{{@blog.title}} Not outputting in footer\n`{{@blog.title}}` is being used in a number of places in Casper - and outputting in most of them. The one place where it does not seem to be working at all is in the footer (located in default.hbs) where it refuses to output anything.\r\n\r\nI can't work out why"
628,'sebgie',"Clean up config - drop 'env' and use it by default\nWith all the non-env settings removed in #624, #625 and #626, config now only contains the env-based settings.\r\n\r\nTherefore there is no need to have .env at all, and we should serve the current environment's config by default\r\n\r\n- [ ] remove `.env` from config.js\r\n- [ ] make `config()` in ghost.js return the correct config for the current environment\r\n- [ ] remove `.env[process.env.NODE_ENV]` from code which uses config across the codebase (including unit tests)"
627,'ErisDS','Registering a new user bug\nSuper vague bug report:\r\n\r\nWhen registering a new user, and pressing *enter* - nothing happened. \r\n\r\nExpected behaviour: Should be immediately logged in, per @skattyadz\'s PR a while back. Or at least *something should happen.\r\n\r\nActual behaviour: Nothing happened. Upon clicking the "register" button again - received "you can only register one user" error.\r\n\r\nPossible cause: The "log me in immediately after registering" function is bound to the register button instead of the form submission?'
626,'sebgie','Remove the {{nav}} helper\nRemove the helper, filter tests and config for {{nav}}'
625,'sebgie',"Clean up config - move non-env based items to settings\nMove the language config to settings: \r\n\r\nconfig.defaultLang = 'en';\r\n\r\nconfig.forceI18n = true;\r\n\r\nDelete config.activePlugins. The code which depends on this should just not run if no plugins are set as active. Double check that this works as expected and fix if necessary.\r\n"
624,'ErisDS','Clean up config - move email to be environment based\nMail settings should be per environment.'
621,'javorszky',"Wordpress Export to Ghost initial version\nOne feature that everyone is clamouring at our heels for is the ability to move their data from an existing WordPress blog.\r\n\r\nWe have a shiny import feature, which needs a few tweaks to prevent duplication & to make sure tags work, but otherwise is working. \r\n\r\nWe should be able to write a plugin for WP which exports the data we support in exactly the format we need to use with our importer. This should provide the option to choose a single user to export, and then export all posts, tags, and any settings which are useful to us.\r\n\r\nIt would be great if the plugin also provided instructions on how to use the exported file with Ghost.\r\n\r\nThis is the initial version, because long term we'd like to provide this as a plugin for Ghost which reads the WXR format, rather than a plugin for WP, but we don't have all the pieces in place needed for that sort of plugin just yet."
619,'jamesbloomer','Bug/Enhancement: Image Upload overwrites existing images\nThe filename of uploaded images is not unique. As a result it is possible to overwrite images with newly uploaded images that have the same name. This applies if multiple images with the same filename are uploaded within a month.\r\n\r\n**Steps to reproduce**\r\n* Create a new post and insert a image (e.g.:`test.png`). -> Image is uploaded and stored  in the folder `/content/images/2013/Sep/test.png`\r\n* Create another post and insert a different image with the same filename. -> Image is uploaded and overwrites the previous image.'
618,'ErisDS','Remove the welcome email\nThis is an unneeded feature for the time being.'
609,'ErisDS','[EPIC] Casper 1.0\nCasper is nearly done! This issue is a final list of the things remaining.\r\n\r\n- [x] Remove concept of blog icon (for now)\r\n- [x] Settings image uploads #432 & #281 (in progress)\r\n- [x] #571 Add concept of blog cover photo\r\n- [x] #389 Theme helpers (Epic)\r\n\r\n### Bugs\r\n\r\n- [x] #591\r\n- [x] #592 \r\n- [x] #593\r\n- [x] #599 '
607,'cobbspur','Create prefix and suffix attribute for {{tags}} helper\nTags need a concept of prefix so that they can work in themes even if no tag is assigned to a post. \r\n\r\nEg:\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1065980/be7b8f42-13a6-11e3-83cf-ac8efc604caa.png)\r\n\r\n---\r\n\r\nTo my mind this should look like `{{tags prefix="in "}}` - and if no tags are present, of course nothing is output at all. So in the context of the screenshot above, you would just see the date.'
606,'javorszky',"Theme directory for community site in lieu of marketplace\nSome details from IRC chats:\r\n\r\n*  Marketplace isn't going to be ready in the next 3 weeks so we need something in the mean time as a placeholder\r\n* as we're launching with just themes, no plugins - it's pretty much just a theme directory\r\n* Short term solution is a WP minisite with a hacked up portfolio theme, or theme made for CSS Showcase galleries\r\n* This directory would just link to the website of whoever developed the theme, which presumably has its own instructions and download links\r\n* Should have: directory of screenshots, linking to the source, categorized by tags, and accept user submissions"
603,'ErisDS',"Get rid of JOE BLOGGS\nWe now have a concept of author, so no need to use 'JOE BLOGGS' anymore.\r\n\r\nOne interesting thing - if the author hasn't specified their name yet.. we should probably fall back to email address @JohnONolan ?"
597,'JohnONolan',"after logout username and password fields move when notification dissapears\nSummary of Issue \r\n------------------------------- \r\n\r\nafter logout username and password fields move when notification disappears\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\nlog out of ghost\r\n\r\nObserved result \r\n------------------------------- \r\n\r\n![login fields move](https://f.cloud.github.com/assets/4643742/1064564/13b9e41a-133c-11e3-9657-72d43514c5f1.gif)\r\n\r\n\r\nDesired result \r\n------------------------------- \r\n\r\nI don't think the notification should affect the placement of the login fields.  Only reason I even noticed it moving was when I attempted to click into the field as it moved and missed.  \r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6.4\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: d2cafe87b642ca78ac99bd28af1a049673118612\r\nBrowser: Chrome 29.0.1547.57"
596,'ErisDS','Signing in and then pressing the back button takes you to /ghost/signin/ instead of /ghost/\nSummary of Issue \r\n------------------------------- \r\n\r\nSigning in and then pressing the back button takes you to /ghost/signin/ instead of /ghost/\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- sign in\r\n- /ghost/ is loaded\r\n- press the browsers back button\r\n- you are taken to /ghost/signin/\r\n- message displays that says you were successfully logged out\r\n- now enter the address /ghost/\r\n\r\nObserved result \r\n------------------------------- \r\n\r\n- when logged in entering the address /ghost/signin/ redirects to /ghost/\r\n- pressing the back button right after logging in successfully takes you to /ghost/signin/ and says you were successfully logged out even though you were not actually logged out.\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6.4\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: d2cafe87b642ca78ac99bd28af1a049673118612\r\nBrowser: Chrome 29.0.1547.57'
593,'sebgie','Allow control of posts per page\nCurrently posts per page is set to 15, ideally this should be user configurable via a settings input. \r\n\r\nIf this is too much to do for 0.3 let\'s at least set the default to "6" and then punt to 0.4'
592,'gotdibbs','There should be no concept of /page/1/\nFrom the homepage of Ghost install, click onto "older posts" - you are taken to `/page/2/` - now click on "newer posts" - you are taken to `/page/1/` which exists and is a working thing.\r\n\r\n**Problem 1:**\r\n\r\n`/page/1/` should always redirect to `/` (it\'s duplicate content across multiple urls otherwise, which is bad for SEO)\r\n\r\n**Problem 2:**\r\n\r\nPagination, when on page 2, should link to `/` - not `/page/1/`'
591,'cobbspur','{{body_class}} outputting wrong data on paginated view\nOn site.com/page/2/ `{{body_class}}` outputs `post-template`\r\n\r\nIt should output `archive-template` if possible.'
583,'matthojo',"Mobile Editor UI: Tag UI is borked\nSummary of Issue \r\n------------------------------- \r\n\r\nTrying to add tags on the mobile UI is fun. Things disappear off of the screen and break in interesting ways.\r\n\xa0\xa0\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- load the markdown editor on a mobile\r\n- hit the tag icon and start trying to add a tag\r\n\r\n\xa0\xa0\r\nObserved result \r\n------------------------------- \r\n\r\n- The cursor drops down a line:\r\n\r\n![mobile broken](http://i.imgur.com/LCWPJ7k.png)\r\n\r\n- Sometimes it ends up looking really broken (haven't figured out how to reproduce this reliably):\r\n\r\n![mobile broken 2](http://i.imgur.com/z30PxK2.png)\r\n\r\n- If it gets into the state above, when you click done you see this:\r\n\r\n![mobile broken 3](http://i.imgur.com/G77UBPP.png)\r\n\xa0\xa0\r\nDesired result \r\n------------------------------- \r\n\r\nTag editor should stay in line, and nothing should ever appear below it. Perhaps there should be some fancy mobile-specific UI @JohnONolan ?\r\n\xa0\xa0\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nPhone info: iPhone 4S iOS 6.0.1 using the built in Safari browser"
582,'matthojo',"Mobile Editor UI: Notifications aren't on screen when saving draft etc\nSummary of Issue \r\n------------------------------- \r\n\r\nWhen saving a post on my mobile phone, I can't see the notification.\r\n\xa0\xa0\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- load the markdown editor on a mobile\r\n- write a few lines of text, so that the title is no longer on the screen, it should look something like:\r\n\r\n![writing post](http://i.imgur.com/LIWbWE4.png)\r\n\r\n- press the 'save draft' button\r\n\r\n\xa0\xa0\r\nObserved result \r\n------------------------------- \r\n\r\n- The screen moves down a little and the title becomes visible because of the notification, but the notification is not visible, it looks like:\r\n\r\n![saving post](http://i.imgur.com/1PzvUS8.png)\r\n\r\n\xa0\xa0\r\nDesired result \r\n------------------------------- \r\n\r\nOn mobile, the notification should probably always get overlaid at the top of the visible screen.\r\n\xa0\xa0\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nPhone info: iPhone 4S iOS 6.0.1 using the built in Safari browser\r\n"
581,'javorszky',"Settings + Login Validation\nI think the easiest way to handle validation is going to be to keep it flexible. Doing inline validation could get very messy very fast as soon as plugin authors jump in and start exploring the limits of Ghost.\r\n\r\nSo my suggesting is simple field highlighting and a standard error notification. (Ignore the weird actual notification style below, I couldn't find the sketch file with the proper design in it)\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1062246/d2046f44-1233-11e3-83ea-e55c1aeaa51d.png)\r\n\r\nRelated #387"
579,'ErisDS','DB Location\nPhilosophical question:\r\n\r\nDB exists in \r\n\r\n`core/server/data`\r\n\r\nBut all other user-customised content lives in /content/\r\n\r\nWe\'ve also had the issue once where a user wiped their DB by pasting over the top of their files and entirely replacing /core/ directory.\r\n\r\nWould it make more sense to keep the DB in\r\n\r\n`/content/data/`\r\n\r\nWhich makes our manual upgrade instructions as simple as - "copy all files except \'content\' over the top of your existing install"\r\n\r\n?'
577,'ErisDS',"URLs aren't being parsed properly in the markdown text\nIt looks like our markdown parser is getting stuck when it sees a URL. See this screenshot of the introductory post: http://c.skatty.me/R6c2\r\n"
572,'ErisDS','Move url from settings to env config\nThere is currently a URL setting in the fixtures, but no way to edit this. We want to remove the URL from there and instead have it defined as part of the environment config.\r\n\r\nThis allows people to specify the correct URL for their blog in various environments.\r\n\r\nIt should be set to the same as the host and port number for each environment by default.'
570,'sebgie',"Hosting: Cache invalidation headers\nSo that our hosting platform, and anyone else who wants to use heavy caching, can correctly clear the cache when new content is added, we need to ensure that the API returns cache invalidation headers from any request which makes a change.\r\n\r\nThe headers should be called `X-Cache-Invalidate` and the content should be a comma-separated list of any and all resources that are invalid as a result of the change.\r\n\r\nFor example, when a new post is created:\r\n\r\n`X-Cache-Invalidate: /, /page/*, /rss`\r\n\r\nWould be what we'd need for now\r\n\r\nWhenever a post is updated: \r\n\r\n`X-Cache-Invalidate: /post-permalink, : /, /page/*, /rss`\r\n\r\nWhen an image is uploaded, we need to specify\r\n\r\n`X-Cache-Invalidate: path-to-image`\r\n\r\nAs we add tag pages, archives, user pages and other routes we need to ensure that these also get invalidated correctly."
567,'skattyadz',"Settings API: Separate default settings from fixtures\nThis is related to #482 (migrations being a PITA) and #360 (BIG FAT refactor).\r\n\r\nSettings are kind of a special thing. They are not at all like the other models in the database - they have a clear set of pre-propulated rows (key, value pairs) and their presence is something the app needs to be able to rely upon.\r\n\r\nRather than using iterations of fixtures to update and add settings, we should have a clear place/way of defining what the required/default settings are, what their default values are, what their validation rules are, and whether or not they can be overwritten during an import (currentVersion should not be for example).\r\n\r\nWhenever a setting is requested, if it doesn't exist in the cache/database, lets check the settings definition & add it if it is present.\r\n\r\nThe validation rules can be used in the validate() method on the settings model to check that a given value is permitted for specific keys.\r\n\r\nPerhaps if this was shared, it would also be possible to use the validation rules to validate in the client.\r\n\r\nOnce this is done, settings can safely be removed from the fixtures."
556,'JohnONolan','Drop in the new Ghost logo\nAW YEAH'
545,'jfi',"Notifications are too long\nCurrently notifications do some fancy shit with the post title:\r\n\r\n`Your post: Some Very Long Post Title That I Wrote That is Long has been published!`\r\n\r\nThere are 2 problems with this\r\n\r\n1. The notification doesn't appear for long enough for me to actually read it\r\n2. On mobile devices this thing unnecessarily spans multiple lines\r\n\r\nLet's keep is simple, just\r\n\r\n`Your post has been published.`\r\n\r\nI think this is more useful to users, easier to understand, and more flexible in terms of layout."
544,'JohnONolan','SELF HOST THE FONTS\n# CONTEXT\r\n\r\nGOOGLE HOSTS THE FONTS\r\n\r\n# PROBLEM\r\n\r\nGOOGLE IS SLOW AND SOMETIMES ANNOYING\r\n\r\n# EXPECTATION\r\n\r\nTHINGS SHOULD NOT BE SOMETIMES SLOW AND ANNOYING\r\n\r\n# SUGGESTED SOLUTION\r\n\r\nSELF HOST ALL THE THINGS\r\n\r\n![THINGS](http://cdn.alltheragefaces.com/img/faces/large/misc-all-the-things-l.png)'
528,'cobbspur',"Theme API: `{{url}}` handlebars helper\nWhen in the context of a post, this helper should output '/' + slug.\r\n\r\nUsers will soon also have slugs, and so will tags, but none of this is available yet. Therefore the helper should check that it is definitely in a post context and only output if it is. Once we get tag pages and user pages we can add those URLs in.\r\n\r\n"
527,'halfdan','Ghost install in sub directory support\nWe want to support sub directories so that someone can feasibly install their Ghost at myurl.com/blog/.\r\n\r\n- [ ] Parse the subdirectory out of the config.url\r\n- [ ] Fix up Ghost to then honor that sub directory where necessary. This includes in the `{{url}}` theme helper (#528), and probably most of the internal paths.\r\n- [ ] It would be awesome to do a temporary public demo install of this feature so it can be thoroughly tested.\r\n'
521,'cobbspur',"Invalid Helper Usage Crashes Ghost Completely\nSteps to reproduce:\r\n\r\nIn the currently active theme, call a helper that doesn't exist, eg. {{fuck}}\r\n\r\nWhat follows is\r\n\r\n    Error: Missing helper: 'fuck'\r\n    //some shit\r\n    npm ERR! weird error 8\r\n    npm ERR! not ok code 0\r\n\r\nand Ghost craps out completely.\r\n\r\nThis error should definitely log to console, but it shouldn't crash all of Ghost if someone happens to make a typo in a theme helper."
517,'ErisDS','REGRESSION: The Publish Button is Fucked\n#438 introduced very nice interactions, but also completely destroyed the publish functionality.\r\n\r\nEditing an existing post causes the publish button to read "publish now" (should read "update post") - clicking on it fires an error of "object, object".\r\n\r\nIt is also not possible to unpublish, or do anything else with the post.\r\n\r\nOne minor addition missed in #492 that was a part of #385 is that the chevron pop-up arrow spins on hover, but does not un-spin when hover is removed. I wrote all the code for this, so it should already exist and work - not sure what\'s going on there.'
514,'JohnONolan','Post delete button displays vertically\nSummary of Issue \r\n------------------------------- \r\n\r\nPost delete button displays vertically\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- go to /ghost/content/ in Chrome\r\n- select a post\r\n- click the gear in the upper right\r\n\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nthe delete option displays vertically (see screenshot)\r\n\r\n![screen shot 2013-08-24 at 10 46 27 am](https://f.cloud.github.com/assets/4643742/1021170/0b4f88ea-0ce6-11e3-9467-ef1275b8e263.png)\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6.4\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: 590ba48988b51b9c5e8d99afbb84c997436d7f21\r\nBrowser: Chrome 29.0.1547.57'
511,'gotdibbs',' clicking publish now with no post title reset button to save draft\nSummary of Issue \r\n------------------------------- \r\n\r\nclicking publish now with no post title reset button to save draft\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- click new post\r\n- change action button to publish now\r\n- click publish now\r\n\r\nObserved result \r\n------------------------------- \r\n\r\n- message displays that says: You must specify a title for the post\r\n- action button resets to dave draft\r\n\r\nDesired result \r\n------------------------------- \r\n\r\naction button should remain on publish now\r\n\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6.4\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: 3209a960290c3a5373be52507bb7dd3ad4af526e\r\nBrowser: Chrome 29.0.1547.57'
508,'cobbspur',"Theme API: rename postclass and bodyclass\nFrom now on we're gonna honour an `_` naming convention for things which are helpers which have filters. Not sure how long it'll work out, but we'll try it.\r\n\r\nThus `{{postclass}}` and `{{bodyclass}}` become `{{post_class}}` and `{{body_class}}`"
507,'garthk','Improve the Ghost EC2 deployment script(s)\nWe have a script for [configuring](https://gist.github.com/ErisDS/3d7b5e2731f56f8617f8) and a script for [deploying](https://gist.github.com/ErisDS/6f32e9b75d08a1c81f9b) to amazon EC2. It works (just) and is what we have been using so far, however they were written by me and leave an awful lot to be desired - especially in terms of public consumption.\r\n\r\nIt would be nice to make these into something which works properly and is much more acceptable for public consumption.'
506,'garthk',"Test out Ghost on Nodejitsu\nNodejitsu, have recently updated to support node 0.10 and node-gyp properly. Ghost should now run successfully on their platform & I'd like to get this tested asap. I think this is likely to be one of the most straightforward ways to get Ghost running (if it works). \r\n\r\nIf it doesn't work I have contact with one of their engineers so we should be able to communicate our problems to them and maybe even get them fixed.\r\n\r\nIf it does work, I'd love to get this documented as an 'officially supported' way of running Ghost.\r\n"
502,'jamesbloomer','Weird files  in root level of ghost\nI still have not been able to track down when these files are created or what triggers it but they have appeared a number of times over the last week.\r\n\r\nHere are several of the files that I found today: https://gist.github.com/aboutte/6311396'
499,'javorszky',"Limit login attempts \nFurther to #468...\r\n\r\nIf there are # failed login attempts for user email, prevent the user from logging in (lock their account) & require that they use the forgotten password pathway to unlock their account again.\r\n\r\nFor posterity's sake # = 5\r\n\r\n"
490,'ErisDS',"There shouldn't be validation on login\nCurrently, login email address and more importantly the length of password is validated, which is causing issues. "
488,'sebgie',"Theme Switcher\nRequires #107\r\n\r\nFor 0.3 we will have no fancy theme selection UI - we're just going to keep it simple.\r\n\r\nTo start with, we will just allow theme selection via a dropdown menu under `settings>general`.\r\n\r\nThis dropdown menu should be populated with a list of the directories which currently exist under `ghost/content/themes`\r\n\r\nSelecting one option should update the activeTheme setting in the database."
487,'matthojo',"Problems with Editor layout breaking on iOS\n**Device:** iPad & iPhone\r\n**OS:** 6.1\r\n**Browse:** Safari\r\n**Ghost Version:** 0.2.1\r\n\r\nWhen viewing Ghost on an iOS device and rotating the screen from landscape to portrait, the screen is taken to the right.\r\nFor some reason on an iOS device the screen has an overflow on the 'y' axis, which only occurs on orientation change.\r\n\r\n![iphone](https://f.cloud.github.com/assets/367517/1001692/08529790-0a70-11e3-8232-0882a6defa28.gif)\r\n\r\n**Updated to match the _actual_ issue**\r\n"
484,'javorszky','Move /login/ onto /ghost/ if logged out\nMake the login form just appear on /ghost/ if the user is not logged in - and the admin appear on /ghost/ if the user is logged in\r\n\r\nEliminating the need for /ghost/login/\r\n\r\nRequires #483 '
480,'JohnONolan',"Remove Typeplate Dependency\nTypeplate is a SASS library designed to provide handy typographic styles and mixins. It's very nice, but in reality we use almost none of it. I'm going to strip it out of the codebase, moving the few rules that we do use into our global styles.\r\n\r\nRe-open this issue if any unexpected bugs occur."
477,'cobbspur','Content Management Preview Pane Should Display Post Title\n![image](https://f.cloud.github.com/assets/120485/999275/78aea572-0a27-11e3-93fa-2aee62deb81e.png)\r\n\r\n---\r\n\r\nOn the content management screen, the preview pane should include the title of the post as an H1 above the post content.'
476,'matthojo','When rotating iPad from horizontal to vertical on /login LOG IN button gets moved\nSummary of Issue \r\n------------------------------- \r\n\r\nWhen rotating iPad from horizontal to vertical on /login LOG IN button gets moved\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- Hold iPad on /login horizontally\r\n- Rotate iPad vertically\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nWhen the iPad becomes vertical the LOG IN gets stuck under the email address field\r\n\r\n![ipad horizontal to vertical rotation](https://f.cloud.github.com/assets/4643742/998458/f9e330f8-0a00-11e3-872b-8312d2f9a9f5.gif)\r\n\r\n\r\nDesired result \r\n------------------------------- \r\n\r\nThe LOG IN button should be to the right of the password field\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: 637679851b30d8f125ba2a40712237fe277d0c5e\r\nBrowser: Chrome 28.0.1500.95'
474,'javorszky','a@ghost.1 should not acceptable username\nSummary of Issue \r\n------------------------------- \r\n\r\na@ghost.1 should not acceptable username\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\nregister for user with email address of a@ghost.1\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nghost excepts a@ghost.1 as a valid email address\r\n\r\nDesired result \r\n------------------------------- \r\n\r\nprobably difficult to limit to just TLDs but definitely want numbers to be invalid\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: 637679851b30d8f125ba2a40712237fe277d0c5e\r\nBrowser: Chrome 28.0.1500.95'
472,'ErisDS',"Theme API: {{bodyclass}}, {{postclass}} helpers\nrequires #367\r\n\r\n`bodyclass` and `postclass` are two helpers which output useful classes for specific containers.\r\n\r\nThey have a set of defaults:\r\n\r\nBy default `postclass` should output 'post' and also the names of any tags applied to the post\r\n\r\nBy default `bodyclass` should output the current page type, one of 'home' or 'post'. In future this may also have 'tag' or 'user'.\r\n\r\nPlugins should be able to register a filter for these lists of classes, so that they can change them or add their own."
471,'ErisDS','Theme API: Option to sanitise {{content}} / {{excerpt}}\nWhen I want to output a list of posts on my blog homepage with 50 word excerpts with `{{content words="50"}}`, I run into a bit of a problem:\r\n\r\n![image](https://f.cloud.github.com/assets/120485/993921/b365be5a-09a3-11e3-8616-cac26ef68078.png)\r\n\r\nIt\'s taking the full HTML content of the post, limited to the word count, and spitting it out. This obviously doesn\'t work quite how I want it to in this context - which is effectively a post excerpt.\r\n\r\nIn WordPress you have `the_excerpt()` which strips all html tags and images and returns sanitised content inside a single `<p>`\r\n\r\nDo we want to introduce `{{excerpt words="50"}}` which returns `{{content words="50"}}` without any html tags? or do we want to add an option to sanitise, like `{{content striphtml="true" words="50"}}`\r\n\r\n(Personally I\'m in favour of `{{excerpt}}`)'
469,'gotdibbs',"Strip whitespace on titles\nvia @cgiffard in #467 \r\n\r\n> I'm wondering whether the title itself should just be trimmed? Is there a reason we'd want to leave leading or trailing whitespace?\r\n\r\n+1 for trimming the title itself"
468,'javorszky',"Login UX vs Security\nAs of #374, we now have really nice UX for people logging in, with lots of useful messaging to help you when things don't quite go right.\r\n\r\nHowever, telling the user that it is specifically their password which is wrong is usually considered bad practice from a security stand point as it aids brute-forcing.\r\n\r\nI would like to add some measures to prevent this, such as restricting login attempts in a time period.\r\n\r\nAdditionally, we should decide whether it is ok to leave the messaging as-is or whether we should make it a little less specific.\r\n"
466,'matthojo','Email Address and Password fields on iPad are not centered\nSummary of Issue \r\n------------------------------- \r\n\r\nEmail Address and Password fields on iPad are not centered\r\n\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- go to /login on iPad\r\n\r\nObserved result \r\n------------------------------- \r\n\r\n- The Email Address and Password fields are favoring the right hand side (see attachment: Login screen on iPad) \r\n![login screen on ipad](https://f.cloud.github.com/assets/4643742/990753/9282e494-093d-11e3-9138-efea6f2df1e1.png)\r\n\r\n- The Email Address and Password field become centered as soon as you put a character in the Email Address field\r\n\r\nDesired result \r\n------------------------------- \r\n\r\n- Centered fields\r\n- No shifting of fields\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: iOS 6.1 in simulator and iOS 7 Beta 4\r\nServer OS: CentOS 6\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: ae3b1ac6353ec1023b76dbd95e32c24ad5fad7b2\r\nBrowser: Chrome 28.0.1500.95'
452,'ErisDS','Drop !image[]\nInitially I came up with `!image[]` as a way of differentiating between different media types explicitly - however following recent discussion I think it makes more sense to stick to the markdown native `![]` and do the format detection behind the scenes. '
450,'matthojo','Modals a Breaking Editor Footer\nOpening the "?" modal on the editor screen in latest chrome:\r\n\r\nModal opens - footer of editor disappears - resizing the viewport causes footer to magically re-appear. Bugtastic.\r\n\r\nCan you reproduce?'
449,'cobbspur','Image Uploader Height is Borked\nSetting opacity:0; does not remove an object from the flow of the document, as such, it still takes up space within it. \r\n\r\n![image](https://f.cloud.github.com/assets/120485/984729/4bfec006-08a7-11e3-91d8-4005c3454b59.png)\r\n'
448,'cobbspur',"All routes/urls should have a trailing slash. Missing trailing slashes should be added\nEvery route in Ghost should expect a trailing slash.\r\n\r\n- [ ] If a request is made to Ghost which does not have a trailing slash, assume it is incorrect, and add the trailing slash before attempting to match the route (middleware?)\r\n- [ ] Add trailing slash to permalinks \r\n- [ ] Ensure settings subpages have a trailing slash\r\n- [ ] All other routes which don't have a trailing slash should have one added, including the API"
447,'matthojo','404 Page Front End (Admin)\n![404](https://f.cloud.github.com/assets/120485/984608/a9d11cbe-08a3-11e3-8260-887d3d5e1be7.png)\r\n\r\n* Design in shared Sketch file\r\n* Export little Ghost as transparent PNG\r\n* Everything should be both horizontally and vertically centred\r\n* Everything should scale down slightly w/ media queries to fit mobile devices'
445,'JohnONolan',"Kill stupid text-indent rules\ntext-indent rules on `<p>` tags are causing way more problems than they're solving."
443,'gotdibbs','/logout/ => /signout/\nThe current signout url is `/logout/` - because we already use the naming conventions of "Sign up" and "Sign in" it should be `/signout/`'
433,'sebgie','Post with "?" as title can not be navigated to\nSummary of Issue \r\n------------------------------- \r\n\r\nPost with "?" as title can not be navigated to\r\n\xa0\xa0\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- create a new post\r\n- fill in "?"\r\n- publish post\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nWhen generating the address from the title the question mark gets stripped out leaving  the address for the post the home page\r\n\xa0\xa0\r\nDesired result \r\n------------------------------- \r\n\r\nWhen all characters from the title are stripped out use the post ID?\r\n\xa0\xa0\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nLatest Commit: e765af4633e55c46a3dc62482f76333c00dff929\r\nBrowser: Chrome 28.0.1500.95'
432,'cobbspur','CSS for dropzone\nThe dropzone is now larger than original design due to the need for additional hidden elements that are used during the upload cycle. Needs someone better at css than me to pick through it or more ideas on how it should look after having a play with it on both the editor and settings pane. \r\n\r\nConsideration is needed for the fail scenarios that introduce a button such as uploading a bitmap image. The goal is for the dropzone to look balanced and only adjust when image is loaded not during transitional stages.\r\n\r\n@JohnONolan @matthojo '
429,'ErisDS','Casper.js tests fail on Vagrant\nQuick issue to remind myself to fix this - the random guestimate waits in the Casper.js tests are stupid and fail on slow environments like Vagrant.\r\n\r\nTurn these into `waitFor` calls and all will be resolved '
422,'ErisDS',"Change Editor to use Github Flavored Markdown\nAt the moment we're using the standard Markdown mode, however we want to offer support for GFM.\r\n\r\n- [x] download and configure the GFM mode for CodeMirror so we can use the extended feature set\r\n- [x] implement the same modifications for showdown. Showdown doesn't have support natively but there are [examples out there](https://gist.github.com/jorilallo/1283095)\r\n\r\nShould add support for task lists, strike through etc \r\n"
421,'matthojo','Markdown keyboard shortcuts do not put insertion point in correct spot\nSummary of Issue \r\n------------------------------- \r\n\r\nMarkdown keyboard shortcuts do not put insertion point in correct spot\r\n\r\nBold\r\nEmphasize\r\nInline Code\r\nStrike-through\r\n\xa0\xa0\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- Use keyboard shortcut for Bold (Ctrl / Cmd + B)\r\n\xa0\xa0\r\nObserved result \r\n-------------------------------\r\n \r\n- insertion point is after ****\r\n\xa0\xa0\r\nDesired result \r\n------------------------------- \r\n\r\n- insertion point between ** and **\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nBrowser: Chrome 28.0.1500.95'
418,'javorszky','Login session does not invalidate with new DB\nSummary of Issue \r\n------------------------------- \r\n\r\nSession does not invalidate with new DB\r\n\xa0\xa0\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- sign into ghost\r\n- click New Post\r\n- stop the server\r\n- mv core/server/data/ghost-dev.db core/server/data/ghost-dev.db.old\r\n- start the server\r\n- Click Publish Now on open post\r\n\xa0\xa0\r\nObserved result \r\n------------------------------- \r\n\r\n- when starting server new DB created with no user\r\n- click Publish Now successfully saves post\r\n\xa0\xa0\r\nDesired result \r\n------------------------------- \r\n\r\nNot really sure here....\r\n\r\n- first with new DB I should not be allowed to access to /ghost at all\r\n- second I definitely should not be allowed to publish new content\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nBrowser: Chrome 28.0.1500.95'
414,'ErisDS','Attempting to publish post with out title does not give a reason why the post could not be published\nSummary of Issue \r\n------------------------------- \r\n\r\nAttempting to publish post with out title does not give a reason why the post could not be published\r\n\xa0\xa0\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- click on New Post\r\n- Click Publish Now\r\n\xa0\xa0\r\nObserved result \r\n------------------------------- \r\n\r\nFollowing message is displayed:\r\n\r\nYour post: has not been published \r\n\xa0\xa0\r\nDesired result \r\n------------------------------- \r\n\r\nA user friendly message explaining why the post could not be published\r\n\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nBrowser: Chrome 28.0.1500.95'
413,'jgable','Creating content with same name results in ugly address\nSummary of Issue \r\n------------------------------- \r\n\r\nCreating content with same name results in ugly address\r\n\xa0\xa0\r\nSteps to reproduce \r\n------------------------------- \r\n\r\n- click on New Post\r\n- Title post "My First Post"\r\n- Publish the post\r\n- click on New Post\r\n- Title post "My First Post"\r\n- Publish the post\r\n- click on New Post\r\n- Title post "My First Post"\r\n- Publish the post\r\n\r\n- Go to Content tab and review the address of each post\r\n\r\nObserved result \r\n------------------------------- \r\n\r\nSecond post gets the address of my-first-post-2\r\nThird posts gets the address of my-first-post-2-3\r\n\xa0\xa0\r\nDesired result \r\n------------------------------- \r\n\r\nThird post should get the address of my-first-post-3\r\n\xa0\xa0\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nBrowser: Chrome 28.0.1500.95'
412,'jgable','Navigating to a /page that does not exists results in an empty page\nSummary of Issue \r\n------------------------------- \r\n\r\nNavigating to a page that does not exists results in an empty page\r\n\xa0\xa0\r\nSteps to reproduce \r\n------------------------------- \r\n\r\nGo to: /page/10000/\r\n\xa0\xa0\r\nObserved result \r\n------------------------------- \r\n\r\nEmpty page that displays: Page 10000 of 1\r\n\xa0\xa0\r\nDesired result \r\n------------------------------- \r\n\r\nLoad the last existing page\r\n\xa0\xa0\r\n\r\nAdditional Information \r\n-------------------------------\r\n\r\nClient OS: Mac OS X 10.8.4\r\nServer OS: CentOS 6\r\nNode Version: 0.10.16\r\nGhost Build Number: 0.2.1\r\nBrowser: Chrome 28.0.1500.95'
402,'ericterpstra',"Post Settings Menu: published date\nThis is related to / semi-dependent on #370 - in fact either can be done first.\r\n\r\nUser story: https://github.com/TryGhost/Ghost/wiki/Write-Post#changing-post-settings\r\n\r\nAdd a new item to the post settings menu which allows users to edit the published date on a published post.\r\n\r\nThe label should say 'Published date'. The input should be a text input in the format:\r\ntext input [12 Jul 13] [calendar-icon]\r\n\r\nThe calendar icon is already present as: $i-calendar\r\n\r\nClicking on the calendar icon should open a date picker.\r\n\r\nFor the time being the field should be disabled if the post is not yet published, and the date picker should not allow the user to select dates in the future. This is to prevent confusion as we do not yet have scheduling available."
392,'ErisDS',"Ghost is completely broken when not using `node index.js` due to path errors in plugin/loader.js\nI discovered this morning that the latest Ghost errors and dies when you attempt to start it through a manager such as upstart.\r\n\r\nThis is due to the path generation in `plugins/loader.js` generating invalid paths when not running Ghost from its root directory.\r\n\r\nI believe the error is due to using process.cwd() and __dirname and attempting to calculate a relative path between them.\r\n\r\nHowever, what I'm not sure of is what is the correct approach.. using process.cwd() as the root, or __dirname and knowing the path from the local file.\r\n\r\nAny input on this would be appreciated, in the meantime I am going to attempt to resolve the issue, at least short term."
390,'matthojo','Image Upload UI Issue \nFrom the VIP forum:\r\n\r\nBeen playing around with the latest Nightly (awesome btw) and noticed that when I drag and drop an image into the preview window, it adds fine and crops to the width of the preview. However, when I then open up the help modal (clicking on the ? icon) the image un-crops and flows over the edge of the browser window.\r\n\r\nOS: Mac OS X 10.8.3\r\nNode: 0.10.0\r\nGhost: 0.2.2-4\r\nBrowser: Chrome 28.0.1500.95'
389,'ErisDS',"[EPIC] Theme Helpers\nThis is an epic issue for all the theme helper issues in Milestone 0.3. It is assigned to me because it's purely here for keeping track of the individual issues. I will probably keep adding to it and I doubt it will be closed until 0.3 is complete.\r\n\r\n## Remove helpers\r\n\r\n- [x] `{{nav}}` - Not ready for this yet ~~#626 ~~\r\n\r\n## Name change requests  ~~#381~~\r\n\r\n- [x] `{{dateFormat}}` => `{{date}}`\r\n\r\n*Would also like an option to return date in format: 12 Aug 2013*\r\n\r\n- [x] `{{paginate}}` => `{{pagination}}`  \r\n\r\n## New helper requests\r\n\r\n### Globals #172\r\n\r\n- [x] `{{@blog.title}}`\r\n\r\n- [x] `{{@blog.description}}`\r\n\r\n- [x] `{{@blog.url}}` - The base url of the blog\r\n\r\n- [x] `{{@blog.logo}}`\r\n\r\n- [x] `{{@blog.cover}}` - Blog cover image\r\n\r\n- [x] `{{@blog.themedir}}` - Url of the active theme directory\r\n\r\n### Post Data #528\r\n \r\n- [x] `{{url}}` - The permalink\r\n\r\n### Next Post (Punted to 0.4)\r\n\r\n- [x] `{{nextpost}}` - Queries Ghost for the next newest post after the current one. If no newer post exists, it returns the next oldest post after the current one.\r\n\r\n### Previous Post\r\n\r\n- [x] `{{previouspost}}` - Queries Ghost for the next oldest post after the current one. If no older post exists, it returns the next newest post after the current one.\r\n\r\n### Author Data ~~#358~~\r\n\r\n- [x] `{{author.name}}` - Returns user's firstname+lastname (this is `.full_name` for now)\r\n\r\n- [x] `{{author.email}}`\r\n\r\n- [x] `{{author.url}}` - URL field from user settings\r\n\r\n- [x] `{{author.image}}` - Profile picture\r\n\r\n- [x] `{{author.cover}}` - Cover image\r\n\r\n- [x] `{{author.bio}}`\r\n\r\n- [ ] `{{author.profile}}` - URL to user's public profile / list of posts\r\n\r\n### Tags #369\r\n\r\n- [x] `{{tags}}` - Should put both tags, as well as link to tag archives \r\n\r\n### Header / Footer for scripts / styles ~~#382~~\r\n\r\n- [x] `{{ghost_header}}`\r\n\r\n- [x] `{{ghost_footer}}`\r\n\r\n### Class lists ~~#472~~\r\n\r\n- [x] `{{body_class}}` - Handy classes on the body tag\r\n\r\n- [x] `{{post_class}}` - Handy classes on the post container tag\r\n\r\n### Excerpt ~~#471~~\r\n\r\n- [x] sanitise `{{content}}` / `{{excerpt}}` \r\n"
387,'matthojo','Sign up screen UI\nFirst: requires design, potentially inc validation?\r\n\r\nSecond: requires implementation'
386,'JohnONolan','Sign up screen UI\nFirst: requires design\r\n\r\nSecond: requires implementation'
385,'ErisDS','Publish button does not behave as expected\nWhat the publish button does right now:\r\n\r\n* Says "save draft"\r\n* You click on the dropdown arrow\r\n* Menu Opens\r\n* You click on publish\r\n* The post immediately publishes and the menu stays open\r\n\r\nWhat it *should* do:\r\n\r\n* Says "save draft"\r\n* You click on the dropdown arrow\r\n* Menu opens\r\n* You click publish\r\n* Publish becomes checked\r\n* Menu closes\r\n* Button reads "Publish Post"\r\n* You click on the button\r\n* The post is published\r\n\r\nTo see this in action - go to Tumblr.com and write a new text post. They have this exact same button - and it works in the correct way.\r\n\r\nAlso related: #352 '
383,'cobbspur','Insert meta generator data into theme header output\nIn order to track data on who\'s using Ghost, and what version (like http://builtwith.com) we need to output a Ghost meta tag into the source of all Ghost blogs\r\n\r\n`<meta name="generator" content="Ghost 0.3" />`\r\n\r\nThis depends on #382 being completed first'
382,'cobbspur','Theme API: header & footer for script/style output\nI don\'t know if there is an issue relating to this - so apologies if so. Where are we with theme hooks? \r\n\r\nWe quite urgently need an equivalent of `wp_head()` through which to output (or enqueue) scripts and stylesheets, as well as meta content, like...\r\n\r\n`<meta name="generator" content="Ghost 0.3" />`\r\n\r\nLikewise we\'ll need something equivalent to wp_footer to inject analytics codes and so forth.'
381,'cobbspur','Helper Name Changes\n`{{paginate}}` => `{{pagination}}`\r\n\r\n`{{dateFormat}}` => `{{date}}`'
380,'ErisDS',"Theme helper names could be clearer\nI know there was another issue about this ages ago when it was named something even more convoluted - but I can't find that issue. \r\n\r\n`{{settings.title}} | {{settings.description}}`\r\n\r\nthis feels very weird in the context of editing theme files - what are these settings? Where are they coming from? Is what's being output the title/description for a settings page? Are these things outputting settings that control the title/description?\r\n\r\nI think it would be much clearer to go with...\r\n\r\n`{{blog.title}} | {{blog.description}}` "
376,'skattyadz','Protect critical files against accidental upgrade overrides\nFrom VIP.tg docs\r\n\r\n> When upgrading remember that if you modified your config.js file you need to be sure not to paste over the top of it with a new version… or at least take a copy of it to replace again afterwards. This will maintain your custom config.\r\n\r\nWe need to protect against this better. If a user wipes out config.js accidentally, they are pretty fucked.\r\n\r\nThe most standard method (ala WP) is something like `config-sample.js` which gets renamed during installation. Can we do this? Will it interfere with any of our other processes?'
375,'javorszky','Error thrown on invalid login\nIf I attempt to login with incorrect credentials, the following error appears on the server console:\r\n```\r\nError occurred:  EmptyResponse Error: EmptyResponse\r\n    at /home/vagrant/code/Ghost/node_modules/bookshelf/bookshelf.js:354:51\r\n    at Object.then (/home/vagrant/code/Ghost/node_modules/when/when.js:374:15)\r\n    at run (/home/vagrant/code/Ghost/node_modules/when/when.js:268:8)\r\n    at /home/vagrant/code/Ghost/node_modules/when/when.js:436:5\r\n    at Object.drainQueue [as _onImmediate] (/home/vagrant/code/Ghost/node_modules/when/when.js:747:4)\r\n    at processImmediate [as _immediateCallback] (timers.js:317:15)\r\n```\r\n\r\nThis error should be handled and should never end up on the console.'
374,'javorszky','Users: Login / Signup validation\nOn signup:\r\n\r\n- we need to validate password length / strength\r\n- we need to validate email addresses\r\n- there should probably be both server and client side validation?\r\n\r\nOn login:\r\n\r\n- no additional validation needed, other than telling a user their login failed because their credentials were correct, or otherwise providing a sensible error if something goes wrong as per #355\r\n\r\n\r\n'
371,'jfi',"Add transitions between settings tabs\nWhen clicking between tabs on the ghost settings page, the jerky changes are slightly jarring. I think we could give this a much smoother feel with some very subtle transitions. I'd love to see what a 0.25s fadeOut/fadeIn would look like which switching between settings tabs."
370,'ericterpstra','Post Settings Menu: update permalink\nSetting up the Post Settings Menu:\r\n\r\nUser story: https://github.com/TryGhost/Ghost/wiki/Write-Post#changing-post-settings\r\n\r\nIt\'s time to re-instate the cog for the post settings menu on the editor screen, and the menu itself. For now the menu should have one item for updating the permalink.\r\n\r\nEditing the permalink:\r\n\r\nThe label should say "URL", and the input should be a text input.\r\n\r\nThe permalink should be validated as available and valid. This will requires some refactoring of the generate slug method I think, as we need to both expose a way of performing a validity check and ensure that a post is never saved server side with an invalid permalink.\r\n\r\nIf a permalink is left unavailable or invalid the post provide an error on save much the same as if the title is left blank.\r\n'
369,'skattyadz',"Theme API: Post Tags: New helper\nrequires #367 \r\n\r\nOnce we have tags in place on posts, we'll want to expose this through the theme api with a {{tags}} helper.\r\n\r\nMost basic form of the helper should output the list of tags as a comma separated string.\r\n\r\n[more info here soon]"
368,'skattyadz','Post Tags: Autocomplete tags\nrequires #367 \r\n\r\nThere is a user story for this here: https://github.com/TryGhost/Ghost/wiki/Write-Post#adding-a-tag---2\r\n\r\nThis issue surrounds populating the autocomplete menu as a user types. This will require api calls etc and proper refactoring of the tag-ui js file if it was not done in #367'
367,'skattyadz',"Post Tags: Add to post\nWe now have both the UI and the database tables for creating post tags, so it's time to go in and make it possible to add a tag to a post.\r\n\r\nThere is a user story for this here: https://github.com/TryGhost/Ghost/wiki/Write-Post#adding-a-tag---2\r\nThe functionality for this issue should be what is written in the user story, with the exception of the parts to do with the autocompletion menu which I have separated into #368\r\n\r\nThe focus of this issue should be on making it possible to add a tag to a post, retrieve the tags associated with a post and populating the Tag UI when editing a post, adding the api calls necessary, ensuring the data model works in a sensible way & possibly refactoring all the Tag UI JS into a small jquery widget."
366,'pmgarman','Basic RSS Feed\nThe most basic version of subscriptions - Ghost blogs need an RSS feed. There are a few node modules out there to help with this.\r\n\r\nImplement a basic RSS feed that is available on an obvious routes and can be subscribed to with popular feed readers such as Reeder.'
365,'tgriesser',"Switch to Knex migrations\nNot put a milestone on this cos it'll be done when it's done, but I thought I'd open this whilst I'm at it.\r\n\r\nWhen Knex migrations are ready, it would be great to switch Ghost over to using them."
364,'gotdibbs','MySQL Support\nThis one is super high priority.\r\n\r\nWe need to test switching Ghost over to MySQL by way of a config setting, and making sure that it still runs as we would expect. \r\n\r\nProvided it all works, it would be great to write some documentation on the wiki on how to get started with Ghost and MySQL so that we have it ready to share.'
363,'gotdibbs','Infra: Casper tests in build / grunt\nThis is super low priority, but it would be really nice to have the casper tests run on build, or at the very least have a super-simple way to run them via grunt.'
362,'gotdibbs',"Infra: Test Fixtures\nIt seems to me that our tests should use independent fixtures. \r\n\r\nThe migrations can be run on the database as and when we are testing some aspect of the exact setup, for example testing migrations/import/export. However, I think we really should have a comprehensive set of fixtures, setup like a real populated blog, for testing data models etc.\r\n\r\nWhilst doing this it would also be great to take a look at the fact our so-called 'api' tests actually test the data model. Perhaps rename these to model_*_spec and create an example of what a real API test might look like.\r\n\r\nref #483, #731"
359,'jgable','Infra: JS build for admin client\nWe now have rather a lot of javascript files which make up the admin client. We need to concatenate these into a couple of sensible groups of files and minify them etc for serving to the client.\r\n\r\nBefore anyone jumps in and shouts dibs for this, this one probably requires quite a bit of discussion around both when to do this and how. There was some previous discussion here: #93 '
358,'cgiffard',"Theme API: Users: Post Author\nImplement the concept of post author both in the admin and for the theme.\r\n\r\nOn the content screen in the admin, the WRITTEN by/PUBLISHED by JOE BLOGGS text should be updated to use the author of the selected post.\r\n\r\nFor the themes, `{{author}}` should output the post author's full name. This might be a helper or some clever manipulation of data."
356,'cgiffard','404 error handling for admin & blog\n1) Improve 404 error handling for Ghost admin urls:\r\n\r\nCurrent Behaviour:\r\nIf you navigate to /ghost/fsdf you receive an error message `Cannot GET /ghost/fsdf`\r\n\r\nDesired Behaviour:\r\nServe a template which says `Ghost 404 Page Not Found` and that we can edit with a nice design later.\r\n\r\n2) Improve 404 error handling for blog/general urls:\r\n\r\nCurrent Behaviour:\r\nIf you navigate to /fsdf (assuming there is no post with that slug) the page spins.\r\n\r\nDesired Behaviour:\r\nIf the theme does not provide a 404.hbs template, then serve our Ghost 404 template.\r\n\r\n'
352,'gotdibbs','Regression: Popup/Dropdown button menus should animate + indicate currently active state\n![image](https://f.cloud.github.com/assets/120485/924073/efa74168-ff5d-11e2-85a2-1e1ee3771e56.png)\r\n\r\nThere should be a checkmark against whatever the currently active state of the button is. This was previously coded and working. Should look like:\r\n\r\n![image](https://f.cloud.github.com/assets/120485/924078/0beaacac-ff5e-11e2-9024-02d53ad5ce7f.png)\r\n\r\nAlso - the dropdown arrows should animate (spin) - this is another regressions, and was fully working previously. All the code exists (CSS transforms/transitions) for this to work).'
350,'matthojo','Regression: Scroll shadows have disappeared\nWhen various content panels are scrolled, the floating header should receive a sexy box shadow. This was working, and is now not.\r\n\r\nMost obvious place to test: on content overview screen, scroll the content in the preview pane. You can see how the floating header has a semi-opaque background. It should also have a shadow when scrolled. I wrote both CSS and JS to do this (in a basic way). \r\n\r\nTask 1: locate code and get it working again\r\nTask 2: improve that code'
349,'gotdibbs','Word count grammar - 0 words / 1 word / % words\nCurrently the word count on the preview pane always says `# words`. It should be \r\n\r\n* 0 words\r\n* 1 word\r\n* % words'
348,'jfi','Display keyboard shortcut appropriate to OS\nWhen listing keyboard shortcuts it would be nice to detect Mac/iOS and serve `⌘` for them and `Ctrl` for everyone else.'
347,'matthojo','Heading keyboard shortcut issues\nWhen adding a heading in markdown via keyboard shortcut, a new line is inserted where it shoudln\'t be.\r\n\r\nSteps:\r\n\r\n* new doc\r\n* write something\r\n* highlight it\r\n* `ctrl + alt + 1`\r\n\r\nExpected behaviour:\r\n\r\n* "word" is turned into "# word"\r\n* cursor moves to end of the line\r\n\r\nActual behaviour:\r\n\r\n* "word" is turned into "# word"\r\n* newline is inserted before heading\r\n* newline is inserted after heading\r\n* cursor moves to next line\r\n'
346,'matthojo','Markdown Help Shows Wrong Keyboard Shortcuts\nMarkdown help modal is listing all headings as `alt + #` - the correct shortcut is `ctrl + alt + #`'
345,'sebgie',"Remove all non-functional settings fields\nRemove all fields from /settings/ that are just there are dummy/placeholder things. Should give us a clearer idea of what actually needs to go there, and remove some confusion about why there's stuff in there that does nothing."
344,'matthojo',"Notification Animation\nNotifications are jerky like a rusty hooker. Let's make them a bit sexier.\r\n\r\nDesired effects:\r\n\r\n- [ ] 0.25s animation to make space for notification to appear\r\n- [ ] Notification fades in \r\n- [x] Notification fades out when dismissed\r\n- [ ] 0.25s animation to remove space after notification is dismissed"
343,'matthojo','User Profile Interactions\n- [ ] `http://localhost:2368/ghost/settings/user?` should have no `?`\r\n- [ ] **Bio** field should countdown as you type, currently "97"\r\n- [ ] **Bio** countdown should turn `$red` when < 20\r\n- [ ] Cover image should have a 110px high transparent gradient overlay, eg. http://cl.ly/Qh21 - from 0.6 black to 0.0\r\n- [ ] Change cover button should have square corners, not round\r\n- [ ] No need for a "forgot password" link - the user is already logged in.\r\n- [ ] Change password button should be red (button-warning)\r\n- [ ] Change password button should be aligned with form fields, not labels\r\n- [ ] Hover state on profile pic should read `Edit Picture`\r\n\r\nQuestions:\r\n\r\n* What is `a.highlight` (used in email desc) and why does it exist?'
342,'javorszky','Passive Notifications should dismiss between tabs on settings page\nA passive notification should disappear when a new page is loaded, at the moment, notifications do not dismiss between various settings pages (as it is not technically a pageload?)\r\n\r\nSteps to reproduce:\r\n\r\n* Go to user profile settings\r\n* Update password to somthing with 1 character or whatever\r\n* An error notification appears\r\n* Click on general or content settings in the left menu\r\n\r\nExpected behaviour:\r\n\r\n* Notification goes away\r\n\r\nActual behaviour:\r\n\r\n* Notification persists'
340,'javorszky',"Users: Current user\nWe now have enough user stuff in place to make Ghost aware of the user who is logged in & provide logged-in-user specific functionality.\r\n\r\n- [ ] Update the auth method to set req.session.user to be the current user id.\r\n- [ ] Update the change password method to only change the password of req.session.user\r\n- [ ] Update the user settings panel / client side user model to use the current logged in user rather than defaulting to 1\r\n- [ ] Swap the icon in the top-right user dropdown to be the user's profile picture\r\n- [ ] If the user has filled out their name, put it in the top right user dropdown before the Ghost version"
329,'matthojo','Dashboard widget dragging is broken\nDraggin widgets on the dashboard is broken on master.  I think this is due to the hammer stuff.'
320,'matthojo','Semantic Markup fixes for Settings page\nThe settings page uses a `<label>` to wrap each editable item inside a fieldset.\r\n\r\nThis causes issues with performing an image upload as the `<label>` element has behaviour which is different across the browsers & overriding it breaks the upload entirely.\r\n\r\nThe structure of the markup should be changed so that label only surrounds the label text and not the inputs \r\n'
315,'ErisDS','Data Model: Post tags\nCreate the new tables for post tags\r\n\r\nAdd new tables:\r\n- [ ] Add the Tag table (spec below)\r\n- [ ] Add the PostTag table (spec below)\r\n\r\nTag\r\n\r\n- id\r\n- uuid\r\n- name (string)\r\n- slug (string)\r\n- parent (id)\r\n- timestamps\r\n\r\nPost Tag\r\n\r\n- id\r\n- post_id\r\n- tag_id\r\n- uuid?\r\n- timestamps?\r\n\r\n'
314,'ErisDS','Data Model: New general settings fixtures\nWe are starting work on the `data-migrations` branch to provide some new fixtures, columns and tables for some of the work which is about to happen in 002.js files.\r\n\r\nIt would be good to pre-empt future work now by adding in the settings we know we need for the settings page general tab.'
312,'matthojo','Modal design/behaviour tweaks\nI know there was no specific design for the modals but can we change the following?\r\n\r\n- [ ] default width of the modals needs to be a bit wider. Looks really small to me? Perhaps it will look more normal for standard model dialogs, but in the current use cases (markdown help and copy HTML) I think it needs to be wider (100px or so) - so perhaps we need two sizes?\r\n- [ ] the hit area of the question mark which opens the markdown modal, and the close button on all modals is a bit too small, can we add padding to make the clickable area larger please?\r\n- [ ] if the modal is not a true modal as in the current 2 use cases (i.e. there is no ok/cancel button) then clicking anywhere outside the modal needs to close it. Again this is leading me to think we need 2 kinds of modal - an info dialog with no buttons which is bigger & can be closed by clicking outside, and an action dialog with buttons which is the current size and can only be closed via one of the buttons.\r\n- [ ] I think there will also be cases of the action dialog/modal where we will want to be able to turn the close button off. \r\n\r\nAny thoughts on this?'
308,'cgiffard',"Ghost ignores ENV\nThis is from Ghost-VIP chat\r\n\r\n[20:25:20] <pmgarman>\t not sure if this is intentional or a bug but ghost/index.js line ~119 ghost.app().configure defaults to development and ignores the NODE_ENV environment var which stops ghost from working with other environments.\r\n[20:25:39] <pmgarman>\t using process.env.NODE_ENV || 'development' like other areas of the same file works just fine though\r\n[20:25:57] <javorszky>\t hm…\r\n[20:26:05] <javorszky>\t interesting, I'll flag this up on the issues\r\n[20:26:40] <pmgarman>\t noticed it while getting ghost running in vagrant. inside the VM start it with the env as staging so it runs off a different DB/env vs if the same user also started it locally"
303,'jgable','Data Model: Database & Fixture Upgrades\nIn order to do a lot of 0.3 work (image uploads, tags, custom fields etc) we need to be able to add new columns & tables to the database and also add new data to the fixtures files.\r\n\r\nWe need to be able to provide a button in the admin which will upgrade people which have already setup their database with older fixtures / database structures\r\n\r\nFor now this needs to support adding columns, adding tables, and adding data in fixtures.\r\n\r\nLong term it will also need to handle changing things'
300,'matthojo','Notifications: Further layout fixes for notifications\n#299 adds notifications across various screens in the admin UI, but apparently they do not show up :( '
295,'ErisDS','Image Upload: Save uploaded images in markdown editor\nIn order to be able to do multiple uploads in the preview screen we need to have an ID for each upload dropzone UI in the preview screen. This must be traceable back to the correct `!image\\[\\]` entry in CodeMirror so that we can update it with the URL for the image after the upload.\r\n\r\nOnce we have this in place, we should insert the src into the markdown:\r\n\r\n```\r\n!image[]\r\n```\r\n\r\nSo it should look something like:\r\n\r\n```\r\n!image[](/content/images/2013/05/my-image.png)\r\n```\r\n\r\nThis must not break the code mirror editor.\r\n'
294,'jgable','Theme API: themes should be able to override templates used by helpers\nPoint 6 from #246\r\n\r\nThemes should be able to override the template, and our core template helper should pick that up and use it instead\r\n\r\nThe idea being that Ghost has a set of internal templates used by template-driven core helpers like nav and pagination, but that by providing a template with the same name (and probably in a specific directory) a theme can override the template.'
293,'JohnONolan','Removed CodeMirror Stylesheet file and moved over required CSS\nFixes #6.'
292,'ErisDS',"Don't start on broken node versions\nTo prevent our new users from getting all confused, we should tell them if they're using the wrong node version.\r\n\r\nDetect the current node version on startup, and if it's wrong, error and exit.\r\n\r\nI think we currently don't work with 0.11.4 as well due to sqlite3 build failures - we need to investigate updating to the latest sqlite3 package and see if it now works reliably."
291,'cgiffard',"Build: Investigate auto-generating release notes\nI think it might be possible to use this: https://npmjs.org/package/git-release-notes\r\n\r\nI'd like to try it out and see what the resulting changelog file would look like.\r\n\r\nAlso would like to do a spot of research to see if there is anything else out there.\r\n\r\nIdeally I don't want to have to manage release notes by hand. I'd rather have them go out with the build they relate to, and then clean them up / make them make more sense later if needs be.\r\n\r\nIdeally, I'd like to have this done and in master/build branch ready for the 3pm weekly next Monday (22nd)"
289,'matthojo','Notifications: passive success notifications fade out\nHaving had a play with the notifications branch, I think the passive notifications need some tweaks.\r\n\r\nOriginal requirement was that: "Passive should disappear on the next pageload or user action". I think saving again should count as a user action which makes them disappear - else everytime you save you get yet another success notification.\r\n\r\nFurthermore, in the case of success notifications, where the message isn\'t required for further action (an error message might be needed to help fix a problem etc), I think the message should only last a few seconds before fading out.\r\n\r\nCan we also please delete the commented out window.alerts?'
288,'javorszky','Users: Reset forgotten password\nThis requires #276 and #53 and #287\r\n\r\nAlso requires a design for the 2 forms form - but the sign up form can be used as a basis for now\r\n\r\nThere should be a route in Ghost which takes the user to a form where they can enter their email address.\r\n\r\nThis should then send the user an email with a URL which contains a token and goes to a page with another form where they can reset their password.\r\n\r\nThey should have to enter their new password twice\r\n\r\nThey should only be able to enter their password and reset it if the token in the URL is valid.\r\n\r\nThe token should only be valid for a small period of time - like an hour.\r\n\r\nAny considerations for security which can be made, should be.\r\n\r\n'
287,'javorszky',"Users: Email sending majesty\nRequires #53 \r\n\r\nNow that we can detect email settings we need some utilities for sending emails. \r\nThis will probably involves some research into the different email related node modules out there.\r\n\r\nWe need to be able to:\r\n- provide nice email templates (keeping in mind the need for translations)\r\n- tell the system to send an email (keeping in mind the idea that this might hook into some sort of scheduling system later)\r\n- probably do something to ensure the same email doesn't get sent twice...\r\n"
286,'ErisDS','Replace User Menu label with current Ghost version #\nFor handy debugging / tracking / all the things - let\'s replace the "User Menu" label in the top right corner of the screen with "Ghost v0.2.0-2" so everyone always knows what version they\'re currently running. \r\n\r\n* where [v0.2.0-2] = the current build version'
284,'matthojo','Front End for Plugin Management\nDesign for plugin management screen. Hopefully most of this is reasonably self explanatory.\r\n\r\nNotes: This should be 3 `<table>`s - have also put a copy of sketch file in the usual place.\r\n\r\n![plugins 2x](https://f.cloud.github.com/assets/120485/798972/80d34b3c-ed6b-11e2-9981-bdb8270e06b8.png)\r\n'
282,'javorszky','Users: Change password\nRequires #276 \r\n\r\nMake it possible for a user to change their password on the user profile screen\r\n\r\nThis needs some considerations / ideas for security of the passwords.'
281,'cobbspur','Users: Image Upload: profile pic and cover photo\nRequires #280 \r\n\r\nImplement image upload on the user profile screen.\r\n\r\nMore details on how this should work/look coming soon.'
280,'cobbspur','Image Upload: Reusable tool for uploads\nThis is a precursor to #40 to make it a more manageable chunk of work.\r\n\r\nWe need to create our own wrapper for BlueImp that makes it possible to add image upload functionality in multiple places like the editor, settings general and the user profile page, whilst minimising the duplication of Ghost-specific code.\r\n\r\nThis wrapper should work as follows:\r\n\r\n- [x] If there is an existing image the plugin should overlay an edit icon in the top right corner. Clicking the icon should hide the image and show the image upload form from the editor preview pane http://cl.ly/NxpQ\r\n- [x] If there is no image, the image upload form should be present\r\n- [x] The wrapper should automatically configure our upload location, including handling /year/month folders and limiting uploads to any file with a .gif, .jpg or .png extension.\r\n- [x] By default the wrapper should append a progress element and update it as designed for the editor. There should be an option to turn this off.\r\n- [x] The wrapper should also trigger focused, start, progress, success and failure events for other things to listen to as these will likely be handled differently in different places.\r\n\r\n\r\n**Implemention notes: **\r\n\r\nThe wrapper should be a jQuery plugin living in `client/assets/lib` that operates on an element which contains at least a single file input and binds this to the BlueImp uploader. The element may also contain an image and an element to use as a dropzone if configured. In the case that the element contains only a file input, the plugin should manage the addition of elements to display the image and dropzone as necessary. The plugin should look for elements with a specific class name to use as the image and the dropzone, it should be possible to configure the plugin to look for alternative elements.\r\n\r\nIt is understood that the plugin will not work correctly if placed inside a label element, and therefore the markup on the settings page needs to change. (Unless the browsers will honour preventDefault() set on any parent `<label>` element set from inside the plugin.\r\n\r\nRecommended that this be implemented on the settings general screen as an example.'
278,'javorszky',"Users: Backbonify login and signup screens\nMove the login and signup screens into backbone.\r\n\r\nThis will need a custom model and potentially a custom sync method.\r\n\r\nI'd like to see some ideas for what we can do to make this more secure than sending plain text passwords for self-installs. \r\n\r\nThis should also move custom code for login /register screens from admin-ui-temp\r\n\r\n\r\n\r\n"
276,'ErisDS','Users: Editable user profiles with backbone\nRequires #148 - markup for this should then be in ghost/core/test/html\r\n\r\nImplement the user profile screen in backbone, on the settings page under a menu option called "User". As we are only having one user for the time being, there is no need to have the multi-user management screen.\r\n\r\nThis will require the user model to be implemented in backbone\r\n\r\nEnsure that moving between different items in the settings menu doesn\'t break, and that the back button works (i.e. assuming #272 has been done, keep it fixed).\r\n\r\nMake it possible to add / change the user\'s name, email, location, website and bio.\r\n\r\nThis issue does not include making it possible to change profile picture or cover photo.\r\nThis issue does not include making it possible to change or reset a forgotten password.\r\n'
275,'matthojo','Get scrollspy working on docs\nDocs - under `/gh-pages/` is using Bootstrap 3.0. See /installation/ page for an example of the default page template. This page template should have scrollspy active/working to move the little chicklet up/down the menu as the page is scrolled. Just like [bootstrap docs](http://twitter.github.io/bootstrap/javascript.html) do.\r\n\r\n'
274,'cobbspur','improves unit testing for pagination\nimproves unit testing for pagination and fixes pagination partial template (removed extra nav)\r\n\r\nremoves console logs for error handling in testing and travis environments'
273,'matthojo',"iCheck doesn't work in Safari\nCheck boxes do not become checked in Safari\r\n\r\nSee: http://vip.tryghost.org/feedback/topic/tick-boxes-in-settings-not-ticking-in-safari/#post-204"
271,'ErisDS','[EPIC] Advanced post features\nThis is an epic issue for all the advanced post feature issues in Milestone 0.3. It is assigned to me because it\'s purely here for keeping track of the individual issues. I will probably keep adding to it and I doubt it will be closed until 0.3 is complete.\r\n\r\n## Data Model Preparations\r\n- [x] Data Model: Database & Fixture Upgrades #303 [TP]\r\n- [x] Data Model: New settings fixtures #314\r\n- [x] Data model: Custom post data #171 \r\n- [x] Data Model: Post tags #315\r\n\r\n## General post improvements\r\n- [ ] Paginated queries are too slow #110 \r\n- [ ] Models: Loading defaults for models #116 \r\n\r\n\r\n## Image Upload\r\n- [ ] Reusable tool for uploads #280 \r\n- [ ] generate IDs in showdown to match with CodeMirror #295\r\n- [ ] "Haunted" markdown #39 \r\n- [ ] Upload in editor panel #40\r\n- [ ] Save in post - haunted markdown #41 \r\n- [ ] Markdown breaks with special characters in alt text #146 [bug]\r\n\r\n## Post Tags\r\n- [x] Data Model: Post tags #315\r\n\r\n## Custom fields\r\n- [x] Data model: Custom post data #171'
270,'ErisDS','[EPIC] Themes & Plugins\nThis is an epic issue for all the themes & plugins issues in Milestone 0.3. It is assigned to me because it\'s purely here for keeping track of the individual issues. I will probably keep adding to it and I doubt it will be closed until 0.3 is complete.\r\n\r\n## Themes\r\n- [ ] Helpers, naming and API friendliness #246 [mini-epic]\r\n- [x] Content helper (part 2) #256 \r\n- [x] Themes should be able to override templates used by helpers #294\r\n- [ ] Move "activeTheme" from config to a setting #107\r\n- [ ] Users: Post Author #358\r\n\r\n## Plugins\r\n- [x] Plugin API: Proper loading / activating of plugins #227\r\n'
269,'ErisDS',"[EPIC] Users\nThis is an epic issue for all the user issues in Milestone 0.3. It is assigned to me because it's purely here for keeping track of the individual issues. I will probably keep adding to it and I doubt it will be closed until 0.3 is complete.\r\n\r\nThis epic for users is for: setting up proper management of a user via the settings screen, implementing the ACL library throughout the system, ensuring that the user feels like the user throughout the admin (getting rid of Joe Bloggs), introducing post authors to the themes via a helper and any updated and improvements to the user model that are required throughout development of v0.4\r\n\r\n* Original multi-user management screen design: http://cl.ly/QFwm\r\n* Individual user profile management screen design: http://cl.ly/PdIA\r\n\r\n\r\n- [x] Markup/Style User Profile Page #148\r\n- [x] Editable user profiles with backbone #276  \r\n- [x] Backbonify login and signup screens #278\r\n- [x] Change password #282 \r\n- [x] Exploring email sending #53 \r\n- [x] Email sending majesty #287 \r\n- [x] Reset forgotten password #288\r\n- [ ] Image Upload: profile pic and cover photo #281\r\n- [x] Current user #340\r\n- [ ] Roll out the ACL/Permissions system #357\r\n- [x] Theme API: Post Author #358\r\n- [ ] User Profile Interactions #343 "
268,'ErisDS',"[EPIC] Interactions & Styles\nThis is an epic issue for all the interactions issues in Milestone 0.3. It is assigned to me because it's purely here for keeping track of the individual issues. I will probably keep adding to it and I doubt it will be closed until 0.3 is complete.\r\n\r\n- [x] Semantic Markup fixes for Settings page #320  [bug]\r\n- [x] Notifications: fix layout across all screens #244 \r\n- [x] Notifications: passive success notifications fade out #289\r\n- [x] Further layout fixes for notifications #300\r\n- [x] Markup/Style User Profile Page #148\r\n- [x] Markup/Style Plugin Management Page #284 \r\n- [x] Keyboard Shortcuts #9 [TP]\r\n- [x] Back button breaks settings screen #272 [bug]\r\n- [x] On login pageload, first field should be selected #217 \r\n- [x] Remove CodeMirror Stylesheet #6 \r\n- [x] Mobile Interaction JS Library #14 \r\n- [x] Modals #129 \r\n- [x] Modal with help content for markdown in Editor #247 \r\n- [x] Modal design/behaviour tweaks #312\r\n- [x] Dynamic / Mobile Friendly UI (Manage Posts) #149 \r\n- [x] Save/publish menu - update / clean up #194\r\n- [x] Pagination for content screen in admin UI #258 \r\n- [x] The Content Icon is too big #45 [bug]\r\n- [x] Passive Notifications should dismiss between tabs on settings page #342 \r\n- [x] User Profile Interactions #343 \r\n- [x] Notification Animation #344  \r\n- [x] Heading keyboard shortcut issues #347 \r\n- [x] Word count grammar - 0 words / 1 word / % words #349 \r\n- [x] Regression: Scroll shadows have disappeared #350\r\n- [x] Regression: Popup/Dropdown button menus should animate + indicate currently active state #352\r\n\r\n\r\nCasper\r\n\r\n- [x] Fixup un-scoped IDs [Casper#15](https://github.com/TryGhost/Casper/issues/15)"
258,'gotdibbs','Infinite Scroll Pagination for content screen \nAt the moment when you reach a certain number of posts you can no longer see the old posts so either further scrolling/changes to post collection or pagination is required'
256,'cgiffard','Theme API - content helper (part 2)\nPoint 9 from #246, partially done in #254 \r\n\r\nWe should introduce a {{content}} helper, which will override the content property (the html) and allow us to give the user options like length, or num words, or some such.\r\n\r\nWe have the first part of this which is returning a safe string so that the html can be safely output, now we want to add some options:\r\n\r\n- truncate/length - number of characters to display\r\n- num words - same but limit by words not chars\r\n- more text - what to output at the end of the truncated content (default would be ellipsis)\r\n- more link - where the more text should link to (default would be post permalink)\r\n\r\n(names of options TBC)\r\n\r\nTruncating HTML strings by chars or words is non trivial, googling turns up a few algorithms, mostly for truncating by chars: http://jsperf.com/html-text-truncate. We need to either find a util for this, or write one. Either way it would be nice if it was an independent node module.'
254,'ErisDS',"Theme API - content helper\nPoint 9 from #246\r\n\r\nWe should introduce a {{content}} helper, which will override the content property (the html) and allow us to give the user options like length, or num words, or some such.\r\n\r\nThe important aspect of this is returning a handlebars safestring so we don't require 3 taches\r\n\r\nOffering a length / numwords option would be useful"
253,'ErisDS','Theme API: Rename content fields\nPoint 8 from #246:\r\n\r\n`{{content_html}}` is horrible... `content` should be come `content_raw` and `content_html` should become `content` - **big breaking change alert!**'
246,'ErisDS',"Theme API: Helpers, naming and API friendliness\nAs it stands there are a few inconsistencies and oddities with the set of core helpers that we have on offer:\r\n\r\n- [x] 1. Some helpers require double taches `{{` and some require triple `{{{` - triple taches are used to indicate that the content should not be escaped, but for helpers which always render HTML, the non-escaping should be managed with handlebars.SafeString()\r\n- [x] 2. The nav and pagination helpers require that an object be passed to them, it is always the same object with the same name. As handlebars gets given the context, it should always have reference to the object and not require it to be passed. However, the current implementation obscures the context and prevents this.\r\n- [ ] 3. There should be a common way to override these defaults (i.e. a way to turn off using SafeString and to pass in a different object for the helper to use)\r\n- [x] 4. Handlebars has support for async helpers, but we don't use it.\r\n- [x] 5. We've got the concept of helpers which compile and use a template, which is awesome, but the code is being duplicated - I'd like to make this available as a core feature where we can simply register a name, a function and a template name and everything else is done\r\n- [x] 6. Themes should be able to override the template, and our core template helper should pick that up and use it instead in #294\r\n- [x] 7. It might be nice to make template helpers also be block helpers - or is having 2 ways to override a little nuts? Pagination example for this is below.\r\n- [x] 8. {{content_html}} is horrible... `content` should be come `content_raw` and `content_html` should become `content`  - **big breaking change alert!**  - to be done in 0.2: #253\r\n- [x] 9. We should introduce a {{content}} helper, which will override the content property (the html) and allow us to give the user options like length, or num words, or some such. #254\r\n- [x] 10. Would be good to start keeping a list of, and raising issues for, other helpers we need such as post link, author, tags, etc\r\n- [x] 11. Helpers need more test coverage - they're one thing we're exposing to users, so it would be good to ensure we can't break them or change their functionality without knowing about it.\r\n- [x] 12. `single.hbs` - should be `post.hbs` (Ghost + Casper)\r\n\r\n\r\nExample for 7. is on it's way\r\n\r\nThis is a big-arse issue I'm using for keeping track of Theme API related stuff, expect to see sub issues in the near future.\r\n\r\n"
244,'matthojo','Notifications: fix layout across all screens\n#37 breaks layout\r\n\r\nLayout changes needed, which is probably a bit of scss magick.'
228,'javorszky','Slugs should never have multiple hyphens\nIn the slugging function, spaces are converted to hyphens. This is done lazily when it needs to be done greedily and after the restricted chars are stripped..\r\n\r\nIn other words, multiple spaces in a row should only ever result in a single hyphen.'
227,'jgable','Plugin API: Proper loading / activating of plugins\nShort term we load the plugins as dictated by the config.js\r\n\r\nLong term we want to have a UI with which users can activate, deactivate and reactivate plugins. The details of which plugins are active should be persistent, probably in the DB but possibly in a settings file.\r\n\r\nPlugins should have a defined structure/API which allows for activation / deactivation, as well as load/requiring and initialising them either when Ghost starts or after they have been activated.'
225,'JohnONolan',"Make docs invisible until generated by grunt-groc\nIn #213 we converted docs to be an empty directory until generated by grunt-groc. This is cool, but the empty directory is unnecessary. \r\n\r\n- [x] Let's kill the `/docs/` directory entirely, and have grunt-groc generate it when run.\r\n- [x] Move the docs-specific CSS to a partial which can be included in Ghost core. It should be add minimal overhead.\r\n- [ ] Include Ghost's core CSS file in generated docs"
224,'ErisDS','Port Number\nI\'d like to get Ghost on a less generic port number to make sure we have something stable in place now that we don\'t have to change again later (already run into one conflict of the aTech Media team defaulting to using 3333 for their stuff too) - and potentially one that has a vague meaning.\r\n\r\n4467 spells the first 4 letters of "ghost" on a telephone keypad. Any other ideas?\r\n'
220,'ErisDS',"Rename DB - safely?\nOur db file really shouldn't be called testdb.db\r\n\r\nIt should be called maybe development.db, or ghost-data-dev.db, or something like donotdelete.db\r\n\r\nIt would be nice if we could do this in a safe way - i.e. if there is a testdb.db rename it, but that is probably not necessary if we can get this change in before 0.2 and make sure everyone renames their db's accordingly.\r\n"
219,'javorszky','Plugin API: Admin UI Filters / Hooks\n- admin menu should not have a filter\r\n- filters should be in other places, but this will be in 0.3\r\n\r\n(could have sworn I opened this already :/)\r\n\r\nNote: remove all console.logs as well'
217,'matthojo','On login pageload, first field should be selected\nIt would be awesome if, when the login page loaded, the cursor was automatically in the first field so I can just start typing right away.'
211,'ErisDS','Grunt build tasks - quick amends\nThere are a couple of changes that need to be made to the build tasks\r\n\r\n1) We need a weekly task as well as a nightly one\r\n2) The version bump feature should increase the build no. not minor version number, so 0.2.0-1 not 0.2.1, don\'t think grunt-bump has this option, but grunt-bumpx seems to\r\n\r\nHmm... thinking about it, we need to decide what we\'re going to provide in the releases. At the moment we don\'t update master weekly let alone nightly, so what\'s the point of offering them. Or are we meant to be delivering nightlies from the version branch? Or from a "next" branch, which we maintain by pulling the next version every so often?\r\n\r\nIdeas?\r\n'
209,'matthojo','Remove unused settings menu items\nKill unused settings menu-items in the settings menu.'
208,'matthojo','Remove references to "John O\'Nolan" & any rudeness\nThe top right "user menu"  in admin can just read "User Menu"\r\n\r\nEverywhere else Joe Bloggs can make an appearance.\r\n\r\nSearch the code base, esp comments for rudeness and remove plz'
202,'ErisDS',"URL contains reserved characters\nOne of the URLs on my own Ghost instance is this:\r\n\r\nhttp://beta.javorszky.co.uk/on-facebook,-losing-it,-and-having-github-privileges-removed\r\n\r\nAs per http://tools.ietf.org/html/rfc3986 (section 2.2), a comma is a reserved character in a URI, and as such, should be sanitized / removed.\r\n\r\nI doesn't break the lookup of the post though.\r\n"
201,'cobbspur',"Font rendering exploration\nWe've been using Lato (GoogleFont) from day-1 but we've had some rendering issues on Windows that we haven't found a solution for so far. Let's get a test (+ screenshots) to see if Open Sans (which is almost identical) is any better.\r\n\r\nOpen Sans also seems to have a much smaller footprint in terms of filesize.\r\n\r\n`<link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300,700' rel='stylesheet' type='text/css'>`"
199,'jgable','Build automation\nWe need a way to automate our builds. Something like a jenkins server, perhaps using Cloudbees (see https://github.com/TryGhost/Ghost/issues/102#issuecomment-19496153).\r\n\r\nWe need to be able to start and stop the nightly and weekly builds independently of one another.'
198,'JohnONolan','A home for builds \nWe need a home for our weekly / nightly builds. This home should be somewhere that the VIP KS backers can get into with their email address (and perhaps a password?).\r\n\r\nThe weekly and nightly build scripts should be updated to deposit the builds safely in this new location\r\n'
197,'cobbspur','Pagination wiring\nIn order to get https://github.com/TryGhost/Casper/issues/13 truly working with the helper from #196, we will need to finish wiring up the data and routes for pagination.\r\n\r\nThe homepage route should not disregard the pagination information given to it by the API, but should rather pass it to the theme, so that the theme can give this information to the helper\r\n\r\nIt is also necessary to add additional routes for /page/#number# so that it is possible to navigate to various pages of posts, and to wire those routes up to make the correct request from the post api'
196,'cobbspur','Theme API - Pagination helper\nWhen we fetch a list of posts, we are now able to do this with full pagination support. However the pagination information isn\'t used at the moment.\r\n\r\nWe need to introduce a new core helper to take pagination information and output a basic version of pagination navigation. For now the markup and functionality of this should match john.onolan.org:\r\n\r\n- [x] On the first page an "older posts" button points to the next page\r\n- [x] On subsequent pages, there is both "older posts" and "newer posts" buttons and  "page x of y" info\r\n- [x] On the final page there is only a "newer posts" button\r\n\r\nThis story will also require #197 and https://github.com/TryGhost/Casper/issues/13 in order to be fully working'
195,'cobbspur','Manage posts date / status\nCurrently, on the manage posts page, all posts are listed as "5 minutes ago".\r\n\r\nThis should be updated to use real data, and should follow the design here: http://cl.ly/NyOy\r\n\r\nIf the post is published, use the published date in the format x days/hours/minutes ago (moment will do this for you). Else, use the post status (currently draft is the only other status in the system).\r\n\r\nThis list should be ordered by updated date, with the most recently updated item at the top\r\n\r\nAlso, at the top of the preview window, it should say Published by if the post is published, and written by if it is not.'
188,'cobbspur','Admin audit\nCreate a wiki page documenting the state of the Ghost admin screens (dashboard, content, new post including editor, settings, and shared ui components).\r\n\r\nPay particular attention to identifying:\r\n\r\n - static content which should be dynamic (e.g. in the shared ui components top right it always says "John O\'Nolan")\r\n - buttons and links which don\'t work\r\n - bits of functionality which don\'t work or are incomplete\r\n - anything else that doesn\'t do what you would expect\r\n\r\nFurthermore, we need to build a list of recommendations for what can be left as-is for now because it is clear that it is a not-yet-built future feature, what bits need to be removed or hidden because they are confusing, and which things might be quick-wins that we can get done quickly to improve the admins first impression to users.\r\n\r\n- [x] Adding a link to the G in Nav Bar [done]\r\n- [x] Replace User menu pic and name #208\r\n- [x] Make Menu icons spin  - go for it [Note: should simply require a class of drop-menu-down I believe - note, the arrow should spin and point in the direction of the open menu, there are different classes for this - but it appears they\'re fucked everywhere and have been broken, this is a regression and probably needs its own issue.]\r\n- [x] Close Menus when you click anywhere other than menu [Note: this seems to work on everything except the user-menu, why?]\r\n- [x] All post menu in wrong position on first open, doesn\'t close when you click elsewhere, and doesn\'t do anything yet \r\n- [x] Load a wiki page with shortcuts or a pop-up [Note: This should be addressed in #129 and #247]\r\n- [x] Fix image in ghost widget\r\n- [x] Fix posts draft/published/edited 5 minthues ago text #195\r\n- [x] ~~Change User menu highlight to Blue - simple just depends on the personal choice of whether or not this is required~~ [Should be black for user menu, blue elsewhere.]\r\n- [x] Change static content of \'Published By\' on content preview panel #195 [Note: Capitalisation is intentional and should not be changed.]\r\n- [x] Remove the \'something\' option from settings menu in content preview pane [Note: Can remove everything except "Delete" for now]\r\n- [x] Fix tab-indexing on New Post page #153 - done pending merge\r\n- [x] Hide pencil and settings icon on editor - bottom nav bar [I have no idea what this is referring to?]'
187,'cobbspur','Theme API: Foreach column parameter for grid layouts\nAs of #164 we have our own helper for listing posts and other content to build layouts in themes.\r\n\r\nIn order to support magazine style or grid layouts we want to add a group by or number of columns parameter to foreach\r\n\r\n``{{#foreach posts columns=3}}``\r\n\r\nWhich will then give us additional properties to check whether an item is at the beginning or end of a particular row. The purpose of this is so that classes can be added to these items to handle margin and other aspects of layout when creating grids.\r\n\r\n``<li class="{{#if @rowStart}}first{{/if}}{{#if @rowEnd}}last{{/if}}">{{title}}</li>``'
186,'ErisDS',"Plugin API: Load plugins marked as active in config\nAs it stands, it is possible to activate a theme other than Casper by changing a config file, this is not ideal, but still possible.\r\n\r\nHowever, there is no way at all to load in a plugin without hacking core files. We do have one plugin hard coded as an example, but this is still not what we'd like to ship.\r\n\r\nAlthough eventually we'll have a nice UI for managing themes and plugins, for now we want to have a method of loading plugins which is as quick and dirty as changing a config file, just like for themes.\r\n\r\n- [ ] Add an active plugins object to config\r\n- [ ] Remove the hardcoded plugin code\r\n- [ ] Require and initialise the required plugins\r\n\r\nRequiring and intitialising plugins should probably be done in init"
175,'jgable',"Data import / export UI\nWe need a button to export data and send a file, and a file upload to import data, using the tools provided by #115\r\n\r\nThese are temporary internal tools and can live on the hidden debug page\r\n\r\nWhilst there, it'd be good to remove the now broken db population buttons. They're not really required any more, and if they were, we'd need to completely reimplement them."
174,'ErisDS','Settings save gets called multiple times\nAfter clicking around in the admin and settings screen a few times, you find that settings save gets called multiple times - there are multiple requests, and multiple "saved" confirmation alerts.\r\n\r\nIt seems that for some reason, whenever you change between the general and content tab, the click event for save gets bound again. The two buttons have the same classes but live in different contexts so I don\'t think this should happen - I thought backbone bound events in context to the $el of the view?\r\n\r\n\r\n'
172,'sebgie',"Data model & API: Settings types - handing blog settings only \nIt would be nice if we could group settings by type. The data model contains this concept, but how to implement and use it neatly needs some thought.\r\n\r\nIdeally, the grouping allows us to do things like, pull out one group, such as the blog settings, to hand to the frontend views. \r\n\r\nGiven that the settings is currently a big key-value object, I'm not sure what the best way to do this would be without introducing too much complexity. \r\n\r\nIt might be that this is not the right approach at all, and that we should instead just record the keys which are the settings needed for the frontend and use _.pick to fetch those keys.\r\n\r\nEither way, the aim is to be able to separate out the settings that we send to the frontend templates, and potentially separate out other groups of settings in other use cases."
171,'ErisDS',"Data model: Custom post data\nThis was ripped out of #101 as it wasn't required for the 0.1.1 milestone\r\n\r\nAdd new tables:\r\n- [ ] Add the CustomData table (spec below)\r\n- [ ] Add the PostCustomData table (spec below)\r\n\r\nCustomData\r\n\r\n- id\r\n- uuid\r\n- name (string)\r\n- value - (text)\r\n- type (string) - defaults to 'html' \\*\r\n- owner (string) -, defaults to 'ghost', custom data added by plugins will get the plugin name here\r\n- timestamps\r\n\r\nPost Custom Data\r\n\r\n- id\r\n- post_id\r\n- custom_data_id\r\n- uuid?\r\n- timestamps?\r\n\r\n\\* We will support several types of custom data, some examples might be html, json, text, date. We would then define what the interface for adding that type would look like, and perhaps helpers for displaying on the frontend. Advanced plugin functionality would be defining their own type and an interface for adding/editing it. For now, we'll just accept HTML blobs.\r\n"
165,'ErisDS',"Settings are not updated without server restart\nSettings, or rather the horrifically named ghostGlobals (sorry) are loaded on Ghost init. Which is kinda exactly what we want because we want settings to be cached rather than loaded on every request.\r\n\r\nHowever, this caching is currently done in a rather adhoc store-some-stuff-on-the-ghost-instance (which also needs to die btw) kinda way, and therefore we don't update the settings if they change.\r\n\r\nI think it's important to get this fixed, implement settings caching more explicitly, and remove the word ghostGlobals / globals from the code cos it makes everyone a little bit sick."
157,'ErisDS','Ghost init promises need to have strict ordering & error handling\nGhost init has parallel calls for the dataProvider and settings, which means if the fixtures are being loaded, all hell breaks loose.\r\n\r\nGhost init needs to be very careful about the ordering of things, and needs to have error handling so that when all hell does break loose, we know about it rather than just timing out.'
154,'ErisDS',"App.js Naming\nIt's a pedantic naming thing - but app.js bugs the fuck out of me. It just sounds way too generic / weird. I would like to propose start.js."
153,'cobbspur','Editor tab index bug\nTabbing from Post title goes to help icon then editor pane.\r\n\r\nTabbing from post title should go straight to editor pane'
151,'javorszky','User logins break with passwords containing special characters\nSteps to reproduce:\r\n\r\n* Create new user with password containing @$\r\n* Try to login\r\n\r\nExpected behaviour: You get logged in\r\nActual behaviour: Error message saying password is incorrect'
150,'ErisDS','Make Grunt / Grunt Init Less Confusing\nIs there any chance we can make `cd core/admin/assets/sass/modules && bourbon install` part of NPM Install or Grunt? '
149,'M165437',"Dynamic / Mobile Friendly UI (Manage Posts)\nUser story: https://github.com/TryGhost/Ghost/wiki/Manage-Posts-%28Mobile%29\r\n\r\nIf you go to the posts overview screen and resize your browser to about 600px wide - media queries will kick in and give you a mobile/tablet view of the page.\r\n\r\nAt the moment this is just done with CSS, and it doesn't actually work if you subsequently click on anything. What should happen is an iOS style animation: you tap one of the posts in the list and the whole list panel slides off to the left, and the post slides in from the right.\r\n\r\nShould we use backbone for this? Or something like [Ratchet](http://maker.github.io/ratchet/)?\r\n\r\nWe need to create a basic model here that can be re-used in various places. I've included some designs below for reference.\r\n\r\n/cc @tgriesser @ricardobeat \r\n\r\n![image](https://f.cloud.github.com/assets/120485/647293/3242116e-d3fe-11e2-8b7e-639a7592013a.png)\r\n\r\n![image](https://f.cloud.github.com/assets/120485/647295/4ab51c32-d3fe-11e2-8967-679c3b83bdac.png)\r\n\r\n![image](https://f.cloud.github.com/assets/120485/647296/5ee2a5b2-d3fe-11e2-8c19-4b426615ee3b.png)\r\n"
148,'matthojo','Users: Markup/Style User Profile Page\nWe need to get markup and styles for the user profile page in place - these styles should go into users.scss alongside those done in #147.\r\n\r\nPreview below for reference / full res: http://cl.ly/PdIA\r\n\r\n![image](https://f.cloud.github.com/assets/120485/647304/d830b4a4-d3fe-11e2-877b-2e6e1d70d07a.png)'
142,'matthojo','Add functionality to dismiss notifications\nAll notification bubbles have an "x" link on the right hand side to dismiss them. Currently this link does nothing.\r\n\r\nTest: Log in to Ghost, log out again - you will get a logout confirmation notification. Try to dismiss this with the x. Nothing happens.\r\n\r\nWhat should happen: The notification bubble fades out, and is removed from the DOM.'
139,'ErisDS','Rough upgrade plan\nNeed to put together a rough plan of what upgrading Ghost is going to look like in the future.\r\n\r\nHow will database migrations work - how can we know what version a particular database is?\r\nHow can we make Ghost aware of what version it is?\r\nHow do we protect the database from being overridden?\r\nHow do we protect files in the custom content folder?\r\n\r\nFor now this is probably just a discussion that will result in some documentation & issues for implementing proper database migration etc.'
138,'javorszky',"Admin user creation\nIn order to make it safe to deploy Ghost in public, we need to ensure there is only one admin user for the time being. As we haven't yet rolled out the permission system, all users are admin users, so we need to ensure that it is only possible to register one user\r\n\r\nNote: after #134 there will no longer be a register link on the login screen\r\n* [ ] - There should be no fixture for users or roles_users\r\n* [ ] - Whilst there are no users in the system, the register/signup screen should show a form\r\n* [ ] - Signup should create a single user, and mark them as an admin user. This user should always get id 1\r\n* [ ] - Once there is a single user in the system, the signup screen should no longer work - redirect to login?\r\n* [ ] - Should probably also lock down the user creation API to one user, so it's not possible to fake an API request to create a new admin user."
136,'ErisDS','Cleaner login redirects\nLogin redirect syntax is currently `/ghost/login/?redirect=%2Fghost%2F` - let\'s make this cleaner.\r\n\r\n* "redirect" => "r"\r\n* strip %2Fghost%2F\r\n\r\nEvery single login redirect will always, always go to /ghost/ at the minimum. So I think we can clean this up.\r\n\r\nAny form submission on `/ghost/login/` without a specific redirect in the url, should have a destination of `/ghost/` - this should be the default behaviour, and not require an explicit redirect string.\r\n\r\nA request going to `/ghost/settings` or `/ghost/settings/` should look like `/ghost/login/?r=settings`\r\n'
134,'matthojo','Login screen display bugs\n* There should be no register link on the login screen (for now).\r\n* The login button should fit in the space to the right of the form inputs - one of the widths or margins is likely off by a pixel or two.\r\n\r\n![screen shot 2013-06-11 at 12 55 14](https://f.cloud.github.com/assets/120485/636686/c385666c-d28c-11e2-92e6-3daddf428eb8.png)\r\n\r\n* The whole login form should be centered vertically in the viewport (probably with JS)\r\n    * This depends on #133 being fixed first.\r\n\r\n![screen shot 2013-06-11 at 12 55 01](https://f.cloud.github.com/assets/120485/636690/fbb518c0-d28c-11e2-91db-dc6d3c07758b.png)'
133,'JohnONolan','Login screen markup pulls notifications into wrong place.\n![screen shot 2013-06-11 at 12 55 14](https://f.cloud.github.com/assets/120485/636683/9d8b45b2-d28c-11e2-820f-9245ef9a4521.png)\r\n'
132,'javorszky','/register/ => /signup/\nSemantics. Cleaner naming convention.'
130,'jgable',"Nightly build task\nAdd a `grunt nightly` build task that copies needed files to a build\r\nfolder, then zips them up for distribution. We can also add a tag and\r\npush it to github but I've only tested it with throwaway branches.\r\n\r\nI made some guesses about the build folder and dist folder.  If you\r\nhave a better way feel free to give some recommendations.  Apologies for the Wonky Gruntfile diff, it really isn't as much changes as it looks but the indentation did change.\r\n\r\nRelated to #102."
129,'matthojo',"Modals\nGhost needs a solid + reusable modal system. Eg. http://twitter.github.io/bootstrap/javascript.html#modals\r\n\r\nShould we fork Bootstrap's JS as a starting point for our own front end framework / components?\r\n\r\ncc @ErisDS @matthojo "
124,'ErisDS',"Cleanup & separate res.locals\nres.locals needs to be cleaned up and separated into backend/admin and frontend/theme variables. \r\n\r\nAdmin should and does have access to properties that shouldn't be made available to every frontend template, and vice versa. Most importantly, I don't think that the frontend should get flashes from the admin?"
117,'tgriesser','Set published at & published by\nPublished at and published by need to be set when the post status changes from draft to published. At the moment we are not able to tell if the status is changing now in the saving function.\r\n\r\nI know this is a bookshelf issue (can/should the models have "changing" like in Backbone?) but hopefully you won\'t mind doing this when it\'s done.'
116,'tgriesser','Models: Loading defaults for models\nSome models will need to pull defaults from the settings - for example the post model should load the language and set this as the default language for all posts\r\n\r\nThis issue will probably require some refactoring and tinkering with the core of Ghost.\r\n\r\nWe need to be able to load defaults from both config and settings, and use those when creating models'
115,'jgable','Data backup (JSON export / import)\nHaving a way to export out data to a simple json file is pretty critical if we are going to start running Ghost as a blog so that we can backup before upgrades just in case stuff goes wrong. \r\n\r\nWe will also need a way to re-import the data which we will have to keep up-to-date as any data model changes are made.\r\n\r\nEssentially the requirement will be any JSON backup, from any version of Ghost, must be re-importable to the latest version of Ghost.\r\n\r\nThis also will form the basis of export/import tools for WP/tumblr'
112,'javorszky','Switch to using settings for the "global" config\nIn config.js there is a group of settings called "blogData" which make up some of the basic settings required to render a blog on the frontend.\r\n\r\nThese settings should be pulled from the settings table\r\nconfig.blogData should be removed\r\n\r\n'
107,'sebgie','Move "activeTheme" from config to a setting\nThere isn\'t a UI yet - that comes in #488 \r\n\r\nThis issue is just to change where this info is loaded from, from config to settings. \r\n\r\nThis will then require a bit of jiggery-pokery with the order of loading stuff in ghost.init. I think it will need to go dataprovider > settings (& permissions?) > paths & plugins, and also some jiggery pokery with the config in index so that initTheme (which requires the activeTheme setting, and therefore must now happen after ghost.init) happens in the right place.\r\n'
106,'javorszky','Theme / Plugin API - reading the directories\nGhost needs to be able to read from the theme and plugin directories\r\n\r\n- should be able to get a list of available themes\r\n- should be able to get a list of available plugins\r\n\r\nFor now, there is no definitive UI design, but there is an "appearance" and a "plugins" screen in the settings part of the admin. Should be able to dump the data there (no need for it to be pretty raw json is ok). Then once that part is converted to backbone (currently in progress) and we have some UI design we can build on this :)'
104,'ricardobeat','Convert the settings page to use Backbone\nThe settings page should use Backbone in the same manner as the blog/content page.'
103,'jgable',"Deployments\nWe need to be able to run test deployments of Ghost \r\n* this should be as simple as possible (some sort of script, plugin etc)\r\n* should support version management - we may want to run master, and feature / milestone / release branches\r\n* we want to keep them private / not allow randoms to register and piss around with the admin :D\r\n\r\nIt's also worth considering that we want to switch over blog.tryghost.org to be a public instance of Ghost asap (preferably at 0.1.1, though perhaps at 0.2) and that we want to get all contributors to run their own blog (although whether that's public or private is obviously up to the contributor)."
102,'jgable','Nightly / weekly build task\n automatically each night we need to:\r\n  - generate a git tag from master for now\r\n  - run a build from that tag which:\r\n    - compiles sass to css\r\n    - compile frontend templates\r\n    - strips out various other config files such as travis.yml\r\n    - eventually does a JS build & minify for the frontend \r\n    - generate a zip files\r\n  - deposit the zip file somewhere\r\n \r\nOnce a week we also do a weekly tag and deposite the zip somewhere slightly different.'
101,'ErisDS',"Update the data model & fixtures\nThe post data model is currently very rough. Discussion on the topic has died, so I'm gonna put this issue out there and try to make some progress.\r\n\r\nPosts:\r\n- [x] Add a uuid\r\n- [x] Add published_at and published_by\r\n- [x] Add author_id, automatically set to the same as created_by\r\n- [x] Add meta_title (SEO) \r\n- [x] Add meta_description (SEO)\r\n- [x] Add meta_keywords (SEO)\r\n\r\nA decision needs to be made about what to do with image. That will go into a separate story.\r\n\r\nUsers:\r\n- [x] Add a uuid\r\n- [x] Remove username\r\n- [x] Merge first_name and last_name into full_name\r\n\r\nSettings:\r\n- [x] Add a uuid\r\n- [x] Add type / group, defaults to 'general'\r\n\r\n\r\nThis issue should encompass updating the two 001.js files so that we have a better model & fixtures to go with it.\r\n"
99,'matthojo',"Convert the dashboard to use Backbone\nThe dashboard should use Backbone in the same manner as the blog/content page.\r\n\r\nThere are some considerations here as we don't have an obvious data model driving the dashboard, but rather each widget is likely to have data. \r\n\r\n"
98,'javorszky',"Implement countable.js on the Ghost editor cause it's sexy\nLet's try this out cause it's awesome: \r\n\r\nhttp://radlikewhoa.github.io/Countable/\r\n\r\nvia http://50.112.33.48:3000/posts/beDpSwDeB5zv2cQLs"
93,'ricardobeat',"Create shared lib for common assets\nAt the moment jQuery lives in \r\n\r\n`core > client > assets > vendor > jquery > jquery.min.js`\r\n\r\nThis isn't particularly useful - because with an incredibly common library like jQuery what we really want is to have it in a shared location where it can be used by both admin, as well as themes/plugins - both front and back end. (ala wp_enqueue_script)\r\n\r\nThere are several assets which this workflow applies to - so this probably needs to be properly considered / worked into the structure of the app."
83,'tgriesser','Ability to Publish a post\n- [x] posts should be draft by default\r\n- [x] saving a post on the editor UI should save it as a draft\r\n- [x] it should be possible to publish a post - changing the status / setting dates etc\r\n- [x] the publish button on the editor UI should cause a post to be published immediately\r\n- [x] by default only published posts should be returned by the browse posts api function\r\n- [x] it should be possible to override the browse posts api function to display all posts\r\n'
82,'javorszky',"User model specs\nRight, so here's the idea:\r\n\r\n- [ ] first user ever is admin, auto-login\r\n- [ ] subsequent users be not auto-logged in, but somehow be flagged in the admin area that they've requested access, and had to be approved? (discuss)\r\n- [x] there should be check for duplicate email addresses and usernames\r\n- [x] fixtures updated with username: `john@onolan.org`, pass: `Wh0YouG0nnaCall?`\r\n- [ ] email address validation\r\n\r\n## Questions\r\n* When should we send an email?\r\n  * password reset\r\n  * verification\r\n  * approval\r\n* setting to allow signup for anyone with a specific role (how's that ACL coming along?)?\r\n  * would this be a white-list kind of thing\r\n  * a simple dropdown with `[no, reader, contributor, editor, user, admin]`\r\n  * a checkbox and a dropdown... ? )\r\n\r\nAnything else I missed, let me know, otherwise I'm working on stuff that I think are core at this stage, which are:\r\n"
81,'tgriesser','Shifting around the Model Structure a bit\nAfter the discussion earlier - I put together a bit of what I was thinking the model structure would look like - it eliminates the `dataProvider` layer and just defines static functions on the models themselves, which I think will make things a bit cleaner as we build out the Model layer, and make things a bit easier to picture see what goes where and how things relate.\r\n\r\nIt uses all of the stuff that @jgable put in there already, but puts them onto a base model, which the other inherit from.\r\n\r\nIt also creates a specific namespaced "ghost" instance of `Bookshelf/Knex`, in case others are using a copy of Bookshelf/Knex already in their application, which should be accessed from `data/models/base.js` whenever you need to grab `Bookshelf/Knex`.'
79,'ErisDS','Configure travis to run grunt validate\nRather than just running tests, lets run grunt validate from Travis CI\r\n\r\nCouple of references with regards to doing this:\r\nhttp://manuel.manuelles.nl/blog/2012/06/22/integrate-travis-ci-into-grunt/\r\nhttp://blog.millermedeiros.com/travis-ci/'
78,'matthojo','Initial Dashboard UI conversion\nSee #65.'
77,'tgriesser',"Getting rid of the Ghost as a constructor\nThis makes the ghost module an object literal... there's no reason that a `new Ghost` object is necessary in this case, since we're just using it as a singleton anyway...\r\n\r\nMerged this with `test-cleanup` branch since I'm assuming that'll get merged, so I was able to run the `npm test` before submitting."
73,'javorszky','Remap blog settings back to the fronted using app.locals\nThe old JSON dataProvider and ghost globals stuff has been refactored out and replaced with a proper settings API... woooo....\r\n\r\nOnly these settings never make it to the frontend anymore, which means we lose things like the meta title, and blog name.. etc\r\n\r\n'
66,'jgable',"Update Vagrant for bourbon\nThe sass mixin library has been switched from compass to bourbon, so we need the bourbon gem in vagrant.\r\n\r\nPeople can do this for themselves, but long-term it'd be nice to get Vagrant updated."
65,'matthojo',"Build Dashboard Widget UI\nI'm placing this here as a reference to the dashboard UI stuff.\r\nThis doesn't cover the actual functionality of all of them, just the UI conversion."
64,'ricardobeat','Use backbone for admin front-end\njQuery potions and hand-crafted XHR requests are piling up. Data is being printed in templates, fetched by javascript and thrown around.\r\n\r\nThe admin should be migrated to an architecture using Backbone for data management and sync/API calls, mirroring the server model hierarchy as much as possible. blogs and settings pages are a good place to start.\r\n\r\nThe goal should be to make way for the transition to an interface fully rendered in the client side. Benefits would be faster page loads/navigation, no page reloads, no rebuilding js state for each page, simpler data management/lifecycle; it also becomes portable to hybrid desktop/mobile apps using PhoneGap/Trigger/AppJs/etc with very little work.\r\n\r\nJust wanted to open this for discussion.'
60,'matthojo','Add keyboard shortcuts\nSee #9.'
58,'ErisDS','Remove the Func Wrapper from node, whilst keeping strong linting\n- [x] Node/Server side code should not have a function wrapper or use strict statement\r\n- [x] Client code should retain the function wrapper and use strict statement\r\n- [x] Both client & server should conform to the same whitespace style & code standards\r\n- [x] Both client & server should be fully linted / validated\r\n\r\n'
53,'ricardobeat',"Users: Exploring email sending\nSending emails is fairly important. (see Ghost skypechat on 23rd May, at about 9:27 am UK time). I'd like to pick your brains on it especially with regards to the following questions:\r\n\r\n* should Ghost be able to send emails from the server it's installed on? This is for the self-hosted installs mainly. (because IP blacklisting, misconfigured MX records, spam, throughput, etc)\r\n* should Ghost use some sort of outside smtp server? (google eg.)\r\n* would that be a required setup step?\r\n* have I forgotten anything important?\r\n\r\nDiscuss! :)"
49,'ricardobeat','Authentication failure on API calls should return JSON\n^^\r\n\r\nCurrently redirecting to the login page.'
48,'javorszky','Logout\nThe logout button in the user menu of the admin navbar should send a user to /logout/ which already performs a logout'
47,'jgable','Theme/Plugin API: Static menu for frontend \nGhost themes will likely need a menu. \r\nFor the time being, this should be static JSON output with two links: home and archives.\r\n\r\n- [ ] Create a function which returns the static JSON for the menu\r\n- [ ] Wrap the output function in a filter so that themes / plugins can add and remove items.\r\n- [ ] The menu data should automatically be made available to every frontend view.\r\n- [ ] Create a core handlebars helper which generates semantic HTML for the menu\r\n\r\nSee the WordPress version of Casper for an example menu:  http://john.onolan.org'
46,'ErisDS','Docs todo: Theme / plugin API description\nWe have various content about how themes / plugins will/should/may work which we should probably put on the wiki :)'
44,'JohnONolan',"Replace Compass dependency with Bourbon\nCompass is a big, hulking bitch of a SASS library. I moved TryGhost.org from [Compass](http://compass-style.org/) to [Bourbon](http://bourbon.io/) just prior to the Kickstarter campaign launching and was very impressed with it. Much more light-weight, up-to-date, better documented, and generally nicer to work with.\r\n\r\nCompass is excessive for Ghost's needs, so let's convert the main codebase to Bourbon."
43,'ErisDS','Admin views - cleanup\nThe default.hbs layout should declare blocks for styles and scripts.\r\n\r\nAll other layouts should use these blocks to add their scripts/styles to the page.\r\n\r\nThe main tag should be moved to the default layout and out of all other views.\r\n\r\nFlashes should be included directly after the main tag in the default view\r\n\r\nConvert indent to 4 spaces'
42,'ricardobeat','Delete post\nOn the content screen, selecting a post and then going into the settings menu (cog in top right) and pressing delete should delete the post.\r\n\r\nA notification should show success or failure of this action.\r\n\r\nIt is expected that this be done with a page refresh for now.'
40,'cobbspur','Image Upload: Upload in editor panel\nRequires: Issue #280: Image Upload: Reusable tool for uploads\r\n\r\nThe image upload drop zone which appears in the preview panel should allow the user to upload images.\r\n\r\nSee [the wiki](https://github.com/TryGhost/Ghost/wiki/Write-Post) for the user story.\r\n\r\n- [x] If the user drops an image on the drop zone then that image should be uploaded. \r\n- [x] An image should be any file with a .gif, .jpg or .png extension.\r\n- [x] If the user clicks anywhere in the drop zone except for the two icons, then a file dialog should be shown. Any file selected should also be uploaded as described. Note: This behaviour may have to downgrade in some browsers. \r\n- [x] Images should be uploaded to the /content/images directory. Images should be organised into year & month directories as in WordPress.\r\n- [x] While the image is uploading, the progress and any errors should be displayed as defined by issue #38. \r\n- [x] Once the image is uploaded, it should replace the entirety of the image upload drop zone. \r\n\r\n'
38,'cobbspur','Image upload interaction design\nPlease provide designs for how image upload & import interactions should look including progress & failure for each of the ways of inserting an image.'
37,'javorszky','Flashes / notifications in Backbone\nNow that we have Backbone in place across most of the admin app, we need to add in notifications. Currently, most operations do an alert.\r\n\r\nDynamic notifications should always exist at the same location in the DOM as the static ones (where the {{>flashes}} partial is included in default.hbs.\r\n\r\nThe dynamic notifications should also have/work with #142'
36,'ricardobeat','Settings API, data model & provider\nExtend the existing api & provider for settings. Settings should only have browse, read and update functions. It should not possible for the moment to add or delete a setting.\r\n\r\nUse the existing data model for now, other issues will be created for improving / adding to the model'
35,'jgable','Users API, data model & provider\nExtend the api and provider to provide a full BREAD/CRUD api for Users\r\n\r\nUse the existing data model for now, other issues will be created for improving / adding to the model\r\n\r\nThere is currently no UI for this, therefore I recommend we use this as an opportunity to start a test suite using BDD with Mocha. '
34,'tgriesser','Posts browse API call: handle pagination\nExtend the browse posts API call to provide functionality for pagination\r\n\r\n* should accept options which dictate which posts to return (i.e. offset and limit)\r\n* returned data should provide the information needed to build a pagination ui (total results, current page etc)'
33,'ErisDS','Internal / public API example\nGhost is intended to use an internal JSON API which we can also expose publicly. \r\n\r\n* Create an API object which has the usual BREAD/CRUD operations for posts\r\n* Convert all routes and functions which use direct access to the data providers for Posts to go via the API\r\n* It should be possible to use the same API object via a route / HTTP request or in any other function - therefore the api should not rely on request/responses but msutbe able to handle them'
31,'ErisDS',"handlebars helpers are bombing out\nYesterday I deleted the npm-shrinkwrap file which stabilised all of the versions of various packages, because it was out of date and I figured it wasn't really necessary.\r\n\r\nHowever, today I've realised that the handlebars helpers are dying with errors like\r\n```\r\n:\\Ghost\\Ghost\\core\\frontend\\helpers\\index.js:19\r\n            return moment(context).format(f);\r\n                                   ^\r\nTypeError: Cannot call method 'format' of null\r\n```\r\n\r\nOn the homepage.\r\n\r\nAnd a similar one on the editor page.\r\n\r\nI've tried fixing the version of express-hbs back to 0.1.3-pre and that seems to fix the issue for now, but that doesn't seem to be a good solution to me! I'm out of time for debugging this today, but hopefully someone else may have time. Perhaps @jgable may be able to figure it out as he has contributed to the express-hbs package."
29,'jgable',"Investigate / discuss the best ACL library for Ghost\nMy favourite is the node-relations package which has a natural language syntax\r\n\r\nhttps://github.com/carlos8f/node-relations\r\n\r\nBut thought I'd open this up for discussion / investigation by anyone who is interested."
28,'tgriesser','Reimplement posts model with bookshelfjs\nOn a branch, reimplement the existing (completely unfinished but will do for now) data model for posts using bookshelfjs.\n\nDuplicate the data provider to provide access and re-wire the existing controllers to use the new data provider.\n\nI realise there will be some fun here will callbacks vs promises. Ultimately promises is what we want, but I would advise just working around this as best as possible for now.\n\nThis is intended as a relatively small exploratory task to inform a final decision with regards to switching over.'
26,'ErisDS',"Admin login page\nWe need to convert the existing basic auth solution to be proper secure login, with a nice login screen. \r\n\r\nThe design & markup for the login screen is already done in core/test/html/login.html\r\n\r\nFor this task:\r\n\r\n* Setup a new route for the login page\r\n* Create a new view for the login page, using the existing HTML\r\n* Change the existing auth method to redirect to the login page, if the user is not logged in\r\n* Continue to use a hard-coded username and password, and verify these (plaintext) from submitting the login form.\r\n* Keep track of the login so we don't redirect next time"
25,'javorszky','Admin navbar routes cleanup\n* Switch the path and all references to "blog" to be "content"\r\n* Squish name and defaultString into one\r\n* Ensure routes end with slashes\r\n\r\nEventually this should be extended to include a left and right nav bar, and should probably also feature a filter hook for plugins to add to or change the menu. '
24,'JohnONolan','Write post (mobile)\nWhen viewport is "tablet" resolution or smaller, the write/preview panels are combined and can be alternated between via tabs. See http://cl.ly/Nxwo\r\nWhen viewport is "mobile" resolution or smaller, the design gets smaller again - see http://cl.ly/NyNw - functionality remains the same. The only other change is that menus (tags, post settings) now become full screen iOS style menus, something like http://jqtjs.com/ (but I saw a newer thing like this the other day that was way smoother)'
15,'matthojo','Adding Tags to a Post\n* commas are now getting included in tags\n* suggestion/typeahead menu should close when a tag is deleted\n\t* this currently works when deleting tags by pressing [backspace], but breaks when deleting tags by clicking on them\n* suggestion menu should always be limited to 5 items\n* when populating a tag by selecting suggestion and pressing [enter] - suggestion menu should close\n'
14,'matthojo',"Mobile Interaction JS Library\nPutting this out there early, before we come to implementing this - but we need a very solid Javascript (jQuery I guess?) library to handle iOS style mobile interactions.\r\n\r\nThe one that I've seen used most often is http://jqtjs.com/ (formerly known as jQTouch) - however it's definitely not the smoothest. I mentioned in another ticket that I've seen another one similar to this recently which performed a lot better, but unfortunately I can't remember what it was called (it might have been http://maker.github.com/ratchet/). Other ones discussed include:\r\n\r\n* http://jquerymobile.com/ \r\n* http://www.sencha.com/products/touch/\r\n* http://lungo.tapquo.com/ \r\n* http://eightmedia.github.com/hammer.js/\r\n* http://www.mobify.com/mobifyjs/\r\n"
13,'ErisDS','Change Fixtures to be Early Developer Info\nRemove existing fixtures and all references to John\'s blog content, add in basic "getting started with Ghost" info from vip.tryghost.org'
12,'ErisDS','Set up ghost dev blog with Ghost\nSet up official ghost blog number 1 on blog.tryghost.org.'
10,'javorszky','User login / authentication\nWe need to convert the existing basic auth solution to be proper secure login, with a nice login screen. \r\n\r\nDepends (sort of) on [#26](https://github.com/TryGhost/Ghost/issues/26) being done first. As well as some updates to the data model etc\r\n\r\nFor this task:\r\n* Upgrade the auth function to use an email address and (salted & hashed) password from the user table in SQLite.'
8,'ErisDS','Admin Redirects\nAll of the below should take the user to /ghost/ admin panel:\n\n* /ghost/\n* /ghost-admin/\n* /admin/\n* /login/\n* /dashboard/\n* /wp-admin/ ;)'
7,'matthojo','Make form elements more sexy with jQuery\nSexy with CSS - as a fallback... but more sexy with jQuery - http://damirfoy.com/iCheck/#demo'
6,'matthojo',"Remove CodeMirror Stylesheet\nThe codemirror default stylesheet is an unnecessary http call, let's slaughter the bitch and merge the necessary styles into the core css."
4,'javorszky','Word count does not update when text is deleted\nSmall bug with the wordcount on the post editor. Steps to reproduce:\n\n1. Write some words\n2. Ctrl + A\n3. Backspace\n\nExpected behaviour: word count resets to zero\n\nActual behaviour: word count does not update at all until a new word is typed\n\nIn addition: create exception for 0 words / 1 word / % words\n\nSee also: http://radlikewhoa.github.io/Countable/'
1,'ErisDS',"@Font-face in firefox fucking itself\nI've been over this for 2.5 hours, I can't find anything wrong with my implementation that's making Firefox not display my icon font :(\r\n\r\nAny chance it could be node's headers preventing (or not explicitly allowing) firefox to access the appropriate file types? (See [ref](http://stackoverflow.com/questions/15636949/fontello-glyph-font-odd-behaviour-on-firefox-shows-unicode-codes-instead-of-ico))\r\n"
4487,'felixrieseberg',"Add dynamic titles across the admin UI\nIt would be *really* nice if the admin panel had custom titles for each page, rather than the plain old 'Ghost Admin' that it's been for ages.\r\n\r\nThe desired patterns for titles would be `{{screen.title}} - {{blog.title}}`, where `blog.title` is the setting from `settings/general` and `screen.title` is the name of each screen (as short as possible):\r\n\r\n- 'Content'\r\n- 'Editor'\r\n- 'Settings'\r\n- 'Users'\r\n- 'Profile'\r\n- 'Debug'\r\n- 'Forgotten Password'\r\n- and so on\r\n\r\nSo on the Ghost dev blog when I'm on the editor I'd see 'Editor - Ghost Development Blog'.\r\n\r\nThere are a number of ways to do this, one of which (probably the official way) is to use this bower module: https://github.com/paddle8/ember-document-title\r\n\r\nGoogle also turns up a number of other methods."
4445,'cobbspur',"Return a computed `url` field with the post object\nThis is split out from the much-railroaded PR [#4398](https://github.com/TryGhost/Ghost/pull/4398#issuecomment-61773595). \r\n\r\nIt is a bit of a **magic bullet** in that it should help to resolve #4322, #3961 and #1756 as well as help us to deliver the planned [post preview link](https://trello.com/c/Xd58R4Vt/62-post-preview-links) and [navigation menu](https://trello.com/c/XzsDNA14/35-nav-menus) features.\r\n\r\n---\r\n\r\nAlthough it has massive impact, the scope of this issue is quite small. Rather than trying to generate the post's URL from the permalink setting whenever we need it (in the frontend controller, or in the admin client) we should do this inside the model layer, and return it as a computed property along with the post object.\r\n\r\nBookshelf provides us with a mechanism to do this - the `toJSON` method in the post model, which is already used to make sure we return an `author` property rather than `author_id`.\r\n\r\nThe code for generating a URL from a permalink should probably still live in `config/url.js` although the methods in url.js may need to be changed around to make the right ones available to the post model. As a result of this issue, the `urlFor` method should be updated to use the new `url` property, rather than calling `urlPathForPost`, but it is not expected that the property be used elsewhere or that any of the other issues be resolved.\r\n\r\nThis issue should require updates to our tests.\r\n\r\n**Note:** I'm slightly in two minds about whether this field ought to be called `url` or `permalink`. I'm leaning toward `url` because then it matches up with the `url` helper and we can reserve `permalink` for if we implement some other concept of a `permalink` (many platforms use a url with an ID, and having something like that could help us to implement historical redirects when permalink structures change). "
4425,'PaulAdamDavis','Update visual style for content mgmt\nNow that we have multi-user, we\'re missing some vital contextual information in the post list: the author. This issue is to update the content management list visual styles + add author profile picture. (NB: It would be useful to have #4333 done first)\r\n\r\nSexy detail: When hovering the user picture, fade out the post status, and fade in the the user\'s name. Revert again on mouseOut.\r\n\r\nMove "featured post" star to an absolute position over in the bottom right corner rather than bottom left\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/4979396/c88f8690-68f6-11e4-88b7-b65a75a2f422.png)\r\n'
4368,'ErisDS',"Drop CodeMirror from the Editor\nWith reference to the [Split Screen Editor Epic (#1294)](https://github.com/TryGhost/Ghost/issues/1294)\r\n\r\n--- \r\n\r\nThe Ghost editor undeniably needs some :heart:. No matter how you consider what the editor might look like in the future, there is one underlying problem - to ship improvements like spellcheck, we need to build a completely custom editor, that's an enormous undertaking, and it would detract from all the other features we want to ship :-1:.\r\n\r\nThat is, unless we drop formatting/syntax highlighting from the left side of the editor :boom: \r\n\r\n**yep**... I'm talking about dropping CodeMirror in favour of a plain textarea.\r\n\r\nCodeMirror currently has two main jobs: 1) it formats/syntax highlights the markdown and 2) provides an API for interacting with the entered text. However, what it does under the bonnet is generate a completely custom representation of the document which is neither markdown or HTML. This breaks the [browser spellcheck](https://github.com/TryGhost/Ghost/issues/1240), doesn't work reliably [on mobile/touch](https://github.com/TryGhost/Ghost/issues/960) (which meant we had to remove it from mobile/touch devices), and the way it interprets markdown is quite different to our HTML conversion, which causes [weird](https://github.com/TryGhost/Ghost/issues/959) [bugs](https://github.com/TryGhost/Ghost/issues/1909) and adds complexity.\r\n\r\nIf we strip out CodeMirror, we will lose formatting, but what we get instead will be an editor with working **spellcheck**, working **mobile uploads** and significantly reduced complexity: because we only have two document representations - markdown and HTML, and we are in control of them both. This means we can focus on making the conversion between them better (i.e. adding advanced markdown features).\r\n\r\nIn the future, we'll be able to bring back formatting if we want it using contenteditable, but in the meantime we can more easily focus on the features we want to bring to the editor, the markdown we want to support, and creating our own way of modelling documents - because the editor is so significantly less complicated.\r\n\r\nI've been working on a prototype testing out how to interact with selections in the textarea to make sure that image uploads will still work (on ALL devices) etc and to me this feels like taking back control, and I'm REALLY, _**ridiculously**_ excited about it."
4356,'cobbspur',"Comma for starting new tag in other languages\nI have found, that if tag have 'б' in a word, it starts new tag. I've found, that it is because russian 'б' is placed on keybord, where englisch ',' placed. Seems, that it hardcoded for english language. Can your please help to find, in which place it is?\r\n\r\nThat, I can fix it at least for my installations."
4321,'novaugust','Autosave is overly ambitious\n### Issue Summary\r\n\r\nIf I open a new post and click in the editor, I find myself with a new post with the title "(Untitled)"\r\n\r\nWhy save a post that doesn\'t have any content in it? Now I\'m cleaning out extra "(Untitled)" drafts whenever I decide I\'m not going to write a post after all.\r\n\r\n### Repro Steps\r\n\r\n1. New Post\r\n2. Sit for a few seconds\r\n3. Click in the editor\r\n4. You\'ve just saved your post!\r\n\r\n### Specs\r\n\r\nGhost 0.5.3 (Ghost Pro)\r\nChrome 38'
4319,'ErisDS',"Theme feature detection\nThe Ghost theme API moves pretty fast, pretty much every release includes some sort of change, and we need a way to make it clearer what version of Ghost a theme will work with.\r\n\r\nRather than using a version number, and depending on theme developers to provide an accurate Ghost version number which their theme works with, let's do this in a really smart way, and actually detect which features a Ghost theme is or isn't using.\r\n\r\nSome features being missing constitutes an outright error (like no `{{asset}}` helper) some might represent a warning (use of the deprecated features) and some might be a positive (like themes already supporting `{{image}}`). Therefore I think we can do something really interesting with a simple set of tools to detect use of helpers and other things, a set of rules and converting the information into a standardised output that we can generate and display for any theme.\r\n\r\nThe idea here is to do this as an independent npm module, which can be a dependency in Ghost (used to check a theme when it is activated), but also offered as a web UI where theme developers can check their theme (a bit like http://package-json-validator.com/), and then it can also be included in or used by other sites and projects.\r\n\r\nMy goal here is to make information about theme features, compatibility and quality far more transparent, so that we can give our users a far better experience when using 3rd party themes.\r\n\r\nI've been working on this just a little bit, and once I've finished laying the groundwork I'll link this to the repo and start opening issues there to improve it, so people can get stuck in improving it if they're interested.\r\n\r\nFeatures to be detected:\r\n\r\n* details coming soon\r\n"
4240,'jaswilli',"Prep & tests in prep for node v12\nNode v12 has been on the horizon for a while and looming closer, and there has been much talk of getting Ghost ready for it - so let's do it!\r\n\r\nGhost's node version support is loosely tied to that of [node-sqlite3](https://github.com/mapbox/node-sqlite3/blob/master/package.json) and they have had support for node >= 0.11.13 for some time.\r\n\r\nI suggest that we add tests for the most recent version of v11 (0.11.14), test out some of the more complex features that aren't yet covered by our tests, and if everything is a-ok, add 0.11.14+ to the supported engines in the `package.json` file.\r\n\r\nI know that @jaswilli has done some of this already, so will let him call first dibs :wink:.\r\n"
4172,'halfdan',"Refactor Middleware + Express Apps\nThis is a follow up to #1961 and #4069.\r\n\r\nThe Ghost middlewares are currently a complete mess. We have two apps (blog and admin) and some middlewares for each in `middleware/index.js` and others in `middleware/middleware.js`. Some of the middlewares are shared between both apps, others really only make sense on one. The separation of blog and admin into their own express apps was a good start to get things cleaned up. \r\n\r\nAs part of this issue the following tasks should be considered:\r\n\r\n- [ ] Find a new home for each middleware\r\n- [ ] Refactor /ghost/api into its own express app\r\n- [ ] Clean up the set up process of Ghost (how the express app gets initialised)\r\n- [ ] Improve test coverage for middleware\r\n\r\nI'll be working on all of these."
4125,'javorszky',"Update nodemailer from 0.7 to 1.0\nNow that Direct mail sending is in, we can worry about migrating the last 0.x releast to its current implementation. It introduces a lot of breaking changes, see http://www.andrisreinman.com/nodemailer-v1-0/#migrationguide.\r\n\r\nI'd like this assigned to me. I don't think it's superurgent, and I can chip away on this after all the other more important bits I had to do have been done."
4107,'PaulAdamDavis','Clean up CSS style standards\nOur CSS is getting messy and mixing styles all over the place. This needs to be cleaned up and a more rigorous code review process needs to take place to make sure that code which gets merged is clean.\r\n\r\n## Example 1\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/4368758/75183aea-42f2-11e4-8337-f4557a076ee6.png)\r\n\r\nShould be\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/4368777/b890e830-42f2-11e4-8fbc-e00b9c872eef.png)\r\n\r\nSpace nested rules properly for readability. Adhere to [Recess CSS](http://markdotto.com/2011/11/29/css-property-order/) property ordering.\r\n\r\n## Example 2\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/4368801/33699692-42f3-11e4-8d6b-44f1716e8055.png)\r\n\r\nShould be\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/4368806/3de1c2f2-42f3-11e4-9429-f06395068d5a.png)\r\n\r\nProper spacing. Closing comments not needed unless opening and closing brackets are 25+ lines apart, or contain > 2 levels of nesting.\r\n'
4091,'ErisDS','Removes objectTypeModelMap to reduce circular dependency.\nrefs #2455\r\n\r\n- also note areas where we still have lazy loading of modules.'
4019,'novaugust','Emberify the remaining left over bits of old-admin\nIn [core/client/assets/lib](https://github.com/TryGhost/Ghost/tree/master/core/client/assets/lib) there are two files which remain as somewhat unloved remnants of the old admin.\r\n\r\nThese 2 bits of JS need to find new homes inside the ember client, and the `assets/lib` folder needs to die.\r\n\r\nAssigning to @novaugust as he expressed an interest in laying these 2 to rest.'
3998,'novaugust',"Posts scroll box doesn't keep the active post in view\n## Issue Summary\r\n\r\nIf you're navigating through a long list of posts (long enough you have to scroll..) with the keyboard shortcuts (up/down keys), you'll eventually move your focused post out of the window.\r\n\r\nSimilarly, if you have 15 posts and load the page at `/ghost/3`, your active post will be out of view.\r\n\r\n## Repro steps\r\n\r\n1. Make enough posts you need to scroll to see them all\r\n2. scroll all the way up\r\n3. hit the down arrow until the bottom post is selected "
3993,'halfdan',"[Epic] Ghost and RSS\n## Description\r\n\r\nGhost currently uses the `rss` module to generate its RSS feed. There are a number of open issues with the module and it is not extensible (e.g. by apps). In addition to an audit of the feed structure (#2263) the RSS feed will need to be extensible and properly support caching (via ETags, #2777). \r\n\r\n## Steps\r\n\r\n- [ ] Develop new RSS module called [feed.js](https://github.com/halfdan/feed.js) that will replace `rss`. @halfdan\r\n- [ ] Make sure `feed.js` is at least on par with Ghost's current RSS feed. @halfdan\r\n- [ ] Audit feed structure and decide on necessary changes. #2263\r\n- [ ] Allow extending the RSS feed via apps. #2365"
3930,'PaulAdamDavis','App UI\n<a href="https://github.com/ErisDS"><img src="https://avatars.githubusercontent.com/u/101513?v=2" align="left" width="96" height="96" hspace="10"></img></a> **Issue by [ErisDS](https://github.com/ErisDS)**\n_Saturday Aug 16, 2014 at 14:29 GMT_\n_Originally opened as https://github.com/TryGhost/Ghost-UI/issues/96_\n\n----\n\nNot sure what happened to these, but they are outstanding and belong on this repo. It would be nice to have this UI available to us at some point soon so that we can work on all the app screens and get a very basic (and config enabled) version of the App platform out there in a release some time soon.\r\n\r\nEverything after the break is copied straight from https://github.com/TryGhost/Ghost/issues/2065\r\n---\r\n\r\nThe item is currently a draft because the UI designs are still a work in progress. \r\n\r\nHere they are so far, for your viewing pleasure.\r\n\r\n![desktop](http://f.cl.ly/items/0h1b1Z101F3V0M1m3Y2O/Apps.png)\r\n![tablet](http://f.cl.ly/items/101n3v1p130v3t0y3o1C/Apps%20-%20Tablet.png)\r\n![mobile](http://f.cl.ly/items/1c09220x2e10402t422Q/Apps%20-%20Mobile.png)\r\n![delete](http://f.cl.ly/items/1X1S450v3K38081Q0S0k/Apps-delete.png)\r\n![manage](http://f.cl.ly/items/3W183M170s0j2Z1a0G12/Apps-bulkmanage.png)\n'
3927,'PaulAdamDavis','First pass on new importer UI\n<a href="https://github.com/JohnONolan"><img src="https://avatars.githubusercontent.com/u/120485?v=2" align="left" width="96" height="96" hspace="10"></img></a> **Issue by [JohnONolan](https://github.com/JohnONolan)**\n_Wednesday Jun 25, 2014 at 10:39 GMT_\n_Originally opened as https://github.com/TryGhost/Ghost-UI/issues/47_\n\n----\n\nThis probably needs more discussion / spec. Just a starting point for the UI.\r\n\r\nSketch3 file - http://cl.ly/WFFg\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/3384127/a9d2e9d6-fc54-11e3-81b1-867aee9de41e.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/3384132/b333fae2-fc54-11e3-9e68-005aa3db6e7c.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/3384136/c04693c0-fc54-11e3-92b3-0177572800ec.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/3384144/d286cde8-fc54-11e3-95dc-8c94b2cbe4db.png)\r\n\r\n\r\n\r\n\n'
3492,'jaswilli',"[WIP] Handle session expiration gracefully\nThis will eventually fix #2092, however it's currently missing correct handling of some edge cases, tests etc. Whenever a 401 response is detected (which most likely means that the session is expired), a modal signin window is opened that lets the user sign in again to retry the action that triggered the 401 response.\r\n\r\nThat, together with Ember Simple Auth's automatic token refresh should resolve all problems with expired sessions and lost data.\r\n\r\nMissing:\r\n\r\n- tests\r\n- when 401 is triggered by a transition the modal is opened before the redirect to the signing page which looks ugly\r\n- the modal itself needs to be styled"
3489,'ErisDS','adds code injection\ncloses #1993\r\n\r\nincludes code injection for `{{ghost_head}}` and `{{ghost_foot}}`\r\n\r\nSome steps still have to be done\r\n* Include CodeMirror for syntax highlighting\r\n* renaming settings "head" and "foot" to "ghost_head" and "ghost_foot" (to be on par with the handlebar helpers)\r\n* and removing all the comments resulting from the copypasta :-)\r\n* related: TryGhost/Ghost-UI#86\r\n\r\n@DominikAngerer will look into CodeMirror.'
3242,'jgable','Import - GhostData.json error - Value in [tags.uuid] cannot be blank\n### Issue Summary\r\n\r\nImport - GhostData.json error - Value in [tags.uuid] cannot be blank.\r\n\r\n### Steps to Reproduce\r\n\r\nI am using Ghost (0.4.2) in production (for my blog) since last 3 months now @ http://blog.jsinh.in (with MySQL as DB).\r\n\r\n* To resolve few issue with the theme I created, I decided to run a local version of ghost on my development environment. Downloaded the Ghost source, resolved package dependencies and Start.\r\n\r\n* I exported the blog content from my production blog and I get a JSON file "GhostData.json" (I have done this before and export and import always worked fine).\r\n\r\n* Navigated to the /ghost/debug of local ghost instance and tried to import this export data in local blog.\r\n\r\nI encountered following error:\r\n> Error: Value in [tags.uuid] cannot be blank\r\n\r\n![screenshot from 2014-07-11 12 05 28 v01](https://cloud.githubusercontent.com/assets/1277539/3549513/7ac1b37a-08ca-11e4-9377-1eb62581e318.png)\r\n\r\nOn clean observation in the JSON file, I found that one data node was empty / null. \r\n\r\n![screenshot from 2014-07-11 12 06 37 v01](https://cloud.githubusercontent.com/assets/1277539/3549514/7ac1d170-08ca-11e4-8cba-dfb6bfd41922.png)\r\n\r\nI search my production database and found that same id = 288 - row exists. This row is not having any value or null or empty expect the id as 288.\r\n\r\nDue to this row, it becomes totally impossible (if I am normal user or non-technical or from Jupiter) for me to use this JSON export or use this export for blog data restoration if required.\r\n\r\nIssue or request to handle this scenario:\r\n1. Block all means from ghost to allow a blank entry in tags table.\r\n2. Check for a total empty / null row during export.\r\n3. Ignore total empty / null row during import.\r\n\r\nAnyone who had the same experience or faced the same problem?\r\n\r\n### Technical details:\r\n\r\n* Ghost Version: 0.4.2\r\n* Client OS: Linux Ubuntu LTS 12.04 (Precise)\r\n* Server OS: Linux Ubuntu LTS 12.04 (Precise)\r\n* Node Version: 0.10.29\r\n* Browser: Mozilla Firefox 30.0\r\n* Database: MySQL'
3237,'novaugust','Move admin from EAK to Ember-Cli\nThe Ember App Kit has been deprecated in favor of [Ember-Cli](http://iamstef.net/ember-cli/). \r\n\r\n----------------------------------------------------------------------------\r\n\r\n## Why\r\nThe EAK may be deprecated, but it\'s certainly working for us and will for the foreseeable future. So, why we should bother needs to be addressed\r\n\r\n### Pros\r\n\r\n1. Move client build steps out of grunt, woo for smaller gruntfile\r\n2. faster, smarter builds via broccoli\r\n3. hook into the growing ember-addon space (#3584 gets easier, for instance)\r\n4. first class environment configuration\r\n5. It\'s nice? I\'ve been using it at work and liking it, apart from early life issues, but the core team is very responsive, with new releases nearly every other week\r\n\r\n\r\n### Cons\r\n\r\n1. Another build tool (broccoli)\r\n2. contributors have to `npm install -g ember-cli bower grunt` now\r\n3. i had to write a pros and cons list\r\n\r\n\r\n## Blockers\r\n\r\nThese are the things that I think will make this hard, or that are on my mind\r\n\r\n1. **Grunt vs Broccoli**\r\n\r\n      `grunt dev` runs a watch command that recompiles server or client assets whenever a developer changes a file.  Moving the ember build step to an separate tool (broccoli) means that we need two processes/threads to do this, not just one (ie, `grunt dev` runs `ember build --watch`).  We could potentially leave the watching up to grunt and have it call `ember build` every time, but then we lose the benefit of broccoli intelligently rebuilding\r\n\r\n2. ember-cli thinks it\'s the root of a project\r\n\r\n    ember-cli expects jshint, package.json, and other project-level configurations to be placed at its directory, but that\'s obviously not going to be the case with Ghost. I\'m assuming this can be configured\r\n\r\n3. tests\r\n\r\n    ember-cli tries its hardest to make sure you\'re doing tests, and comes with qunit. #2990 asks for a mocha based test framework, but I believe "anything\'s better than nothing" maybe the case here. There may also be some issues between our already running our own test. On the upside, it runs on phantomjs\r\n\r\n4. base url\r\n\r\n    ember-cli builds out a template with a `<base href="/your/settings" >` tag, but we obviously don\'t know where ghost will be served from. This should be a simple fix of removing the setup from ember-cli and doing it ourselves, save that ember-cli is using an express server\'s handlebars to build the tag, so adding our own handlebars to the template will possibly be odd?\r\n\r\n5. eh, I think this list works for now. \r\n\r\n\r\n------------------------------------\r\n\r\nI\'ll update as I start trying a switch\r\n'
2990,'rwjblue','[Ember.js] Unit Tests\nTesting Ember with Casper.js #2989 will give us an overview of whether the admin is functioning as we expect. However, Ember apps also lend themselves well to unit testing, and there are certain sections of the admin which would benefit from being tested in this way.\r\n\r\nStandard Ember unit tests use qunit, but Ghost makes heavy use of mocha, so it is preferable if the unit tests can be run using mocha.'
2640,'halfdan','Post Filter Menu\nTime to implement the post filter UI - which has been around in some form or another since v0.1 - but hidden from view.\r\n\r\nThis should use the standard/existing dropdown menu styles in order to filter posts by a few different attributes. In future this will be more comprehensive, this is a first pass solution to allow some very basic sorting of the post management screen.\r\n\r\nWhen a menu item is clicked on, the post list heading, and the posts loaded below, should update accordingly.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/120485/2768194/75c9d2c0-ca41-11e3-84c0-0d71d13ac128.png)\r\n'
2465,'halfdan','Add API endpoints for Apps\nThe following API end points are intended to manage Apps using the GUI.\r\n\r\n- `GET /ghost/api/v0.1/apps/`: get a list of all available apps\r\n- `GET /ghost/api/v0.1/apps/<id or app-name>`: get app details using id or app-name\r\n- `DELETE /ghost/api/v0.1/apps/<id or app-name>`: delete app using id or app-name\r\n- `PUT /ghost/api/v0.1/apps/<id or app-name>`: edit app using id or app-name, currently needed to activate/deactivate Apps'
2141,'JohnONolan','[Draft] Apps wire up the correct install, activate, manage, delete UI\nThis is a draft issue to go along with #2065 as it is anticipated that work will be required after #2083 and #2040 to get the app screens wired up exactly correctly.'
2140,'halfdan',"Apps additional lifecycle and settings UI \nFollowing on from #2083, it would be nice to get the App UI a few steps closer to it's final version so that we can ensure everything works as needed.\r\n\r\n1. Each app should be output as an icon (generic for now), a name, and a green/grey button to activate / deactivate the app. It doesn't need to be pretty, or horizontally laid out or anything... just lets get the right stuff on the page.\r\n2. Clicking on an app takes you to a secondary screen, which contains a working activate or deactivate button in the top right corner (will be replaced with on / off switch later) a working back button in the top right corner, and the app's name in the top middle... or at least contain those 3 things somewhere on the screen:\r\n![settings](http://puu.sh/6N7km.png)"
2125,'ErisDS','JSON Data API Docs\nBy the end of 0.5, we should have competed #2124 \r\n\r\nWith the API cleaned up and consistent, we should document, for all available functions:\r\n* how to use it via the app proxy\r\n* the permissions required to access them\r\n* the options / arguments available and what they do\r\n* the possible return values\r\n* the possible errors or warnings\r\n'
2118,'ErisDS',"Handle errors from apps appropriately\nIt's not going to be possible to close this until pretty late in 0.5, but I hope that having this written out will mean that expectations are clear, and we might not have to do any additional work for this issue.\r\n\r\nFirstly, starting Ghost with a non-existent apps defined in either activeApps or installedApps needs to result in a nicely formatted red-white-green error message output to the console, but no crash and no unhandled promise errors in dev mode. Apps which don't exist simply don't get loaded into Ghost, and the App UI will deal with messaging this in a more friendly way and providing options to resolve the problem.\r\n\r\nSecondly, errors in apps also need to result in sensible behaviour - again a nicely formatted red-white-green error message on the console, absolutely no crashing or unhandled promise rejections coming from Ghost itself. If an app throws / causes an error during it's initial activation or loading then don't load the app at all. If the error is caused later, handle the error as best as possible.\r\n\r\nWhere possible we might want to consider deactivating an app that causes errors. Especially if those errors appear in a key place such as on the app management screen, as if this was to show a 500 error page, the user would be prevented from disabling a broken app.\r\n\r\nSome errors that might happen in apps:\r\n\r\n- syntax errors in JavaScript\r\n- typos / attempts to use APIs that don't exist or don't make sense in a given context\r\n- attempts to do things that apps are not meant to do\r\n- destructive actions - an app might delete stuff it depends upon\r\n- problematic / missing dependencies in apps\r\n- any errors of any kind with package.json files\r\n\r\nEssentially, we have no way to guarantee the quality of code in an app, it may well break, and we need to be ready for that.\r\n"
2101,'JohnONolan','App permissions UI\nWhen installing Apps, we want to present to the user all the permissions that an app is asking for.\r\n\r\nAs per [App Ideas Permissions](https://github.com/TryGhost/Ghost/wiki/App-Ideas-Permissions)\r\n\r\nPermissions might be something like:\r\n\r\n> Can add, edit and delete posts.\r\n> Can add a new route\r\n\r\nAll apps by default will be able to:\r\n\r\n- browse and read published posts\r\n- browse and read users, where each user only returns safe data\r\n\r\nThe permissions can either be accepted or denied as a group.\r\n\r\nAccepting will install the app, denying will not install the app.'
1914,'cgiffard',"Challenge: Testing / CI for memory usage\nI'd love to see some sort of reporting on how much memory Ghost uses as part of our build / CI.\r\n\r\nEven though this information is readily available via process.memoryUsage(), all of the information / tools around seem to be focused on instrumenting the app and detecting memory leaks.\r\n\r\nAlthough if we have memory leaks, we should find them, this is not what I'm really interested in. I'm more interested in how much memory the app is using overall on average, so we can keep an eye on usage as we grow the application.\r\n\r\nEvery additional dependency, all the modules we have internally, all the data we store in memory etc all has an effect on memory usage, and it would be nice to track this as we add new features."
1895,'JohnONolan',"User Settings\nRight now we have a single concept `/settings/` where all settings live. With mult-user, we're going to want to abstract that into 2 types of settings areas.\r\n\r\n**Blog Settings** // **User Settings**\r\n\r\n![settings](https://f.cloud.github.com/assets/120485/1879660/33493aa2-794d-11e3-862b-5a433bed0a16.jpg)\r\n\r\n## Blog Settings\r\n\r\nBlog settings == the settings screen we have right now. With multi-user, we only want these settings to be visible to Admin users. All other users should never see or have access to this screen.\r\n\r\n## User Settings\r\n\r\nThis is a new settings screen, using the same layout as blog-settings, but only populated with settings relevant to the user. This should live on `/user/`\r\n\r\nBy default\r\n\r\n* Profile (public profile data) - `/ghost/user/profile/` (default)\r\n* Account (username, email, password) - `/ghost/user/account/`\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1879768/c43d2c0c-794e-11e3-8b0d-8d0a79a04f63.png)\r\n*NB: The menu order is reversed in this screenshot, it should be per the bullet points above*\r\n\r\nAdditionally, apps should be able to register their own user settings screens. For example, an app might want to allow users to be able to set their own writing reminders - so would register a `/ghost/user/reminders/` settings page that might look like...\r\n\r\n![image](https://f.cloud.github.com/assets/120485/1879852/0f1c1660-7950-11e3-8ab0-1a5f829180c8.png)\r\n"
1892,'PaulAdamDavis',"Scrollbars 2.0\nhttps://www.facebook.com/messages/ - hover around the different parts of the page and scroll. This is how scrollbars in Ghost should work.\r\n\r\nThere's some example very basic example implementations of this here: http://rocha.la/jQuery-slimScroll (NB: do *not* want to use this, just a reference)\r\n\r\nThis is not a simple issue. We've already had a mess around with scrollbars in the past and totally failed. There are many tricky cross-browser (and mobile) implications which need to be tested.\r\n\r\nThe Facebook implementation is the best I've ever seen by a significant margin. It does OSX like interactions but with some additional features which make it more suited to browsers and other platforms. Very like.\r\n\r\nI would love to see a PR for this with an initial prototype implementation and some thoughts / suggestions."
1773,'ErisDS','Add functional unit tests for routing\nAdd unit tests to check that routing correctly works. This would catch bugs such as #1753 and  #1757.'
1756,'cobbspur','Add link to published post from admin\nMaybe I cannot see (and so, still a bug, even tho just usability), but I think adding a link to the published post would be a good idea as it let the writer see exactly how the post look like once published.\r\nNow I have to click on the tiny "ghost" icon on the top left and then browse through the posts.'
1641,'sebgie','Add and remove column support for migration\nAdd the ability to `add column` and `delete column`. If a column is added to/deleted from `schema.js` the database should be updated accordingly.'
1405,'bastilian','Static Asset Management\nIt\'s time to upgrade Ghost\'s static asset system to something a little more heavy duty, so that we can handle more use cases, and also add proper cache control headers as discussed at length in issue #932 (closed in favour of this issue).\r\n\r\nWe need to be able to serve static assets for \r\n- Ghost admin\r\n- themes \r\n- apps\r\n- images\r\n\r\nThis should entirely replace or wrap our current usage of connect static.\r\n\r\nWe still need to be able to hot-swap themes.\r\n\r\nThis needs to be abstracted so that it uses local file storage by default, but so that we can provide a way for apps to override this. They may wish to use a CDN, or store files elsewhere.\r\n\r\nStatic assets need to be versioned so that the cache can be invalidated. This should be done using a hash of the file which is appended to the filename, something like (ghost.js -> ghost.aba23928.js)\r\n\r\nWe\'ll need a helper for outputting script and style tags for managed assets both in themes, and in the Ghost admin, something like:\r\n\r\n* `{{asset "css/screen.css"}}` for themes, and if you\'re on Ghost it will look like \r\n* `{{asset "css/screen.css" ghost="true"}}` (or it could be {{asset "css/screen.css" "ghost"}})\r\n\r\nIt would be nice if this looked for a specific (assets/css, assets/js) structure by default, encouraging theme developers to structure their theme in a consistent way, but could be overridden.\r\n\r\n'
1260,'gotdibbs',"Ugly debug upgrade tool\nI would like to start investigating adding an upgrade tool for Ghost. There's no UI yet so it can live on the ugly debug tools page.\r\n\r\n**Part 1:**  would be to have a 'check for updates' button. It should be possible to make a request to `http://ghost.org/zip/ghost-latest.zip`, then read and parse the location header on the response which will be something like `http://d36u7lo2kegj1p.cloudfront.net/archives/ghost-0.3.3.zip`\r\n\r\nWe can then match the version number from the location header, with the version number in package.json to determine whether or not there is an upgrade.\r\n\r\n**Part 2:** would be to have a second 'Upgrade Ghost' button appear if an update is found. \r\n\r\nA backup of the database should be made using exporter before proceeding. The upgrade button should then make a http request to fetch the `http://ghost.org/zip/ghost-latest.zip` zip file into a freshly created `/content/tmp/` folder and unpack the archive.  The Ghost core/ folder and root files should then be copied over the top of the existing install. \r\n\r\nThe user should be presented with an option (probably a checkbox above the 'Upgrade Ghost' button which is selected by default) to choose whether or not the Casper files are also updated.\r\n\r\nFinally, once the files have been successfully copied into place, a message should be displayed clearly indicating that the user must manually restart Ghost before the changes will take effect."
623,'jgable','[Feature] Generate sitemap.xml\n[Updated 26 Jul 2014 - John]\r\n\r\nTo support SEO, Ghost should generate a sitemap.xml. \r\n\r\nThe best format for this is likely to follow the work of Yoast and his SEO plugin for WordPress, which creates separated XML sitemaps for different content formats, brought together in a main XML file and served through an XSL template. This has been widely tested and updated over the years.\r\n\r\nDemo: http://marketplace.ghost.org/sitemap.xml\r\n\r\nFor us the sitemap structure would be:\r\n\r\n* Index\r\n   * Posts\r\n   * Pages (contains home)\r\n   * Tags\r\n   * Authors\r\n\r\nThese should be generated *once* and saved in the filesystem. When a post is published or updated it should update the posts sitemap, when a page is published or updated it should update the pages sitemap, when a user is created or updated... and so on.'
601,'sebgie','Migrations: Column modification\nLong term, we are probably going to want to be able to change the name and constraints on columns.\r\n\r\nIdeally, the resolution for this issue would be to close the [issue I raised on knex.js](https://github.com/tgriesser/knex/issues/46).\r\n\r\n'
