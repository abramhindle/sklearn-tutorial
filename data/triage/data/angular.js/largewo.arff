@relation large.json
@attribute id integer
@attribute owner string
@attribute content string
@data
10189,'chirayuk','docs(injector): adds a missing backtick and reformat list.\n'
10185,'btford','Add some examples to absUrl(), url([url]), protocol(), host(), port(), path([path]), and hash([hash]).\nAdd some examples to absUrl(), url([url]), protocol(), host(), port(), path([path]), and hash([hash]). For issue #9754 '
10183,'btford',"docs(unit testing): improve unit testing guide\nThis commit adds to the unit testing guide:\r\n\r\n- add explicit section on additional libraries: Karma, Jasmine and\r\n  angular-mocks and link to the docs for those projects too. Explain the\r\n  benefit and use case for each of these libaries\r\n- Add more fully featured test examples and add more documentation\r\n  around them, in particular the controller test\r\n- more clearly distinguish between the section on principles of testing\r\n  and actual tutorial on writing a test\r\n\r\nThis should close #8220.\r\n\r\n\r\n## Questions\r\n\r\nOne thing that I wasn't sure on was if to update the controller tests to not presume the controller is in the global scope. In the original issue (#8220) it says:\r\n\r\n> I think we talked about the controller syntax in #5076. We agreed to change that for 2.0.\r\n\r\nSo I left the controllers as is, but it feels beneficial to me to update the controller example. Is there any reason why that can't be done now? That issue mentioned (#5076) is more about the `controllerAs` syntax, but the main problem with the test example right now is that the controllers are global. \r\n\r\nSecondly, the entire discussion about the different ways of dependency injection - most people will be familiar with how Angular does this and hence talking about other mechanisms doesn't seem that worthwhile?"
10181,'rkirov','Use standard event.preventDefault when available (event.returnValue is deprecated) - #4557 \n'
10179,'IgorMinar','fix($locale): Allow currency filter to fall back to maxFrac from locale\n- Modify default fallback to `NUMBER_FORMATS.PATTERNS[1].maxFrac`\r\n\r\nNote that the default value currently is 2, so it preserves the existing behavior.'
10176,'pkozlowski-opensource','test($http): parsing headers with multiple values\nCloses #9473'
10142,'lgalfaso',"classNamePrefix is documented but not written (or has been removed)\nThere doesn't appear to be an implementation of this feature despite it being documented."
10134,'petebacondarwin','documentation for $httpProvider.defaults.cache\nIs there a settings for cache through `$httpProvider`?\r\n\r\nI do not see any mentioning of cache in the `defaults` section of the [doc] (https://docs.angularjs.org/api/ng/provider/$httpProvider)\r\n\r\ndoc for [$http] (https://docs.angularjs.org/api/ng/service/$http) say I can set `$http.defaults.cache`, which it says `Runtime equivalent of the $httpProvider.defaults property`. so, need to mention `cache` property in $httpProvider defaults section. I want to make sure following is valid\r\n`            $httpProvider.defaults.cache = true;\r\n`\r\n\r\nps: This issue was wrongly created under 2.x repo.\r\nhttps://github.com/angular/angular/issues/219'
10124,'matsko','docs(ngAnimate.$animate): fix classes during the various animation phases\nI am not 100% sure for the class additions (although I am 99+% sure).\r\n(If someone could double-check (@matsko ideally ?), that would be great :smiley:)'
10106,'pkozlowski-opensource','docs($location): fix method-name and typos in `ihshprfx` error\n'
10098,'petebacondarwin','chore(docs): add favicon to docs app\n'
10093,'petebacondarwin','Repeated word\n'
10091,'pkozlowski-opensource','fix($http): fix response headers with an empty value\nEmpty response header values are legal (http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html).\r\nReturn an empty string instead of null, which is returned when the header does not exist.\r\n\r\nCloses #7779'
10082,'petebacondarwin','docs(tutorial/5 - XHRs\ninclude sort filter in json view'
10064,'pkozlowski-opensource',"fix($location): allow empty string URLs to reset path, search, and hash\nCurrently, providing '' to $location#url will only reset the hash, but otherwise has no effect. This\r\nchange brings the behaviour of $location#url more inline with window.location.href, which when\r\nassigned to an empty string loads the page's base href.\r\n\r\nBefore:\r\n$location.url() // http://www.example.com/path\r\n$location.url('') // http://www.example.com/path\r\n\r\nAfter:\r\n$location.url() // http://www.example.com/path\r\n$location.url('') // http://www.example.com\r\n\r\nFixes #10063"
10049,'Narretz','feat(input): add $setDirty method to the controller of ng-model directive\n\r\n- extract existing functionality to public method: $setDirty\r\n- add tests to corresponding changes\r\n- refactor code to use extracted method\r\n\r\nCloses #10038'
10022,'lgalfaso','feat(ngPluralize): add support for bind-once in `count`\nThe 1st commit contains the change and test for adding support for `bindOnce` in `count`.\r\nThe 2nd commit contains some nimor refactoring (mainly to avoid repetitive actions).\r\n\r\nCloses #10004\r\n(Makes #5452 obsolete)'
10018,'caitp',"docs(guide/HTML Compiler): replaced 'locals' with 'scope'\n'locals' is an obsolete syntax"
10014,'Narretz','orderBy same property as ngModel throws $digest error\nWhen I try to orderBy a property that I am binding to in a `ng-repeat` I get a `$digest` error.\r\nI think it is occurring because in one digest the `ng-model` value is updating, which effects the parents `orderBy` clause. I do not know how to get around this. \r\n\r\nPlunker\r\n------\r\nThis shows the issue occurring. Be sure to open the console!\r\nhttp://embed.plnkr.co/rGLagq/preview\r\n\r\nJS\r\n----\r\n    \r\n    var options = [\r\n        {\r\n            name: \'test\',\r\n            isSelected: true\r\n        }, \r\n        {\r\n            name: \'another test\',\r\n            isSelected: false\r\n        }\r\n    ];\r\n   \r\n\r\nHTML\r\n----\r\n\r\n    <div ng-repeat="option in options | orderBy:\'-isSelected\'">\r\n            <label>\r\n                 <input type="checkbox"\r\n                        ng-model="option.isSelected"> {{option.name}}\r\n            </label>\r\n        </div>\r\n\r\nError\r\n----\r\n\r\n    Error: [$rootScope:inprog] $digest already in progress\r\n\r\nOther\r\n-------\r\nOriginal StackOverflow issue\r\nhttp://stackoverflow.com/questions/26877936/angularjs-orderby-same-property-as-ngmodel-throws-digest-error\r\n\r\nAngular Version\r\nOccuring on `1.3.2` and `1.3.0`. I have not checked versions previous to `1.3.0`\r\n'
10008,'pkozlowski-opensource','docs($q): remove IE8-specific notice\n(As discussed in #9817.)\r\n\r\n/ping @pkozlowski-opensource '
10004,'lgalfaso','Support one-time binding in ng-pluralize\nI would expect this to work, but it doesn\'t: \r\n\r\n`<ng-pluralize count="::foo" when="{\'0\': \'zero\', \'1\': \'one\', \'other\': \'many\'}"></ng-pluralize>`.\r\n\r\nExample: http://plnkr.co/edit/iaFI3p?p=preview\r\n\r\nAny plans to make this work?'
9999,'pkozlowski-opensource','Update angular-mocks.js\nAvoid "No more request expected" errors on legal tests wih no definitions, by checking definitions.length to be > 0 before throwing new Error'
9998,'pkozlowski-opensource','feat(ngMaxlength): disable maxlength when not set to a non-negative integer\n1. Previously, setting the maxlength to a negative number, would make all input values invalid (since their length should be less than maxlength, which is impossible).\r\n2. Furthermore, supplying a non-numeric value would set maxlength to 0 (effectively only allowing empty values - although this is not very likely the intended behaviour).\r\n\r\nThe 1st commit fixes (1): Adds support for disabling the max length limit by setting maxlength to a negative number.\r\n\r\nThe 2nd commit "fixes" (2): When specifying a non-numeric value for maxlength (e.g. `""`, `null`, `"abc"`), the max length limit is disabled (i.e. the validator will return `true` for any input).\r\n\r\nNote that the behaviour implemented in these 2 commits is more inline with how the HTML5 `maxlength` attribute works (both in browsers and according to [the spec](http://dev.w3.org/html5/spec-preview/attributes-common-to-form-controls.html#attr-fe-maxlength)).\r\n\r\nCloses #9874\r\nCloses #9995'
9990,'IgorMinar','Backport security bugfixes from 1.3 to 1.2\n'
9989,'lgalfaso',"Transcluded template content isn't shown within ng-repeat in Angular 1.3.2, 1.2.16 is fine\nI have a directive which, simplified, fetches data based on its input and returns it in an ul-element, using ng-repeat on the li-tags. The output is customly displayed using elements within the tag that are transcluded within the li-tags. \r\n\r\nThis worked fine in Angular 1.2.16, but since the switch to 1.3.2 it no longer does.\r\n\r\nNote: the ng-repeat **does** render, but the {item.prop} tags don't. They do, however, show up as ng-bind-template in my inspector.\r\n\r\nSimplified code in the plunker: http://plnkr.co/edit/rmE9eWyLDcP1YEwvh9NH?p=preview \r\nWhen I alter the version to 1.3.2, I just see an empty template."
9979,'pkozlowski-opensource','fix($httpBackend): compare timeoutId with undefined in completeRequest\nhttpBackend with ngMock browser.defer can never cancel the first deferredFn because the timeoutId returned by defer for the first fn is a zero value.\r\nCompare timeoutId with undefined fix this issue.'
9973,'pkozlowski-opensource','More jscs rules\nadded rule requireSpaceAfterBinaryOperators\r\nadded rule requireSpaceBeforeBinaryOperators\r\nadded rule requireSpacesInConditionalExpression\r\n\r\ncc: @caitp '
9969,'chirayuk','backport security fix to 1.2\n'
9961,'lgalfaso',"refactor($parse): don't use bind-once interceptor for non-bind-once expressions\nSide-effects:\r\n  - Logic for allOrNothing watches now lives in $interpolate rather than $parse\r\n\r\nCloses #9958"
9958,'caitp','Cleanup handling of bind-once delegates after #9825\nAs noted in #9825 / ed99821, we are doing some weird things, and now treating certain expressions as "stateful" in a way that doesn\'t really make sense.\r\n\r\nWatch delegates shouldn\'t be stateful unless they absolutely need to be (IE depend on a stateful filter) --- and we shouldn\'t be performing the bind-once behaviour unless we\'re actually trying to bind-once.'
9957,'lgalfaso','fix(inputs): ignoring input events in IE caused by placeholder changes or focus/blur on inputs with placeholders\nTest for merging'
9952,'Narretz','Returning undefined in $parsers function updates the model value\nIn docs for `ngModelController.$parsers` (for 1.3.1)  it said that : _the \'ngModel\' will not be updated until the parse error is resolved_" I would expect that when I return `undefined` in parser, `ngModel` will not be updated. \r\nBased on that, on the following plunker it\'s not working as expected :\r\nhttp://plnkr.co/edit/WBxnYMFXPr6hdYV3zZBh?p=preview\r\n\r\n How to test it :\r\n - First entering any two letters\r\n - Then enter third letter\r\n - Parser error is shown\r\n -But model value is set to undefined -> this is opposite to the docs.\r\n\r\nIs this the expected behavior ?\r\nThanks,\r\nIgor'
9950,'IgorMinar','Some extra checks to help prevent misuse of DOM apis in the insecure/buggy angular expressions\n'
9930,'btford',"Add in-depth guide for ngAria\nTo help explain what the ngAria module can and can't do, I've updated the Developer Guide to include more in-depth information, code examples and accessibility resources. This is a companion piece to a blog post on the official AngularJS blog due out shortly.\r\n\r\nRelated to https://github.com/angular/angular.js/issues/9925"
9925,'btford','Provide examples and thorough docs for ngAria\nThe documentation for ngAria leaves a lot to be desired --- we need to fill it up with some more content and usage examples so that people can feel confident in trusting ngAria for their accessibility requirements which they are legally obligated to meet (depending on industry).\r\n\r\nLets make these better.'
9923,'lgalfaso','fix($location/$browser): prevent infinite digests on empty hash changes\nFixes #9635'
9907,'pkozlowski-opensource',"fix($http): won't parse single space response\nAccording to [this question](http://stackoverflow.com/questions/3351247/how-to-return-truly-empty-body-in-rails-i-e-content-length-0), Rails in order to patch a bug in Safari, returns a single space when calling `head :ok`, which is the standard for POST requests.\r\n\r\nAngular since [9ba24c54d](https://github.com/angular/angular.js/commit/9ba24c54d60e643b1450cc5cfa8f990bd524c130) checks if the body is empty before calling JSON parse, but this still breaks in this case, since the body isn't empty, but contains a single space. \r\n\r\nWe are hitting this issue when trying to upgrade from Angular 1.2.10. This PR should help in that case."
9898,'lgalfaso','Caret restoring after recompiling the inputs with ng-model\nHello, after upgrading to 1.3.0 I have an issue with caret on recompiled inputs. After enter the value caret jumps to the end of input. \r\n![123](https://cloud.githubusercontent.com/assets/3543513/4896179/aa3709a8-63f5-11e4-888e-e5db02b27256.gif)\r\n\r\n**Reproducable:** always\r\n**Angular Version**: >1.3.0\r\n**Browsers:** Chrome 38 and IE 11\r\n**Operating system:** Windows 8.1\r\n**Plnkr:** http://plnkr.co/edit/BMumov7W1t4xp1PYeL1K?p=preview'
9888,'petebacondarwin','fix(ngPattern): match behaviour of native HTML pattern attribute\nFrom https://html.spec.whatwg.org/multipage/forms.html#attr-input-pattern\n\n> The compiled pattern regular expression, when matched against a string, must have its start\nanchored to the start of the string and its end anchored to the end of the string.\n\n/CC @matsko please review\n\nCloses #9881'
9873,'pkozlowski-opensource','feat($routeProvider): allow setting caseInsensitiveMatch on the provider\nFixes #6477'
9865,'btford','feat(ngModel): add ngModelContext for getter/setter bindings\nAdds an optional attribute, `ng-model-context`, that will be evaluated to provide the calling\r\ncontext used when invoking the ngModel getter/setter function. When not provided, falls back to the\r\nexisting behavior of invoking getter/setter functions from the global context.\r\n\r\nCloses #9394'
9858,'matsko','Closes #9636\nI see no reason not to have this check. This PR is equivalent to #9636, just changes a little less.'
9853,'pkozlowski-opensource','docs(tutorial/7 - Routing\nclass="thumb" should be on the image tag not on the anchor link tag.\r\nIt does not work in the current position.'
9851,'btford','docs(security): add security doc\nWIP'
9847,'matsko','Update animate.js\nJust pushing for testing purposes.\r\n\r\nCheck if cache and cache.classes exist. Sometimes cache is undefined and errors are thrown when looped over.\r\n\r\nCloses #9636'
9841,'lgalfaso','Order of animation staggering is wrong when model of ng-repeat change\nhttp://plnkr.co/edit/MMMwRHwq6O0Yg3CXbK0y?p=preview\r\n\r\nif the model of the ng-repeat is change ( in the exemple with a timeout but i found the problem with WS ), the order of the animation is completely wrong. The new elements have their own delay.\r\n'
9828,'jeffbcross','[[DUPE of 9726 for Travis]] fix(select): assign result of track exp to element value\nFixes a regression where the option/select values would always be set to\r\nthe key or index of a value within the corresponding collection. Prior to\r\nsome 1.3.0 refactoring, the result of the track expression would be bound\r\nto the value, but this behavior was not documented or explicitly tested. A\r\ncache was added in order to improve performance getting the associated\r\nvalue for a given track expression.\r\n\r\nThis commit adds one explicit test for this behavior, and changes several\r\nother trackBy tests to reflect the desired behavior as well.\r\n\r\nCloses #9718\r\nFixes #9592'
9827,'pkozlowski-opensource','fix($route): fix redirection with optional/eager params\nPreviously, when (automatically) redirecting from path that fetured a trailing slash and optional or "eager" parameters, the resulting path would (incorrectly) contain the special characters (`?`,`*`) along with the parameter values.\r\n(There is also a first (unrelated) commit, that fixes the names of 2 tests in `routeSpec`.)\r\n\r\nCloses #9819'
9825,'IgorMinar','fix($parse): stateful interceptors override an `undefined` expression\nWhen using `$parse` with a stateful interceptor and the expression is `undefined`, then return the result from the interceptor\r\n\r\nCloses #9821'
9821,'IgorMinar',"Two-way bound attribute watcher not appearing dirty when it should\nThis example probably does a better job of describing the issue than I could: http://jsfiddle.net/ne74rdhg/ When you first click the button, the text does not appear. It appears on a second click. If you switch the same example from `1.3.0-beta.16` to `1.3.0-beta.15`, the button works as expected.\r\n\r\nI spent some time looking into the issue, so let me write down my findings. But I'm not familiar with Angular's insides, so feel free to disregard my ramblings :).\r\n\r\nThe issue appears after @rodyhaddad 's https://github.com/angular/angular.js/commit/86d55c1ded21a5be6091344493d70c6dc4194e43. The commit has changed how `nodeLinkFn` creates a watcher for `=`. `parentValueWatch` has become an interceptor. `addInterceptor` is strange in that it will always return the pre-interceptor value if it was undefined.\r\n\r\nIn my JSFiddle `greeting` starts out undefined. When it changes, `parentValueWatch` copies it up into the controller's scope and returns the new value. But `interceptedExpression` still returns `undefined`, because the value was `undefined` before running the interceptor. So the watcher is not dirty (it went from `undefined` to `undefined`), digest stops, and the change does not propagate into `text`."
9816,'caitp',"fix(jenkins): reset baseUrl in protractor conf\n(Tested before and after fix locally and manually on ci.angularjs.org)\r\n\r\nCommit 22b817ec11f7ab1a81342a4b60acd644a3f2a8c3 changed the url\r\nused by protractor in all docs tests to add build/docs, which\r\nwas already set to the baseUrl in protractor-jenkins.conf. This\r\ncommit just changes the protractor config's baseUrl to adapt\r\nto the changes in the spec files.\r\n\r\nCloses #9783"
9808,'Narretz','fix(ngModel): use `$evalAsync` for blur events to safely `$apply`\nSet the `$touched` asynchronously using `$evalAsync` if the element is blurred during an `$apply`, otherwise it keeps the old behaviour.\r\n\r\nFixes https://github.com/angular/angular.js/issues/8762'
9804,'jeffbcross',"Authroization headers are not added for cross origin requests.\nI've been trying to call my API all evening and thinking it was a server setup issue causing a 403, it turns out that Authorzation header was never added.\r\n\r\nhttp://jsfiddle.net/v8q7eys4/1/\r\n\r\nThe fiddle just tries to GET an external URL (the BBC) and also a local URL with an Authorization header, if you run this in Google Chrome you can see in the network log panel that the header is added for the local URL."
9803,'jeffbcross','Submit url with comma\nI simply want to submit this url : \r\n$http.jsonp("https://maps.googleapis.com/maps/api/elevation/json?locations=27.98833,86.92528&callback=JSON_CALLBACK")\r\n\r\nthe only problem is that I can\'t find a way to avoid the error "unexpected token" because of the coma.'
9792,'caitp','Add jscs rules\nWIP\r\n\r\nMaybe we just exclude ngLocale/ from style check because they are generated anyway?\r\n\r\nCc: @caitp '
9786,'btford','docs: strict-di docs are hard to discover\nstrict-di was introduced in 4b1695ec61aac8de7fcac1dfe8b4b420f9842c38\r\n\r\nbut the snippet of docs in ngApp doc is insufficient to understand what the strict mode is and why and how to use it. we should move some of the commit message info++ to ngApp or some other easy to find place and also add a note to guide/di.'
9783,'jeffbcross',"ci.angularjs.org is having a bad week\n> @gkalpak informs me that code.angularjs.org's snapshot directory isn't being updated, I guess master jenkins jobs aren't running to completion. not sure why, travis is green.\r\n\r\n@jeffbcross could you take a look at this when you have a chance, thanks =)"
9743,'caitp',"docs(form.FormController): add 'date' token to FormController $error property\nHi from #ngEurope "
9741,'caitp',"docs($templateCache): clarify inline template\nCurrent doc doesn't state required tag location clear enough. It was [stack overflow|http://stackoverflow.com/a/16125138] where I've found that requirement"
9731,'caitp','Route inherited param fix\nngEurope sprint with Vojta & Jeff'
9726,'jeffbcross',"fix(select): assign result of track exp to element value\nFixes a regression where the option/select values would always be set to\r\nthe key or index of a value within the corresponding collection. Prior to\r\nsome 1.3.0 refactoring, the result of the track expression would be bound\r\nto the value, but this behavior was not documented or explicitly tested. A\r\ncache was added in order to improve performance getting the associated\r\nvalue for a given track expression.\r\n\r\nThis commit adds one explicit test for this behavior, and changes several\r\nother trackBy tests to reflect the desired behavior as well.\r\n\r\nFixes #9592 and it's related to PR #9718 (@jeffbcross)"
9725,'caitp',"feat($compile): allow $watchCollection to be used in bi-directional bindings\nAllow an asterisk to be specified in the binding definition to use `$watchCollection` instead of `$watch`.\r\n```js\r\nscope: {\r\n  prop: '=*'\r\n}\r\n```\r\n\r\nThis is a follow-up to #3491 but using `$watchCollection` as @IgorMinar [suggested](https://github.com/angular/angular.js/pull/3491#issuecomment-22274279)."
9722,'matsko','docs($animate): document the 3rd party framework compatibility issues #ngEurope\nFixes #8569, I hope the wording is both correct and clear enough.'
9720,'caitp','fix($observe): check if the attribute is undefined\nCheck if the attribute is undefined before manually applying the function because if not an undefined\r\nproperty is added to the scope of the form controller when the input control does not have a name.\r\n\r\nCloses #9707\r\n\r\n[#ngEurope](http://ngeurope.org/) /cc @rodyhaddad @vojtajina '
9718,'rodyhaddad','fix(select): assign result of track exp to element value\nFixes a regression where the option/select values would always be set to\r\nthe key or index of a value within the corresponding collection. Prior to\r\nsome 1.3.0 refactoring, the result of the track expression would be bound\r\nto the value, but this behavior was not documented or explicitly tested.\r\n\r\nThis commit adds one explicit test for this behavior, and changes \r\nseveral other trackBy tests to reflect the desired behavior as well.\r\n\r\nFixes #9592'
9713,'vojtajina','fix(templateRequest): allow empty html template\nallow empty html template and not throw error\r\n\r\nCloses #9581'
9706,'petebacondarwin',"Some trivial fixes to new e2e harness\n1) Removing some redundant file (I hope I'm not missing anything)\r\n2) Add body tag to fixture + indentation\r\n3) Minor refactor to editting jquery script tag\r\n4) Update npm shrinkwrap"
9697,'petebacondarwin','fix(inputs): ignoring input events in IE caused by placeholder changes\n'
9680,'caitp','Update dgeni config to free up paths to protractor tests\nThere are two commits:\r\n\r\nThe first updates the base path for protractor tests.\r\nThe second fixes some manual e2e tests that needed their path changing'
9678,'pkozlowski-opensource','feat($location): allow to change location during $locationChangeStart\nCloses #9607'
9671,'mzgol',"refactor($sce): don't depend on $document\nThe $sce dependency on $document was added in 64241a5 because it was thought\r\nit's not possible to easiy use the msie variable in this module. This was\r\nchanged in 45252c3, though so it's no longer needed to depend on $document."
9650,'IgorMinar','docs($location) fix $$parse parameter name\nReplaced newAbsoluteUrl by url parameter.'
9645,'mzgol','refactor(jqLite): remove a duplicate DOMContentLoaded handler attachment\n'
9639,'Narretz','ngOption model value 0 or false treated as \'not selected\' after 1.3.0-rc.4\nWas not able to find this bug mentioned after a search.\r\n\r\n### Specific Bug Behavior\r\nBeginning with 1.3.0-rc.5, and continuing into today\'s snapshot, when one of the values in an ngModel choice set is the integer 0 or the boolean false, Angular now assumes this value is equivalent to having made no selection.\r\n\r\nThis is not a \'falsy\' evaluation issue. The bug manifestation does not correspond to falsy values:\r\n* `-1` - truthy, no bug\r\n* `0` - falsy, **bug**\r\n* `1` - truthy, no bug\r\n* `NaN` - falsy, no bug\r\n* `true` - truthy, no bug\r\n* `false` - falsy, **bug**\r\n* `undefined` - falsy, no bug\r\n* `null` - falsy, no bug\r\n* `"1"` - truthy, no bug\r\n* `""` - falsy, no bug (select correctly chooses the new option with empty string value)\r\n\r\n### Examples\r\nThe code in the following two Plunkrs is identical, except for the Angular version.\r\n\r\nCorrect behavior - Model value of empty string is reflected in the \'choose\' option being visually selected at load time.\r\nAngular 1.3.0-rc.4\r\nhttp://plnkr.co/edit/OUfDk8mAneJ4pO3pwxbC?p=preview\r\n\r\nIncorrect behavior - Model value of empty string is still stored as empty string, but the select tag visually shows the \'Zero\' option being selected at load time, representing a state inconsistency between the visual display and the underlying data. Furthermore, the \'Zero\' option cannot be selected directly at this point, since the tag already thinks it is selected. The user must select some other option first before returning the real selection to the \'Zero\' option.\r\nAngular 1.3.0-rc.5:\r\nhttp://plnkr.co/edit/RfsAKybKJIqic4B9yBVr?p=preview\r\n\r\n### Demonstrated Need\r\nServer-side returns list of choices in a format like so:\r\n```javascript\r\n[\r\n  {\r\n    "value": 0, // or false\r\n    "label": "Zero"\r\n  },\r\n  {\r\n    "value": 1,\r\n    "label": "One"\r\n  },\r\n  {\r\n    "value": 2,\r\n    "label": "Two"\r\n  }\r\n]\r\n```\r\nThis format was chosen because it\r\n* Preserves ordering\r\n* Allows the server to specify the database-relevant value\r\n* Provides a human readable label without the client having to know every possible option in advance\r\n\r\n### Manifestation Code\r\n```html\r\n<select ng-model="p.value" ng-options="c.value as c.label for c in p.choices">\r\n  <option value="">-- choose --</option>\r\n</select>\r\n```'
9637,'IgorMinar','Simplify regular expressions in compile.js\nMeta-character `\\w` already contains a `\\d` and `_`.'
9621,'petebacondarwin',"IE (8-10) rendering issue when dynamically changing options\nI have a set of selects that all have the same options. Then I run those options through a filter so that any options that are selected in a different select don't show up in the select. Basically I'm preventing the same option from being selected multiple times among the selects.\r\n\r\nHere is a fiddle with 1.3.0: http://jsfiddle.net/pzy8s22q/\r\n\r\nIn IE8 - 10, if you change 3rd select from FFF to AAA, the two dropdowns before it show a different value than what is in the model.\r\n\r\nif it helps at all, I posted this StackOverflow question back in the early days of Angular when I first ran into this: http://stackoverflow.com/questions/12942681/how-to-fix-ie-select-issue-when-dynamically-changing-options\r\n\r\nI mentioned some of these details in issue #4749 but it has since been closed. There was a comment there with a suggested fix that fixed the issue for me: https://github.com/angular/angular.js/issues/4749#issuecomment-52188090\r\n\r\nAny reason the lines\r\n`lastElement.attr('label', existingOption.label);`\r\nand \r\n`element.attr('label', option.label);`\r\n\r\ncouldn't be added where mentioned in the comment?"
9620,'Narretz','docs: update and improve docs for input, ngModelController, and guide/forms\nIn this PR:\r\n\r\n- make it more clear that you should use $validators for custom validation (updated example in guide etc)\r\n- adds explicit information what certain inputs require (Date object for input[date] etc)\r\n- update outdated information (css class list, parse errors)\r\n- explain how to override built-in validators (for ye olde Email regex discussion)\r\n\r\nFeeback welcome, I probably have introduced typos and odd wordings.'
9617,'tbosch','docs(select): add more notes about ngRepeat and clean up style\nI added a note to make more clear when to use ngRepeat or ngOptions.\r\n\r\nI also organized the text in the ngOptions section to flow better and use less alert divs'
9615,'IgorMinar','Fixing the &lt; and &gt; in the benchmarks/README.md page\n'
9612,'btford','npm README mentions Bower\nSee https://www.npmjs.org/package/angular and similar; the README is written as if this was a publication to Bower and Bower only.'
9607,'pkozlowski-opensource','Changing $location.path(newUrl) in $routeChangeStart\nI\'m upgrading an app to 1.3.0 and was previously redirecting a user to a login page as needed when $routeChangeStart fired by calling $location.path(\'/login\'). \r\n\r\nWith 1.3.0 I see the ability to call preventDefault() now (nice addition), but that completely shuts off $location redirects (such as to a login view). $location.path(\'/login\') does work (when preventDefault() hasn\'t been called) but it only changes the browser URL but not the view. What\'s the recommended way of doing a redirect now to another view within $routeChangeStart? \r\n\r\nHere\'s an example of what I\'m trying to do (pretty standard with older versions of Angular):\r\n\r\n```javascript\r\n$rootScope.$on("$routeChangeStart", function (event, next, current) {\r\n    if (next && next.$$route && next.$$route.secure) {\r\n       if (!authService.user.isAuthenticated) {\r\n            //Was calling this but commenting out to keep it simple: authService.redirectToLogin();\r\n\r\n            //Changes URL but not the view - goes to original view that I\'m trying to redirect\r\n           //away from now with 1.3. Fine with it but interested in understanding the \r\n           //"proper" way to do it now so login view gets redirected to.\r\n            $location.path(\'/login\'); \r\n\r\n            //event.preventDefault(); //Nice addition! Can\'t do any redirect when it\'s called though\r\n        }\r\n    }\r\n});\r\n```\r\n\r\nI\'m assuming there\'s a different technique now for this type of task in 1.3.0?\r\n\r\n'
9605,'petebacondarwin',"fix($compile): do not rebind parent bound transclude functions\nDo not rebind parent bound transclude functions passed to the\r\nlink function returned from `$compile`. Change parameter\r\norder of ```publicLinkFn``` to allow parent bound transclude\r\nfunctions to be passed (do not make public yet).\r\n\r\nThe current `$compile` public API documentation indicates that\r\na transclude function may be passed as a second parameter, but\r\nit is not clear that this is not the same function that is given\r\nto directive link functions as the `transcludeFn` parameter. This\r\nparameter must be passed in order to implement, for example,\r\nlazy compilation.\r\n\r\nIn order to pass the `transcludeFn` parameter given to\r\na directive's link function, it must be passed to the\r\nresult of a call to `$compile` (i.e. `publicLinkFn`). Doing so,\r\nhowever, would cause two bugs. First, the passed transclude\r\nfunction would get rebound, improperly changing its scope\r\nfrom its original binding. Second, the `containingScope` would\r\nnot be updated and the wrong `$parent` would be assigned to\r\nthe `transcludedScope` resulting in a memory leak. This patch\r\nfixes both of these issues.\r\n\r\nThis patch does not expose a new public API for `publicLinkFn`,\r\nrather, it leaves this to a later change that better considers\r\nhow that public API should look.\r\n\r\nThanks to @lgalfaso, @tbosch, and @petebacondarwin.\r\n\r\nRelated to #9413"
9599,'IgorMinar','docs(ngIf): fixes font color change\nThe single quote causes the color of the font to change in the example, so I changed the text in the example to account for this.'
9595,'juliemr',"$$testability: Unexpected behaviour of `findBindings` with `exactMatch === true`\n`$$testability.findBindings` with `opt_exactMatch` set to true, [uses a RegExp][1] to match the specified expression against an element's bindings which results into unexpected (wrong?) behaviour.\r\n\r\nThe main problem is that is does not account for characters with special meaning in the context of a regular expression (e.g. `$`, `|` etc), which results in matching errors:\r\n\r\nE.g. trying to match against the binding `$index` will produce the following RegExp:\r\n`/(^|\\s)$index(\\s|\\||$)/` (which will always fail).\r\n\r\nOr trying to match against any binding with a filter will yield unexpected matches (due to the `|` character).\r\nE.g. trying to match against `myValue | transformed` will result into the following RegExp:\r\n`/(^|\\s)myValue | transformed(\\s|\\||$)/`(which would (among other things) erroneously match all bindings starting with `myValue `).\r\n\r\n---\r\nOff the top of my head, either escaping `expression` or using string comparison with some additional checks (for leading/trailing characters) would solve this problem, but I am not sure what path we want to go down.\r\nAlternatively, it should be documented somewhere (in protractor's docs?) that trying to do exact matching by binding has certain limitations.\r\n\r\n[1]: https://github.com/angular/angular.js/blob/85880a64900fa22a61feb926bf52de0965332ca5/src/ng/testability.js#L37"
9594,'mzgol','chore(jqLite): remove leftover attachEvent/detachEvent from tests\n'
9593,'tbosch','test(currencyFilter): fix disambiguous locator warning in e2e tests\nThe e2e tests for the `currencyFilter` issued the following warnings:\r\n> warning: more than one element found for locator by.binding("amount | currency:"USD$"")\r\n\r\nThis commit removes the warnings by locating the elements by ID and not by binding.'
9592,'jeffbcross',"track By no longer working\nHi guys,\r\n\r\nOn v1.3.0-rc.5, `track by` won't set the inner **value** on `<options>` with the desired property. Didn't happen on rc.4.\r\n\r\nSee plnkr:\r\nhttp://plnkr.co/edit/sScmKu?p=preview\r\n\r\n**Reproducable**: always\r\n**Browsers**: independent\r\n**Operating system**: independent\r\n"
9591,'IgorMinar','docs(limitTo): fixed incorrect field type\nThere is no such thing as [type=integer] only number'
9587,'mzgol','fix($browser): account for IE deserializing history.state on each read\nfix($browser): account for IE deserializing history.state on each read\r\n\r\nIE 10-11+ deserialize history.state on every read, causing simple comparisons\r\nagainst history.state always return false. Account for that caching\r\n`history.state` on every hashchange or popstate event.\r\n\r\nAlso:\r\n1. Prevent firing onUrlChange callbacks twice if both popstate and hashchange\r\nevent were fired.\r\n2. Fix the issue of routes sometimes not firing the URL change in all browsers.\r\n\r\nCloses #9587\r\nFixes #9545'
9585,'IgorMinar','refactor(ngAnimate): remove unused function argument\nThis argument is not used inside the function.'
9580,'btford','docs(directive): Adding documentation and example of using a templateUrl function to the directive developer guide.\nAdding documentation and example of using a templateUrl function to the directive developer guide.\r\n\r\nRelated to angular/angular.js#2895'
9579,'tbosch','fix($compile): do not bind twice transclude functions\nDo not double bind transclude functions that are passed to the compiler that were already bound\r\n\r\nCloses #9413'
9575,'tbosch','ngOptions unexpected behavior\nUsing `ng-options` with a string array and binding `ng-model` to a `$resource` does not work as expected. Incorrect option gets selected and a new option matching the model value is added but with a value equal to `? string: value ?`\r\n\r\nRun http://plnkr.co/edit/IKmJfNrjtOTJdUd3d9Qu?p=preview then inspect the select using dev-tools:\r\n```HTML\r\n<select ng-model="model.preferences.language" \r\n        ng-options="v for v in [\'Arabic\',\'English\']" \r\n        class="ng-pristine ng-valid">\r\n\r\n<!-- the added option --> \r\n<option value="? string:English ?"></option>\r\n\r\n<!-- Incorrectly selected option --> \r\n<option value="0" selected="selected">Arabic</option>\r\n\r\n<option value="1">English</option>\r\n\r\n</select>\r\n```\r\n\r\nIssue exists in latest stable version v1.2.26 but not v1.2.25, also reproducable in v1.3.0-rc.5\r\n\r\n\r\n\r\n\r\n'
9571,'IgorMinar',"chore(npm): update npm dependencies\nchore(npm): update npm dependencies\r\n\r\nSome of previous dependencies versions (e.g. Karma) didn't work with\r\nNode 0.11.14, see:\r\nhttps://github.com/karma-runner/karma/pull/1182\r\n\r\nThe only dependencies not updated in this commit are:\r\n\r\n1. grunt-jscs-checker: its\r\nrules have changed a lot so it will require more work to use the newer\r\nversion\r\n2. gulp-jshint: the update breaks docs linting, it requires investigation"
9568,'caitp','fix(parse): dirty checking support for objects with null prototype\nWith this changes, objects initially created with Object.create(null) can be bind to the view. This is because if the valueOf function is not available, it will use Object.valueOf.apply instead'
9565,'caitp','Checkbox 1.2 vs 1.3 Inconsistency\n\r\nFollowing the documentation for input[checkbox], if the values of ngTrueValue and  ngFalseValue are a string, then in the view the values must be in quotes. (See example below.)\r\n\r\n<input type="checkbox" ng-model="foo" ng-true-value="\'active\'" ng-false-value="\'disabled\'">\r\n\r\nWhile the documentation doesn\'t differ between 1.2.25 and 1.3, it in fact behaves differently. In version 1.3 the extra quotes are needed, while for 1.2.25 the extra quotes need to be omitted. The plunk below shows this in action.\r\n\r\nhttp://plnkr.co/edit/9RKpZr55dwyIPi7fhpZj?p=preview'
9563,'IgorMinar','docs($httpBackend): add module declaration for best understanding purposes\nAccording with the Issue #9537. This module declaration in the test is very important. When I started to test in angular I copy and paste this code to see how it works, and I get this `module undefined error`, and just after read some blog posts I figure out that this line is essential for testing your module. So, for best understanding of begginers this can be very helpful.'
9558,'jeffbcross','docs(guide/Working With CSS): add doc for ng-isolate-scope\n'
9557,'juliemr','WIP: add E2E test suite unrelated to docs examples\nThis is ongoing, bear with me while I hack on this :<'
9551,'btford',"docs(tutorial/Tutorial): make it explicit to run npm install from folder with package.json\nI was following instructions and running 'npm install' from default location and getting very different error. Later found on 'stackoverflow' that command must be run from folder that contains package.json' file. Though it my save some time to novice users"
9545,'mzgol',"$location.state problems in 1.3.0-rc.5 \nMy application stores some data in history state object. Before rc.5 version I used history.replaceState method. Now I rewrite my code to use new API: $location.state(obj).replace() \r\n\r\nFor instance:\r\n```\r\n$rootScope.$on('$locationChangeSuccess', function() {\r\n       if(!$location.state())\r\n              $location.state(Math.random()).replace();\r\n});\r\n```\r\n\r\nIt seems works fine, but when I click 'back' browser button (popstate event) - after that application stops responding on any link clicks (routes does not changes). \r\n\r\nAfter investigate the source code I found that condition at angular.js:10905 always falsy\r\n\r\n```\r\nif (initializing || oldUrl !== $location.absUrl() ||\r\n          ($location.$$html5 && $sniffer.history && oldState !== $location.$$state)) {\r\n...\r\n}\r\n```\r\n\r\noldState and $location.$$state are equals after user click on the link\r\n\r\nThis problem in Chrome and FF. IE11 throws an exception after bootstrap:\r\n\r\n```\r\nError: [$rootScope:infdig] 10 $digest() iterations reached. Aborting!\r\nWatchers fired in the last 5 iterations: []\r\nhttp://errors.angularjs.org/1.3.0-rc.5/$rootScope/infdig?p0=10&p1=%5B%5D\r\n   at Scope.prototype.$digest (https://localhost:44300/vendor/angularjs/angular.js:13731:13)\r\n   at Scope.prototype.$apply (https://localhost:44300/vendor/angularjs/angular.js:13955:13)\r\n   at bootstrapApply (https://localhost:44300/vendor/angularjs/angular.js:1486:9)\r\n   at invoke (https://localhost:44300/vendor/angularjs/angular.js:4133:7)\r\n   at doBootstrap (https://localhost:44300/vendor/angularjs/angular.js:1484:5)\r\n   at bootstrap (https://localhost:44300/vendor/angularjs/angular.js:1504:5)\r\n   at Global code (https://localhost:44300/scripts/base/app.js:100:1)\r\nSCRIPT5022: [$rootScope:infdig] 10 $digest() iterations reached. Aborting!\r\nWatchers fired in the last 5 iterations: []\r\nhttp://errors.angularjs.org/1.3.0-rc.5/$rootScope/infdig?p0=10&p1=%5B%5D\r\n```"
9543,'jeffbcross','docs(angular.extend): describe your change...\nMerge sentences'
9542,'jeffbcross','chore(CHANGELOG): remove duplicate breaking change for 1.3.0-rc.5\nThe same breaking change is repeated just a few lines above.'
9533,'jeffbcross','fix(select): add basic track by and select as support\nInstead of throwing an error when using "track by" and "select as" expressions,\r\nngOptions will assume that the track by expression is valid, and will use it to\r\ncompare values.'
9532,'tbosch','Exception thrown for empty 204 HTTP response\nI just upgraded to AngularJS 1.3.0-rc5 and I\'m seeing an exception when $http attempts to handle a REST call response which returns a 204 status code with an empty entity (basically an empty string):\r\n```\r\nSyntaxError: Unexpected end of input\r\n    at Object.parse (native)\r\n    at fromJson (https://localhost:3443/bower_components/angular/angular.js:1103:14)\r\n    at defaultHttpResponseTransform (https://localhost:3443/bower_components/angular/angular.js:8319:18)\r\n    at https://localhost:3443/bower_components/angular/angular.js:8264:12\r\n    at forEach (https://localhost:3443/bower_components/angular/angular.js:335:20)\r\n    at transformData (https://localhost:3443/bower_components/angular/angular.js:8263:3)\r\n    at transformResponse (https://localhost:3443/bower_components/angular/angular.js:8953:17)\r\n    at processQueue (https://localhost:3443/bower_components/angular/angular.js:12642:27)\r\n    at https://localhost:3443/bower_components/angular/angular.js:12658:27\r\n    at Scope.$get.Scope.$eval (https://localhost:3443/bower_components/angular/angular.js:13851:28) \r\n```\r\n\r\nIt looks like the response handling logic was changed so that setting a content type of "application/json" now properly attempts to parse the response as JSON every time. However, if the response is empty the JSON.parse() call fails. I wonder if perhaps a return code of 204 might need some special handling which interprets the returned data as undefined or null and does not attempt to parse the response entity.'
9529,'tbosch',"fix($http): don't run transformData on HEAD methods\n7b6c1d0 created this issue by using `Content-Type` to\r\ndetermine when to run `fromJson`.  Because `HEAD` methods do not contain\r\na body but are supposed to return the `Content-Type` header that would\r\nhave been returned if it was a `GET` this functionality fails.\r\n\r\nCloses #9528 "
9528,'tbosch',"fix($http): don't run transformData on HEAD methods\n7b6c1d0 indadvertantly created this issue by using Content-Type to\r\ndetermine when to run fromJson.  Because HEAD methods do not contain\r\na body but are supposed to return the Content-Type header that would\r\nhave been returned if it was a GET this created a bug in HEAD requests."
9527,'caitp','setup for e2e tests outside of docs\nHi,\r\nright now we sometimes misuse our docs to create examples for edge cases so that we can have e2e tests for those cases, instead of creating very simple examples and testing those.\r\n\r\nLet\'s change our setup so that we can create e2e tests outside of the docs. Here is a first proposal:\r\n\r\nFolder structure:\r\n```\r\ne2e_tests\r\n  templates\r\n    header_jquery.html\r\n    header_jqlite.html\r\n  fixtures\r\n    myFixture.html\r\n    myFixtures.js\r\n  tests\r\n    myTest.js\r\n```\r\n\r\nThe `header_jquery.html` resp `header_jqlite.html` would contain the following:\r\n```\r\n<html>\r\n<head>\r\n  <script src="<path to jquery.js resp jqlite.js>"></script>\r\n  <script src="<path to angular.js>"></script>\r\n</head>\r\n</body>\r\n```\r\n\r\nWe would configure our http server to serve a url like `http://localhost:8000/e2e/myTest.html?jquery` as follows:\r\n* `header_jquery.html`\r\n* + `<script src="myTest.js"></script>` (via naming convention)\r\n* + `myTest.html`\r\n* + `</body></html>`\r\n\r\nWhen we run the tests via protractor we set a configuration variable `env` to either `jquery` or `jqlite` and provide a helper function that returns the url for the html file given the `__filename` of the e2e test using a naming convention.\r\nE.g. within `myTest.js`:\r\n```\r\nbeforeEach(function() {\r\n  browser.get(fixtureFor(__filename)); // -> would result in `http://localhost:8000/e2e/myTest.html?jquery`\r\n});\r\n...\r\n```\r\n\r\nA first good candidate for this would be the e2e test for `ngCsp`.\r\n\r\n@petebacondarwin @caitp What do you think?\r\n/cc @IgorMinar '
9525,'caitp',"refactor($compile): use createMap() rather than Object.create(null)\nI didn't know we had a helper for this previously, but I guess we do :>"
9522,'tbosch','docs($compile): add templateNamespace to directive example\n'
9521,'btford','docs(angular.injector): correct return type\n'
9520,'btford','Minor fixes in $location\nFixes the description of `rewriteLinks` and removes two redundant spaces.\r\n\r\nRelated to #9487.'
9519,'tbosch','docs(migration): Removed link to nonexisting reference\nRemoved a link to a reference that is absent'
9517,'tbosch','Anchor scroll offset\n'
9509,'IgorMinar',"jqLiteOff doesn't remove event handler from DOM correcly, which affects Safari on iOS\nhttps://github.com/angular/angular.js/blob/master/src/jqLite.js#L287\r\njqLiteOff doesn't remove registered event listener from DOM, this affects the behavior of element in Safari on iOS as some event bubbling in Safari depends on whether an element has mouse event handler or not. Please refer to http://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\r\n"
9505,'tbosch','Wiki update needed.\n**in FAQ item 17**\r\n17. How can I view the scope from the DOM inspector?\r\nGoogle Chrome: install the Batarang extension, inspect a DOM element, then type $scope in the console\r\nFirefox / Firebug: inspect a DOM element, then type angular.element($0).scope() (or $($0).scope()) in the console\r\n**Need to add**\r\nIE 10+: Using the F12 tool, inspect a DOM element, then type angular.element($0).scope() (or $($0).scope()) in the console. \r\n\r\nThe Firefox/Firebug technique works beautifully in IE10+'
9503,'jeffbcross','docs(select): fix formatting of and placement of selectAs/trackAs explanation\nThe select element was being rendered as an html element, and the whole note was being grouped in the table displaying the comprehension expression information.'
9501,'tbosch','intput type=[date,time,dateTimeLocal...] and ISO-8601 String\nI use the json to populate the model and I return ISO-8601 date String and on 1.3.0.rc4 I have no call new Date(json.dateString). \r\nWhy not recognize ISO-8601 String and convert it to Date automatically?\r\n'
9500,'tbosch','ngModelOptions in conjunction with ngBlur\nWhen setting ```ng-model-options="{updateOn:\'blur\'}"``` and calling a method on ```ng-blur="myUpdateMethod()" ``` the model doesn\'t get updated in time before the method is called. Not sure if this expected behavior?\r\n\r\nExample: http://plnkr.co/edit/4Bhp2wbCwAlC8WN7IFCm?p=preview'
9497,'mzgol','chore($sniffer): Remove $sniffer.hashchange\nThe hashchange event is not supported only in ancient browsers like Android<2.2\r\nand IE<8. Angular never really supported IE7 and in 1.3 where support for IE8\r\nis dropped it makes even less sense to check for hashchange support.'
9496,'mzgol',"chore($sniffer): Remove remnants of separate documentMode handling\nSince msie is now set to document.documentMode, it's not necessary to keep\r\nthe documentMode in a separate property."
9493,'IgorMinar','Fix issues with ngShow / ngHide animations\nfix($animate): ensure hidden elements with ngShow/ngHide stay hidden during animations\r\n\r\nPrior to this fix if an element that contained ng-show or ng-hide was in its hidden state\r\nthen any other animation run on the same element would cause the animation to appear despite\r\nthe element itself already being hidden. This patch ensures that NO animations are visible\r\neven if the element is set as hidden.\r\n\r\nCloses #9103\r\n'
9489,'tbosch','refactor($parse): remove dead code\nThese operators appear to have never actually been supported. This will have one minor side effect where parsing expressions containing `^` and `&` operators will now throw from the lexer ($parse/lexerr) instead of parser ($parse/syntax).'
9487,'IgorMinar','feat($location): allow automatic rewriting of links to be disabled\nCurrently, when the location provider is set to html5 mode, all links\r\non the page are hijacked and automatically rewritten. While this may be\r\ndesirable behavior in some cases (such as using ngRoute), not all cases\r\nwhere html5 mode are enabled imply the desire for this behavior.\r\n\r\nOne example would be an application using the\r\n[ui-router](https://github.com/angular-ui/ui-router) library, with some\r\npages that exist outside of angular. Links that are meant to go through\r\nthe router use the `ui-sref` directive, so the rewrite behavior is\r\nunnecessary.\r\n\r\nCloses #5487'
9482,'pkozlowski-opensource','refactor($location) Remove unused variables\nThese were left around in 736c8fbbae57a209f4ba570e38cc3bd0745a9569'
9481,'tbosch','fix(browserTrigger): declare msie variable\nThe variable `msie` was used in strict mode without declaring it first,\r\ncausing both jshint and the module tests to fail. This change fixes the\r\nproblem.'
9480,'btford','docs(ngIf): updates out-of-date url\nThe original page has moved, so the url has been updated to point towards the correct location.'
9477,'btford',"docs($compile): Added: template is ignored with transclude: 'element'\n"
9475,'btford','docs(ngAria): correct wording and add resource\n'
9474,'jeffbcross','fix(jqLite): fix add/remove class in IE9\nIE is not my favorite web browser.\r\n\r\nthis is my take on #5694 '
9468,'tbosch','docs($compileProvider): Add a link to the in-depth Directive reference\nGiven that this critical reference is now named $compile, it is difficult to find via search. A link to it from the directiveFactory param description will likely prove helpful.'
9461,'petebacondarwin','Anchor scroll offset\n'
9460,'jeffbcross','$resource abort the ajax request\nI want to abort previous ajax call and perform last one.\r\n\r\nfunction filterEvents(search){\r\n...\r\nresource.abort();\r\n  resource = Event.query(queryOptions, function(data){\r\n});\r\n...\r\n}'
9431,'lgalfaso','refactor($parse): separate tokenizing vs parsing more\nFixes `a.b` and `a .b` generating different getterFns (which was mentioned a while back in https://github.com/angular/angular.js/pull/8901#commitcomment-7691290)\r\nFixes #9893 (`{\'\': ...}` being converted to `{"\'\'": ...}`)\r\nFixes `{.: ...}` parsing as `{\'.\': ...}` instead of throwing\r\nFixes #9131 (similar to how #9229 fixes it)\r\n\r\nAlso simplifies (imo) a few areas in parse.js. For example...\r\n* tokens no longer have any `fn` (which had 2 meanings before)\r\n* token `text` is always the token text (previously it was the raw value for strings/numbers)\r\n* `.consume()` is used in a few more places instead of `.expect()` and will output a "Unexpected end of expression" instead of `.expect()` returning false and failing later\r\n* the tokenizer no longer tries to figure out if a ".identifier" is a method invocation or not, that\'s now in the parser and much shorter'
9421,'jeffbcross','fix(select): manage select controller options correctly\nCloses #9418'
9420,'tbosch','docs(ngCsp): Universal Windows Apps added\nIt is necessary for this directive to be enabled when developing Universal Windows Apps written in JavaScript using Angular'
9419,'IgorMinar','fix(select): make ngOptions support selectAs and trackBy together\nThis commit implements a function, "getSelected()", that takes the\r\nselectAs expression into account when determining if a particular\r\noption is selected or not. Previously, the selectAs part of the\r\nngOptions comprehension expression was being ignored.\r\n\r\nFixes #6564'
9418,'btford',"Wrong option removed from select controller\nHere's a plunkr that reproduces the issue: http://plnkr.co/edit/CZIUHBrqlz7CS93lbZiH?p=preview\r\n\r\nBasically, the problem is that the `render()` removes the wrong option from the select controller since it assumes that the option that was removed has the same label as the excessive option in `existingOptions`, but this is only correct if the option was popped from the end of the array.\r\n\r\nThis was introduced in https://github.com/angular/angular.js/commit/2bcd02dc1a6b28b357d47c83be3bed5c9a38417c\r\n\r\nI'm looking into how to fix it, but I'd appreciate any suggestions.\r\n/cc @btford \r\n"
9417,'btford','Update ngAria documentation\nTo aid developers using the `ngAria` module, this change includes updated wording and additional implementation details in the developer guide. I anticipate it will evolve as we identify ways to improve the module and add features to it. But this will hopefully help people looking to use it now.\r\n\r\ncc @btford '
9415,'tbosch','fix($compile): use the correct namespace for transcluded svg elements\nThis fixes the case when a directive that uses `templateUrl`\r\nis used somewhere in the children \r\nof a transcluding directive like `ng-repeat`.\r\n\r\nFixes #9344\r\nRelated to #8808'
9413,'tbosch','Wrong scope used after passing transclude function to $compile\nI\'ve run into something unexpected as demonstrated in this [plunker](http://plnkr.co/edit/LTAbdvt1Az1mG362yFy3?p=preview). Specifically, I believe that transcluded elements are being linked to the wrong scope after a manual call to $compile that passes a transclude function. If the transclude function is called on its own -- the cloned elements are linked to the proper scope -- if it\'s passed to ```$compile``` and then the resulting link function is called, the wrong scope is used.\r\n\r\nThe plunker creates two directives, "lazy-compile" that lazy compiles its contents when a certain "trigger" variable is made truthy. It does this by, during its compilation phase, removing its contents and storing them in the template cache (so there\'s only ever one copy). Then, it sets up a bind-once watch for the trigger variable. Once the variable is true, the contents are fetched from the cache, cloned, re-appended to the element, and then ```$compile``` is called on them, passing any transclude function, if defined.\r\n\r\nThe second directive, "uses-transclude", is just a widget that uses transclusion and the lazy compilation directive in its template.\r\n\r\nOn the main page, when a link is clicked, the lazy compilation is triggered. This works properly in the plunker -- but only because of an ugly hack that you can see in ```script.js```. The code there has some comments about what\'s going on. Essentially, if ```$compile``` is called and the transclude function is passed to it, when you run the resulting link function the transcluded elements are linked to the wrong scope. However, if you call the transclude function directly -- the cloned elements are linked to the proper scope. I would expect the same scope to be used in both cases. So, to resolve this problem, the lazy compile directive calls the transclude function itself, saves the scope\'s parent (prototypical parent, not ```$parent```) from the cloned elements, and then rewrites the transclude function to ensure this same parent scope is used when the transclude function is called later in ```$compile```.\r\n\r\nThe plunker prints out the "wrong scope" and the "right scope" via ```console.log``` once the compilation link is clicked.\r\n\r\nWhy are the scopes not the same when doing ```$compile(el, transcludeFn)(scope)``` vs. ```transcludeFn(function(clone) {})```? Shouldn\'t the proper scope travel along with the transclude function closure and always be used regardless of where the content is inserted?\r\n'
9410,'caitp',"Fixes bug when $location.search() is not returning actual search part of current url.\nThe issue appears when we set $location.search() with some object and after that change this object's properties, like that:\r\n```javascript\r\nvar obj = {foo: 'bar'};\r\n$location.search(obj); // now url is set to '#?foo=bar'\r\nobj.foo = 'boo';\r\nvar currentUrlObj = $location.search();\r\n// current location is still '#?foo=bar' \r\n// while currentUrlObj is telling that current url object is {foo: 'boo'}\r\n// which isn't correct\r\n```\r\nThere's a little demo onJSBin:\r\nhttp://jsbin.com/rekana/5/edit?js,output\r\nAnd another JSBin with behaviour fixed on consumer's side:\r\nhttp://jsbin.com/rekana/1/edit?js,output\r\nI'm sure it's a bad idea to make someone think of that on the consumer's side."
9403,'petebacondarwin','fix(orderBy): sort by identity if no predicate is given\nThis implementation handles all the various corner cases more consistently.\r\n\r\nCloses #5847\r\nCloses #4579'
9395,'tbosch','chore(release): add script to unpublish a release\nso you can easily redo it'
9393,'IgorMinar',"fix($anchorScroll): don't scroll to top when initializing and location h...\n...ash is empty\r\n\r\nCloses #8848"
9385,'btford',"Added a more appropriate title to the page above the 'alert' box. \nAdded a more appropriate title to the page above the 'alert' box. \r\n\r\nThis also frees up space for the 'Improve this Doc' button displayed on this page: https://docs.angularjs.org/guide/compiler "
9378,'btford','refactor(publish): fixes url\nThis was originally in #9255, but I accidently closed the pr trying fix the cla error.'
9376,'btford','chore(npm): publish artifacts to npm\nNote that there are still a few pending tasks before this can land, namely getting permissions for all of the package names on npm:\r\n\r\n* ~~[angular](https://www.npmjs.org/package/angular)~~ – got it. Thanks @bclinkinbeard!\r\n* ~~[angular-animate](https://www.npmjs.org/package/angular-animate)~~ – got it. thanks @pitbeast!\r\n* ~~[angular-cookies](https://www.npmjs.org/package/angular-cookies)~~ – got it. Thanks @petermelias!\r\n* ~~[angular-mocks](https://www.npmjs.org/package/angular-mocks)~~ – got it. Thanks @zizzamia!\r\n* ~~[angular-route](https://www.npmjs.org/package/angular-route)~~ – got it. Thanks @mljsimone!\r\n* ~~[angular-resource](https://www.npmjs.org/package/angular-resource)~~ – got it. Thanks @roylines!\r\n* ~~[angular-sanitize](https://www.npmjs.org/package/angular-sanitize)~~ – got it. Thanks @akalinovski!\r\n\r\nIf you own one of these packages, you can help by adding user "angularcore" to the package\r\n\r\n### unclaimed: \r\n* angular-aria\r\n* angular-i18n\r\n* angular-loader\r\n* angular-scenario\r\n* angular-touch\r\n* angular-messages\r\n\r\n~~I also still need to add `package.json` for each `bower-angular-*` repo (since that\'s how we\'ll be publishing these artifacts).~~ done!\r\n\r\nCloses #2877 \r\n'
9371,'petebacondarwin','ANCHOR SCROLL: WIP - feat($anchorScroll): add support for configurable scroll offset\nAdd support for a configurable scroll offset to $anchorScrollProvider.\r\nThe offset is expressed in pixels and can be specified either as a fixed value or as a function that returns the offset it pixels dynamically.\r\n(This is a POC and a WIP: no docs, no tests)\r\n\r\nRelated to #9368\r\n\r\nCloses #2070, #9360'
9369,'caitp','bind perf\nSpeeds up chrome with ~10% firefox by ~5%'
9368,'IgorMinar','ANCHOR SCROLL: chore(docs): add directive to pad heading anchors\nCloses #2070\r\nCloses #9360'
9367,'tbosch','docs(*): fix dangling links\nFix many dangling links'
9360,'petebacondarwin',"ANCHOR SCROLL: docs app: adjust scroll offset to account for header\ngo to https://docs.angularjs.org/api/ng/service/$animate#removeClass and you'll see that the scroll position is not right because it doesn't account for the app header.\r\n\r\nwe could use the solution described here to fix this: https://github.com/angular/angular.js/issues/2070#issuecomment-57405205"
9358,'tbosch','fix(input): register builtin parsers/formatters before anyone else\nPreviously, builtin parsers/formatters for e.g. `input[date]`\r\nor `input[number]` were added in the post linking phase to `ngModelController`,\r\nwhich in most cases was after a custom formatter/parser was registered.\r\n\r\nThis commit registers builtin parsers/formatters already\r\nin the pre linking phase. With that builtin \r\nparsers run first, and builtin formatters run last.\r\n\r\nCloses #9218'
9356,'caitp','refactor: remove the remaining IE8 code bits from the codebase\n'
9355,'IgorMinar',"refactor(ngView): remove previousElement bookkeeping\nit's unnecessary and inconsistent (because finishing animations reset  we see situations\r\nwhere not previousElement is not always removed and more than one leave animation is going on at the same time).\r\n\r\nCloses #7606"
9354,'jeffbcross','[[DUPE of 8975 for Travis]]\n'
9352,'petebacondarwin','Document Scope#$destroy requirement in $transclude\nsee https://github.com/angular/angular.js/pull/9281#issuecomment-57378194'
9351,'jeffbcross','docs($q): Implement the same example for both usages\nThe current documentation has a `return` in the middle of nowhere and somewhat complicates the example with unnecessary code. This implements the same code as in the example for the other way of using $q in order to simplify the differences between them.'
9350,'btford','Document controller interdependency limitation\nDocument case where controllers cannot depend on each other'
9344,'tbosch','When using svg directive(wrapped in another svg element) with ngRepeat, the newly added element is not replaced with the directive template\nIf the svg directive is wrapped in another svg element like this:\r\n```html\r\n<g ng-repeat="rect in rects">\r\n    <my-rect index=$index></my-rect>  \r\n</g>\r\n```\r\nThe newly added element is not replaced with the directive template. Only happens when the template is loaded from a separate file. Maybe related to #8808 \r\n[http://plnkr.co/edit/ZFBWiLMP4uTF67rkf2ou?p=preview](http://plnkr.co/edit/ZFBWiLMP4uTF67rkf2ou?p=preview)'
9340,'btford','docs(guide/HTML Compiler): change draggable span to block\nThe draggable example does not work as expected in Chrome (37.0.2062.124 m). The span disappears when dragged beyond what appears to be a small area. Changing the span to a block element (with a width of 65px) resolves this issue.\r\nAn alternative solution would be to change the span to a div.'
9335,'btford','docs($compile): add missing header\nWithout this header, it looked like this example is part of the section about the attributes object.'
9324,'btford','docs(Custom directives to access DOM): improve readability\nWhen I first read the "Custom directives to access DOM"  I thought the wording was a little confusing.\r\n\r\nI still dislike the wording "artifacts that access the DOM are hard to test" because tools like Protractor makes it pretty easy. Perhaps a better explanation would somehow explain that DOM manipulation outside of directives creates tight coupling that decreases testability, which is obviously undesirable.  Is it worth trying to include a sentence like this, or is the current definition sufficient?'
9322,'IgorMinar','test(ngMock.$httpBackend): add tests for the existence of `when` shortcut methods\n'
9318,'IgorMinar',"docs($exceptionHandler): add a note about cases when exceptions are not delegated...\n...to the $exceptionHandler\r\n\r\nAdd a note in $exceptionHandler's documentation about cases when exceptions are not delegated to the\r\n$exceptionHandler, because they are executed outside of the Angular context. Most notable such\r\ncases being the DOM event listeners registered using jqLite's/jQuery's on/bind methods.\r\n\r\nCloses #7909"
9316,'IgorMinar','test(ngRequired): add some tests for ngRequired\n'
9315,'IgorMinar','fix(formController): remove scope reference when form is destroyed\n'
9313,'IgorMinar','docs(ngMock.$log): fix typos and link texts\n'
9309,'jeffbcross','chore(e2e): bump protractor to version 1.3.1\n'
9307,'jeffbcross','Update directive.ngdoc\nngRoute is not a part of ng core anymore.'
9302,'jeffbcross','Update compiler.ngdoc with minor fixes\nMinor changes to grammar. Changed sentence "But the declarative language is also limited, since it does not allow you to teach the browser new syntax." to now read "However the declarative language is also limited, as it does not allow you to teach the browser new\r\nsyntax." However is a less informal start to a sentence, and replacing "since" correctly references extent/degree rather than comparison of time.'
9290,'btford','fix(select): Add exception for unsupported ngOptions use case\nngOptions introduced `track by` in c32a859bdb93699cc080f9affed4bcff63005a64.\r\nUsing `track by` puts constraints on the value you can use in the interpolation\r\nexpression in ngOptions. This patch adds an exception\r\nif you use ngOptions in an unsupported way.\r\n\r\nPart 2 of the split of angular/angular.js#8544 as requested by @btford '
9289,'jeffbcross','docs(select): Clarify documentation for ngOptions\nngOptions introduced `track by` in c32a859bdb93699cc080f9affed4bcff63005a64.\r\nUsing `track by` puts constraints on the value you can use in the interpolation\r\nexpression in ngOptions. This patch documents this.\r\n\r\nCloses angular/angular.js#6564\r\n\r\nPart 1 of the split of angular/angular.js#8544 as requested by @btford '
9283,'IgorMinar','fix(ngAnimate): defer DOM operations for changing classes to postDigest\nWhen ngAnimate is used, it will defer changes to classes until postDigest.\nPreviously, AngularJS (when ngAnimate is not loaded) would always immediately\nperform these DOM operations.\n\nNow, even when the ngAnimate module is not used, if $rootScope is in the midst\nof a digest, class manipulation is deferred. This helps reduce jank in\nbrowsers such as IE11.\n\n/CC @tbosch --- alternative/more general fix here\n\nCloses #8234\nCloses #9263'
9281,'tbosch','TRANSCLUDE MEMORY LEAK: fix($compile): connect transclude scopes to their containing scope to prevent memory leaks\n**This Pull Request fixes memory leaks caused by transcluded scopes not being destroyed when their DOM container is destroyed. See #9095**\r\n\r\nTranscluded scopes are now connected to the scope in which they are created via their `$parent`\r\nproperty. This means that they will be automatically destroyed when their "containing" scope is\r\ndestroyed, without having to resort to listening for a `$destroy` event on various DOM elements\r\nor other scopes.\r\n\r\nPreviously, transclude scope not only inherited prototypically from the scope from which they were\r\ntranscluded but they were also still owned by that "outer" scope. This meant that there were\r\nscenarios where the "real" container scope/element was destroyed but the transclude scope was not,\r\nleading to memory leaks.\r\n\r\nThe original strategy for dealing with this was to attach a `$destroy` event handler to the DOM\r\nelements in the transcluded content, so that if the elements were removed from the DOM then their\r\nassociated transcluded scope would be destroyed.\r\n\r\nThis didn\'t work for transclude contents that didn\'t contain any elements - most importantly in\r\nthe case of the transclude content containing an element transclude directive at its root, since\r\nthe compiler swaps out this element for a comment before a destroy handler could be attached.\r\n\r\nBREAKING CHANGE:\r\n\r\n`$transclude` functions no longer attach `$destroy` event handlers to the transcluded content,\r\nand so the associated transclude scope will not automatically be destroyed if you remove a\r\ntranscluded element from the DOM using direct DOM manipulation such as the jquery `remove()`\r\nmethod.\r\n\r\nIf you want to explicitly remove DOM elements inside your directive that have been compiled, and so\r\npotentially contain child (and transcluded) scopes, then it is your responsibility to get hold of\r\nthe scope and destroy it at the same time.\r\n\r\nThe suggested approach is to create a new child scope of your own around any DOM elements that you\r\nwish to manipulate in this way and destroy those scopes if you remove their contents - any child\r\nscopes will then be destroyed and cleaned up automatically.\r\n\r\nNote that all the built-in directives that manipulate the DOM (ngIf, ngRepeat, ngSwitch, etc)\r\nalready follow this best practice, so if you only use these for manipulating the DOM then you\r\ndo not have to worry about this change.\r\n\r\nCloses #9095'
9277,'jeffbcross','fix(input): format as string before running minlength/maxlength formatters\nPreviously, minlength/maxlength would not work correctly when dealing with\nnon-string model values.\n\nA better fix for this has already been implemented in 1.3, but unfortunately\nimplementing that fix in 1.2 is a bit harder as it requires a number of\ncommits to be backported in order to solve the problem correctly.\n\nCloses #5936'
9270,'jeffbcross','Provide "include" function to application.\nAngular just support one ng-app per page, and this causes problems in environments that uses backend template engines to compose the view. \r\nThe workaround is declaring one ng-app in the html tag and share this among all template parts, and then for each different "application" inside of the scope of this main application it needs to \r\n\r\n------------------------\r\nJS for main application:\r\n```JS\r\nvar mainApp = angular.module(\'mainApp\', []);\r\n```\r\n------------------------\r\nJS for child application:\r\n```JS\r\nvar mainApp = angular.module(\'mainApp\');\r\nvar childApp = angular.module(\'childApp\', [<dependencies>]);\r\nmainApp.requires.concat(\'childApp\');  // add the child to the main dependencies\r\n```\r\n\r\nIt would be nice to allow multiple ng-apps per page or at least provide some better way to add a dependency to a module after it has already been declared. Something like:\r\n```JS\r\nvar mainApp = angular.module(\'mainApp\');\r\nvar childApp = angular.module(\'childApp\', [<dependencies>]);\r\nmainApp.include([\'childApp\']);  // add the child to the main dependencies, using convenient function\r\n```'
9268,'jeffbcross',"Further clarify terminal parameter\nClarifies that the terminal parameter will also exclude execution of any directives and expressions in the directive's own template."
9263,'tbosch','fix(ngModel): minimize jank when toggling CSS classes during validation\nPreviously, class toggling would always occur immediately. This causes\nproblems in cases where class changes happen super frequently, and can result\nin flickering in some browsers which do not handle this jank well.\n\n/cc @matsko please help review this! It is very much your area of expertise!\n\nCloses #8234'
9262,'btford','fix(select): make ctrl.hasOption method consistent\nthis is a WIP\r\n\r\nCloses #8761'
9260,'tbosch',"fix(ngModel): don't parse before validating if viewValue is undefined\nPrevents unintentionally reporting an undefined view value as a parse error...\n\nCloses #9106"
9257,'IgorMinar',"docs(tutorial/step_11): Correct the summary to match the step's content\n"
9251,'IgorMinar','docs($resource)\nclarify the meaning of `@` in `paramDefaults` for non-GET operations'
9237,'btford','fix($browser): handle async href on url change in <=IE9\nFixes #9235 \r\n\r\nAffects 1.2.25 and 1.3.x.'
9235,'btford',"html5mode on IE9 leads to redirect loop behavior on every digest during initial page load\n*Edit: Fixed URL in step 1.*\r\n\r\nThis can lead to unresponsive pages as the browser attempts to make N number of requests during page load where N is the number of digests that occur after setting up `$location`.\r\n\r\nNote that this is also occurring on angularjs.org. It's just less severe because there are few digests that occur after page load. As such, it maybe related to #6820 .\r\n\r\n**Reproducible:** always\r\n**Browsers:** IE9 (Most probably affects IE7 and IE8 too, but I haven't tested it)\r\n**Affects:** Regression from AngularJS 1.2.24 and 1.3.0-RC.0\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Open IE9. Set it up to preserve logs across navigation (Tools -> Clear Entries on Navigate -> Uncheck Console and Network)\r\nGo to the following page:\r\nhttp://run.plnkr.co/plunks/EHfYEeONdOFa6Xu4owUx/test/index.html\r\n2. Observe that the logs show `Navigating to <plunker>/#/test/index.html` the same page multiple times.\r\n\r\nAs seen here, IE is actually making many requests that are aborted (possibly DDoSing some websites, depending on the number of digest cycles):\r\n![screen shot 2014-09-23 at 4 30 44 pm](https://cloud.githubusercontent.com/assets/132584/4381687/d4520d74-4379-11e4-9d63-6953ceaba445.png)\r\n\r\n**Expected behavior:**\r\n\r\n- Navigate to hashbang URL *once* and wait for it to load.\r\n\r\n**Source Plunker:**\r\nhttp://plnkr.co/edit/EHfYEeONdOFa6Xu4owUx?p=preview\r\n\r\nThis is caused by 2ece4d0347a8a18d4d35993bb882ed6b5b24266c (#6976), since `fireUrlChange` sets `newLocation` to null ([on this line](https://github.com/angular/angular.js/blob/2ece4d0347a8a18d4d35993bb882ed6b5b24266c/src/ng/browser.js#L186)) and it doesn't account for the fact that setting href is async on IE9.\r\n\r\nAs setting `location.href` isn't synchronous on IE9, each digest cycle is actually clearing the locationUrl state (that's used to save the navigating state for IE9) so the digest initiates another change to location.href on every digest and the browser actually sends another request instead of continuing to navigate to the same href set previously (in the previous digest cycle)."
9226,'IgorMinar','docs(ngRepeat): fix wrong paragraph order\nThese paragraphes are related to `track by`, not to `as alias`.'
9225,'IgorMinar','fix($browser): do not decode cookies that do not appear encoded\nCloses #9211'
9221,'btford','perf(map): use Array.prototype.map if available\nThis is a slightly more conservative take on #9067.'
9218,'tbosch','Document $formatters v.1.2.0 -> v.1.3.0:  type of `value` parameter is now a string, not the bound model type\nv.1.3.0-rc.2 broke my zFloat directive which worked fine in v.1.2.0.\r\n\r\nTraced to a change in the value passed to a $formatter. It used to be the data-bound value of the model; in 1.3.0, the value is a string.\r\n\r\nHere\'s the plunker: http://plnkr.co/edit/E2HgF7ASNWIdwsvzs5G0?p=preview\r\n\r\nHere\'s the pertinent code fragment from the directive:\r\n\r\n    return {\r\n        restrict: \'A\',\r\n        require: \'ngModel\',\r\n\r\n        link: function(scope, elm, attr, ngModelCtrl) {\r\n            if (attr.type === \'radio\' || attr.type === \'checkbox\') return;\r\n            ngModelCtrl.$formatters.push(equivalenceFormatter);\r\n       \r\n            function equivalenceFormatter(value) { // 1.2.0: integer; 1.3.0: string\r\n               var viewValue = ngModelCtrl.$viewValue // could have used \'elm.val()\'\r\n               return (value === +viewValue) ? viewValue : value;\r\n            }\r\n        }\r\n\r\n\r\nWhere the model value was integer 123 in v.1.2.0, it is now the string "123".\r\n\r\nOf course the conditional `value === +viewValue` fails in v.1.3.0 because `"123" !== 123`\r\n\r\nIs that intentional? Please call that out in release notes.\r\n\r\nMeanwhile ... fortunately ... a workaround is available for me. I\'ll just change the conditional to `+value === +viewValue` which will be compatible with both versions. You may see that in the Plunker by the time you look.\r\n\r\nToo bad for everyone else who didn\'t see this coming.'
9217,'caitp',"feat($location): add ability to opt-out of <base/> tag in html5Mode\nThis feature allows disabling Angular's requirement of using a <base/> tag\r\nwhen using location in html5Mode, for applications that do not require\r\nusing $location in html5Mode in IE9. To accomplish this, a getter/setter method \r\nwas added to $locationProvider called baseOptOut, which accepts a single boolean \r\nparameter. The method is semantically similar to html5Mode() (returns this if\r\ncalled with bool param, otherwise returns current value)."
9215,'caitp','fix($compile): remove comment nodes from templates before asserting single root node\nThe compiler will no longer throw if a directive template contains comment\nnodes in addition to a single root node.\n\nThe comment nodes will be removed before processing.\n\nCloses #9212'
9214,'petebacondarwin','test(attrs): remove invalid test from e2e suite\nThis test is incorrectly acting as documentation that the anchor tag directive\nwill preventDefault on clicks on elements with a name. This has not been the\ncase ever since f3de5b6eac90baf649506072162f36dbc6d2f028\n\nCloses #6554'
9212,'caitp','Comment tags are counted as part of the "exactly one root element" for templates for directives with replace mode\nTemplates for directives with replace mode to `true` can only have one root element, otherwise [this error](https://docs.angularjs.org/error/$compile/tplrt) occurs. However, comment tags are also counted in that check. So for example, the following:\r\n\r\n    app.directive("superman", function() {\r\n      return {\r\n        restrict: "E",\r\n        template: "<!-- Superman directive --><div>Here I am to save the day</div>",\r\n        replace: true\r\n      }\r\n    })\r\n\r\nhttp://codepen.io/anon/pen/bazyI\r\n\r\nCauses an error. Maybe this will be considered a won\'t-fix but our designer guide couldn\'t comprehend why the template suddenly stopped working when he added a comment. Perhaps comment tags should be ignored from that count.'
9210,'caitp','fix($injector): throw when factory $get method does not return a value\nBREAKING CHANGE:\n\nPreviously, not returning a value would fail silently, and an application\ntrying to inject the value owuld inject an undefined value, quite possibly\nleading to a TypeError. Now, the application will fail entirely, and a reason\nwill be given.\n\nCloses #4575'
9206,'btford','Fix broken link\n'
9203,'petebacondarwin','chore(docs): speed up app initialization\nIt takes an unreasonable amount of time for the docs app to initialize. On a desktop we are talking up to 4 secs - on a phone or lower power machine it can be up to 20 secs!\r\n\r\nSome investigation:\r\n\r\n* we need to be able to provide a number of the larger files zipped up if the browser supports it - this primarily involves configuring the server\r\n* we need to provide better cache expiration values to allow browsers to cache more effectively - this involves configuring the server but may also require dgeni (or some other tool) to append cache busting extras onto the file paths\r\n* we are downloading a large file (pages-data.js) containing mappings of page paths to partials (and titles). In reality a small configuration change to dgeni-packages and we could have a straightforward one-to-one mapping between page paths and their partials. If the partial also then contained the page title and breadcrumb information then we would not need to have all this large file.\r\n* the lunr full text search is the main cause of the delay in loading - it is building the search index every time from information in the pages-data.js file. We need a way to optimize this and/or move it from the main initial rendering thread, since the rendering is blocking until this has completed.\r\n\r\n### Lunr Search\r\n\r\nThe search index is generated on page load from a set of terms in the pages-data.js file. This file is large (~470Kb) and currently the app is blocking on this downloading. The search index generation takes a number of seconds and the JavaScript loop is blocked while this is happening.  Currently this is happening at application bootstrap.\r\n\r\n#### Load the data asynchronously\r\nThe obvious initial idea is to move the data into a file that is loaded via `$http` after the application has bootstrapped, since this will allow the initial page to render while we wait for the data to arrive.\r\n\r\n#### Process the data in a WebWorker\r\nSecond, since the actual processing takes some time, we could consider moving the processing into a WebWorker for browsers that support it.\r\n\r\n#### Cache the data in LocalStorage\r\nFinally, we could consider caching the index in the LocalStorage, if available. This would require us to be able to work out how to invalidate the cache when the index is stale. Perhaps we should just store the index keyed on the version of Angular. We could use an LRU cache algorithm.'
9199,'petebacondarwin',"SCOPE DESTRUCTION: Leak when asynchronously continuing the linking of directives on scopes that are already destroyed\nWhen a directive uses a `templateUrl`, this directive is inside an `ng-switch` or an `ng-if` and the following events happen in this specific order\r\n\r\n* The html of the `ng-switch` starts it's compilation\r\n* The directive inside the `ng-switch` starts it's compilation, the template is requested from the server\r\n* The synchronous part of the compilation ends\r\n* The condition on the `ng-switch` changes so the directive should be displayed\r\n* ng-switch transcludes the content of the `ng-switch-when` (only what it can as the template did not finish loading)\r\n* The expression at `ng-switch` changes so the directive should not be displayed\r\n* ng-switch destroys the scope\r\n* The template finishes loading, the scope (even when it is already destroyed) is added to the `element.data` (here is where we have the leak)\r\n\r\nHere is a plunker that shows this\r\nhttp://plnkr.co/edit/tNMYYHgoebX1Vx0hWZAb?p=preview\r\n\r\n\r\nNote: This issue is based on a modification of #9197"
9197,'petebacondarwin','SCOPE DESTRUCTION: Directive scope is never destroyed if immediately switched out and it has templateUrl.\nWe have a directive which uses `templateUrl` that is rendered within a `ngSwitch`. There is a scenario where on page load the directive is rendered, but then immediately some conditions change causing `ngSwitch` to remove the directive from page. I found that in that case the directive\'s scope never gets destroyed.\r\n\r\nA Plunker demo is available here - http://plnkr.co/edit/QYnUKQrHA4uivJifsYne?p=preview\r\n\r\nIn the demo open browser\'s JS console. Notice that you will only see \'>>>Created\' message, but no \'>>>Destroyed\'. This bug happens only when the directive uses `templateUrl`. If you change the above demo code to use `template` instead then notice the bug is gone.\r\n\r\nThe html snippet is:-\r\n\r\n\t<body ng-controller="Main">\r\n\t<div>\r\n\t  <div ng-switch="code">\r\n\t    <div ng-switch-when="red">\r\n\t      <red></red>\r\n\t    </div>\r\n\t  </div>\r\n\t</div>\r\n\t</body>\r\n \r\nThe controller code is:-\r\n\r\n\tcontroller(\'Main\', function ($scope, $timeout) {\r\n\t  $scope.code = \'red\';\r\n\t  $timeout(function () {\r\n\t    $scope.code = \'blue\';\r\n\t  })\r\n\t})\r\n\r\nSo as soon as the controller loads, `$scope.code` is set to \'blue\' in next digest cycle, causing the directive `red` to appear momentarily.\r\n\r\nThe directive code is:-\r\n\r\n    directive(\'red\', function () {\r\n      return {\r\n        restrict: \'E\',\r\n        replace: true,\r\n        templateUrl: \'red.html\',\r\n        scope: {},\r\n        link: function (scope) {\r\n          console.log(\'>>>Created\');\r\n          scope.$on(\'$destroy\', function (event) {\r\n            console.log(\'>>>Destroyed\');\r\n          })\r\n        }\r\n      };\r\n    })\r\n\r\nIf I use `template` instead of `templateUrl`, then `$destroy` is called. The `replace: true` or isolated scope are not necessary to replicate this bug.\r\n'
9186,'jeffbcross','chore($http): disable flaky JSONP test\nSee #9185'
9183,'btford','refactor(ngAria): bind to ngModel\n'
9181,'btford','docs(tutorial): update to tutorial step_02 doc\n- wrap ./test/unit/controllerSpec.js in markdown code `./test/unit/controllerSpec.js`\r\n- wrap ng-repeat in markdown code `ng-repeat`'
9175,'caitp',"$timeout no longer causes a digest\nSince https://github.com/angular/angular.js/commit/19b6b3433ae9f8523cbc72ae97dbcf0c06960148 $timeout no longer causes a digest - because of this the examples in this page no longer work. I've updated them using the suggested workaround."
9167,'btford','docs: update Triaging.md formatting\n\r\nFix line spacing on the Triaging.md to make it consistent. See below for image of some of the line spacing issues fixed:\r\n\r\n![screen shot 2014-09-18 at 9 50 07 pm](https://cloud.githubusercontent.com/assets/7344640/4330910/a11812be-3fb9-11e4-96f2-012ba8d3f881.png)\r\n'
9161,'btford','WIP: docs(guide/accessibility): explain ngAria\nWork-in-progress.\r\n\r\nping @marcysutton'
9154,'btford','docs(tutorial): update to tutorial step_12 doc\n- proper case "jQuery" vs "JQuery"\r\n- wrap ng-view in markdown code `ng-view`'
9153,'btford','docs($location): break up long sentence for readability\nOld: \r\n![screen shot 2014-09-18 at 11 52 58 am](https://cloud.githubusercontent.com/assets/6385848/4325602/d93fd47c-3f66-11e4-970f-482305e2ba81.png)\r\n\r\nNew: \r\n![screen shot 2014-09-18 at 11 53 42 am](https://cloud.githubusercontent.com/assets/6385848/4325612/f13bb316-3f66-11e4-9f54-2d58f04ff230.png)\r\n'
9147,'caitp','ng-hide="expression()" not working in 1.3-rc2 (timing issue?)\nTLDR: \r\n`<p ng-hide="isHidden()"> {{isHidden()}} </p>` shouldnt ever result in \r\n`<p ng-hide="isHidden()" class="ng-binding"> true </p>` and thus not add class `ng-hide`.\r\nHappens when isHidden changes its outcome after initial binding.\r\n\r\nJust reverting all angular* files back to `1.3.0-beta.18` solves this.\r\n\r\nEDIT: its not ok in `rc.1`. `beta.18` works\r\n\r\nFull:\r\n\r\nI have just updated our app to `1.3-rc2` for testing and found this little gem in our app.\r\n\r\nI would assume `$animate` addClass or removeClass to have a timing bug.  \r\n\r\nGiven this template in a directive:\r\n```html\r\n<div>\r\n  <p ng-hide="true">THIS IS HIDDEN</p>\r\n  <p ng-hide="isHidden()">isHidden() = {{isHidden()}}</p>\r\n</div>\r\n```\r\n\r\ni get this output:\r\n```html\r\n<div>\r\n  <p ng-hide="true" class="ng-hide">THIS IS HIDDEN</p>\r\n  <p ng-hide="isHidden()" class="ng-binding">isHidden() = true</p>\r\n</div>\r\n```\r\n\r\nDebugging into the ngHideDirective showed that it did indeed correctly triggers the `$animate.addClass(element,\'ng-hide\')` call on both elements, but it only actually adds the class on the first paragraph.\r\n\r\nThis happens when `isHidden()` returns `false` at first and then becomes `true` a little later (a scope.$watch in our case). \r\n\r\nIts the same way the other way around. Then `isHidden()` returns true from the outset it does indeed hide it, but then the change to false is not respected.'
9146,'jeffbcross','Different behaviour due to import order of AngularJS and jQuery\nI\'m trying to write an AngularJS directive named "insert-after-parent" that inserts content after his parent. Inside this directive, I use jQuery to select the parent element. Because AngularJS is based on jQuery, I load first the jQuery and than the AngularJS framework. But when I do, my directive doesn\'t work. But if I first load AngularJS and then the jQuery framework, it works.\r\nHere the link to my plunkr: http://plnkr.co/edit/gTXk0bjyQ6nTTCaB9Czg?p=preview\r\nI\'m using angular 1.2.23 and jQuery 1.7.1 According to the documentation, these versions are compatible.\r\n'
9144,'btford','Fixes typo in docs\nChanges: "of type number" <- "of time number"'
9143,'tbosch','Issues in IE10/IE11 when using favorites/bookmarks twice or entering an url manually\nHi!\r\n\r\nAfter digging around a lot in the AngularJS-code and also comparing behavior with Backbone etc. in case of routings combined with using bookmarks/favorites in IE10/IE11, there is one thing that leads to a very bad behavior in the IE-browsers together with the History API / event listener structure.\r\n\r\nThe problem itself is also pretty well described here https://github.com/angular-ui/ui-router/issues/1241\r\n\r\nFor IE9, the problem is gone since 1.2.24 as the "sync" handling was improved  https://github.com/angular/angular.js/issues/6976\r\n\r\nUnfortunately, for IE10/IE11, the problem still resists. I could drill this down to the following preventDefault event handling:\r\n\r\nhttps://github.com/angular/angular.js/blob/v1.2.x/src/ng/location.js#L705\r\n\r\nAs soon as this line is removed / commented out, IE10/IE11 behave correctly. Don\'t ask me why, but this is pretty strange. I wasn\'t able to oversee the consequences within all browsers except that event bubbling is a bit more and it might lead to a bit of inconsistent behavior. \r\n\r\nNeed general example code?\r\n\r\nJust take these:\r\nAngularJS - http://angular-route-segment.com/src/example/#/section1/2\r\nBackboneJS powered working case - http://demos.9lessons.info/backbone/#block/four/4\r\n\r\n- Bookmark one of the states\r\n- navigate away\r\n- click on the bookmark\r\n- navigate away\r\n- click again on the bookmark -> boom\r\n\r\nIt works if the page is initially called, but not if the bookmarked state was already browsed / called via bookmark. Indications that the event bubbling / intercepting behaves different can be found at  http://stackoverflow.com/questions/23349191/event-preventdefault-is-not-working-in-ie-11-for-custom-events and also some other places that IE might behave differently. \r\n\r\nAnother result of the tests is the fact that the hashchange listener will not get fired if the preventDefault is enabled and that the order of events still seems to be a bit different compared with the other browsers.'
9142,'caitp','Clarify behavior when providing undefined or null value to angular.forEach\nDoc update to satisfy #9062'
9136,'tbosch','chore(ngCsp): add e2e tests\nAlso changes `connect:devserver` and `connect:testserver` to conditionally serve files with csp headers when the path contains `.csp` somewhere.\r\n\r\nDepends on https://github.com/angular/dgeni-packages/pull/70 to be merged and updated dgeni-packages to be included in angular.js'
9126,'tbosch',"fix($location): links should respect absolute paths and base href when in html5mode\nFixes absolute links on legacy browsers when html5Mode is enabled.\r\n\r\nClicking on a link out of the base's href shouldn't trigger rewriting the URL. This behavior was changed since https://github.com/angular/angular.js/commit/24f7999bc16e347208aa18c418da85489286674b .\r\n\r\nThis resolves the issue I found on https://github.com/angular/angular.js/commit/24f7999bc16e347208aa18c418da85489286674b#commitcomment-7815179 which has created different behavior when it comes to absolute links on legacy browsers.\r\n\r\nMost of this is whitespace changes.\r\nI've added these cases to consider:\r\n1. Properly rewrite links starting with `/base/` when the base tag is present with a value of `/base/`.\r\n2. Don't rewrite links that have a href beginning with `/` not in within the base (i.e. `/outer_base/link`)\r\n3. Don't rewrite links at all if no base tag is present and href begins with `/`\r\n4. Rewrite absolute links with hashbang followed by `/` properly (.i.e. `#!/base/thing`).\r\n\r\nThis change is meant to resolve those cases that were not tested since 1.2.17 and have mismatching test cases. It's not to add any new features."
9123,'btford','Update step_12.ngdoc with Minor Grammar Fix\nMotivation for the suggestion is to improve readability.'
9115,'caitp',"Problem(bug?) with ngRepeat and ngAnimate module on unshift array\nHello,\r\n\r\nI understand that this can be a bug, ngAnimate track by the key of the ngRepeat to generate the animation to enter, move and leave items. \r\n\r\nBut there is a problem when do you have an array used like data for ngRepeat where the new values are added in the beginning (`array.unshift()`) and not in the end (`array.push()`). \r\n\r\nHere is a PoC to understand better, see how in the first `ng-repeat` the enter animation is always on the same item (the last one) and not in the new item (the first one):\r\nhttp://plnkr.co/edit/Mh0He2N3wdmzRMJcEryc?p=preview\r\n\r\nIf we don't add the `track by $index` in the`ng-repeat` directive, the animation works nice for both examples but it doesn't allow duplicate items.\r\n\r\nany idea? \r\nThanks.\r\n"
9114,'btford','docs: Update noscp.ngdoc to use properly formatted json\nFix the "correct" example to have the proper syntax for creating the locals object and provide a more explicit explanation as to how the scope object should be provided.'
9107,'btford','Update faq.ngdoc\nprototypally'
9105,'caitp',"refactor($parse): change 'this' to a $parse keyword instead of scope field\nBREAKING CHANGE:\r\n- $scope['this'] no longer exits on the $scope object\r\n- $parse-ed expressions no longer allow chaining 'this' such as this['this'] or $parent['this'] or this.this.this.this\r\n- 'this' in $parse-ed expressions can no longer be overridden, if a variable named 'this' is put on the scope it must be accessed using this['this']\r\n\r\nI think this is a cleaner way of implementing 'this' which is more like other keywords such as `null` or `false`. But it is also a breaking change for anyone that did weird things such as `this.this.this.this` (and less weird: `$scope['this'] = ...`)."
9103,'matsko',"ngAnimate late ngShow resolving behavior in v1.3.0-rc.1\nDid start testing AngularStrap with the recent release candidates, and I've found out one pretty serious regression regarding animations:\r\n\r\nWhen you use `$animate.enter` on a DOM element (eg. a tooltip), any `ng-show` attribute on this base DOM element was properly handled in v1.2, while it has a noticeable delay in v1.3.\r\n\r\nFor instance, if I have a template with an `ng-show` that resolves to `false` and that I'm using `$animate.enter` on it, I'll get a flicker as the entering animation will play, and only once finished, the `ng-show` will be resolved and properly applied, making the element disappear (and thus flicker).\r\n\r\nReproducible example, typeahead with `data-min-length=0` (uses an `ng-show` attr), just focus the input to see the flicker issue.\r\n- v1.2: http://plnkr.co/edit/FvuDaz5C8gFGXPM6ftFm?p=preview (working)\r\n- v1.3 : http://plnkr.co/edit/0eAGWOz3DfWgwjryjVDJ?p=preview (broken)\r\n\r\n---\r\n\r\n- typeahead template: https://github.com/mgcrea/angular-strap/blob/master/src/typeahead/typeahead.tpl.html\r\n- typeahead $animate.enter (tooltip): https://github.com/mgcrea/angular-strap/blob/master/src/tooltip/tooltip.js#L214"
9102,'IgorMinar',"docs($event): clarify $event is jQuery.Event\nThe docs should state that an `$event` object is an instance of a jQuery.Event object. Whenever objects are passed around in a framework it's really helpful for the docs to state what’s inside the objects and how to expect them to be populated/work. I had to mess around in my console and with code to figure out what the `$event` object was."
9095,'petebacondarwin',"TRANSCLUDE MEMORY LEAK: Memory leak with transclusion, ng:repeat and jQuery\nHi there,\r\n\r\nI believe I have found a memory leak in a very specific use case it seems as it only happens when transcluding **ng:repeat generated** elements and *ONLY* if jQuery is loaded.\r\n\r\nHere is a use case: http://jsbin.com/nirubi/11/edit?html,js,output\r\n\r\nYou can try everything first with only jQlite. Follow the number of active scopes and active watches.\r\nThen uncomment the jQuery script tag and try again, you'll see that the number of active scopes and watches creeps up in the case of ng:repeat and ONLY when jQuery is being loaded.\r\n\r\nLet me know if I'm doing something wrong or if it's a genuine bug.\r\n\r\nThanks!\r\n"
9093,'petebacondarwin','PR8963\n'
9089,'btford','Update directive.ngdoc with Minor Grammar Fix\nMinor grammar fix for better readability'
9087,'IgorMinar','update angular.extend() documentation\nHow to preserve original objects similar to jQuery.extend().'
9072,'jeffbcross','Added ngBindOnce benchmarks on the largetable-bp\nHi @IgorMinar and @jeffbcross \r\nI wrote a basic benchmark to check the difference speed between the classic ngBind with the new ngBindOnce.\r\n\r\non my Google Chrome (Version 37.0.2062.120) I got this result after 10 loops:\r\n1) ngBind\r\n```shell\r\ndestroy : mean: 319.08ms ± 4%       (stddev 12.44)      (min 301.03 / max 336.42)\r\ncreate :  mean: 2362.93ms ± 14%     (stddev 336.86)     (min 2029.95 / max 3132.09)\r\n$apply :  mean: 55.68ms ± 19%       (stddev 10.57)      (min 42.35 / max 68.67)\r\n```\r\n\r\n1) ngBindOnce\r\n```shell\r\ndestroy : mean: 312.34ms ± 3%       (stddev 10.58)        (min 299.78 / max 331.11)\r\ncreate :  mean: 2441.22ms ± 24%     (stddev 583.30)       (min 2127.00 / max 4044.66)\r\n$apply :  mean: 66.66ms ± 73%       (stddev 48.45)        (min 39.48 / max 200.60)\r\n```\r\n\r\nI stat writing this benchmark because after a first refactoring on [#ngtasty](https://github.com/Zizzamia/ng-tasty) I notice by using [Batarang](https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en) that the same binding with the new `bindOnce` was slightly slower during the first time binding.\r\n\r\nIn the end on Batarang and [Benchpress](https://github.com/angular/benchpress) looks that ngBindOnce is aroung 3% slower than the classic ngBind.\r\n\r\nI hope my code can be useful.\r\nThank you :)'
9067,'btford',"refactor(map) Use Array.prototype.map instead of our own function\nOn most browsers this comes with a nice performance improvement http://jsperf.com/angular-map-vs-native/4 The biggest being IE 11 where it is 8x faster. In Chrome 37 there's a small regression. Firefox 31 shows a bigger regression, however these results couldn't be repeated with Firefox 32."
9059,'tbosch','E2e tests for csp mode\nWe had a couple of regressions because we have no real e2e test for our csp mode.'
9058,'petebacondarwin','fix($location): allow 0 in path() and hash()\nThis handles a corner case with numeric 0 after adb5c6d6cc76b928436743707727ab0974d6810b was merged.'
9052,'caitp',"1.3.0-rc.1 - isolate scope @ bindings not kept up to date when used with the bindToController directive property\nWhen using the bindToController directive property of Angular 1.3.0-rc.1, the isolate scope properties which are bound using the '@' are set properly upon initialization but not kept up to date with subsequent changes.\r\n\r\nI have put together a Plunkr to demonstrate the issue.  The two-way binding instance, using '=' in the isolate scope, receives updates as the radio button is changed but the binding with '@' does not:\r\nhttp://plnkr.co/edit/cZcz70UlfPRrHZjDWcto?p=preview\r\n\r\nLooking at the Angular source, it seems like the case statement for '@' may be keeping the wrong property up to date when the attribute changes (lines 6943-6953 in nodeLinkFn):\r\n```javascript\r\ncase '@':\r\n    attrs.$observe(attrName, function(value) {\r\n      isolateScope[scopeName] = value;\r\n    });\r\n    attrs.$$observers[attrName].$$scope = scope;\r\n    if( attrs[attrName] ) {\r\n      // If the attribute has been provided then we trigger an interpolation to ensure\r\n      // the value is there for use in the link fn\r\n      isolateBindingContext[scopeName] = $interpolate(attrs[attrName])(scope);\r\n    }\r\n    break;\r\n```\r\nIt looks like the observe should be updating **isolateBindingContext** instead of **isolateScope** so that it keeps the controller instance property up to date instead of the scope property."
9051,'tbosch','fix($parse): add `.assign()` function to settable expressions in CSP mode\nDue to changes to CSP-mode detection and the CSP api in general, the test suite was not able to\r\nreport regressions related to CSP.\r\n\r\nThis CL corrects the regression introduced where assignable expressions would not have an `assign` member function in CSP mode.\r\n\r\nCloses #9048'
9050,'caitp','feat(formController): add $setUntouched to propagate untouched state\n'
9046,'IgorMinar','(doc) sending data with $http --example\nA friend of mine @willianjedai realized that there is no specification on how to send data over an post request with http method ..  \r\nso I made this simple improvement and I hope it help somebody ! =]'
9045,'IgorMinar','docs(versions): remove the trailing slash in URLs when switch versions\nBecause https://docs.angularjs.org/api/ can handler the trailing slash, but https://code.angularjs.org/1.2.24/docs/api/ can not.\r\n\r\nFix #9043'
9037,'btford','fix(formController): do not let removed control effect form\nThis PR fixes some issues with manually removing and adding controls from forms:\r\n1) Validity changes in removed control do not effect form validity\r\n2) Validity of existing control is taken into account when adding control to form\r\n\r\nCloses #9035 '
9032,'btford','refactor(ngEventDirs): remove a useless call\nThe event names are already lower-case.'
9027,'mzgol',"feat($location): add support for History API state handling\nThis is a continuation of #3325, re-created per my e-mail thread with @IgorMinar.\r\n\r\nEDIT: new commit message:\r\n\r\nAdds $location state method allowing to get/set a History API state via\r\npushState & replaceState methods.\r\n\r\nNote that:\r\n- Angular treats states undefined and null as the same; trying to change\r\none to the other without touching the URL won't do anything. This is necessary\r\nto prevent infinite digest loops when setting the URL to itself in IE<10 in\r\nthe HTML5 hash fallback mode.\r\n- The state() method is not compatible with browsers not supporting\r\nthe HTML5 History API, e.g. IE 9 or Android < 4.0."
9025,'btford',"Select options won't update after changing scope's variable\nHi, \r\nSelect wont update it's options since 1.2.22 when we change the the scope variable.\r\n\r\nexample:\r\n1.2.21:\r\nhttp://jsfiddle.net/uLdmH/33/\r\n1.2.22:\r\nhttp://jsfiddle.net/uLdmH/34/\r\n\r\nThanks.\r\n"
9024,'petebacondarwin','test(injector): allow service names with a single underscore\nJust to prove that #9015 is ok.'
9016,'jeffbcross','fix(ngModel): don’t clear the model when an external validator failed\nCalling `ctrl.$setValidity()` with a an error key that \r\ndoes not belong to a validator in `ctrl.$validator` should\r\nnot result in setting the model to `undefined` on the next\r\ninput change. This bug was introduced in 1.3.0-beta.12.\r\n\r\nCloses #8357\r\nFixes #8080'
9013,'caitp','i18n - Extended Number Format Symbol Rules\n* Added ```numberformatsymbolsext.js``` to Closure Slurper script\r\n* Regenerated locales\r\n\r\nThis should correct the configurations for many locales.\r\n\r\nFixes currency symbol issue in #8931.'
9012,'btford','docs(forms.ngdoc): correct grammar\nCorrect grammar in forms.ngdoc developer documentation'
9010,'petebacondarwin','fix(ngResource): make badcfg error message more helpful\nThe error message should help identify the problem. To do so, more details\nneed to be provided.\n\nCloses #9005'
8999,'jeffbcross','ngModel refactor\nFurther refactor and fixes to `ngModelController`.'
8998,'tbosch','ngHref adds two history records in legacy browsers\nClicking on a link with ngHref directive in a legacy browser (IE8-9) will adds two records into browser history. There are need two clicks on back button to get back to previous page then.\r\n\r\nHere is a sample application that will reproduce this behavior (needs to be run IE8-9):\r\n(sorry I didn\'t manage to create a working plunkr example)\r\n```\r\n"use strict";\r\n\r\nvar App = angular.module("App", ["ngRoute"]);\r\n\r\nApp.config(["$routeProvider", "$locationProvider", function ($routeProvider, $locationProvider) {\r\n\r\n\t$routeProvider.when("/", {\r\n\t\tcontroller: function ($scope) {\r\n\t\t\t$scope.url = "/second";\r\n\t\t},\r\n\t\ttemplate: "<a ng-href=\\"{{url}}\\">Click me!</a>"\r\n\t});\r\n\r\n\t$routeProvider.when("/second", {\r\n\t\ttemplate: "<h1>Now click on browser back button.</h1>"\r\n\t});\r\n\r\n\t$routeProvider.otherwise({redirectTo: "/"});\r\n\r\n\t$locationProvider.html5Mode(true);\r\n\t$locationProvider.hashPrefix("!");\r\n\r\n}]);\r\n```\r\nI\'m running AngularJS v1.2.15. \r\n\r\nCan you please confirm this bahaviour?\r\n'
8995,'caitp','feat(ngTransclude): Add support for use current scope.\nAdded support for use current scope.\r\nIf do not to want create new scope at ngTransclude directive, This code can use current scope in ngTransclude\r\n```\r\n<div ng-transclude="false"></div>\r\n```\r\n'
8994,'caitp','Repeater leave fix\n'
8989,'petebacondarwin','Update limitTo.js\nThere is no such thing as type integer'
8984,'btford','fix($parse): disallow passing Function to Array.sort\nFix the following exploit:\r\n\r\n```js\r\nhasOwnProperty.constructor.prototype.toString = toString.call;\r\n["a", "alert(1)"].sort(hasOwnProperty.constructor);\r\n```\r\n\r\nThe exploit:\r\n• Array.sort takes a comparison function and passes it 2 parameters to compare.\r\n  The result of the comparison is then converted to a string.\r\n• The Function object conveniently accepts two string arguments so we can use this\r\n  to construct a function.  However, this doesn\'t do much unless we can execute it.\r\n• We set the toString function on Function.prototype to Function.prototype.call.\r\n  This causes the function that we constructed to be executed when sort calls\r\n  .toString() on the result of the comparison.\r\n\r\nThe fix is in two parts.\r\n• Disallow passing unsafe objects to function calls as parameters.\r\n• Do not traverse the Function object when setting a path.'
8979,'tbosch','fix(input): make checkbox ngTrueValue work with required\nFixes #5164 \r\n\r\nThe viewValue in a checkbox is always set to false (by default). Comparing to the trueValue is therefore incorrect.'
8975,'jeffbcross',"fix XSS vulnerability in ng-srcset\nThere is a security issue with `ng-srcset`.\r\n\r\n**URIs aren't sanitized**.\r\n\r\nThe behiavor is correct for `ng-src` but not for `ng-srcset`.\r\n\r\nThe probleme is with `src/ng/compile.js` that ignore `srcset`.\r\n\r\nHere is the fix.\r\n\r\nLaurent Trillaud"
8970,'petebacondarwin','A couple of fixes to docs\n'
8969,'tbosch','refactor(ngModelController): removed redundant this.$validators initialisation\nSame initialisation already exists two lines above the one removed'
8968,'petebacondarwin','Dgeni 0.4\n'
8963,'petebacondarwin','Fixed docs indentation in rootScope.js\n'
8962,'btford','fix(i18n): fix typo at i18n generation code\nFix typo at i18n generation code. This would remove the property `macFrac` that has no meaning from all the generated locales\r\n\r\nTo complete the patch, there is a need to generate the i18n locales once again, but adding this to this PR would make it really hard to spot the single change'
8958,'matsko','fix($animate): abort class-based animations if the element is removed during digest\nPrior to this fix, if the element is removed before the digest kicks off then it leads\r\nto an error when a class based animation is run. This fix ensures that the animation will\r\nnot run at all if the element does not have a parent element.\r\n\r\nCloses #8796'
8949,'tbosch','Inconsistent handling of invalid initial ngModel values\nAn ngModelController created with an invalid inital value from scope behaves differently depending on input type:\r\n\r\nhttp://jsfiddle.net/PK3QH/27/\r\n\r\nType | invalid model | view | behavior | error | good\r\n------- | ---------------- | ------- | ------------ | ------ | -------\r\ntext | {} | [object Object] | calls toString | correctly set | :interrobang: \r\nurl | \'notanurl\' | notanurl | calls toString | correctly set |  :white_check_mark: \r\nnumber | \'notanumber\' | (empty) :x: | throws if model is not type number :interrobang:  | no errors are set because of exception :x: |  :x:\r\nnumber+min=5 | 3 | 3 | ^ | correctly set  | :white_check_mark: \r\ndate | \'notadate\' | (empty) :x: | expects a date and uses the date filte, else returns nothing | required set | :x:\r\ndate | new Date(\'123456\') | 0NaN-NaN-NaN | ^ | $error.date is not set :x: | :x: \r\n\r\nI think we should always try to set the $viewValue to something. This is important if you have server-side data that may be invalid.\r\nSo number and date should not discard invalid values. If we pass garbage to the validators, the correct errors will be set.\r\nRegarding calling toString on text-based input. I think that\'s okay as you will rarely set an object to a model when you know it\'ll be displayed in an input. But we should do "the right thing" and try to format values that are good enough, so in short:\r\n\r\n- number should not throw and call toString regardless\r\n- date should return call toString if not a Date object\r\n- date should also get the bug fixed where NaN gets output\r\n\r\nI\'ll think I\'ll be able to throw a PR together over the weekend.\r\n\r\n\r\n'
8946,'matsko',"$animate tallying should account for no-ops\nSo if I have a directive that does the following...\r\n\r\n```js\r\nscope.$watch('property', function(value) {\r\n  if (value) {\r\n    $animate.addClass(element, 'has-value');\r\n  }\r\n  else {\r\n    $animate.removeClass(element, 'has-value');\r\n  }\r\n});\r\n```\r\n\r\n...and during the initial digest, the value of ```property``` is initially null, but is then populated from some data store. Then the watch will be called twice, resulting in a ```removeClass()``` call (when the class isn't actually present), followed by an ```addClass()``` call. The end result would be the class is *not* added, which is not what I want.\r\n\r\nPrior to to RC0, this pattern was simple, obvious, and it worked. It's a little wasteful to have the redundant ```removeClass()``` call, but since the class isn't actually present at that point, it's basically a no-op.\r\n\r\nIn RC0, $animate's tallying breaks this pattern. I presume it is counting the two calls as (-1) + 1, equalling 0, so performing no animation. However, since the the first ```removeClass()``` call is a no-op, the subsequent ```addClass()``` call should still run.\r\n\r\nMore generally, any call to ```addClass()``` and ```removeClass()``` that wouldn't actually result in a change should not be considered for tallying. If, during a digest cycle, the following series of operations was performed:\r\n\r\n```\r\nremoveClass() -> No-op\r\naddClass()\r\naddClass() -> No-op\r\naddClass() -> No-op\r\nremoveClass()\r\n```\r\n\r\nIt should be logically equivalent to the following:\r\n\r\n```\r\naddClass()\r\nremoveClass()\r\n```\r\n\r\nWith the result being that no class is added.\r\n\r\nWithout this, the developer is forced to manually do the same de-duping everywhere such class toggling is applied using an extra state variable."
8944,'petebacondarwin',"Allow ordering for Array inheritors\nHello,\r\n\r\nyesterday I faced an issue with angular.\r\nWe use Coffeescript and its classes very widely in our rails project. We have a BaseCollection class, which was inherited from Array. It works cool, but there's one negative effect: I was unable to order this object with ng-repeat and orderBy.\r\n\r\nI started digging and revealed, that angular rejects any objects, but Arrays itself. The problem was that Array.isArray does not define Array inheritors as arrays, while when I inherite from class I must follow the Liskov substitution principle and not to break Array functionality (and we do in our project).\r\n\r\nHere's [a short demonstration](http://jsfiddle.net/2ja03bfn/7) of the issue. Issue can be reproduced in 1.2.x, but in 1.1.x everything works fine.\r\n\r\nI suggest to allow array-like objects to be sorted. I've also added a test to cover this and checked the green-red-green process with `grunt test:jqlite`. Please take a look at my fix or fix that issue by yourself in more diligent way."
8942,'tbosch','WIP: Filter cache\nuse a cache to avoid recomputing filters during dirty-checking.\r\n\r\nin the modified large-table benchmark delivers 3x speed improvement for number filter (apply duration), but makes the uppercase filter 20% slower\r\n\r\nTODO:\r\n- more benchmarking\r\n- special case dates since they are not primitives but can be cheaply compared via `getTime()`\r\n- decide on whether to make the cache an opt-in or an opt-out'
8941,'tbosch','refactor(ngModelController,formController):\nrefactor(ngModelController,formController): centralize and simplify l…\r\n…ogic\r\n\r\nThe previous logic for async validation in \r\n`ngModelController` and `formController` was not maintainable:\r\n- control logic is in multiple parts, e.g. `ctrl.$setValidity`\r\n  waits for end of promises and continuous the control flow\r\n  for async validation\r\n- logic for updating the flags `ctrl.$error`, `ctrl.$pending`, `ctrl.$valid`\r\n  is super complicated, especially in `formController`\r\n\r\nThis refactoring makes the following changes:\r\n- simplify async validation: centralize control logic\r\n  into one method in `ngModelController`:\r\n  * remove counters `invalidCount` and `pendingCount`\r\n  * use a flag `currentValidationRunId` to separate\r\n    async validator runs from each other\r\n  * use `$q.all` to determine when all async validators are done\r\n- centralize way how `ctrl.$modelValue` and `ctrl.$invalidModelValue` \r\n  is updated\r\n- simplify `ngModelController/formCtrl.$setValidity` and merge\r\n  `$$setPending/$$clearControlValidity/$$clearValidity/$$clearPending`\r\n  into one method, that is used by `ngModelController` AND\r\n  `formController`\r\n  * remove diff calculation, always calculate the correct state anew,\r\n    only cache the css classes that have been set to not\r\n    trigger too many css animations.\r\n  * remove fields from `ctrl.$error` that are valid and add `ctrl.$success`:\r\n    allows to correctly separate states for valid, invalid, skipped and pending,\r\n    especially transitively across parent forms.\r\n- fix bug in `ngModelController`:\r\n  * only read out `input.validity.badInput`, but not\r\n    `input.validity.typeMismatch`,\r\n    to determine parser error: We still want our `email` \r\n    validator to run event when the model is validated.\r\n- fix bugs in tests that were found as the logic is now consistent between\r\n  `ngModelController` and `formController`'
8940,'jeffbcross',"fix($location): don't call toString on null values\n"
8937,'jeffbcross','fix(select): use $viewValue instead of $modelValue\nCloses #8929'
8934,'jeffbcross',"1.3 : Requiring <base> tags means I can't use SVG with clip-path, mask, etc...\nWith the recent change of requiring the `<base>` tag, now all my SVG icons that I use that have clip-paths, masks, etc... are broken.  I can't set the urls for those properties to absolute paths because the url constantly changes when navigate in the app and I can't set relative urls because of the `<base>` now.  The only thing I can do is not use HTML5 mode which I just don't like.\r\n\r\nI don't see why the `<base>` tag should be required when historically from what I read it generally causes more issues than is solves (like this one).  As far as linking goes, I can't think of a reason they should not all start with a `/`.  There is no reason I can think of where when on `/page1` and you want to link to `/page2` you would need to have the link be `page2`.  As far as the deep url issue, have that be something you can configure with $locationProvider or something.\r\n\r\nI really hope this change can be un-done or someone can tell me how to use SVG properties that require url() while still being able to HTML5 mode."
8931,'caitp','Incorrect Currency & Number Format for es-us Locale\nThe en-us locale configuration incorrectly uses a comma for number formatting, € as a default currency symbol, places the currency symbol after the amount and uses a decimal as the group separator. Number and currency rules should be similar to en-us locale rules.\r\n\r\n```html\r\n<!doctype html>\r\n<html lang="es">\r\n<head>\r\n  <meta charset="UTF-8">\r\n  <title>Incorrect Number and Currency Format: es-us</title>\r\n  <script src="//code.angularjs.org/1.2.23/angular.js"></script>\r\n  <script src="//code.angularjs.org/1.2.23/i18n/angular-locale_es-us.js"></script>\r\n</head>\r\n<body ng-app="myApp"> \r\n  <script>\r\n    angular.module(\'myApp\', [\'ngLocale\'])\r\n      .controller(\'MyCtrl\', [\'$scope\', \'$locale\', function($scope, $locale) {\r\n        $scope.localeId = $locale.id;\r\n        $scope.amount = 1234.56;\r\n      }]);\r\n  </script>\r\n  <ul ng-controller="MyCtrl">\r\n    <li>{{localeId}}</li>\r\n    <li>{{amount | currency}}</li>\r\n    <li>{{amount | number : 2}}</li>\r\n  </ul>\r\n</body>\r\n</html>\r\n```\r\n\r\nExpected:\r\n* es-us\r\n* $1,234.56\r\n* 1,234.56\r\n\r\nActual:\r\n* es-us\r\n* 1.234,56 €\r\n* 1.234,56'
8929,'jeffbcross','Bug when using ngModel, $asyncValidators and SELECT elements.\nTested and reproduced with version: 1.3.0-rc.0\r\n\r\nIf you use the relatively new $asyncValidators feature with SELECT elements bound to an ngModel the SELECT options become unselectable.\r\n\r\nPlease see the following plunk:\r\nhttp://plnkr.co/edit/wlBKH2\r\n\r\nThis seems to be because `$asyncValidators` set the `$modelValue` to `undefined` while the async validators are running, but never set it back again to the actual value once all the async validators pass.'
8926,'btford','feat(limitTo): Add support for numbers in limitTo\nIt would be nice if limitTo supports numbers. The expected behavior would change input to string and just run limitTo on that value. This becomes useful often when you have long decimal numbers, etc...'
8921,'matsko','ng-animate for ng-repeat: why not active all \'leave\' animations first, then \'enter\' animations\nI found that ng-animate will active \'enter\' and \'leave\' animation at the same time when ng-repeat changes totally, and this makes my page looks strange since it\'s length "sumed" at that moment.\r\n\r\nMy ng-repeat looks like this:\r\n```html\r\n<ANY ng-repeat="item in ls" ng-init="ls=[\'a\', \'b\', \'c\']">\r\n<div ng-bind="item"></div>\r\n</ANY>\r\n<button ng-click="ls=[\'d\', \'e\', \'f\']">Switch to [d, e, f]</button>\r\n<button ng-click="ls=[\'a\', \'b\', \'c\']">Switch to [a, b, c]</button>\r\n```\r\n\r\nAnd this is the style(in stylus) I used:\r\n```stylus\r\n@keyframes leave_anim\r\n\tto\r\n\t\topacity 0\r\n\r\n@keyframes enter_anim\r\n\tfrom\r\n\t\topacity 0\r\n\r\n.ng-leave\r\n\tanimation leave_anim 0.2s ease-out\r\n.ng-enter\r\n\tanimation enter_anim 0.3s ease-out\r\n.ng-leave~.ng-enter\r\n\tdisplay none\r\n```\r\n\r\nAnd I added this but still doesn\'t work well (since there is a moment ng-enter removed first)\r\n```stylus\r\n.ng-enter~.ng-leave\r\n\tanimation none\r\n\tdisplay none\r\n```\r\n\r\nIs there any right way to do this?  or this schema should be configurable at least, and all-\'enter\'-animations-actived-after-all-\'leave\'-animations-finished is a more reasonable schema as default I think.\r\n'
8918,'IgorMinar',"angular 1.3.0.rc0: Removing an item from ng-repeat move its DOM element at the end when animating\nUsing ng-animate with an ng-repeat, when removing an element from the JavaScript array, I would expect the DOM element to stay at the same place it was while animating and then being removed. That's not what happening with the RC0 of Angular 1.3.\r\n\r\nIt looks like the DOM element is removed immediately and then Angular realizes it needs to animate it, so the element is put back in the DOM but at the end of the list, animated, and then finally removed for good.\r\n\r\nI tried removing using different methods (`splice` and `filter`) and using stuff like `track by` or `orderBy` but nothing worked. Here is a demo showing the problem: http://codepen.io/pauldijou/pen/wevBr\r\n\r\nAm I missing something on how to remove an element from a ng-repeat?"
8916,'tbosch','$interpolate wraps date value output with an extra set of quotes\nHere is an example.\r\nhttp://plnkr.co/edit/Kdcq8ddAPNhxUPN0BeYs?p=preview'
8911,'petebacondarwin','fix(ngModelOptions): do not trigger digest during debounce\nPR for merging #8850'
8904,'btford','docs(ngSwitch): fix priority\nFixes priority of ngSwitch due to the change of #8244\r\n\r\nFixes #8244'
8901,'IgorMinar',"$parse performance/style\nc074181 might be the only one worth merging to allow the Parser/Lexer objects to be GCed.\r\n\r\nf4ea3c9 addresses a TODO although I didn't notice any major improvements (even though the removed wrapper method is often ~10% when profiling...).  Unfortunately the wrapper method is still needed for the expressions returned from `$parse`, but use of `getterFn`s within other expressions don't have the wrapper. This also required a minor error message change.\r\n\r\nf4ea3c9 could be expanded in other ways though. Maybe allowing `$parse`ed methods to return something such as a `$$watchFn` property that can be watched instead of the full expression being watched.  The simple case would be returning the raw `getterFn` instead of the wrapper for simple `foo.bar` expressions.  A more complicated case would be expressions such as `myVar % 2 === 0` returning only the `myVar` `getterFn` to be watched (and then a special watch delegate to see if the full expression actually changed, which makes it more complicated...). Or only watching the input+args to filters etc. Not sure how common or useful those would be though...\r\n\r\nThe rest are mostly style/simplifying but I thought I'd leave them in there."
8900,'matsko',"TypeError: Cannot read property 'then' of undefined\nI upgraded a perfectly working project from angular 1.2.22 to 1.3 and it is breaking here.\r\n The problem seems to be at the function\r\n`var clone = $transclude(newScope, function(clone) {`\r\n`                cleanupLastIncludeContent(); `\r\n`                $animate.enter(clone, null, $element).then(afterAnimation); `\r\n`              });`\r\n\r\n`TypeError: Cannot read property 'then' of undefined `\r\n`    at http://0.0.0.0:9000/bower_components/angular/angular.js:22066:54 `\r\n`    at publicLinkFn (http://0.0.0.0:9000/bower_components/angular/angular.js:6264:29) `\r\n`    at $get.boundTranscludeFn (http://0.0.0.0:9000/bower_components/angular/angular.js:6406:21) `\r\n`    at controllersBoundTransclude (http://0.0.0.0:9000/bower_components/angular/angular.js:7047:18) `\r\n`    at http://0.0.0.0:9000/bower_components/angular/angular.js:22064:27 `\r\n`    at processQueue (http://0.0.0.0:9000/bower_components/angular/angular.js:12018:27) `\r\n`    at http://0.0.0.0:9000/bower_components/angular/angular.js:12034:27 `\r\n`    at Scope.$get.Scope.$eval (http://0.0.0.0:9000/bower_components/angular/angular.js:13202:28) `\r\n`    at Scope.$get.Scope.$digest (http://0.0.0.0:9000/bower_components/angular/angular.js:13014:31) `\r\n`    at Scope.ng.config.$provide.decorator.$delegate.__proto__.$digest (<anonymous>:844:31)  `"
8898,'IgorMinar','perf(extend): remove use of forEach to remove calls/closures/passing arguments\nI found this made `$parse` almost 50% faster when not cached, I assume other cases will also benefit. This also removes the "bad value context for arguments value" warning in the chrome profiler.'
8895,'jeffbcross',"Directives got duplicated after an $animate.enter since beta.5\nI got an issue where a directive was being created twice when I did some `$animation.enter`.\r\n\r\nThe issue started on my repo: foxandxss/angular-toastr#18 so I started researching about it and the change was on beta.5 (when `$animate.enter` started to prepend instead of append).\r\n\r\nI managed to reproduce it here: http://plnkr.co/edit/oYmXPIeN16g75a3kQJQc?p=preview\r\n\r\nStarting from the console error (In my code I use `enter` like that and I get no error tho). Technically that shouldn't happen (I think).\r\n\r\nLeaving that aside, you can see the directive twice on screen. If you change `templateUrl` to `template` it works (much like #6006).\r\n\r\nSo I was wondering if I did wrong on the plunker (adding a third parameter resolves the issue) or there is a bug."
8893,'matsko',"fix(ngAnimate): support removing classes from SVG elements when using jQuery\nWithout this CL, ngShowHide will not work without the use of monkeypatched\nfixes for jQuery such as https://github.com/kbwood/svg 's jquery-svgdom.js\nscript.\n\n/CC @matsko / @IgorMinar --- as noted above, people can make this work by including third party\nscripts, but I thought since this is technically a regression I would write a patch anyways and\nsee what people think.\n\nSo, the main thing is that this is not reusing the existing jqLiteHasClass method, because jqLite\nis not exported unless jQuery is not found. We could fix this to support code reuse, if we want\nto fix this at all.\n\nThere is one other use of `.hasClass()` in ngAnimate that I can see, so it's likely that another\nSVG scenario is broken in jQuery by default, but I haven't investigated to see what that other\nscenario is.\n\nBalls in your court, do you think we should fix it or just defer the work to third party code\nlike jquery-svgdom\n\nCloses #8872"
8892,'tbosch','fix(input): $asyncValidators should allow $parsers\nAfter resolving the async validators, it should execute all parsers\r\non the viewValue before comparing it to the currentValue.\r\n\r\nCurrently, input[type=number] is not recognizing the end of the async validation because \r\nthe comparison `currentValue === value` is comparing a number in `currentValue` against a string in `value`\r\nhttps://github.com/angular/angular.js/blob/master/src/ng/directive/input.js#L1734'
8889,'jeffbcross','fix($location): set `baseHref` in mock browser to `/`\nSet the default value for the base tag in the mock browser to `/`,\r\nas we now always require a base tag to be present for html5 mode.\r\n\r\nFixes #8866.'
8888,'matsko',"angular 1.3.0-rc0 ng-animate errors if element removed before runAnimationPostDigest callback is called\nIn my app, I have a select box which, when changed, sometimes ends up getting removed immediately.  This is now causing an error in ng-animate.\r\n\r\nThe issue seems to be in the setClass method.  That method adds the data '$$animateClasses'.  Then, by calling runAnimationPostDigest(...), it sets up some code to run later.  That code assumes that the '$$animateClasses' data is setup.  In my case, though, by the time that asynchronous code is run, the element has been removed, and the data has been removed along with it.  So I get the error\r\n\r\n    TypeError: 'undefined' is not an object (evaluating 'cache.add')\r\n\r\nWhich traces back to line 1028:\r\n\r\n    var classes = resolveElementClasses(element, cache, state.active);\r\n\r\nI can work around this by wrapping the code that removes the <select> element in a $timeout, which causes it to get removed after that asynchronous method in setClass has been run, but that feels like a hack.  Seems like setClass should be robust to the possibility that the element could get removed."
8879,'btford','fix(ngModel): support milliseconds in time and datetime\nCloses #8874'
8877,'petebacondarwin',"Parent directive goes through compile, pre, and post before child directive with templateUrl\nI think there is a bug with the ordering of compile, pre, and post linking functions in parent directives when a child directive uses templateUrl to get the template.\r\n\r\nHere are some simple directived, not using the `template` or `templateUrl` properties:\r\n\r\nhttp://plnkr.co/edit/gEk3GjuASxrV1L6Kp6Dq?p=preview\r\n\r\nEverything happens in the order I expect.\r\n\r\nNext we use the `template` property for the `logCompile2` directive:\r\n\r\nhttp://plnkr.co/edit/EOYgf5z82mesixcb1LXU?p=preview\r\n\r\nAgain everything works as expected.\r\n\r\nFinally we use the `templateUrl` property for the `logCompile2` directive:\r\n\r\nhttp://plnkr.co/edit/A55sw6YRCuhvWUi6zQ4Q?p=preview\r\n\r\nThis is where things go wrong as the parent directive is running through all the steps before any of the steps of the child directives are linked.\r\n\r\nSome else played with this that last plunker and added transclusion with weird results too:\r\n\r\nhttp://plnkr.co/edit/0jjwTk8VGoqjSF9se1KZ?p=preview\r\n\r\nThe documentation states:\r\n\r\n```\r\nPost-linking function\r\n\r\nExecuted after the child elements are linked. It is safe to do DOM transformation in the\r\npost-linking function.\r\n```\r\n\r\nEither I am miss understanding the documentation or this is a bug as I would except the child directive to compile and run pre/post linking before the parent's post linking would run (as the non-templateUrl example do).\r\n\r\nIs this a bug or am I miss understanding something?\r\n\r\nI should mention this is an issue with 1.2.23 and 1.3.0-rc.0"
8874,'btford','Input[datetimeLocal] directive do not support changing second and millisecond.[version 1.3.0-beta.19]\nIf I write\r\n```html\r\n<input type="datetime-local" step="1" ng-model="datetime">\r\nor\r\n<input type="datetime-local" step="0.001" ng-model="milli">\r\n```\r\nWhen changing the `second` or `millisecond` value of the input, angular can not parse the input\'s value, and will also throw an error in the console.\r\nOnline demo here: http://jsbin.com/yusapo/2/edit\r\nTry changing `second` or `millisecond` of the input after setting appropriate values to year, month, day, hour and minute to some value other than `00` or `000` and see the console in DevTools.'
8872,'caitp','ngShow does not show the svg element correctly when using jquery 2.1.1 and ngAnimate at the same time\nThere is a regression between beta.19 and rc.0.\r\n\r\nbeta.19:[http://plnkr.co/edit/zkPRL7Cu0YCFs0y25oSf?p=preview ](http://plnkr.co/edit/zkPRL7Cu0YCFs0y25oSf?p=preview ) \r\nrc.0:[http://plnkr.co/edit/uL9yduQne0HMarug27Zk?p=preview](http://plnkr.co/edit/uL9yduQne0HMarug27Zk?p=preview)\r\n\r\nWhen click the toggle button, the `rect` element did not show as expected.\r\nThis only happens when jquery 2.1.1 is included and `ngAnimate` is required in module definition.'
8869,'tbosch','View doesn\'t change when navigating to link\nThere is an issue when $location is injected into a controller. Some links stop working. The URL changes but the view is not changed. The $route events are not fired either. \r\n\r\nIt has been over a year and this insidious bug is still not fixed for IE. Chrome and Firefox appear to work fine but I had to add "hacky" code in order for IE11 to navigate.\r\n\r\nhttp://stackoverflow.com/questions/17835768/angularjs-view-doesnt-change-when-navigating-to-link\r\n\r\nhttps://groups.google.com/forum/#!searchin/angular/link$20not$20working/angular/BsenavakfyQ/wtbRBVBxJ0sJ\r\n'
8867,'btford','docs (providers): remove grammar and punctuation mistakes\n'
8866,'tbosch','Angular.js 1.3-rc0 HTML5 Location and base tags\nRecently bumped Angular.js to latest 1.3-rc0 release.\r\n\r\nProject is using ui-router with HTML5 location mode set to true.\r\n\r\nAdded the `<base>` tag inside of the `<html>` tag. Like so:\r\n\r\n```\r\n<head>\r\n  <base href="/">\r\n  <meta charset="utf-8">\r\n  <meta name="viewport" content="width=device-width">\r\n  <link href=\'/css/vendor.css\' type=\'text/css\' media=\'all\' rel=\'stylesheet\'>\r\n  <link href=\'/css/application.css\' type=\'text/css\' media=\'all\' rel=\'stylesheet\'>\r\n  <script src="/js/vendor.js" type="text/javascript"></script>\r\n  <script src="/js/templatescache.js" type="text/javascript"></script>\r\n</head>\r\n```\r\n\r\nThe routing is defined as:\r\n\r\n```\r\n  $locationProvider.html5Mode(true)\r\n  $urlRouterProvider.otherwise(\'/\')\r\n  $stateProvider....\r\n```\r\n\r\nHowever, in Karma test I am seeing:\r\n\r\n```\r\n  Error: [$location:nobase] $location in HTML5 mode requires a <base> tag to be present!\r\n  http://errors.angularjs.org/1.3.0-rc.0/$location/nobase\r\n      at /code/project/public/js/vendor.js:57677\r\n      at invoke (/code/project/public/js/vendor.js:51462)\r\n      at /code/project/public/js/vendor.js:51294\r\n      at getService (/code/project/public/js/vendor.js:51421)\r\n      at invoke (/code/project/public/js/vendor.js:51453)\r\n      at /code/project/public/js/vendor.js:51294\r\n      at getService (/code/project/public/js/vendor.js:51421)\r\n      at invoke (/code/project/public/js/vendor.js:51453)\r\n      at /code/project/public/js/vendor.js:51294\r\n      at getService (/code/project/public/js/vendor.js:51421)\r\n      at invoke (/code/project/public/js/vendor.js:51453)\r\n      at /code/project/public/js/vendor.js:51298\r\n      at forEach (/code/project/public/js/vendor.js:47695)\r\n      at createInjector (/code/project/public/js/vendor.js:51298)\r\n      at workFn (/code/project/bower_components/angular-mocks/angular-mocks.js:2226)\r\nPhantomJS 1.9.7 (Mac OS X): Executed 9 of 47 (9 FAILED) ERROR (0.016 secs / 0.078 secs)'
8861,'tbosch',"fix(ngModel): make async validators play nicely with $parsers\nwhen an async validator resolves, we decrease the `pendingCount` only if the `$viewValue` hasn't changed in the mean time. before this commit the view value after resolve was compared with the model value before resolve instead of the view value before resolve. this caused it never to resolve when those two are different (when `$parsers` are defined)"
8859,'mzgol','perf(jQuery): only trigger $destroy if a handler exists\nThis is the exact same performance improvement that jQuery UI recently did: https://github.com/jquery/jquery-ui/commit/f7429edfe96d322cdec850f7207efba8125767a6'
8858,'caitp','chore(ngSwitch): removed the change attr from ngSwitch and updated spec\nhttps://github.com/angular/angular.js/issues/8822'
8857,'tbosch',"chore(travis): move docse2e tests into the unit tests vm\nwe spend more time making getting the build ready than running the docs e2e tests.\r\n\r\nby piggy-backing on unit tests we'll finish the build faster"
8856,'petebacondarwin','refactor(ngModel): get rid of revalidate\n'
8850,'petebacondarwin','perf(ngModelOptions): do not trigger digest during debounce\nBREAKING CHANGE:\r\nThis change means that anyone watching `$viewValue` will no longer see the update immediately for debounced updates\r\n\r\nCloses #8814'
8849,'tbosch','fix(ngEventDirs): check `scope.$$phase` only on `$rootScope`\nChecking `scope.$$phase` is dangerous since it does not work on isolated scopes. It exists only on `$rootScope`, and isolated scopes do not inherit it.'
8847,'petebacondarwin','refactor(indexOf) use Array.prototype.indexOf exclusively\nThis saves around 30 bytes in the minified build for the main file.'
8838,'btford',"Mentioned what a blur event is in docs for ngBlur\nI know this is obvious to anyone who has done much work with the DOM and javascript, but thought it was funny that no mention was made as to what a 'blur' is. The meaning wouldn't be obvious to a newbie."
8833,'petebacondarwin',"ngSwitch attemps to remove DOM elements twice due to async iteration\nBasically, I just added a check so that there isn't an attempted splice of the previousElement if it has already been removed by an earlier watch iteration between the time that the callback was defined and actually executed"
8822,'caitp',"ngSwitch has an undocument change attribute\nThere seems to be a `change` attribute that ngSwitch evaluates that isn't documented.\r\nSee in [current code](https://github.com/angular/angular.js/blob/49455a75dc01b6b57304f14fafd476de6c2b29be/src/ng/directive/ngSwitch.js#L167).\r\n\r\nLooking at the history, this got introduced in 0df93fd49c1687b2eddaa79faa1c0adbef82bf72 back in 2010, [here](https://github.com/angular/angular.js/blob/0df93fd49c1687b2eddaa79faa1c0adbef82bf72/src/widgets.js#L187).\r\n\r\nI believe we should remove it, as it seems it was never documented.\r\n\r\nThoughts?"
8821,'jeffbcross','fix($location): remove an unused parameter of $location.url\nThis parameter does nothing and its description in the docs is meaningless.'
8817,'btford',"docs(README): fix 'Contribution guidelines' link\nThe current link leads to a page 'Building and Testing AngularJS'. This same link is also included in the 'Building AngularJS' section of the README where it's more relevant."
8815,'btford','docs(interpolate): Fix linking syntax.\n- Change $interpolateProvider#method to $interpolateProvider.method in the apparent link'
8814,'petebacondarwin','ng-model-options debounce seems to still trigger "dirty model checking" cycle\nI was expecting that the debounce option of ngModelOptions can be used to improve the performance by avoiding triggering too many watches on my page. \r\n\r\nOn my use case for example, I have a table where I apply 1 filter per cell (yes, I know I can optimize that) and 1 form with some input fields. Without using debounce for every keypress on an input field all my filters are executed which is a big no-no.\r\nFrom my tests it seems that the debounce works correctly by only updating the model "after the debounce". The problem is that I still see the filters being called on every keypress which is something I wasn\'t expecting.\r\n\r\nSteps to reproduce:\r\n1) Go to http://plnkr.co/edit/CHX2kA\r\n2) Open developer tools to see console.log output\r\n3) Type something on the input field: I was expecting that the filter used on the page was only executed when the debounce "finishes" and the model is updated but it is still called for every keypress.\r\n\r\nTested on angular v1.3.0-beta.19'
8813,'matsko','ngAnimate cache prevents transitions on added classes in FF\nngAnimate uses "getElementAnimationDetails" to cache CSS transitions on load but currently i\'m aiming to ensure that onload there are no transitions and then after load I assign a class that then enables transitions on new items.\r\n\r\nExample sass might be:\r\n\r\n```\r\n.parent {\r\n     .element {}\r\n\r\n     &.isloaded {\r\n          .element {\r\n                transition: 5s linear all;\r\n           }\r\n     }\r\n}\r\n```\r\nif I dynamically apply the "isloaded" class later on then the cache prevents ngAnimate from attaching the relevant "ng-enter" and "ng-enter-active" classes.\r\n\r\nIf I comment out the cache logic then the element gets re-evaluated and transitions are applied.\r\n\r\nP.S seems to work in chrome bizarrely but not in firefox\r\n\r\n'
8808,'tbosch','When using svg directive with ngRepeat, the newly added element is not replaced with the directive template\nThere is a regression between 18 and 19 when using svg directive with ngRepeat.\r\nbeta 18 [http://plnkr.co/edit/SqE1uIaJIrOA2dW8C6TH?p=preview](http://plnkr.co/edit/SqE1uIaJIrOA2dW8C6TH?p=preview)\r\nbeta 19 [http://plnkr.co/edit/BBmO3r5oQTY4Ki3Wo8Ly?p=preview](http://plnkr.co/edit/BBmO3r5oQTY4Ki3Wo8Ly?p=preview)\r\n\r\nWhen click the add button, a new element will be pushed into the array. In beta 18, everything works fine. But in beta 19, it is repeating `<my-rect>` but not replacing it with the template.'
8805,'jeffbcross',"Implement a first approach of orderBy filter benchmarks by using benchpress\nHi @jeffbcross , please take a look this pull request and I'm curious to understand if the way I implementing \r\nthe benchmarks for `orderBy` is correct.\r\n\r\nIn this commit I try to see the different benchmark between different expression param.\r\nhttps://docs.angularjs.org/api/ng/filter/orderBy \r\n\r\nAbout the tool [benchpress](https://github.com/angular/benchpress), I don't really understand the part\r\n`Select number of samples to collect and average:` what really does, because if I change the number does not\r\nlooks something happen.\r\n\r\nThe tool is not hard to set, and for my personal experience the hardest part was figure out what is the best way to test my directive and capture the best realistic benchmark.\r\n\r\nIn the end I really like that this tool could be an official way cross of all AngularJS directives/filters to test the performance release by release."
8804,'btford','fix(docs): fix ng-model-options example\n'
8796,'matsko','ngAnimate short circuts Dom removal during remove, causing off by one errors (ng339 error)\nI think was experiencing a really nasty bug causing an error: ```TypeError: Cannot read property \'ng339\' of undefined```\r\n\r\nThis error happens while removing elements.\r\nI think I\'ve found the reason:\r\n\r\n1. While removing elements, angular does a child querySelector of \'*\' to get all the elements beneath the to be removed element.   \r\n    - https://github.com/angular/angular.js/blob/master/src/jqLite.js#L258```\r\n- It then iterates over that **HTMLCollection** (\'descendants\') like an array to remove it\'s cached data about the element.\r\n- While removing cached data, "$destroy" events are fired on elements\r\n    - https://github.com/angular/angular.js/blob/master/src/jqLite.js#L305\r\n    - https://github.com/angular/angular.js/blob/master/src/ng/compile.js#L1072\r\n- $destroy events trigger a ```cancel()``` on animations which are currently running, causing them to short circuit their DOM operation\r\n    - https://github.com/angular/angular.js/blob/master/src/ngAnimate/animate.js#L1195\r\n\r\n\r\nIf *before this remove* an element had started a leave animation, (E.G. by ng-if condition changing), that element will be removed immediately. \r\n- The removal causes the **HTMLCollection** to remove it also, which mutates the length of the HTMLCollection ```\'descendants\'``` in the middle of the original removal loop, leading to an off by one error in the looping logic.\r\n\r\nIn the end, ```descendants.length``` is reduced but the loop variable ```l``` is kept at the original value.  Once the loop variable ```i``` is larger than descendants.length, it passes undefined as the element to jqLightRemoveData which tries to access ```element.ng339```\r\n    - https://github.com/angular/angular.js/blob/master/src/jqLite.js#L294\r\n\r\nI\'m not sure what the correct solution would be, as I have not been too involved in the development of angular.  I\'ve come up with three possible leads:\r\n- Update our iteration cap if the the HTMLCollection\'s length changes.  \r\n- Some sort of check within ngAnimate to prevent short circuiting if it is going to be removed\r\n- Some pre-check on element before accessing element.ng339\r\n\r\nThanks!\r\n-Matt\r\n\r\n---\r\n\r\nPR: #8958'
8795,'caitp','ngSanitize not working for DOM XSS in firefox\nThe following piece of string when passed to $sanitize in firefox, its giving the original string back.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4750072/4064764/8abe8004-2e14-11e4-912c-4d71e828db6a.png)\r\n\r\nSteps to reproduce .\r\n1. Open https://docs.angularjs.org/api/ngSanitize/service/$sanitize in Firefox\r\n2. Scroll down to the bottom and in the example paste `"><svg/onload=prompt(12);> `\r\n3. You will see the prompt box open up\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4750072/4064781/aa442bb8-2e14-11e4-9bea-17cc3c92117b.png)\r\n'
8785,'jeffbcross','[nomerge ]fix($browser): detect changes to the browser url that happened in sync\nJust for Travis to run the tests...\r\n\r\nCloses #6976.'
8773,'jeffbcross',"$location.search(search, [paramValue]) documentation now reflects that paramValue can be a Number\nI've amended the documentation to reflect that paramValue can also accept a ```Number``` as the value to set in the same manner it currently accepts a ```string```.  I'm aware of it being used like this at present (without issue that I'm aware of) and so this PR just makes it a recognised usage of the API.\r\n\r\n"
8762,'Narretz','Suggestion to use safe $apply in ngModelDirective\nIn ngModelDirective $apply is used to change model\'s value on event different from default and to change model\'s $touched state. But I suggest to use safe $apply instead, because we can\'t guarantee that some event (blur for example) won\'t be triggered from the outside during digest cycle. [Real life example](http://plnkr.co/edit/s5xqiYs1mZP4D7I6uRfb). Try to change value in the first input - you\'ll get "$digest already in progress" error.'
8761,'btford','ngOptions does not populate options through selectCtrl\nWhen i use ng-repeat I can check existense of ngModel value in selected items through selectCtrl.hasOption(value)\r\nWhen i use ng-options this method is unusable because optionsMap is not populated.'
8747,'btford',"refactor(ngRepeat): improve errors for duplicate items\n-Log the value that had the duplicate key, as well as the key\r\nThe error that is thrown when items have duplicate track by keys can be\r\nconfusing because only the duplicate key is logged.  If the user didn't\r\nprovide that key themselves, they may not know what it is or what item\r\nit corresponds to."
8745,'btford','fix(numberFilter): format numbers that round to zero as nonnegative\nPreviously when a negative number was rounded to 0 by the number filter\r\nit would be formatted as a negative number.  This means something like\r\n`{{ -0.01 | number: 1 }}` would output `-0.0`.  Now it will output `0.0`\r\ninstead.\r\n\r\nCloses #8489'
8741,'IgorMinar',"perf($compile): only iterate over elements with link functions\nI've been thinking about this a while and @IgorMinar added a TODO for it in 3e0a2e1f.\r\n\r\nIn a quick test I found this lowered the link time 5-10% for a table row with only ~2/15 cells requiring linking. For DOM trees with a higher percentage of annotated nodes this shouldn't have any noticeable effect. However I think having 50%+ non-annotated nodes is very common (a newline/whitespace text node per element...)."
8727,'jeffbcross','docs(ngResource): detail way to skip default json serialization/deserialization\ndocs(ngResource): detail way to skip default json serialization/deserialization\r\n\r\nin reference to this pull request, an update in the documentation is the best way to go about it: https://github.com/angular/angular.js/pull/8632'
8717,'btford','fix(ngModel): allow non-assignable binding when getterSetter is used\nCloses #8704'
8712,'jeffbcross',"Update step_07.ngdoc\nGoing through the tutorial, I was a little confused when the bower.json example had the name set to angular-seed.  It appears that this is something that was corrected in the angular-phonecat project, but the tutorial documentation hasn't been updated to match.\r\n\r\nChanged the example JSON to be the latest bower.json for angular-phonecat step-7."
8709,'caitp','chore($q): convert thrown TypeError to $minErr\n'
8704,'btford','ngModelOptions does not recognise dynamically generated accessors\nConsider this scenario.\r\n\r\n```javascript\r\n$scope.accessor = function(object, property) {\r\n  return function(value) {\r\n    if ( angular.isDefined(value) ) {\r\n      object[property] = value;\r\n    }\r\n    else {\r\n      return object[property];\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n```HTML\r\n<input type="text" ng-model="accessor(user, \'name\')" ng-model-options="{ getterSetter: true }" />\r\n```\r\n\r\nIt throws the **nonassign** exception:\r\n```\r\nExpression \'accessor(user, \'name\')\' is non-assignable.\r\n```\r\n\r\nIs this a designed feature? Is so, is there a way I can bind to dynamic scope paths?'
8701,'IgorMinar','chore(shrinkwrap): add angular-benchpress to shrinkwrap\n'
8687,'matsko','Fix for #8234\nThis is crappy synchronisation bug that can run you absolutely crazy trying to devise what has gone wrong with your `ngMinLength`.'
8683,'jeffbcross',"corrupted minErr urls/redirection\nI accidentally bootstrapped my app twice and got this error:\r\n```\r\n[ng:btstrpd] http://errors.angularjs.org/1.3.0-local+sha.e840be8/ng/btstrpd?p0=%3Cbody%20ng-app%3D%22%22%20class%3D%22ng-scope%22%3E\r\n```\r\n[link](http://errors.angularjs.org/1.3.0-local+sha.e840be8/ng/btstrpd?p0=%3Cbody%20ng-app%3D%22%22%20class%3D%22ng-scope%22%3E)\r\n\r\nwhen navigating to the url I was redirected to:\r\n\r\n```\r\nhttps://docs.angularjs.org/error/ng/btstrpd?p0=%3Cbody%20ng-app%3D%22%22%20class%3D%22ng-scope%22%3E\r\n```\r\n[link](https://docs.angularjs.org/error/ng/btstrpd?p0=%3Cbody%20ng-app%3D%22%22%20class%3D%22ng-scope%22%3E)\r\n\r\nThe error page then didn't interpolate the argument from the url, so the error message was harder to read.\r\n\r\nAll I saw was:\r\n\r\n```\r\nApp Already Bootstrapped with this Element ''\r\n```\r\n(notice the empty quoted string)"
8682,'btford','fix(linky): handle quotes around email addresses\nCloses #8520'
8671,'rodyhaddad',"Inconsistent behaviour of $watchGroup\nSometimes $watchGroup and $watchCollection produce different results. Here is [plunker](http://plnkr.co/edit/4PIkevPy5Gzhe1zWzct8), that reproduces this issue. Look at third item in results list and you'll see the difference between $watchGroup and $watchCollection output. May be it is by design, but it looks rather strange to me."
8666,'btford','ngDisabled doc: clarify "don\'t do this" example\nIt\'s not clear until you read the whole thing that it\'s an explanation of what *not* to do and why, so if you scan the page from the top, you may use this bad solution.'
8652,'IgorMinar','Interpolate performance\nSet of small performance improvements'
8638,'btford','docs($rootScope): document scope properties\n'
8629,'petebacondarwin','feat(input): allow to define the timezone when parsing and formatting dates\nAllow to define the timezone for parsing dates in `input[date]`, `input[time]`, … as well as in the `dateFilter`.\r\n\r\nCloses #8447.'
8624,'btford',"Remove repetition of 'machine' in Tutorial\nRemoved repetition of 'machine' and 'local machine'. I think this change makes the sentence more concise"
8623,'btford','docs(orderBy): clarify expression usage in a predicate\nCloses #8592'
8619,'jeffbcross',"perf($compile): move $$isolateBinding creation to directive factory instead of on each link\nCurrently isolated scope info is parsed during the directive linking and a new $$isolateBindings is generated for every link. If the parsing fails an iscp error is thrown on every link of the directive.\r\n\r\nThis moves the parsing into the directive factory, creates a single shared $$isolateBindings, and will only throw the iscp error once if the parsing fails instead of once per link.\r\n\r\nI'm not sure if batarang still uses $$isolateBindings (I can't find any reference to it)? Or if batarang depends on the $$isolateBindings format? Currently this PR changes the $$isolateBindings format, and also only puts $$isolateBindings on isolated scopes instead of every Scope instance."
8612,'jeffbcross',"This docs page is crashing the browser\nHello, I just went to https://code.angularjs.org/1.2.22/docs/guide/dev_guide.unit-testing and it's consistently crashing the browser. No idea where it stucks but I just wanted to let you know ;)\r\n![screen shot 2014-08-14 at 12 04 54](https://cloud.githubusercontent.com/assets/224201/3918495/7b378aba-239a-11e4-97ce-26db3bc9e5e6.png)\r\n"
8607,'jeffbcross','fix(ngHref): remove attribute when empty value instead of ignoring\nCloses #2755'
8606,'jeffbcross',"Fixes Argentina's currency.\nCurrency symbol is '$'. The symbol is placed before the number.\r\n\r\nCloses #8583"
8590,'petebacondarwin',"transformResponse data is string in IE11\nI'm using transformResponse in $resource service. Below is link for plunker. \r\nI'm using httpBackend, and everything is fine. But If use real backend, data comes as string, and only in IE (tested in IE11). \r\nhttp://plnkr.co/edit/XmSGFyfSgvPsbTIi7wlm?p=preview\r\n\r\n"
8569,'matsko',"Documentation page for using ngAnimate with 3rd party frameworks\nngAnimate needs documentation on how to allow the module to play well with 3rd the party frameworks.\r\n\r\nAn example of this is with frameworks such as Zurb Foundation. This framework in particular places default, global transition styling to ensure code reuse. The global aspect of this doesn't fit well with ngAnimate since it is unable to detect that the animation code has nothing to do with ngAnimate. Therefore we need better docs explaining how to fix this.\r\n\r\nHere is the original issue:\r\nhttps://github.com/angular/angular.js/issues/8288#issuecomment-51813350"
8563,'btford',"docs(docs.css): better code for commas in TOC on mobile\nIt's still not perfect, but now it looks like this:\r\n![image](https://cloud.githubusercontent.com/assets/94334/3873813/ff4686ae-2137-11e4-8766-db9317085fc3.png)\r\n"
8544,'btford','fix(select): Clarify documentation and add exception for ngOptions\nngOptions introduced `track by` in c32a859bdb93699cc080f9affed4bcff63005a64.\r\nUsing `track by` puts constraints on the value you can use in the interpolation expression in ngOptions.\r\nThis patch both documents this and adds an exception if you use ngOptions in an unsupported way.\r\n\r\nCloses angular/angular.js#6564'
8535,'petebacondarwin','Add images attribute to controllersSpec.js\nAs per request by @petebacondarwin in reference to #8468.'
8520,'btford',"Linky on emails breaks with double quote in 1.2.21\nThere's a problem introduced in 1.2.21 that results in linky falling over when it hits an email address inside a double quoted string:\r\nsee http://plnkr.co/edit/IMUbLbrOpkYVq4l5i3hQ?p=preview for the correct(ish - I'd prefer if the trailing quote wasn't included in the linked version) behaviour in 1.2.20, and then have a look at the previous version of the plunk to see the code being bad in 1.2.21"
8499,'IgorMinar','WIP: add benchpress builder and runner\n'
8492,'IgorMinar',"revert fix($location): make legacy browsers behave like modern ones in html5Mode\nThese commits have caused more problems than they've been worth, and we get to remove some code, too.\r\n\r\nReverts: https://github.com/angular/angular.js/commit/3f047704c70a957596371fec554d3e1fb066a29d, https://github.com/angular/angular.js/commit/49e7c32bb45ce3984df6768ba7b2f6a723a4ebe7\r\n\r\nOpinions on reverting these would be appreciated! /cc @IgorMinar"
8486,'mzgol','fix(jQuery): cooperate with other libraries monkey-patching jQuery.cleanData\nSome libraries (like jQuery UI) patch jQuery.cleanData as well. This commit\r\nmakes Angular work correctly even if such external patching was done after\r\nthe Angular one.\r\n\r\nFixes #8471\r\n\r\n/cc @IgorMinar'
8471,'mzgol',"cleanData override breaks when jQuery UI is included after angular\n@attilah sums this issue up very well in [his gist](https://gist.github.com/attilah/f157855b3b8bcb217b39), but here's the TLDR:\r\n\r\nangular overrides `jQuery.cleanData` function, storing original in `jQuery.cleanData.$$original`. jQuery UI also overrides this method. So if you incidentally include jquery, then angular, then jquery UI (not farfetched, `grunt bower-install` does not guarantee a particular order), the `$$original` is no longer available and angular throws a `undefined is not a function` error when trying to call `$$original`."
8466,'petebacondarwin','docs(ngController): global controller fns disabled by default\nUpdate doc to reflect [3f2232b5](https://github.com/angular/angular.js/commit/3f2232b5a181512fac23775b1df4a6ebda67d018),\r\nwhich disabled use of global controller constructors (by default).'
8464,'petebacondarwin','docs(form.js): fix ngdocfor setSubmitted\nhttps://github.com/angular/angular.js/commit/108a69be17df5884d026c57b2be3235c576250fe'
8459,'petebacondarwin','Create a build of AngularJS that contains no CSS.\nThis is useful for sites that use CSP, especially those that prohibit inline CSS but allow eval.'
8447,'tbosch','1.3.0 input[date] model is a Date object in local time zone instead of UTC\nPlease check this [plunker](http://plnkr.co/edit/54sxyIK20ubdCQTlK4b3?p=preview) for a demonstration.\r\n\r\nAssuming the computer time zone is not UTC and the browser supports input[date], select a date from the input[date] dropdown.\r\n\r\nThe input field will display a date in the localized format, for example "01.08.2014" in my case. My current timezone is GMT+4.\r\n\r\nvalue is\r\n\r\n    "2014-07-31T20:00:00.000Z"\r\n\r\nbut expected is either\r\n\r\n    "2014-07-31T20:00:00.000-0400"\r\n\r\nor\r\n\r\n    "2014-08-01T00:00:00.000Z"\r\n\r\nIt seems that the code that converts ```input[date].value``` into a ```Date``` model object first obtains the correct value ```"2014-07-31T20:00:00.000-0400"``` but then replaces the correct ```"-0400"``` suffix with incorrect ```"Z"```, or it is a matter of formatting when the date is formatted as localized but the timezone is not part of the format and instead the "Z" suffix is hardcoded..\r\n\r\nThe code that converts the ```string``` value of the input[date] into a ```Date``` model should follow the  [HTML5 input[type=date]](http://www.w3.org/TR/html5/forms.html#date-state-(type=date)) guidelines and convert the value string as if it is the start of the day in the UTC regardless of the current timezone.'
8440,'caitp',"fix(ngRepeat): support complex assignable aliasAs expressions\nParse aliasAs as an expression, and assert that the expression is assignable.\n\nJust throwing together a quick fix, but I'm not sure this is what we want to do, especially since we\nwant to change the behaviour of aliasAs to provide more data. /cc @matsko / @shahata / @petebacondarwin\n\nBREAKING CHANGE\n\nPreviously, any name passed as an expression would make up a single property\nname, including constant values such as 1, NaN, null, undefined, or even\nexpressions such as function calls or boolean expressions.\n\nNow, more complex expressions are possible, allowing the collection alias to\nbe assigned as a property of an object --- however, if the expression is not\ndetermined to be assignable, it will throw.\n\nFixes #8438"
8438,'caitp',"ngRepeat 'AS' can't be placed on controllerAs variable.\nI would like to be able to place the new ngRepeat 'AS' object on my controllerAs variable.\r\n\r\nThat way, I could either write ```item in items | filter:x as results``` or ```item in items | filter:x as myCtrl.results```\r\n\r\nPlunk demonstrating that this isn't currently possible:\r\nhttp://plnkr.co/edit/295zNjJ6wLlKtYTXL9wA?p=preview\r\n\r\nI really like the controllerAs syntax, and like knowing for sure which scope a variable is defined on.  It seems like a step backwards to not be able to do so."
8436,'btford','docs(content): update Angular 1.2 mentions to Angular 1.3\nAngular 1.3 docs now describe the process of using this version instead of\r\nthe older 1.2 that is the latest stable version.\r\n\r\nAlso, update jQuery 1.10.x mentions to 2.1.x.\r\n\r\n@IgorMinar this is re our latest talk at the AWG meeting. This merge should probably wait until http://docs.angularjs.org is switched to point to the latest commit on the `1.2.x` branch by default instead of `master`.'
8430,'vojtajina',"feat($compile/ngBind): don't add binding info if not enabled\nThe compiler and ngBind directives add binding information (`ng-binding`\r\nCSS class and `$binding` data object) to elements when they are bound to\r\nthe scope. This is only to aid testing and debugging for tools such as\r\nProtractor and Batarang. In production this is unneccesary and add a\r\nperformance penalty.\r\n\r\nThis change disables adding this binding information by default. You can\r\nenable it by calling `$compilerProvider.enableBindingInfo()` in a module\r\n`config()` block.\r\n\r\nBREAKING CHANGE:\r\n\r\nThe `ng-binding` CSS class and the `$binding` data object are no longer\r\nattached to DOM elements that have a binding to the scope, by default.\r\nIf you relied on this feature then you can re-enable it in one of your\r\napplication modules:\r\n\r\n```\r\nsomeModule.config(['$compileProvider', function($compileProvider) {\r\n  $compileProvider.enableBindingInfo();\r\n}]);\r\n```"
8429,'IgorMinar','fix(select): ensure that at least one option has the `selected` attribute set\nUsing `prop` to set selected is correct programmatically but accessibility\r\nguidelines suggest that at least on item should have the `selected` attribute\r\nset.\r\n\r\nCloses #8366'
8425,'caitp','Stop rewrite href when the url is started "javascript:" and "mailto:"\nWhen i use some third party plug-in like CKEDITOR,\r\nit use something href="javascript:doSomething():"\r\nangularjs help me to append "javascript:doSomething():" to the url.....'
8423,'petebacondarwin',"Provide a way to turn off debugging info in production\nangular sets ng-binding class and other classes as well as adds `$binding` object to jqLite/jQuery data storage. This info is not needed in production and is only used by tools like batarang and protractor but are causing performance issues for apps with lots of bindings.\r\n\r\nThese tools can already intercept the angular bootstrap and change configuration of the app if needed, so they could turn on the debugging info on demand.\r\n\r\nI'm thinking that to control the behavior we could use `$compileProvider` and expose a setter like `debugMode()` that tools could use.\r\n\r\nThe debugging info should be off by default in production.\r\n\r\nOpen questions:\r\n- should we disable this in non-minified angular by default? are the css classes useful for development?\r\n\r\n\r\ncc: @btford, @rev087, @juliemr "
8421,'petebacondarwin','docs(error): redefining module causes $injector:unpr\n'
8405,'jeffbcross','WIP: [[nomerge]] adapt to location changes happening outside of Angular\nJust opening for Travis for now. Still need to determine if this is best approach to problem described in #6976.'
8396,'caitp','perf(Scope): use remove the need for the extra watch in $watchGroup\nInstead of using a counter and an extra watch, just schedule the reaction function via .\r\n\r\nThis gives us the same/similar ordering and coalecsing of updates as counter without the extra\r\noverhead. Also the code is easier to read.\r\n\r\nSince interpolation uses watchGroup, this change additionally improves performance of interpolation.\r\n\r\nIn large table benchmark digest cost went down by 15-20% for interpolation.'
8386,'petebacondarwin',"Update step_02.ngdoc\nWarn reader not to minimise browser that Karma's running on."
8374,'caitp','Input date throws required when date is invalid\nWhen I implement an input date as required and I insert an invalid date like 4/31/1996, then the validation throws a ng-invalid-required but in the documentation the invalid dates are triggered as $error.date: \r\n```html\r\n<span class="error" ng-show="myForm.input.$error.date">Not a valid date!</span>\r\n```\r\n\r\nHow is possible to detect when a date is invalid or when was not inserted?'
8366,'petebacondarwin',"No longer setting selected property on <select> elements\nRequest Type: bug\n\nHow to reproduce: Create a `<select>` element. In 1.2.18 this sets the selected attribute correctly, either the first option in the list if the model is clear, or the model value's corresponding `<option>` element.\n\nIn 1.2.19 this does not occur.\n\nComponent(s): misc core\n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nTest case here: http://plnkr.co/edit/3zm0K6OK4Dt3DIqZyt06?p=preview\n\nI worked out that the issue exists between 1.2.18 and 1.2.19, specifically this commit: https://github.com/angular/angular.js/commit/24aee8163446dbd99b8b80218fa947cc06a42405\n\nIn 1.2.18, Angular sets the `selected` property on the element, whereas in 1.2.19 it does not. Reversing the above commit restores the functionality.\n\nIt occurs on latest FF, Chrome and IE.\n\n**Other Comments:**\n\n"
8365,'caitp','Firefox loses focus on editing input with type="number"\nWhen typing the first character in the input field, the focus is lost in Firefox.\r\nSee minimum working fiddle here: http://jsfiddle.net/hoeni/D7HN2/\r\n\r\nTested with (all on Win7):\r\n- FF30, FF31 -> losing Focus\r\n- IE11, Chrome 36 -> works as it should\r\n'
8363,'caitp','fix(currencyFilter/formatNumber)\nSee #5672 and #5674'
8359,'rodyhaddad',"fix(jqLite): fix regression where mutating the dom tree on a event breaks jqLite.remove\n012ab1f8745c8985d3f132c2dfa8fd84e7dc7041 introduced a regression where if a user's `$destroy` event modified the descendant DOM tree, `jqLite.remove` would break.\r\nThis is because it uses `getElementsByTagName` and caches the length of the returned live NodeList\r\n\r\ncc @ggoodman"
8358,'jeffbcross','feat(ngRoute): add method for changing url params\nRequest Type: feature\n\nHow to reproduce: \n\nComponent(s): ngRoute\n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nAdd a `$route#update` method for changing the current route\nparameters without having to manually build a URL and call `$location#path`.\nUseful for apps with a structure involving programmatically moving\nbetween pages on the same route, but with different `:param`\nvalues.\n\n**Other Comments:**\n\n'
8357,'tbosch',"Document ngModel.$setValidity breaking change in the Changelog\nAt some point in the 1.3.x branch ngModel.$modelValues were set as undefined when invalid.  I couldn't find this change documented in the changelog, but it did break validation in our case.\r\n\r\n1.2.x behavior:  http://codepen.io/ItsLeeOwen/pen/EfwKC\r\n1.3.x behavior:  http://codepen.io/ItsLeeOwen/pen/CwALx"
8356,'jeffbcross','feat(http): allow caching for JSONP requests\nCloses #1947'
8352,'petebacondarwin','feat(ngMock): allow override of when/expect definitions\nCloses #5766'
8349,'jeffbcross',"$cookies refreshed too late\nIn one of my controller I'm calling an `$http` endpoint, which serverside sets a new session cookie (let's call it *myCookie*) and in `.success()` I'm navigating to another route. (via `$location.path(/someRoute);`.\r\n\r\nI also have a `$rootScope.$on('$routeChangeStart')` handler, that checks for a cookie (via `$cookies.myCookie` and does some stuff depending on what it finds.\r\n\r\n\r\nThe problem is, that by then, the cookie is not yet set on the `$cookies` service, so the logic executed is wrong.\r\n\r\nAm I doing something totally wrong here? Is there a way to force the `$cookies` service to refresh itself or any other, better way to handle the scenario I'm describing?"
8347,'juliemr','chore(ci): update sauce connect from 3 to 4 for the 1.2.x branch\n'
8345,'IgorMinar',"docs(tutorial/step-7):Update tutorial/step-7 to fix grammar\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\ndocs(tutorial/step-7):\n\nFixes a missing 'as'.\n*Previous:*\nWe also have to add the modules dependencies of our app. By listing these two modules as dependencies of `phonecatApp`, ...\n*New:*\nWe also have to add the modules *as* dependencies of our app. By listing ...\n\n**Other Comments:**\n\n"
8342,'btford','feat(ngAria): New module to make a11y easier\nAdds various aria attributes to the built in directives.\r\nThis module currently hooks into ng-show/hide, input, textarea\r\nbutton as a basic level of support for a11y. I am using this as a\r\nbase for adding more tags into the mix for form direction flow,\r\nmaking ng-repeat updates atomic but the tags here are the most\r\nbasic ones.\r\n\r\nCloses #5486 and #1600'
8340,'jeffbcross','Investigate IE8 breakage with ngHref fix\n948c86c6025fca8e07921869d21cfac1c6333b05 introduced a bug in IE8 which needs some investigation.\r\n\r\nFailing job can be found at https://travis-ci.org/angular/angular.js/jobs/30792508.'
8337,'petebacondarwin','fix(angular.copy): clone regexp flags correctly\nCloses #5781'
8330,'IgorMinar','extended ngClass to add ngClassUpdate attribute to execute expression wh...\n...en ending animation\r\n\r\nI want to use a callback function after addClass/removeClass/setClass animation.'
8323,'rodyhaddad','angular docs error\ni think $rootScope.scope $watch listener parameter is only function value\r\n\r\n```\r\n `string`: Evaluated as {@link guide/expression expression}\r\n```\r\ni think above line should be deleted in $watch listener parameter\r\n\r\nhttps://github.com/angular/angular.js/pull/8322\r\n'
8322,'rodyhaddad','fix(rootScope.js): edit $watch parameter comment\ni think $watch listener params comment is wrong ( string value is not correct)\r\n\r\ni think $watch listener params is same as $watchgroup listener and only function value\r\n\r\nhttps://github.com/angular/angular.js/blob/master/src/ng/rootScope.js#L349-351'
8321,'petebacondarwin',"feat($compile): change directive's restrict setting to default to EA (el...\n...ement/attribute)\r\n\r\nPreviously we defaulted just to A because of IE8 which had a hard time with applying css styles to HTMLUnknownElements.\r\n\r\nThis is no longer the case with IE9, so we should make restrict default to EA. Doing so will make it easier to create\r\ncomponents and avoid matching errors when creating new directives"
8319,'jeffbcross',"$http.defaults.cache enables cache for all $http/$resource requests\nSetting the $http.defaults.cache to an cache object (in my case Angular-cache/ DSCacheFactory) enables cache usage for all $http/ $resource get methods despite the fact that the cache property of the action is not set to true.\r\n\r\nI believe this should be expected based on the documentation of angular $http:\r\n>You can change the default cache to a new object (built with $cacheFactory) by updating the $http.defaults.cache property. All requests who set their cache property to true will now use this cache object.\r\n\r\nIn fact within angularjs sendReq method the condition is as follow:\r\n\r\n`if ((config.cache || defaults.cache) && config.cache !== false && config.method == 'GET')`\r\n\r\nand letting the cache property undefined will enable use of the default cache. You need to specifically set the cache property to false but this should be the default behavior."
8313,'tbosch','feat(ngModelOptions): add allowInvalid option\nThis option allows to write invalid values to the model instead of having them become undefined.\r\n\r\nCloses #8290\r\n'
8311,'jeffbcross','feat($q): add streamlined ES6-style interface for using $q\nThis potentially helps lead the way towards a more performant fly-weight implementation, as discussed earlier in the year. Using a constructor means we can put things in the prototype chain, and essentially treat $q as a Promise class, and reuse methods as appropriate.\n\nShort of that, I feel this style is slightly more convenient and streamlined, compared with the older API.\n\n(#8067 originally contained this PR, but has been refactored into a staging branch for the remaining changes left in #8300 --- This should be much easier to review as the first of a set of 3 changes).'
8305,'jeffbcross','correct the URL\nThe old URL will show the list of phones. So correct the URL.'
8302,'jeffbcross',"refactor(Angular): add isPromise helper function\nThis can be used internally to remove the repeating pattern of `obj && obj.then`. For now, I don't see a good reason to expose this in angular's public interface."
8300,'caitp',"perf: improvements to $q\nThis is a meta issue to track performance improvements to be made in `$q` for 1.3.0. \r\n\r\nThe main problems to be solved within the scope of this issue:\r\n\r\n * Reduction of deferred instance memory to reduce GC pressure. One quick win is to move instance methods to prototype instead of created inside constructor.\r\n * Some learnings should be taken from bluebird, which has a very fast promise implementation.\r\n\r\nRelated issues: \r\n\r\n * #5223 (suggests rewriting $q, mentions memory pressure)\r\n * #6697 (focused on decoupling promise lib in Angular)\r\n\r\nThere is a PR from @caitp which updates A+ compliance, adds ES6-like constructor API, and begins to experiment with porting bluebird to $q (but with many tests failing): #8067. I've suggested simplifying that PR to not include perf improvements.\r\n\r\nBenchmarks:\r\n\r\n * [JSPerf comparing $q, Native Promise, and Bluebird Promise](http://jsperf.com/angular-q-vs-bluebird2)\r\n * [JSPerf comparing many promise libraries, not including $q](http://jsperf.com/promise-comparisons/55)"
8299,'jeffbcross','chore(e2e): protractor version bump to 1.0\n'
8289,'jeffbcross','Using debounce, does not support submit on enter\nIn a simple form with one field and one button I added a debounce:\r\nng-model-options="{debounce: {default: 500, blur: 0}}"\r\n\r\nI can understand that debounce might break form submit on Enter.\r\n\r\nHowever this is valid usage pattern which should atleast be optional to turn off the blur for an event or something like that. \r\nI expected that the setting blur to 0, would help, but this is not the case\r\n'
8288,'matsko','ng-animate transition problem using zurb foundation 5\nHi,\nsince angular version 1.2.17 I have a big animation problem that some operations are totally slowly. For instance some button components are using ng-show and are set to false, but the button is seen for a few Milli seconds. \n\nNow I have found out, that ngAnimate is executing some css3 transitions from foundation5 html5 framework.\n\nHere a live example:\n\nhttp://plnkr.co/edit/uPtFwvamczzJFvz2dGmn\n\nThanks'
8277,'IgorMinar','Fix whitespace\nRequest Type: chore\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: \n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nThis involves multiple whitespace-only changes:\r\n\r\n- Convert some tab indentation to spaces\r\n- Trim all trailing spaces\r\n- Add final newlines that are missing from some files\r\n\r\nDoing a `git diff -w master` will confirm that this is a whitespace-only change.  Adding ?w=1 to the files changed URL also demonstrates this.'
8276,'btford','angular docs error\nhttps://docs.angularjs.org/api/ng/service/$interpolate in this page\r\n\r\ni think\r\n```js\r\n// "allOrNothing" mode\r\n  exp = $interpolate(\'{{greeting}} {{name}}!\', false, null, true);\r\n  expect(exp(context, true)).toBeUndefined();\r\n  context.name = \'Angular\';\r\n  expect(exp(context, true)).toEqual(\'Hello Angular!\');\r\n```\r\nis wrong\r\nbut\r\n```js\r\n// "allOrNothing" mode\r\n  exp = $interpolate(\'{{greeting}} {{name}}!\', false, null, true);\r\n  expect(exp(context)).toBeUndefined();\r\n  context.name = \'Angular\';\r\n  expect(exp(context)).toEqual(\'Hello Angular!\');\r\n```\r\nis correct\r\n\r\nexp function is \r\n```\r\nfunction(context){\r\n}\r\n```\r\nwhen i test with jsfiddle \r\nhttp://jsfiddle.net/Bvc62/91/\r\n\r\n'
8275,'matsko',"Animations firing on page load when element within directive template\nAnimations seem to fire on page load when within a directive template. This does not occur when the animation resides on the app's initial html page.\r\n\r\nI have also tested this in angular 1.3.0-beta.16 with the same result.\r\n\r\nSimple plunker example: http://plnkr.co/edit/uAzcDhHPfAbiIj72L5zx?p=preview"
8274,'btford','imgSrcSanitizationWhitelist seems too broad\nin\r\nhttps://github.com/angular/angular.js/blob/master/src/ng/sanitizeUri.js\r\n\r\n\r\n    imgSrcSanitizationWhitelist = /^\\s*(https?|ftp|file|blob):|data:image\\//;\r\n\r\n\r\nprobably should be:\r\n\r\n    imgSrcSanitizationWhitelist = /^\\s*(https?|ftp|file|blob):|^\\s*data:image\\//;\r\n\r\notherwise:\r\n\r\n    javascript:alert(1)//data:image/\r\n\r\npasses as valid.'
8271,'petebacondarwin','docs(Scope): clarify naming in the $watch example\nFixes #8254'
8269,'IgorMinar','docs($http) Clarify how to specify JSONP callback.\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): $http\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nMake clear that it is the name of the callback that should be `JSON_CALLBACK`, instead of the current vague description that implies the string can be located anywhere in the URL.'
8268,'IgorMinar',"perf(ngForm,ngModel): move initial addClass to the compile phase\nOther then moving from link to compile time the only difference (which unit tests didn't seem to care about) is that `$animate.addClass(VALID_CLASS)` and `$animate.removeClass(INVALID_CLASS)` are no longer called at link time since VALID_CLASS is added at compile and INVALID_CLASS shouldn't exist. If anyone depends on the initial animation calls or on the `.removeClass(INVALID_CLASS)` then this change won't work, at least in its current form..."
8264,'IgorMinar','"minValidator" does not make sense as a formatter. Input number "min" does not show initial value when it is invalid\n###Problem  \r\n\r\nInitial invalid values are lost in the Form when $dirty is false. \r\n\r\nhttp://jsfiddle.net/PK3QH/7/\r\n\r\n\r\n\r\n###Scenario\r\n\r\nYou are displaying a Form intending to show fields with proper validation e.g. min=10 for <input type=number min=10>.\r\n\r\nThe model returns a number 3 as what was probably saved prior say in some database. Or your business rules have changed and the min value now must be 10 but it was say min=2 in the previous release of your application.\r\n\r\n###Possible diagnosis\r\ne.g.\r\n```\r\nminValidator\r\n```\r\n      if (attr.min) {\r\n        var minValidator = function(value) {\r\n          var min = parseFloat(attr.min);\r\n          return validate(ctrl, \'min\', ctrl.$isEmpty(value) || value >= min, value);\r\n        };\r\n    \r\n        ctrl.$parsers.push(minValidator);\r\n        ctrl.$formatters.push(minValidator); //I wonder if you really need this\r\n        ///all you need is a number validator\r\n      }\r\n```\r\n\r\n'
8255,'petebacondarwin','docs(guide/$location) global cntl deprecated\nPR partially fixes #8226\r\n\r\nThere is still a problem where the doc generator constantly adds ng-app to the body which is not necessary or wanted in the example.\r\n\r\nBTW: where can i find more info about the doc generator'
8253,'IgorMinar','fix($compile): updating the jQuery .context when it is replaced\nThis allows replaced DOM nodes to be GCed when using jQuery. The issue is pretty minor and the jQuery .context might be removed in the future (see https://api.jquery.com/context/), but the fix is pretty simple.\r\n\r\nFixes #7900'
8248,'petebacondarwin','docs(guide/module) fixed disabled global cntl\nExample contained a global controller.\r\n\r\n**How to reproduce:** https://docs.angularjs.org/guide/module\r\n\r\n**Plunker with fix:** http://plnkr.co/jwu6ZBTNzOZjVqy1lLEo'
8242,'btford','IE placeholder input event fix suppresses an extra event with interpolation\n109e5d1d39 introduced an issue which suppresses an extra input event when a placeholder changes due to interpolation and the input has a value.  I believe the extra input event does not fire if the input has a value which causes the next real input event to be ignored. I haven\'t tested <IE11\r\n\r\nSee http://plnkr.co/edit/qZSjmzuQfzTbkI9eprcR?p=preview\r\n\r\nThe 2 inputs using interpolation in the placeholder suppress an extra input event on initialization and again each time the interpolation value changes.\r\n\r\nAnother issue not solved by 109e5d1d39 is shown in the last 2 inputs of the plunker. I\'m not sure if that should be fixed within angular but it would be nice now that some of the placeholder issues are. Here is the fix I\'ve been using, with 109e5d1d39 I just had to switch `ignoreNextInput` to false since angular handles that initial input event now. This doesn\'t handle the extra input event when the placeholder changes but that would be easy to add.\r\n\r\n```\r\n//input events order for inputs with placeholders in IE - the focus/blur input event only occurs if the input has no value\r\n//  creation: input\r\n//  focus:    focusin focus input\r\n//  blur:     focusout input blur\r\nvar ignoreNextInput = !!$attrs.placeholder;\r\n\r\n$element.on("focusin focusout", function(e) {\r\n    ignoreNextInput = !!(!this.value && this.placeholder);\r\n});\r\n\r\n$element.on("input", function(e) {\r\n    if (ignoreNextInput) {\r\n        e.stopImmediatePropagation(); //(stopImmediate is used so the ng-model listener never receives it)\r\n        ignoreNextInput = false;\r\n    }\r\n});\r\n```'
8234,'caitp','maxlength issue in 1.3.0 beta 15 (invalid -> valid)\nHi,\r\n\r\nI was using beta 11 and everything was fine, upgraded to 15 and got the issue.\r\nI output a complex object with several ng-repeats etc, which eventually boils down to something like:\r\n```\r\n<input class="form-control" name="questionText" type="text" ng-model="question.text" placeholder="{{ \'ContentEntity_EvaluateTask_ClaimPlaceholder\' | i18n }}" maxlength="150" required />\r\n```\r\nI have CSS classes setup that highlight invalid fields with red. So after upgrade to beta 15 when entire object is rendered I see that input fields become red (my css style for invalid state) for a fraction of a second and then back to "valid" (non red). When I remove the maxlength attribute - no blinking occurs. As I mentioned beta 11 works just fine.\r\n\r\nThank you!\r\n\r\nP.S.: using IE11'
8233,'tbosch','fix($location): consider baseHref in relative link for legacy browsers\nRequest Type: bug\r\n \r\n**How to reproduce:**\r\n\r\nIn a legacy browser that doesn\'t support HTML5 push state (ie: IE9) have the following:\r\n\r\n- `$locationProvider.html5Mode(true).hashPrefix(\'!\');` in app configuration;\r\n- a number of routes such as `/foo`, `/bar` in the `$routeProvider` configuration;\r\n- `<base href="/en/">` in page headers;\r\n- `<a href="/en/foo">` in a link.\r\n\r\nWhen clicking a link, it is rewritten as: `http://host/en/#!/en/foo` \r\nExpected: `http://host/en/#!/foo`\r\n\r\nComponent(s): $location\r\n\r\nImpact: medium\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: \r\n\r\n\r\n\r\n**Other Comments:**\r\n\r\nI couldn\'t yet devise any test for covering this case. This fix concern a click handler on the `$rootElement` which (afaik) is not covered in the current tests.\r\n\r\nPlease let me know if you find it reasonable and if you have ideas on how to test for it.\r\nThanks!'
8221,'caitp','fix(select): revert commit to fix skipping over blank disabled options\nAn earlier commit caused an error where the first option of a select would be skipped\r\nover if it had a blank value. This fix adds a test case to identify this case and shows\r\nthat reverting the earlier commit causes the behavior to change.\r\n\r\nRelates to #7715'
8208,'rodyhaddad','chore(travis): get npm dependencies from npm-bundle-deps\nWIP for now\r\n\r\nSee https://github.com/btford/npm-bundle-deps'
8199,'btford','docs(guide/concepts.ngdoc) protocol relative URL\nRequest Type: bug\n\nHow to reproduce: Open the angular docs from https: https://docs.angularjs.org/guide/concepts\n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nWhen accessing the docs from https, the "Accessing the backend" example fails because it contains a hard coded protocol. By making the URL protocol relative, the example should work over http and https.'
8197,'caitp','docs(guide/unit-testing): add info on testing element transclude directives\n\r\nCloses #4505'
8195,'btford','feat(*): log warning message for deprecated APIs\nWe are planning to deprecate the `replace` option in `1.3.x`. "Deprecate" here means that we are not going to spend time implementing complex fixes related to this feature, and we would like to remove it in some future breaking `1.x` release.\r\n\r\nRight now the only place this is mentioned is in the docs.\r\n\r\nIn the same vein in `minErr`, it would be nice to have warnings that get stripped out at run-time.'
8193,'caitp','fix: text that looks like an html tag but is not causes [$sanitize:badparse] error\nThe provided unit test fails with this error.\r\n\r\n```\r\nError: [$sanitize:badparse] The sanitizer was unable to parse the following block of html: <\r\nnonEndingTag href <nonEndingTag href\r\n```\r\n\r\nThe provided change fixes it.\r\n\r\nCan you please backport the fix into v1.2.x as this is a show stopper for us. Thanks'
8191,'caitp',"fix(csp): fix autodetection of CSP + better docs\nCSP spec got changed and it is no longer possible to autodetect if a policy is\r\nactive without triggering a CSP error:\r\n\r\nhttps://github.com/w3c/webappsec/commit/18882953ce2d8afca25f685557fef0e0471b2c9a\r\n\r\nNow we use `new Function('')` to detect if CSP is on. To prevent error from this\r\ndetection to show up in console developers have to use the ngCsp directive.\r\n\r\n(This problem became more severe after our recent removal of `simpleGetterFn`\r\n which made us depend on function constructor for all expressions.)\r\n\r\nCloses #8162"
8190,'IgorMinar','fix($rootScope): remove support for a watch listener to be a string\nBREAKING CHANGE:\r\n\r\nPreviously, it was possible for a listener passed to $watch\r\nto be a string, interpreted as an angular expresison. This is no longer supported.\r\nThe listener now has to be a function.\r\nPassing a listener to $watch is still optional.'
8171,'btford',"docs(misc/faq): faq minor updates\nHyperlinked the email address and added a hyphen to 'client side'. This was originally in #8163. I'll make sure to remove unnecessary commits from original PR instead of closing it and creating a new one it next time."
8169,'matsko','docs(misc/contribute): fix syntax highlighting of URLS\nCloses #8168'
8168,'matsko',"contribute doc updated\nSome of the text in the 'Building AngularJS' section shows up in red. I changed the way the section is formatted, so this no longer happens. The steps in this section now matches the other sections on the page."
8162,'IgorMinar','CSP auto detection not working in 1.3.0-beta 15 and Packaged Chrome App?\nHello,\r\n\r\nI was playing with 1.3.0 in a Packaged Chrome App, and everything was working fine. Overwriting beta14 with beta15 gave me those errors, that went away when I added ng-csp to <html>. Is this intended?:\r\n\r\n```javascript\r\nRefused to evaluate a string as JavaScript because \'unsafe-eval\' is not an allowed source of script in the following Content Security Policy directive: "default-src \'self\' chrome-extension-resource:". Note that \'script-src\' was not explicitly set, so \'default-src\' is used as a fallback.`\r\n angular.min.js:97\r\nPc angular.min.js:97\r\nUb.readIdent angular.min.js:168\r\nUb.lex angular.min.js:164\r\nZa.parse angular.min.js:170\r\n(anonymous function) angular.min.js:99\r\ncompile angular.min.js:203\r\nba angular.min.js:59\r\nS angular.min.js:49\r\nS angular.min.js:49\r\nS angular.min.js:49\r\nS angular.min.js:49\r\nV angular.min.js:47\r\n(anonymous function) angular.min.js:18\r\nh.$eval angular.min.js:113\r\nh.$apply angular.min.js:114\r\n(anonymous function) angular.min.js:18\r\ne angular.min.js:36\r\nd angular.min.js:18\r\ngc angular.min.js:18\r\nqd angular.min.js:17\r\n(anonymous function) angular.min.js:223\r\na angular.min.js:147\r\n(anonymous function) angular.min.js:32\r\nq angular.min.js:7\r\nNe.c angular.min.js:32\r\nEvalError: Refused to evaluate a string as JavaScript because \'unsafe-eval\' is not an allowed source of script in the following Content Security Policy directive: "default-src \'self\' chrome-extension-resource:".\r\n\r\n    at Window.Function (native)\r\n    at Pc (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:97:478)\r\n    at Ub.readIdent (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:168:240)\r\n    at Ub.lex (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:164:196)\r\n    at Za.parse (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:170:201)\r\n    at chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:99:143\r\n    at Object.compile (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:203:255)\r\n    at ba (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:59:3)\r\n    at S (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:49:26)\r\n    at S (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:49:148) <button ng-click="doFirmwareCheck()"> angular.min.js:95\r\n(anonymous function) angular.min.js:95\r\n(anonymous function) angular.min.js:70\r\nba angular.min.js:59\r\nS angular.min.js:49\r\nS angular.min.js:49\r\nS angular.min.js:49\r\nS angular.min.js:49\r\nV angular.min.js:47\r\n(anonymous function) angular.min.js:18\r\nh.$eval angular.min.js:113\r\nh.$apply angular.min.js:114\r\n(anonymous function) angular.min.js:18\r\ne angular.min.js:36\r\nd angular.min.js:18\r\ngc angular.min.js:18\r\nqd angular.min.js:17\r\n(anonymous function) angular.min.js:223\r\na angular.min.js:147\r\n(anonymous function) angular.min.js:32\r\nq angular.min.js:7\r\nNe.c angular.min.js:32\r\nRefused to evaluate a string as JavaScript because \'unsafe-eval\' is not an allowed source of script in the following Content Security Policy directive: "default-src \'self\' chrome-extension-resource:". Note that \'script-src\' was not explicitly set, so \'default-src\' is used as a fallback.\r\n angular.min.js:97\r\nPc angular.min.js:97\r\nUb.readIdent angular.min.js:168\r\nUb.lex angular.min.js:164\r\nZa.parse angular.min.js:170\r\n(anonymous function) angular.min.js:99\r\ng angular.min.js:81\r\nu angular.min.js:63\r\nD angular.min.js:51\r\nS angular.min.js:48\r\nS angular.min.js:49\r\nS angular.min.js:49\r\nS angular.min.js:49\r\nS angular.min.js:49\r\nS angular.min.js:49\r\nV angular.min.js:47\r\n(anonymous function) angular.min.js:18\r\nh.$eval angular.min.js:113\r\nh.$apply angular.min.js:114\r\n(anonymous function) angular.min.js:18\r\ne angular.min.js:36\r\nd angular.min.js:18\r\ngc angular.min.js:18\r\nqd angular.min.js:17\r\n(anonymous function) angular.min.js:223\r\na angular.min.js:147\r\n(anonymous function) angular.min.js:32\r\nq angular.min.js:7\r\nNe.c angular.min.js:32\r\nEvalError: Refused to evaluate a string as JavaScript because \'unsafe-eval\' is not an allowed source of script in the following Content Security Policy directive: "default-src \'self\' chrome-extension-resource:".\r\n\r\n    at Window.Function (native)\r\n    at Pc (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:97:478)\r\n    at Ub.readIdent (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:168:240)\r\n    at Ub.lex (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:164:196)\r\n    at Za.parse (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:170:201)\r\n    at chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:99:143\r\n    at g (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:81:230)\r\n    at u (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:63:242)\r\n    at D (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:51:27)\r\n    at S (chrome-extension://jeecijlolcehjchhmbdccimkbhhibjdm/libs/angular.min.js:48:491) angular.min.js:95\r\n(anonymous function) angular.min.js:95\r\n(anonymous function) angular.min.js:70\r\nh.$apply angular.min.js:114\r\n(anonymous function) angular.min.js:18\r\ne angular.min.js:36\r\nd angular.min.js:18\r\ngc angular.min.js:18\r\nqd angular.min.js:17\r\n(anonymous function) angular.min.js:223\r\na angular.min.js:147\r\n(anonymous function) angular.min.js:32\r\nq angular.min.js:7\r\nNe.c angular.min.js:32\r\n```'
8161,'matsko','fix(jqLite): .css() retrieves computed style also\nfixes #2866 '
8158,'rodyhaddad',"fix(select): force visual update in IE\nIE9, IE10 and IE11 would always show the first <option> as\r\nselected when the user moves from a null <option>\r\nto a non-null one in a non-null <select>.\r\nEven though the model was being updated correctly,\r\nvisually, the first <option> always appeared selected.\r\n\r\nSetting the `selected` property twice in a row\r\nseems to fix it in all the three versions mentioned above.\r\n\r\nCloses #7692\r\n\r\n----\r\n\r\nI doubt we can actually write tests for this, since it's only visual"
8157,'vojtajina','test(jqLite): make iframe contents() test less flaky\n'
8154,'IgorMinar',"Fix #6128 and #8150\nRequest Type: bug\r\n\r\nHow to reproduce: it('should not double quote dates', function() {\r\n        $httpBackend.expect('GET', '/url?date=2014-07-15T17:30:00.000Z').respond('');\r\n        $http({url: '/url', params: {date:new Date('2014-07-15T17:30:00.000Z')}, method: 'GET'});\r\n      })\r\n\r\nCurrently, datetimes passed into $http.get params are wrapped in double quotes and then escaped giving urls like this: /url?date=%222014-07-15T17:30:00.000Z%22\r\n\r\nComponent(s): $http\r\n\r\nImpact: large\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\n\r\n\r\n**Other Comments:**\r\n\r\nSee comments on #6128, #8150"
8147,'IgorMinar','refactor(bootstrap): Remove support for old bootstrap mechanisms\nRemove support for bootstrap detection using the element id or the element class. E.g.\r\n\r\n```\r\n<div id="ng-app">...</div>\r\n<div class="ng-app: module">...</div>\r\n```\r\n\r\nRemoves reference to bootstrap using IE7\r\n\r\nBREAKING CHANGE:\r\n\r\nIf using any of the mechanisms specified above, then migrate by\r\nspecifying the attribute `ng-app` to the root element. E.g.\r\n\r\n```\r\n<div ng-app="module"\r\n```'
8141,'petebacondarwin','feat(ngTransclude): allow ngTransclude to be used as an element\n'
8125,'IgorMinar','fix $browser: change to encodeURIComponent and decodeURIComponent for co...\nRequest Type: bug\n\nHow to reproduce: Include special characters (€) in a cookie and it will not decode correctly.\n\nComponent(s): ngCookies\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nthe self.cookies method in $browser was using escape and unescape to handle the cookie name and value. These methods are deprecated and cause problems with some special characters (€). The method has been changed to use the replacement encodeURIComponent and decodeURIComponent.'
8124,'btford','Update bootstrap.ngdoc\nUpdate incorrect variable name in html.'
8122,'btford','Update index.ngdoc\nAdded information how to set path to chrome binary'
8113,'rodyhaddad',"fix($parse): correctly assign expressions who's path is undefined and that use brackets notation\nCloses #8039"
8103,'petebacondarwin','Memory leak with `select`\nHi. I have memory leaking on `select`s when i dont use `ng-options`. Sample month-picker\r\n```html\r\n<select ng-model="month" ng-options="month.value as month.text for month in months">\r\n      <option value="">Month</option>\r\n</select>\r\n```\r\nAnd \r\n```html\r\n  <select ng-model="month">\r\n        <option value="">Month</option>\r\n        <option value="1">January</option>\r\n        <option value="2">February</option>\r\n       ....\r\n        <option value="12">December</option>\r\n    </select>\r\n```\r\nDifference is ~5Mb in Chrome Profiles, and if i have my directive ~10 times - it gives even visual effects. Why this is happening? \r\nIn \'month\' case replace with array-options is not difficult, but also i have day-picker and there is some cases with numbers \'29\', \'30\', \'31\'\r\n\r\nThanks. Maybe you can give me some advice in this cases?\r\nP.S. haven\'t jquery, haven\'t angular.bootstrap or any other'
8102,'btford','docs(filter/filter): adding not documented feature\nRequest Type: docs\r\nComponent(s): misc core\r\nImpact: None\r\nComplexity: small\r\nMissing feature documentation. Will be helpfull.\r\nUndocumented feature is really useful.'
8101,'rodyhaddad',"chore($parse): remove simpleGetter optimizations as they're no longer valid\nThis removes the simpleGetter optimization\r\n\r\nLooking back at the numbers with Igor, and why it was introduced in the first place (864b2596b246470cca9d4e223eaed720f4462319), the optimization is no longer doing any good.\r\n\r\nRelated #7540"
8094,'juliemr','chore(tests): increase timeout for navigation in ng-href tests to avoid timeouts\nPreviously, the timeout for ng-href tests waiting for the url change after a link\r\nwas clicked was only 1000 ms. This was causing some flaky timeouts, so increasing\r\nthe wait to 5000 ms.'
8092,'matsko',"ng-animate-children does not always work with class-based animations\nI played around with ng-animate-children and I think I found a few bugs.\r\n\r\na) when I use ng-class inside ng-if, the child animation is not called when the element leaves\r\nb) when I use $animate.enter / leave on the parent element, a child element with ng-class does not get animated at all, and when you execute enter while leave still runs, enter does not work. (click the move animation button quickly while executes leave). Sometimes also ng-animate and slide-add classes get stuck on the element.\r\n\r\nBoth animations use the save $scope variable.\r\n\r\nI set up a plunker here:\r\n~~http://plnkr.co/edit/tpl:FrTqqTNoY8BEfHs9bB0f?p=preview~~\r\nhttp://plnkr.co/edit/CE4nEBU1e2jIhwUmUzdK?p=preview\r\n\r\nI also tested case b) with $animate.addClass instead of ng-class, which also didn't work Ideally this should also work.\r\n\r\n@matsko Can you please have a look? Thanks!"
8080,'tbosch','$setValidity somehow breaks model binding in 1.3.0 Beta 12 and after\nSince version 1.3.0 Beta 12 my models are losing properties after manually invalidating input fields. I created a JSFiddle to demonstrate this behavior. \r\n\r\nType something in the field, press the button to invalidate the field, and type something in the field again. In Beta 11 my model stays up to date with the input field (see "Debug Model" below):\r\nhttp://jsfiddle.net/mpiecko/q2s7Z/\r\n\r\nNow watch the "Debug Model" if you repeat these steps with Beta 12. The "fullName" property disappears when you type something in the field, invalidate it with the button, and then type something again:\r\nhttp://jsfiddle.net/mpiecko/q2s7Z/1/\r\n\r\nI\'m not sure if this is a bug or an upcoming change in handling of form errors.\r\n\r\nMichael\r\n\r\n '
8075,'rodyhaddad','fix(jqLite): use .children to fetch child elements but fallback to .childNodes for SVGs in IE\ne35abc9d broke `jqLiteDealoc` on SVG elements in IE because `.children` is not supported on SVGs in IE (https://developer.mozilla.org/en-US/docs/Web/API/ParentNode.children#Browser_compatibility).\r\n\r\nThis change adds an SVG test and fixes it by doing `.children || .childNodes`. I also added `.children` in a few more places in addition to where e35abc9d originally did. Although if the `.childNodes` fallback is always required for IE, is it still worth using `.children`?'
8070,'matsko','fix(parseKeyValue): ignore properties in prototype chain.\nPreviously, properties (typically functions) in the prototype chain\n(Object.prototype) would shadow query parameters, and cause them to be\nserialized incorrectly.\n\nThis CL guards against this by using hasOwnProperty() to ensure that only own\nproperties are a concern.\n\nFixes #8068'
8069,'btford','docs(tutorial/step_05): fix typo\n'
8067,'jeffbcross','WIP STAGING for #8300 [[no-merge]]\nStaging ground for $q improvements in #8300, this is a work in progress.\r\n\r\nThe work is in 3 stages, each building on the previous stage:\r\n\r\n1. Add constructor for promises (ES6-style interface, landed in f3a763fd2edd8a37b80c79a5aaa1444460cd2df7)\r\n2. Port subset of functionality from [Bluebird](github.com/petkaantonov/bluebird), we can now get a perf improvement by sticking methods used for each promise in the prototype chain and avoid creating garbage.\r\n3. Modify the error logging behaviour to be similar to Bluebird, by only logging an error for unhandlde rejections.\r\n\r\nThis is somewhat challenging, as promises in $q currently behave somewhat inconsistently (sometimes rethrowing errors, sometimes not, etc), and it will take some time to finalize this. Hence, staging ground.'
8065,'btford','Fix docs for template and replace properties\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): $compile\n\nImpact: large\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nSee issue #8062'
8062,'btford',"template (Directive Def Object) description in $compile docs\n[The docs](https://docs.angularjs.org/api/ng/service/$compile) ([source](https://github.com/angular/angular.js/blob/65a44dd49cf594008ce4d21de4b57abeab7fe52c/src/ng/compile.js#L228)) for `template` state:\r\n\r\n> replace the current element with the contents of the HTML. \r\n\r\nLet's do this bit by bit.\r\n\r\n> replace the current element\r\n\r\nFirst, shouldn't 'current element' change to 'the element on which the directive is declared'.\r\n\r\nThen:\r\n\r\nFor the following element:\r\n\r\n    <my-directive>Original</my-directive>\r\n\r\nThis directive:\r\n\r\n    myApp.directive( 'myDirective', function() {\r\n        return {\r\n            restrict: 'E',\r\n            template: 'New'\r\n        }\r\n    });\r\n\r\nWill result in:\r\n\r\n    <my-directive>New</my-directive>\r\n\r\nSo the current element isn't replaced at all (`<my-directive>..</my-directive>` is still there).\r\n\r\nWhat am I missing here?\r\n\r\n> contents of the HTML\r\n\r\nWhich contents?\r\n\r\nIsn't contents what's between tags? As in:\r\n\r\n    <tag>contents</tag>\r\n\r\nAnd which HTML?\r\n\r\nShouldn't it read:\r\n\r\n> Replaces the contents of the element on which the directive is declared with the markup provided in the `template` property.\r\n\r\nAlso:\r\n\r\n> The replacement process migrates all of the attributes / classes from the old element to the new one. See the Directives Guide for an example.\r\n\r\nI don't really understand this and I couldn't find anything on the Directives Guide.\r\n\r\nIt really seems that the text applies more to the (deprecated) `replace` property, rather than template."
8061,'petebacondarwin','Memory leak when using ngView and jquery\nThe following plunker demonstrates the issue:\r\nhttp://plnkr.co/edit/BS7EQlBoJDfbMN8bcUop?p=preview\r\n\r\nSwitching between View1 and View2 a few times makes heap snapshots go up to 40-50 MB.\r\nThe problem is related to jquery >= v2.0. Switching to jquery 1.11.1 fixes the problem.\r\nUsing a directive with templateUrl and replace=true (which I know is deprecated since 1.2.17) in the view is also needed.\r\n\r\n**Reproducible**: always\r\n**Browsers**: Chrome 35, Chrome canary (with --js-flags="--nocrankshaft --noopt --nouse-ic") and possibly Firefox 30 (memory goes up easily to 400-500 MB but I don\'t know a way to force GC in FF)\r\n**Operating system**: Windows 8'
8055,'tbosch','feat($compile): add partialDigest property in directive definition\n'
8054,'btford','chore(tests): fix warning about a non-unique element locator in e2e test...\n...s'
8053,'petebacondarwin','Example under "Show me an example use SCE" heading not showing.\n@btford  and I were working on another issue and we saw the example missing on the site even though its in the code. Thanks, @petebacondarwin \r\n\r\nhttps://docs.angularjs.org/api/ng/service/$sce'
8039,'rodyhaddad','ng-model pointing to an expression containing square brackets fail if a middle value is undefined\nIf I have a `ng-model` pointing to an expression which contains square brackets, and a middle value is undefined, an error like the following will be thrown:\r\n\r\n```\r\nTypeError: Cannot set property \'foo\' of undefined\r\n```\r\n\r\nExample code:\r\n\r\n```html\r\n<input type="text" ng-model="foo.bar[\'baz\']">\r\n<input type="text" ng-model="foo[\'bar\'].baz">\r\n```\r\n\r\nI have tested this in v1.2.16 and then in v1.2.19. Both have the same problem.\r\nReproducible plunk: http://plnkr.co/edit/NKgyYDkqjOugjbNjWnmA?p=preview'
8026,'rodyhaddad','chore(jshint): enforce jshint for tests\nCloses #8023'
8025,'caguillen214','V1.2.x\nCherry-picks '
8011,'btford',"Update controller.ngdoc\nIf it is not recommended to use a constructor function to create controllers, why should it be shown as possible in the documentation? \r\n\r\nOne of the most common complaints about AngularJS is that it doesn't enforce any variety of convention, this is intentional and I generally like this however if we can avoid outright bad implementations or examples I believe we should.\r\n\r\nThe only real reason to avoid doing so is to avoid introducing the potential new user to a somewhat complex new concept, however it is better to introduce new users to best practices instead of overly simplified examples.\r\n\r\n"
8004,'caitp',"fix typo in descriptions and add test to match blank object attribute\nRequest Type: test\n\nHow to reproduce: \n\nComponent(s): misc core\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nwhile investigating #7890 I found a couple of typos in the filter tests, and used the test suite to prove the problem was working as specified. There were no test cases specifically to show the behaviour that I could find, so committed it as an example of matching empty string through use of exact match.\n\n**Other Comments:**\n\ntest(filter): fix typo in descriptions and add test to match blank object attribute\r\n\r\nTwo descriptions contain typo's to the word predicate.\r\nAlso, to prove behaviour in ticket 7890, create a new test to display filter\r\n\r\nCloses #7891"
7999,'caitp','fix($timeout/$interval): if invokeApply is false, do not use evalAsync\n$evalAsync triggers a digest, and is unsuitable when it is expected that a\r\ndigest should not occur.\r\n\r\nBREAKING CHANGE\r\n\r\nPreviously, even if `invokeApply` was set to false, a $rootScope digest would occur during promise resolution. Workarounds include manually triggering `$scope.$apply()`, or returning `$q.defer().promise` from a promise callback, and resolving or rejecting it when appropriate.\r\n\r\n```js\r\nvar interval = $interval(function() {\r\n  if (someRequirementFulfilled) {\r\n    $interval.cancel(interval);\r\n    $scope.$apply();\r\n  }\r\n}, 100, 0, false);\r\n```\r\n\r\nor:\r\n\r\n```js\r\nvar interval = $interval(function (idx) {\r\n  // make the magic happen\r\n}, 1000, 10, false);\r\ninterval.then(function(idx) {\r\n  var deferred = $q.defer();\r\n  // do the asynchronous magic --- $evalAsync will cause a digest and cause\r\n  // bindings to update.\r\n  return deferred.promise;\r\n});\r\n```'
7991,'btford','feat(ngModel): bind to getters/setters\nCurrently, you might do this if you want to bind to getters/setters:\r\n\r\n> controller\r\n\r\n```javascript\r\n// ...\r\n$scope.watch(function () {\r\n  return myModel.getterSetter();\r\n}, function (newValue) {\r\n  $scope.someProp = newValue;\r\n});\r\n\r\n$scope.watch(\'someProp\', function (newValue) {\r\n  myModel.getterSetter(newValue);\r\n});\r\n// ...\r\n```\r\n\r\n> template\r\n\r\n```html\r\n<input ng-model="someProp">\r\n```\r\n\r\nThe implementation in this PR changes the semantics of `ngModel` in the following ways:\r\n\r\nIf the expression bound to `ngModel` resolves to a function, the function is invoked to get the current value to be expressed in the DOM. When the binding changes, if the expression bound to `ngModel` resolves to a function (at that time) the function is invoked with the new value.\r\n\r\nThis means instead, you could do this:\r\n\r\n> controller\r\n\r\n```javascript\r\n// ...\r\n$scope.myModel = myModel;\r\n// ...\r\n```\r\n\r\n> template\r\n\r\n```html\r\n<input ng-model="myModel.getterSetter">\r\n```\r\n\r\nI like that to end developers, this feels like "uniform access" for common cases. I don\'t like that this means there\'s a difference in semantics between `ngModel` and expressions elsewhere in Angular.\r\n\r\nThis would be a breaking change, but I don\'t think that this would affect any legitimate use cases. The only case I can think of is if hypothetically, you bind to some property that\'s originally a function, overwriting it with a string. I can\'t think of any good reason to write controller code like that.\r\n\r\n@IgorMinar suggested a different syntax so that the difference in semantics is obvious. Something like:\r\n\r\n```html\r\n<input ng-model="myModel.getterSetter()">\r\n```\r\n\r\nI like that this makes the semantics obvious. I don\'t like that this still violates the "uniform access principle."\r\n\r\nCloses #768'
7990,'rodyhaddad',"fix($http): don't remove content-type header if data is set by request transf...\n...orm\r\n\r\nThe test could arguably also go into the transform section, not sure about that.\r\n\r\nFixes #7910"
7973,'rodyhaddad',"Add common solution for $parse:isecdom\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): $parse\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nCommonly this error happen when returning a value in an ng-click handler.\n\nAnd especially with CoffeScript that returns the last lines.\n\n**Other Comments:**\n\nIt's sad that there is no more comments on the docs, because that's the place this kind of things would be.\n\nIf you google it, most people have the same issue:\n\nhttps://groups.google.com/forum/#!msg/angular/bsTbZ86WAY4/hh_319IrmFoJ\nhttp://stackoverflow.com/questions/23838497/coffeescript-referencing-dom-nodes-in-angular-expressions-is-disallowed\nhttp://jorshasaur.us/referencing-dom-nodes-in-angular-expressions-is-disallowed/"
7972,'jeffbcross','Returned Resource Class Keys\nI am trying to iterate through the keys of the JSON returned by a resource. The JSON looks like this:\r\n```json\r\n{\r\n  2014: ["name", "other name"],\r\n  2013: ["name", "other name"],\r\n}\r\n```\r\nWhen I do:\r\n```javascript\r\nvar returnedJSON = $resource(json_url).get();\r\n\r\nfunction getKeys() {\r\n  return Object.keys(returnedJSON);\r\n}\r\n\r\ngetKeys() === [\'$promse\', \'$resolved\']\r\n# but returnedJSON.2014 and returnedJson.2013 do work...\r\n```\r\n\r\nIs it possible to get the actual JSON response from the returned Resource class, once the HTTP request has resolved?'
7966,'IgorMinar','Jqlite data leak\nThis PR sits on top of #7942 so only the last commit is relevant here while the previous PR is not merged into master.'
7965,'petebacondarwin',"[1.3-beta16] ngModel $parsers regression vs. v1.2\nI'm having issues with the AngularStrap datepicker in the latest v1.3 beta.\r\n\r\nBasically, I've found out that the ngModel $parsers won't be called if `$setViewValue` is called multiple times with the same value/reference. It was the case in the v1.2 branch.\r\n\r\nThis is be problematic when we are using objects that change values but keep the same reference (such as Dates).\r\n\r\nCheck the following plunkers (console.warn):\r\n- v1.2: http://plnkr.co/edit/PuleeGHkLHj3RvYSobs5?p=preview\r\n- v1.3: http://plnkr.co/edit/yRL4JR0aVY3kDGgwLXX2?p=preview\r\n\r\nMight be related to [this commit](https://github.com/angular/angular.js/commit/facd904a613e716151a13ab7460b5e6206e0442b#diff-c244afd8def7f268b16ee91a0341c4b2R1759)"
7963,'rodyhaddad','perf($compile, jqLite): reduce creation of unnecessary jquery objects\nThis removes the creation of many duplicate or unnecessary jQuery objects in the compile/link phases as well as in some jqLite methods.\r\n\r\nMost of the changes are pretty minor and safe (as far as myself and the tests can tell).\r\n\r\nThe only bigger change is exposing `jqLiteData/jqLiteRemoveData` as `jqLite.data/removeData` to match the jQuery equivalent (https://api.jquery.com/jquery.data/). This allows getting/setting data without creating the jQuery wrapper object and allows for the biggest reduction in jQuery objects in compile/link. This also reduces the jqLite objects created in the `scope/isolatedScope/data/inheritedData` methods and simplifies `jqLiteInheritedData`. Note that this change overrides the first commit.\r\n\r\nIf interested I can squash all the commits and maybe add more tests for the jqLite changes.'
7951,'tbosch','srcset used instead of src for img attribute\nIn `ngSrc` documentation `srcset` is used instead of `src` as `img` element attribute in the example.'
7944,'matsko','fixed email regexp\n'
7942,'IgorMinar',"fix(jqLite): don't attach event handler to comments (memory leak)\n"
7936,'ealtenho','Number field validation broken\nSteps to reproduce: just try to fill non number chars in example at https://docs.angularjs.org/api/ng/input/input%5Bnumber%5D\r\nand check validation result. In myForm.input.$error collection the "number" property is always false.\r\n'
7934,'tbosch','Update input.js\nAs seen on this line of code:\r\nhttps://github.com/angular/angular.js/blob/master/src/ng/directive/input.js#L1627'
7930,'rodyhaddad','fix($rootScope): $watchCollection should handle NaN in objects\nThis fixes a potential infinite digest in $watchCollection when one of the values is NaN. This was previously fixed for arrays, but needs to be handled for objects as well.'
7929,'btford','ng-class does not change classes properly when there are duplicate class names\nI have the following icon with fontawesome:\r\n```html\r\n<i data-ng-class="{\'fa-clock-o fa purple\':suggestion.notificationStatus.id == 2, \'fa fa-circle-o orange2\':suggestion.notificationStatus.id == 1}"></i>\r\n```\r\nWhen I change `suggestion.notificationStatus.id`, `ng-class` removes `fa` from classes that applied to element.\r\nI saw the source code. In `$AnimateProvider` there is a method named `setClass`. The problem is it first adds classes then removes classes. The parameters that this method receive are as following:\r\n* element: `i`\r\n* add: `"fa-clock-o fa purple"`\r\n* remove: `"fa fa-circle-o orange2"`\r\n* done: `undefined`\r\n\r\nI think a good solution is not to have any duplicate classes in `setClass` method because changing the order of remove and add in this method may raise other problems. So it can be fixed by fixing `updateClasses` function of `ng-class` directive.\r\n\r\nNote that I am using angularjs v1.2.16'
7922,'rodyhaddad','feat(currencyFilter): add fractionSize as optional parameter\ncurrencyFilter accepts number of decimals to round off to\r\n\r\nCloses #3642'
7913,'petebacondarwin',"nested transclusion memory leak\nWhen the transclude function creates the scope it destroys that scope on the '$destroy' jQuery event. If that element is a comment (because it was also transcluded, for example) then:\r\n* jqLite adds and leaks data on the comment node, but $destroy seems to get called (the added test shows this)\r\n* jQuery does not add/leak data on the comment node, so $destroy does not get called (the modified test shows this)\r\n\r\nHere's another example: http://plnkr.co/edit/89BK3LXL6USYoATQhg2c?p=preview"
7910,'Narretz','AngularJS incorrectly(?) strips away "Content-Type" from headers when "data" is undefined originally but is assigned an object by a TransformRequest function.\nHere is the relevant chunk of code:\r\nhttps://github.com/angular/angular.js/blob/master/src/ng/http.js#L609\r\n\r\n**Scenario**\r\n\r\n1. add a TransformRequest function that adds a property to `data`. e.g.\r\n\r\n```js\r\n$http.defaults.transformRequest.unshift(addingRequestTransformer);\r\n```\r\n\r\nwhere `addingRequestTransformer` is something like\r\n```js\r\nfunction(reqBody, headersGetter) {\r\n    // ...\r\n    if (reqBody === undefined) {\r\n        reqBody = { \'myProp\': \'myVal\' };\r\n    } else {\r\n        reqBody[\'myProp\'] = \'myVal\';\r\n    }\r\n    return reqBody;\r\n};\r\n```\r\n\r\n2. make a post request without `data`\r\n\r\n```js\r\n$http.post("http://my.url");\r\n```\r\n\r\nThis request ends up going with `Content-Type: text` because of browsers\' default behavior because `Content-Type` is stripped away by the code referenced above.\r\n\r\nThis reproes on latest Chrome, FF, IE (as expected)\r\n\r\nLooking at the immediate surrounding of the $http code, the intent seems to be to send `Content-Type: json` as long as `data` is *not* undefined which makes me think it should be checked after transforms are applied (i.e. checking `reqData` instead of `config.data` for `undefined`).'
7907,'rodyhaddad','One-time binding deep-copies an object\nI have noticed that one-time binding with `::` always wants to deep-copy objects in an expression, whereas normal binding will simply store and compare a reference.\r\n\r\nMinimal example: http://jsfiddle.net/mhelvens/PXdkK/1/\r\n\r\nThis example demonstrates the inconsistent behavior by binding to an object that holds a reference to a `$scope`. The one-time binding prompts an `ng:cpws` error, indicating that a deep copy is being made.\r\n\r\nI would prefer the traditional behavior for various reasons. But in any case, I assume that this inconsistency was not deliberate.'
7902,'IgorMinar','fix(forEach): add the array/object as the 3rd param like the native forEach\nThis makes all the different object types supported by `angular.forEach` more like the native `Array.forEach` by adding the 3rd argument to the callback. Also adding tests to make sure all the different object types invoke the iterator with all 3 arguments and the context.'
7900,'IgorMinar',"replace directive $element still references replaced DOM element\n...if using jQuery instead of jqLite because the jQuery $element still references the replaced DOM element as the context. This only occurs if the element is replaced and not cloned since cloning creates a new jQuery object instead of just modifying the compiled $element. (http://plnkr.co/edit/vGwzc1FGt127pQ1wbKNT?p=preview)\r\n\r\nThis isn't huge, and isn't really a memory leak because it will get destroyed along with the $element, but it would be nice if the replaced DOM was cleaned up. I think this can be fixed in the $compile `replaceWith` helper by properly clearing the jQuery context...\r\n\r\nedit: I originally had something about replace & -start/end in here too but that seems unrelated."
7895,'btford','docs: Update http.js\nThe previous way is not good for minimizing javascript.'
7892,'tbosch','IE8 9: a link route error(angular 1.2.17 1.2.18)\nif my angular version is 1.2.18\r\nbase element, href is \'/n/b/\'\r\nmy a link\'s href is \'c/xx\'\r\nso i click this link then\r\n* if the current location.href is \'http://www.x.com/n/b/#!/\'\r\n> location.href should be \'http://www.x.com/n/b/#!/c/xx\' but the result is error, so i debug this and find that in line 9714 the "absHref" is \'http://www.x.com/n/b/#!//c/xx\'\r\n\r\n* if the current location.href is \'http://www.x.com/n/b/#!/c/yy\'\r\n> location.href should be \'http://www.x.com/n/b/#!/c/xx\' but the result is error, so i debug this and find that in line 9714 the "absHref" is \'http://www.x.com/n/b/#!/c/yy/c/xx\'\r\n\r\nPlease check it.\r\n'
7887,'rodyhaddad',"perf($compile): remove no longer need nodeType filter when setting $scope data\nNow that a196c8bc added the nodeType check it doesn't have to be done by the link function.  This avoids the `.eq()` call which created a new jQuery/jqLite object for each element."
7872,'matsko','ng-class animation is broken when using with ng-repeat and orderBy filter\nHello,\r\nwhen using ng-class animations with ng-repeat directive and also using with orderBy Filter ng-repeat animation overrides the ng-class animation. (className-add never works and className-remove sometimes works). Is this a bug or a normal behaviour?\r\n\r\nHere is the plunker:\r\nhttp://plnkr.co/edit/29ORioZgazFwSvKn95ks?p=preview\r\n\r\nAngular version: 1.2.18 (also tested with latest 1.3 and result is the same)\r\n\r\nThank you'
7871,'btford','docs: parent scope event propagation unclear\nhttps://github.com/angular/angular.js/blob/master/src/ng/rootScope.js#L157-L158\r\n\r\nThose lines list `$digest()` twice as the event(s) being propagated to `$new()`.'
7870,'lgalfaso','Filter number converts 0 to 5,e-9.00000000\n{{ 0 | number:8 }} should return "0.00000000" but it returns "5,e-9.00000000"\r\n\r\nstarted from AngularJS 1.2.17\r\nplunker http://plnkr.co/edit/UA1a7QNpESU1fEO1LE6S?p=preview'
7857,'btford',"Update example to change {{user}} to {{user.name}}\nIf user has actions property, it should be an object, which means if you {{user}}, it'll print out the object."
7855,'IgorMinar',"Version 1.2.15 broke functionality with select and ng-options\nWe have some functionality where it's possible that after a select is changed, the model could end up back at the same value it was before. This worked fine up to version 1.2.14. See this fiddle: http://jsfiddle.net/k8EaA/\r\nAs the select is changed, the select shows the correct model ('c') after it is changed.\r\n\r\nSee this fiddle with version 1.2.15: http://jsfiddle.net/kdG38/\r\nAs the select is changed, it stays on what it was changed to, and doesn't reflect what's in the model.\r\n\r\n\r\nWe also have some functionality that removes certain options in certain cases. Basically, we have a few selects that all have the same options, and then don't allow the same option to be selected for the other selects. We do this by removing options that are already selected in the other selects.\r\nThis issue only seems to be a problem in IE11. In IE11, view this fiddle with version 1.2.14: http://jsfiddle.net/uLUXP/\r\nChange the last select to AAA. All the other selects show the correct value based on the model.\r\n\r\nSee this fiddle with version 1.2.15: http://jsfiddle.net/S37Yp/\r\nChange the last select to AAA. All the other selects now show the first option, which does not match the model.\r\n\r\nIt seems very likely that this behavior was introduced with this commit: https://github.com/angular/angular.js/commit/dc149de9364c66b988f169f67cad39577ba43434\r\nI tried reverting those changes locally, and then the selects work as expected.\r\n\r\nI tried all this with the latest 1.2.18 version, and these issues still exist.\r\n"
7850,'rodyhaddad','Pristine controls stay pristine after form submit\nIt seems that changing control to dirty must stand before last committed view value check in $commitViewValue function in https://github.com/angular/angular.js/blob/0ebab08e66f953397b044be9533d764961fbc9ea/src/ng/directive/input.js.\r\nLines 1789 - 1796 move before line 1784.\r\n\r\n'
7844,'btford',"Missing example in Forms guide\nWhen explaining ng-model-options, there's no print of user.data to show the difference between the default behaviour and updateOn: 'blur'"
7839,'rodyhaddad','Make angular.equals support objects with circular references\nPer #7724'
7837,'petebacondarwin','fix(ngModel): test & update correct model when running $validate\nIf `$validate` is invoked when the model is already invalid, `$validate` should pass `$$invalidModelValue` to the validators, not `$modelValue`. More over, if the model has become valid, the previously invalid model should be assigned to `$modelValue`. Lastly, in case the model has become invalid, the previously valid model should be assigned to `$$invalidModelValue`.\r\n\r\nCloses #7836'
7825,'juliemr','fix the protractor example(by.select to by.model).\nI changed to `by.model` because `by.select` is deprecated.'
7824,'petebacondarwin',"chore(doc-gen): fix formatting of logProvider properties \nhttps://docs.angularjs.org/api/ng/provider/$logProvider\r\n\r\nand\r\n\r\nhttps://github.com/angular/angular.js/blob/master/src/ng/log.js#L50\r\n\r\nDon't match"
7820,'btford','update the `parseAs` method name (it was `parse`)\n'
7809,'btford','feat(ngRoute): alias string as redirectTo property in .otherwise()\nAllow .otherwise() to interpret a string parameter\r\nas the redirectTo property to handle the common misinterpretation\r\nthat .otherwise() takes as a parameter the string to be matched\r\nin the otherwise case.\r\n\r\nCloses #7794'
7805,'caitp','chore(ngLocale): change update-closure and closureSlurper to use the ext...\n...ra locales for number formats.\r\n\r\nThis download numberSymbolsExt.js and use it to generate number formats for the "extra" locales.\r\n\r\nFixes issue #7799 by using the correct fr-ch and it-ch locales number formats.'
7799,'caitp',"i18n fr_ch and it_ch locales uses wrong decimal separator\nHi,\r\nThoses two locales uses ',' as a decimal separator instead of '.' which is standard in Switzerland.\r\nThe locale de_ch uses the correct decimal separator.\r\n\r\nFollowing the guidelines I've checked Closure's i18n scripts, and they are correct. \r\nSee [fr_ch](https://github.com/google/closure-library/blob/master/closure/goog/i18n/numberformatsymbolsext.js#L4788) and [it_ch](https://github.com/google/closure-library/blob/master/closure/goog/i18n/numberformatsymbolsext.js#L5824)\r\n\r\nThus, I'm submiting it here."
7794,'btford',"feat: warn when passing a string to $routeProvider.otherwise()\nIn your route configuration, it's easy to accidentally write:\r\n\r\n```javascript\r\n$routeProvider.otherwise('/');\r\n```\r\n\r\nThinking that it will behave like:\r\n\r\n```javascript\r\n$routeProvider.otherwise({ redirectTo: '/' });\r\n```\r\n\r\nWhat will actually happen is that the app's routing will have no otherwise behavior.\r\n\r\n`$routeProvider.otherwise` should either throw an error, or alias the string as the `redirectTo` property of the configuration. I have a slight preference towards a string parameter be the same as `redirectTo`.\r\n\r\nThoughts? @caitp @matsko @IgorMinar "
7786,'rodyhaddad','fix if/when\nYou can not change the use of `{{}}`/`ngBind` based on the time when it is used. So this should be "if".'
7784,'matsko','fix($animate): remove ng-animate class after canceling animation\n`ng-animate` class gets stuck on element after canceling animation.\r\nBug example, double click button to catch it\r\nhttp://plnkr.co/edit/vDQU8sJOKdoluHWdLJvJ?p=preview\r\n\r\nFixes #7766'
7779,'pkozlowski-opensource','Response headers with empty values should return empty string, not null\nIf the response to a $http request contains a header but its value is empty, the value should be an empty string, not "null". Right?\r\n\r\nI get foo == null even though X-Foo-Meta is in the response headers.\r\n\r\n```\r\n$http.get("/validate")\r\n   .success(function(respBody, status, respHeaders, config) {\r\n   $scope.foo = respHeaders(\'X-Foo-Meta\');\r\n   // it seems foo should be "", not null, here\r\n   ...\r\n```\r\n\r\nThe bug seems to be in angular.js v1.2.17\r\n\r\n```\r\nfunction headersGetter(headers) {\r\n      ...\r\n      return headersObj[lowercase(name)] || null;\r\n```'
7773,'btford','Update loader.js\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): di\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\ndocumentation update: also mention controllers as components in a module\n\n**Other Comments:**\n\nimprove descriptive comment on module'
7766,'matsko','ng-animate CSS class gets stuck on element w/existing CSS transition\nI\'m using both ngClass & ngAnimate with an existing CSS transition, and the result/problem is that the ng-animate class does not get removed from the element as it should.\r\n\r\nI\'m not trying to use Angular animations at all for this element, but I need to have ngAnimate as a dependency because I\'m using it for other elements on the page.\r\n\r\nSee reproduction here: http://plnkr.co/edit/IcesSJdZFVFNO2Jvd8Pd?p=preview\r\n\r\nClick the button & immediately hover away. In 2 seconds it\'s supposed to disappear but it doesn\'t because it has both the "ng-animate" and "ng-hide" classes. Strangely, if you then/later hover over it, it disappears.\r\n\r\nThis wasn\'t happening in v1.2.0 which I just upgraded from, but I realize that\'s pretty old.'
7764,'btford',"docs(tutorial/step_09): note about 'Filter' suffix\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): misc core\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nThe tutorial left out the fact that 'Filter' was appended to filter names when injected into unit tests. Will save some people time to remind them here in this step.\n\n**Other Comments:**\n\nReminder that 'Filter' is appended to filter names when injected. Link to Filter guide where this is mentioned."
7754,'jeffbcross','refactor($http): move checking of the xsrf tokens to after cache check in $http\nThe pull request moves a place in the code where xsrf tokens are set to after the cache is checked, this way hopefully improving performance.\r\n\r\nThis is referenced in issue #7717.'
7747,'btford','docs(error/$injector/unpr): suggest additional location for dependency injection\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nThis is a tiny change in the docs to suggest an alternative way of satisfying a dependency.\n\n**Other Comments:**\n\nThis would have helped me.'
7739,'caitp','fix($compile): fix ng-attr vs normal attribute ordering\nThis ensures ng-attr always overrides normal attributes of the same name.\r\n\r\nFixes: #7051'
7724,'rodyhaddad',"Bug in angular.equals following #7618\nFollowing #7618 it is now possible to use objects which contains circular references (thanks for adding this). [This test](https://github.com/angular/angular.js/blob/ee8fae8c0f1680428b0eb84d1306b55bebf44074/test/AngularSpec.js#L157) uses the [Jasmine object equality check](https://github.com/pivotal/jasmine/blob/31d71ac22fd3e7e994e014229f83b96b81c9f8dd/src/core/matchers/matchersUtil.js#L53) to verify that the `copy` of an object that contains circular references has indeed worked.\r\n\r\nHowever, two such objects should also be `angular.equals`. Currently, this is not possible as the stack explodes:\r\n\r\n```javascript\r\nit('should handle circular references when circularRefs is turned on', function () {\r\n  var a = {b: {a: null}, self: null, selfs: [null, null, [null]]};\r\n  a.b.a = a;\r\n  a.self = a;\r\n  a.selfs = [a, a.b, [a]];\r\n\r\n  var aCopy = copy(a, null);\r\n  expect(aCopy).toEqual(a);\r\n  expect(equals(a, aCopy)).toBeTruthy(); // ** EXPLODES **\r\n});\r\n```\r\n\r\nA fix [similar to this](https://github.com/myitcv/angular.js/blob/2ce1b52c989a8ed74ea90fb5bb41d7846fb28c80/src/Angular.js#L878-L906) does the job. Let me know if you want me to formulate a PR for this.\r\n\r\nThanks"
7721,'caitp','IE9 error with ng-click and no href\nIn IE9, with hashbang mode enabled, and having injected the `$location` service (not just configured the provider), an anchor with an `ng-click` but no `href` causes an exception when clicked:\r\n\r\n    Unable to get the value of the property \'indexOf\': object is null or undefined\r\n\r\nTo reproduce, put this in a file named `ie9` and run `python -m SimpleHTTPServer 5000`, then visit `http://localhost:5000/ie9/`.\r\n\r\n    <!DOCTYPE html>\r\n    <html ng-app="app">\r\n    \r\n      <head>\r\n        <base href="/ie9/" />\r\n        <script src="https://code.angularjs.org/1.3.0-beta.10/angular.js"></script>\r\n      </head>\r\n      \r\n      <script>\r\n        var app = angular.module(\'app\', []);\r\n        \r\n        app.config([\r\n          \'$locationProvider\',\r\n          function($locationProvider){\r\n            $locationProvider.html5Mode(true);\r\n            $locationProvider.hashPrefix(\'!\');\r\n          }\r\n        ]);\r\n        \r\n        app.controller(\'ctrl\', [\r\n          \'$scope\',\r\n          \'$location\', // Note that we inject $location here!\r\n          function($scope, $location){\r\n            $scope.alert = function(s){ window.alert(s); };\r\n          }\r\n        ]);\r\n      </script>\r\n      \r\n      <body ng-controller="ctrl">\r\n        <a ng-click="alert(\'hi!\')">\r\n          <span>Click me!</span>\r\n        </a>\r\n      </body>\r\n    \r\n    </html>\r\n\r\nNote that you *must* inject `$location` to see the issue; the offending line is in [$location](https://github.com/angular/angular.js/blob/master/src/ng/location.js#L660) and is only run when the service is instantiated.\r\n\r\nThere are several ways to "solve" the problem, but I\'m not sure which is best.  It seems that the implementation of the `a` (anchor) directive could `stopPropagation` as well as preventing default, or we could simply check for empty/undefined `href` attributes at that point in `$location`.\r\n'
7715,'IgorMinar','fix(select) ... breaks some selects with required attributes on firefox.\nThe commit https://github.com/angular/angular.js/commit/dc149de9364c66b988f169f67cad39577ba43434 breaks selects with a required attribute and an disabled default empty option, but only on firefox.\r\n\r\nPlease check [this jsbin](http://jsbin.com/wobod/3) on both chrome and firefox.'
7709,'caitp',"Can't upgrade from beta.7 to beta.8-10\nAfter upgrade beta.7 to beta.10 I got the following error.\r\n\r\nError present since beta.8\r\n\r\nUncaught Error: [$injector:modulerr] Failed to instantiate module ng due to:\r\nError: [$injector:unpr] Unknown provider: $filterProvider\r\nhttp://errors.angularjs.org/1.3.0-beta.10/$injector/unpr?p0=%24filterProvider\r\n    at http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.10/angular.js:78:12\r\n    at http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.10/angular.js:3805:19\r\n    at Object.getService [as get] (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.10/angular.js:3937:39)\r\n    at runInvokeQueue (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.10/angular.js:3883:43)\r\n    at http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.10/angular.js:3893:11\r\n    at Array.forEach (native)\r\n    at forEach (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.10/angular.js:320:11)\r\n    at loadModules (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.10/angular.js:3875:5)\r\n    at createInjector (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.10/angular.js:3815:11)\r\n    at doBootstrap (http://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.10/angular.js:1476:20)\r\nhttp://errors.angularjs.org/1.3.0-beta.10/$injector/modulerr?p0=ng&p1=Error…pis.com%2Fajax%2Flibs%2Fangularjs%2F1.3.0-beta.10%2Fangular.js%3A1476%3A20) angular.js:78"
7700,'IgorMinar',"perf(*): more performant interpolation and lazy one-time binding\nThis PR implements a different approach to one-time binding, which also gives us a performant improvement for $interpolate by about 33%.\r\n\r\nHere's a benchmark app using the current snapshot: [plunkr](http://plnkr.co/edit/ED75f0qo0gnvodl9rCDV?p=preview)\r\nHere's the same benchmark with this PR: [plunkr](http://plnkr.co/edit/PbzTM5IviKydEH2dXfFZ?p=preview)\r\n\r\nLook at the difference between the two `baseline interpolation`. It goes from 30-35ms to 20-25ms.\r\nThis gets us closer the the `baseline binding`, which is about 15-20ms.\r\nThe other 3 benchmarks in the benchmark app remain unchanged.\r\n\r\n## What's behind this change:\r\n\r\n### Expressions can say how they want to be watched\r\nThis allows the following:\r\n* Given `interFn = $interpolate('{{a}}{{b}}')`, interFn can say that it wants to be watched by: watching each expression individually (i.e. `scope.$watchGroup(['a', 'b']`)\r\n* Given `parseFn = $parse('1 + 1')`, parseFn can say that it wants to be watched by: getting evaluated on the next $digest, and then unregistering itself since its constant anyway\r\n* Given `parseFn = $parse('::foo')`, parseFn can say that it wants to be watched by: getting evaluated on the  $digest as usual, and unregistering itself when its value is no longer `undefined` (a.k.a. bind-once)\r\n\r\n### InterceptionFn\r\nThere are cases where the last scenario doesn't work out as we'd like.\r\nIf we're watching a function that calls `parseFn` inside it, we lose the benefits mentioned above. That's because `parseFn` isn't aware that it's being watched (indirectly). So I created an _interceptorFn_ in `$parse` that goes around this issue. Interceptors work as filters and you can easily see their application in ngBind.js or sce.js\r\n\r\n-----\r\n\r\nI could go into more details, but you should check the code.\r\nThe first commit just reverts the current implementation of bind-once, so checking the second commit on it's own can make reviewing easier\r\nSuggested order of review:\r\n- rootScope.js\r\n- interpolate.js\r\n- parse.js\r\n- The rest"
7698,'btford',"Update JSDoc for ngAnimate.enabled to show optional value\nThe docs show that param 'element' (of type DOMElement) is required when it is optional."
7696,'matsko',"Including ngAnimate causes issues with ngView\nI've been hunting down an issue for a couple days now where a fairly complex directive stops working after navigation.\r\n\r\nLong story short, it turns out that when ngAnimate is included, ngView will keep the old view around until after the new view has initialized (presumably to animate the transition).\r\n\r\nThe problem is that we have directives that use document.getElement* and are finding the old elements first instead of the new ones.\r\n\r\nI've tried using $animateProvider.classNameFilter to exclude ngView, but it doesn't resolve the issue. Only removing the ngAnimate module seems to fix it."
7692,'rodyhaddad',"ng-option doesn't handle first selection properly under IE11\nSelecting an option for the first time in a select dropdown under IE11 when no option is currently selected\r\n* does **not** make the select dropdown display the correct option\r\n* does **properly** set the selected option value in the model though\r\n\r\n**Reproducible:** alaways\r\n\r\n**Browsers:** IE11\r\n\r\n**Operating system:** Windows 7, Windows 8\r\n\r\n**Steps to reproduce:**\r\n\r\n* Go to this plunker http://plnkr.co/edit/XWXhqupzPItuLT3KUvPq?p=preview using IE11\r\n* Click on the select dropdown to open it\r\n* Click on the `second`, `third`, `fourth` or `fifth` option\r\n* See the select displaying `first` instead of the selected option\r\n\r\nor \r\n\r\n* Go to the AngularJs doc with IE11 https://docs.angularjs.org/api/ng/directive/select\r\n* Scroll down to the last example\r\n* Click on `-- choose color --` in the dropdown next to `Color (null allowed):`\r\n* Click on `red` in the dropdown next to `Color (null not allowed):`\r\n* See the select displaying `black` instead of `red`"
7673,'matsko',"feat(ngModel): add $touched and $untouched states\nSets the ngModel controller property $touched to True and $untouched to False whenever a 'blur' event is triggered over a control with the ngModel directive.\r\n\r\nReferences #583"
7663,'rodyhaddad','Clarification about lazy one-time binding for object literals\nHi,\r\nmigrating from bindonce to the new one-time bindings, I cannot do something like: ```ng-style="::{color : colorVar}"``` where colorVar is not **initially** set. \r\n\r\nhttp://plnkr.co/edit/hR1tbyO4E7wEdUG4C2vf?p=preview\r\n\r\nIn this plunker, setting colorVar is delayed by 1500 ms, and the one time binding does not apply the change. It works for name, though.\r\nReading the code, it looks like this is because the one time wrapper for $parse checks if the whole expression is undefined, so the ng-style expression is intially defined as ```{\'background-color\': undefined}```, which is \'good enough\' for one time bind. The workaround that comes to mind is putting the whole ng-style expression in a variable and set that after the timeout. (see plunker) However, that is more verbose and you lose the "expressiveness" of the template. \r\nIs this expected use, or can this be changed in the future? It sure is confusing at least!'
7661,'petebacondarwin',"Searching the doc within the site has gotten difficult\nThere needs to be a list all angular services with some sort of definitive synopsis about each. A glossary of sorts would suffice. \r\n\r\nPresently, there are terms and service labels being used in descriptions that don't themselves have any easily accessible definitive definition. \r\n\r\nIn particular, $eval; the existing search facility produces a list of over twenty entries, non bearing the $eval name nor portending to be definitive, at least to a novice.\r\n"
7649,'matsko','refactor(bootstrap): remove an unused argument\n$animate not used in this function anymore.'
7648,'mzgol',"Maximum stack exceeded / Too much recursion on Firefox\nTesting the latest beta 10 on Firefox along with ui-router is giving a maximum call stack exceeded / too much recursion. Cross referecing the issue on angular-ui/ui-router#1104\r\n\r\nI can't provide the minimum reproducible case because it's a really big project, but the problem began after changing ngRoute for ui-router"
7637,'IgorMinar','fix($animate): remove the need to add display:block!important for ngShow/ngHide\nSince ngShow/ngHide animations add and remove the .ng-hide class, having to remember\r\nto write display:block on your own is a hassle and leads to problematic animation\r\ncode. This fix places a default on the animation for you instead.'
7632,'caguillen214','Setting input type=“file” using expression not working in Chrome or Safari\nI am working on a form builder application in Angular and have run into an odd bug in Chrome. I am dynamically setting a form input type based on a variable. This seems to work for all input types except for "file", which will always change to "text" in Chrome or Safari. A simple example is below:\r\n\r\n````html\r\n<div ng-app="app">\r\n  <input type="{{\'file\'}}" /><br />\r\n  <input type="{{\'color\'}}" /><br />\r\n  <input type="{{\'button\'}}" value="button" />\r\n</div>\r\n````\r\n\r\n[jsfiddle](http://jsfiddle.net/x649Q/)'
7623,'btford','docs(ngClick): improve style\n@btford told me to do this'
7622,'btford','docs(ngClick): improve style\n@btford told me to do this'
7614,'btford','Update ngKeyup doc for better example\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): misc core\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nexample now displays how to use it with the implicit $event argument\n\n**Other Comments:**\n\nexample now displays how to use it with the implicit $event argument'
7609,'matsko',"move animation start and finish\nIf I understood ng-move correctly, it happens only after the element has been moved in the DOM?\r\n\r\nBut what about a case, when you want firstly, say, fade the item out and then fade it in on the new position?\r\n\r\nShouldn't there be a ng-move-start and ng-move-end classes?"
7607,'matsko',"solved issue with the 'show' transition never working\nI kept having problems where the 'hide' fade animation worked fine but the 'show' fade animation didn't. I narrowed it down to `.ng-hide` not having `opacity: 0`. Sticking this in has fixed the 'show' fade animation for me."
7606,'IgorMinar',"ngView cleanup order\n@matsko I think the ngView cleanup order is incorrect. Current it's:\r\n \r\n```js\r\nfunction cleanupLastView() {\r\n  if(previousElement) {\r\n    previousElement.remove();\r\n    previousElement = null;\r\n  }\r\n  if(currentScope) {\r\n    currentScope.$destroy();\r\n    currentScope = null;\r\n  }\r\n  if(currentElement) {\r\n    $animate.leave(currentElement, function() {\r\n      previousElement = null;\r\n    });\r\n    previousElement = currentElement;\r\n    currentElement = null;\r\n  }\r\n}\r\n```\r\n\r\nSo a user lands on a page, the first view is shown, and `currentElement` is set. Next the user clicks on a link to go to the second view. `cleanupLastView()` gets called and should cleanup the first view. But `previousElement` is undefined still (it gets set below which is too late) and so the cleanup does not happen.\r\n\r\nOnly after navigating to a third view is `previousElement` defined and the cleanup starts to work. \r\n\r\nAlso it seems to me like the scope should be destroyed before the element is removed, but maybe that doesn't matter. \r\n\r\nCorrect me if I'm wrong but I think the order should be:\r\n\r\n```js\r\nfunction cleanupLastView() {\r\n  if(currentElement) {\r\n    $animate.leave(currentElement, function() {\r\n      previousElement = null;\r\n    });\r\n    previousElement = currentElement;\r\n    currentElement = null;\r\n  }\r\n  if(currentScope) {\r\n    currentScope.$destroy();\r\n    currentScope = null;\r\n  }\r\n  if(previousElement) {\r\n    previousElement.remove();\r\n    previousElement = null;\r\n  }\r\n}\r\n```"
7603,'btford','Update step_05.ngdoc\nImprove the comment.'
7598,'rodyhaddad',"docs($rootScope): fix incorrect docs and make them clearer\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): scope\n\nImpact: large\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nDuring the first digest loop after registering a $watch\nthe listener always run, so the example about the $digest cycles in the $rootScope docs was incorrect\n(here's a plunk to prove it:\nhttp://plnkr.co/edit/NRM4UIp9rk28VbylAtvl).\nAlso, we can make it clearer that if the value doesn't change,\nthe listener doesn't run on subsequent $digest loops.\n\n**Other Comments:**\n\n"
7595,'rodyhaddad','feat(FormController): add `$rollbackViewValue` to rollback all controls\nCurrently it is possible to use `ngModelOptions` to pend model updates until form is submitted, but in case the user wants to reset the form back to its original values he must call `$rollbackViewValue` on each input control in the form. This commit adds a `$rollbackViewValue` on the form controller in order to make this operation easier, similarly to `$commitViewValue`.'
7583,'btford',"fix(ngView): remove reference to scope\n$route.name.scope.current returns undefined in the docs example,\r\nas scope is never injected into the relevant controller.\r\nScope doesn't need to be there, so it's best to just remove it.\r\n\r\nSuggested in #5076."
7580,'btford','Some grammar corrections "it\'s" vs "its"\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nFixes to grammar in text. No other impact. Two of changes affect the titles of tests so had to be escaped.\n\n**Other Comments:**\n\nMinor fix. This should account for all such errors. '
7571,'rodyhaddad',"refactor($parse): add lgalfaso's refactors and suggestions\n@lgalfaso's PR #7543 had two aspects of it that I didn't include in my last changes to $parse (#7552, #7555)\r\n\r\n* Lexer should only take care of `constant`, and the Parser should deduce that a _primary_ `constant` is also a `literal`\r\n* Simplify the logic of Parser.filter "
7566,'matsko',"fix(ngAnimate): fix property name that is used to calculate cache key\nRequest Type: bug\n\nHow to reproduce: I met this issue in an huge screen so I cannot provide a use case.\n\nComponent(s): ngAnimate\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nProblem occured when there was 2 ng-hide/ng-show on a page - one had animation assigned and other doesn't. If second item (without animation) is shown/hidden first - then due to this but it get incorrect cache key assigned and it was the same for second animation - so second animation was not animated because it used wrong cacheKey to extract cached timings for non-animated element.\n\n**Other Comments:**\n\n"
7560,'matsko','fix($animate): retain inline styles for property-specific transitions\nTransitions that are run through ngAnimate which contain a specific property\r\ncause any inline styles to be erased after the animation is done. This has\r\nsomething to do with how the browsers handle transitions that do not use\r\n"all" as a transition property.\r\n\r\nCloses #7503'
7549,'matsko','Show ngMessage only when field is dirty\nI\'m currently working on a project where validation messages are only shown when the form field is `$dirty`. I\'m working with `1.3.0-beta.8` and ngMessages.\r\n\r\nIs there / can there be a way to do this purely with ngMessages?\r\n\r\nI could use `ngIf` but that seems to defeat the purpose of ngMessages.\r\n\r\nOne idea I had was to add a `when` attribute to `<ng-messages>`. The use would look like the following:\r\n\r\n```\r\n<ng-messages for="form.gameTitle.$error" when=\'form.gameTitle.$dirty\'>\r\n  <ng-message when="required">Please enter a title.</ng-message>\r\n</ng-messages>\r\n```'
7547,'matsko','stagger animation not working in minified script \nworking example:\r\nhttp://embed.plnkr.co/LTUm8soHhnodBwpCqbNa/preview\r\n\r\nnot working:\r\nhttp://embed.plnkr.co/wL8iIF5K55R9gOY1pHVm/preview\r\n\r\nthe only difference is using minified version of angular-animation from google cdn. In not working example the enter animation is triggered only for first element and then all other are inserted immediately, without animation.\r\n\r\nIt seems this issue was fixed in 1.2.13 for non minified version but in minified version it is still present.\r\n\r\ntested in chrome 34.0.1847.137 and firefox 29.0.1 with angular v1.2.16'
7541,'btford','Create EditorConfig file\nRequest Type: chore\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nSee [the EditorConfig website](http://editorconfig.org/) for more information about the file.\n\n**Other Comments:**\n\n'
7540,'rodyhaddad',"Refactor $parse\nWe need to make a major cleanup in $parse as it contains a lot of legacy code that is not needed.\r\n\r\nThe work should be broken down into 3 PRs so that it's easier to review:\r\n\r\n1/ remove support for JSON parsing (this is a feature that is not exposed via public api and the code just sits there for no good reason)\r\n2/ remove support for promise unwrapping (this a deprecated feature, which we want to remove in 1.3)\r\n3/ benchmark the impact of removing function generation (via new Function) and only to our simpleGetterFn implementation. This needs to be done across browsers - mainly IE9, IE 11, latest Firefox, latest Chrome, mobile Chrome and mobile Safari. Depending on the results, we should remove or keep this code path."
7538,'caitp','ngInclude doesn\'t work for SVG in Safari or Firefox (5263)\n"Invalid" bug https://github.com/angular/angular.js/issues/5263 is still a problem (1.2.16). \r\n\r\nThe example plunkr at http://plnkr.co/edit/Igvyeb1g4sWHoeOgAHTz?p=preview only works in Chrome. \r\n'
7536,'matsko',"ngAnimate addClass does not work correctly\nWhen i use the addClass/removeClass method's of ngAnimate they behave inconsistent. Sometimes when i update the DOM's HTML or add a class with javascript directly it doesn't fire the add/removeClass methods."
7528,'btford','Fix for ng-app called ng=app in diagram image. Issue #6473\nREF LINK: https://github.com/angular/angular.js/issues/6473\r\n'
7523,'caitp','fix(Scope): $broadcast and $emit should set event.currentScope to null\nWhen a event is finished propagating through Scope hierarchy the event\'s `currentScope` property\r\nshould be reset to `null` to avoid accidental use of this property in asynchronous event handlers.\r\n\r\nIn the previous code, the event\'s property would contain a reference to the last Scope instance that\r\nwas visited during the traversal, which is unlikely what the code trying to grab scope reference expects.\r\n\r\nBREAKING CHANGE: $broadcast and $emit will now reset the `currentScope` property of the event to\r\nnull once the event finished propagating. If any code depends on asynchronously accessing thei\r\n`currentScope` property, it should be migrated to use `targetScope` instead. All of these cases\r\nshould be considered programming bugs.\r\n\r\nCloses #7445"'
7513,'petebacondarwin',"Docs for stable builds need better visibility\nWhen you go directly to https://docs.angularjs.org/api (say, from a link on angularjs.org), the docs it pulls up are for the latest unstable build. This is quite a nuisance, and punishes everyone who uses stable builds. You actually have to *scroll* the dropdown list to get to the stable builds.\r\n\r\nIdeally, docs for the latest stable version would be the default, but I'd be satisfied with having latest stable docs no more than one click away without needing to scroll a dropdown list."
7503,'caitp',"Inline styles destroyed on elements with ng-model directives if css transition is defined\nIf the ngAnimate module is included in the app, elements with ng-model directives will lose their inline style definitions on the first change to the model property, IF the element has a class which declares a css transition.\r\n\r\nA JSFiddle to demonstrate: http://jsfiddle.net/q54Tj/2/\r\n\r\nExpected behavior: inline styles should always be preserved on elements regardless of transition definitions or inclusion of ngAnimate module.\r\n\r\nI'm not sure what version of Angular introduced this issue, but I've been running for a while on 1.2.5 and when I tried 1.3.9, I noticed this happening in some of my forms. It is reproducible in all browsers I've tried, including the latest versions of Chrome, Firefox, IE, & Safari on OSX 10.8.5 and Win7."
7501,'caitp','perf($interpolate): optimize value stringification\npreviously we stringified numbers via toJson which was expensive, I optimized the code so that toJson is\r\ninvoked only if really necessary'
7500,'btford','feat($injector): report circularity in circular dependency error message\nRequest Type: feature\r\n\r\nHow to reproduce: \r\n\r\nComponent(s): di\r\n\r\nImpact: medium\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\nChange the error message for a circular dependency to display the full\r\ncircle back to the first service being instantiated, so that the problem\r\nis obvious:\r\n\r\n    a <- b <- a\r\n\r\nThe previous message stopped one dependency short of the full\r\ncircle:\r\n\r\n    b <- a\r\n\r\n**Other Comments:**\r\n\r\nChanges the content of the cdep error message, which may be considered\r\na breaking change.'
7495,'petebacondarwin','fix(ngModel): do not dirty the input if nothing was changed\nThis caused the input to become dirty every time `$commitViewValue` was called, even if no update to the view value was made. For example, `updateOn` triggers and form submit may call `$commitViewValue` without updating the view value.\r\n\r\nCloses #7457'
7491,'IgorMinar',' docs(tutorial/step_12): fix missing URL for Bower\nRequest Type: docs\r\n\r\nHow to reproduce: \r\n\r\n1. Go to https://docs.angularjs.org/tutorial/step_12\r\n\r\n2. Scroll down to the Dependencies section\r\n\r\n3. Read the second paragraph\r\n\r\nComponent(s): \r\n\r\nImpact: small\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\nA `[Bower][bower]` link is used without a URL definition so an `<a>` tag is never generated.\r\n\r\n**Other Comments:**\r\n\r\n'
7483,'tbosch','docs: clarify module definition\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nclafication - "configures injection" is a bit rough for newbies (like moi)\n\n**Other Comments:**\n\nand minor changes while i\'m here'
7481,'IgorMinar',"feat($q): Adds a context object to the promise chain callbacks.\nRequest Type: feature\r\n\r\nComponent(s): $q\r\n\r\nImpact: medium\r\n\r\nComplexity: small\r\n\r\n**Detailed Description:**\r\n\r\nToo many times I'm forced to write code like this:\r\n\r\n```javascript\r\nreturn myThing.go().then(\r\n    angular.bind(this, this.success_),\r\n    angular.bind(this, this.error_),\r\n    angular.bind(this, this.progress_)).\r\n  catch(angular.bind(this, this.catch_)).\r\n  finally(angular.bind(this, this.finally_));\r\n```\r\n\r\nInstead, it would be nice if a context could be added to the promise chain, resulting in:\r\n\r\n```javascript\r\nreturn myThing.go().context(this).\r\n  then(this.success_, this.error_, this.progress_).\r\n  catch(this.catch_).\r\n  finally(this.finally_);\r\n```\r\n\r\nRemoving the context (if returning a promise as above) would just be:\r\n\r\n```javascript\r\nreturn myThing.go().context(this).\r\n  then(this.success_, this.error_, this.progress_).context();\r\n```\r\n\r\n"
7476,'matsko','fix(ngMessages): annotate ngMessages controller for minification\n/cc @matsko\n\nWithout this, angular-messages.min.js is broken =('
7471,'lgalfaso','ngClass remove repeating classes\nngClass remove repeating classes when watched value is changed.\r\nFor example:\r\n```\r\n<span ng-class="{\'same first\': value, \'same second\': !value}"></span>  \r\n```\r\n```\r\n  $scope.value = true;\r\n  \r\n  $timeout(function () {\r\n    $scope.value = false;\r\n  }, 3000);\r\n```\r\nWhen value will be equal false class contains only "second"\r\n```\r\n<span class="second"></span>\r\n```\r\nThis bug appear in 1.2.16 version.'
7470,'tbosch','Fixed typo in concepts.ngdoc\nThe service is in finance2.js but the doc references finance.js '
7463,'tbosch','Do not merge attributes that are the same\nRequest Type: bug\r\n\r\nHow to reproduce: 1. have a replace directive with \'id\' attribute in the main wrapping element\r\n2. have an element that references the directive and has an \'id\' attribute with a value that exactly matches the \'id\' attribute from the main wrapping element in the directive\r\n3. when you view this html, you will see that the id attribute was duplicated (i.e. id="myid" becomes id="myid myid")\r\n\r\nComponent(s): $compile\r\n\r\nImpact: small\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\nThe is a very simple issue. The logic for merging attributes should not concatenate if the attribute values are the same. I would imagine that not a lot of people run into this because \r\n\r\n1) there are many attributes where concatenation would not cause errors (ex. styles, class, etc.)\r\n2) for replace directives, especially for single page apps, there is no reason to put attributes on both the directive partial element and the element that references the directive.\r\n\r\nThe use case where this starts to be a problem is when you are trying to have a nicer initial page load experience. Basically, for various situations, I will have the server side render default html that is displayed by the browser before angular is fully downloaded and bootstrapped. So, this type of issue would only affect people concerned with server side rendering (either for SEO purposes or for UX so user sees something very quickly before Angular bootstraps). It only affects the initial page load. For people like me that are concerned about these types of things, it is a significant issue and this very minor change will help tremendously.\r\n\r\n**Other Comments:**\r\n\r\nThe logic for merging attributes will essentially concatenate values if an attribute is in the DOM element and is in the partial that will be replacing the DOM element.  This doesn\'t make sense in some use cases, but the most clear one is where there is something like an ID which is the exact same in both. The current logic will concatenate `<div id="myid" my-directive>` and `<div id="myid">` (for the directive template) into `<div id="myid myid">`.\r\n\r\nThis pull request is to add one very simple condition that will just ensure that when the values are exactly the same, they are not concatenated.'
7462,'jeffbcross','Dates in UK format dd/MM/yyyy appear invalid\nUsing any date format outside of yyyy-MM-dd will lead to the field being invalid.\r\nNot sure this really needed to be messed with\r\n\r\nThis is in Angular 1.3 Beta 8\r\nReverting back to 1.2.16\r\n'
7460,'IgorMinar',"docs($http): clear up Interceptor docs and code\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): $http\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nThe documentation and code example of $http interceptors is unclear about whether config can be null\nor not, and whether the result should always be a promise or not. This pr clears up the documentation\na bit and removes the literal 'or a promise' interpretation of the docs in the code example.\n\nSee #7431\n\n**Other Comments:**\n\n"
7457,'caitp','form and input is getting dirty by clicking on a simple button\nCreate a simple form with an input and a button without any functionality. Clicking the button results in setting the form and the input to dirty.\r\nTo illustrate the behaviour I made a plunkr:\r\nhttp://plnkr.co/edit/GlLD83K8OLVIShPlfENm?p=preview\r\nBest regards\r\nwestor21\r\n\r\n'
7456,'tbosch','Fixed typo\nJava`s`Script -> JavaScript'
7453,'lgalfaso','number filter with fractionSize = 2 rounded 1.255 to 1.25 instead of 1.2.6\nTest case here:\r\nhttp://plnkr.co/edit/QN0aUyXDplngKRRLBM26?p=preview\r\n\r\n1.2555 is ok\r\n1.#55 where # is any number other than 2 is ok\r\nfraction size other than 2 is ok\r\n'
7442,'btford','docs(select): More usage examples with track by\n'
7436,'tbosch','Corrected logic in ng-hide expansion example.\n'
7434,'btford',"Update ngRepeat.js\n `item in items track by $id(item)` didn't show as code due to mistake in the closing tag (was ' instead of `)"
7433,'IgorMinar','replaced bootstrap 2 with bootstrap 3 classes\n'
7425,'petebacondarwin','docs(misc core): @function and @kind function used inconsistently. Use @kind function.\nRequest Type: docs\r\n\r\nComponent(s): misc core\r\n\r\nImpact: small\r\n\r\nComplexity: small\r\n\r\nDetailed Description:\r\n\r\n`@kind function` should be used in lieu of `@function`.\r\nSwitch to use `@kind function` everywhere.'
7424,'btford','docs(di): corrects typo\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): di\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\n'
7423,'IgorMinar','feat(http): add multiple parameters serializers\nAdd the ability to add parameters serializers\r\nAdd common parameters serializers\r\n\r\nStill needs quite some documentation changes, but putting it out to get feedback\r\n\r\nCloses #7363'
7420,'IgorMinar','Update step_07.ngdoc\nRequest Type: docs\n\nHow to reproduce: follow the tutorial\n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nFix failing test in e2e scenario'
7405,'lgalfaso',"ng-show/ng-hide does not override Bootstrap classes\nAll ng-show/ng-hide does really is add a display:none on whatever element is being evaluated. Bootstrap's css can tend to come in and override this, or any css for that matter. However, since Angular's use of these common directives are more directly related to visibility than layout use-cases of display (hiding the element vs. display:inline or display:inline-block, for instance) then I recommend Angular update the ng-show/ng-hide to add !important to its display changes."
7401,'btford',"Changes Gingerbreak to Gingerbread.\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: \n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nI think that's a typo."
7400,'lgalfaso','ng-repeat inside ng-include when switching templates\nDear AngularJS,\r\n\r\nI have encountered an issue when using `ng-repeat` inside of a template being included via `ng-include`.\r\n\r\n**Angular Version:** Angular 1.2.9\r\n**Browser:** Chrome 34.0 \r\n**OS:** OSX Mavericks\r\n\r\nSee example here: http://plnkr.co/edit/VzXKmjpR3qWFNJ6soMgO?p=preview\r\n\r\nI have two objects, `thing1` and `thing2`, and each of those things have items and a template.\r\n*  `thing1.items` is `[\'a\', \'b\', \'c\']` and `thing1.template` is `foo.html`\r\n* `thing2.items` is `[1,2,3]` and `thing2.template` is `bar.html`\r\n\r\nSo say I have in a controller `$scope.current_thing = thing1`, and in my view I have an ng-include inside the scope of the controller of `ng-include="current_thing.template"`\r\n\r\nEvery time I switch from `thing1` to `thing2` or vice versa, the directives in the`thing1` template `foo.html` get compiled even though my template is `thing2.template` which is `bar.html`. The directives in `bar.html` get compiled as expected.\r\n\r\nThis presents a problem when the old template has directives in it that call functions on a scope variable that only exist when the scope variable is of a certain type. \r\nTo see what I mean, see this example here:\r\n\r\nhttp://plnkr.co/edit/RMV4l10Gp2WEcOBU3ytX?p=preview\r\n\r\nAny help/information on this would be greatly appreciated.'
7397,'btford',"style(core): make code formatting more consistent and legible\nRequest Type: style\r\n\r\nHow to reproduce:\r\n\r\nComponent(s): core\r\n\r\nImpact: small\r\n\r\nComplexity: small\r\n\r\nThis issue is related to:\r\n\r\n**Detailed Description:**\r\nThis commit changes the code formatting of the Angular.js core to adhere more closely to Google's JavaScript style guide. This includes adding whitespace and blank lines where needed. It also removes some unused variables, while renaming others to provide more clarity as to what it does (e.g. `ii` to `attributePrefixLength`).\r\n\r\n**Other Comments:**\r\n"
7384,'caitp','feat($compile): support transcluding SVG nodes when there is no root <svg> node\nThis CL is a work in progress, and is not meant to be committed in this state.\r\n=============================================================\r\n\r\nDue to https://github.com/angular/angular.js/commit/f0e12ea7fea853192e4eead00b40d6041c5f914a, it is now possible to have a directive whose template content is SVG.\r\n\r\nHowever, the following issue arises:\r\n\r\nA template like\r\n\r\n```html\r\n<replaces-with-svg-and-transcludes>\r\n  <g>\r\n    <circle r=50 cx=0 cy=0 />\r\n    <text>My circle!</text>\r\n  </g>\r\n</replaces-with-svg-and-transcludes>\r\n```\r\n\r\nWould not work as expected, due to the group, circle and text nodes being\r\nparsed as HTMLUnknownElements, for not being parsed in an SVG context.\r\n\r\nThis change enables transcluded SVG content to work when parsed as non-HTML\r\ncontent, with the cost of linking the transcluded elements again.\r\n\r\nFixes #7383'
7372,'caitp','ngSwitch regression 1.2.14 and up - crash in ng-switch with multiple ng-switch-when using the same term.\nHi!\r\n\r\nAfter upgrading to angular 1.2.16, we noticed a regression in the ngSwitch directive that seems to have been present since **1.2.14** and is also still present in **1.3.0 beta-7**.\r\n\r\nThe issue occurs when two elements have the same ng-switch-when value. When toggling between values of the switch expression, angular will throw the following error when it tries to "hide" the elements having the same ng-switch-when.\r\n\r\n**The call stack produced by the error:**\r\n\r\n```\r\nTypeError: Cannot read property \'remove\' of undefined\r\n    at Object.ngSwitchWatchAction [as fn] (https://code.angularjs.org/1.2.14/angular.js:20225:34)\r\n    at Scope.$digest (https://code.angularjs.org/1.2.14/angular.js:11930:29)\r\n    at Scope.$apply (https://code.angularjs.org/1.2.14/angular.js:12179:24)\r\n    at HTMLAnchorElement.<anonymous> (https://code.angularjs.org/1.2.14/angular.js:18228:21)\r\n    at https://code.angularjs.org/1.2.14/angular.js:2673:10\r\n    at forEach (https://code.angularjs.org/1.2.14/angular.js:329:20)\r\n    at HTMLAnchorElement.eventHandler (https://code.angularjs.org/1.2.14/angular.js:2672:5) angular.js:9509\r\n(anonymous function) angular.js:9509\r\n(anonymous function) angular.js:6950\r\nScope.$digest angular.js:11949\r\nScope.$apply angular.js:12179\r\n(anonymous function) angular.js:18228\r\n(anonymous function) angular.js:2673\r\nforEach angular.js:329\r\neventHandler angular.js:2672\r\n```\r\n\r\n**Reproduction:**\r\n\r\nHere is a js fiddle that reproduces this issue: http://jsfiddle.net/QZkZN/4/\r\n(Click on "show edit", then "cancel", then "show edit" again to trigger the error.)\r\n\r\n**Reproducibility:**\r\n\r\nThe bug is 100% reproductible on chrome latest - we haven\'t tried other browsers.\r\n\r\n**Source of the regression:**\r\n\r\nThis line and the surrounding code introduced in commit e9881991ca0a5019d3a4215477738ed247898ba0 (changes to file: ```src/ng/directive/ngSwitch.js```) is causing the error: https://github.com/angular/angular.js/blob/e9881991ca0a5019d3a4215477738ed247898ba0/src/ng/directive/ngSwitch.js#L149\r\n'
7353,'btford','Update index.ngdoc\nIt was confusing to read "end 2 end" as a numeric two. I kept wondering what two end(s). Later in the tutorial, the text switched to "End to End" which made more sense than numeric two.'
7339,'petebacondarwin','Fix language matching in code directive\nRequest Type: docs\r\n\r\nHow to reproduce: \r\n\r\nComponent(s): misc core\r\n\r\nImpact: small\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\nThe language matching for the `code` directive in docs app is not working.\r\n\r\nFor example, `class="lang-javascript"` should match `javascript` but it doesn\'t\r\n\r\n**Other Comments:**\r\n\r\nIncludes:\r\n\r\n* Fix for the `code` directive\r\n* Tests for the `code` directive'
7335,'petebacondarwin','Corrected typo in the documentation for ngModelOptions\nNoticed it while reading the angular docs.'
7330,'matsko','Update $animate service to accept native dom elements as well as jqLite objects\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): ngAnimate\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nsimply `$animate.addClass` and the like only resolve for javascript defined animations if passed a jqLite object. Passing a native dom object does not work. This nuance needs to be documented.\n\n**Other Comments:**\n\n`$animate` only seems to work if passed a `jqLite` object, native dom elements do not work. This should be documented.'
7322,'btford',"Refactor confusing case statement in the resourceFactory action method.\nRequest Type: refactor\n\nHow to reproduce: not a bug, just confusing code\n\nComponent(s): ngResource\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: performance regression\n\n**Detailed Description:**\n\nA coworker ran across the case statement at the beginning of the resourceFactory action method definition. I refactored it so it's clearer what's going on. As a result, the jshint exception is no longer needed. Tests pass, but we have not tried it in a production app yet.\n\n**Other Comments:**\n\n"
7312,'lgalfaso','ng-show expression evaluates to false when passed "f" or "F"\nFor example assuming `$scope.mystring = "F";`\r\n\r\n`<div ng-show="mystring">{{mystring}}</div>`\r\n\r\nThe div is hidden by the ng-show directive.\r\n\r\nNote you can achieve desired functionality using .length `<div ng-show="mystring.length"></div>`\r\n\r\n[JSFiddle example](http://jsfiddle.net/ThisIsMe/29HUP/)'
7311,'mzgol',"feat(jQuery): upgrade to jQuery to 2.1.1\nfeat(jQuery): upgrade to jQuery to 2.1.1\r\n\r\nThe data jQuery method was re-implemented in 2.0 in a secure way. This made\r\ncurrent hacky Angular solution to move data between elements via changing the\r\nvalue of the internal node[jQuery.expando] stop working. Instead, just copy the\r\ndata from the first element to the other one.\r\n\r\nTesting cache leaks on jQuery 2.x is not possible in the same way as it's done\r\nin jqLite or in jQuery 1.x as there is no publicly exposed data storage. One\r\nway to test it would be to intercept all places where a jQuery object is created\r\nto save a reference to the underlaying node but there is no single place in the\r\njQuery code through which all element creation passes (there are various\r\nshortcuts for performance reasons). Instead we rely on jqLite.cache testing\r\nto find potential data leaks.\r\n\r\nBREAKING CHANGE: Angular no longer supports jQuery versions below 2.1.1.\r\n\r\n**Original description:**\r\nThe data jQuery method was re-implemented in 2.0 in a secure way. This made\r\ncurrent hacky Angular solution to move data between elements via changing the\r\nvalue of the internal node[jQuery.expando] stop working. Instead, just move the\r\ndata from the first element to the other one.\r\n\r\ncc @caitp @IgorMinar"
7292,'petebacondarwin',"fix(ngModelOptions): add textarea support\nsince directives are sorted by priority and name and `ngModel` & `textarea` have the same priority and 'textarea'>'ngModel' (unlike 'input'), textarea in linked first. this is a problem since textarea expect ngModelController.$options to exist and it is created only when ngModel is linked. this is solved easily by moving the creation of $options to pre-link.\r\n\r\nfixes #7281"
7288,'mzgol',"refactor(jqLite): stop patching individual jQuery methods\nCurrently Angular monkey-patches a few jQuery methods that remove elements\r\nfrom the DOM. Since methods like .remove() have multiple signatures\r\nthat can change what's actually removed, Angular needs to carefully\r\nrepeat them in its patching or it can break apps using jQuery correctly.\r\nSuch a strategy is also not future-safe.\r\n\r\nInstead of patching individual methods on the prototype, it's better to\r\nhook into jQuery.cleanData and trigger custom events there. This should be\r\nsafe as e.g. jQuery UI needs it and uses it. It'll also be future-safe.\r\n\r\nThe only drawback is that $destroy is no longer triggered when using $detach\r\nbut:\r\n\r\n  1. Angular doesn't use this method, jqLite doesn't implement it.\r\n  2. Detached elements can be re-attached keeping all their events & data\r\n     so it makes sense that $destroy is not triggered on them.\r\n  3. The approach from this commit is so much safer that any issues with\r\n     .detach() working differently are outweighed by the robustness of the code.\r\n\r\nBREAKING CHANGE: the $destroy event is no longer triggered when using the\r\njQuery detach() method. If you want to destroy Angular data attached to the\r\nelement, use remove().\r\n\r\ncc @caitp"
7282,'petebacondarwin','Do not change line within @link\nas it causes only part of the intended name to be anchored'
7281,'petebacondarwin',"ngModelOptions doesn't work for textarea\nngModelOptions ignored for textarea elements.\r\n\r\nHere's an example:\r\nhttp://jsfiddle.net/tUCw3/"
7280,'btford',"description formatting fix\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nas it was, the third parameter's description was displayed as a code block, rather than a bulletted list."
7272,'btford',"test(misc core): fix two tests in ngClassDirective\nRequest Type: test\n\nHow to reproduce: \n\nComponent(s): misc core\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nTwo tests weren't specified fully. I added the appropriate expect(...).tobe(...) lines.\n\n**Other Comments:**\n\n"
7266,'caitp',"Remove responseInterceptors collection from $httpProvider for 1.3\nTo be honest, I didn't even know we had a responseInterceptors collection to begin with. I only found out this existed because of a question on IRC.\r\n\r\nBut basically, it's super awkward to have 2 apis which essentially do an equivalent thing, with one being more obvious in the docs than the other. And getting rid of the responseInterceptors collection means there are a few lines of code and docs that can be removed, so this is a good thing.\r\n\r\nI think it's worth dropping it for 1.3, in the name of clean API and simplicity."
7265,'vojtajina','feat($compile): allow SVG and MathML templates via special `type` property\nPreviously, templates would always be assumed to be valid HTML nodes. In some cases, it is desirable to use SVG or MathML or some other language.\r\n\r\nFor the time being, this change is only truly meaningful for SVG elements, as MathML has very limited browser support. But in the future, who knows?\r\n\r\n---\r\n\r\nNOTE: It would be nice (and more extensible) to simply add a namespaceURI option to the directive, but unfortunately this would require potentially difficult changes to jqLite.\r\n\r\nThis approach seemed much simpler, and would be more directly useful to persons wanting to use SVG content in a directive template, without a wrapping `<svg>` element. Additionally, it\'s much easier to simply write "svg" than a full namespace URI, so it\'s more approachable in this fashion as well.'
7262,'btford','fix(ngClass): handle index change correctly\nchanged the odd/even calculation to be done using modulo operation instead of bitwise operation. the bitwise operation caused issues with operator precedance (`mod !== old$index & 1` is actually parsed as `(mod !== old$index) & 1` and not `mod !== (old$index & 1)` as might be expected). decided it is better to just use modulo operation for readibility instead of adding parentheses.\r\n\r\nfixes #7256'
7249,'matsko',"Dynamic ng-animate for path dependant animations\nHi all,\r\n\r\nI've been playing around with ng-animate for a bit and noticed its hard to make it depend on what page you are visiting and what page you are going to next.\r\nIf i make a listview with 3 sublevels, i need to do some weird workarounds to get it working. For example if i go from level 1 to level 2 i want it to slide out to the left and slide in to the right. Its the same for level 2 to level 3 but when i want to go back i need the exit-right, enter-left animations. Which is currently not supported.\r\n\r\nSo if i could animate my ng-view to have animations depending on what pages i'm loading, it would be much easier to implement native-like animations.\r\n\r\nAre there any plans on to change/improve ng-animate for this or do i still need to add my custom implementation which takes me a long time to implement in new projects?"
7243,'btford','docs(guide/concepts) updating concepts to reflect the actual example\nThe actual "A first example: Data binding" section in concepts actually doesn\'t do anything with the `required` directive, so I\'ve removed the part of the section that explains it to avoid confusion.'
7240,'petebacondarwin','Directive template: "[ng-show] > [ng-if] > [ng-transclude]" throws exception. Bug?\nhttp://jsbin.com/pemadama/1\r\n\r\nThis should work without throwing the exception, right?'
7239,'caitp','$location.search() returns empty when query params are not preceded by hash\n```\r\nwww.url.com?query=things\r\n$location.search() === {}\r\n\r\nwww.url.com#?query=things\r\n$location.search() === {query: "things"}\r\n```'
7238,'IgorMinar','fr(ngMockE2E) add $httpbackend.resetBackendDefinitions\nHi there,\r\nconsider this scenario:\r\n\r\nI have a complex e2e test scenario where I first call \r\n\r\n```\r\n$httpBackend.whenPOST(/.*/).passThrough();\r\n```\r\n\r\nuntil a certain point in my testcase. After that point, i´d like to exchange the mock behaviour, and remove the "passTHrough-all-POST" and replace that with very specific mock responses such as\r\n\r\n```\r\n    $httpBackend.whenPOST(\'/authenticate\').respond(function (method, url, data, headers) {\r\n         if (data.user == ""){\r\n           //do stuff\r\n            return [404,"No user found"]\r\n        } else {\r\n            //do stuff\r\n            return [200,data];\r\n        }\r\n    });\r\n```\r\n\r\nCurrently, this won´t work since the "CatchAll-POST"-Rule will passThrough() all POST requests.\r\n\r\nThis could be changed if a new method is added, might be as simple as adding this to angular-mocks.js\r\n\r\n```\r\n  $httpBackend.clearBackendDefinitions = function(){\r\n      definitions = [];\r\n  }\r\n```\r\n\r\nWhat does the community think about such a method? '
7228,'matsko',"ngAnimate (stagger) only animates first element in repeater\nThis issue happens most often on Chrome browser (MacOS in my case). It can be reproduced on http://www.ng-tube.com/#/ by switching between the categories located on the top right.\r\n\r\nThere is also a StackOverflow entry that shows an example of the issue, as well as a solution. There seem to be differences between 1.2.13 and 1.2.9 (see http://www.stackoverflow.com/questions/23176807/angularjs-only-first-element-in-ng-repeat-animates).\r\n\r\nAngularJS is a great framework but the most essential thing (in my opinion) are animations. I've gone through hours of stress trying to pull them off with zero luck. "
7206,'IgorMinar','perf($rootScope): change the watchers structure to a linked list\nChange the way watchers and listeners are stored from a tree to a linked list'
7205,'petebacondarwin','ngModelOptions debounce was failing when on event with a value of 0\nRequest Type: bug\n\nHow to reproduce: [Here\'s a fiddle that demonstrates.](http://jsfiddle.net/joelhooks/QZ8hg/)\n\nComponent(s): misc core\n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nWas testing ngModelOptions, and noticed that the provided example\n`ngModelOptions="{ updateOn: \'default blur\', debounce: {\'default\': 500, \'blur\':\n0} }"` didn\'t function. With a little investigating I determined that the logic\noperation was skipping debounce[trigger] if it was 0 (thanks JS falsiness!).\n\nMy first solution was to do this:\n\n```javascript\nvar debounceDelay = ctrl.$options && (\n  isObject(ctrl.$options.debounce)\n    ? (isNumber(ctrl.$options.debounce[trigger]) ?\n    ctrl.$options.debounce[trigger]\n                                                   :\n                                                   (ctrl.$options.debounce[\'default\']\n                                                   || 0))\n      : ctrl.$options.debounce\n      ) || 0;\n```\n\nWhich hopefully makes us all cringe. Instead of adding this mess (the original\nlogic took me about 30 minutes to understand), I decided to unroll it into\nsomething a bit less... terse.\n\nI added a unit test to cover this scenario.\n\nThis was found in **1.3.0-beta.6.**\n\n[Here\'s a fiddle that demonstrates.](http://jsfiddle.net/joelhooks/QZ8hg/) Notice that it debounces blur, despite it being configured with 0. THis is because `(ctrl.$options.debounce[trigger] || ctrl.$options.debounce[\'default\'] || 0)` will **always** skip to default if it exists and `debounce[trigger]` is 0. Without a default alongside the trigger, the final 0 would be the result, and I suspect that is how this slipped by.\n\n**Other Comments:**\n\n'
7202,'lgalfaso','Select option with \'disabled\' attribute is not selected by default when model value is empty.\nDear team,\r\n\r\nI\'ve noticed that `<option value="" disabled>` is not selected by default when model valus is empty. It works correctly when I set `ng-disabled="true"` attribute instead, though.\r\n\r\nThis issue started affecting our application after we updated angular from 1.2.5 to **1.2.16**.\r\n\r\nI\'ve created plunker with example of this issue: http://plnkr.co/edit/CZ3vUYhOkF1c8feFxcDq?p=preview\r\n\r\n**Reproducable**: always\r\n**Browsers**: Chrome 31, Firefox 26\r\n**Operating system**: Ubuntu 13.04'
7201,'btford','Include directions for bower\nI got errors on my computer that did not have bower already installed. So I think people should check to see if they have bower installed.'
7199,'IgorMinar',"$route cut escaped url before ':/'.\nWhen I have pass the escaped string into $routeParams, I found it unescaped (it's expected) and cutted by ':/'. Is it normal?\r\n[example](http://plnkr.co/edit/CiXPgU?p=preview)"
7186,'petebacondarwin','Switch "Edit in Plunker" to use POSTs\n"Edit in Plunker" used to use POSTs to create pre-seeded examples.\xa0 At some point, this was switched over to a scheme that relied on hardcoded regex matching and URLs that are stored on plunker\'s servers.\xa0 This leads to breakages such as issue #7166.\xa0 It also makes it really hard for someone who wants to maintain to code to figure out how the whole thing fits together.\xa0 We should go back to using POSTs to create plunkers and remove this tight coupling / brittleness.'
7184,'petebacondarwin','all filter api docs should hide the first array argument from all usage examples\ngood example is: https://docs.angularjs.org/api/ng/filter/orderBy\r\n\r\nwhich shows usage as:\r\n\r\n```\r\n{{ orderBy_expression | orderBy : array : expression : reverse}}\r\n```\r\n\r\nit should be:\r\n\r\n```\r\n{{ orderBy_expression | orderBy : expression : reverse}}\r\n```'
7183,'petebacondarwin','ng-if breaks when used inside a custom directive together with templateUrl\nng-if does not work when used inside a custom directive and the template is specified using templateUrl. When the custom directive template is specified directly using the "template" parameter then there is no problem. Additionally this problems happens only if the custom directive is inside a ng-repeat.\r\n\r\nThe bug is reproducible with Angular 1.2.16. A possible workaround is to use ng-show instead.\r\n\r\nSample: http://codepen.io/anon/pen/mdFAo/?editors=101'
7181,'btford',"Can't highlight text when ng-touch is included\nNot sure where to begin with this bug... somehow when I include ngTouch in my app i can't highlight text on the page or rather if i click hold down my mouse and them move them mouse down ever so slightly and then drag it across i can highlight text. \r\n\r\nMore over what's even stranger is that I can't seem to repro this outside of my app so I'm thinking it's the combination of ngTouch and some other js library. I've searched all of the internet and I can't find anyone else that's having this same issue. If you have any ideas about how I can show this issue to you I'd love to hear them ... it's a production app with a login so let me know if you'd like me to make you an account where you can see this issue."
7180,'caitp','[Bug Report] a bug in applyDirectivesToNode  function\nHi, Angularjs, I think I found something wrong.\r\nI create thress directives name my-d, my-e and my-f just like bellow\r\nhttp://plnkr.co/edit/zTulGu270PM0qTSlI7Fj?p=preview\r\nhere my-d, my-e with scope true, and my-f with scope be an Object, and my-f has a template. In the html, I just put the three directives in a div tag, and nothing wrong. the template of my-f just shown.\r\n\r\nBut, when I change directive myE\'s name to myF, and vice versa.\r\nand open Chrome\'s Developer tools, there\'s an Error\r\n\r\nError: [$compile:multidir] Multiple directives [myE, myF] asking for new/isolated scope on: \r\n<div my-f="" my-d="" my-e="">\r\n\r\nI think this is a bug in applyDirectivesToNode function, what I mentioned bellow is for the  file angular.js 1.2.16.\r\n\r\nline 6276-6288\r\n```js\r\nif (directiveValue = directive.scope) {\r\n  newScopeDirective = newScopeDirective || directive;\r\n\r\n  // skip the check for directives with async templates, we\'ll check the derived sync\r\n  // directive when the template arrives\r\n  if (!directive.templateUrl) {\r\n    assertNoDuplicate(\'new/isolated scope\', newIsolateScopeDirective, directive,\r\n      $compileNode);\r\n    if (isObject(directiveValue)) {\r\n      newIsolateScopeDirective = directive;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nif the current directive\'s scope property is an Object, then  newIsolateScopeDirective = directive;  so if there\'s another directive in the directives array after the current directive, then the assertNoDuplicate will always throw an Error, because in assertNoDuplicate function\r\n\r\nline 6878-6883\r\n\r\n```js\r\nfunction assertNoDuplicate(what, previousDirective, directive, element) {\r\n  if (previousDirective) {\r\n    throw $compileMinErr(\'multidir\', \'Multiple directives [{0}, {1}] asking for {2} on: {3}\',\r\n      previousDirective.name, directive.name, what, startingTag(element));\r\n  }\r\n}     \r\n```\r\n\r\nonce  previousDirective is not undefined, then an error is thrown. And the sccond code snippet will trigger prolem. But the first  one will not, because my-f is the last directive in the directives array.\r\n\r\nI can\'t carry out a solution for this issue. Looking forward to your replay!                                                                           '
7176,'tbosch',"fix(addStyle): reference window.angular instead of just angular\nReference window.angular instead of just angular because when running angular under an environment\r\nwhere the top-level scope is not the window (nodejs for example), we have to specifically\r\nreference window.angular.\r\n\r\nThe main reason for this fix is making running angular under nodejs easier.\r\nSome use cases for this:\r\n* Angular package on npm https://github.com/bclinkinbeard/angular\r\n* angular's DI for node https://github.com/jmendiara/ng-di\r\n\r\nSigned CLA as Tom Yam"
7174,'IgorMinar',"Added 'cache.removeAll()' function example\nUpdated the example to include 'cache.removeAll()' method.\r\nAdded a button 'Clear Cache', when this button clicked 'clearCache' function will be executed."
7173,'tbosch',"Use pluralize filter into expressions\nAngular has good instruments for i10n and i18n, but ng-pluralise is not comfortable for use in expression.\r\n\r\nWe can realize message format functionality (https://github.com/SlexAxton/messageformat.js) in angular expression\r\n\r\n__Replace:__\r\nmf: `His name is {NAME}.`\r\nangular: `His name is {{NAME}}.`\r\n\r\n__Select:__\r\nmf: `{GENDER, select, male{He} female{She} other{They}} liked this.`\r\nangular: `{{{male:'He', female:'She', other:'They'}[GENDER]}} liked this.`\r\n\r\n__Plural:__\r\nmf: `There {NUM_RESULTS, plural, one{is one result} other{are # results}}.`\r\nangular: ?\r\n\r\nI offer this format:\r\n `There {{{one:'is one result', other:'are {} results'} | pluralize:NUM_RESULTS}}.`\r\nmore:\r\n `There {{{one:'is one result', other:'are {} results. See {{note}}'} | pluralize:NUM_RESULTS:offset}}.`\r\n\r\n"
7172,'tbosch','Update step_03.ngdoc\nupdate from Bootstrap 2.3 to 3.1 changed "span" to "col" tags'
7170,'IgorMinar',"Fixing expression parameters for orderBy.\nThis seems to be a typo, unless I'm missing something - generated Usage example is wrong.\r\n\r\nSee http://stackoverflow.com/questions/23093953/is-the-angular-orderby-documentation-wrong-or-am-i-confused"
7167,'IgorMinar',"I've found 2 mistakes in step 12\nThe phonecatApp and phonecatAnimations modules have a dot where a semicolon should be at the end of the sentence"
7166,'chirayuk','Documentation for angular form\nRequest Type: docs\n\nHow to reproduce: None of the Plunker links works in the form documentation page [https://docs.angularjs.org/guide/forms]. Could you please update the Plunker links accordingly.\n\nComponent(s): forms\n\nImpact: large\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nNone of the Plunker links works in the form documentation page [https://docs.angularjs.org/guide/forms]. Could you please update the Plunker links accordingly.\n\n**Other Comments:**\n\n'
7163,'btford','perf(scope): 10x speedup for scope.$destroy\nRequest Type: perf\r\n\r\nHow to reproduce: \r\n\r\nComponent(s): scope\r\n\r\nImpact: large\r\n\r\nComplexity: medium\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\n\r\n\r\n**Other Comments:**\r\n\r\nI am seeing that prototypical lookups are slow.\r\n'
7161,'jeffbcross',"fix($location): don't break on numeric path arguments\nFixes #7054\r\n\r\nNot sure if we want to include this in the core but I can see that it can be convenient in some cases. And well, since it is 5 minutes fix I don't care this way or another so will let others weight on this one."
7152,'IgorMinar','fix($location): make behaviour of relative links consistent in html5Mode\n3f047704c70a957596371fec554d3e1fb066a29d supposedly made html5Mode work consistently for both legacy browsers and modern browsers. However, Chrome 34 and Firefox 31 both fail to handle relative links with the default base URL, at least within an Angular app. This patch allows the URL processing which occurs for legacy browsers to also occur in modern browsers when html5Mode is enabled, and corrects this behaviour.\r\n\r\nCloses #7151'
7149,'linclark','docs(CONTRIBUTING.md): fix link to CLA under Submitting a Pull Request\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: \n\nComplexity: \n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nAddresses a bad link to the CLA under Submitting a Pull Request section.'
7140,'btford','feat(ngClass): support multiple classes in key\nfixes https://github.com/angular/angular.js/issues/7135'
7136,'IgorMinar','fix(jqLite): Chrome specific issue for `<select required>`\nRequest Type: bug, regression\r\n\r\nHow to reproduce: Look at #6828\r\n\r\nComponent(s): jqLite\r\n\r\nImpact: medium\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: regression\r\n\r\nDetailed Description:\r\n\r\nWhen using Chrome and adding a `<option selected="selected">` to a `<select required>` then the new added option is not selected\r\n\r\nOther Comments:'
7116,'petebacondarwin','feat(ngModelOptions): support submit trigger\nThis is another attempt to solve https://github.com/angular/angular.js/issues/7017 from a different direction. This one actually moves a big part of the `ngModelOptions` mechanism out of the various `input` directives and into `ngModelController` which is a better approach in my opinion.'
7113,'btford','Replace valid methods list in $resource documentation\nRequest Type: docs\r\n\r\nHow to reproduce: \r\n\r\nComponent(s): ngResource\r\n\r\nImpact: small\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\nThe existing documentation places includes a small list of valid methods for custom resource actions.  As any method will be passed through to $http, I see no reason to state that $resource has a more restrictive list of valid methods.\r\n\r\n**Other Comments:**\r\n\r\n'
7098,'IgorMinar',"with ngTouch enabled cannot register click events in directives\napp.directive('testclick', function(){return function(scope,element,attr}{\r\n    element.bind('click', function(){alert('clicked')})\r\n}})\r\n\r\nworks on touch devices without ngTouch loaded, but does not work with ngTouch loaded"
7094,'petebacondarwin','feat(ngModelOptions): support submit trigger\nFixes https://github.com/angular/angular.js/issues/7017'
7093,'IgorMinar',"Webstorm IDE complains about Regex Range\nRequest Type: bug\n\nHow to reproduce: Open angular.js in WebStorm 8, complains that character class may not be used inside character range\n\nComponent(s): $compile\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nIn CLASS_DIRECTIVE_REGEXP and COMMENT_DIRECTIVE_REGEXP, putting the \\- character at the end of the character patter speeds up many IDE parsers and alleviates some errors in certain IDE's. (WebStorm 8)\nFunctionally absolutely equivalent. No test change needed.\n\n**Other Comments:**\n\n"
7092,'petebacondarwin',"angular-mocks matchData fails is data is serialized\n**Overview of the issue**\r\n\r\nSometimes when dealing with picky APIs you need to send serialized data from $http, rather than a json object. The angular-mocks method to match expected data to actual data fails when called with serialized data because it tries to call `fromJson()` which throws the error `Unable to parse JSON string`. \r\n\r\nFollowing stack trace leads to angular-mocks matchData function\r\n \r\n```\r\nSyntaxError: Unable to parse JSON string\r\n\t    at fromJson (/angular.js:1037)\r\n\t    at /angular-mocks/angular-mocks.js:1574\r\n\t    at $httpBackend (/angular-mocks.js:1146)\r\n\t    at sendReq (/angular/angular.js:7886)\r\n\t    at /angular/angular.js:7619\r\n\t    at /angular/angular.js:11033\r\n\t    at /angular/angular.js:11119\r\n\t    at /angular/angular.js:12045\r\n\t    at /angular/angular.js:11871\r\n\t    at /angular/angular.js:12151\r\n\t    at done (/angular/angular.js:7909)\r\n\t    at handleResponse (/angular-mocks/angular-mocks.js:1131)\r\n\t    at /angular-mocks/angular-mocks.js:1462\r\n\t    at /app/scripts/models/spec/some.spec.js:655\r\n\tExpected spy post to have been called with [ 'https://myapi/callme', '' ] but actual calls were [ 'https://myapi/callme', { somevalue : true } ]\r\n\r\n```\r\n\r\n**Due to nature of issue it most likely effects all version and all OS.**\r\n\r\n**No related issues found**\r\n\r\n**Possible Fix**\r\n\r\n    this.matchData = function(d) {\r\n        if (angular.isUndefined(data)) return true;\r\n        if (data && angular.isFunction(data.test)) return data.test(d);\r\n        if (data && angular.isFunction(data)) return data(d);\r\n        if (data && !angular.isString(data)) return angular.equals(data, angular.fromJson(d));\r\n        return data == d;\r\n    };\r\n\r\nShould have an added check such as: \r\n\r\n    this.matchData = function(d) {\r\n        if (angular.isUndefined(data)) return true;\r\n        if (data && angular.isFunction(data.test)) return data.test(d);\r\n        if (data && angular.isFunction(data)) return data(d);\r\n        if (data && angular.isSerialized(data)) return angular.equals(data, angular.unSerialize(d)); \r\n        if (data && !angular.isString(data)) return angular.equals(data, angular.fromJson(d));\r\n        return data == d;\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
7090,'matsko','ng-class animation styles without the element itself having transition attr\nWhy I need it..\r\n\r\nLook at this structure.\r\n\r\n```html\r\n<div ng-class="{ test: something == true }">\r\n  <div class="animation"></div>\r\n</div>\r\n```\r\n\r\nand I\'d like to do something like this\r\n\r\n```css\r\n.test-add .animation {\r\n  transition: opacity 500ms;\r\n}\r\n\r\n.test-add-active .animation {\r\n  opacity: 0;\r\n}\r\n```\r\n\r\n..and the reason why I\'m doing all this instead of simply adding ng-class to `.animation` itself, is because it seems to bug out when I try and use ng-class with the same varible on two different elements(only one transition happens, the other is instantly at the finished state)... it might be a bug in $animation, but I\'m not entirely sure'
7068,'btford','Update unsafe.ngdoc\nSuggest including ngSanatize.'
7041,'btford','Digest ng-repeat after manual DOM manipulation causes disorganized list\nI\'m using AngularJS 1.2.16.\r\n\r\n1. I have made 3 ng-repeat wrapped into each other based on $scope object\r\n2. With a button I move one of the last ng-repeat list element after the last element in jQuery, not within a Digest\r\n3. With another button I reverse all $scope elements in last ng-repeat list then Digest is fired.\r\n\r\nAfter that, I expecting to have all the initial elements in reverse order in my view. But I have a disorganized elements list.\r\n\r\nHere is a demo to try: http://jsfiddle.net/xavierboubert/4AvQG/8/\r\nLook at the list of Items, click "Modif DOM please" then click "Reverse please".\r\n\r\n(In a real project, I\'m using jQuery UI with a customized sortable with multiple elements)\r\n'
7031,'caitp',"fix($httpBackend): don't error when JSONP callback called with no parameter\nThis change brings Angular's JSONP behaviour closer in line with jQuery's. The feature has\r\nalready landed in the 1.3 branch as 6680b7b, however this alternative version is intended\r\nto implement the feature in an IE8-compatible fashion."
7030,'IgorMinar','improve(docs): add $location.search() example\nAdded a usage example for the retrieval of a specific value of the search (query) in a URL.'
7025,'vojtajina',"$http async=false still work in async mode.\n[won't wait for http request finish.]\r\n\r\n\t$http({ url: server,\r\n\t\t\tmethod: 'GET',\r\n\t\t\tasync: false});\r\nstill return a promise immediately."
7021,'petebacondarwin','The "Wire up a Backend" Sample is missing CSS\nHey guys!\r\n\r\nI have been testing AngularJS with Google+ Hangouts application development and so far I\'ve managed to get it working.\r\n\r\nHowever, while trying to integrate each of the samples on the AngularJS.org home page, I discovered that I couldn\'t see the edit buttons found in "list.html" in the "Wire up a Backend" sample, so I couldn\'t fully test the routing functionality.\r\n\r\nDrilling through the sample code I saw that list.html uses "icon-pencil" and "icon-plus-sign" class definitions in the list. However there is no CSS file in that sample which would define those classes, so no image appears, and therefore the links which invoke the routing are not clickable.\r\n\r\nI found the style in bootstrap.css (from the "Create Components" example) so when I included that, the sample worked as shown.\r\n\r\nIt would be really helpful for users new to AngularJS if the samples on the home page worked out of the box - it would increase confidence in the framework.\r\n\r\nLove AngularJS guys - it\'s a joy to work with!\r\n\r\nCheers,\r\nDale Darling'
7017,'petebacondarwin',"Support 'submit' updateOn trigger for forms when using ng-model-options\nThis seems important since when we have inputs that pend updates using `ng-model-options` we still want all changes to take place immediately if the form is submitted.\r\n\r\nI'll have a PR ready with this probably this week.\r\n\r\nThis can be also very useful since ppl will no longer need to have shadow copies of objects while they let users edit an object in a form. The changes will be flushed only when the form is submitted if they use something like `{updateOn: 'submit', validateOn: 'default'}` (see https://github.com/angular/angular.js/issues/7016)"
7014,'petebacondarwin','fix(ngModelOptions): introduce $cancelUpdate to cancel pending updates\n$cancelUpdate cancels any debounce action and resets the view value by invoking $render. this method should be invoked before programmatic update to the model of input that might have pending updates due to updateOn or debounced actions. Fixes https://github.com/angular/angular.js/issues/6994'
7005,'petebacondarwin','Update step_11.ngdoc\nMinor change: add missing bower reference link.'
7004,'petebacondarwin',"Update docs\nsort key has to be prefixed with '+' or '-' when used in html or else it doesn't work!"
7002,'petebacondarwin',"Some small doc updates\nI'm new enough to angular that I'm not positive I got the $save().then() example right, so I would appreciate a second pair of eyes."
7001,'petebacondarwin','Update step_08.ngdoc\nAngularJS test runner API has been deprecated, Protractor is advised: http://docs.angularjs.org/guide/e2e-testing\r\nLink is updated to direct reader to Protractor API.'
7000,'petebacondarwin','Why is the "code" directive in docs/app/src/directives.js defined twice?\nI\'m gonna guess that the second definition overrides the first definition in [docs/app/src/directives.js](https://github.com/angular/angular.js/blob/master/docs/app/src/directives.js). Is there an advantage in defining it twice?'
6999,'petebacondarwin','The Dependency Injection guide needs a few more details.\nIt needs to include which dependencies are available for controllers and factories.\r\n\r\nFor example, `$scope` is not a dependency that you can request for a directive. It\'s not possible to do\r\n\r\n```javascript\r\nmyApp.directive("newDirective", ["$scope", function(s) {/* ... */}]);\r\n```\r\n\r\nCan we add some notes [on the DI guide](http://docs.angularjs.org/guide/di) about what is and isn\'t allowed to be injected to the various things that are injectable?  Perhaps the differences may not be much (e.g. no $scope for directives), but at least a note of it would be helpful even if that\'s the case.\r\n\r\nI would do it but I\'m not knowledgeable enough on the topic yet (I was looking for such information but I couldn\'t find it).'
6998,'petebacondarwin','Made the sentence more clear.\nIt was hard to understand.'
6996,'petebacondarwin','Fix explanation of script tag change\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): ngRoute\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nThe description says we added "to new tags" which probably was supposed to be "two new tags". But even with that it\'s a bit confusing because there is one tag added compared to the previous step, that is the tag for `angular-route.js`. I just updated the doc to say this more clearly.'
6994,'petebacondarwin',"Programmatic updates of the model in ngModelOptions\nSadly there are still issues with programmatic updates of the model in the new `ngModelOptions`:\r\nhttp://plnkr.co/edit/C8IzuF?p=preview\r\n\r\n* In the first input, we have a debounced update. Try to start typing in the input and then click the `clear` button. The debounced is canceled alright, but the value in the input is not reset. :( This obviously happens because the model update did not reach the view since the model was not actually changed. Maybe this can be fixed by forcing a view update when debounce is canceled?\r\n\r\n* In the second input, we have an `{updateOn: 'focus'}`, so if we enter a value and then click the `clear`, the value also is not reset. This is essentially the same issue as the previous one, but here I don't have a good suggestion because we don't have anything like the `$cancelDebounce()` to indicate us to force the view change.\r\n\r\nWhat do you think?\r\n\r\nI'll be glad to take this PR, but first I think we should discuss a strategy of how to solve it."
6992,'matsko',"Caching prevents animation of a previous rendered template \nWhen I switch between multiple templates with animations (&.ng-enter, &.ng-leave) it only shows the animation once. When I switch to a template which I previously visited, the animation doesn't happen.\r\n\r\nThe bug doesn't appear if I manually disable the cache in https://github.com/angular/angular.js/blob/master/src/ng/directive/ngInclude.js#L208 by commenting the `$templateCache` service.\r\n```\r\n$http.get(src /*{cache: $templateCache}*/).success(function(response) {\r\n```\r\nThis is obviously not a solution, but there seems to be a side-effect on ngAnimate / ngInclude."
6986,'btford','fix(ngHref): remove attribute when empty value instead of ignoring\nthis will allow updating the values of ng-src, ng-srcset, ng-href back to empty state while preserving the intended behavior of not setting the attribute to an empty string to prevent behavior like trying to download the current page as an image or creating a link to the current page.\r\n\r\nFixes https://github.com/angular/angular.js/issues/2755'
6984,'btford','ngHref prematurely adds href attribute when string is included as part of the expression\nThe ngHref doc page gives an example of the correct way of using ngHref to avoid broken URLs until {{hash}} is evaluated.\r\n\r\n```\r\n<a ng-href="http://www.gravatar.com/avatar/{{hash}}"/>\r\n```\r\n\r\nI\'ve created a plunker that demonstrates that this generates the href attribute right away, prior to the {{hash}} evaluating, so the full url is not yet valid.\r\n\r\nMy understanding is that we should not see either link until {{hash}} is filled in (via the input box), but in the first link example in this plunker we do see an active link:\r\n\r\nhttp://plnkr.co/EOWiCm\r\n\r\nI traced through and it seems that the $observe() call is placed on the whole ngHref value and not just the {{hash}}.\r\n\r\nSeeing this happen in Angular 1.2.9 through 1.3.0-beta.4 (which the Plunker example is using). Reproduced in Chrome and Safari.\r\n\r\nI wasn\'t able to find a similar bug report.\r\n\r\nPotential fix:\r\n\r\nThe fix might be parsing the ngHref attribute and just observing when the {{hash}} changes and not the string around it.  Here was the snippet that was adding the observers in **booleanAttrs.js**.\r\n\r\n```\r\n        attr.$observe(normalized, function(value) {\r\n          if (!value)\r\n             return;\r\n\r\n          attr.$set(name, value);\r\n\r\n          // <removed note about IE>\r\n\r\n        });\r\n```'
6976,'jeffbcross','infinite $digest when using history api\nI encountered this issue when using [Dropbox Datastore API](https://www.dropbox.com/developers/datastore/sdks/js), which invokes `history.replaceState` after OAuth redirection. By adding a callback to `$routeChangeStart` event, it seems the app is doing routing repeatedly.\r\n\r\nOnly use `$location` may not always be possible when involving third party library or other app. Is there a workaround or imminent fix on this? \r\n\r\n\r\n__Angular Version(s)__: 1.2.15\r\n__Browsers and Operating System__: Chrome 33 on OS X 10.9\r\n__Reproduce Error__: http://jsfiddle.net/7t7eK/ from #1417 with Angular 1.2.15\r\n__Related issues__: #1417 , #3924\r\n\r\nError and trace that I got:\r\n```\r\n10x on $routeChangeStart\r\nError: [$rootScope:infdig] 10 $digest() iterations reached. Aborting!\r\nWatchers fired in the last 5 iterations: [["fn: $locationWatch; newVal: 7; oldVal: 6"],["fn: $locationWatch; newVal: 8; oldVal: 7"],["fn: $locationWatch; newVal: 9; oldVal: 8"],["fn: $locationWatch; newVal: 10; oldVal: 9"],["fn: $locationWatch; newVal: 11; oldVal: 10"]]\r\nhttp://errors.angularjs.org/1.2.15/$rootScope/infdig?p0=10&p1=%5B%5B%22fn%3…2fn%3A%20%24locationWatch%3B%20newVal%3A%2011%3B%20oldVal%3A%2010%22%5D%5D\r\n    at http://localhost:9000/bower_components/angular/angular.js:78:12\r\n    at Scope.$digest (http://localhost:9000/bower_components/angular/angular.js:12070:19)\r\n    at Scope.$apply (http://localhost:9000/bower_components/angular/angular.js:12279:24)\r\n    at http://localhost:9000/bower_components/angular/angular.js:1382:15\r\n    at Object.invoke (http://localhost:9000/bower_components/angular/angular.js:3805:17)\r\n    at doBootstrap (http://localhost:9000/bower_components/angular/angular.js:1380:14)\r\n    at bootstrap (http://localhost:9000/bower_components/angular/angular.js:1394:12)\r\n    at angularInit (http://localhost:9000/bower_components/angular/angular.js:1307:5)\r\n    at http://localhost:9000/bower_components/angular/angular.js:21163:5\r\n    at HTMLDocument.trigger (http://localhost:9000/bower_components/angular/angular.js:2445:7) angular.js:9563\r\n(anonymous function) angular.js:9563\r\n(anonymous function) angular.js:7004\r\nScope.$apply angular.js:12281\r\n(anonymous function) angular.js:1382\r\ninvoke angular.js:3805\r\ndoBootstrap angular.js:1380\r\nbootstrap angular.js:1394\r\nangularInit angular.js:1307\r\n(anonymous function) angular.js:21163\r\ntrigger angular.js:2445\r\n(anonymous function) angular.js:2716\r\nforEach angular.js:330\r\neventHandler angular.js:2715\r\n\r\nUncaught Error: [$rootScope:infdig] 10 $digest() iterations reached. Aborting!\r\nWatchers fired in the last 5 iterations: [["fn: $locationWatch; newVal: 7; oldVal: 6"],["fn: $locationWatch; newVal: 8; oldVal: 7"],["fn: $locationWatch; newVal: 9; oldV...<omitted>...5D angular.js:78\r\n(anonymous function) angular.js:78\r\nScope.$digest angular.js:12070\r\nScope.$apply angular.js:12279\r\n(anonymous function) angular.js:1382\r\ninvoke angular.js:3805\r\ndoBootstrap angular.js:1380\r\nbootstrap angular.js:1394\r\nangularInit angular.js:1307\r\n(anonymous function) angular.js:21163\r\ntrigger angular.js:2445\r\n(anonymous function) angular.js:2716\r\nforEach angular.js:330\r\neventHandler angular.js:2715\r\non $routeChangeStart \r\non $routeChangeStart \r\non $routeChangeStart \r\n```\r\n\r\n'
6965,'matsko','fix(ngClass): handle ngClassOdd/Even affecting the same classes\nThe basic approach is to introduce a new `elt.data()` called `$classCounts` that keeps track of how many times `ngClass`, `ngClassEven`, or `ngClassOdd` tries to add a given class. The class is added only when the count goes from `0` to `1`, and removed only when the count hits `0`.\r\n\r\nIn order to avoid duplicating work, I moved some of the logic for checking which classes to add/remove into this directive and make the call to `$animate` myself.\r\n\r\nCloses #5271'
6957,'matsko','ngClass space-delimited class string not being applied correctly when ngAnimate enabled\nngClass seems to have trouble figuring out which old classes to remove if the databinding expression evaluates to string of space-delimited class names with the following format: `"before-class [my-dynamic-class] after-class"`\r\n\r\nThis problem only appears when \'ngAnimate\' is listed as an app dependency (even if no animations are specified).\r\n\r\nIt appears this bug was introduced with 1.2.13 (the example works fine if you include AngularJS 1.2.12 instead).\r\n\r\n---\r\n\r\n__Example here:__ http://jsfiddle.net/8zs4r/\r\n\r\n(all the bullet points are meant to stay the same color as each other – try clicking the button repeatedly and see what happens)'
6934,'petebacondarwin','Return type annotation invisible in docs\nexample page: http://docs.angularjs.org/api/ng/service/$interval\r\n\r\n![screen shot 2014-04-01 at 2 07 29 am](https://cloud.githubusercontent.com/assets/216296/2577231/379193aa-b97d-11e3-8318-9404800db859.png)'
6928,'matsko',"Forms validation refactoring\nThis is a meta issue for refactoring of forms validation in AngularJS.\r\n\r\nWe are considering to do this in 1.3, but it might slip.\r\n\r\nRelated/Sub issues:\r\n\r\n- #6304 - when ng-maxlength is invalid, 'require' validation is also invalid\r\n- #6818 - Input number with required validation is broken on chrome\r\n- #6828 - ngOptions : regression 1.2.15 && 1.3.0-beta.3\r\n- #6002 - Forms validation refactoring\r\n- #6928 - ngMin doesn't render values that are initially invalid"
6921,'btford','Save people time with this valuable info.\n'
6919,'tbosch','orderByFilter : sensitivity base to ignore accents\norderByFilter cannot sort list with accent. Exemple : \r\n\r\n```\r\naaa\r\neee\r\nzzz\r\nééé (should be before zzz)\r\n```\r\nI tried to rewrite the orderByFilter of the <a href="http://code.angularjs.org/1.2.15/angular.js">angular.JS build</a> with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">localeCompare</a> but the performance is really bad. + 40mo of RAM under Chrome for a simple list of 40 objects.\r\n \r\n```\r\nfunction compare(v1, v2){\r\n       return String(v1).localeCompare(String(v2), undefined, {sensitivity: \'base\'})\r\n}\r\n```\r\n\r\nAny proposal ?'
6918,'IgorMinar','removeWindowsDriveName breaks routes with encoded URLs in the hash\nWith\r\n\r\n```html\r\n<a ng-href="#show/{{ site.url }}">{{ site.name }}</a>\r\n```\r\nwhere site is\r\n\r\n```javascript\r\n{ name: "Google", url: encodeURIComponent("http://www.google.com/") }\r\n```\r\n\r\nThe click handler for the anchor eventually calls [removeWindowsDriveName](https://github.com/angular/angular.js/blob/3d6dff44f33b192a7fa007bfda5e44574fadc6e1/src/ng/location.js#L198) with the parameters:\r\n\r\n```javascript\r\npath = "/show/http://www.google.com/";\r\nurl = "show/http%3A%2F%2Fwww.google.com%2F";\r\nbase = "http://127.0.0.1:8080/"; // the base URL of my application\r\n```\r\n\r\nHowever, it thinks everything up to and including the http is a drive letter and strips it out and returns "//google.com/". This results in the browser URL being set to "#//google.com/" which, for example, breaks the route I set up for ```/show/:url```.\r\n\r\nSince this function is specifically supposed to catch drive letters immediately after the first forward slash, the regex it uses should be more precise:\r\n```/^\\/[a-zA-Z]:(\\/.*)/``` instead of ```/^\\/?.*?:(\\/.*)/``` perhaps.\r\n\r\n(Yes Windows can only have single-letter drive letters, and they can only be A-Z.)\r\n\r\nFor now, I\'ve worked around it by encodeURIComponent\'ing twice and decodeURIComponent\'ing the route parameter in the controller. It makes for uglier URLs but atleast it works.'
6914,'btford','Improve wording for Model definition.\nThat makes more sense.\r\n\r\nWhere is the "Directive Info" published?\r\n\r\n```\r\nThis directive creates new scope.\r\n```\r\n\r\ncan be changed to\r\n\r\n```\r\nThis directive creates a new scope.\r\n```'
6912,'tbosch','Update version-info.js\nreplaced grep with match\r\nWindows operating systems do not have grep by default'
6910,'tbosch',"fix(ngEventDirs): blur and focus use $evalAsync to prevent inprog errors\nRequest Type: bug\r\n\r\nHow to reproduce: \r\n\r\n- ng-click triggers focus() on an element that has ng-focus \r\n- ng-key* triggers blur() on an element that has ng-blur \r\n- moving an element  in an ng-repeat  that has ng-blur before the preceding item\r\n\r\nComponent(s): \r\n\r\nImpact: medium\r\n\r\nComplexity: medium\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\n\r\n\r\n**Other Comments:**\r\n\r\nThis fixes cases where ngFocus and ngBlur will throw $rootScope.inprog errors, because they have been called during an active digest. There are (at least) three scenarios where this can happen, see above\r\n\r\nng-click triggers focus() on an element that has ng-focus\r\nng-key* triggers blur() on an element that has ng-blur\r\nmoving an element with ng-blur in an ng-repeat before the preceding item\r\n\r\nThere's some discussion about this in #5402\r\n\r\nI'd say we give it a shot and see if it causes any problems. Using $evalAsync was suggested by @caitp in https://github.com/angular/angular.js/issues/4979#issuecomment-35659108 .\r\n\r\nFixes #5945\r\nCloses #5402"
6908,'IgorMinar','fix(scope): do not remove the $listeners properties on $destroy\nDestroying the listener properties cases many issues when any of these operations is being performed on a destroyed scope or a child scope\r\n* Registering a new event\r\n* Deregistering an existing event\r\n* Destroying an insolated child scope with a destroyed parent\r\n* Sending an `$emit` from a child scope with a destroyed parent\r\n\r\nCloses #6897'
6907,'jeffbcross','docs(guide): fixes link in "Complementary libraries" section\nthe link to `angular-translate` is outdated. this commit fixes it.'
6897,'IgorMinar',"decrementListenerCount: TypeError: Cannot read property '$destroy' of null\nWith AngularJS v1.3.0-build.2533+sha.ff5cf73 I get the following in my application. It occurs during navigation, it looks as if Angular tries to destroy one of the scopes in my application twice.\r\n\r\n```\r\nTypeError: Cannot read property '$destroy' of null\r\n    at decrementListenerCount (http://localhost:9000/bower_components/angular/angular.js:12686:32)\r\n    at http://localhost:9000/bower_components/angular/angular.js:1012:18\r\n    at forEach (http://localhost:9000/bower_components/angular/angular.js:330:20)\r\n    at Scope.$destroy (http://localhost:9000/bower_components/angular/angular.js:12306:9)\r\n    at HTMLDivElement.<anonymous> (http://localhost:9000/bower_components/angular/angular.js:1017:18)\r\n    at HTMLDivElement.jQuery.event.dispatch (http://localhost:9000/bower_components/jquery/jquery.js:5095:9)\r\n    at HTMLDivElement.elemData.handle (http://localhost:9000/bower_components/jquery/jquery.js:4766:28)\r\n    at Object.jQuery.event.trigger (http://localhost:9000/bower_components/jquery/jquery.js:5007:12)\r\n    at jQuery.fn.extend.triggerHandler (http://localhost:9000/bower_components/jquery/jquery.js:5697:24)\r\n    at removePatch [as remove] (http://localhost:9000/bower_components/angular/angular.js:2213:21) angular.js:9735\r\n(anonymous function) angular.js:9735\r\n(anonymous function) angular.js:7169\r\nScope.$broadcast angular.js:12640\r\n$state.transition.resolved.then.$state.transition angular-ui-router.js:2114\r\nwrappedCallback angular.js:11272\r\n(anonymous function) angular.js:11358\r\nScope.$eval angular.js:12359\r\nScope.$digest angular.js:12177\r\nScope.$apply angular.js:12463\r\n(anonymous function) angular.js:9524\r\njQuery.event.dispatch jquery.js:5095\r\nelemData.handle\r\n```\r\n\r\nScope looks like this at this point:\r\n\r\n```\r\nChildScope {$id: null, this: null, $$listeners: null, $$listenerCount: null, $parent: null…}\r\n$$childHead: null\r\n$$childTail: null\r\n$$destroyed: true\r\n$$listenerCount: null\r\n$$listeners: null\r\n$$nextSibling: null\r\n$$prevSibling: null\r\n$$watchers: null\r\n$id: null\r\n$parent: null\r\ndata: null\r\nselectSection: null\r\nselectTab: null\r\ntabs: null\r\nthis: null\r\n```"
6892,'jeffbcross',"style(loader.js): correct JSDoc tags of the params of the function module(name, requires, configFn)\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): misc core\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nThis will improve the hints for IDE's which support the Google Closure Compiler (e.g. Webstorm)"
6891,'IgorMinar',"fix(ngCloak) don't show template binding braces during ng-init\nRequest Type: \n\nHow to reproduce: \n\nComponent(s): misc core\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nwill prevent showing binding braces during ng-init.\r\n\r\ncloses #2927"
6884,'IgorMinar','in the \'ngTouch\' module, the a link is prevented when it has a ng-Click directive\ni use the angular 1.3.0.beta.2 and corresponding angular-touch.\r\ni add a ng-Click directive to the \'<a>\', this is my code:\r\n\r\nthe js\r\n\r\n    app = angular.module(\'app\', [\'ngTouch\'])\r\n\r\nthe html\r\n\r\n    <a href="#/sameHash" ng-click="hideSide()" class="sideIcon">some hash</a>\r\n\r\nwhen click the a tag  ,the  \'hideSide\'  function was runn,but the url didn\'t change.\r\nif i remove the ngTouch module, it the \'hideSide\' function run, and url change too.\r\ni want to use the ngTouch module,how do i get the a link usefull with ngClick'
6871,'btford','Filter docs\n'
6869,'IgorMinar',"docs($compile): add note about recursive compilation in templates\nI am not sure the explanation is clear, but I think it's something that should be noted.\r\n\r\nCloses https://github.com/angular/angular.js/issues/3079"
6856,'tbosch',"fix(Scope): aggressively clean up scope on $destroy to minimize leaks\nDue to a known V8 memory leak[1] we need to perform extra cleanup to make it easier\r\nfor GC to collect this scope object.\r\n\r\nThe theory is that the V8 leaks are due to inline caches which are caches\r\nbuilt on the fly to speed up property access for javascript objects.\r\n\r\nBy cleaning the scope object and removing all properties, we clean up ICs\r\nas well and so no leaks occur.\r\n\r\nI was able to manually verify that this fixes the problem for the following\r\nexample app: http://plnkr.co/edit/FrSw6SCEVODk02Ljo8se?p=preview\r\n\r\nGiven the nature of the problem I'm not 100% sure that this will work around\r\nthe V8 problem in scenarios common for Angular apps, but I guess it's better\r\nthan nothing.\r\n\r\nCloses #6794"
6848,'petebacondarwin','chore(docs): remove unneeded Bootstrap/jQuery files from distribution\nRequest Type: chore\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: medium\n\nComplexity: medium\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nsaves .75 megabytes in the zip'
6830,'IgorMinar','Updated example for resource.js\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): ngResource\n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nWrong parameters in example of query function of ngResource\n\n**Other Comments:**\n\n'
6828,'IgorMinar','ngOptions : regression 1.2.15 && 1.3.0-beta.3\nWhen the select tag has the required attribute, the default blank option is ignore.\r\n\r\n<a href="http://jsfiddle.net/yappli/X8era/19/" target="_blank">1.2.14 works</a>\r\n<a href="http://jsfiddle.net/yappli/X8era/20/" target="_blank">1.2.15 doesn\'t</a>\r\n<a href="http://jsfiddle.net/yappli/X8era/21/" target="_blank">1.3.0-beta.3 doesn\'t</a>\r\n\r\n<a href="http://jsfiddle.net/yappli/X8era/20/" target="_blank">See the jsfiddle</a>'
6822,'petebacondarwin',"@-signs in doc block code examples don't get converted from HTML entities\nThere's a doc comment in the ngAnimate source that includes a CSS `@keyframes` example. The '@' sign is entered as an HTML character entity so as not to conflict with doc parsing:\r\n\r\nhttps://github.com/angular/angular.js/blob/master/src/ngAnimate/animate.js#L109\r\n\r\nOn the documentation page, this HTML entity does not get converted:\r\n\r\nhttp://docs.angularjs.org/api/ngAnimate\r\n\r\nHere's what it looks like:\r\n![screen shot 2014-03-24 at 7 06 41 pm](https://f.cloud.github.com/assets/342964/2506724/5f3fb822-b3ac-11e3-96a2-8819aa31e6cd.png)\r\n\r\nI tried adding a semicolon and building the docs, but even then I still see the character entity not the '@' symbol."
6820,'btford',"Main AngularJS site home page refreshes infinitely on IE9\nThe Main initial AngularJS.org site home page refreshes infinitely on IE9.  \r\nIt never fully loads. It alternates between the base http://angularjs.org url and the http://angularjs.org/# url every 3 seconds and the entire page repaints - sometimes missing part of the pages visual state. \r\n\r\nI have no love for IE. However, it looks really very bad and unprofessional of the AngularJS.org website to behave so incredible poorly that it cannot be used or read. The main page won't even load.  When I'm trying to convince my colleagues how great AngularJS is, and then they load AngularJS with the corporate browser IE, how can they take AngularJS seriously when the web page won't even load and stabilize so they can read it? \r\n\r\nIt would really help credibility of AngularJS if you could at least fix the main angularjs.org page.  IT should not show up in an infinite loop which makes the AngularJS home page not at all useable on IE9.  \r\n\r\nThanks,\r\nDavid"
6818,'matsko','Input number with required validation is broken on chrome\nWhen you have a input[number] with required validation, number validation stops working correctly.\r\n\r\nIf the field in pristine mode and you start typing letters instead of numbers things get weird and validity.badInput and validity.valueMissing are set as true at the same time, $error.required is set as true and $error.number set as false.\r\n\r\nReproduction: http://plnkr.co/edit/nGjpNLyT2RJ3URbT9Apg\r\nTested in Chrome Version 33.0.1750.152'
6817,'matsko','ngAnimate breaks when trying to animate ng-repeat calls nested inside ng-repeat-start/-end calls\nSee example: http://plnkr.co/edit/dtdINblvJ0oWMJIFaq31\r\n\r\nNesting ng-repeat blocks inside another ng-repeat-start/-end block breaks animations for the nested elements, when the nesting occurs in a block not directly tagged with ng-repeat-start.\r\n\r\nAs far as I can see this happens because the enter method is called for all elements contained in the ng-repeat-start/-end, setting the NG_ANIMATE_STATE to disabled=true, but the cleanup method is only called for the element that has the ng-repeat-start directly and not for any further elements down the line. So for elements below ng-repeat-start element.removeData(NG_ANIMATE_STATE); is never called and they stay disabled forever.'
6814,'IgorMinar',"Update step_02.ngdoc\nRequest Type: test\n\nHow to reproduce: Walk through step 2  on a machine without karma cli. Can't run the bash testing script.\n\nComponent(s): misc core\n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nIt's just an improvement to make the tutorial actually work if you've never installed karma before\n\n**Other Comments:**\n\nLine 189-Modified line to say what to install. Without -g karma-cli it won't run."
6807,'IgorMinar',"fix($compile): Major Memory Leak in Directive '&' attribute\nRequest Type: bug\n\nHow to reproduce: http://plnkr.co/edit/TW2TjC8JkxlDyQRCLcRg\nStart on Home, click link for Leak directive, click link for Home page.\nIn chrome timeline force garbage collection.\nTake heap snapshot. Despite being entirely gone from the page and no external references, directive is not GC'ed and because it contains a reference to it's parent, the parent is not collected either.\n\nComponent(s): $compile\n\nImpact: large\n\nComplexity: small\n\nThis issue is related to: a memory leak\n\n**Detailed Description:**\n\nWhen a directive is written using '&' reverse one way binding there is a major memory leak. \nwhen & attribute removed, leak is gone.\n\n**Other Comments:**\n\nFor functions that have a '&' binding on the scope, change the function\r\nfrom an inline definition to an external definition so the function\r\nclosure has no access to the parent scope.\r\nBackport of fix on 1.3.x\r\n\r\nCloses #6794"
6801,'IgorMinar',"fix($compile): fix memory leak\nFor functions that have a '&' binding on the scope, change the function from an inline definition to an external definition so the function closure has no access to the parent scope.\r\n\r\nCloses #6794\r\n\r\nNote: I am not sure this if this is a Chrome GC bug (as the function never uses the parent scope), but for the scenario from the issue, the patch fixes the leak\r\n"
6796,'auser','BUG - Html5 Validators are executed on model value change\nModel values updated on scope is blocked by invalid input state on Html5 Validators.\r\n\r\nExample:\r\n\r\n - Input box of type Number has current value= `foo`\r\n - Html5 validator correctly defines value as incorrect state\r\n - Code resets scope value to a valid number value\r\n - New number passes all standard validation\r\n - When it reaches `addNativeHtml5Validators` it checks input box value for validity not the new value on the scope\r\n - Input box value is set to undefined \r\n'
6794,'IgorMinar',"Major Memory Leak in Directives when using '&' binding\nWhen a directive is written using '&' reverse one way binding there is a major memory leak.  Once it is entered in the DOM, the Scope of the directive, it's parent, and detached DOM elements are NEVER garbage collected.  This is even after routing to another page and back.  The $destroy event does get called, but any cleanup done does nothing to fix the leak.\r\n\r\nTesting method:\r\nWe created an extremely simple directive:\r\n\r\n```js\r\nangular.module('leakApp').directive('leaker',function(){\r\n  return {\r\n    template: '<div><span>I leak</span></div>'\r\n    scope:{onLeak: '&'},\r\n    link: function(scope, element, attrs){\r\n      scope.$on('$destroy', function(){console.log(arguments)})\r\n  }\r\n});\r\n```\r\n\r\nWe also created a simple router that switched between a plain text page and one with the directive.\r\n\r\nStart on blank page, click link for page with directive, click link for blank page.\r\nIn chrome timeline force garbage collection.\r\nTake heap snapshot.  Despite being entirely gone from the page and no external references, directive is not GC'ed and because it contains a reference to it's parent, the parent is not collected either.\r\n\r\nWe then removed just the 1 way binding attribute.\r\n\r\nThe leak was gone.\r\n\r\nPlease let me know if you have any questions.\r\n\r\nBen Tesser"
6793,'matsko','fix($animate): prevent cancellation timestamp from being too far in the future\nCloses #6748'
6756,'IgorMinar',"Clarifying some confusing points on migration doc\nSome parts of the migration doc were confusing or not totally accurate, based on my experience migrating an AngularJS project from 1.0 to 1.2.7. I've tried to update the doc to clarify some confusing points.\r\n\r\nI am completely new to AngularJS. Some of these documentation changes themselves might be inaccurate. Please look over carefully!"
6755,'matsko','input[type="date"] validity doesn\'t change when min/max change\nWhile creating the jsfiddle example in my [previous issue](https://github.com/angular/angular.js/issues/6754), I noticed that the validity of the date input doesn\'t get updated when the values of min/max change.\r\n\r\nhttp://jsfiddle.net/va4kb/2/\r\n\r\nMight just need a fix similar to: https://github.com/angular/angular.js/pull/6369\r\n\r\nEdit:\r\nThough, the validity of the date input does get updated if you make a change to the input after min/max are changed.'
6748,'matsko','ngAnimate leaves elements in DOM for a strange amount of time\nExample fiddle here: http://jsfiddle.net/Ttj24/2/\r\nTry pressing enter several times (or any other keyboard key) whilst having focus on the input. On each keydown I clear the ngRepeat array, and append two elements to it.\r\n\r\nAfter you run the fiddle, every `keydown` on the aforementioned input adds two new `ngRepeat` elements. After about 6 seconds if I hit another (e.g.) `enter` key in that input all of the elements except the first two disappear (after 0.27s which is related to #6747). After that every `enter` adds two elements and removes as expected.\r\n\r\nIf you change the transition duration on `.anim` to e.g. `0.5s` like this (and then rerun the fiddle):\r\n```css\r\n.anim.ng-enter{\r\n    transition: all 0.5s ease;\r\n}\r\n```\r\nthe 6 seconds I wrote becomes about **3 minutes or more**.'
6746,'petebacondarwin','fix($filter): $orderBy filter with dates when sorting multiple fields\nRequest Type: \n\nHow to reproduce: \n\nComponent(s): misc core\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nRequest Type: \r\n\r\nHow to reproduce: \r\n\r\nComponent(s): \r\n\r\nImpact: small\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\n\r\n\r\n**Other Comments:**\r\n\r\n\r\nextend compare method to use Date.valueOf() when comparing dates\r\n\r\ncloses #6676 '
6739,'matsko',"Animations start, cancel and start again on slow mobile devices using iOS or old Android versions\nIn the current implementation, when you call addClass/removeClass, to get the timing, the library [adds the class, gets the timing and removes the class again](https://github.com/angular/angular.js/blob/7b5e019981f352add88be2984de68e553d1bfa93/src/ngAnimate/animate.js#L1536), *hoping that the browser wouldn't notice* if it's fast enough. And then it adds the class again to make the actual animation.\r\n\r\nThe problem with this, is that with slower devices, the browser starts the animation before the code has time to remove the class. This causes the animation to start, cancel, and then start again.\r\n\r\nYou can check the bug on mobile devices using [the following fiddle](http://jsfiddle.net/zequez/4JrnV/9/) ([full screen version](http://jsfiddle.net/zequez/4JrnV/9/embedded/result)). I added some layers to make the device choke a little. I tested that fiddle causing the issue, on a current gen iPod Touch, running iOS 7. Also tested on an iPod Touch 4g running iOS 6.1.  And it also happened using the vanilla Android Browser on Android 4.1 in the Android emulator. You might have to tap a few time before you see the issue.\r\n\r\nOn mobile or desktop Chrome the issue is not visible, at least on Android 4.4.2."
6728,'btford','chore(CONTRIBUTING): merge relevant updates from angular.dart\nBack port changes to angular.dart `CONTRIBUTING.md`, as suggested by @vicb in AngularDart [#740](https://github.com/angular/angular.dart/pull/740).'
6725,'IgorMinar','Update nonassign.ngdoc\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): $compile\n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nIt might seem obvious that if you don\'t supply "bind" attribute in this case, you\'ll get an error, but I feel this is worth adding to the doc, because this was my error, and the documentation led me to try every permutation of attribute values on <my-directive>1, and completely missed the fact that <my-directive>2 in my code didn\'t have ANY attribute.  If my proposed edit had been there, I might have found my problem earlier.\n\n**Other Comments:**\n\n'
6724,'btford','clarify documentation for $event in ng-click et al\n'
6722,'geddski','doc: html5Mode needs to be enabled on $location\n'
6719,'btford','feat(injector): "strict-DI" mode which disables "automatic" function annotation / inferred dependencies\nThis modifies the injector to prevent automatic annotation (or inferring dependencies based on formal parameter names) from occurring for a given injector.\r\n\r\nThis behaviour can be enabled when bootstrapping the application by using the attribute\r\n"ng-strict-di" on the root element (the element containing "ng-app"), or alternatively by passing\r\nan object with the property "strictDi" set to "true" in angular.bootstrap, when bootstrapping\r\nmanually.\r\n\r\nJS example:\r\n\r\n```js\r\n    angular.module("name", ["dependencies", "otherdeps"])\r\n      .provider("$willBreak", function() {\r\n        this.$get = function($rootScope) {\r\n        };\r\n      })\r\n      .run(["$willBreak", function($willBreak) {\r\n        // This block will never run because the noMagic flag was set to true,\r\n        // and the $willBreak \'$get\' function does not have an explicit\r\n        // annotation.\r\n      }]);\r\n\r\n    angular.bootstrap(document, ["name"], {\r\n      strictDi: true\r\n    });\r\n```\r\n\r\nHTML:\r\n\r\n```html\r\n    <html ng-app="name" ng-strict-di>\r\n      <!-- ... -->\r\n    </html>\r\n```\r\nThis will only affect functions with an arity greater than 0, and without an $inject property.\r\n'
6713,'IgorMinar','feat($http): add xhr statusText to completeRequest callback\nMakes xhr status text accessible is $http success/error callback. See\r\nwww.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-statustext\r\n\r\n(This is just a rebased version of the other PR (#2665), meant to fix the bitrot so it can be merged.\r\nReview is needed!)\r\n\r\nCloses #2335\r\nCloses #2665'
6711,'matsko','Getting multiple views on the dom.\nPost upgrading to 1.2.14 I am getting multiple views on the dom when I did not previously and it is unexpected.  Worked fine previously.  My .config looks like the following:\r\n   \r\n    myApp.gwWebApp\r\n        .config([\'$routeProvider\',\'$locationProvider\', function($routeProvider, $locationProvider) {\r\n            $routeProvider\r\n              .when(\'/login\', {\r\n                controller: \'LoginController\',\r\n                templateUrl: \'/app/views/login.html\'\r\n              })\r\n              .when(\'/profiles\', {\r\n                controller: \'ProfileController\',\r\n                templateUrl: \'/app/views/profile.html\'\r\n              })\r\n              .when(\'/group/view/:id\', {\r\n                controller: \'GroupController\',\r\n                templateUrl: \'/app/views/group.html\'\r\n              })\r\n              .when(\'/calendar\', {\r\n                controller: \'CalendarController\',\r\n                templateUrl: \'/app/views/calendar.html\'\r\n              })\r\n              .when(\'/invite/:id\', {\r\n                controller: \'InviteController\',\r\n                templateUrl: \'/app/views/invite.html\'\r\n              })\r\n              .when(\'/notifications\', {\r\n                controller: \'NotificationsController\',\r\n                templateUrl: \'/app/views/notifications.html\'\r\n              })\r\n              .otherwise({\r\n                redirectTo: \'/main\'\r\n              });\r\n        /* $locationProvider.html5Mode(true); */\r\n    }]);\r\n\r\n\r\nOne of many route command might be like this href tag:\r\n     \r\n    <td ng-show=\'nav.unRespondedCount > 0\'><a href="#calendar" class="fa fa-calendar pink" data-bubble={{nav.unRespondedCount}} >\r\n\r\nIf I inspect the dom i see the both the current and past view with the angular animate classes now added:\r\n    \r\n    <div ng-view class="center-area center-canvas ng-scope ng-animate ng-leave ng-leave-active" style=""><!--div collapse="!showAlert">\r\n\r\n    <div ng-view class="center-area center-canvas ng-scope ng-animate ng-enter ng-enter-active" style=""><!--div collapse="!showAlert">\r\n\r\n\r\nVery strange...\r\n\r\nAfter some experimentation, I am seeing different behaviors depending upon how the location.path is updated or how the href is specified. I have experimented with href set to: "#/[route]\' or location.path(\'/[route]\').  '
6702,'IgorMinar','Building docs from latest source doesn\'t work\n\r\nAfter following the steps outlines on Angular site related to building locally, "grunt package" fails with the following trace:\r\n\r\n------\r\n\r\nError: Invalid configuration.  Please provide a valid `source.previousVersions` property\r\n    at module.exports.process (.../angular.js/docs/config/processors/versions-data.js:18:13)\r\n    at invoke (.../angular.js/node_modules/dgeni/node_modules/di/lib/injector.js:75:15)\r\n    at processingPromise.then.catch.error.message (.../angular.js/node_modules/dgeni/lib/doc-processor.js:117:31)\r\n    at _fulfilled (.../angular.js/node_modules/dgeni/node_modules/q/q.js:798:54)\r\n    at self.promiseDispatch.done (.../angular.js/node_modules/dgeni/node_modules/q/q.js:827:30)\r\n    at Promise.promise.promiseDispatch (.../angular.js/node_modules/dgeni/node_modules/q/q.js:760:13)\r\n    at .../angular.js/node_modules/dgeni/node_modules/q/q.js:574:44\r\n    at flush (.../angular.js/node_modules/dgeni/node_modules/q/q.js:108:17)\r\n    at process._tickCallback (node.js:415:13)\r\nWarning: doc generation failed Use --force to continue.\r\n-----\r\n\r\nI am only a beginner when it comes to Javascript and Angular but it appears to me that "gitInfo" is not being passed to the function "process()" in "versions-data". \r\n\r\nI proceeded by initializing "versions" to some random value (["1.42.1"]) as all I wanted was to get the latest docs. \r\n\r\nThanks,\r\nRaghu\r\n\r\n\r\n'
6693,'lgalfaso','docs(orderBy): Clarify "reverse" vs. "-property"\ndocs(orderBy):\r\n\r\nThis clarifies the relationship between "reverse" and "-property".  The original didn\'t make it clear they did the same thing.  It also clarifies the required quoting for a property name and fixes one minor typo.'
6690,'tbosch','chore(angularjs.org/publish.sh): align release script with new website\n@tbosch - this seems to fit the bill - I have run it locally both on the 1.3 and 1.2 branches with various values for the cdnVersion.'
6680,'IgorMinar','fix(ngOptions): don\'t change user selections while <select> open in fire...\nSample patch that fixes issue #6679 but may regress parts of the code base.\r\n\r\nI\'m finding it difficult to verify the test suite because these unit tests are failing for me in New Zealand (see issue #5017). But time zone errors aside, I believe my patch breaks subtly with this output: \r\n```\r\nChrome 33.0.1750 (Linux) select ngOptions binding should select correct input if previously selected option was "?" FAILED\r\n  Expected \'1\' to equal \'0\'.\r\n  Error: Expected \'1\' to equal \'0\'.\r\n      at null.<anonymous> (/home/mbgray/workspace/angular.js/test/ng/directive/selectSpec.js:965:31)\r\n  Expected false to be truthy.\r\n  Error: Expected false to be truthy.\r\n      at null.<anonymous> (/home/mbgray/workspace/angular.js/test/ng/directive/selectSpec.js:966:63)\r\n```\r\nI\'m submitting it anyway because it might be a starting point for conversation and other fixes. I\'m not as comfortable this deep in the framework and didn\'t know how to take this further.'
6678,'tbosch',"fix(version-info): explicitly specify the remote\n`git ls-remote --tags` assumes that you have a remote set up for your\r\ncurrent branch.  That isn't the case, at least for me, when I'm working\r\non local branches.  `grunt write` doesn't do the right thing in that\r\ncase (`git ls-remote --tags` bails out and the silent: true param makes\r\nthis a pain to debug.)  Prefer explicit to implicit."
6675,'matsko',"ngAnimate breaks jquery.transit (and possibly other transform-based animations) under Chrome\nI'm trying to animate transforms using JavaScript-based animations.\r\n\r\n``` \r\n(...)\r\nenter: function(element, done) {\r\n  element.transition( { scale: 1.5 }, done );\r\n}\r\n(...)\r\n```\r\n\r\nAlthough the above behaviour could be easily achieved using CSS, I need to use JS-animations (it's part of a bigger scenario).\r\n\r\nUnfortunately this doesn't work under Chrome. The transform is immediately set to the final value.\r\n\r\nThe problem is, ngAnimate in its `animateSetup` disables the transition with `blockTransitions` (as a workaround for a bug in Chrome/FF as it claims).\r\n\r\nApparently this workaround leads to another bug under Chrome/FF.\r\n\r\nhttp://plnkr.co/edit/z4sMCsDMvABPmvTnLzkp?p=preview\r\n"
6666,'btford','Change datetime individual\nWhen a date object is bound to date/time/week/month and the value is updated via one of these input controls then the date object is reset to the beginning of time. \r\n\r\n```\r\n    app.controller(\'MainCtrl\', function($scope) {\r\n      $scope.date = new Date();\r\n    });\r\n\r\n    <input type="date" ng-model="date">\r\n    <input type="time" ng-model="date">\r\n    <input type="week" ng-model="date">\r\n    <input type="month" ng-model="date">\r\n    <input type="datetime-local" ng-model="date">\r\n```\r\n\r\nChange the date/time/week and you\'ll see that it resets.\r\n\r\nhttp://plnkr.co/edit/WTZtQG96D7qEbd310Y0d?p=preview'
6663,'matsko','fix($animate): insert elements at the start of the parent container instead of at the end\nWith 1.2.x, `$animate.enter` and `$animate.move` both insert the element at the end of the provided\r\nparent container element when only the `parent` element is provided. If an `after` element is provided\r\nthen they will place the inserted element after that one. This works fine, but there is no way to\r\nplace an item at the top of the provided parent container using these two APIs.\r\n\r\nWith this change, if the `after` argument is not specified for either `$animate.enter` or `$animate.move`,\r\nthe new child element will be inserted into the first position of the parent container element.\r\n\r\nCloses #4934\r\nCloses #6275\r\n\r\nBREAKING CHANGE: $animate will no longer default the after parameter to the last element of the parent\r\ncontainer. Instead, when after is not specified, the new element will be inserted as the first child of\r\nthe parent container.\r\n\r\nTo update existing code, change all instances of `$animate.enter()` or `$animate.move()` from:\r\n\r\n`$animate.enter(element, parent);`\r\n\r\nto:\r\n\r\n`$animate.enter(element, parent, angular.element(parent[0].lastChild));`'
6659,'lgalfaso','listbox directive with compile time adding of attribute in directive doesn\'t work\nI have created a sample to show this weird behavior  http://plnkr.co/edit/GhlhTTPX0K0roQe8Wmpi?p=preview .\r\n\r\nWhen i add "multiple" attribute at the compile stage the result is that I can\'t select multiple elments consistently and clicking ad drag-selecting shows an empty option  from nowhere. \r\nThe other way around works(removing the multiple attribute from the template at compile time). Also it seams that "replace:true" also has an influence on the overall behavior'
6650,'auser','fix(input):URL validation does not recognize URLs with no protocol\nRequest Type: \n\nHow to reproduce: \n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nNow recognizes URLs without protocol but it is far away from full-blown URL validator\n\n**Other Comments:**\n\nchange the url regexp to recognize urls without protocol\r\n\r\ncloses #6634'
6649,'btford',"HTML in documentation being put into doc as actual HTML\nWhen going to the documentation for attributes here: http://docs.angularjs.org/api/ng/type/$compile.directive.Attributes I see the following:\r\n\r\n![capture](https://f.cloud.github.com/assets/1561199/2389031/f4cd681c-a948-11e3-8ce6-559d3bd56f64.JPG)\r\n\r\nThe example of the &lt;span&gt; with the different ways of doing including attributes is not visible. By inspecting the page, I see:\r\n\r\n![capture2](https://f.cloud.github.com/assets/1561199/2389059/448b367c-a949-11e3-8cce-c3ad04e2304a.JPG)\r\n\r\nSo, the html included in the comments of the source (https://github.com/angular/angular.js/blob/master/src/ng/compile.js#L1963) is getting put into the page as straight HTML, making it not useful, since you can't actually see what the doc is talking about.\r\n\r\nI don't know how the source needs to be changed to prevent this, so I wanted to log an issue about it."
6642,'btford','How to intercept Requests (and not their response or their config)\nI have a little service that can tell if a site-global spinner should be shown or not. You can register your promises in that spinner service and the hasToBeShown() method of the service returns true if there is any open promise.\r\n\r\nCurrently I use it this way:\r\n\r\n                var promise = $http.get(url));\r\n                promise.then(function(response) {\r\n                    scope.data = response.data;\r\n                });\r\n                Spinner.addPromise(promise);\r\n\r\nbut I want a transparent solution where I do not have to worry about the spinner like this:\r\n                \r\n               $http.get(url)).then(function(response) {\r\n                    scope.data = response.data;\r\n                });\r\n\r\n\r\nTherefore I need a global interceptor, which add all response-promises to the Spinner service.\r\n\r\nThe old responseInterceptor API (angular 1.0) is only called when the response arrives which is too late to show a spinner.\r\n\r\nThe new interceptor API (angular 1.1, 1.2) allows me to run logic before the request is submitted. I can modify the request config there but of course I cannot get a promise on the no-yet-submitted request.\r\n\r\nI know I could work with a lot of workarounds here but this does not seem like a rare usecase, does it?'
6637,'caitp','fix(jqLite): traverse `host` property for DocumentFragment in inheritedData()\nIf dealing with a document fragment node with a host element, and no parent, use the host element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM to lookup parent controllers.\r\n\r\nThis is something which would be well-suited for 1.2.x as well as a 1.3 beta, in my opinion, as use of the shadowDOM may become more commonplace. This solution works for both the Polymer polyfill as well as the native implementation in Canary\r\n\r\n(might technically be a feature, but it feels like "fixing things to work with modern web", really)'
6635,'petebacondarwin','docs/chore(version stuff): fix how versions are handled in builds and docs\nThere are three somewhat independent commits.\r\n\r\n- The first is a simple bug fix in the docs\r\n- The second updates how the versions are managed in the docs\r\n- The third does the same for the build\r\n\r\n'
6634,'auser','URL validation does not recognize URLs with no protocol\nhttp://w is a valid url, but www.google.com is not. This seems to be a bug.\r\n\r\nWorking fiddle here: http://jsfiddle.net/HB7LU/2390/\r\n\r\nA better regex that recognizes both types of urls can be found here: http://stackoverflow.com/questions/833469/regular-expression-for-url'
6632,'tbosch',"changed html entities lt and gt to < and >\nRequest Type: docs\n\nHow to reproduce: Go to http://docs.angularjs.org/api/ngRoute/provider/$routeProvider. \n\n...If templateUrl is a function, it will be called with the following parameters:\n\n{Array.&lt;Object&gt;}\n\n... \n\nShows html entities instead of the '<' and '>' chars.\n\nComponent(s): ngRoute\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\n"
6626,'tbosch','Let $swipe ignore mouse movement\nHey everyone,\r\n\r\nI have a usecase where the swipeable area also contains some text which the user might want to select. But when I now have the [$swipe directive](http://docs.angularjs.org/api/ngTouch/service/$swipe) in place. When ever I select text the directive triggers the swipe event.\r\n\r\nSo please give me the choice to deactivate it\r\n\r\n:heart: :heart: :heart: \r\n\r\nP.S. Only the bravest heros are going to implement this :dancers: \r\n'
6599,'btford',"docs(css): RegExp doesn't have .type-hint-regexp class\nRequest Type: docs\n\nHow to reproduce: Please see the description of the issue #6596\n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\ntype-hint-regexp gets a nice color\r\n\r\ncloses #6596"
6598,'IgorMinar',"perf($interpolate/$compile): port optimization from dart\nMotivated by [#4556 (comment)](https://github.com/angular/angular.js/pull/4556#issuecomment-35121623)\r\n\r\nMore info about the optimization can be found in that PR.\r\n\r\n**Brief description:**\r\nThis PR makes that given text like:\r\n`{{a}} text {{b}}`\r\nInstead of computing the whole string on each digest for dirty-checking,\r\nWe watch each expression individually, and only concatenate stuff when something changes.\r\n\r\nTo accomplish this, we use [`$scope.$watchSet`](https://github.com/angular/angular.dart/blob/4bf9447cc64650d6c73b66c844fb5396b4a2ae27/lib/core/scope.dart#L278). It has been implemented in AngularDart, but has been removed recently in favor of the change_detection lib\r\n\r\nEdit: Travis tests are failing because npm failed? I'll try to have travis run again tomorrow"
6596,'btford',"Docs: RegExp doesn't have .type-hint-regexp class\nExample: `when()` documentation on $httpBackend: http://docs.angularjs.org/api/ngMockE2E/service/$httpBackend\r\n\r\n![screen shot 2014-03-06 at 4 53 54 pm](https://f.cloud.github.com/assets/1199742/2359878/1c341ce0-a61d-11e3-9361-4506c33d98ac.png)\r\n\r\nI suggest a nice purple or red =)"
6592,'matsko',"ngAnimate crash regression between 1.2.13 and 1.2.14\nI got crashing animations since 1.2.14, usually when the `$animate.enter` is called while the `$animate.leave` is running. For instance if you hover very fast between two tooltips.\r\n\r\nWorked flawlessly with angular v1.2.13:\r\n\r\n- http://plnkr.co/edit/x5DFnQXo7xYKLkY7MoPx?p=preview\r\n\r\nCrashes with angular v1.2.14:\r\n\r\n- http://plnkr.co/edit/D0cKtVrJSzQWUpdEgSuH?p=preview\r\n\r\n```\r\nUncaught TypeError: Cannot read property 'length' of null\r\nangular-animate.js:290\r\n```\r\nWhich translate to this line:\r\nhttps://github.com/angular/angular.js/blob/v1.2.14/src/ngAnimate/animate.js#L284\r\n\r\nThe only change regarding `ngAnimate` between `v1.2.13` and `v1.2.14` seems to be the replace of `done && $timeout(done, 0, false);` by `async(done)`.\r\n\r\n@matsko Do you have any idea where this regression might come from?\r\n\r\n---\r\n\r\nI've tested `ngAnimate#1.2.13` with `angular#1.2.15-build.2389+sha.c5f2f58` and it still works, so it looks like this is a bug confined into ngAnimate."
6564,'jeffbcross',"ng-options track by and select as are not compatible\nWhen both a track by expression and a select as expression are used in ng-options, binding doesn't work anymore.\r\n\r\nFor instance:\r\n```JavaScript\r\n      it('should bind to scope value through experession while tracking/identifying objects', function() {\r\n        createSelect({\r\n          'ng-model': 'selected',\r\n          'ng-options': 'item.id as item.name for item in values track by item.id'\r\n        });\r\n\r\n        scope.$apply(function() {\r\n          scope.values = [{id: 10, name: 'A'}, {id: 20, name: 'B'}];\r\n          scope.selected = scope.values[0].id;\r\n        });\r\n\r\n        expect(element.val()).toEqual('10');\r\n\r\n        scope.$apply(function() {\r\n          scope.selected = scope.values[1].id;\r\n        });\r\n\r\n        expect(element.val()).toEqual('20');\r\n      });\r\n```\r\n\r\nIt seems that in the ngOptions directive, the track function always directly use the value expression even if a select as expression is set."
6563,'btford','Improved $controller documentation to include an example for use.\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): misc core\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n$controller had no working examples, this is just a good look at how it can be used in other places at runtime to create controllers.\n\n**Other Comments:**\n\n'
6560,'IgorMinar','chore(build): remove IE8 target from all test configs\nBREAKING CHANGE: As communicated before, IE8 is no longer supported.\r\n\r\nmore info: http://blog.angularjs.org/2013/12/angularjs-13-new-release-approaches.html'
6554,'caitp','[htmlAnchorDirective] name on achor tag reloads the UI\nAnchor tag with non empty name, reloads the page:\r\n\r\n```html\r\n<a name=\'http://yahoo.com\' value="value=4">link</a> \r\n```\r\n\r\n\r\nAs per angular source code, does not comply with the ngClick unit test case behaviour. ( Might have leaked trough since we don\'t assert if the reload happened )\r\n\r\n```\r\nit(\'should execute ng-click but not reload when href empty string and name specified\', function() {\r\n          element(by.id(\'link-4\')).click();\r\n          expect(element(by.model(\'value\')).getAttribute(\'value\')).toEqual(\'4\');\r\n          expect(element(by.id(\'link-4\')).getAttribute(\'href\')).toBe(\'\');\r\n        });\r\n```\r\n\r\nLooks like it leaked trough the source code via commit @ https://github.com/angular/angular.js/commit/f3de5b6eac90baf649506072162f36dbc6d2f028\r\n\r\n As per W3Schools http://www.w3schools.com/tags/att_a_name.asp\r\n\r\n```\r\nThe <a> name attribute is not supported in HTML5. Use the id attribute instead.\r\n```\r\n\r\nWhy does angular have to bother about handling "name" when its not supported by HTML5 ? Personally, it seems like a specific case quick fix, rather than a generic fix.\r\n\r\nI would happy to submit code if this has not been addressed  as of today.\r\n\r\n'
6536,'matsko','Multiple animation loop since angular 1.2.14 with ng-required field\nHi, since angular 1.2.14 update, our application animations loop 3 or 4 times in some conditions.\r\n\r\nThis behaviour can be seen in this fiddle : http://jsfiddle.net/myj3G/3/'
6531,'btford','docs(guide/*): make them better\nThis PR most notably merges all forty-three explanations of how DI annotations work that were previously scattered across the docs into the `guide/services` page. It also combines all the `services` guide pages into a single, concise page.'
6501,'tbosch','feat(bidi): Add bidirectional text support\nThis adds bidirectional text support to interpolations (`{{...}`),\r\n`ng-bind`, `ng-bind-html`, `ng-bind-template` and `ng-model`.\r\n\r\nThe main part of the implementation is copied from Google Closure Library.\r\n\r\nTodo: Add docs!'
6492,'IgorMinar',"feature(style): expressions in style tags\nRequest Type: feature\n\nHow to reproduce: \n\nComponent(s): $compile\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nData-binding for style tag doesn't work (see style.js, terminal:true). Setting terminal to false in the directive will enable data-binding. Test provided.\n\n**Other Comments:**\n\nEnable data-binding for style tags\r\n\r\ncloses #2387"
6474,'ashleygwilliams','chore(docs): fix layout between 769px and 992px\nLeft nav and main content were tucked slightly under the version picker / breadcrumb navbar\r\n\r\n![angulardocs](https://f.cloud.github.com/assets/1153097/2283956/f793dcf4-9fc3-11e3-9b7b-ab5a947e16ac.PNG)\r\n\r\n'
6469,'IgorMinar',"Update injector.js documentation\nDuplicate 'that' words present in the document, just remove one of them."
6468,'IgorMinar','PageObject pattern should be used for end to end tests\nEnd-To-End tests at present do not use PageObject pattern. Should they?'
6466,'davidjnelson','ngList always joins array with ", ", not with user-defined separator\nThe ngList directive always joins existing data with comma-space (`, `), regardless of the separator specified by the developer - even if it\'s not a regex.\r\n\r\nIt would be great if the array could be joined using the same separator as is used for tokenizing (String.prototype.split()).\r\n\r\nIf it\'s a regex, it would be nice to be able to provide a separator (perhaps after the final `/` in the regex?) to be used when joining existing data. This would be useful when splitting on a newline (`ng-list="/\\n/"`), or when both comma and semi-colon are allowed as separators (`ng-list="/[,;]/"`).\r\n\r\nPlunker demonstrating that existing data is always joined with comma-space: http://plnkr.co/edit/iScyKmEWeV0IFUyuM9rr?p=preview'
6465,'IgorMinar','Update infdig.ngdoc\nMention common cause of error is binding to a new array on every $digest loop.'
6463,'matsko','setClass should be broken up into addClass + removeClass JS animations\n`setClass` is run when ngClass changes and both addClass and removeClass are run at the same time. This works fine, but it also requires a setClass animation to be defined within the JS animations.\r\n\r\nThis because annoying when you have to watch for CSS class changes within addClass, removeClass and setClass. Instead setClass should break down to addClass and removeClass if setClass is not defined on the animation.'
6459,'matsko','fix($animate): only block keyframes if a stagger is set to occur\nTransitions must be blocked so that the initial CSS class can be applied\r\nwithout triggering an animation. Keyframes do not need to be blocked since\r\nanimations are always triggered on the starting CSS class, however, if a\r\nstagger animation is set to occur then all elements for index > 0 should\r\nbe blocked. This is to prevent the animation from occuring early on before\r\nthe stagger delay for the given element has passed.\r\n\r\nWith ngAnimate and keyframe animations, IE10 and Safari will render a slight\r\nflicker effect caused by the blocking. This fix resolves this issue.\r\n\r\nCloses #4225\r\n\r\nView broken effect (Safari || IE10):\r\nhttp://bit.ly/keyframe-fail\r\n\r\nView fixed effect (Safari || IE10):\r\nhttp://bit.ly/keyframe-success'
6455,'petebacondarwin','$interval docs missing parameters?\nSeems like the newest $interval docs no longer lists `count` and `invokeApply` in the parameters list. Did the docs accidentally omit them?\r\n\r\nnew:\r\nhttp://docs.angularjs.org/api/ng/service/$interval\r\n\r\nold:\r\nhttp://code.angularjs.org/1.2.9/docs/api/ng.$interval'
6453,'IgorMinar',"feat($interpolate): Add 'strictMode' option on $interpolateProvider to tell $compileProvider not to denormalize directives template.\nWith this option set to true, the default symbols '{{' and '}}' are left as is in the templates, and only the startSymbol and endSymbol defined by the developer are used."
6449,'davidjnelson','Create triaging ui\nHi all.  Brian, I read the pain points blog post you linked to ( http://www.lostgarden.com/2008/05/improving-bug-triage-with-user-pain.html ) and was very inspired.\r\n\r\nI\'d love to help by creating a triaging application.  I think this would make it simpler to triage, and help triagers to more easily add more value, enabling the extended  triaging effort to scale further.\r\n\r\nThe most simple version of it would be exactly as the blog post author described - create github labels for:\r\n\r\nTriage-Type-7: Crash: Bug causes crash or data loss. Asserts in the Debug release.\r\nTriage-Type-6: Major usability: Impairs usability in key scenarios.\r\nTriage-Type-5: Minor usability: Impairs usability in secondary scenarios.\r\nTriage-Type-4: Balancing: Enables degenerate usage strategies that harm the experience.\r\nTriage-Type-3: Visual and Sound Polish: Aesthetic issues\r\nTriage-Type-2: Localization:\r\nTriage-Type-1: Documentation: A documentation issue\r\n\r\nTriage-Priority-5: Blocking further progress on the daily build.\r\nTriage-Priority-4: A User would not use angular. Cannot Release. The Team would hold the release for this bug.\r\nTriage-Priority-3: A User would likely not use angular. Will show up in review. Clearly a noticeable issue.\r\nTriage-Priority-2: A Pain – users won’t like this once they notice it. A moderate number of users won’t use angular.\r\nTriage-Priority-1: Nuisance – not a big deal but noticeable. Extremely unlikely to affect usage.\r\n\r\nTriage-Likelihood-5: Will affect all users.\r\nTriage-Likelihood-4: Will affect most users.\r\nTriage-Likelihood-3: Will affect average number of users.\r\nTriage-Likelihood-2: Will only affect a few users.\r\nTriage-Likelihood-1: Will affect almost no one.\r\n\r\nSomething that might be better is to align these with the existing labels to some extent.  I\'m not sure that it\'s better though.  @btford @IgorMinar any thoughts here?\r\n\r\nThen create a triaging ui which:\r\n\r\n- Shows a list of untriaged issues\r\n- When an issue is clicked, it sets the oauth\'d user to the assigned person for the issue, and displays the issue title, submitters, labels and comments.\r\n- Allows selections of these three labels via radio button sets.\r\n- Shows a \'complete triaging\' button which when clicked unassigns the issue to the person who was triaging, and then shows the list of untriaged issues again.\r\n\r\nThen create a pain points ranking list ui which:\r\n\r\n- Shows all open issues sorted by paint points\r\n- When an issue is clicked it loads the entire github ui for the issue inside an iframe\r\n- Update the list every 10 seconds (well within the rate limit for github api requests of 5,000 per hour / 83 per second)\r\n\r\nA few things in addition to what the blog post author mentioned that I think would be valuable to add are:\r\n\r\n- ability to add comments manually or automatically.\r\n  - I think automatically is more productive and could be done easily for certain. scenarios.\r\n  \r\n  <NOTE> I want to add some other thoughts here but am running late for a meeting. </NOTE>\r\n\r\nThere is a temptation to add all labels to the triaging app.  I think there really are some things that may just be better for the angular core team to assign, but I could be totally off the mark here.\r\n\r\n@btford @IgorMinar Is this something that would be helpful?  We could add more fields to the triaging ui to make it match the existing triage workflow better as well.  I think finding the right balance of being able to crank through triaging while giving the angular core team the right level of insight is the key.\r\n\r\nI\'ll work tonight on some balsamiq mockups to show how this would look, add to the "A few things in addition to what the blog post author mentioned that I think would be valuable to add are" section.  \r\n\r\nA also thought it would be funny to name the tool "Bring The Pain", haha :-)  Maybe even put a picture of Chris Rock\'s old HBO special, but cut off the text at the bottom of the image ( http://ia.media-imdb.com/images/M/MV5BNDk3MjExNzg5M15BMl5BanBnXkFtZTYwMzA0MDc5._V1_SX640_SY720_.jpg ).  It makes me laugh.  The \'parental advisory / explicit lyrics makes me laugh even more :-)  Anyone else like / dislike the name?'
6448,'IgorMinar','fix(jqLite): properly toggle multiple classes\nImpl could be approached differently, I guess, but yeh, the issue is here as demonstrated by tests.\r\n\r\nFixes #4467'
6441,'ashleygwilliams','Update index.ngdoc\ni have added another useful resource about integration of angular with django, hope this help'
6436,'btford','Note in the docs what version of jQuery is allowed\n'
6431,'petebacondarwin','Incomplete code block on tutorial/step_12\nRequest Type: docs\n\nHow to reproduce: The last code block (app/css/animations.css) of tutorial/step_12 is incomplete.\n\nComponent(s): \n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nGo to http://docs.angularjs.org/tutorial/step_12 and scroll to the bottom of the page.\n\n**Other Comments:**\n\nThis prevent the page to be truncated (incomplete).'
6429,'IgorMinar',"Significant memory leak, possibly caused by ng-repeat\nI've spent the last couple days tracking down a memory leak in a custom directive and decided to try reproducing it with just pure ng-repeat.  You can see a demo here (wait the for XHR to load):\r\n\r\nhttp://embed.plnkr.co/v9HVH4/\r\n\r\nThe plunker swaps between identical routes every 1/4 second, a total of 20 times. You can see the memory in the developer tools timeline grow by about 6MB per route change (from 14MB to ~140MB for me).\r\n\r\nSome notes:\r\n\r\n1. This happens with automatic and manual route changes.\r\n2. It happens outside plunker, I can reproduce on my local machine by downloading the plunk.\r\n3. The timing doesn't matter. Swapping routes every 2 seconds shows the same results.\r\n4. **I cannot reproduce with heap snapshots**  When I do the 3-snapshot method I don't see any deltas, and the memory stays the same. Could this be related to this bug with Chrome?: https://code.google.com/p/v8/issues/detail?id=2073\r\n5. I have been able to reproduce this in latest Chrome and in Canary."
6427,'caitp',"$q constructor function creates fulfilled promise.\nIt would be nice to have $q() create a fulfilled promise like Q does. This is nice for services that return data that could be cached but you always want to return a promise.\r\n\r\n```javascript\r\n   getData: function(key) {\r\n     if(cache[key]) {\r\n       return $q(cache[key]);\r\n     } else {\r\n       return db.find(key).then(function(doc) {\r\n         cache[key] = doc;\r\n       });\r\n     }\r\n   }\r\n```\r\n\r\nI would be happy to put together a PR with this, I just don't want to go through the work if it's not going to get looked at for inclusion."
6419,'matsko','ng-class screwed up\nhaving multiple ng-classes does not work, this chunk of code in JADE:\r\nspan.glyphicon(class=\'{{editLogin ? "glyphicon-floppy-save" : "glyphicon-pencil"}}\')\r\nthis resolves in throwing this error:\r\nTypeError: Object #<Object> has no method \'setClass\'\r\n    at Object.Attributes.$updateClass (http://127.0.0.1:9000/lib/angular/angular.js:5442:20)\r\n    at Object.interpolateFnWatchAction [as fn] (http://127.0.0.1:9000/lib/angular/angular.js:6624:28)\r\n    at Scope.$digest (http://127.0.0.1:9000/lib/angular/angular.js:11867:29)\r\n    at Scope.$apply (http://127.0.0.1:9000/lib/angular/angular.js:12116:24)\r\n    at HTMLButtonElement.<anonymous> (http://127.0.0.1:9000/lib/angular/angular.js:18026:21)\r\n    at HTMLButtonElement.jQuery.event.dispatch (http://127.0.0.1:9000/lib/jquery/jquery.js:4371:9)\r\n    at HTMLButtonElement.elemData.handle (http://127.0.0.1:9000/lib/jquery/jquery.js:4057:28) angular.js:9475\r\n(anonymous function) angular.js:9475\r\n(anonymous function) angular.js:6920\r\nScope.$digest angular.js:11886\r\nScope.$apply angular.js:12116\r\n(anonymous function) angular.js:18026\r\njQuery.event.dispatch jquery.js:4371\r\nelemData.handle'
6416,'btford',"Async form validation\nSometimes, the client needs to communicate with the server in order to know wether the value of an input field is valid. For instance, usernames and e-mail addresses often need to be unique. \r\n\r\nTo allow this, I'd like to propose the following: When a $parsers element (from now on called a $parser, returns a value, we check wether it's a promise (both $q and native js promises). If it is, we apply a new 'processing' state to the form input. Then, then, when the resolve function is called, it receives the value you'd normally expect from a $parser.\r\n\r\nI'm currently working on an implementation for this, but I'm new to the codebase, so it may take some time. "
6415,'pkozlowski-opensource','docs(routeProvider): Corrected "slashs" to "slashes"\nAnother small fix to the docs'
6410,'petebacondarwin',"Angular Docs missing '*' character(s) in some function signatures\nAngular Docs missing '*' character(s) in some function signatures\r\n\r\nExamples per http://docs.angularjs.org/guide/concepts\r\n\r\nChrome:\r\n![image](https://f.cloud.github.com/assets/6200057/2239381/e2eba358-9c2c-11e3-9b12-c4a84243fad9.png)\r\n\r\nSafari:\r\n![image](https://f.cloud.github.com/assets/6200057/2239378/c8a4be76-9c2c-11e3-8c16-6e0723abf941.png)\r\n\r\nSource appears to be fine, may be an issue with the view:\r\n![image](https://f.cloud.github.com/assets/6200057/2239385/fd0fe5dc-9c2c-11e3-96b6-77c14d08463c.png)\r\n\r\n"
6407,'ashleygwilliams','fix trivial format\nRequest Type: docs\r\n\r\nHow to reproduce: \r\n\r\nComponent(s): \r\n\r\nImpact: small\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\nWhile this may be no big deal, I found some issues format style.\r\n\r\n"CHANGELOG.md" contain 2-space indent and tab indent.\r\n\r\n"CONTRIBUTING.md" contain wasted spaces.\r\n\r\n**Other Comments:**\r\n\r\nTruth be told, I want to do more great things for ruby, but because my ability clumsy yet, start with these ...!'
6403,'matsko',"ng-repeat-end not removed if ngAnimate is included\nIf you include angular animate 1.2.13 in an app, elements after an ng-repeat-start are not removed after items are removed from the collection.\r\n\r\n[plunker](http://plnkr.co/edit/bWwXkzHPsMv9X1bDlEZu?p=preview)\r\n\r\nThis issue also shows up if you include angular toaster so I'm not sure if the issue is in angular animate or angular itself.  Angular animate 1.2.12 does not present the same issue."
6401,'IgorMinar','fix(http): send GET requests by default\nNot sure why we were not enforcing / defaulting a http request method... but here it is...\r\n\r\nFixes #5985\r\nCloses #6401'
6395,'matsko',"ngAnimate breaks ngRepeat when using custom transitions since 1.2.13\nIn reference to v1.2.13 and the following change:\r\n\r\n> $animate: ensure $animate doesn't break natural CSS transitions (4f84f6b3, #6019)\r\n\r\nWe stepped over the following problem:\r\n\r\n1. Include ngAnimate in your module\r\n2. Use ngRepeat to fill a table\r\n3. Add css transition to the repeated element (tr)\r\n4. Add a simple filter to increase / decrease number of elements\r\n\r\n**Result:**\r\n* ngAnimate gets stuck with random elements (elements do not disappear, duplicates appear again)\r\n* Hovering with the mouse makes the element disappear\r\n\r\nPlunker: http://plnkr.co/edit/4y53HAnTerFmSTFNS2cU"
6394,'matsko','$compile+ngRepeat + append to element above [ng-app], ngAnimate stop to work\nmy DOM looks like this:\r\n\r\n```html\r\n<html>\r\n...\r\n<body>\r\n    <div ng-app="..." ...>\r\n\r\n    </div>\r\n</body>\r\n```\r\n\r\nI tried to compile a bit of a template that included an ngRepeat-directive, i.e.\r\n\r\n```javascript\r\nmyTemplate = $compile("<div> <div ng-repeat=\'element in elements\'>{{element.name}}</div></div>")(scope)\r\n```\r\n\r\nmy animation would work if i did this:\r\n\r\n`angular.element(\'[ng-app]\').append(myTemplate)`\r\n\r\nbut didn\'t if i did the following:\r\n\r\n`angular.element(\'[body]\').append(myTemplate)`\r\n'
6376,'mzgol','only use window.jQuery if it supports required jQuery.fn.on\nThis is a safe and simple fix to the legacy jQuery situation referenced in #2163 until the API in issue #608 is refined and implemented.'
6372,'petebacondarwin','Reinstate plunker/jsFiddle launcher buttons in the docs\nThe new docs (which are really nice, ihmo) no longer have the convenient launch in Plunker/jsFiddle brop-down from previous versions.\r\n\r\nWas this an intentional change or a simple omission? Would love to see these links reinstated (especially Plunker ;-).\r\n\r\nCheers'
6357,'petebacondarwin','docs(ngAnimate): replace HTML entity references with characters in GFM code blocks\nI thought I fixed these in f7d28cd!'
6356,'petebacondarwin','Provide {@type ... } inline tag handler\nThe ngRepeat docs use this inline tag to display attractive types.\r\nWe need to add an inline type handler.'
6346,'petebacondarwin','fix(doc-gen): Run Gulp on Windows too\nUsing node_module/.bin/gulp will enable to gulp command to run\r\nboth on Windows and Linux. In its current form, opening a Javascript\r\nfile on Windows will not run the doc generation.'
6345,'IgorMinar','Fix ngdocs in route.js\nSomebody accidentally padded a list with one-too-many indentations, which caused the actual documentation page to render incorrectly. This should fix it.'
6342,'IgorMinar','fix($http): do not add trailing question\nNow if you pass empty object into params you will get url with unnecessary question mark.\r\nIt may cause some issues, like this [stackoverflow question](http://stackoverflow.com/questions/19575565/angularjs-resource-url-causes-question-mark-to-appear-with-no-params).\r\nMoreover it makes unit test less readable, because that need to add redundant question to end of some  `$httpBackend` expectations.'
6338,'ashleygwilliams','New AngularJS Docs Load text behind navigation banner at certain break points\nI loaded up the docs today and noticed I couldn\'t read the first few sentances when using my browser in "docked left" mode. (I snap it to the left side of the screen and then snap a terminal to the other side, and expand the browser a bit wider to cover the gap in the middle.)  Anyways...\r\n\r\nIn screen widths between `992px and 1199px` the main documentation\'s first few lines of text tucks up underneath the banner.  I verified I was using default rendering settings (Chrome), and did a quick check in FF and IE also just to make sure it wasn\'t a weird user setting on my part.'
6332,'IgorMinar','docs(guide/providers): fix example snippet\n'
6331,'IgorMinar',"Service Recipe docs. Typo(s) or confusing example.\nThe documentation Service Recipe code snippet appears to not be valid syntax and thus may be a confusing example. \r\n\r\nOn the following page http://docs.angularjs.org/guide/providers page. The Service Recipe snippet shows:\r\n```\r\nfunction UnicornLauncher(apiToken) {\r\n \r\n  this.launchedCount = 0;\r\n  this.launch() {\r\n    // make a request to the remote api and include the apiToken\r\n    ...\r\n    this.launchedCount++;\r\n  }\r\n}\r\n```\r\n\r\nBut I think it's supposed to be this:\r\n```\r\nfunction UnicornLauncher(apiToken) {\r\n \r\n  this.launchedCount = 0;\r\n\r\n  this.launch = function(){\r\n    // make a request to the remote api and include the apiToken\r\n    this.launchedCount++;\r\n  }\r\n\r\n  this.launch()\r\n}\r\n```\r\n"
6327,'petebacondarwin','fix(ngRoute): remove extra decodeURIComponent\nSince `$location.$$path` is already decoded, doing an extra `decodeURIComponent` is both unnecessary and can cause problems. Specifically, if the path originally included an encoded `%` (aka `%25`), then ngRoute will throw "URIError: URI malformed".\r\n\r\nCloses #6326'
6324,'tbosch','Update ngClass.js\nGiving more description about how the three kinds of expression work.'
6323,'IgorMinar','fix(jqLite): make jqLite(\'<iframe src="someurl">\').contents() return iframe document, as in jQuery\nThis is a very tiny change to make behaviour consistent with jQuery.\n\nCloses #6320'
6320,'caitp','Bug: angular.contents() not working with iframes\nHi\r\n\r\nPlease, fix the `angular.contents()` method.\r\n\r\nangular last version\r\nhttps://github.com/angular/angular.js/blob/master/src/jqLite.js#L795\r\n\r\njquery 1.8.3\r\nhttps://github.com/jquery/jquery/blob/1.8.3/src/traversing.js#L198'
6319,'caitp',"Fix(filter): Filter objects with circular references\n**Overview of the issue** - When filtering confronts a circular reference, it causes an infinite recursion & subsequent stack overflow. \r\n\r\n**Motivation for or Use Case** - As modeling libraries evolve for Angular (I've spent quite a bit of time on one myself https://github.com/FacultyCreative/ngActiveResource), circular references on related objects are likely to become more frequent. For instance, you have a post that has many comments:\r\n\r\n```\r\n  post.comments[0] = {body: 'great comment', post: post}\r\n```\r\n\r\nCurrently, the `search` method calls itself on each attribute on each object in the collection being filtered. Since `post` references this particular `comment`, and the `comment` references back, the `search` method will never end.\r\n\r\n**Angular Version(s)** - 1.2.13 (current) and before\r\n\r\n**Browsers and Operating System** - This is a problem for all browsers\r\n\r\n**Reproduce the error** - Test included, plus see this Fiddle: http://jsfiddle.net/S2UY6/9/\r\n\r\n**Related issues** - I do not see the same issue reported, though users seem to have particular difficulty with circular references in the DI system and `angular.extend`. \r\n\r\n**Suggest a Fix** - Fix included"
6316,'matsko','Link "Improve this doc" broken\nIn the doc, the link `Improve this doc` does not work every time a link go to a file *.ngdoc\r\n\r\ne.g. for  http://docs.angularjs.org/guide \r\nthe link\r\nhttp://github.com/angular/angular.js/edit/master/guide/index.ngdoc should be replaced by\r\nhttp://github.com/angular/angular.js/edit/master/docs/content/guide/index.ngdoc '
6312,'matsko',"ngRepeat animation stuggering doesn't work if ngClass applied\nExample: http://plnkr.co/SW2pHG"
6308,'matsko','Decrease menu width\nThis prevents the search input from appearing on a new row on md window sizes ((992px -> 1200px).'
6307,'tbosch','$location.port() doesn\'t match with native location.port\nIf I evaluate `location.port` on example.com I will get empty string.\r\nBut `$location.port()` returns "80".\r\nIt confuses me a bit, because I want  generate absolute link to some resource on my domain and it turns out not like url in address bar.\r\nNow I have to find ports defined in `DEFAULT_PORTS` and trim it. \r\nWhy do you do it? Maybe it worth, pass url segments as is?\r\nFor example, node.js module `url` does it so and I like it.'
6306,'jeffbcross','docs($q): add mention of Android 2.x browser\nThis browser is still important according to stats.'
6304,'matsko','when ng-maxlength is invalid, \'require\' validation is also invalid\nOn a pristine form, I have an input field\r\n\r\n    <form name="myForm">\r\n        <input name="username" ng-model="user.name" required ng-maxlength="5">\r\n    </form>\r\n\r\nGiven that user.name was pre-populated with a string exceeding 5 characters, in angular 1.1.5 the modelCtrl errors were:\r\n\r\n    form.username.$error = {"required":false,"maxlength":true}\r\n\r\nThat is expected because only the maxlength is violated, so \'required\' was not invalid.  \r\n\r\nBut after angular > 1.2.0 this behavior is now invalid for both:\r\n\r\n    form.username.$error = {"required":true,"maxlength":true}\r\n\r\nThis is a bit unexpected.  Why should \'required\' have an error when the model has some value... unless we\'re now saying that the value being required must be valid across all other validation requirements in total?\r\n\r\nYou can test it here by swapping out the angular version:\r\nhttp://plnkr.co/edit/uUaC9tgHEozBkUReRXBk?p=preview\r\n'
6303,'IgorMinar','fix($location): store REQUEST_URI in cookie\nRequest Type: feature\n\nHow to reproduce: \n\nComponent(s): $location\n\nImpact: \n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nWith IE8 and html5mode, reloading the page to add hashbang lose server variables\n\n**Other Comments:**\n\nTo fix issue #6195, setting the REQUEST_URI in a cookie before refreshing the page (for IE8 in html5 mode), and remove the cookie after the refresh is done.\r\n\r\nWhat has been done:\r\n- adding pathInCookie (bool) to add the REQUEST_URI in a cookie to not loose it after refresh (IE8 in html5 mode) and pathInCookieName (string) to specify the name of the cookie. Default will be "angular"\r\n\r\nIf anybody can help me to create testing case for this pull request that would be awesome\r\n'
6302,'caitp','Input click triggered by label click immediately following a touch event is busted\nTo reproduce\r\n - an element with ng-click\r\n - a radio button (with ng-model) and associated label\r\nIn a quick sequence tap on the element and then on the label.\r\nThe radio button will not be checked, unless PREVENT_DURATION has passed'
6290,'btford','fix($compile): support templates with thead and tfoot root elements\nIf the first element in a template is a `<thead>` or a `<tfoot>`, then use the existing logic to handle table elements compilation.\r\n\r\nCloses #6289'
6287,'ashleygwilliams','Make the commit message guidelines more prominent when sending a pull request\nThere exist a lot of pull requests, mainly documentation, that remain unmerged, even though the changes are very small (typos etc.). Most of these have in common that the commit messages don\'t follow the guidelines outlined in contributing (https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md), almost at the very end. Is this the reason why they remain unmerged? In any case, users should get better instructions regarding the commit messages when they send a pull request. Is there a github Api for that? The default commit message provided is "Update [filename]", can that be changed? Or is it possible to teach the bot to parse commit messages and add a note if it is not correct?'
6274,'matsko',"$animate.enter() to prepend an item\nI'm creating a carousel that displays multiple items. I see with `$animate.enter(element, parentElement, afterElement)` there is an `afterElement` parameter but I don't want to place my element after anything, I want it to be prepended and then slid in, from the left.\r\n\r\n`< [ 1, 2, 3, 4 ] >`\r\nI expected something like: $animate.enter(4, parent, false/null) to produce the following:\r\n`< [ 4, 1, 2, 3 ] >`\r\n\r\nI know that there is $animate.enter() and $animate.leave() but the latter removes the DOM from the element entirely."
6272,'IgorMinar','fix(ngCloack): ng-cloak directive gets removed too early\n**Browser:** Chrome\n**Component:** misc core\n**Regression:** no\n\nadd priority -500 to ngCloack to make sure the direcive will be compiled after all others\r\n\r\ncloses #5692'
6265,'ashleygwilliams',"typofixes\nA few typofixes.  (This word seems to be strange also: BEGING_END_TAGE_REGEXP But I can't decide if this is intentional or not.)"
6259,'matsko',"Fix TypeError Cannot call method 'querySelectorAll' of undefined in ngAnimate\nFix TypeError Cannot call method 'querySelectorAll' of undefined in ngAnimate when use ng-if on ng-repeat fix #6205\r\n\r\nMore about issue is here https://github.com/angular/angular.js/issues/6205"
6249,'btford','Add ngTrim doc to ng.directive:textarea\nJust copied over from ng.directive:input.text'
6241,'pkozlowski-opensource','chore(tests): remove trailing comma in specs\n'
6231,'tbosch','input[type="file"] defaults to textInput directive; conflicts w/ custom directive\nOverview:\r\nFile uploads are a complex issue, so AngularJS v1 leaves it up to others to implement:\r\nhttps://github.com/angular/angular.js/issues/1375#issuecomment-31291684\r\n\r\nThis hasn\'t been much of a problem, but recently textInput directive has started clobbering the view value:\r\nhttps://github.com/angular/angular.js/commit/a090400f09d7993d102f527609879cdc74abae60\r\n\r\nThe textInput directive has been applied to file input elements by default for a long time, but since that change it always adds an onchange listener, so depending on directive ordering, the textInput directive\'s listener can be called last and clobber the view value.\r\n\r\nRepro: http://jsfiddle.net/mR3P6/6/\r\n\r\nSuggested Fix:\r\nI don\'t think file input elements should have the textInput directive applied at all. I think it should be a noop, just like the hidden, button, submit, or reset types.'
6215,'IgorMinar','feat(filterFilter): support deeply nested predicate objects\nDue to 339a165, it became impossible to filter nested properties of an object\r\nusing the filterFilter. A proposed solution to this was to enable the use of\r\nnested predicate objects. This fix enables the use of these nested predicate\r\nobjects.\r\n\r\nExample:\r\n\r\n```html\r\n<div ng-repeat="it in items | filter:{ address: { country: \'Canuckistan\'}}"></div>\r\n```\r\n\r\nOr\r\n\r\n```js\r\n$filter(\'filter\')(items, { address: { country: \'Canuckistan\' } });\r\n```\r\n\r\nRelated to #6009'
6208,'IgorMinar',"Merge $watch and $watchCollection?\nThis is a proposal to simplify API. I'd hate to eventually see things similar to the Knockout observable wrapper API stuff.\r\n\r\n$watchCollection is essentially just $watch with a 1 level deep byVal comparison. Wouldn't it be better to make the third parameter of $watch take more than simply `true` as a value? Such as the depth of recursion to watch?\r\n\r\nBy removing the term 'collection' and repurposing the `byVal` property for a depth of watching, we can cover more use-cases, simplify the API, and hopefully avoid more questions and confusion in the community.\r\n\r\nFor example, how many places are people using $watch with byValue=true when in reality they can see a better performance gain by simply using $watchCollection? What if people don't think of these things as a 'collection', or it simply slips their mind that they need to make this distinction?\r\n\r\n# Proposal\r\n\r\n`$watch('value', callback(), recursionLevel)`\r\n\r\nwhere `recursionLevel` can be `true` for infinite, or any int value."
6207,'IgorMinar','removing confusing use of hoisting\nWhy do\r\n```\r\nvar ...\r\nreturn exports;\r\nfunction for exports...\r\nanother function for exports...\r\n```\r\nWhy put return statement in the middle?  This "hoisting hack" makes the code harder to read and will likely confuse beginners not familiar with the concept.  Unless there\'s some really good reason to nest the return statement between properties & methods it should not be thus.'
6205,'matsko',"TypeError with ngAnimate\nHi, I'm using the latest Angular 1.2 head at Google (I'm lahiri@). I occasionally get the following error when I've injected ngAnimate into my app -- without actually using it. The ng-animate directive isn't invoked anywhere, and I don't have any CSS transitions. Removing ngAnimate from my app's module dependencies gets rid of the error.\r\n\r\n```\r\nTypeError: Cannot call method 'querySelectorAll' of undefined\r\n    at cancelChildAnimations (http://localhost:8080/dev/js_deps.js:426:92)\r\n    at Object.leave (http://localhost:8080/dev/js_deps.js:414:227)\r\n    at ngRepeatAction (http://localhost:8080/dev/js_deps.js:345:403)\r\n    at Object.$watchCollectionAction [as fn] (http://localhost:8080/dev/js_deps.js:253:80)\r\n    at Scope.$digest (http://localhost:8080/dev/js_deps.js:254:472)\r\n    at Scope.$apply (http://localhost:8080/dev/js_deps.js:258:425)\r\n    at HTMLAnchorElement.<anonymous> (http://localhost:8080/dev/js_deps.js:333:86)\r\n    at http://localhost:8080/dev/js_deps.js:63:60\r\n    at forEach (http://localhost:8080/dev/js_deps.js:11:71)\r\n    at HTMLAnchorElement.eventHandler (http://localhost:8080/dev/js_deps.js:63:18)\r\n```"
6197,'tbosch','Docs: Add link to MIT license from the FAQ page\nThe FAQ page was lacking a link to the MIT license so I added it.'
6195,'IgorMinar',"IE8 in html5Mode reload the page to add hash and server loose GET parameters and path \nSo the problem has been described really well on stackoverflow by another user\r\nhttp://stackoverflow.com/questions/20884640/angularjs-and-php-routing-in-ie9-doesnt-work/21667795#21667795\r\n\r\nCopy pasting it here.\r\n\r\n--------------------------\r\n\r\nI have an application with routing on php. Here is the simple example:\r\n```\r\n$req=$_SERVER['REQUEST_URI'];\r\nif(strpos($req, '/items/') === 0){\r\n    include __DIR__.'/../views/items/index.php';\r\n} else{\r\n    include __DIR__.'/../views/login/index.php';\r\n}\r\n```\r\non each page (items and login) angularjs routing is used. And all works perfectly except IE9 and below. After page load, angular updates url and reloads the page for routing with hash navigation. And I get the following problem in IE:\r\n* enter url = /items/23\r\n* server returns page items/index.php\r\n* Algularjs changes url to /#!/items/23\r\n* Server cannot read data after hash symbol, and think that url is / so it returns page login/index.php\r\n\r\n--------------------------\r\n\r\n\r\nI have a similar problem where my php page does some redirection (well, includes) depending on $_GET variables or path. One of the redirection (include) is the angularjs app itself."
6192,'jeffbcross',"fix($rootScope): ng-repeat can't handle NaN values. #4605\n$watchCollection checks if oldValue !== newValue which does not work for NaN\r\n\r\nCloses #4605"
6179,'tbosch','Fix locale generation and update locales\nAfter updating the google closure library locales, the locale generation fails.\r\nThe locale files then contain a reference to `goog.i18n.pluralRules.get_vf_` in the `pluralCat` property.\r\n\r\nUpdate locale files:\r\n\r\n* `i18n/update-closure.sh`\r\n* `i18n/generate.sh`\r\n\r\nNote: Right now no unit test if failing because of this, only jshint complains about it! We should really add unit tests for the locales as well (maybe in the i18n subfolder?).\r\n\r\nIdea for solving this:\r\n\r\n* add the function `goog.i18n.pluralRules.get_vf_` to every locale file, and also the functions that this function is using. \r\n* when we have a nice way for doing this, also apply this to https://github.com/angular/angular.js/blob/master/i18n/src/closureI18nExtractor.js#L90 where we replace a closure object with a custom object that we manually insert at https://github.com/angular/angular.js/blob/master/i18n/src/closureI18nExtractor.js#L164\r\n* also extend the unit tests for `closureI18nExtractor.js` when this is implemented.\r\n\r\n'
6176,'btford','fix(ngAnimate): test for SVG element on animate\nSVG elements contain an Object in the node.className variable. This causes a failure when trying to manipulate SVG elements using ng-class.\r\n\r\nThis change tests for the existence of the SVG Object and handles it appropriately.'
6167,'auser',"feat($location): parse query parameters delimited by ; or &\nIn accordance with recomendation in http://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2.2, the query parameters should support encoding and decoding using & or ; as a delimiter.\r\n\r\nAngular will consistently encode search queries using either '&' or ';' as the delimiter, with '&' being the default. This can be configured like so:\r\n\r\n```js\r\n$locationProvider.queryDelimiter(';'); // any other value will be treated as '&'\r\n```\r\n\r\nCloses #6140"
6165,'petebacondarwin','fix(docs): version drop down should be naturally sorted\nChange the version sorting function at the docs generation so versions are ordered using natural order\r\n\r\nCloses #6029'
6164,'tbosch','angular-locale_lt minor grammar amends\nVery minor amends to Lithuanian locale files.'
6163,'tbosch','RFC:  Fork for Non-Linear web apps\nHi Guys,\r\n\r\nI love Angular.  It is the future of the web.  When it comes to creating apps that facilitate a finite number of user pathways, it has no match.  However, when trying to create infinite-state/non-linear apps in AngularJS (ie, An app that cannot bind its logic to a route because of the sheer amount of possible user pathways, like a Game or collaborative tool), you will soon learn that AngularJS is lacking in that department.  Given enough time and architectural thought, it is easy enough to write filler methods and shims to accomplish this.  However, because this is a completely separate type of web app that angular isn\'t really geared towards, I think it makes sense to write a custom fork that adds a superset of functionality to AngularJS specifically for non-linear web apps. I have already accomplished quite a bit of this with in-house development at my current place of employment (Meet.FM), as our about-to-release new version is written entirely in AngularJS.  If you don\'t understand what I mean by "non-linear", just head on over to Meet.FM and check out the meeting room interface.  \r\n\r\nAnyhow, I would really like to create a fork of Angular (Lubuntu vs Ubuntu, for example) that acts as a superset for non-linear web apps and merges in all AngularJS root project code and simply extends it to make it more friendly for this type of application.  I was wondering if anyone else is interested in contributing?\r\n\r\nThanks,\r\nAndrew'
6151,'caitp',"Saving an integer with $cookies doesn't work, and doesn't throw an error.\nSaving an integer as a cookie like so:\r\n```\r\n$cookies.step = 2; \r\n```\r\ndoesn't result in a cookie being written. \r\n\r\nCurrently, for someone who is not familiar with cookies, it takes quite some head-scratching before it becomes clear what the problem is when one cookie is written correctly but the other is not.\r\n\r\nIt would be great if trying to do this would throw an error. \r\n"
6143,'caitp',"Exception is thrown when special characters are used in OrderBy filter\nI am getting the below exception when a special character, such as '%', is used in the OrderBy filter to sort the object by the key. Can you please suggest a work around for this issue? Thanks!\r\nhttp://plnkr.co/edit/hNYeujXNcG4HaJc9c3Td?p=preview\r\n\r\n    Error: [$parse:syntax] http://errors.angularjs.org/1.2.11/$parse/syntax?  p0=undefined&p1=not%20a%20primary%20expression&p2=null&p3=Chg%20%25&p4=Chg%20%25\r\n    at Error (native)\r\n    at http://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.min.js:6:450\r\n    at Ya.throwError (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.min.js:155:346)\r\n    at Ya.primary (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.min.js:155:30)\r\n    at Ya.unary (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.min.js:161:240)\r\n    at Ya.multiplicative (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.min.js:161:39)\r\n    at Ya.additive (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.min.js:160:340)\r\n    at Ya.relational (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.min.js:160:204)\r\n    at Ya.equality (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.min.js:160:66)\r\n    at Ya.logicalAND (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.min.js:159:456) "
6142,'tbosch',"Conditional OR in expression fails with two filters\nWhen you put two filters into an angular expression with a conditional OR (or AND), the expression fails. E.g. `{{ jimmy | canEdit:document || bob | canEdit:document }}`\r\n\r\nSee http://jsfiddle.net/alalonde/9wLMY/\r\n\r\nI'm guessing it's a RegEx bug, but honestly haven't explored yet."
6139,'tbosch','feat($resource): add support for wrapped responses\nadd a resourceData field on the action configuration. This allows you to specify which field in the response should be turned into the resource object instead of the whole thing always being decorated. You can use a string to use just a single simple field or a function for more advanced control\r\n\r\nCloses #6138'
6133,'IgorMinar','orderBy:random creates infdig errors\nRandom orderBy sorting works smoothly in angular 1.1.1. It works in 1.2.x as well but generates infdig errors in the console.\r\n\r\nhttp://jsfiddle.net/mblase75/jVs27/\r\n\r\nJS:\r\n\r\nvar myApp = angular.module(\'myApp\',[]);\r\nfunction MyCtrl($scope) {\r\n    $scope.list = [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\'];\r\n    $scope.random = function() {\r\n        return 0.5 - Math.random();\r\n    }\r\n}\r\n\r\nerror in console:\r\n\r\nError: [$rootScope:infdig] 10 $digest() iterations reached. Aborting!\r\nWatchers fired in the last 5 iterations: [["fn: $watchCollectionWatch; newVal: 44; oldVal: 39"],["fn: $watchCollectionWatch; newVal: 49; oldVal: 44"],["fn: $watchCollectionWatch; newVal: 54; oldVal: 49"],["fn: $watchCollectionWatch; newVal: 61; oldVal: 54"],["fn: $watchCollectionWatch; newVal: 67; oldVal: 61"]]\r\nhttp://errors.angularjs.org/1.2.11/$rootScope/infdig?p0=10&p1=%5B%5B%22fn%3…20%24watchCollectionWatch%3B%20newVal%3A%2067%3B%20oldVal%3A%2061%22%5D%5D\r\n    at https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.js:78:12\r\n    at Scope.$digest (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.js:11853:19)\r\n    at Scope.$apply (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.js:12067:24)\r\n    at https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.js:1302:15\r\n    at Object.invoke (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.js:3707:17)\r\n    at doBootstrap (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.js:1300:14)\r\n    at bootstrap (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.js:1314:12)\r\n    at angularInit (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.js:1263:5)\r\n    at https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.js:20752:5\r\n    at HTMLDocument.trigger (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.js:2342:7) '
6120,'matsko',"Animate on iPad thrash.\nOn iOS devices I am noticing that enter / leave animations appear to show the staging component before running the animation.\r\n\r\nThat is to say it appears to transition from .ng-enter to .ng-enter-active and then ultimately to the final state. It doesn't appear to occur on the simulator which is bizzare.\r\n\r\nI am using this in conjunction  with ui-router, which could aslo be the the issue, I will double file.\r\n\r\n.joe"
6119,'IgorMinar','NgModel in contenteditable div does not update when DOM updates due to styling commands\nI am working on a rich text editor using the contenteditable div. When I apply styles using key-presses (eg. Ctrl+B) the model updates. However when I apply styles using document.execCommand the model is no longer in sync with the DOM! The models syncs again as soon as I type something.'
6117,'petebacondarwin','Unknown Provider error page is omitting data from the url\nI got this error url:\r\nhttp://errors.angularjs.org/1.2.9/$injector/unpr?p0=fieldNameProvider%20%3C-%20fieldName%20%3C-%20breakAtUnderscoresFilter\r\n\r\nThe error page doesn\'t mention \'breakAtUnderscores\' at all, though. I was hoping for something like "the last word in \'fieldNameProvider <- fieldName <- breakAtUnderscoresFilter\' needs to be found in the foo registry, which you can inspect by running angular.foo()". In my particular case, I am confused why there is a token called \'breakAtUnderscoresFilter\' at all, since my code only defined \'breakAtUnderscores\'. Any links to the places that dependency names get mangled would also be helpful on this doc page.\r\n\r\ndocs/content/error/injector/unpr.ngdoc\r\n'
6114,'IgorMinar','Implemented $log.table method to take advantage of chrome’s console.tabl...\n...e function.'
6113,'vojtajina','$watchCollection ignores changes made to objects in collections\nI know this is intentional (https://github.com/angular/angular.js/blob/2cd09c9f0e7766bcd191662841b7b1ffc3b6dc3f/test/ng/rootScopeSpec.js#L542-L550 and https://github.com/angular/angular.js/blob/2cd09c9f0e7766bcd191662841b7b1ffc3b6dc3f/test/ng/rootScopeSpec.js#L615-L623)\r\nbut does not really understand why it is implemented like this - performance issues?\r\n\r\nIn my particular case I want to watch for the deep changes. Any idea how to circumvent this elegantly? I only found out something like this:\r\n\r\n```javascript\r\nvar changeTrigger = function() {\r\n  JSON.stringify($scope.some.nested.param);\r\n}\r\n$scope.$watchCollection(changeTrigger, function(oldVal, newVal) {\r\n  // oldVal/newVal is a json string so i need to reference $scope.some.nested.param directly\r\n}\r\n```\r\n\r\nThanks'
6112,'vojtajina',"fix(jqLite): trim HTML string in jqLite constructor\njQuery will construct DOM nodes containing leading whitespace. Prior to this change, jqLite would throw a nosel minErr due to the first character of the string not being '<'. This change corrects this behaviour by trimming the element string in jqLite constructor before testing for '<'.\r\n\r\nCloses #6053"
6111,'tbosch','param of debugEnabled is improperly documented as a string\n'
6108,'tbosch',"feat(jqLite): IE7 support for adding/removing CSS classes\nWith this change most of Angular's features work again in IE7. As IE7 and below are not tested,\r\nthere is no guarantee what works and what not. Other browsers are not affected by the changes.\r\n\r\nSee #4562, #4880"
6103,'tbosch',"fix(ngMock): return immediately from mock $interval.cancel() when no promise argument is supplied\nThis is a fix for a possible cause of issue #6099. \r\n\r\nCalling `$interval.cancel()` without supplying the expected argument would cause a TypeError. There was a test for this but it was incomplete because it did not setup the instance of $interval with any repeated functions, so the function passed to `forEach` in which the error is thrown is never executed. The test failed when a repeated task was added.\r\n\r\nThis pull requests prevents the runtime exception by returning from `cancel()` immediately if no promise is supplied (doesn't even get to the loop) and improves the test by setting up a repeating task as the other tests do."
6101,'IgorMinar','fix($compile): link async+replace element transclusion directives with comment element\nPreviously, element transclusion directives would not receive a comment node\nin their link functions when they were the root of an asynchronous replace\ntemplate. This would cause duplicate elements to appear in an ng-if expression\nwithin ng-repeat.\n\nCloses #6006\n\n---\n\nWARNING: This patch needs some serious dog-fooding, and very careful review.\n@IgorMinar, please take a look when you have some time for this.'
6099,'tbosch','cancel() does not work in ngMock\'s $interval\nCalls to cancel in ngMock\'s $interval throw "TypeError: Cannot read property \'$$intervalId\' of undefined".\r\n\r\nIt tries to access the promise local variable outside of the scope in which it was declared.'
6098,'IgorMinar','fix (filterFilter): \nallow both dotted predicate object fields, and nested predicate objects in filters.'
6096,'IgorMinar',"Update concepts.ngdoc\nDirective name was 'ngClick' instead of 'ng-click'"
6094,'IgorMinar','Deserialising JSON\nHello,\r\n\r\nI access a web service that returns JSON. But somewhere in the JSON there is a $ref to another part of the JSON. And when I feed this data to an ng-repeater, it shows up as an empty line.\r\n\r\nIs there any way to get around this and make angular read the JSON correctly and get the data of the referenced line?'
6093,'IgorMinar','document leak for iframe directive\nHi,\r\nI found strange thing, when I use iframe-based angular directive like this\r\n\r\n       <iframe ng-src="{{url}}"></iframe>\r\n\r\nI found that number of documents increased, I controlled this parameter via chrome -> developer tools -> timeline. I fired manually gc a number of times but documents count stay unchanged.\r\nI use latest version of chrome i.e. Version 32.0.1700.102 m and angular, i.e. Angular 1.2.10.\r\n\r\nThis example not mine, but I see the same behavior, if you press to the button you can see that number of DOM documents increased (and never decreased).\r\nhttp://embed.plnkr.co/RDOJvgBdu4OKQBk1MfHL/preview\r\n\r\n![iframe_document_leak](https://f.cloud.github.com/assets/1778528/2065041/1b17b7ec-8cda-11e3-8534-419abff25487.png)\r\n\r\nDoes it mean that I forget something like this:\r\n\r\n         scope.$on(\'$destroy\', function(){\r\n                    $element.find(\'#myframe\').off();\r\n                    $element.find(\'#myframe\').remove();\r\n                    $element.off();\r\n                });\r\n\r\nOr it is chrome/angular bug ?\r\n\r\nThanks,\r\nIgor\r\n\r\n'
6092,'naomiblack','AngularJS Logo Assets Transparency Issue\nHello, it looks like the assets need fixed, namely the white square behind the text "Google" should be removed.  This needs to be 100% transparent without any matte backgrounds.  Otherwise it looks terrible.  I\'ve attached a screenshot showing the issue.  Thank you.\r\n![screenshot from 2014-02-03 08 51 39](https://f.cloud.github.com/assets/523141/2065061/76d869f0-8cda-11e3-88fb-bd8b4e7026d5.png)\r\n'
6086,'petebacondarwin','docs(*): various links to non-existent pages\nA number of the links on the left sidebar of the docs app link to guide pages which no longer exist, or have been moved.\r\n\r\nAn example:\r\n\r\n![screen shot 2014-02-02 at 6 22 35 am](https://f.cloud.github.com/assets/2294695/2060141/67b7d9f8-8bfc-11e3-882a-8eea2f5ea2c2.png)\r\n\r\nlinks to http://docs.angularjs.org/guide/types, which is an empty page. There are a number of others with similar behaviour. This was reported by `atratus` in `#angularjs`'
6084,'IgorMinar','bug(compiler): $observe() doesn\'t need to be monitored when there are no expressions\nSo I was discussing a potential implementation of a translation library and I was thinking about `<div ui-i18n="token">` vs `<div ui-i18n="{{token}}">`.\r\n\r\nSince the first example has no expression (and therefore **NEVER** changes) there is no reason to register an observer function for it. The callback should be fired once and then it should be discarded from memory.\r\n\r\nI checked [the source](https://github.com/angular/angular.js/blob/6609e3da76dd898cfe85f75f23ab2e39fee65fe5/src/ng/compile.js#L778-L790) but I can\'t seem to find any sort of checks to see if the string even contains an expression before registering the observer.\r\n\r\nUnfortunately I\'m not savvy enough to apply this fix myself, however I think it\'s a fairly crucial performance improvement if it was implemented.\r\n\r\n## TL;DR:\r\n\r\n`<div ui-i18n="{{token}}">` **SHOULD** have an observer function registered\r\n`<div ui-i18n="token">` **SHOULD _NOT_** have an observer function registered'
6083,'tbosch','chore(ngdoc): fix misspellling of Naturally in sortVersionsNatrually\nCorrects "sortVersionsNatrually" method name in `ngdoc.js` in "sortVersionsNaturally"'
6081,'tbosch','docs(input): Removed invalid statement\n$parsers should return values regardless of validity to allow chaining validation.\r\n\r\nIf a $parser returns `undefined` then sequential parsers will all automatically fail and the validation message feedback will be inaccurate.\r\n\r\nSee this discussion: https://github.com/angular-ui/ui-utils/pull/149'
6078,'naomiblack','docs-angularjs-org-dev.appspot.com is very old and should be taken down\nhttp://docs-angularjs-org-dev.appspot.com/api is a copy of the API docs from v1.0.2. It is showing up in Google search results, leading to a degraded user experience.\r\n\r\ne.g. search Google for "angularjs hello world" and this site is the first result.'
6067,'IgorMinar','feat(testing): run end to end tests on firefox and safari as well as chrome\nUpdate the Travis and Jenkins configs to run protractor tests on Safari and Firefox as well,\r\nand make the Travis tests run output XML and turn off color.\r\n\r\nFix tests which were failing in Firefox due to clear() not working as expected.\r\n\r\nFix tests which were failing in Safari due to SafariDriver not understanding the minus key,\r\nand disable tests which SafariDriver has no support for.'
6063,'petebacondarwin','docs(all): convert <pre>/</pre> snippets to GFM snippets\nTitle should be self-explanatory. @petebacondarwin please review and check in when ready'
6054,'tbosch',"Returning cloned data from a service model fails with infinite recursion\nI've got a service that acts as a model. In order not to expose the internal variable that holds data and make it by mistake modifiable by reference, when I return it, I do a `angular.copy`.\r\n\r\nIf the internal variable contains only primitives, that's fine. But if it contains also objects, it's not (I get 10 digest error).\r\n\r\nHere is the fiddle: http://jsfiddle.net/aFBkP/1/"
6046,'tbosch','`npm install` to `npm install karma`\n'
6044,'pkozlowski-opensource','git checkout -f step-1 not working\nHello!  As I go through the turotial, I am trying to reset my workspace but nothing is happening.  I put the command in the terminal but it does not update index.html.  I must be doing something wrong!\r\n\r\nI am using Coda 2 as my editor.  I exit the index before entering the checkout command.  \r\n\r\nAny ideas?  Thanks for your help!   '
6033,'caitp',"fix(shallowCopy) logic error where '$foo' would be ignored\nIntroduced in this commit : https://github.com/angular/angular.js/commit/cb29632a5802e930262919b3db64ca4806c5cfc7 "
6030,'matsko',"SVGAnimatedString handling in animatedRun()\nanimateRun() in angular-animate.js doesn't handle SVGAnimatedString giving undefined indexOf method messages when changing classes on SVG nodes.\r\n\r\nI wasn't confident to submit a pull request but the following patch seems to work around it for me.\r\n\r\n```\r\n--- ../../vendor/angular.js/build/angular-animate.js\t2014-01-28 01:45:13.000000000 +1030\r\n+++ angular-animate.js\t2014-01-29 10:21:04.000000000 +1030\r\n@@ -1217,7 +1217,11 @@\r\n       function animateRun(element, className, activeAnimationComplete) {\r\n         var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);\r\n         var node = extractElementNode(element);\r\n-        if(node.className.indexOf(className) == -1 || !elementData) {\r\n+        var nodeClassName = node.className;\r\n+        if (angular.isObject(nodeClassName) && nodeClassName.toString() === '[object SVGAnimatedString]') {\r\n+                  nodeClassName = nodeClassName.baseVal;\r\n+        }\r\n+        if(nodeClassName.indexOf(className) == -1 || !elementData) {\r\n           activeAnimationComplete();\r\n           return;\r\n         }\r\n```"
6029,'btford','fix(docs): version drop down should be naturally sorted\nThe drop down should be naturally sorted instead of computer sorted\r\n\r\n![angularjs__ngshow](https://f.cloud.github.com/assets/127535/2024680/cd410bca-886c-11e3-9011-f165e6a72498.png)'
6026,'caitp','email validation regexp update with tests\nAdded some improved testing and regexp matching to be a closer match to chromium and to rfc1035'
6020,'matsko','ng-animate: ng-enter class is removed too early\nI\'m currently trying to make a slide-up animation, similar to an iPhone modal controller, where the new page slides up over the existing page. However, in my current implementation, the existing page actually flashes to fully visible (above the new page) just before the transition is complete and it looks really, really bad. Here\'s a demonstration: http://plnkr.co/VSp6OGgTqDF6gFwUuanT\r\n\r\nAs far as I can diagnose, this is because the ngAnimate service actually removes the "ng-enter" class from the new page before it removes the old page\'s element (which now has "ng-leave"). Since both "ng-leave" and "ng-enter" are set to "position: absolute", the moment that "ng-enter" is removed, the "ng-leave" element floats on top of it (because "position: absolute" always appears above "position: static").\r\n\r\nFiddling with the version numbers, it looks like this issue was introduced in v1.2.6.\r\n\r\nMy current workaround is to also add "opacity: 0" to "ng-leave-active" so that the old view fades out as the new one comes in, but it\'s not exactly the effect I was going for and I\'d like to remove that fade out effect if possible.'
6019,'matsko',"ng-class does not play simple CSS transitions when ngAnimate is included\nWhen ngAnimate is listed as an app's dependency, very basic CSS transitions do not animate. Here's a quick, dead-simple repro: http://plnkr.co/gZiIkxw007m0STgTfm6R\r\n\r\nFiddling with the version numbers, it looks like the issue was introduced in v1.2.6."
6016,'caitp',"feat(ngRepeat): ngRepeat is now immune to removing or moving its elements without its corresponding comment node\nThis PR closes issues: #5054, #4954, #5619.\r\n\r\nThe ngRepeatDirective internally checks if one of its elements is being removed/inserted properly (with its corresponding comment element as ngRepeat does) or not. And if not (as sortable functions/directives do) it removes the comment node when needed, and then inserts it when needed and where it's supposed to. Now any sortable directive will work properly (e.g. https://github.com/mostr/angular-ui-multi-sortable or even raw jQuery (multi)sortable)"
6012,'jeffbcross',"Edited the 'Flushing HTTP requests' section\nMinor grammatical edits in the Flushing HTTP requests section."
6011,'btford','Update $resource documentation\nThis updates the `$resource` docs with information on accessing the `$http` promise, as well as eliminate an outdated pattern that is deprecated (making use of `$parse` unwrapping the promise to access the user from a get request on the resource).'
6009,'caitp','Filter path fix\nCloses #6005'
6006,'caitp','ngRepeat + directive w/ templateUrl + ngIf = printed twice\nA really weird case of an ng-repeat, a directive with an external template url and ng-if on root element leads to printing twice every directive.\r\n\r\nHappens only with this combination.\r\nDoesn\'t happen with regular template string, or if the ng-if not on the root element or not in an ng-repeat.\r\n\r\nSource:\r\n\r\n`index.html`\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html ng-app="app">\r\n  <head>\r\n    <link rel="stylesheet" href="style.css">\r\n    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.10/angular.min.js"></script>\r\n    <script src="script.js"></script>\r\n  </head>\r\n\r\n  <body>\r\n    <div ng-repeat="i in [1,2,3]">\r\n      {{i}}\r\n      <hello></hello>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\n`script.js`\r\n\r\n```js\r\napp = angular.module("app", []);\r\n\r\napp.directive(\'hello\', function () {\r\n  return {\r\n    restrict: \'E\',\r\n    replace: true,\r\n    templateUrl: "hello.html",\r\n    //template: \'<div ng-if="true">Printed once as exptected</div>\'\r\n  }\r\n});\r\n```\r\n\r\n`hello.html`\r\n\r\n```html\r\n<div ng-if="true">Printed twice, but should not</div>\r\n```\r\n\r\nOr here:\r\n\r\nhttp://plnkr.co/edit/DmyCkta0G0mjzgMJvchk?p=preview'
6005,'IgorMinar','Filtering and Periods in Object Keys\nHi folks,\r\n\r\nI\'m putting together a front-end for interacting with an API. The results coming from the API are namespaced based on the database tables behind the API(also being developed). During development we were naming fields like so: "table.field" to similarly match our database schema. We\'re doing this to avoid collisions in denormalized data. In using this naming scheme I stumbled upon what I think is a bug with ng-repeat and filtering if an object\'s keys have periods in them. \r\n\r\nHere\'s a basic, working ng-repeat:\r\n```\r\n<input type="text" ng-model="abc.label">\r\n<ul>\r\n    <li ng-repeat="item in Array | filter: abc)">{{item.label}}</li>\r\n</ul>\r\n```\r\n\r\nAnd here\'s a broken one. Let\'s say though that the object\'s key wasn\'t "label", but rather "meta.label":\r\n```\r\n<input type="text" ng-model="abc[\'meta.label\']">\r\n<ul>\r\n    <li ng-repeat="item in Array | filter: abc)">{{item[\'meta.label\']}}</li>\r\n</ul>\r\n```\r\n\r\nThese two examples have different behavior. It appears that the key that you\'re filtering on in the objects in the array cannot have a period in it. If it does have a period, the initial set will show, but as soon as the model value changes the set is truncated. Curiously even when the model\'s "meta.label" property is cleared, the set is still truncated.\r\n\r\nI put together an interactive example of two ng-repeats, one over an array with objects with periods in its keys, and one over an array of objects without periods in its keys. [You can see it here.](http://plnkr.co/edit/BU5YolgQtNJWmtr1wlPO?p=preview)\r\n\r\nFor the time being I\'m going to have our API return data namespaced as "table/field", which seems to work as expected.'
6004,'chirayuk',"fix(ngResource): don't append number to '$' in url param value when encoding URI\nPreviously, if a URL parameter value included a $, it would replace the dollar sign with a literal '$1' for mysterious reasons. Using a function rather than a replacement string circumvents this behaviour and produces a more expected result.\r\n\r\nCloses #6003"
6002,'caitp',"fix(input): ngMinlength/ngMaxlength should not invalidate non-stringlike values\nA regression reported in #5936 shows that prior to cdc4d485a6daa0c74e5d07d8def2a3ee68d93d13, an input with an ngMinlength or ngMaxlength validator would not invalidate values where value.length was undefined.\r\n\r\nThis patch addresses this by making use of the Infinity global when a value's length property is undefined.\r\n\r\nThe behaviour of this validator is still incorrect in the case of objects with a length property which are not arrays or strings, and will most likely remain that way. This cannot change as it is possibly desirable to use ngMinlength/ngMaxlength in conjunction with ngList.\r\n\r\nCloses #5936\r\nCloses #6000"
6000,'matsko','Update input.js\nThis commit solves de issue 5936 (https://github.com/angular/angular.js/issues/5936), by just retoring the previous condition in the negative form.'
5994,'caitp',"fix(select): avoid checking option element selected properties in render\nIn Firefox, hovering over an option in an open select menu updates the selected property of option\r\nelements. This means that when a render is triggered by the digest cycle, and the list of options\r\nis being rendered, the selected properties are reset to the values from the model and the option\r\nhovered over changes. This fix changes the code to only use DOM elements' selected properties in a\r\ncomparison when a change event has been fired. Otherwise, the internal new and existing option\r\narrays are used.\r\n\r\nThis is based on the fix given in #2448, but updated to fix the regression discussed there.\r\n\r\nCloses #2448"
5989,'ashleygwilliams','Add links to ngResource and $resource\n'
5987,'caitp',"ngInclude creates scope for every root element in included file\nngInclude is creating too many scopes. If you include a file that has 3 elements at it's root, ngInclude will create 4 scopes.\r\n\r\nThe first containing scope is completely understandable, as you need a container for creating new dom elements, as well, the documentation mentions that a new scope will be created.\r\n\r\nWhat doesn't make any sense to me, is why every individual element in the included file also needs its own scope. This means that at a minimum, ngInclude will create two scopes. One for the element with the include directive, and one for the first root element in the included content itself.\r\n\r\nPlunkr here: http://plnkr.co/edit/Xy7lhNoU2SP8kGE11mSM?p=preview\r\n\r\n"
5984,'IgorMinar',"fix(jqLite): triggerHandler support listeners that unbind from the event\nFixes event handlers registered with `.one` if the event is invoked from `triggerHandler`.\r\n\r\nRelated to #5109 and #5269. \r\n\r\nDOM callback events from the ngAnimate uses triggerHandler so I think this is pretty important, and it's a small change."
5976,'jeffbcross','refactor($q): make $q Promises A+ v1.1 compilant\nRefactor to make $q Promises A+ v1.1 compilant'
5969,'matsko',"In docs, search input intercepts all forward slash key presses, even when cursor is within an input.\nFor example, visit: http://docs.angularjs.org/api/ngSanitize.$sanitize and click into the textarea and enter a forward slash to see that the search box is now in focus. \r\n\r\nThis bug manifested itself while I was converting the ng-sanitize docs to use protractor, but webdriver couldn't send the closing HTML tag to the textarea because it blurred too soon."
5944,'IgorMinar',"fix(input): use ValidityState to determine validity\nIn browsers where HTML5 constraint validation is (partially) implemented, an invalid number entered into an `input[type=number]` (for example) input element would be visible to the script context as the empty string. When the required or ngRequired attributes are not used, this results in the invalid state of the input being ignored and considered valid.\r\n\r\nTo address this, a validator which considers the state of the HTML5 ValidityState object is used when available.\r\n\r\n---\r\n\r\nIt is not entirely possible to test this outside of an E2E scenario, because browsers (or at least Chrome) do not seem to update validity in response to artificial events.\r\n\r\nIf I can get some help writing E2E tests for this, then I'll be more confident that this is an effective solution.\r\n\r\nIn the mean time, I'll put together another demo. **[DEMO](http://plnkr.co/edit/qF8rmye9MTbvignmDD7d?p=preview)**\r\n\r\nCloses #4293\r\nCloses #2144\r\nCloses #4857\r\nCloses #5120\r\nCloses #5500"
5941,'matsko',"Fix the ngMock issue with ngAnimate\nBREAKING CHANGE\r\n\r\nThis will break existing use of `mock.animate`. But the module itself is undocumented so it shouldn't be an issue.\r\n\r\nCloses #5822\r\nCloses #5917"
5939,'IgorMinar',"Create an account for publishing to npm\nThis is for the Angular team and is a required step for #2877 \r\n\r\n![screen shot 2014-01-22 at 3 06 48 pm](https://f.cloud.github.com/assets/51505/1978219/c716f14a-83a0-11e3-8988-ade5cf15eed5.png)\r\n\r\n1. Go to https://npmjs.org/\r\n1. On the top right click Create Account\r\n1. Username: what name should be used when publishing to npm? My guess is `angular`, which is currently available, but it could also be a contributor's name.\r\n1. Password: ...\r\n1. Report here what username was selected. Keep the password on file for the build task that will publish to npm."
5938,'tbosch','fix(ngSelect): Support static options on multi-select drop down\nRemoves a condition where static options are not added as part of render function when multiple attribute is enabled\r\n\r\nCloses #4325'
5926,'petebacondarwin','docs: leading chars are trimmed from example <file>s\nWhen writing doc examples using ``<example><file>sourcecode</file></example>`` notation, I found that the docs generator or renderer trimmed off the leading three characters of each line inside my <file> tags.\r\n\r\nThis only happened when the first line of my file was indented. If that first line was indented by n whitespace chars, the rest of the lines in the file were trimmed of n leading characters. Unfortunately, it trims not only whitespace from the subsequent lines, but the first n characters regardless!\r\n\r\nSo:\r\n\r\n    <file>\r\n       abcdefg (three leading spaces)\r\n    12345678 (no leading spaces)\r\n    </file>\r\n\r\nWould ultimately appear on the rendered docs page as\r\n\r\n    <file>\r\n    abcdefg (no leading spaces, something stripped them off)\r\n    45678 (and something stripped off "123"!)\r\n    </file>\r\n\r\nIs this some overzealous indentation correction / prettification routine?\r\n\r\nI think this should be changed to at least give a warning when it strips non-whitespace characters from a line, and preferably just stop doing that... perhaps check all lines for the least amount of leading whitespace, then only trim that number, instead of keying off of the first line. \r\n\r\nIs this intended - are there any situations where auto-removal of leading non-whitespace characters is desirable?\r\n\r\nTo recreate: edit any doc file so that some important line in an example file, such as a closing curly brace, is indented with fewer characters than the first line. Generate the docs, view the page, observe the missing leading character.'
5920,'caitp',"fix(ngRoute): pipe preceding route param no longer masks ? or * operator\nBefore this change,\r\n\r\n```js\r\n$routeProvider.when('/foo/:bar|?', { ... });\r\n```\r\n\r\nwould not have the expected effect --- the parameter would not be optional, and the pipe would not be included in the parameter name.\r\n\r\nFollowing this change, the presence of the pipe operator will typically cause an exception to be thrown due to the fact that the generated regexp is invalid.\r\n\r\nThe net result of this change is that ? and * operators will not be masked, and pipe operators will need to be removed, although it's unexpected that these are being used anywhere."
5917,'matsko',"Including angular-mocks breaks ngAnimate animations\nI was working on an app with the latest 1.2.9 release and all was well until I started to use `ngMockE2E`'s `$httpBackend` to do some backend-less development. Once angular-mocks.js was included on the page my animations would no longer work. What's interesting is removing `ngMockE2E` as a dependency for my app is not enough to get animations working again, angular-mocks.js must be removed entirely. Here's some fiddles to help illustrate the issue:\r\n\r\nangular-mocks not included (works as expected):\r\nhttp://jsfiddle.net/8y3Ey/\r\n\r\n![screen shot 2014-01-21 at 5 12 06 pm](https://f.cloud.github.com/assets/479121/1968833/4359431a-82e9-11e3-9fc4-34199aa4833c.png)\r\n\r\nangular-mocks included (animations appear to start but halt on enter):\r\nhttp://jsfiddle.net/q8SQg/\r\n\r\n![screen shot 2014-01-21 at 5 07 25 pm](https://f.cloud.github.com/assets/479121/1968847/7c3c6f54-82e9-11e3-8fb2-67fa25cae5b7.png)\r\n\r\nCurrent workarounds are to either remove animation classes from elements (don't use animations) or to refrain from including angular-mocks.js (don't use ngMock/ngMockE2E). There's been quite a few releases since I last used angular mocks so it's possible that I'm just doing something incorrectly."
5914,'IgorMinar',"remove 'going forward' nonsense\ntime/space dimension error"
5910,'btford','docs(guide/controller): Typo double and\nRemove double word "and"'
5909,'IgorMinar','fix grammar\nminor grammar fix.'
5908,'btford','Mention ng-min earlier in the developer guide\nWish I knew about ng-min earlier, would have saved me hours!'
5907,'IgorMinar',"refactor(externs): Move Closure Externs back to Closure code repository.\nWhile Closure Compiler generally recommends to maintain the externs for\r\nprojects together with their source, this has not worked well for\r\nAngularJS:\r\n- Changes to externs must be tested; they can break clients. AngularJS\r\n  has no testing infrastructure for this.\r\n- Changes mostly come from users inside of Google and are much more\r\n  easily submitted together with the code using them within Google's\r\n  repository.\r\n\r\nThis change deletes the externs here and adds a README.closure.md to\r\ndocument the change. They will be added back to Closure Compiler in a\r\nseparate submit."
5906,'IgorMinar',"refactor(externs): Move Closure Externs back to Closure code repository.\nWhile Closure Compiler generally recommends to maintain the externs for\r\nprojects together with their source, this has not worked well for\r\nAngularJS:\r\n- Changes to externs must be tested; they can break clients. AngularJS\r\n  has no testing infrastructure for this.\r\n- Changes mostly come from users inside of Google and are much more\r\n  easily submitted together with the code using them within Google's\r\n  repository.\r\n\r\nThis change deletes the externs here and adds a README.closure.md to\r\ndocument the change. They will be added back to Closure Compiler in a\r\nseparate submit."
5905,'matsko','Improve ngView doc to mention the class used for animate\nHi,\r\n\r\nI cannot find any official documentation to describe the different class used during a ngView animation.\r\n\r\nI just find :\r\n\r\n.enter-setup\r\n.enter-start\r\n.leave-setup\r\n.leave-start\r\n\r\nIs-it correct ? How to make the animation setting ? Is-it normal than <a href="http://docs-angularjs-org-dev.appspot.com/api/ng.directive:ngView">the doc page of ngView</a> doesn\'t mention it ?\r\n\r\nThanks'
5901,'IgorMinar','Add spacing to tutorial buttons\nAdded 5px of right margin to tutorial buttons (Previous, Live demom ...).'
5898,'caitp',"ngMock $httpBackend not encoding urls\nWhen testing one of my JS components I found that using `whenGET` (not sure about other methods) the input url is not encoded to match encoded urls...\r\n\r\nex.\r\n`$httpBackend.whenGET('/configuration/'  + 'app/common/test').respond({ x: 0 });`\r\n\r\nThe resulting error would indicate \r\n`Unexpected request: GET /configuration/app%2Fcommon%2Ftest`"
5886,'matsko','Some Animations do not work after upgrading to 1.2.9\nI have an entire application with animated transitions using ng-view, the classic router, and resolve functions to load content to be passed on the next controller.\r\nI updated to 1.2.9, and suddenly, one (and only one) transition stopped working. \r\n\r\nAll views have the same effect (sliding). except that the failing one has a resolve function that executes a $http get that takes more than what take the other views. \r\n\r\nThe app transitions normally between the other views, until I navigate to the failing one; at that moment the new view does not animate at all; it just appears taking the whole space, even before the old view ends animating.\r\n\r\nBack to 1.2.8 for now....\r\n'
5864,'tbosch','feat(input): support types date, time, datetime-local, month, week\npartially closes #757\r\n\r\nMerged from PR #5256'
5863,'petebacondarwin','Fix for issue #5587 where app is bootstrapped more than once\nPR for #5587\r\n\r\nI am not sure where to write the test for this fix (may be `e2e` with html file loading build/angular.js?) . \r\n\r\nHere is a plunkr showing that the fix works - http://plnkr.co/edit/xey09HDiX5jQmHKbgEVi?p=preview\r\n\r\n\r\n '
5847,'petebacondarwin','fix(orderBy): support sorting by value\nFixes issue #4579, adding support for:\r\n\r\n`<p ng-repeat="item in items | orderBy">{{item}}</p>`\r\n`<p ng-repeat="item in items | orderBy:\'+\'">{{item}}</p>`\r\n`<p ng-repeat="item in items | orderBy:\'-\'">{{item}}</p>`\r\n\r\nIt seems unnecessary and redundant in this particular scenario to support the `reverseOrder` parameter and taking `sortPredicate` as an array, so they are ignored (i.e. the following):\r\n\r\n`<p ng-repeat="item in items | orderBy:\'+\':false">{{item}}</p>`\r\n`<p ng-repeat="item in items | orderBy:[\'+\']">{{item}}</p>`\r\n\r\n'
5825,'btford',"feat(ngInclude): emit $includeContentError when HTTP request fails\nThis adds a scope event notification when a template fails to load.\r\n\r\nThis can have performance implications, and unfortunately cannot at this moment be terminated with preventDefault(). But it's nice to be notified when problems occur!\r\n\r\nCloses #5803"
5822,'matsko','Remove ngAnimate - ngMock Hack\nThis was added at the 11th hour to get the release out.  It should be fixed properly.\r\n\r\nhttps://github.com/angular/angular.js/commit/1413328e6aec87338bf1fce002dfaf519d9ca1b5'
5820,'btford',"docs(select): add object comparison warning\nI ran into this issue earlier today and figured it's most likely a common oversight.\r\n\r\njsfiddle: http://jsfiddle.net/bluefocus/byzDL/"
5814,'petebacondarwin','Issue #5811 - Install node.js dependencies: fails\nI found this issue in Linux Mint 16 Cinnamon 64bit'
5810,'petebacondarwin',"Fixed important typo causing installation issues.\nThis was passing 'mocks' to the `installModule` function, which then erroneously generated installation documentation saying one should install this as 'ngMocks' in their dependencies. This is incorrect. The module name is actually 'ngMock'. Angular will throw an exception saying it can't find 'ngMocks'. But it finds the correct files with 'ngMock'. I personally ran into this issue, so wanted to fix it."
5805,'btford',"docs($cacheFactory): document cache instance methods\nThese were apparently entirely undocumented. I'm not sure if they're intended \r\nto be private, but in case they're not, I've written some initial docs for\r\nthem"
5797,'btford','fix($scope): fix when calling the $on remove function twice\nWhen calling twice the remove function returned from $on, remove the listener once'
5796,'petebacondarwin','docs(guide): Wrong order of links in the guide contents\nCurrent order of links in the guide contents (http://docs.angularjs.org/guide/, block of links on the left) is this:\r\n```\r\nControllers\r\nFilters\r\nTemplates\r\n(!) Introduction\r\n(!) Conceptual Overview\r\nUnderstanding Angular Services\r\nManaging Service Dependencies\r\nCreating Services\r\nInjecting Services Into Controllers\r\nTesting Angular Services\r\nUsing $location\r\n(!) Angular Services\r\nData Binding\r\n...\r\n```\r\n\r\nI think that elements marked with (!) are in wrong places and the order should be this:\r\n```\r\n(!) Introduction\r\n(!) Conceptual Overview\r\nControllers\r\nFilters\r\nTemplates\r\n(!) Angular Services\r\nUnderstanding Angular Services\r\nManaging Service Dependencies\r\nCreating Services\r\nInjecting Services Into Controllers\r\nTesting Angular Services\r\nUsing $location\r\nData Binding\r\n...\r\n```\r\n\r\nAlso probably the order of other elements should be checked as well.'
5793,'btford','docs(guide): Add UI-Map to Complementary Libraries\n'
5785,'pkozlowski-opensource','fix($http) - allow for user removal of default headers by passing header functions\nAdds additional testing and fixes #5784\r\n\r\n\r\nCLA is signed perekyle@gmail.com, 2 additional tests (1 that failed) in the latest build of angular.js'
5778,'IgorMinar',"Add isFile to publishExternalAPI\nIt seems to be missing from the external api. I'd rather not unnecessarily duplicate the same code in my code, so just make yours public.\r\n\r\nAlso moved version down one to group isDate with the rest of the code."
5777,'matsko','test(doc:protractor): turn off animation for doc end to end tests to spe...\n...ed things up'
5776,'IgorMinar','docs(angular.forEach): specifies that .forEach filters using .hasOwnProperty, fixes #5180\n'
5775,'vojtajina','docs(CONTRIBUTING.md): add link to coding rules\nadd a link insie the Submitting a Pull Request section'
5773,'petebacondarwin','docs(versions): preserve URL path. Fixes #4661\nPreserve URL path when switching between doc versions. Fixes #4661'
5771,'vojtajina','Typo: Practise\nA small typo: `...it is a good practise to move...`'
5769,'vojtajina',"Update step_02.ngdoc\nI'm suggesting a syntax change.  Thank you."
5767,'jeffbcross','$compile break on ng-repeat-start/end\n$compile work with element as collection incorrect\r\nhttp://plnkr.co/edit/aOk8tbzU7ydCO2AUKAzu?p=preview'
5764,'vojtajina','fix($http): ensure that default headers are different objects\ncloses #5742'
5763,'matsko',"defining a 'leave' call back with module.animation will cause ng-if to clone its children infinitely.\nhttp://plnkr.co/edit/8Od0HjrKDxbrYfYkyJa5?p=preview\r\n\r\nDon't think I can make the example any simpler than this."
5756,'caitp','Possible bug with custom interpolates?\nhttp://stackoverflow.com/questions/21077607/strange-issue-with-angularjs-template\r\n\r\nQuick summary: I\'m using custom opening and closing tags for angularjs. For some reason, ng cannot seem to interpret inline template correctly:\r\n\r\nPlease check this link for working code:\r\nhttp://plnkr.co/edit/OQiJovrNzOraJdsSXeSY?p=preview\r\n\r\nPlease check this link for non-working code:\r\nhttp://plnkr.co/edit/IzGpTdnqmO5MxtldnKec?p=preview\r\n\r\nPlease note how a random character "a" is added to the template and causes the code to start working.'
5752,'IgorMinar','Gihub: Something is messing with "Recently updated" issue sort order\nIf you select "Recently updated" issue sort order, you see a lot of issues (actually only pull requests) that have been updated at the same time some x minutes, hours ago, even though the last reference or comment is much older. I suspect it\'s because of a bot periodically checking stuff in the issues via API. Is there a way to prevent this? It makes "Recently updated" basically useless.'
5750,'matsko','[ngAnimate] animation-duration causing issues with ng-show \nWhen trying to use a CSS3 animation with ng-show, I have a problem. A gif illustrates it: \r\n\r\n![ngshow](https://f.cloud.github.com/assets/5474173/1895788/30e265b4-7b5e-11e3-935d-df9c70cb24cf.gif)\r\n\r\n\r\nhttp://plnkr.co/edit/YpjzECQyOh7r5tzuqKGD?p=preview\r\n\r\nI  click, and it disappears. All is well. I double click, and it appears. It should not appear, because two clicks would make it be hidden (original state).\r\n\r\nThe image does not obey the truth value used by ng-show when double clicking fast. I believe the animation-duration is to blame. \r\n\r\n**How to reproduce this**\r\nFirst, I think you have to be on a Windows machine (?). \r\nThen:\r\nDouble click on the "click me" text really fast. You probably need to use a trackpad for this. Notice that the image at times is shown when **false** is indicated, and hidden when **true** is indicated. \r\n\r\n**Browsers**\r\nFirefox 26\r\nChrome 31.0.1650.63 m\r\n\r\n**Known Operating Systems**\r\nWindows 8.1\r\n\r\nCan\'t seem to reproduce on a mac. Maybe because can\'t physically click fast enough.\r\n\r\n**How to fix**\r\nNo idea, **but I have been able to stop the issue by changing all of the animation-durations from .3s to 0s.** Then it behaves as expected. The problem is that real animations don\'t have a 0s duration.\r\n\r\nNote that this does not affect transitions that specify a duration. Just animation-durations.\r\n\r\nWhen using physical buttons, this is very minor, because you have to click extremely fast. With a trackpad, clicking fast is much easier, and this is where I see the issue mostly. \r\n\r\n'
5749,'IgorMinar',"ngAnimate enhancements\n## Fixes to Transitions / Keyframe Animations\r\nNgAnimate and natural CSS transitions are not 1-1 in terms of behaviour (yet), but this fix brings 1.2 to work alongside natural CSS transitions much better. With 1.3 the API will be changed so things are more fluid, but this fix should handle a good amount of the class-based bugs that are appearing in ngAnimate.\r\n\r\nLong story short, if you remove ngAnimate from your application it should perform the exact same for CSS-based transitions and keyframe animations triggered by $animate.addClass and/or ngClass.\r\n\r\nCloses #5588 \r\nCloses #5191\r\n\r\nHere's an example of what should happen:\r\n\r\n\r\nNatural CSS animations without ngAnimate\r\nhttp://jsfiddle.net/7vk7p/3/\r\n\r\nAnd this is how it is expected to be with ngAnimate\r\nhttps://s3.amazonaws.com/angularjs-dev/ng-animate-race-condition-fix/example/animate.html\r\n\r\nThis is how it currently is:\r\nhttp://jsfiddle.net/7vk7p/2/\r\n\r\n## Cleanup\r\nRemove a useless test from ngAnimate\r\n\r\n## Fixes to Staggering animations\r\nBroken with 1.2.5+ due to closing timeout feature.\r\n\r\n## Fixes to performance\r\nUse `requestAnimationFrame` instead of $timeout to issue a forced reflow.\r\n\r\n## Animation callbacks\r\nAdded a new feature to tap into callbacks before and after animations DOM events are called."
5747,'vojtajina','fix headers common, tests pass: closes #5742\nupdated http common headers object values to be passed through copy() first. Write new specs. All specs green.'
5735,'IgorMinar','corrected typo & markup.\nthe --> that \r\n\r\nvalue --> `value`'
5730,'naomiblack','Step 4, no default order and what it means\nOn step 4 (http://docs.angularjs.org/tutorial/step_04), the docs say this about what would happen if there were no default order in the controller:\r\n\r\n"If we had not set the default value here, the model would stay uninitialized until our user picks an option from the drop down menu."\r\n\r\nBut then you go down to the experiments section and it says this:\r\n\r\n"In the PhoneListCtrl controller, remove the statement that sets the orderProp value and you\'ll see that Angular will temporarily add a new "unknown" option to the drop-down list and the ordering will default to unordered/natural order."\r\n\r\nThis contradicts the earlier statement. The experiment text is correct, but the first statement leads you to believe that Angular won\'t be able to render the list at all.\r\n'
5726,'naomiblack','Possibly misleading direction in tests introduction in docs\nAt http://docs.angularjs.org/tutorial/step_02, when they mention Karma, it says:\r\n\r\n"To rerun the tests, just change any of the source or test files. Karma will notice the change and will rerun the tests for you. "\r\n\r\nIt may be a small thing, but I first tried to change index.html, and it didn\'t update. It dawned on me rather quickly that they meant the JS files, but perhaps the docs could make it more clear.'
5725,'IgorMinar','options directive should set the "selected" attribute??\nIm raising this but im not 100% if its a bug or possibly a feature request.\r\n\r\nin the following fiddle you can see that after selecting an option via setting the model value. the view changes correctly, but i would have expected the selected attribute on the relevant option element.\r\n\r\nhttp://jsfiddle.net/4kJWH/'
5722,'IgorMinar','Adds Closure externs for Cache factory.\nNamaste,\r\n\r\nThe Closure compiler renames methods like removeAll, get, etc as\r\ndefined on the cache object. This patch adds externs to prevent\r\nthe Closure compiler from renaming them.\r\n\r\nThank you.\r\n\r\nCheers,\r\nYesudeep.'
5716,'petebacondarwin','"Wire the backend" example needs angular-route.js\nOn http://angularjs.org/ , the "Wire up a Backend" section has an example that uses ngRoute.  As of 1.2.0 this has moved to a separate module.  The `index.html` example file needs this line added in `<head>`:\r\n\r\n````\r\n    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.7/angular-route.min.js"></script>\r\n````\r\n\r\nThe corresponding JSFiddle example ("Edit Me") appears to also need this fix and other fixes before it is functional.'
5714,'caitp','feat(ngRoute): cancel $routeChangeStart via $event.preventDefault()\nThis change allows ngRoute route changes to be cancelled using\n$event.preventDefault.\n\nThis enables route changes to be aborted at the discretion of the application.\n\nRoute changes may not be cancelled if forceReload is set to true.\n\nCloses #5581'
5713,'jeffbcross','test(docs): add protractor tests for docs app\nCloses #5437'
5711,'jeffbcross','feat(build): add a grunt test for running protractor tests extracted fro...\n...m the docs'
5709,'vojtajina','Directive causes $digest to reach max iterations when watching directive attribute\nhttp://plnkr.co/edit/ZD1LpM?p=preview\r\n\r\nHTML with a directive:\r\n```HTML\r\n<div foo=\'{"foo": bar}\'></foo>\r\n```\r\n\r\nThe `bar` variable matches an array inside the controller:\r\n```JavaScript\r\n$scope.bar = [{...}, {...}];\r\n```\r\n\r\nNow let\'s watch for any changes on the directive attributes:\r\n```JavaScript\r\nscope.$watch(attrs.foo, function(newValue, oldValue) {\r\n  ...\r\n});\r\n```\r\n\r\nWatching `attrs.foo` causes `Uncaught Error: [$rootScope:infdig] 10 $digest() iterations reached. Aborting!`.\r\n\r\nTested with AngularJS 1.0.* and 1.2.*, Chrome + Firefox.\r\n\r\nIf one writes\r\n```\r\n<div foo=\'bar\'></div>\r\n```\r\nof course the error does not occur.\r\n'
5704,'tbosch',"Scope() on template of isolated directive is wrong\nI have a directive which has an isolated scope and a template.\r\nAlthough the bindings in the template refer to the isolated scope as they should, scope() and data() do not show this scope.\r\n\r\nFor all purposes the scope of the template is indeed the isolated scope, so I'd expect scope() to return it (or at least to see it in data()).\r\n\r\nThis makes debugging a bit difficult.\r\n\r\nSee\r\nhttp://jsfiddle.net/yarontt/S5bnE/ "
5702,'tbosch','Update step_07.ngdoc\nshould be $routeProvider.otherwise other than $route.otherwise;'
5700,'tbosch','Added missing whitespace\n'
5697,'IgorMinar','Update step_02.ngdoc\nFixed 1st code snippet under experiments to agree with the second step.'
5696,'tbosch','docs(provider): replaced coffeescript with comparable javascript example\n'
5694,'btford','#5001: Fixes jqLite not correctly adding & removing classes in IE9\nThis PR is a cleaned up version of [#5686](https://github.com/angular/angular.js/pull/5686).  This is for #5001.\r\n\r\nSomehow my history got polluted due to bouncing between two different computers.'
5692,'vojtajina',"ng-cloak directive gets removed too early\nng-cloak directive seems to get removed too early.\r\n\r\nthe bug has been already described here https://stackoverflow.com/questions/19476880/ng-cloak-directive-gets-removed-too-early and i've noticed the same issue while working on https://github.com/globaleaks/GlobaLeaks/issues/739"
5691,'tbosch','ng-hide evaluates empty strings as truthy\nVersion 1.2.0 introduced a bug in my UI where ng-hide treats a promise evaluated as an empty string as truthy. Up to version 1.0.8, ng-hide would evaluate an empty string as falsy, following Javascript logic:\r\n\r\n    "" == true\r\n    false\r\n\r\n    "" == false\r\n    true\r\n\r\nThis is a standard case IMO: a controller calls a service for logged user, server returns 204 code (no content), $http receives an empty string as data, calls promise resolve() with an empty string. The directive `<div ng-hide="variable">` should treat `variable` with empty string as falsy.\r\n\r\nRelated issues: #3969, #4005'
5690,'vojtajina','feat(docs): adding the <doc:protractor> ngdoc-tag\nThis is the first step in migrating tests from <doc:scenario> to <doc:protractor>.\r\nIn-documentation examples with doc:protractor sections will have their contents\r\noutput to a tab on the docs site as well as output to a standalone test file in\r\nbuild/docs/ptore2e.'
5688,'vojtajina','fix(rootScope): $watchCollection returns in oldCollection a copy of the ...\n...former array data\r\n\r\nrelated to #1751\r\nWhen watching arrays, $watchCollection returned the new data both in the newCollection\r\nand the oldCollection arguments of the listener\r\n\r\nSplit from PR #3865'
5687,'tbosch',"ngRoute can't find a view (HTML partial)\nngRoute could not find a view HTML Partial file after deploying to mobile devices using PhoneGap.   This was confusing and cost hours to debug because when the hyperlink was tested on the desktop the file was found and the navigation worked.  However, the same link simply did nothing when tested on Android and iOS devices in a PhoneGap app.  Finally it was determined that HTML file names become case sensitive when deployed with PhoneGap, but are not when testing on the desktop.   The issue is when ngRoute was not able to find the view file no information, such as a 404, was provided to indicate ngRoute could not see the file.  This made debugging the issue much more difficult."
5686,'IgorMinar','#5001: Fixes jqLite not correctly adding & removing classes in IE9\nThis is a condensed version of [#5669](https://github.com/angular/angular.js/pull/5669) that does not break the tests. '
5685,'matsko','ngAnimate - onComplete event listener/callback for css animations\nHow do i setup an onComplete event listener or callback function when using css animations on ngView?'
5679,'caitp','Update httpBackend, check window.XMLHttpRequest\nAs per this issue: https://github.com/angular/angular.js/issues/5677\r\n\r\nwindow.XMLHttpRequest is not always available in IE8 despite it not running in quirks mode, in which case Angular should be using the ActiveXObject instead. '
5678,'IgorMinar','docs(document): so it looks better\n'
5674,'petebacondarwin','Add precision for currency filter\nDepends on #5672. \r\n\r\nThis adds the fractionSize parameter to the currency filter. \r\n\r\nFor some, the common fractionSize of 2 needs to be overridden in certain scenarios.  \r\n\r\nExample: gas pricing in the US where the price is actually accurate to 3 decimal places.'
5672,'petebacondarwin','Bug: Fix precision for currency to use local specification\nCurrency improperly forces the precision to 2 decimal places for all currency formmating, overriding the locale settings.\r\n\r\nPull request restores the intended functionality to apply the local based precision values.'
5671,'btford','improve <script type="text/ng-template"> docs\nhttp://docs.angularjs.org/api/ng.directive:script is broken:\r\n* the demo is floating above the demo box\r\n* the displayed demo code is incomplete\r\n\r\nIt would also be nice if "$templateCache" was a link to http://docs.angularjs.org/api/ng.$templateCache , which has some good information.\r\n\r\nThe question I came to the page with was: how do I specify an in-page template for my directive? The answer is templateUrl: \'id_of_script_tag_here\', which I found by outside examples and guessing. (I thought it would be template: \'id_of_script_tag_here\'.)\r\n'
5670,'IgorMinar',"Filter called twice\nHey guys\r\n\r\nThe filters in 1.2.X versions has been called twice.\r\n\r\nI am not sure but I think it is an issue because when I use the Angular 1.1.X version, this behavior doesn't happen.\r\n\r\nhttp://jsfiddle.net/58HHL/\r\n\r\nYou can switch Angular version on left dropdown."
5666,'vojtajina',"fix(ngResource): restore shallowClearAndCopy properties fitlering condition\n\r\nChange the way properties are fitlered to create a resource from a\r\nJavaScript Object.\r\n\r\nin angular version >= 1.2.6 properties of a resource with a name\r\nbeginning by a single '$' were fitlered from the created resource.\r\nProblem cames from the upgrade of the condition to filter properties that\r\nhave a '$$' prefix in the shallow copy. See commit cb29632.\r\n\r\nRestore the behavior ngResource had in angular 1.2.5 and inferior\r\nversions."
5665,'vojtajina',"$ prefixed properties sended from the server are filtered in the ngResource ver >= 1.2.6\nSome of my resources, retrieved from the server, has some '$' prefixed properties. With angular >= 1.2.6 those properties are filtered when the resource is requested against the server (I think it might occurs on the shallowClearAndCopy function). \r\n\r\nI know using '$' prefixed properties is not a good idea as they have a specific signification for angular, but what can I do when the server is using and sending those properties ? \r\nIs there a real interest in filtering those properties when the resource is created ? "
5662,'tbosch','refactor currentSpec to work for Jasmine 2\nAddresses #5632\r\n\r\nhttps://github.com/angular/angular.js/issues/5632'
5657,'tbosch','Fixed typo from HMTL to HTML in line 283\nHTML was mis-spelt as HMTL'
5656,'IgorMinar',"test(input): minlength test cases\nAre these assertions correct? I'm adding new tests to minlength/maxlength, and the minlength one is failing. Should it be failing?"
5651,'IgorMinar','Fix a typo in i18n.ngdoc\nThis PR fixes a simple typo in i18n.ngdoc.'
5648,'petebacondarwin','Broken example code: api/ng.directive:script\nbecause of #2820 we have the following problem in docs:\r\n\r\nhttp://docs.angularjs.org/api/ng.directive:script\r\n\r\nThe content of `index.html` is being truncated:\r\n\r\n```html\r\n<!doctype html>\r\n<html ng-app>\r\n  <head>\r\n    <script src="http://code.angularjs.org/1.2.7/angular.min.js"></script>\r\n  </head>\r\n  <body>\r\n    <script type="text/ng-template" id="/tpl.html">\r\n      Content of the template.\r\n\r\n    <!-- MISSING CONTENT HERE -->\r\n\r\n  </body>\r\n</html>\r\n```'
5647,'tbosch','docs(forms): show directive name instead of link path\n'
5646,'matsko',"Make ngAnimate work as closely as possible to natural CSS transitions\nNgAnimate and natural CSS transitions are not 1-1 in terms of behaviour (yet), but this fix brings 1.2 to work alongside natural CSS transitions much better. With 1.3 the API will be changed so things are more fluid, but this fix should handle a good amount of the class-based bugs that are appearing in ngAnimate.\r\n\r\nLong story short, if you remove ngAnimate from your application it should perform the exact same for CSS-based transitions and keyframe animations triggered by $animate.addClass and/or ngClass.\r\n\r\nCloses #5588 \r\nCloses #5191\r\n\r\nHere's an example of what should happen:\r\n\r\n\r\nNatural CSS animations without ngAnimate\r\nhttp://jsfiddle.net/7vk7p/3/\r\n\r\nAnd this is how it is expected to be with ngAnimate\r\nhttps://s3.amazonaws.com/angularjs-dev/ng-animate-race-condition-fix/example/animate.html\r\n\r\nThis is how it currently is:\r\nhttp://jsfiddle.net/7vk7p/2/"
5644,'tbosch','style(inputSpec): fixed typos\n'
5643,'IgorMinar',"refactor(input): wrapped validation logic in helper function\nI feel this makes the code more readable, but I suppose that's debatable. It cuts 476b off `.min` and 72b off `.min.gz`\r\n\r\nAlso included:\r\n\r\nI moved `var min = parseFloat(attr.min);` and `var max = parseFloat(attr.max);` out of their validation function, since they only need to be evaluated once.\r\n\r\nI renamed the regex helper function form `validate` to `validateRegex` and moved it inside the if block that uses it.\r\n\r\nIf you'd like these split up into separate PR's I can do that.\r\n"
5642,'IgorMinar','changed capitalization to improve readability\nIn order to improve readability from "Is set" (confused on my screen as \'Ls set\') updated the capitalization describing the setting of 4 CSS classes.'
5641,'IgorMinar',"docs: fix the 'view source' button for snapshots\nthis potentially breaks every time the format of gruntUtil.getVersion().full changes\r\n\r\nfixes #5590"
5639,'IgorMinar','docs(Attributes): fix a typo\n'
5637,'IgorMinar',"refactor(filterFilter): simplify code by a ternary op instead of if-else\n- use only one IIFE and a ternary op in it, instead of invoking separate IIFEs in if-else\r\n(this also completely fixed the same issue closed by PR #3597)\r\n- also add a spec to verify usage of '$' property in expression object (e.g. `{$: 'a'}`)"
5636,'IgorMinar','fix($http): return responseText on IE8 for requests with responseType set\nCloses #4464\r\nCloses #4738'
5631,'IgorMinar',"refactor(filterFilter): simplify code by a ternary op instead of if-else\n- use only one IIFE and a ternary op in it, instead of invoking separate IIFEs in if-else (this also completely fixed the same issue closed by PR #3597)\r\n- also add a spec to verify usage of '$' property in expression object (e.g. `{$: 'a'}`)"
5629,'jeffbcross','feat(select): allow multiline ng-options\nThis patch allows the ng-options value of a <select> element to span\r\nmultiple lines, which would previously throw an error when used with filters.\r\n\r\nCloses #5602'
5627,'matsko','Doc pages for services with providers should have link to the provider from the service page\nright now going from $parse to $parseProvider is very non-intuitive.'
5624,'IgorMinar','style($httpBackend): fix typo\n'
5622,'IgorMinar',"docs(ngRepeat): add info about aliasing special properties of ngRepeat\nThis will safe peoples' time, since ngRepeat's docs, not ngInit's, is the first place where one would search for such info."
5621,'IgorMinar',"chore(package.json) typo in release name\nThere's a trailing space"
5620,'matsko',"$animate.addClass difficulties and / or glitches\nhttp://plnkr.co/edit/CGgL13QsEwnwv9D1shG1?p=preview is an example of the reason for this --- it's very hard to have different animations for the showing and hiding of the content, and causes some glitches.\r\n\r\nFor my use case, I don't want to remove nodes from the DOM, so ng-switch or ng-if are not really applicable (it's important, otherwise I end up losing playback position of media content).\r\n\r\nIf there's a way to get the $animate.addClass behaviour to behave similarly to $animate.enter/leave, that would be great.\r\n\r\nI'm not totally sure where to poke at that though, and it's entirely possible that I'm getting this wrong due to not being a CSS guru. But if there is a good way to do this for addClass, it should probably be included in the documentation.\r\n\r\nLet me know if I'm being a complete idiot here :> This issue probably only really applies to ngShow/Hide, due to their use of the ng-hide class which seems to cause this issue."
5619,'tbosch',"ngRepeat comments breaks drag & drop between jquery-ui sortables\nHello!\r\n\r\nI have an app which uses ngRepeat inside connected jquery-ui sortables and I'm getting some strange behaviour after 1.2.0. As far as I know it should happen in all browsers and OS.\r\n\r\nThere were a couple of issues open about this, but they were all in some way or another related to ngAnimate (#4786, #4954 and #5054). Even though I'm also having those issues, I'm having problems even after I strip all ngAnimate code.\r\n\r\nI've made a Plunker to demonstrate the issue:\r\n\r\nhttp://plnkr.co/edit/BVpHl8iZyKfI4snvrafR?p=preview\r\n\r\nI've found the cause of this behaviour to be the `<!-- end ngRepeat ...` comments added in 9efa46a. The root of the problem being (I think) that when you drag and drop you are not moving the corresponding end comment.\r\n\r\n@matsko wrote about this in #5054:\r\n\r\n> Alright so I finally got at this. Turns out you're moving around the elements using your own DOM code. This basically makes the repeater results and the DOM results out of sync and ngRepeat uses multiple comment anchors ontop of each list element to keep track of where they are. Then when ngAnimate runs, it doesn't know if it is dealing with a comment node or the element node. As a best practice, you don't want to do your own DOM stuff. Use a orderBy in your repeater and provide a scope function to handle the sorting (look at http://stackoverflow.com/questions/12040395/angularjs-custom-sort-function-in-ng-repeat#answer-12041694). If you really wanted do your own DOM sorting yourself then you might be able to get this to work by moving the comments around too, but don't do that :P\r\n\r\nI'm not sure if this reply was addressing an issue like this, but if I were to try to do this I'll lack the drag & drop functionality.\r\n\r\nSo, I wanted to know if we should consider this a bug (and try/wait for a fix) or we should adapt our code to work with this behaviour. In the latter case, any advice in how to do it is appreciated because I really have no idea at this point :).\r\n\r\nAlso, seems like the folks at angular-ui/ui-sortable#64 and mostr/angular-ui-multi-sortable#12 are having similar issues.\r\n\r\nThanks for the great work! \r\n"
5617,'matsko','fix($compile): retain CSS classes added in clone fn on async directive\nIn synchronous directives (without a templateUrl), classes added to the node  during the clone attach function persist in the post-link function.\r\n\r\nBefore this patch, classes addedd to asynchronous templates during the clone  attach function would not persist after the node is replaced with the template prior to linking.\r\n\r\nFixes #5439'
5616,'IgorMinar','fix($httpBackend): cancelled JSONP requests should not throw error\nWhen you cancel a JSONP request, angular deletes the callback for it. However the script still executes, and since the callback is now deleted and undefined, the script throws an exception visible in the console. The quick fix for this is not to delete the callback, but replace it with `angular.noop`.\r\n\r\nCloses #5615'
5615,'jeffbcross',"Aborted JSONP request prints an error in the console\nWhen you cancel a JSONP request, angular deletes the callback for it. However the script still executes, and since the callback is now deleted and undefined, the script throws an exception visible in the console. Here's a demo of what happens: http://plnkr.co/edit/AlFoOUQ5P6sTgfb4SE0A?p=preview\r\n\r\nThe quick fix for this would be not to delete the callback, but replace it with `angular.noop`. The PR with this change is on the way.\r\n\r\nThe better fix would be to investigate why the script executes even after being removed from DOM and tell him not to."
5609,'IgorMinar',"feat(Attributes): added support for attributes observing deregistration\nIn order to make the behavior compatible with [$rootScope.$watch()](http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$watch) and [$rootScope.$on](http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$on) methods, and\r\nmake it possible to deregister an attribute observer, Attributes.$observe method now returns a\r\nderegistration function instead of the observer itself.\r\n\r\nBREAKING CHANGE: calling attr.$observe no longer returns the observer function, but a\r\n    deregistration function instead.\r\n\r\n    To migrate the code follow the example below:\r\n\r\n    Before:\r\n\r\n    directive('directiveName', function() {\r\n      return {\r\n        link: function(scope, elm, attr) {\r\n          var observer = attr.$observe('someAttr', function(value) {\r\n            console.log(value);\r\n          });\r\n        }\r\n      };\r\n    });\r\n\r\n    After:\r\n\r\n    directive('directiveName', function() {\r\n      return {\r\n        link: function(scope, elm, attr) {\r\n          var observer = function(value) {\r\n            console.log(value);\r\n          };\r\n\r\n          attr.$observe('someAttr', observer);\r\n        }\r\n      };\r\n    });"
5608,'matsko','chore(docs): intelligently prepare short summaries for module components\n'
5606,'IgorMinar','fix($browser): remove base href domain when url begins with \'//\'\nThis change prevents an incorrect appBase url from being calculated when the\r\n<base> href\'s domain begins with \'//\'.\r\n\r\nRelated to #5292, tangentially.\r\n\r\nI don\'t know for sure if this is the correct behaviour, but it doesn\'t seem\r\ntotally unreasonable.\r\n\r\nBefore this change, if an app used `<base href="//my.domain.com/app">`, the entire href would be treated as a path, and $location would behave incorrectly, due to appending it to the initial domain.\r\n\r\nSo, that\'s a thing.'
5605,'IgorMinar','fix(ngShow/ngHide, ngIf): functions with zero args should be truthy\nPreviously, expressions that were a function with one or more arguments evaluated to true, but functions with zero arguments evaluated to false.\r\n\r\nThis behavior seems both unintentional and undesirable. This patch makes a function truthy regardless of its number of arguments.\r\n\r\nCloses #5414'
5601,'IgorMinar','XSS issues with server-rendered Angular templates\nDear Angular community,\r\n\r\nwe would greatly appreciate any comments on the issue below.\r\n\r\n**Overview of the issue:**\r\n\r\nWhen rendering Angular templates with a server-side templating engine like ERB or Haml it is easy to introduce XSS vulnerabilities. These vulnerabilities are enabled by AngularJS evaluating user-provided strings containing interpolation symbols (default symbols are `{{` and `}}`).\r\n\r\nThe standard mitigation strategy by templating engines is to always escape meaningful symbols in strings (unless they are explicitely marked as "safe"). Unfortunately the inability to escape AngularJS interpolation symbols makes it hard to apply this strategy here.\r\n\r\n\r\n**Reproducing the issue:**\r\n\r\nWe are using AngularJS for the frontend and Rails in the backend. While we have written full Single Page Applications with AngularJS, we are often embedding small snippets of AngularJS in server-rendered views. We love that AngularJS lets us replace jQuery spaghetti with simple code like this:\r\n\r\n```\r\n<div ng-show="detailsShown">\r\n  <%= user.profile %>\r\n</div>\r\n\r\n<span ng-click="detailsShown = true">Show details</span>\r\n```\r\n\r\nThe problem is that the code snippet above enables Cross Site Scripting (XSS). If the server-parsed expression `user.profile` contains AngularJS markup like `"Foo {{signOut()}} Bar"`, it will trigger functions on the current scope, allowing an attacker to trigger side effects on another computer.\r\n\r\n\r\n**Proposed fix:**\r\n\r\nThe standard mitigation strategy by templating engines is to always escape symbols that have meaning for downsteam parsers, unless they are explicitely marked as "safe". E. g. if the server-parsed expression `user.profile` in the code example above would yield the string `"Foo <script>alert(\'owned\')</script> Bar"`, Rails, Haml, etc. would automatically replace the angle brackets with HTML entities.\r\n\r\nTo allow HTML tags to be rendered without escaping, the developer needs to explicitely mark a string as "safe" like so:\r\n\r\n    <%= user.profile.html_safe %>\r\n\r\n(AngularJS actually uses this approach itself, when inserting the results of an evaluated Angular expression into the DOM.)\r\n\r\nA good default for people rendering Angular templates using server-side templating engines would be to make templating engines automatically escape Angular interpolation symbols unless an evaluated string is explictely flagged as "safe". A patch for engines like ERB or Haml would be easily created, but unfortunately Angular\'s `$interpolate` service does not recognize any kind of escape symbol.\r\n\r\nWe propose that the `$interpolate` service should recognize escaped interpolation symbols like this:\r\n\r\n    Foo \\{\\{signOut()\\}\\} Bar\r\n\r\n... or maybe a second pair of start/end symbols.\r\n    \r\nWhen encountering escaped interpolation symbols, the service would *not* evaluate the enclosed expression. Instead it would strip the escape symbols from the string.\r\n\r\n(Note that we first tried to replace the curly braces with their HTML entities, which would have the added bonus of being output-neutral outside of an `ng-app` element. However, entitized braces are still recognized and their contents evaluated by Angular. We\'re not sure if the entities are expanded by Angular or by the browser.)\r\n\r\n\r\n**Plea to not dismiss this issue**\r\n\r\nWe understand that this issue is not an actual bug in AngularJS, but (like all XSS issues) is caused by combining multiple technologies that are unaware of each other. Still we believe that AngularJS\' ability to co-exist with non-Angular code in the same DOM is one of AngularJS greatest strengths. It sets Angular apart from frameworks like Ember, which need to own the entire page.\r\n\r\nBy offering a way to escape interpolation symbols (or maybe some other solution we didn\'t think of), AngularJS could be used safely in combination with upstream templating engines.\r\n\r\nWhat do you think?\r\n'
5599,'IgorMinar','Fix typo\n'
5598,'IgorMinar','fix(ngRepeat): allow for more flexible coding style in ngRepeat expression\nCloses #5537'
5596,'vojtajina',"Keeping BrowserStack's username/access key encrypted in travis.yml\nHi,\r\n\r\nCan you please update travis.yml to keep BROWSER_STACK_USERNAME & BROWSER_STATCK_ACCESS_KEY encrypted. In order to encrypt them you need to install travis gem and then from angular.js root folder run following commands:\r\n\r\n>> travis encrypt BROWSER_STACK_USERNAME=VojtaJin --add env.global\r\n>> travis encrypt BROWSER_STACK_ACCESS_KEY=<your access key> --add env.global\r\n(For reference, please refer: http://about.travis-ci.org/docs/user/build-configuration/)\r\n\r\nFinally just remove BROWSER_STACK_USERNAME AND BROWSER_STACK_ACCESS_KEY from travis.yml\r\n\r\nI can't submit a pull request for this change, since public key of my fork will differ from yours. So please kindly consider this issue and encrypt the sensitive information in travis configuration file.\r\n\r\nRegards,\r\nAkshay Bhardwaj\r\nBrowserStack"
5593,'matsko','docs($compile): Avoid all-caps for the attribute names of directive definition object\nThe page http://docs.angularjs.org/api/ng.$compile lists the attributes of the directive definition object such as “priority”, “terminal”, and “scope”.  However, because of the stylesheets applied to the page, the attribute names are shown incorrectly in all-caps.  This is particularly problematic with the attribute names where uppercase and lowercase letters are mixed, such as “controllerAs”.'
5592,'IgorMinar','fix($parse): fix CSP nested property evaluation, and issue that prevente...\n...d its tests from failing\r\n\r\ncspSafeGetterFn incorrectly returned undefined if any of its key parameters were undefined. This\r\nwasn\'t caught by the $parse unit tests because of a timing problem where $ParseProvider was reading the CSP flag before the tests manually set it, so the CSP property evaluation tests never ran. Add\r\ntest that verifies evaluation of nested properties of multiple lengths.\r\n\r\nFixes <a href="https://github.com/angular/angular.js/issues/5591">#5591</a>'
5591,'IgorMinar','Nested property expressions evaluate incorrectly in CSP mode\n<a href="http://jsfiddle.net/drN3d/5/">jsfiddle</a>\r\n\r\nThe property expression of length 3 evaluates correctly when not in CSP mode, as you can see by removing the data-ng-csp attribute in the fiddle. Pull request with fix coming shortly.'
5589,'caitp',"Transclude function causes memory leaks\n### Description:\r\nThe transclude function inside a directive does not dispose of the DOM element when the scope is destroyed. Therefore, jQuery's `$.cache` will get bigger and bigger on each re-rendering of the directive, eventually freezing the browser. This phenomenon presents itself very quickly if the application constantly re-renders the directive, for instance in the case of an 'auto refresh' mechanism.\r\n\r\n### Steps to reproduce:\r\nA reproduction of this issue can be found in the following plunkrs:\r\n\r\nUsing angular-1.2.6: http://plnkr.co/edit/0qoICT\r\n\r\nUsing the latest angular-1.2.7: http://plnkr.co/edit/wbr8G7\r\n(angular-1.2.7 src: https://raw.github.com/angular/bower-angular/master/angular.js) \r\n\r\nYou will see in the console.log that 'jQuery cache length' (`Object.keys($.cache).length`) keeps on growing\r\n\r\n### Resolution: \r\nTo resolve the issue,  we add the following code inside the transclude function:\r\n\r\n    scope.$on('$destroy', function() {\r\n        clone.remove();\r\n    });\r\n\r\nplunkr with solution: http://plnkr.co/edit/98HwjQ\r\n\r\n### Expected result:\r\nI believe the removal of the transcluded DOM elements when the scope is destroyed should happen automatically by angular.js, unless the user specified otherwise.\r\n\r\n\r\n\r\nDiscovered by myself and @urish\r\n          "
5588,'matsko',"1.2.6 ng-animate: doesn't transition when a 2nd transition is triggered\n**[jsfiddle](http://jsfiddle.net/7vk7p/2/)**\r\n\r\nAngularjs 1.2.6 scenario: 2 inputs, 1 textbox (sounds kinda dirty). The inputs both trigger a show / hide transition on blur / focus events and focus always comes after blur if click from one input to another. Even the text binding shows the proper current state (info.show = `true` or `false` based on these focus / blur events).\r\n\r\n**Without ngAnimate it works perfect**. When ngAnimate is added as dependency, transitions stop working properly. In the jsfiddle, simply remove ngAnimate (leaving an empty array) and it works just fine.\r\n\r\nJust click on one input: textbox fades in. Now directly click the other input: text updates properly, but box still fades out."
5587,'IgorMinar','ng-repeat behaves weirdly if angular is accidentally loaded twice or more\nThe app below demonstrates how ng-repeat will square, cube, etc. the number of items in a table depending on how many times angular.js is loaded in the page.\r\n\r\n    <html ng-app="brokentable">\r\n    <head>\r\n\t    <title>Broken Angular Table</title>\r\n      <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.6/angular.min.js"></script>\r\n      <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.6/angular.min.js"></script>\r\n      <script>\r\n        if (!window.angular) {\r\n          document.write(\'<script src="angular.min.js"><\\/script>\');\r\n        }\r\n      </script>\r\n      <script type="text/javascript">\r\n\t\t    var app = angular.module(\'brokentable\', []);\r\n\r\n\t\t    app.controller(\'BrokenTable\', function($scope) {\r\n\t\t\t    $scope.headings = [\'One\', \'Two\', \'Three\'];\r\n\t\t\t    $scope.fillings = [[1, 2, 3], [\'A\', \'B\', \'C\'], [7, 8, 9]];\r\n\t\t    });\r\n      </script>\r\n    </head>\r\n    <body ng-controller="BrokenTable">\r\n\t    <table>\r\n        <tr>\r\n          <th ng-repeat="heading in headings">{{heading}}</th>\r\n        </tr>\r\n        <tr ng-repeat="filling in fillings">\r\n      \t  <td ng-repeat="fill in filling">{{fill}}</td>\r\n        </tr>\r\n      </table>\r\n    </body>\r\n    </html>\r\n'
5585,'tbosch','Why is sorting by keys forced on objects being iterated?\nThis is highly annoying "feature" and requires extra lines of code to overcome.\r\nExample:\r\n\r\nI\'m getting a JSON object from the database, I want to display the way I got it. To do it with angular, I\'ll either need to restructure it to (make it an array, or change the keys). Which is only half of the problem - if I want to change the JSON I got from my DB, and save it, I will need to transform the new angular-friendly array/object to it\'s original form before I can save it.\r\n\r\nThus i need to maintain two structures for the same data. This does not seem like "the angular way" to me.'
5584,'btford','docs(tutorial/step-11): fix typo\n'
5583,'vojtajina',"Partial $digest for scope subtree\nI think it could be useful to have a possibility not to perform the overall $digest loop, but only on the specific scope subtree when some watchers are triggered. OFC optionally and on developer's own risk, when he does know exactly which scopes are affected by the change and which are not."
5582,'matsko','ng-repeat and ng-class in the same element gets animation broken ver. >= 1.2.6\nWhen i use ng-repeat and ng-class in the same element, ng-enter-active and ng-enter classes appear at the same time which causes animation broken. It was working on 1.2.5 but not in 1.2.6 and after.\r\n\r\nIn the plunker code i used ng-class-even to show 2 different states but the problem is also available in ng-class and ng-class-odd.\r\n\r\nThis is the plunker code: http://plnkr.co/edit/J7NcqarO4CbBpWlWJCVk?p=preview'
5580,'IgorMinar',"fix($location): ensure $locationChangeStart broadcast during $digest\nI'm not totally convinced this is a necessary change (see comments on #5118).\r\n\r\nHowever, feedback valuable. I'll amend this message if it becomes clear that \r\nit's a worthwhile change.\r\n\r\nCloses #5118\r\nCloses #4989"
5578,'jeffbcross','fix($rootScope): prevent infinite $digest loop by also checking if asyncQueue is empty when decrementing ttl\nAn infinite $digest loop can be caused by expressions that invoke a promise. The problem is that $digest does not\r\ndecrement ttl unless it finds dirty changes; it should check also if asyncQueue is empty.\r\nGenerally the condition for decrementing ttl should be the same as the condition for terminating the $digest loop.\r\n\r\nCloses #2622'
5577,'IgorMinar','fix($injector): remove INSTANTIATING entry when done.\ngetService flags services as INSTANTIATING while it calls their\r\nprovider factory, in order to detect circular dependencies. If\r\nthe service is instantiated correctly, the INSTANTIATING flag is\r\noverwritten with the actual service. However, if the service is\r\nnot instantiated correctly, the INSTANTIATING flag should still\r\nbe removed, or all further requests for this service will be\r\nmis-detected as a circular dependency.\r\n\r\nCloses #4361.'
5575,'matsko',"perf: safeAddClass in compile.js\nThis strikes me as not being really necessary. For one thing, classes seem to be writable in most instances (http://jsfiddle.net/UejrN/ shows classList.add() working for every SVG node type, for instance...)\r\n\r\nThere may be some cases where nodeList is null/undefined, in which case a simple solution would be to just say `if (node.nodeList) node.nodeList.addClass(...)`, if jqLite doesn't do this already.\r\n\r\nSo, I realize that IE9 does not support classList, and it would have to work differently in that case, but regardless I'm fairly sure we can get around this without needing potentially expensive try/catch.\r\n\r\nThis doesn't matter much for the bootstrap compilation, but it might matter a lot when $compile is being used frequently. Could possibly speed up compile-time by a few dozen MS"
5574,'matsko','Form $attempted status\nA contribution to issue #583'
5571,'matsko','refactor(animate): remove duplicate line\n'
5566,'tbosch','MathJax does not renders in AngularJS\nI have several formulas in a html-file which I want to render with MathJax. It works correctly when I refresh a page, but it does not render the formula when I am switching to another view with #/view'
5561,'matsko',"ngRepeat and ngIf introduces comment nodes into animations ($animate)\nUpdate: #5570 attempts to introduce a 4th option, to call performAnimation on each node.\r\n\r\nPlunker that demonstrates the issue (see error in console after clicking the button): http://plnkr.co/edit/ncQSgi4Y44P3ZyYM04Wv?p=preview\r\n\r\nCurrently, ngRepeat and ngIf directives add a comment node after the inserted content. As such, the enter animation contains this comment node.\r\nThis violate the [Principle of Least Astonishment](http://en.wikipedia.org/wiki/Principle_of_least_astonishment) as a user of the directive would only expect the animation to contain the element(s) that they added.\r\n\r\nI see three possibilities from here (note these possibilities aren't mutually exclusive):\r\n  1. Modify $animate documentation to indicate that the enter animation is called with `contents` rather than `element`.  \r\nAt least users will know to expect that it will be called with non-elements. This is similar to the distinction between jQuery's `contents()` vs `children()`.\r\n  2. ngRepeat and ngIf shouldn't call animation on those additional comment nodes.  \r\nNo animation can occur on those nodes, anyway.\r\n  3. Add an animation method that explicitly supports multiple nodes/elements say `$animate.multiEnter`, and this method will call `$animate.enter` with one element at a time and only fire the done callback of the `multiEnter` when all have elements have animated.  \r\nI noticed that the $animate.enter is only animating the whole ngRepeat block with the first element node that it finds. This means that if there were multiple elements with  different elements in the ngRepeat, the animations won't run as expected.  \r\nSimilar to option 1, the multiEnter parameters will need to explicitly indicate that the first argument is contents rather than element.\r\n\r\nNote: When going for option 1 or 3, it's a good idea to add a `filter` method in jqLite that supports only tagNames, so users can simply do `contents.filter('*')` to filter the contents for element nodes. This way, users can apply css method without worry for an exception thrown when calling the css method on a comment node.\r\n\r\nIn my exploration into this issue, I noticed that ngRepeat can be written so that it doesn't use comment nodes (I'm aware of #3104). ngRepeat can actually read up to the next block and decide that everything between is part of the current block. However, this adds unneeded complexity to the code and isn't a good solution, I feel, as it assumes that the first element of the next block is the start of the next block (which may not be the case if a directive decides to change that by adding an element *before* it).\r\n\r\nI can work on a PR but I just wanted to put this issue up so that someone can look at it and perhaps tell me if there is something in the works that will nullify any of these solutions (with perhaps a better solution).\r\n\r\nRelated to #4786 , #4157 ."
5554,'IgorMinar','Tag 1.2.6 does not exist.\nTag 1.2.6 does not exist. See https://github.com/angular/angular.js/releases'
5553,'matsko','Update step_12.ngdoc\ndocs(tutorial): replaced a missing apostrophe and fixed grammar errors'
5552,'matsko','fix(ngAnimate): Unblock transitions before reflow\nI have investigated this issue: http://jsfiddle.net/2fnhr/1/\r\n\r\nFrom this question: http://stackoverflow.com/questions/20810791/angular-nganimate-causes-width-animations-to-jump\r\n\r\nCommenting the "blockTransitions" call resolves the issue. But there is a comment in the source-code justifying the need of blocking transitions. So, unblocking before reflow (as suggested in this PR) also resolves the issue.\r\n\r\nThis way or another, the issue needs to be addressed.'
5549,'petebacondarwin','Improve tracability of "$digest already in progress" error\nWe need to improve this error as it is currently very obscure and **hard to track down**.\r\n\r\nMy suggestion would be to turn it into a `$log` warning that doesn\'t throw an error but still prints a stack trace.\r\n\r\nCould we make it so that anything that would eventually trigger a `$digest` cycle check for `$$phase` at their entry point, and then have them print a warning and return?\r\n\r\nIf not, in which ways do you believe we could improve the traceability of `$digest` invocation overlaps?\r\n\r\n<sub>Refer to [this StackOverflow question](http://stackoverflow.com/q/20805534/389745 "Why doesn\'t Angular ignore subsequent $digest invocations?") for background</sub>\r\n'
5548,'matsko','Javascript animations on show/hide sometimes make state unsync\nJavascript animations on show/hide sometimes make state unsync, when events to animate happen too fast\r\n\r\njust fast click many times on checkbox in this plunk: http://plnkr.co/edit/ySVdnn2A5rGKylLWGh69\r\n\r\nAs result (can reproduce in Chrome 31.0.1650.63 m, IE 11):\r\n![image](https://f.cloud.github.com/assets/1229948/1814645/00bc67c2-6efc-11e3-9b12-c5bd1c6839bb.png)\r\n\r\n\r\nWith old animations engine (1.1.5-unstable) all works fine :-('
5547,'tbosch','Android stock browser fix for #1356\nAndroid stock browser fix for #1356'
5527,'tbosch',"Leaking $scope when method on scope references $scope itself\nWhen we have a view / child scope which is added and removed to page and in that view we have a controller that adds methods to it's scope which reference $scope in body of method like \r\n\r\n```javascript\r\n$scope.flipFlag = function(){ $scope.flag = !$scope.flag }\r\n```\r\n\r\nWhen view is destroyed the scope and all watchers on scope and anything they reference is leaked.\r\n\r\nIf instead you write method like  \r\n\r\n```javascript\r\n$scope.flipFlag = function(){ this.flag = !this.flag }\r\n```\r\n\r\nThen there seems to be no leak.\r\n\r\nMight be related to https://github.com/angular/angular.js/issues/4026\r\n\r\nReproduction can be seen at  http://plnkr.co/edit/JZbtZ13Ml1aDjNJug1gu?p=preview on top of angular 1.2.5. Originally reproduced on our application on top of angular 1.1.4.\r\n\r\nWhat we do in this reproduction is set and unset ng-include to point to a template with a controller.\r\nIn the controller we have scope method that references $scope.\r\n\r\nTo see the leak, on reproduction page, after accessing it, take a heap dump and there on summary view filter by Child constructor.\r\nYou will see that there are two scopes leaking, with ids 004 and 005, where 005 is the scope for the controller injected in the view.html and 004 is it's prototype.\r\nFrom what I can see 004 isn't released because it's held by 005 (as it's prototype).\r\nAnd 005 isn't released, well here it's not so clear, from what I can see it's not released because it has a function that has it in it's closure / scope.\r\n\r\nRunning GC several times in chrome does not remove the leaked scope.\r\n\r\nIn our application this causes the leak of the entire UI (JS and DOM) every time we switch from one view (state) to another, our app is big enough that after a few transitions we see that tab with our app reach 1GB of memory.\r\n\r\nMore verbose explanation of the issue at https://groups.google.com/d/msg/angular/5aBiuBZCzus/vJQKk9ebVGkJ\r\n\r\n\r\n"
5526,'vojtajina','Accessing current scope\'s controller instance alias from within directives?\nSay I\'ve got:\r\n\r\n```html\r\n<div ng-controller="NavCtrl as nav">\r\n    <button app-hmm>Turn Red</button>\r\n    <p ng-class="{\r\n        \'red\': nav.active\r\n    }"></p>\r\n</div>\r\n```\r\n\r\n```javascript\r\ndirective(\'appHmm\', function(\r\n){\r\n    return {\r\n        link: function(scope, element, attrs) {\r\n            foo();\r\n            bar();\r\n\r\n            /*\r\n            // I\'d like to set `nav.active = true` here without hard-coding `nav`\r\n            */\r\n        }\r\n    };\r\n})\r\n```\r\n\r\nIs there a way to do it currently? If not, perhaps add a way to retrieve the current scope\'s controller instance alias from within directives?'
5525,'IgorMinar','Removing watches from inside a watch can cause dirty watches to be skipped (regression)\nDue to recent changes that added optimization in the digest function with lastDirtyWatch\r\n if(watch === lastDirtyWatch) {....}\r\nhttps://github.com/angular/angular.js/pull/5287\r\n\r\nThe scenario\r\nduring digest , one watch was called that caused a second watch to be removed. The first watch had an index which was larger then the second watch in the watchers array so the remove shifted all the indexes to the left , and the next iteration when getting length--; watchers[length] it will return the previous watch that was already called and so the condition watch === lastDirtyWatch will be true and it breaks from the loop and miss calls to the remaining watches in the array (some which have also changed)\r\n\r\none option to solve this is to nullify lastDirtyWatch in the unregister function that is returned from $watch\r\n\r\n        return function() {\r\n          arrayRemove(array, watcher);\r\n          lastDirtyWatch = null;\r\n        };\r\n\r\nother is to defer the removal of the watcher till after the digest loop .'
5522,'IgorMinar','Update ng-sanitize to allow the size attribute\nThe "size" attribute gets set on <font> elements when using HTML5 rich text editors, or elements with the contenteditable attribute, that rely on the \'fontSize\' command (execCommand).'
5514,'tbosch',"link + compile in directive doesn't work as expected\nHere is code I'm talking about:\r\n\r\n```js\r\nmyApp.directive('compileAndLink', function() {\r\n    return {\r\n        compile: function(scope) {\r\n            console.log('compileAndLink: compile');\r\n        },\r\n        link: function(scope) {\r\n            console.log('compileAndLink: link');\r\n        }\r\n    }\r\n});\r\n```\r\n\r\nPlease take a look at live demo: http://jsfiddle.net/Jk73v/1/\r\n\r\nThe problem occurred, when I had only `link` function defined, but later on I needed and added the `compile` function. Suddenly `link` function were not called anymore.\r\n\r\nIt turned out Angular doesn't run `link` because nothing is returned from `compile`.\r\n\r\nFrom my perspective, because the `link` function is defined explicitly, and nothing is returned from `compile`, it's pretty clear that I want `link` to be the linking function. \r\n\r\nActually even if `compile` returned some function it's clear that the `link` from directive declaration should have priority, exactly because it's defined explicitly.\r\n\r\nCurrent behaviour:\r\n\r\n```coffee\r\nif directive.compile\r\n  directive.link = directive.compile()\r\n# later on...\r\nif directive.link\r\n  directive.link()\r\n```\r\n\r\nThe behaviour I expected:\r\n\r\n```coffee\r\nif directive.compile\r\n  link = directive.compile()\r\n  directive.link = link unless directive.link\r\n# later on...\r\nif directive.link\r\n  directive.link()\r\n```"
5507,'petebacondarwin',"feat($rootScope): adds $onRootScope method\nThis adds an $onRootScope method to the\r\nscope type. This allows developers to use\r\n$rootScope.$emit + $scope.$onRootScope as\r\na fast eventBus which doesn't use scope\r\nbubbleing.\r\n\r\nFixes #4574, Relates to #5371"
5503,'IgorMinar','Add input:file support (feature request for 1.3)\nthat would be great and much needed'
5498,'vojtajina',"Karma configuration not correct on Windows in Tutorial\nIn http://docs.angularjs.org/tutorial says to install Karma globally using the -g flag:\r\n```\r\nnpm install -g karma\r\n```\r\n\r\nBut then in http://docs.angularjs.org/tutorial/step_02 the test script looks for for karma in the local node-modules and fails\r\n```\r\nIn a separate terminal window or tab, go to the angular-phonecat directory\r\nand run ./scripts/test.sh to start the Karma server (the config file necessary\r\nto start the server is located at ./config/karma.conf.js).\r\n```\r\n\r\nHere's the error:\r\n\r\n```\r\n./scripts/test.sh: line 9: ./scripts/../node_modules/karma/bin/karma: No such file or directory\r\n```\r\n\r\nThe offending command in the script is \r\n```\r\n$BASE_DIR/../node_modules/karma/bin/karma start $BASE_DIR/../config/karma.conf.js $*\r\n```\r\n\r\nHowever, since I installed karma globally, it was an easy fix, changing that line in the script to \r\n```\r\nkarma start $BASE_DIR/../config/karma.conf.js $*\r\n```\r\n\r\nFwiw, if I had installed karma locally, the script probably would have worked.  In any case, it might be an improvement if the karma install and the karma invocation were in sync."
5496,'vojtajina','Update http.js\nMoved a semicolon.'
5491,'IgorMinar','feat(scope/timers): add $timeout and $interval methods to scope\nIntervals and timeouts created with scope’s methods will be automatically destroyed\r\nwhen the scope is destroyed, thus preventing memory leaks.\r\n\r\nIf controllers and directives use scope.$interval and scope.$timeout instead $interval and $timeout, there is a lower risk of memory leaks, as there is no need to remember to cancel the promises of the timers.\r\n\r\nThis is not extrictly needed but may be useful.'
5490,'vojtajina','onhashchange event is not dispatched.\nI added below code to angular-phonecat.\r\n\r\nwindow.onhashchange = function() {\r\n    alert(\'onhashchange\');\r\n};\r\n\r\nWhen I clicked a link and change hash, but alert did not display.\r\n\r\nex)\r\n1. I clicked a link "Motorola XOOM™ with Wi-Fi"\r\n2. Change url "localhost:8000/app/index.html#/phones" -> "localhost:8000/app/index.html#/phones/motorola-xoom-with-wi-fi"\r\n3. Alert window did not display.\r\n\r\nBut when I clicked browser(Chrome)\'s "Back", \r\nurl changed "localhost:8000/app/index.html#/phones/motorola-xoom-with-wi-fi" -> "localhost:8000/app/index.html#/phones",\r\nalert displayed.\r\n\r\nWhat are these differences? \r\n\r\nI use Angular v1.2.\r\n\r\nBest regards.'
5488,'IgorMinar',"docs(guides/directive): add (') to contraction\nadd apostrophe (') to contraction"
5487,'IgorMinar','Allow automatic rewriting of links to be disabled in ngLocation\nCurrently, when the location provider is set to html5 mode, all links\r\non the page are hijacked and automatically rewritten. While this may be\r\ndesirable behavior in some cases (such as using ngRoute), not all cases\r\nwhere html5 mode are enabled imply the desire for this behavior.\r\n\r\nOne example would be an application using the\r\n[ui-router](https://github.com/angular-ui/ui-router) library, with some\r\npages that exist outside of angular. Links that are meant to go through\r\nthe router use the `ui-sref` directive, so the rewrite behavior is\r\nunnecessary.\r\n\r\nThis adds the ability to disable the behavior by calling\r\n\r\n```javascript\r\n$locationProvider.rewriteLinks(false);\r\n```\r\n\r\nFor backwards compatibility, the default value of this option is `true`'
5483,'tbosch','Add support for event delegation to jqLite.on\nIn addition to querySelectorAll support in find, it would be very convenient to leverage matchesSelector in order to have event delegation (filter and is would also be useful and fairly trivial).'
5479,'petebacondarwin',"ngAttr* directive issue with `href` attribute in IE\nThis fixes an issue where any form of `ng-attr-href` directive wasn't correctly processed in IE.\r\n\r\nI am not sure why there was the special IE condition for the href attribute but `node.getAttribute(name, 2)` doesn't make any sense since it's trying to fetch the binding value from the attribute we are actually trying to populate.\r\n\r\nI have removed the special case handling and every unit tests are still passing.\r\n\r\n[Issue Plunkr](http://plnkr.co/edit/b1bqBRdfK904xG77BNej?p=preview)\r\n\r\n"
5478,'tbosch','Fix IE8 problems in `$log` and general startup\nFixes #5400. Fixes #5147.'
5475,'IgorMinar','Update angular.js - adding $watchCollection\n'
5473,'vojtajina',"Unknown provider: $$sanitizeUriProvider after upgrading to 1.2.6\nUpgraded from `1.2.4` to `1.2.6` via a `bower update` and my app now fails to load with:\r\n\r\n```\r\nUncaught Error: [$injector:unpr] Unknown provider: $$sanitizeUriProvider <- $$sanitizeUri <- $sanitize <- $sceDelegate <- $sce <- $interpolate <- $compile\r\n```\r\n\r\nHere's the module definition:\r\n\r\n```javascript\r\nangular.module('myApp',\r\n               ['ngSanitize', 'ngAnimate', 'ui.ace', 'ui.bootstrap', 'angular-growl'])\r\n```\r\n\r\nNot immediately clear what's going on here ... any ideas?"
5472,'IgorMinar',"fix($location): parse xlink:href for SVGAElements\nBefore this fix, the xlink:href property of an SVG `<a>` element could not be parsed on click, as the property is an SVGAnimatedString rather than a DOMString.\r\n\r\nThis patch parses the xlink:href's animVal into a DOMString in order to prevent an `Object #<SVGAnimatedString> has no method 'indexOf'` exception from being thrown, and also to update the location if necessary as expected.\r\n\r\nFixes #5198, #5199, #4098, #1420"
5471,'IgorMinar',"perf(compile): add class 'ng-scope' before cloning, other optimizations\nperf(compile): add class 'ng-scope' before cloning and other micro-optimizations\r\n\r\nAdd class ng-scope to dom nodes during directive compile rather than link.\r\nOptimize handling of nodeLists.\r\nThis results in a savings of about 130ms during the startup of a product within Google."
5470,'vojtajina','inline templates not loading and no errors\n```html\r\n<!doctype html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <title>Angularjs Example</title>\r\n</head>\r\n<body ng-app="exampleApp">\r\n    <div>\r\n        <div>\r\n            <ul>\r\n                <li><a href="#/">Index</a></li>\r\n                <li><a href="#/increment">Increment</a></li>\r\n                <li><a href="#/conventional">Conventional</a></li>\r\n           </ul>\r\n        </div>\r\n        <div ng-view></div>\r\n    </div>\r\n    <script src="http://code.angularjs.org/1.2.5/angular.min.js"></script>\r\n    <script src="http://code.angularjs.org/1.2.5/angular-route.min.js"></script>\r\n    <script type="text/ng-template" id="increment.html">\r\n        <div>\r\n            <div>x: <span ng-model="x"></span></div>\r\n            <div>y: <span ng-model="y"></span></div>\r\n            <button ng-click="increment()">Increment</button>\r\n        </div>\r\n    </script>\r\n    <script type="text/ng-template" id="conventionalPage.html">\r\n        <p>Welcome to the <span ng-model="pageName"></span></p>\r\n    </script>\r\n    <script>\r\n        var App = angular.module("exampleApp", [\'ngRoute\']);\r\n        \r\n        App.controller(\'IncrementController\', [\'$scope\', function($scope) {\r\n            $scope.x = 1;\r\n            $scope.y = 2;\r\n            \r\n            $scope.increment = function() {\r\n                $scope.x += 1;\r\n                $scope.y += 1;\r\n            };\r\n        }]);\r\n        \r\n        App.controller(\'ConventionalPageController\', [\'$scope\', function($scope) {\r\n            console.log("ConventionalPageController");\r\n            $scope.pageName = "ConventionalPage";\r\n        }]);\r\n        \r\n        App.config(function ($routeProvider, $locationProvider) {\r\n            $routeProvider.\r\n            when(\'/\', {\r\n                template: \'<p>Welcome to the Index</p>\',\r\n            }).\r\n                \r\n            when(\'/increment\', {\r\n                templateURL: \'increment.html\',\r\n                controller: \'IncrementController\'\r\n            }).\r\n            when(\'/conventional\', {\r\n                templateURL: \'conventionalPage.html\',\r\n                controller: \'ConventionalPageController\'\r\n            });\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\nIm not getting any errors in the console and the inline templates aren\'t being displayed. The controller functions are not called as well. Note that my controller functions do run if I use a template string instead.'
5469,'vojtajina','ngIf in select doesn\'t update model\n```\r\n<select ng-if="!treeChanged" ng-change="reloadTree(selectedTypeId)" ng-model="selectedTypeId" ng-options="type.id as type.name for type in types"></select>\r\n```\r\n\r\ndid not update the ng-model, but passed the right selectedTypeId to the reloadTree\r\n\r\nchanging it to (ng-if to ng-show)\r\n\r\n```\r\n<select ng-show="!treeChanged" ng-change="reloadTree(selectedTypeId)" ng-model="selectedTypeId" ng-options="type.id as type.name for type in types"></select>\r\n```\r\n\r\nsolved the problem\r\n'
5467,'bradlygreen','docs(guide/forms): Improve name links\n'
5465,'bradlygreen','docs(guides/providers): fix typo\n'
5461,'mzgol',"feat(jqLite): implement the `detach` method\nWe at Angular UI are missing jQuery's detach:\r\n\r\nangular-ui/bootstrap#1403 (comment)\r\n\r\nhttps://github.com/angular-ui/bootstrap/pull/1391/files#diff-e8665eb306ddd26399e5b80f00dae5bbR252\r\n\r\nThanks."
5460,'bradlygreen',"docs(tutorial): Fixed path description for location of 'phones.json'\n"
5457,'IgorMinar','perf: use faster check for $$ prefix\nperf: use faster check for $$ prefix\r\n\r\nUse two calls to charAt instead of substr to detect a $$prefix in the shallowCopy functions.\r\nThis makes shallowCopy 25-50% faster (depending on which browser is used).\r\nhttp://jsperf.com/angular-shallow-copy'
5454,'pkozlowski-opensource','$resource Ignoring Action-Specific URL\nOnly the default URL is used when firing the custom \r\n// Factory\r\n```javascript\r\nwindow.app.factory("Clients", function($resource) {\r\n    return $resource(\'clients/:clientId\', {\r\n        clientId: \'@_id\'\r\n    }, {\r\n        update: {\r\n            method: \'PUT\'\r\n        },\r\n        newSecretKey: {\r\n        \tmethod: \'GET\',\r\n        \turl:    \'clients/:clientId/new-secret-key\'\r\n        }\r\n    });\r\n});\r\n```\r\n\r\n// Controller Action\r\n```javascript\r\nclient.$netSecretKey()\r\n```\r\n\r\n// Result\r\n`GET /clients/52b089b2761de51937000001 200 3ms - 379b`'
5448,'matsko','feat(ngAnimate): provide configuration support to match specific className values to trigger animations\nCloses #5357\r\nCloses #5283'
5447,'bradlygreen','docs(guide/injecting-services): fix list formatting in Related* sections\nYeah.'
5444,'tbosch','$sanitize doesn\'t work with UTF-8 chars\n```javascript\r\nvalue = "mañana"\r\n$sanitize(value)\r\n```\r\n```\r\noutput: ma&#241;ana\r\n```'
5442,'IgorMinar','select ngModel fails to pick empty option when expression is undefined (but has null in the middle of chain)\nIf I have an empty option in SELECT with:\r\n\r\n    ng-model="obj.item"\r\n    $scope.obj = {}\r\n\r\nThen ng-model correctly picks the empty variable. However, if the object is null, then the empty option is not picked:\r\n\r\n    ng-model="obj.item"\r\n    $scope.obj = null\r\n\r\nI traced this down to https://github.com/angular/angular.js/blob/master/src/ng/directive/select.js#L256 -- it checks for undefined ONLY, but in the 2nd case, $scope.$eval("obj.item") comes back as null due to #2249.\r\n\r\nDemo:\r\nhttp://plnkr.co/edit/RbPnV3d3LHhkyCoiTsGo?p=info\r\n\r\nI think the fix is to either A) fix select.js to treat null as an empty value or B) fix #2249 to return undefined if the entire expression chain cannot be evaluated.\r\n\r\nI think A is best, since null is not a real value anyway (not the kind of value you could be selecting from a select box).\r\n'
5439,'caitp',"angular blows away dynamically added classes when compiling directives that compile child directives that use the templateUrl property.\nhttp://plnkr.co/edit/EQlLcqdLfskU9pMox4uF?p=preview\r\n\r\nIn this example, I have a multi-form-renderer directive which renders a collection of magical-input directives.  The multi-form-renderer directive is dynamically adding a class of 'ducktales' with jQuery on the magical-input's container.\r\n\r\nIf I use templateUrl (as you can see, I am currently using magical_input.html which is set in the templateCache inside the main script.js file), then angular blows away the ducktales class.\r\n\r\nIf I change the magicalInput directive to use template: '<input />', instead of templateUrl: 'magical_input.html', then the 'ducktales' class is there as it should be.\r\n\r\nThis bug caused a great deal of frustration and took forever to track down.  Thank you."
5438,'IgorMinar',"angular-resource.js  encodeUriSegment Issue .\nI have an issue querying restful resources when the resource uri has several subpaths :\r\n\r\nExample : \r\n\r\n.factory('SomeFactory', function ($resource) {\r\n\treturn $resource('/path/subPath/otherSubPath/:id', {}, {\r\n\t\tshow: { method: 'GET', params: { id: '@id' } }\r\n\t})\r\n}) ;\r\n\r\nWhen I invoke SomeFactory.show in a controller I get the error \r\nthe server responded with a status of 400 (Bad Request) \r\nThis is because the browser is looking for the uri :\r\nhttp://server/path/subPath%2FotherSubPat/id\r\n\r\nNotice the %2F replacing the / (slash) in the uri ,  I have tried many tricks in javascript to make this work  ; But the only solution was to add the following last line  replace(/%2F/gi, '/');  in angular-resource.js encodeUriSegment method .\r\n\r\nPlease tell me if this approach is correct . \r\n\r\n    function encodeUriSegment(val) {\r\n      return encodeUriQuery(val, true).\r\n        replace(/%26/gi, '&').\r\n        replace(/%3D/gi, '=').\r\n        replace(/%2B/gi, '+').\r\n        replace(/%2F/gi, '/');\r\n    }\r\n\r\nThanks ."
5437,'jeffbcross',"E2E tests should be added for docs app\nI've already started work on this and will be submitting a PR soon.\r\n\r\nProtractor should be integrated into the testing process locally and on CI, and should run e2e tests against the docs app. Over time, more tests should be added to test the app, and scenario tests should be replaced by protractor."
5435,'matsko',"ngHide (and ngClass) CSS syntax issue\nThis is the `ngHide` animation example given on yearofmoo:\r\n\r\nhttp://plnkr.co/edit/93W27Y6EyxrGwJR9ix5E?p=preview\r\n\r\nIf I switch the order of the CSS rules, the animation will break:\r\n\r\nhttp://plnkr.co/edit/cZhgEozVSifY0DaWdfJA?p=preview\r\n\r\nI don't think that by simply switching the order of the CSS rules should the animation become totally broken, plus the fact that requirements of a specific order for these definitions is not mentioned anywhere in the doc.\r\n\r\n---\r\n\r\nOn a related note, these two examples won't work as well, but without a very careful inspection into the code examples on both the official site and yearofmoo, I would simply assume the following is the correct way to write my CSS:\r\n\r\nhttp://plnkr.co/edit/eNk41NyfuJDU8q5bkRBg?p=preview\r\nhttp://plnkr.co/edit/Rp3f52Mw6yxUkaJxO85E?p=preview\r\n\r\nMentioning because for enter/leave/move animations, you're adding the `transition` rules into the `ng-enter`, `ng-leave`, or `ng-move` class respectively, while for ngHide animations the `transition` rules are requested to be put into the `ng-hide-add` and `ng-hide-remove` classes, etc. - not in `ng-hide` like the other animation types.\r\n\r\nInconsistent design decisions like this make `ngClass` and show/hide animations not as straight-forward as ngRepeat animations etc. and is really mind-boggling at times."
5430,'IgorMinar','Route resolve dependency object is not resolved in controller as dependency\nhttp://jsfiddle.net/u3vTz/'
5426,'tbosch',"Error thrown in xhr.onreadystatechange when javascript execution is suspended/resumed on iOS\nOn iOS, javascript execution is suspended when user switches to another tab in browser, closes browser, performs back/forward using swipe gestions.\r\nIn our application, if http request is occurred when javascript execution is suspended/resumed, sometimes (apprx one time per dozen tries) the following error is thrown:\r\n\r\n`TypeError: 'null' is not an object (evaluating 'xhr.readyState')`\r\n\r\n      src/ng/httpBackend.js\r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState == 4) {  // Error is thrown in this line\r\n\r\nDebugging showed that `xhr.onreadystatechange` was invoked several times with `readyState=4`. On the first invocation `xhr` was nullified in `completeRequest` function, and then, on subsequent invocations, error was thrown.\r\n\r\nUnfortunately, I could not reproduce the problem in small example. But I found that jQuery and Zepto have appropriate guards. Please see, for example, https://github.com/madrobby/zepto/pull/633\r\n\r\nThe following change is proposed:\r\nhttps://github.com/ilplotkin/angular.js/commit/a79004c5c81d3dbebe495bd3a0f32da6170adf00\r\n"
5425,'IgorMinar','re-assign history after BFCache back\nHistory variable should be handled like the location variable after BFCache back'
5414,'btford','toBoolean has inconsistent results for functions with 0 arguments and for functions with more than 0 arguments\nI have a plnkr demonstrating the issue here:\r\n\r\nhttp://plnkr.co/edit/MeivE2RRsRFKF3n05vwX?p=preview\r\n\r\nTo boolean should return consistent results for any function, no matter how many arguments it has.'
5411,'btford','[Feature Angular 1.3] Support for websockets\nWould be great if Angular had an service that provides websockets support.'
5408,'IgorMinar',"feat(ngBindOnce) && feat{ngRepeatOnce} Bind to the DOM once with no watchers\nThis feature should include:\r\n  - ngBindOnce\r\n  - ngBindTemplateOnce\r\n  - ngRepeatOnce \r\n\r\nThis feature would allow a developer to: \r\n  - bind to the DOM one time\r\n  - Reduce the number of watchers on e the page, Esp in situations of nested repeaters\r\n\r\nIt is for data that: \r\n - doesn't need to be dynamic\r\n - is loaded once and forgotten\r\n - cannot be loaded from the server side code\r\n\r\n "
5403,'IgorMinar','fix($animate): use a scheduled timeout in favor of a fallback property to close transitions\nWith ngAnimate, CSS transitions, that are not properlty triggered, are forceably closed off\r\nby appling a fallback property. The fallback property approach works, however, its styling\r\nitself may effect CSS inheritance or cause the element to render improperly. Therefore, its\r\nbest to stick to using a scheduled timeout to run sometime after the highest animation time\r\nhas passed.\r\n\r\nCloses #5255'
5402,'IgorMinar','Implemented a "safe apply" pattern to the event directives.\nShould resolve #5401'
5400,'tbosch','IE8: View not rendering | angular.min.js, Line: 84, Column: 219 | SCRIPT445: Object doesn\'t support this action | apply?function()\nHi,\r\n\r\nI\'m under the gun here... we went with AngularJS under the notion it was supported in IE8. When I run the app we are getting\r\n\r\nSCRIPT445: Object doesn\'t support this action\r\nFile: angular.min.js, Line: 84, Column: 219\r\n\r\nI am using the latest build of AngularJS. I don\'t think IE8 likes the apply function.\r\n\r\nAny help will be greatly appreciated!\r\n\r\nreturn e.apply ? function () {\r\n                        var a = [];\r\n                        q(arguments, function (b) {\r\n                            a.push(d(b));\r\n                        });\r\n                        return e.apply(b, a);\r\n                    } : function (a, b) {\r\n                        e(a, null == b ? "" : b);\r\n                    };'
5398,'IgorMinar','Form inside ng-incude fragment does not prevent the default action.\nSo in my app, I pull in the following form with ng-incude:\r\n\r\n```\r\n<form name="form" ng-submit="login(name, password)" ng-controller="loginCtrl">\r\n    <input ng-model="username" name="username" type="text" placeholder="username" required>\r\n    <input ng-model="password" name="password" type="password" required>\r\n    <input type="submit"  value="Login" />\r\n</form>\r\n```\r\nOn submitting, the login function is executed followed by the form\'s default action being triggered and reloading the page. I\'m using Angular 1.2.4 and reproduced the bug in Firefox 25 and Chrome 31.'
5390,'caitp',"fix($httpBackend): use ActiveX XHR when making PATCH requests on IE8\nIE8's native XHR doesn't support PATCH requests, but the ActiveX one does.\r\n\r\nCloses #2518\r\nCloses #5043"
5388,'IgorMinar',"perf($injector)\nI did some testing on switch vs apply: http://jsperf.com/angularjs-invoke-apply-vs-switch\r\n\r\nThe existing benchmark always made calls with the same number of args (4), so I assume branch prediction is what made that so quick. (http://jsperf.com/apply-vs-call-vs-invoke/30)\r\n\r\nHowever, in my benchmark, each invoke call has a different (random) number of arguments, which I feel is closer to real world conditions. Switching back to just `apply` seems to be about 40% faster, and saves a good bit of code as well.\r\n\r\nIt's also possible I've messed up the benchmark.\r\n\r\nThoughts?\r\n\r\n(edited typo in speedup percentage)"
5387,'IgorMinar',"Split up compileSpec.js\nIt's hard to find the right place in `compileSpec.js` to add new tests.\r\nWe should split it up into multiple tests..."
5380,'matsko',"Validation failing in IE9 using angular js\nJust started using Angularjs and fell in love with it. But there's this small issue I am not able to get over.\r\nHere is my code:\r\nhttp://plnkr.co/edit/MYKHsteX91jm3os3f2Dp\r\n\r\nThe code works fine in chrome and firefox. But in IE9, the form is getting submitted without any validation. Its maybe because of the 'required' attribute.\r\n\r\nCan you please tell me how do I make it work in IE9 too?"
5378,'matsko','feat($animate): animate dirty, pristine, valid, invalid for form/fields\nAdd css animations when form or field status change to/from dirty,\r\npristine, valid or invalid. This works like animation system present\r\nwith ngClass, ngShow, etc.'
5376,'matsko',"ngRepeat leaves stale items when there is a css transition on the element and angular-animate is loaded\nHi,\r\n\r\nI'm using angular 1.2.4 and noticed that ngRepeat leaves stale items when a there is a css transition on the repeated element in IE10.  It only started happening after i included angular-animate.\r\n\r\nand here's the fiddle...\r\nhttp://jsfiddle.net/RR5Tp/3/\r\n\r\nBrowsers: IE 10\r\nOperating system: Windows 8.1\r\n\r\n"
5372,'caitp',"feat($compile): explicitly request multi-element directive behaviour\n* also fixes #6574\r\n\r\nWith regards to https://github.com/angular/angular.js/issues/5370, I think it's a bit crazy to completely disable the use of attributes/directives ending with `-start` or `-end`.\r\n\r\nI would propose something like this:\r\n\r\n```\r\nangular.module('blah', [])\r\n  .directive('multiElementDir', function() {\r\n    return {\r\n      multiElement: true, // Explicit declaration\r\n      // ...\r\n    };\r\n   });\r\n```\r\n\r\nAnd, instead of this:\r\n\r\n```js\r\n              var directiveNName = ngAttrName.replace(/(Start|End)$/, '');\r\n              if (ngAttrName === directiveNName + 'Start') {\r\n                attrStartName = name;\r\n                attrEndName = name.substr(0, name.length - 5) + 'end';\r\n                name = name.substr(0, name.length - 6);\r\n              }\r\n```\r\n\r\nwe could have something like\r\n\r\n```js\r\n              var directiveNName = ngAttrName.replace(/(Start|End)$/, '');\r\n              if (hasDirectives.hasOwnProperty(directiveNName) && hasDirectives[directiveNName].multiElement) {\r\n                // Only worry about start/end names if directive is explicitly multiElement\r\n                if (ngAttrName === directiveNName + 'Start') {\r\n                  attrStartName = name;\r\n                  attrEndName = name.substr(0, name.length - 5) + 'end';\r\n                  name = name.substr(0, name.length - 6);\r\n                }\r\n              }\r\n```\r\n\r\nthen we could allow both multi-element attributes and attributes ending with `-start` and `-end`, which I think would be nice."
5370,'jeffbcross',"Directive scope variables using hungarian type notation\nUsing variable names prefixed by a single letter seems to have changed in behaviour from 1.1.5 to 1.2.0. In 1.1.5 I used to be able to set oStart as a property name and reference it with o-start, but that seems to now have broken.\r\n\r\nUsing 1.2.0 http://plnkr.co/edit/EgRNDE?p=preview \r\nUsing 1.1.5 http://plnkr.co/edit/r8Q9bj?p=preview\r\n\r\nSkimmed through the breaking changes and could't find anything about this and no other related issues as far as I was able to search. Any thoughts?\r\n\r\n"
5367,'tbosch','fix(ngView, ngInclude): Add template to DOM before linking other directives\nFixes #5247.'
5362,'IgorMinar','perf(a): do not link when href or name exists in template\nperf(a): do not link when href or name exists in template\r\n\r\nChange the a directive to link and hookup a click event only when\r\nthere is no href or name in the template element.\r\nIn a large Google app, this results in about 800 fewer registrations,\r\nsaving a small but measurable amount of time and memory.'
5359,'IgorMinar','perf($parse) Use a faster path when the number of path parts is low\nperf($parse) Use a faster path when the number of path parts is low\r\n\r\nUse a faster path when the number of path tokens is low (ie the common case).\r\nThis results in a better than 19x improvement in the time spent in $parse and\r\nproduces output that is about the same speed in chrome and substantially faster\r\nin firefox.\r\nhttp://jsperf.com/angularjs-parse-getter/6'
5357,'matsko','Support enabling animations on specific elements even when $animate is disabled globally\nCurrently, disabling $animate globally will not allow animations to be re-enabled on a per-element basis.\r\n\r\nThis prevents the implementation of "opt-in" animation directives to selectively enable animation where desired.\r\n\r\nBased on discussion from #5283 '
5346,'IgorMinar','feat(input): constant exprs for  ngTrueValue/ngFalseValue\nIf ngTrueValue / ngFalseValue are strings evaluating to constant expressions, \nthe constant value is used in place of the string value.\n\nIf the value is not a constant, its string value is used, as they were\npreviously.\n\nIf no string expression is provided, then the default value remains true or\nfalse.\n\nFixes #1199'
5339,'btford','Update index.ngdoc\nAdded accessibility attributes to links and images. Added small note on using NVM for node.'
5337,'petebacondarwin','fix(select): ngRequired invalidate when modelValue is empty array\nWhen `multiple` attribute is set, and the model value is an empty array, invalidate the form control.\n\nTODO: ngModelWatch should probably do a bit more work to see if the model value is equal or not. (see comment in selectSpec.js)\n\nFixes #2365'
5336,'petebacondarwin',"EPERM error during bower install - already running as administrator\nHi I got the following dump on Win8.1 during the bower install portion of angular.js setup.  My command prompt was already running as administrator (i.e. I looked at #3965).\r\n\r\nHere is the dump:\r\nC:\\Users\\cofritz\\Documents\\GitHub\\angular.js>bower install\r\nbower bootstrap#*           not-cached https://raw.github.com/twbs/bootstrap/v2.0.2/docs/assets/bootstrap.zip#*\r\nbower bootstrap#*              resolve https://raw.github.com/twbs/bootstrap/v2.0.2/docs/assets/bootstrap.zip#*\r\nbower ng-closure-runner#*   not-cached https://raw.github.com/angular/ng-closure-runner/v0.2.2/assets/ng-closure-runner.\r\nzip#*\r\nbower ng-closure-runner#*      resolve https://raw.github.com/angular/ng-closure-runner/v0.2.2/assets/ng-closure-runner.\r\nzip#*\r\nbower closure-compiler#*    not-cached https://closure-compiler.googlecode.com/files/compiler-20130603.zip#*\r\nbower closure-compiler#*       resolve https://closure-compiler.googlecode.com/files/compiler-20130603.zip#*\r\nbower bootstrap#*             download https://raw.github.com/twbs/bootstrap/v2.0.2/docs/assets/bootstrap.zip\r\nbower closure-compiler#*      download https://closure-compiler.googlecode.com/files/compiler-20130603.zip\r\nbower ng-closure-runner#*     download https://raw.github.com/angular/ng-closure-runner/v0.2.2/assets/ng-closure-runner.\r\nzip\r\nbower lunr.js#0.4.0             cached git://github.com/olivernn/lunr.js.git#0.4.0\r\nbower lunr.js#0.4.0           validate 0.4.0 against git://github.com/olivernn/lunr.js.git#0.4.0\r\nbower jquery#1.10.2             cached git://github.com/components/jquery.git#1.10.2\r\nbower jquery#1.10.2           validate 1.10.2 against git://github.com/components/jquery.git#1.10.2\r\nbower google-code-prettify#1.0.0           cached git://github.com/tcollard/google-code-prettify.git#1.0.0\r\nbower google-code-prettify#1.0.0         validate 1.0.0 against git://github.com/tcollard/google-code-prettify.git#1.0.0\r\n\r\nbower components-font-awesome#3.1.0        cached git://github.com/components/font-awesome.git#3.1.0\r\nbower components-font-awesome#3.1.0      validate 3.1.0 against git://github.com/components/font-awesome.git#3.1.0\r\nbower ng-closure-runner#*                 extract ng-closure-runner.zip\r\nbower bootstrap#*                         extract bootstrap.zip\r\nbower closure-compiler#*                  extract compiler-20130603.zip\r\nbower ng-closure-runner#*                   EPERM EPERM, rename 'C:\\Users\\cofritz\\AppData\\Local\\Temp\\REDMOND-cofritz\\bow\r\ner\\ng-closure-runner-26884-dN9IQd'\r\n\r\nStack trace:\r\nError: EPERM, rename 'C:\\Users\\cofritz\\AppData\\Local\\Temp\\REDMOND-cofritz\\bower\\ng-closure-runner-26884-dN9IQd'\r\n\r\nConsole trace:\r\nTrace\r\n    at StandardRenderer.error (C:\\Users\\cofritz\\AppData\\Roaming\\npm\\node_modules\\bower\\lib\\renderers\\StandardRenderer.js\r\n:74:17)\r\n    at Logger.updateNotifier.packageName (C:\\Users\\cofritz\\AppData\\Roaming\\npm\\node_modules\\bower\\bin\\bower:109:18)\r\n    at Logger.EventEmitter.emit (events.js:95:17)\r\n    at Logger.emit (C:\\Users\\cofritz\\AppData\\Roaming\\npm\\node_modules\\bower\\node_modules\\bower-logger\\lib\\Logger.js:29:3\r\n9)\r\n    at C:\\Users\\cofritz\\AppData\\Roaming\\npm\\node_modules\\bower\\lib\\commands\\install.js:27:16\r\n    at _rejected (C:\\Users\\cofritz\\AppData\\Roaming\\npm\\node_modules\\bower\\node_modules\\q\\q.js:808:24)\r\n    at C:\\Users\\cofritz\\AppData\\Roaming\\npm\\node_modules\\bower\\node_modules\\q\\q.js:834:30\r\n    at Promise.when (C:\\Users\\cofritz\\AppData\\Roaming\\npm\\node_modules\\bower\\node_modules\\q\\q.js:1079:31)\r\n    at Promise.promise.promiseDispatch (C:\\Users\\cofritz\\AppData\\Roaming\\npm\\node_modules\\bower\\node_modules\\q\\q.js:752:\r\n41)\r\n    at C:\\Users\\cofritz\\AppData\\Roaming\\npm\\node_modules\\bower\\node_modules\\q\\q.js:574:44\r\n\r\nSystem info:\r\nBower version: 1.2.8\r\nNode version: 0.10.3"
5335,'petebacondarwin','fix(angular-mocks): stringify parameters in $httpBackend.expect\nfix(angular-mocks): stringify parameters in $httpBackend.expect\r\n\r\nUse angular.fromJon and angular.toJson to make an snapshot of parameters in $httpBackend.expect\r\n\r\nFixes #5333'
5332,'IgorMinar','How to retrieve values from web sql using angularjs to compare values of one table with values of second table\nI have two tables and want to compare the values of tableA to the values of tableB randomnly.let me know how to compare using angularjs.I am using jaydata to store data in web sql.'
5326,'IgorMinar',"Changes to ngModel.$setViewValue?\nHi angular community\r\n\r\nI'm in the middle of a dependency update and I noticed a braking change from 1.2.0-rc3 to 1.2.4. Let me explain my issue: I have a datepicker directive that I user for my datepiker. \r\n\r\n```javascript\r\n.directive('datepicker', function() {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function(scope, el, attr, ngModel) {\r\n            $(el)\r\n                .datepicker()\r\n                .on('changeDate', function(ev) {\r\n                    scope.$apply(function() {\r\n                        ngModel.$setViewValue(ev.date.toISOString());\r\n                    });\r\n                });\r\n        }\r\n    };\r\n})\r\n``` \r\n\r\nIn the previous angularjs version that I have used (1.2.0-rc3 e.g) the value of that field that the datepiker is assigned to, was the value that I've set in the directive above with this code line:\r\n ```javascript \r\nngModel.$setViewValue(ev.date.toISOString());\r\n```\r\nBut in the version I use now (1.2.4) the value is the formatted date from the datepicker.\r\n\r\nWas there any change to ngModel.$setViewValue that I have not noticed?\r\n\r\nThanks :)"
5324,'IgorMinar','Update ngEventDirs.js with scroll event\nadd scroll event. there are times when you want to fire an event when a div or element scrolls.'
5314,'btford','fix(angular-mocks): use copy of mock data in $httpBackend\nfix(angular-mocks): use copy of mock data in $httpBackend\r\n\r\nCopy mock data returned from the mock $httpBackend.\r\nThis prevents modifications to the response from affecting future responses.\r\nPreviously, this misbehavior was being mitigated by the deep copy in $resource, but that no longer exists.\r\n\r\nhttps://github.com/angular/angular.js/issues/5265'
5308,'tbosch','ng-model is not updated immediately in Chrome WebView or Browser\nOn Android 4.4 (KitKat) using both the Chrome WebView (v30) and the Chrome Browser (v31.0.1650.59) an input with an `ng-model` is not updating the variable value until the focus leaves the input.\r\n\r\nThe following commit for version 1.2.2 is responsible for this bug:\r\n* input: hold listener during text composition (a4e6d962, #4684)\r\n\r\nIf I revert that commit in angular 1.2.3 or revert to angular 1.2.1 the problem goes away.\r\n\r\nHere is a demo of the problem:\r\nhttp://plnkr.co/edit/ZcksakM9icREgxe38Pnf?p=preview'
5303,'IgorMinar','feat(closure): add missing FormController extern definitions\nAddresses b/12020484'
5299,'jeffbcross',"refactor($parse): clean up evaled function\nrefactor($parse): clean up evaled function\r\n\r\nRemove unused variables from the created function.\r\nUse == null instead of (=== null || === undefined)\r\nDon't wrap the evaled function in a closure when not unwrapping promises.\r\nThis change also brings a slight performance improvement: http://jsperf.com/optimizing-parse"
5297,'caitp',"$http should coalesce calls to $apply\nPresently, $http calls $apply for every request response, even if they come in within milliseconds of each other.  Using a short timeout (0ms, which in practice works out to 0-10ms) to $apply can reduce a lot of waste.\r\n\r\nSee example implementation here: https://github.com/kseamon/angular.js/compare/http-coalesce?expand=1\r\n\r\nUsing this code (Not ready for a pull request as it breaks tests and mocks, etc), I see the number of $apply calls in my app's startup drop from 40 to 16."
5296,'tbosch','Using JSON in HTML attribute throws error\nIf you use JSON in an HTML attribute that is used in a \'=\' scope variable, it throws the error "[$rootScope:infdig] 10 $digest() iterations reached. Aborting!".\r\n\r\nHere is a simple Plunker that shows the error.\r\n\r\nhttp://plnkr.co/edit/B3NZSXbGsNyJec4PaFd4?p=preview\r\n\r\nEverything seems to work fine except for this error (it seems to bind OK anyway). Just passing the attribute value as a string and calling scope.$eval within the link function seems to work, though I\'m not sure if you would get 2-way data binding that way if the value was passed as an object instead of JSON.\r\n\r\nThe code should either be fixed to support inline JSON or a more explicit error should be thrown if JSON is being sent in from the attribute. If an error is thrown, it would be nice to include in the documentation on it what the work around is (scope.$eval?) and any limitations (2-way data binding broken?).'
5295,'IgorMinar','chore(Angular.js): Use call and === instead of apply and ==\nchore(Angular.js): Use call and === instead of apply and == in type check functions\r\n\r\nUpdates isDate et al to use call instead of apply and === instead of ==.\r\nThe change to call brings minor performance improvement and === is just better practice than ==.\r\nhttp://jsperf.com/call-vs-apply-tostring'
5293,'IgorMinar','fix(input): prevent double $digest when using jQuery trigger.\nIf an event was performed natively, jQuery sets the isTrigger property.\r\nWhen triggering event manually, the field is not present. Manually\r\ntriggered events are performed synchronously which causes the "$digest\r\nalready in progress" error.'
5284,'tbosch','docs(TRIAGING): Initial doc about triaging issues in Angular\n'
5282,'IgorMinar','fix(input): ensure ngModelWatch() triggers second digest pass when appro...\n...priate\r\n\r\nDue to an earlier change, ngModelWatch() no longer returns a value to the\r\ncaller. This means the digest loop has no way to tell if the watch actually\r\nmodified anything and so can not schedule another pass.\r\n\r\nThis means any watches that watch form or model controller changes\r\n(e.g. watches on form.$valid) that are scheduled prior to an ngModelWatch()\r\nwill not be able to see any changes made therin.\r\n\r\nThis commit fixes this behavior by returning the latest evaluated ng-model\r\nvalue.\r\n\r\nCloses #5258'
5281,'btford',"fix: properly remove event listeners for memory leak prevention\nThis PR is just to show buggy code, and possible fix related to https://github.com/angular/angular.js/issues/5270\r\nThe final code should be at least re-factored a bit and correspondent tests should be added.\r\nI'll not be able to do right PR for now..."
5276,'IgorMinar','chore($http): Use copy to prevent modification of cached data\nchore($http): Use copy to prevent modification of cached data\r\n\r\nCopy response data as it goes into and out of the cache.\r\nThis prevents modifications to cached data.'
5275,'petebacondarwin',"AngularJS - IE11 Compatibility\nI am a Program Manager with the Ecosystem Engineering team at Microsoft. While conducting IE11 testing we encountered an issue with AngularJS on IE11. AngularJS isn't correctly recognizing the IE11 UA string: Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko. \r\n\r\nAn example of this compatibility can be found: http://jsfiddle.net/martinwolf/Jpk7x/3/  \r\n\r\nThe moving the sliders should manipulate the colors found above the sliders.\r\n\r\n-Ryan\r\nProgram Manager"
5272,'IgorMinar','chore($scope): Short-circuit after dirty-checking last dirty watcher\nchore($scope): Short-circuit after dirty-checking last dirty watcher\r\n\r\nStop dirty-checking during $digest after the last dirty watcher has been re-checked.\r\nThis prevents unneeded re-checking of the remaining watchers (They were already checked in the previous iteration), bringing a substantial performance improvement to the average case run time of $digest.'
5271,'btford','[1.2.3] bug in ng-class-odd with multiple words in class name\nI believe this is a new bug introduced in Angularjs 1.2.3, please see the following JSFiddle.\r\nhttp://jsfiddle.net/QSr2F/\r\n\r\nWhen there are multiple words in the ng-class-odd/ng-class-even, the first and second rows are ok, starting from the third row, the class for the odd rows is wrong, while the class for the even rows is right.\r\n\r\nThere is no such problem when the class names are single word (with no spaces in between).'
5270,'btford',"Remove event listeners - memory leak\nHad memory leak on removing elements from the dom (switching views, ng-switch ...)\r\nSolved it partially by tweaking jqlite implementation.\r\n\r\nWhen jqlite remove event listeners it passes wrong function reference\r\n(not the same it passed on add listener).\r\nActually it try to pass array of functions - so it doesn't remove it properly.\r\nhttps://github.com/angular/angular.js/blob/master/src/jqLite.js#L218\r\nhttps://github.com/angular/angular.js/blob/master/src/jqLite.js#L224\r\n\r\nTo fix it I replaced it with actual handler that was added:\r\n```javascript\r\nremoveEventListenerFn(element, type, handle);\r\n```\r\nIt is very easy to check by breakpoints these lines..\r\n\r\nhttps://github.com/angular/angular.js/blob/master/src/jqLite.js#L652\r\n```javascript\r\neventHandler.elem = element;\r\n```\r\n\r\nWhy we need additional reference to the element for the handler function.\r\nAs I can see it never used ...\r\nMaybe it's safe to delete this line.\r\n\r\nNow app consume less memory and event listeners released properly.\r\nBut I still see growing number of dom elements...\r\nLooks like on removing it from the dom it still have some references unreleased...\r\n"
5269,'matsko','feat(jqLite): provide support for element.one()\n'
5267,'matsko','fix($animate): ensure animations work with directives that share a transclusion\nCloses #4716\r\nCloses #4871\r\nCloses #5021\r\nCloses #5278'
5263,'IgorMinar',"ngInclude doesn't seem to work on svg elements\nPlunker: http://plnkr.co/edit/JF8O1NMbdNQLSNYkCNyG?p=preview\r\n\r\nBasically, I'd like to use ngInclude to do recursive svg inclusions but that doesn't seem to work."
5262,'matsko','Animation Flicker\nI created a directive that uses the "ngShow" and "ngAnimate". When this directive is loaded by the first time, it appears and disappears (flicker).\r\n\r\nTried to fix by checking if the problem was in my code. I don\'t have idea if it is normal or not, but is strange.\r\n\r\nFor now, I fixed the problem by using the "element [0] style.display = \'none\';".\r\n\r\nIn the "http://www.yearofmoo.com/2013/05/enhanced-animations-in-angularjs.html", Matias talk about this (Animations are skipped the first time after a directive is compiled).\r\n\r\nI read others articles about that, but I believe the "problem" still happens in Angular 1.2.'
5260,'tbosch','fix(closure): closure compiler shouldn\'t rename $httpProvide.defaults.transformRequest\ni would like to be able to have following code working when using Closure JS compiler:\r\n\r\nmy.module.config([\'$httpProvider\', function($httpProvider) {\r\n  $httpProvider.defaults.transformResponse = [my.transformHttpResponse];\r\n}]);\r\n\r\nunfortunately "transformResponse" is being renamed to random string.\r\n\r\nLooks like Closure compiler doesn\'t respect @tyedef, i could inline all properties of angular.$http.Config but first wanted to get a quick feedback if that change makes sense.\r\n'
5258,'IgorMinar','ngModelWatch not triggering a second digest when it fires\nWhen `ngModelWatch` gets called, it can potentially change the validity of the form control and update the respective controllers.\r\n\r\nCode in the template could be potentially binding to these values such as doing `{{myForm.$valid}}`.\r\n\r\nYou can see the issue in this plunkr:\r\n\r\nhttp://plnkr.co/edit/MC5NZ0AXlqA3XnNCVyzb?p=preview\r\n\r\n\r\nThe problem is that ever since this commit:\r\n\r\nhttps://github.com/angular/angular.js/commit/e6d9bea4f3b2eb28851298d3dc3a30d46062d58a\r\n\r\nThe watch no longer returns any value. So the current digest will never be marked as dirty even though the watch has performed actions that should require a second pass through the digest loop. \r\n\r\nI think the fix is probably just returning  the value we get from `ngModelGet($scope)`. This will allow the digest to compare the previous value and mark itself as dirty if necessary.\r\n\r\nDoes anyone see a problem with this approach? If not I can submit a PR.\r\n\r\n\r\n'
5256,'tbosch','Add support for <input type="date"/>\nThis is to at least partially address #757\r\n\r\nThe idea is to add support for existing HTML5 implementations of `<input type="date"/>` while supporting a text version for older browsers that handles the appropriate HTML5 validations.\r\n\r\nAdditionally, an Angular-specific attribute was added (`ng-output-date`) to give the developer the option to output the value to the model as a Date object rather than the default string.\r\n\r\nAll string are expected in the HTML spec compliant ISO-8601 date strings: \'YYYY-MM-DD\'\r\n\r\nHopefully this lays the groundwork for other similar input types such at `datetime`, `month`, `datetime-local`, etc.'
5255,'matsko','ng-animate border-spacing causes slight jump when animating\nWhile I was messing around with the ngAnimate module in the 1.2.3 release I noticed slight "jumps" in some of the elements I was animating, but not all of them. After some digging I realized that the jump in these particular elements was being caused by `border-spacing: 1px 1px` being applied to them during the animation. I created a small demo that demonstrates the behavior I was seeing: \r\n\r\nhttp://jsfiddle.net/47E8m/1/\r\n\r\nAfter some googling, I came to this [issue thread](https://github.com/angular/angular.js/issues/5030#issuecomment-28808582) and then realized that the jumpy elements I had were all utilizing the [clearfix hack](http://nicolasgallagher.com/micro-clearfix-hack/) which uses `display: table`.\r\n\r\nWithout having to modify any of my other CSS, a quick workaround I found was to add the following to my CSS:\r\n    \r\n    .ng-animate { border-collapse: collapse; }\r\n\r\n@matsko what\'s the nasty bug that makes `clip` or `border-spacing` necessary? Perhaps there\'s some other CSS properties we could try.'
5254,'tbosch','Two-Way databinding failure when use ngRepeat and JQuery UI sortable\nwe upgrade angular from 1.0.8 to 1.2.2 (we used JQuery UI sortable)，when drag a item(e.g. item1) from entry(entry1) to other entry(entry2)，we need to change the entry items in sortable options stop function ，when we push the item1 to entry2 and remove item1 from entry1,we found the item1 is lost(or other strange problem)\r\n\r\nwe found a solution that call ui.item.remove() in sortable stop function to resolve this issue, we guess that because of sortable plugin injection item to entry.\r\nwe are not sure whether this is a bug or have a better solution？\r\n\r\nthe demo adrress: http://why520crazy.github.io/w5c-validator-angular/demo/angular_sortable.html'
5252,'IgorMinar','chore($resource): Use shallow copy instead of angular.copy\nchore($resource): Use shallow copy instead of angular.copy\r\n\r\nReplace calls to angular.copy with calls to a new function, shallowClearAndCopy.\r\nAdd calls to copy for cache access in $http in order to prevent modification of cached data.\r\nResults in a measurable improvement to the startup time of complex apps within Google.'
5247,'tbosch','ngInclude behavior change from 1.2.1 -> 1.2.2\n\r\nIf you have a directive on an ng-include attribute, it appears the content is not loaded prior to executing your directive\'s link function.  In 1.2.0 and 1.2.1, the following code would have children().length == 1.  In 1.2.2, the content doesn\'t get included until after this directive is executed.  I tried setting the priority of my directive but it still gets invoked before the template has been loaded.\r\n\r\nWhat is the expected behavior here?  Is it defined?  Do I just need to add an onload event handler in case the child gets loaded subsequent to my directive\'s link function being called?  (I tried running this in post-link but behavior was the same).\r\n\r\n// Full plunkr showing the problem.  Just change angular version.\r\nhttp://plnkr.co/edit/VWA0JTcpNDoNZkTrmllA?p=preview\r\n\r\n```html\r\n<ng-include my-custom-directive src="\'myTemplate.html\'"></ng-include>\r\n```\r\n\r\n```js\r\napp.directive(\'myCustomDirective\', function() {\r\n    return {\r\n      restrict: \'A\',\r\n      link: function(scope, element, attrs) {\r\n        \r\n        window.alert(element.children().length);\r\n        \r\n       }\r\n     };\r\n   });\r\n```'
5246,'IgorMinar','Ensure safe object\nApplies a bit of micro-optimization to ensureSafeObject.\r\n\r\nThis version matches the "alternate 2.2" version here: http://jsperf.com/ensuresafeobject/2\r\n\r\nalternate 2.3 is a bit faster and simpler, but would break backwards compatibility.'
5241,'matsko','ngIf directive element not removed on falsy\nAngularJS version 1.2.2 in Chrome Version 31.0.1650.57 on OSX Maverick\r\n\r\nI haven\'t gotten down to the exact source yet but just adding this here as a note for the animation team. I had a situation today where the animation classes where being applied to an ngIf directive even though I had no animation set on it either via css or js. To complicate things even more the element with the ngIf never got removed from the DOM even if the ngIf expression resoled to false. The root of this issue was a vanilla css transition (not via ngAnimate) that was set on the element. Seems like the the leave hung at step 7 (from docs) where it was waiting for the transition to complete and got hung up. \r\n\r\nSummary:\r\n1. still can\'t explain why the $animte service got triggered in this element... not sure how each animation is registered with the service solely on css classes. Removed any classes I had set on the element to make sure there was no collision but was still an issue.\r\n2. issue where the ngIf got hung and never finished removing the element from the DOM because there was a css transition set on the element. Once I removed the culprit transition declaration everything worked fine.\r\n\r\nDOM structure example: (scope.currentPage is an int)\r\n\r\n````\r\n<div>\r\n    <ul ng-repeat="page in pages">\r\n        <li ng-repeat="item in page" ng-if="$parent.$index == currentPage">item</li>\r\n    <ul>\r\n</div>\r\n\r\n````'
5237,'tbosch',"Click on child element triggers its own ng-click and parent's too\nIf I have a `<div>` with an `ng-click` and then a `<button>` inside with a separate `ng-click`, clicking the button will fire both `ng-click` handlers.\r\n\r\nI found Igor's ancient PR for this (#31 !) but it seems that the `stopPropagation()` he added has been lost somewhere in between.\r\n\r\nI tried to bisect, but found that it isn't working in 1.2.3, master, 1.1.5, 1.1.3, 1.0.6, or 1.0.3. I tried to bisect between master and Igor's commit in the above PR, but they changes got so old (0.10.x) that my test app won't work at all.\r\n\r\nSimple test case to reproduce this on [Plunkr](http://plnkr.co/edit/fQyQewV2ukEUB4MrXp8i?p=preview)."
5235,'caitp',"fix($compile) support templates with table content root nodes\nSome hack-ish logic to get compile to avoid throwing up on table content as root nodes.\r\n\r\nI'm sure this can be improved upon, and certain things (like the regexp) could be moved outside of the function. Suggestions would be good.\r\n\r\n[demo1](http://plnkr.co/edit/lElPZH9qlOemGE8vpteH?p=preview) | [demo2](http://plnkr.co/edit/9rg68DVp0w5kfc727mCj?p=preview)\r\n\r\nCloses #2848\r\nCloses #1459 \r\nCloses #3647 \r\nCloses #3241\r\n"
5233,'matsko','Make it possible to put ng-app on doctype element\nthis is to avoid duplicate ng-app when using IE conditional comments (like what html5 boilerplate)'
5232,'petebacondarwin','$timeout example not working \nThe example of ng.$timeout does not work, as it is the only manually written docs, I think it would be worth it to correct it. The StopFight button has no effect on the countdown.\r\n\r\nI am using chromium 31.0.1650.48 on archlinux (gnome).'
5228,'matsko','docs($animate): require ngAnimate in example, syntax fixes\nThe example in the section "JavaScript-defined Animations" would not run without the ngAnimate dependency. Also added a missing comma and semicolons.'
5224,'matsko','$animate.enabled not being honored on load\nMoving an issue from UI Bootstrap to angular https://github.com/angular-ui/bootstrap/issues/1273#issuecomment-29098018. Following an email trail with @matsko I have decided it might be best addressed here, as it seems more at home on the angular git now.\r\n\r\nI have been using the UI Bootstrap carousel as a test and example of this.\r\n\r\nI have bee using a "setNgAnimate" directive to dynamically add the enabled / disables state to other directives.\r\n\r\nUpdated to 1.2.3 still the same issues: http://plnkr.co/edit/UWDcnJ2PGZd474D5SuoS?p=preview\r\n\r\nIt seams to be working if you enable and then disable the animations again after load. As ng animate disables all animation on load and then enables again when angular is fully initialized i believe setting the disable flag on an element is overridden when the global animations are turned back on.\r\n\r\nEven watching the value of $animate.enabled() and triggering "setNgAnimate" doesn\'t seem to get past this.'
5219,'tbosch','autocomplete change broke angular-ui\nDespite the "promise" in the release notes, I have found a breaking change in 1.2.3, reported by git bisect as follows:\r\n\r\n    a090400f09d7993d102f527609879cdc74abae60 is the first bad commit\r\n    commit a090400f09d7993d102f527609879cdc74abae60\r\n    Author: Tobias Bosch <tbosch1009@gmail.com>\r\n    Date:   Fri Nov 22 16:34:33 2013 -0800\r\n    \r\n        fix(input): Support form auto complete on modern browser\r\n        \r\n        Although modern browser support the "input" event, they still only fire\r\n        the "change" event when they auto complete form elements\r\n        other than the currently selected one.\r\n        \r\n        Related to #1460\r\n\r\nI am using angular-ui/ui-select2 and after that commit my selects are displaying the id rather than the value.  There may be a work-around in that product, but I suspect that fixing it in either place is beyond me (except for the obvious revert, which I have proved works, unless there are some very unlucky timing things going on).\r\n\r\nAm happy to help in any way I can (but I suspect that won\'t mean much).'
5217,'petebacondarwin',"$logProvider formatError suppresses sourcemapping of native console.error \nI'm developing an angular app with CoffeeScript, which is compiled to Javascript. Compilation changes line numbers which potentially makes debugging difficult, however modern browsers support sourcemapping which allow the Javascript debugger to map line numbers back to the original lines.\r\n \r\nAngular has a custom error handler with a custom function to pretty print stack traces. This custom function does not know about source maps and suppresses the native stack trace which gets the line numbers correct.\r\n\r\nE.g. an error on line 59 will be reported on line 70.\r\n\r\nThe work around is to install a custom exception handler that re throws the error. \r\n\r\n    .factory '$exceptionHandler', () ->\r\n      return (exception, cause) ->\r\n          console.error exception, exception.message\r\n          throw exception\r\n\r\n\r\nMaybe there is a way to print both the native and custom stack traces. Perhaps the problem and workaround should be documented.\r\n\r\nCorrect native stack trace (Chrome):\r\n\r\n    Uncaught ReferenceError: blah is not defined main.coffee:59\r\n    (anonymous function) main.coffee:59\r\n    invoke angular.js:3647\r\n    instantiate angular.js:3659\r\n    (anonymous function) angular.js:6680\r\n    (anonymous function) angular.js:6093\r\n    forEach angular.js:308\r\n    nodeLinkFn angular.js:6080\r\n    compositeLinkFn angular.js:5546\r\n    compositeLinkFn angular.js:5549\r\n    compositeLinkFn angular.js:5549\r\n    publicLinkFn angular.js:5454\r\n    (anonymous function) angular.js:1300\r\n    Scope.$eval angular.js:11669\r\n    Scope.$apply angular.js:11769\r\n    (anonymous function) angular.js:1298\r\n    invoke angular.js:3639\r\n    doBootstrap angular.js:1296\r\n    bootstrap angular.js:1310\r\n    (anonymous function) boot.coffee:2\r\n    (anonymous function) app.js:85\r\n    xhr.onreadystatechange app.js:55\r\n\r\nIncorrect Angular stack trace:\r\n\r\n    ReferenceError: blah is not defined\r\n        at new eval (main.coffee:70:12)\r\n        at invoke (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:3647:28)\r\n        at Object.instantiate (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:3659:23)\r\n        at eval (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:6680:28)\r\n        at eval (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:6093:34)\r\n        at forEach (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:308:20)\r\n        at nodeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:6080:11)\r\n        at compositeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:5546:15)\r\n        at compositeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:5549:13)\r\n        at compositeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:5549:13)\r\n        at publicLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:5454:30)\r\n        at eval (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:1300:27)\r\n        at Scope.$eval (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:11669:28)\r\n        at Scope.$apply (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:11769:23)\r\n        at eval (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:1298:15)\r\n        at Object.invoke (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:3639:25)\r\n        at doBootstrap (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:1296:14)\r\n        at Object.bootstrap (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.3/angular.js:1310:12)\r\n        at eval (boot.coffee:4:9)\r\n        at http://embankment.richardc.net:4000/s/app.js:85:17\r\n        at XMLHttpRequest.xhr.onreadystatechange (http://embankment.richardc.net:4000/s/app.js:55:9) angular.js:9194\r\n    (anonymous function) angular.js:9194\r\n    (anonymous function) angular.js:6747\r\n    Scope.$apply angular.js:11771\r\n    (anonymous function) angular.js:1298\r\n    invoke angular.js:3639\r\n    doBootstrap angular.js:1296\r\n    bootstrap angular.js:1310\r\n    (anonymous function) boot.coffee:2\r\n    (anonymous function) app.js:85\r\n    xhr.onreadystatechange app.js:55\r\n"
5208,'IgorMinar',"fix(ngInit): evaluate ngInit before ngInclude\nThe priority of ngInit is adjusted to occur before ngInclude, and after  ngController. This enables ngInit to initiallize values in a controller's  scope, and also to initiallize values before ngInclude executes.\r\n\r\nCloses #5167"
5206,'btford','Why does $http outside of $apply actually work?\nThe documentation says that it should not work outside of $apply phase but yet it seems to work fine from outside of an $apply phase as proven by this plunkr:\r\n\r\nhttp://plnkr.co/edit/2EXpWkYQuxCgPZ5x9JOu?p=preview'
5201,'btford',"IE8 throws Exception: Object doesn't support property or method 'hasOwnProperty'\nDescription:\r\n\r\n`forEach` function throws this error at line 295 of angular 1.2.3 version. Trace leads to  the `forEach(element.attributes, ... )` call of `angularInit` function at line 1248.\r\n\r\nThe problem is that in IE8 the `element.attributes` property is instace of `[object DispHTMLAttributeCollection]` which doesn't support `hasOwnPropertyMethod` hence the exception.\r\n\r\nSeems that the issue does not occur in other IE versions."
5198,'jeffbcross',"when clicking on SVG diagrams with links I get: TypeError: Object #<SVGAnimatedString> has no method 'indexOf'\npull request on its way..."
5193,'petebacondarwin','fix(ngSanitize): prevent decodeEntities from prepending original text…\nClearing the match before the conditional branch seems to (inexplicably)\r\nbreak Safari 7 on OSX 10.9, except when stepping through line by line.\r\n\r\nMoving the assignment to after the conditional branch corrects this\r\nbehaviour.\r\n\r\nCloses #5192'
5192,'petebacondarwin','regression in 1.2.3: ng-bind-html breaks in Safari 7 on OSX 10.9\nFor some reason, ng-bind-html renders the given text twice on Safari 7. This seems to be a regression in ngSanitize 1.2.3.\r\n\r\nThe following Plunker reproduces the issue:\r\n\r\nhttp://plnkr.co/edit/4tXYKqp3p5dmiMrmIUNI?\r\n\r\nIt only reproduces on Safari 7.0 (It didn\'t reproduce on Safari 6.0.5/Chrome latest/Firefox latest/IE9/IE10). Also, if you change the Plunker to use ngSanitize version 1.2.2, the issue is gone and ng-bind-html functions as expected.\r\n\r\nHere is the expected output v.s. the actual output from the above Plunker code:\r\n\r\n### Expected Output\r\n\r\n```html\r\n<div ng-bind-html="name" class="ng-binding"><strong>John Due ☺</strong></div>\r\n```\r\n\r\n### Actual Output with Safari 7 and ngSanitize 1.2.3\r\n\r\n```html\r\n<div ng-bind-html="name" class="ng-binding"><strong>John Due &amp;#9786;John Due ☺</strong></div>\r\n```\r\n\r\n'
5191,'matsko','ngAnimate addClass/removeClass potential race condition\nI\'m afraid I\'ve so far been unable to create a simple example of this bug, it does happen every time on a larger codebase.\r\n\r\nI have an element:\r\n\r\n```html\r\n<div ng-class="{ \'navigating\': navigating }"></div>\r\n```\r\n\r\nThere are CSS animations on the div (from before ngAnimate) and after upgrading to 1.2.3 (from pre-1.2) and adding ngAnimate when the scope variable navigating changes quickly (~100ms) from false to true to false again the "navigating" class remains on the element. So far I\'ve managed to establish this sequence of events:\r\n\r\n * performAnimation(\'addClass\', \'navigation\'...\r\n * ...\r\n * performAnimation(\'removeClass\', \'navigation\'...\r\n * ...\r\n * fireDOMOperation for removeClass\r\n * afterReflow for addClass runs\r\n * fireDOMOperation for addClass\r\n\r\nI\'m hoping this either rings a bell with someone or someone can point me in the right direction for further debugging.\r\n\r\nI\'m able to workaround this for now by putting a timeout around the scope variable change.'
5185,'jeffbcross','feat: register isBoolean as a public member of global angular\nThe isBoolean function already exists in angular but it was not registered in the public API.\r\n\r\nthe issue is described here: see https://github.com/angular/angular.js/issues/1351'
5182,'tbosch',"fix($compile): ensure isolated local watches lastValue is always in syn...\n...c\r\n\r\nWhen using two-way binding with isolate scope, under some circumstances\r\nthe lastValue variable captured in the parentValueWatch function can get\r\nout of sync.\r\n\r\nSpecifically, if both the value in the origin scope as well as the value\r\nin the isolate scope get independently updated to the same value within\r\none digest cycle, the lastValue is never updated. This potentially causes\r\nthe watch to make the wrong decision as to which side to update on subsequent\r\npasses.\r\n\r\nThis fixes things by ensuring lastValue is always set to the last seen\r\nvalue even if the watch's logic was shrot circuited because there was no\r\ndifference between the values in the original and isolate scopes."
5181,'matsko','fix($animate): ensure ms durations are properly rounded\nCloses #5113\r\nCloses #5162'
5178,'petebacondarwin','Bubbling browserTrigger() event\nI\'m trying to use `browserTrigger()` on an element and need the event on to bubble up to its ancestors, but the handler from the element (ancestor) isn\'t firing\r\n\r\nThis is a simple example of what I\'m trying to do:\r\n\r\n```\r\n<div ng-click="catchMe()">\r\n  <span>ClickMe</span>\r\n</div>\r\n```\r\n\r\n```\r\nvar child = $document.find(\'span\');\r\nbrowserTrigger(child,\'click\');\r\n```\r\n\r\nThe `catchMe()` event (div\'s click handler) isn\'t getting fired.\r\n\r\nI checked the code from [browserTrigger](https://github.com/angular/angular.js/blob/master/src/ngScenario/browserTrigger.js#L127) and the event that is pass to `element.dispatchEvent(env)` is with `canBubble : true`, so I don\'t get why it isn\'t bubbling...\r\n '
5169,'jeffbcross',"$destroy on root scope doesn't do anything\nsee https://github.com/angular/angular.js/blob/38fb542838324dc0e66b2f5eced70a4b5e682abc/src/ng/rootScope.js#L671\r\n\r\nwe should at least broadcast the $destroy event and mark the scope as destroyed."
5167,'IgorMinar',"ng-init directive priority\nHello.\r\nThere's one more priority-related bug in 1.2.\r\n1.2.2 is now ok when using controller on ng-include but there's one more related bug:\r\nng-init doesn't affect ng-include.\r\nIt can be fixed with setting it's priority higher than in include directive, like:\r\n```\r\nvar ngInitDirective = ngDirective({\r\n  priority: 401,\r\n  compile: function() {\r\n    return {\r\n      pre: function(scope, element, attrs) {\r\n        scope.$eval(attrs.ngInit);\r\n      }\r\n    };\r\n  }\r\n});\r\n```\r\nJsbins:\r\nwith 1.2.2 - http://jsbin.com/oliGUvud/1/edit?html,output (digit 1 is not there)\r\nwith 1.0.8 - http://jsbin.com/EfudOZAF/1/edit?html,output (digit 1 is there)"
5165,'btford','In automatic commentary Mary Poppins a link "signed CLA" is incorrect.\n**Note:** In automatic commentary of Mary Poppins, a link "signed CLA" is incorrect.\r\nIt should be https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#signing-the-cla\r\n\r\nThe documentation has been changed by this commit : https://github.com/angular/angular.js/commit/de2cced192405f352c0cefccd3e7726aef56dae0'
5164,'Narretz','ng-required conflicts with ng-true-value\nIf I set `ng-required="something"` inside a checkbox, `ng-true-value` does not work.\r\nThis issues happenes with 1.2.x, not with 1.1.x\r\n\r\nplunker here\r\nhttp://plnkr.co/edit/qBLIKaH1XmyQrSN5Xkz0?p=preview'
5161,'IgorMinar','fix($compile): update cloned elements if the template arrives after the ...\n...cloning\r\n\r\nIf an element has a directive whose content is loaded using `templateUrl`,\r\nand the element is cloned using a linking function before the template arrives,\r\nthe clone needs to be updated as well.\r\n\r\nThis also updates `ngIf` and `ngRepeat` to keep the connection to the clone\r\nof a tranclude function, so that they know about the changes a directive with\r\n`templateUrl` does to the element in the future.\r\n\r\nFixes to #4930.'
5155,'petebacondarwin',"chore(grunt): update to latest jshint task\nUpgrade JSHint task from ~0.6.4 to ~0.7.2. Two useful changes: ability\r\nto set jshintrc option to use jshint's native ability for finding .jshintrc\r\nfiles relative to the linted files and update jshint to 2.3.0.\r\n\r\nCloses #5143"
5147,'tbosch',"Check on logFn breaks on IE8\nOn line 9153 of AngularJS 1.2.2 we have the following:\r\n\r\nif (logFn.apply) {\r\n\r\nthis breaks on IE8 because logFn is just an empty object. To make it work it must be modified like this:\r\n\r\nif (typeof logFn.apply === 'function' && logFn.apply) {\r\n\r\nThis works perfectly on all browsers."
5143,'petebacondarwin',"chore(grunt): update to latest jshint task\nWe are currently running ~0.6.4 but the latest is 0.7.2 - There are two useful changes if we upgrade...\r\n\r\nv2013-10-31\u2003\u2003\u2003v0.7.1\u2003\u2003\u2003Ability to set jshintrc option to true to use jshint's native ability for finding .jshintrc files relative to the linted files.\r\n2013-10-23\u2003\u2003\u2003v0.7.0\u2003\u2003\u2003Update to jshint 2.3.0.\r\n"
5142,'matsko',"docs: cannot find several services when searching their names\nSeveral services do not pop up when you search for them. Does this belong in the angularjs.org repo?\r\n\r\ncontroller\r\nq (search term too short)\r\nfilter (also doesn't find filterProvider)\r\nhttp (but httpBackend finds it!)\r\n\r\nalso, when you search for 'directive', none of the results are immediately related. you can only find '$compileProvider', not even '$compile'. Since directive is such an important term in angular, there should definitely be a connection here. I think btford's idea to relate directives more to the underlying compile concept is well intended, but it now the guide is completely devoid of any meaningful directive documentation, so it's hard for beginners (that might have heard of directives) to find the relevant docs.\r\n\r\nUnfortunately, I wasn't able to find where the keywords for lunr are indexed (if this is still used)"
5139,'matsko','[ngAnimate] $timeout and $evalAsync inside $destroy event\n### Overview of the issue\r\n\r\nWe all know the $destroy got broadcasted before DOM removal. Inside $destroy listener, I put $evalAsync and $timeout, and I found an inconsistence\r\n\r\nWithout animation\r\nThe $evalAsync got called before DOM removal\r\nThe $timeout got called AFTER DOM removal\r\n\r\nWith animation\r\nThe $evalAsync got called before DOM removal\r\nThe $timeout got called BEFORE DOM removal\r\n\r\n### Motivation for or Use Case\r\nI want to know when an element is removed to perform customized relayout\r\n\r\nAngular Version(s) - 1.2.2\r\nBrowsers and Operating System - Chrome 31\r\nReproduce the error - http://plnkr.co/edit/WmdUWGcp8W5Otc6rcJ5k?p=preview\r\nSuggest a Fix - Only broadcast $destroy after animation has ended?'
5137,'IgorMinar','fix($sanitize): Use same whitelist mechanism as $compile does.\n$sanitize now uses the same mechanism as $compile to validate uris.\r\nBy this, the validation in $sanitize is now more general and can be\r\nconfigured using $compileProvider#imgSrcSanitizationWhitelist and\r\n$compileProvider#aHrefSanitizationWhitelist.\r\n\r\nThis commit also refactors the linky filter to use $sanitize as a\r\nservice instead of directly referencing private functions of $sanitize.\r\n\r\nFixes #3748.'
5136,'matsko','"ng-repeat-content" use case of ng-repeat\nI have a list of objects that are either a `text` or an `image` based on a `.type` property. I want to print them out in a `<div class="list">` by using `ng-if`, but **without any additional markup**.\r\n\r\nI want this:\r\n\r\n    <div class="list">\r\n        <span class="text">Item1 text</span>\r\n        <span class="text">Item2 text</span>\r\n        <img src="image/item3/src.jpg" />\r\n        <span class="text">Item4 text</span>\r\n        <img src="image/item5/src.jpg" />\r\n        <img src="image/item6/src.jpg" />\r\n        ...\r\n    </div>\r\n\r\nI have really hard times getting through the syntax. All cases seem to be covered by `ng-repeat` that I can\'t believe such an obvious one is not. If I\'m wrong then at lest the docs should be updated. '
5131,'matsko','fix(ngAnimate): ensure animations are disabled upon bootstrap for structurual animations\nCloses #5130'
5130,'matsko',"structural animations should not animate on bootstrap\nSince enter/leave/move all have a post digest animation, they end up performing an animation when the page loads. We need to only enable the animation after the second digest has run so that strucrtual animations won't render when the page loads."
5118,'caitp',"$locationChangeStart handler called outside of $apply/$digest\nI just upgraded to 1.0.8 and noticed that $locationChangeStart is now broadcast when the user hits the back button.\r\n\r\nHowever, the behavior is inconsistent with normal location changes wrt $apply/$digest. Normally, the event handler for $locationChangeStart is called within $apply/$digest, but that's not the case when the user hits the back button.\r\n\r\nDemonstration of the problem:\r\n\r\nhttp://plnkr.co/edit/EiZVMK?p=preview"
5109,'vojtajina',"fix(jqLite): Support unbinding event handler self within handler\nIf an event handler unbinds itself, the next event handler on the same\r\nevent and element isn't run.\r\n\r\nThis works fine in jQuery, and since jqLite doesn't support `.one()` (to bind handlers that only run once), this\r\nmight be a common use case.\r\n\r\nI also suggest backporting this to the 1.0.x releases if those are still being maintained."
5108,'tbosch',"fix(ngSanitize): prefer textContent to innerText to avoid layout trashing\ninnerText depends on styling as it doesn't display hidden elements.\r\nTherefore, it's better to use textContent not to cause unnecessary\r\nreflows. However, IE<9 don't support textContent so the innerText\r\nfallback is necessary. Note that we need to check for undefine\r\nand not just reverse the order of these two since for an empty string\r\ninnerText would still be checked and a reflow would occur.\r\n\r\nFix #4720."
5106,'matsko','keyframe animations are blocked too for long before active animation\nSince keyframe animations are blocked in 1.2.2 until the active animation kicks in this causes JS callbacks not to be able to perform animations during `addClass` and `removeClass` animations (as well as during structural animations) since `none 0s` is applied to the inline style.'
5105,'tbosch',"$http not recognize 40X(401,403,405...) errors on iOS\nWhen I use the developer tool I can see that the status code is 403/401/405.. but the $http recognize it as 200.\r\n\r\n**this bug happened in phonegap3.1.0 with ios6**(I didn't tried yet with ios safari)\r\n\r\nThis is really weird.. because I just find out it works as excepted in my firefox/chrome.."
5103,'petebacondarwin',"inconsistent $setValidity to true\nwhen i will set ngModelCtrl.$setValidity('name', true) it does not work, but ngModelCtrl.$setValidity('name', false) it works perfectly\r\n```\r\nangular.module('directives', ['services'])\r\n\t.directive('amValidateName', ['validate', function (validate) {\r\n\t\treturn {\r\n\t\t\trestrict: 'A',\r\n\t\t\trequire: 'ngModel',\r\n\t\t\tlink: function (scope, elm, attrs, ngModelCtrl) {\r\n\r\n\t\t\t\tngModelCtrl.$parsers.unshift(function (viewValue) {\r\n\r\n\t\t\t\t\tif (viewValue == '') {\r\n\t\t\t\t\t\tngModelCtrl.$setPristine();\r\n\t\t\t\t\t\treturn viewValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvalidate.serverRequest('name', viewValue, function (data, status) {\r\n\r\n\t\t\t\t\t\tif (status !== 200) {\r\n\t\t\t\t\t\t\tscope.info.name = data;\r\n\t\t\t\t\t\t\tngModelCtrl.$setValidity('name', false);\r\n\t\t\t\t\t\t\treturn undefined;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tngModelCtrl.$setValidity('name', true);\r\n\t\t\t\t\t\tscope.info.name = data;\r\n\t\t\t\t\t\tconsole.log(ngModelCtrl.$valid);\r\n\t\t\t\t\t\tconsole.log(ngModelCtrl.$invalid);\r\n\t\t\t\t\t\treturn viewValue;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t});\r\n\r\n\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}])\r\n```\r\nlook at code console.log(ngModelCtrl.$valid), it shows me  false and console.log(ngModelCtrl.$invalid) it show me true, that happens after i set ngModelCtrl.$setValidity('name', true). I have figure out too, when i use angular version 1.0.8 then works well, but the newest angular version 1.2.2, it does not work at all. Please fix the error."
5099,'caitp',"Inconsistent angular.element.scope() behaviour when using templateUrl in directive\n\r\nHere's the [example](http://plnkr.co/edit/YrEUeT943qTTndz3xIqG?p=preview) that demonstrates the issue. Scope ids should not match. However it [works](http://plnkr.co/edit/pQWUGlL0xfLp1902gqqb?p=preview) when using inline template.\r\nIt also works correctly when using [jQuery v1.10.2 and templateUrl](http://plnkr.co/edit/fVvchG3po5T3orPKUM9g?p=preview)."
5096,'btford','chore: add script for updating bower repos\n'
5089,'IgorMinar','Fixed inconsistency in $location.path() behaviour on the $locationChangeStart  event when using back/forward buttons in the browser or manually changing the url in the address bar.\nThis is related to https://github.com/angular/angular.js/issues/4989'
5084,'IgorMinar','fix(ngAnimate): correctly retain and restore existing styles during and after animation\nCloses #4869'
5080,'petebacondarwin',"chore(mocks): wrap angular-mocks.js in closure\nThe `use strict;` that was at the top of this file was bleeding into other files and preventing the use of other test helpers that don't use strict mode. This was in a TODO so I figured it just needed to get committed :)"
5073,'IgorMinar',"chore(docs): remove Disqus comments\nWe don't actively moderate these comments, and they range from\r\nout of date, to inflammatory, to spam. Going forward, improvements\r\nto the docs should be done via a PR, and questions should go on\r\nStackOverflow where they can be curated and kept up to date by\r\nAngularJS developers who help out there."
5069,'tbosch','AngularJS is throwing "TypeError: Cannot read property \'childNodes\' of undefined" when using DOM elements that trigger directives in ng-view\nDear angular guys,\r\n\r\nafter upgrading AngularJS from version 1.0.8 to 1.2.1 we\'ve encountered an exception being thrown in compositeLinkFn on line 5539:\r\n```\r\nTypeError: Cannot read property \'childNodes\' of undefined\r\n    at compositeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.js:5539:36)\r\n    at compositeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.js:5539:13)\r\n    at publicLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.js:5444:30)\r\n    at boundTranscludeFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.js:5555:21)\r\n    at controllersBoundTransclude (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.js:6145:18)\r\n    at update (http://code.angularjs.org/1.2.1/angular-route.js:838:13)\r\n    at Scope.$broadcast (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.js:11851:28)\r\n    at http://code.angularjs.org/1.2.1/angular-route.js:549:26\r\n    at wrappedCallback (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.js:10597:81)\r\n    at wrappedCallback (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.js:10597:81) \r\n```\r\nThis error seems to occur only when the routing module is in use and tags are nested within the ng-view container. At least one of these tags must also match any angularjs directive (such as a-tags or form-tags).\r\n\r\n**Reproducable:** always\r\n**Browsers:** Chrome 31, Firefox 25 and IE 10\r\n**Operating system:** Windows 8.1\r\n\r\n**Steps to reproduce:**\r\n* Create a new html file\r\n* Add the following content to the newly created file:\r\n\r\n```html\r\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">\r\n<html ng-app="test">\r\n<head>\r\n  <title></title>\r\n  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.1/angular.js"></script>\r\n  <script type="text/javascript" src="http://code.angularjs.org/1.2.1/angular-route.js"></script>\r\n  <script type="text/javascript">\r\n    angular.module(\'test\', [\'ngRoute\'])\r\n               .config([\'$routeProvider\', function($routeProvider) {\r\n                    $routeProvider.when(\'/\', {\r\n                        template: \'Hello world!\'\r\n                    });\r\n               }]);\r\n  </script>\r\n</head>\r\n<body>\r\n  <div ng-view>\r\n    <div>\r\n        <a href="#"></a>\r\n    </div>\r\n  </div>\r\n</body>\r\n</html>\r\n```\r\n\r\n* Open the file in any browser and watch the console\r\n\r\nAs soon as the &lt;a&gt;-Tag is removed, the exception disappears. This issue might be related to #2532.'
5065,'petebacondarwin','refactor: simplify conditional assignment statements via ternary operator\n'
5064,'matsko',"ngAnimate: after second animate.enter click events don't work\nHi guys!\r\n\r\nI have next issue:\r\n\r\nI have some custom directive which append or remove some cached element. When I add element using ngAnimate second time ng-click directive inside it don't work. \r\n\r\nDemo http://jsfiddle.net/7attv/\r\n\r\nStep to reproduce:\r\n\r\n1. click on button (see an alert)\r\n2. unchecked checkbox\r\n3. check checkbox\r\n4. click on button (alert wont appears)"
5060,'btford','Transclusion breaks in some scenarios due to a bug fix\nThis bug fix https://github.com/angular/angular.js/commit/eed299a31b5a6dd0363133c5f9271bf33d090c94 is breaking some transclusion scenarios and does not seems to have  a work around. \r\n\r\nThe bug author is removing any thing inside the transclusion container which is causing the problem. Basically, he was asking for an empty container for transclusion.\r\n\r\nHere is an example I am trying to do with bootstrap add on items with form elements. \r\nPlunker with Angular 1.0.7 which works http://plnkr.co/edit/QT51rM7HOweE6tdmblEM\r\nSame example with Angular 1.2.1 which does not work \r\nhttp://plnkr.co/edit/bQcj6gXwbK7YJe7bGqUa\r\n'
5054,'matsko','Broken ngRepeat directive in angular.js 1.2\nHi,\r\nI am currently using angular.js 1.2.0 in my projects and I stumbled across some problems with ngRepeat. The problem occurs, when i move some of the ngRepeat\'s rendered elements into another place in DOM. Sample app where the problem occurs can be found here: http://kamilkp.co.nf/brokenNgRepeat/\r\n\r\nYou need to:\r\n1) click "reorder first two items" button\r\n2) click "replace list model" button.\r\n\r\nFirst action takes the second ngRepeated div detaches it and places it as the first element in the containter (using simple jQuery detach and prependTo). The second action replaces the ngRepeat "items" array with a new array. This causes a "cannot call method insertBefore of undefined" error.\r\n\r\nAs opposed to angular 1.2.0 ngRepeat directive the same app (and same scenario) works as expected with angular 1.1.4 (http://kamilkp.co.nf/workingNgRepeat/)\r\n\r\nYou can easily "x-ray" both apps with Chrome dev tools and they should be pretty straightforward.\r\n\r\nThis issue is super annoying and it exists also in 1.2.0 rc3 and rc2. Up until now i\'ve been copying old angular ngRepeat directive from 1.1.4 version along with $animator and $animation services to work. But now that i have some awesome animations with new ngAnimate API i\'m stuck ;/\r\n\r\nThe only way to make the new ngRepeat directive work is to manually move the html comment node "end ngRepeat" along with the element being moved (i see that now that comment is present after each ngRepeated element, not after last element as it was in the old version). But doing that is just sad ;(\r\n\r\nP.S. in my projects i need this kind of behaviour to work because i implement some complex animations which consist of e.g. moving elements beetwen their corresponding arrays.'
5053,'matsko','ngAnimate addClass/removeClass: Callback after addClass, as well as after transitionend\nSo, there are a few things --- In some cases, adding a class needs to be paired with an actual DOM operation (which can\'t take place before adding the class, this would lead to an instant jump) --- So having a sort of *before transition, after adding transition class* callback would be a pretty big deal.\r\n\r\nFollowing this, on most browsers you won\'t see a transitionend event fired immediately (because no transition will have occurred if the class is added before a DOM operation such as changing the height or position or something of the animated element) happens --- So, if a transitionend were to happen immediately, the first instance should be ignored (if supplied with a "DOM manipulation"/pre-transition callback)\r\n\r\nFinally, the proper transitionend/post-duration callback should not trigger the doneCallback until after it\'s actually completed (or alternatively, why not have `$animate.addClass/removeClass/enter/leave()` return a promise?\r\n\r\nI am not talking about "module animations" registered via `module.animation()` here, because in some cases these are not practical to use.\r\n\r\nClearly there are some breaking changes listed, although I think these changes could be written in a way which would provide API compatibility with 1.2.0. I may try to get something like this working after matsko@\'s ngAnimate fixes are merged.\r\n\r\n(These views come from attempting to add some ngAnimate functionality to angular-ui/bootstrap, which has typically required listening for transitionend or waiting for a delay/duration manually)'
5049,'IgorMinar',"$http interceptor responseError - $resource doesn't get updated with `new response`\nI want to implement `retry saving with different data` feature.\r\n\r\nI don't know if I am doing it wrong, but according to docs, `responseError` can return new promise that should resolve with `new response` or reject with an error response.\r\n\r\nFrom what I understand, the `new response` will be the one that will eventually get passed to `transformResponse`.\r\n\r\nIt seems that even if the promise resolves with `new response`, the original `$resource` instance doesn't get updated with the new `response` values.\r\n\r\nI hope this pseudo code can illustrate what seems to be the problem:\r\n\r\n```javascript\r\n  function responseErrorInterceptor(error){\r\n    if(canRecover){\r\n      // retry - save the model again with the data suggested by the server\r\n      var Model = $injector.get('Model');\r\n      var tmp = new Model(error.config.data);\r\n      var dfd = $q.defer();\r\n      tmp.$save(function(response){\r\n       dfd.resolve(response);\r\n        // the original model that initiated $save doesn't get updated with the\r\n      });\r\n      return dfd.promise;\r\n    }\r\n    return $q.reject(error);\r\n  }\r\n\r\n  var Model = $resource('url',{},{\r\n    save:{\r\n      method:'POST',\r\n      interceptor:{\r\n        responseError : responseErrorInterceptor\r\n      }\r\n    }\r\n  });\r\n```\r\n \r\n\r\n\r\n"
5047,'vojtajina',"fix(ngMock window.inject): Remove Error 'stack' property changes\nRecent browsers, particularly PhantomJS 1.9.2 and Safari 7.0\r\ntreat the stack property as non-configurable and unwritable.\r\n\r\nBecause window.inject captures the stack at the time of the inject,\r\nand attempts to insert it into a captured throw from the injected\r\nfunction by modifying e.stack, a meaningless error message and\r\nstack is thrown instead.\r\n\r\nThis commit inserts two tests exposing the problem, and implements\r\na solution passing those tests.  The solution provides an object that\r\nmimics the old Error object, with the additional stack information, where\r\npossible (Error is not standardized on stack, line and file information), and\r\nthen captures the toString function from the Error object prototype.\r\n\r\nAn exception is IE8 or less, which fails to yield meaningful messages\r\nunder both the status quo and this instant commit.  Accordingly, the test\r\nmemorializes the current IE8 behavior as a passing example.\r\n\r\nmodified:   src/ngMock/angular-mocks.js\r\nmodified:   test/ngMock/angular-mocksSpec.js"
5046,'tbosch','urlUtils.js#isSameOrigin fails on IE11\nWhen executing our unit tests on IE11 `urlUtils.isSameOrigin` is not working properly and by this `$sce` does not work and causes a lot of other tests to fail.'
5045,'petebacondarwin','refactor($sce): Use $sniffer instead of $document for feature detection.\nAlso adds `$sniffer.msieDocumentMode` property.\r\n\r\nFixes #4931.'
5044,'IgorMinar','Content-Encoding header dropped\nI don\'t know what\'s going on here, but when I make this request via XmlHttpRequest it works, but when I make it with Angular my Play Framework server is reporting it does not receive the Content-Encoding header.\r\n\r\n     $http({\r\n        url: \'/myurl\',\r\n        method: \'POST\',\r\n        data: compressed,\r\n        headers: {\r\n          "Content-Type": \'application/x-www-form-urlencoded\',\r\n          "Content-Encoding": \'deflate\'\r\n        }\r\n      })\r\n      .success(function(data) {\r\n          // do something\r\n      });\r\n'
5041,'jeffbcross','urlResolve pathname fix for file protocol + windows should be moved to location\nThe private `urlResolve` method was recently patched to strip the drive name from path names on windows when using the file protocol.\r\n\r\nhttps://github.com/angular/angular.js/commit/f925e8caa6c51a7d45ca9ead30601ec2e9d4464c\r\nhttps://github.com/angular/angular.js/commit/89f435de847635e3ec339726e6f83cf3f0ee9091\r\n\r\nWhile this fix was necessary to make the $location service work correctly with the file protocol on windows, the fix should be implemented in $location instead of in urlResolve. The low-level behavior is actually desirable given that the notion of relative paths in the file protocol is not legitimate, and the urlResolve method should not be very opinionated on how its properties are used by different angular services.'
5034,'matsko','docs(ngdoc): Allow multiple examples to use the same file names\n'
5021,'matsko',"Animations: animation code is executed for Comment Nodes, throwing exceptions\nHello,\r\n\r\nin angular-animate.js:\r\n\r\nanimateSetup() method and animateRun() method do not check if current node is an Element Node and try to apply styles there, throwing exceptions (no style attribute to set style property). This happens on Comment Nodes (e.g. nodes that were commented out by ng-if ). A fix was added in 1.2 for the same issue in cancelChildAnimations() but I guess it's needed in the other 2 methods as well (issue found in latest 1.2.1 version stable version)\r\n\r\nThe fix was \r\n\r\n        var node = element[0];\r\n        if(node.nodeType != ELEMENT_NODE) {\r\n          return;\r\n        }\r\n\r\nin the beginning of  every method\r\n\r\nZissis"
5019,'jeffbcross','fix(angular.encodeUriSegment): do not encode semi-colon\nRFC 3986 indicates that ; is not encoded as part of the URI, as is the case\r\nwith other members of sub-delim. Changed encodeUriSegment to match that\r\nbehaviour, along with the corresponding spec.\r\n\r\nThis was causing a practical issue with Java servers that append `;jsessionid=...` to the path. The `;` was encoded, leading to the following error in PhantomJS as it continually saw the current URL as different to the `$location.absUrl()` which had been encoded:\r\n\r\n```\r\nError: [$rootScope:infdig] 10 $digest() iterations reached. Aborting!\r\nWatchers fired in the last 5 iterations: [["fn: $locationWatch; newVal: 7; oldVal: 6"],["fn: $locationWatch; newVal: 8; oldVal: 7"],["fn: $locationWatch; newVal: 9; oldVal: 8"],["fn: $locationWatch; newVal: 10; oldVal: 9"],["fn: $locationWatch; newVal: 11; oldVal: 10"]]\r\n```\r\n\r\nI note that the specs previously called out `;` specifically for being encoded, which was introduced in 9e30baad3feafc82fb2f2011fd3f21909f4ba29e, and that it has been in place for some time. Is there a reason this might have been needed that I\'ve missed?\r\n\r\nI also note that the same code is in `ngResource`, but I\'m unfamiliar with the codebase and what impact it would have to change that as well. Should the code in there be updated as well?'
5017,'btford',"Unit tests fail when run in Australia\nI'm receiving the same error reported in this comment: https://github.com/angular/angular.js/pull/3474#issuecomment-23241136\r\n\r\nI'm also in Australia/Sydney.\r\n\r\nI was able to skip with `--force`, but it'd be good to get a clean bill of health for contributing!\r\n\r\n```\r\nChrome 31.0.1650 (Mac OS X 10.9.0) ngMock TzDate should fake getHours method FAILED\r\n\tExpected 4 to be 3.\r\n\tError: Expected 4 to be 3.\r\n\t    at null.<anonymous> (/Users/brett/scm/github/angular.js/test/ngMock/angular-mocksSpec.js:60:29)\r\n\tExpected 1 to be 0.\r\n\tError: Expected 1 to be 0.\r\n\t    at null.<anonymous> (/Users/brett/scm/github/angular.js/test/ngMock/angular-mocksSpec.js:64:29)\r\n\tExpected 22 to match 21.\r\n\tError: Expected 22 to match 21.\r\n\t    at null.<anonymous> (/Users/brett/scm/github/angular.js/test/ngMock/angular-mocksSpec.js:68:29)\r\n```"
5015,'IgorMinar','Animate fixes\nCloses #4892\r\nCloses #4902\r\nCloses #4944\r\nCloses #4949\r\nCloses #4952\r\nCloses #4960\r\nCloses #4265\r\nCloses #5014 \r\nCloses #5018'
5007,'IgorMinar',"angular docs aren't being tested as part of the CI process?\nangular 1.2.1 docs have three issues that were found by docs/spec/ngdocSpec.js and docs/spec/sourceLinkSpec.js, but apparently not flagged by the CI server? How did this get missed...?"
5001,'btford','ngClass bug with ng:class and ng:click on one element\nIf you have `ngClass` and `ngClick` directive on one element and write them as `ng:class=...` and `ng:click=...`, the class attribute will always be empty.\r\n\r\nExample: http://plnkr.co/edit/t66oOw'
5000,'IgorMinar','Ngrepeat multiline\nallow new line characters in the expression. This allows cleaner writing in the templates - for instance:\r\n\r\n```\r\n<div ng-repeat="item in myItems\r\n    | filter: searchString\r\n    | orderBy: \'name\'\r\n    track by \'id\'">\r\n```'
4994,'vojtajina','Regression in ng-mock generates unworkably meaningless messages for unit testing on Webkit browsers.\nThe current version of ngMock is breaking, generating meaningless error messages for tests when used with some Webkit-based browsers, although it is working fine in Chrome.  For example:\r\n\r\n```javascript\r\n 1 \'use strict\';\r\n 2 describe(\'failure in ng-mocks\', function(){\r\n 3   beforeEach(inject(function($compile, $rootScope){\r\n 4     $compile(\r\n 5       \'<div ng-include="\\\'nofilehere\\\'"></div>\'\r\n 6     )($rootScope);\r\n 7     $rootScope.$digest();\r\n 8   }));\r\n 9   it(\'displayed by example\', function(){\r\n10     console.log(\'hello, world\');\r\n11   });\r\n12 });\r\n```\r\n\r\nThe test properly fails at line 5 because "nofilehere" does not exist and has not been inserted into the template cache.  We get a very meaningful message when driving this with karma under Chrome (and it worked until recently on most browsers):\r\n\r\n```\r\nError: Unexpected request: GET nofilehere\r\n(stack trace)\r\n```\r\n\r\nAt this time, however, PhantomJS and Chrome instead give the following:\r\n\r\n```\r\nTypeError: Attempted to assign to readonly property.\r\n    at workFn (/Users/werdna/errors/app/bower_components/angular-mocks/angular-mocks.js:2122)\r\n```\r\n\r\nThis occurs because the error is at one time caught at line 2122 in the following angular-mocks code:\r\n\r\n```javascript\r\n2116       for(var i = 0, ii = blockFns.length; i < ii; i++) {\r\n2117         try {\r\n2118           /* jshint -W040 *//* Jasmine explicitly provides a `this` object when calling functions */\r\n2119           injector.invoke(blockFns[i] || angular.noop, this);\r\n2120           /* jshint +W040 */\r\n2121         } catch (e) {\r\n2122           if(e.stack && errorForStack) e.stack +=  \'\\n\' + errorForStack.stack;\r\n2123           throw e;\r\n2124         } finally {\r\n2125           errorForStack = null;\r\n2126         }\r\n2127       }\r\n```\r\nand some recent versions of Webkit Error messages now have read-only \'stack\' properties.  (Both configurable and writable are false.)  Thus, line 2122 fails because e.stack is unwritable, and the new TypeError is thrown, losing the old stack when the TypeError is created.  \r\n\r\nUnfortunately, I couldn\'t think of any other way to rethrow an Error instance with a modified stack string, and was unable to come up with a meaningful pull request.\r\n\r\nUnfortunately, this makes Unit testing difficult, and whatever benefit derives from inserting the errorForStack message is lost to me now.\r\n\r\nAny thoughts?'
4993,'matsko',"feature/issue: more useful module.animation callbacks\n**module.animation-enter only intercepts _after_ the element has been added to the DOM**\r\n\r\nthis is a problem when you want to animate the movement of the elements that change location after the new element insertion\r\n\r\n**module.animation-leave only intercepts _before_ the element has been removed from the DOM**\r\n\r\nagain this is a problem when you want to animate the movement of the elements change location after the new element was removed (this is less problematic since I manage to run the movement animation using $timeout in a function returned from 'leave' (but still... it's an ugly hack))"
4992,'btford','ng-bind-html with unsafe content\nHey,\r\n\r\nI\'m currently working on Angular 1.2.\r\nI use backend to generate some complexe menu to display in my view.\r\nI use angular to make binding and other much more easier, but when i want to include my complexe menu in my view, nothing work (ng-click..).\r\n\r\nFrom server (sample example, menu is more complex):\r\n```javascript\r\n[{\r\n   name: "Item1",\r\n   menu: "<ul><li><a href="#" ng-click="edit(1)"></li><li><a href="#" ng-click="remove(1)"></li></ul>"\r\n}, {...}]\r\n```\r\n\r\nNg-repeat on item:\r\n```javascript\r\n<tr ng-repeat="value in serverProv">\r\n    <td>{{value.name}}</td>\r\n    <td ng-bind-html="value.menu"></td>\r\n</tr>\r\n```\r\n\r\nng-click is not fire and page reload when i click on edit or remove.\r\nI don\'t know how to do it. How can i make a ng-bind-html-unsafe like?\r\n\r\nThank\'s\r\n'
4989,'IgorMinar',"Behavior of $location.path() inconsistent when back and forward buttons are used\nExample plunk: http://plnkr.co/edit/DA3Oq6?p=preview\r\n\r\nIn a handler for the `$locationChangeStart` event, a call to `$location.path()` will normally return the URL being navigated to. But if you use the forward or back button (or use `history.back()` or `history.forward()`) it will return the URL being navigated from.\r\n\r\nThis isn't the case with the `$locationChangeSuccess` event, which behaves as expected."
4987,'caitp','$http.jsonp fails when the response body is empty\nIf the response to a JSONP request is empty, AngularJS $http.jsonp thinks an error occurred (version 1.2.1 tested).\r\n\r\njQuery $.ajax works fine in this case.\r\n\r\n## Investigation\r\n\r\nThis is due to the following lines inside function [`createHttpBackend()`](https://github.com/angular/angular.js/blob/v1.2.1/src/ng/httpBackend.js#L36) (see comments inside code snippet):\r\n\r\n```JavaScript\r\nvar jsonpDone = jsonpReq(url.replace(\'JSON_CALLBACK\', \'angular.callbacks.\' + callbackId),\r\n    function() {\r\n  if (callbacks[callbackId].data) {\r\n    completeRequest(callback, 200, callbacks[callbackId].data);\r\n  } else {\r\n    // callbacks[callbackId].data is undefined thus the if test fails\r\n    completeRequest(callback, status || -2);\r\n  }\r\n  delete callbacks[callbackId];\r\n});\r\n```\r\n\r\nLater on [`transformResponse()`](https://github.com/angular/angular.js/blob/v1.2.1/src/ng/http.js#L740) is performed:\r\n\r\n```JavaScript\r\nfunction transformResponse(response) {\r\n  var resp = extend({}, response, {\r\n    data: transformData(response.data, response.headers, config.transformResponse)\r\n  });\r\n  return (isSuccess(response.status))\r\n    ? resp\r\n    : $q.reject(resp);\r\n}\r\n```\r\n\r\nAnd [`isSuccess()`](https://github.com/angular/angular.js/blob/v1.2.1/src/ng/http.js#L81) checks for the HTTP status code:\r\n\r\n```JavaScript\r\nfunction isSuccess(status) {\r\n  return 200 <= status && status < 300;\r\n} \r\n```\r\n\r\nAnd of course returns false since `status` value is 0.\r\n\r\n\r\n#### What jQuery does?\r\n\r\nhttps://github.com/jquery/jquery/blob/2.0.3/src/ajax/script.js#L28\r\nSee comments inside code snippet\r\n\r\n```JavaScript\r\njQuery.ajaxTransport( "script", function( s ) {\r\n\tif ( s.crossDomain ) {\r\n\t\tvar script, callback;\r\n\t\treturn {\r\n\t\t\tsend: function( _, complete ) {\r\n\t\t\t\tscript = jQuery("<script>").prop({\r\n\t\t\t\t\tasync: true,\r\n\t\t\t\t\tcharset: s.scriptCharset,\r\n\t\t\t\t\tsrc: s.url\r\n\t\t\t\t}).on(\r\n\t\t\t\t\t"load error",\r\n\t\t\t\t\tcallback = function( evt ) {\r\n\t\t\t\t\t\tscript.remove();\r\n\t\t\t\t\t\tcallback = null;\r\n\t\t\t\t\t\tif ( evt ) {\r\n\t\t\t\t\t\t\tcomplete( evt.type === "error" ? 404 : 200, evt.type );\r\n\t\t\t\t\t\t\t// Whatever the HTTP response is, HTTP status is always 200 OK\r\n\t\t\t\t\t\t\t// FYI in our case evt.type value is "load"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\r\n\t\t\t},\r\n\t\t\tabort: function() {\r\n\t\t\t\tif ( callback ) {\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n});\r\n```\r\n(btw jQuery coding conventions are really ugly, spaces everywhere WTF, that\'s why AngularJS is so much better :) )\r\n\r\n#### What should be done instead?\r\n\r\nOne cannot get JSONP responses HTTP status code, thus whenever a JSONP response is received, HTTP status code should be 200.\r\n\r\nConsidering this, the following if test from [`createHttpBackend()`](https://github.com/angular/angular.js/blob/v1.2.1/src/ng/httpBackend.js#L36) is useless in the case of JSONP:\r\n\r\n```JavaScript\r\nif (callbacks[callbackId].data) {\r\n  completeRequest(callback, 200, callbacks[callbackId].data);\r\n} else {\r\n  completeRequest(callback, status || -2);\r\n}\r\n```\r\n\r\nand should be instead:\r\n\r\n```JavaScript\r\n  completeRequest(callback, 200, callbacks[callbackId].data);\r\n```\r\n\r\n\r\n## Why an empty JSONP response?\r\n\r\nGoogle OAuth2 implementation allows to revoke a token by calling https://accounts.google.com/o/oauth2/revoke?token=0001\r\nSee https://developers.google.com/accounts/docs/OAuth2WebServer#tokenrevoke\r\nSee https://developers.google.com/+/web/signin/#revoking_access_tokens_and_disconnecting_the_app\r\n\r\nGoogle does not allow CORS to perform this call, it must be JSONP.\r\n\r\nIf the call succeed and the token is valid, /oauth2/revoke returns HTTP 200 OK without any data inside the HTTP body response.\r\n\r\n\r\n## Example/Plunker\r\n\r\nI\'ve written an example to test with Google OAuth2: http://plnkr.co/edit/1fl7zi?p=preview\r\n\r\nUnfortunately, a OAuth2 token expires and when playing with this example you need to generate your own token.\r\nI don\'t have a public server of my own that returns JSONP responses.\r\n\r\nI\'ve also tried to implement a Jasmine test using $httpBackend to reproduce the case without success.\r\n'
4969,'tbosch',"ng-transclude doesn't work inside ng-switch-default\nWhen nesting ng-transclude inside an ng-switch-default directive the following error is produced:\r\n```\r\nError: [ngTransclude:orphan] Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found.\r\n```\r\n\r\nHere it is reproduced:\r\nhttp://plnkr.co/edit/3CEj5OY8uXMag75Xnliq?p=preview"
4954,'matsko','ngAnimate insertBefore error\nFirst I see this error\r\n![2013-11-14 16 08 14](https://f.cloud.github.com/assets/576653/1540646/bd4c8910-4d25-11e3-871a-d5465a165594.png)\r\n\r\nThen I go there\r\n![2013-11-14 16 08 36](https://f.cloud.github.com/assets/576653/1540647/bd5c12b8-4d25-11e3-9b20-26daa91cc61a.png)\r\n\r\nAnd do this\r\n![2013-11-14 16 09 29](https://f.cloud.github.com/assets/576653/1540645/bd31fc6c-4d25-11e3-9429-234fe3498025.png)\r\n\r\nProblem solved till next angular.js update.\r\nWhat am I doing? )'
4952,'matsko','( 1.2.0 ) ngShow and class attribute with expression don\'t work together\nHello, I\'ve found a problem with a Angular 1.2.0\r\nng-hide class is omitted when tag contains ngShow directive and class attribute with angular expression inside:\r\n``` html\r\n  <div ng-show="divId == 1" class="{{additionalClass}}">Div 1</div>\r\n```\r\nWhen \'additionalClass\' value is updated in controller - element is shown no matter what ng-show value currently is.\r\nI made a plunker that shows this problem:\r\nhttp://plnkr.co/edit/oZ7oskJPtkqTMM0gmrTr?p=preview\r\n\r\nTested it with 1.0.8, works without any problems.'
4949,'matsko',"(1.2 regression) ngAnimate clobbers ngClass\n@IgorMinar @petebacondarwin @matsko I was able to reproduce the issue finally:\r\nhttp://plnkr.co/edit/I57CKjdHBZeqEHtZ4Bn9?p=preview\r\n\r\nIn this example, ngClass applies 3 classes to the element. After a two second timeout, ngClass removes one of the classes. But if ngAnimate is declared as a dependency, ngAnimate removes **all 3 classes**.\r\n\r\nBut *only if* any of those classes has a transition duration.\r\n\r\nThe place where this happens is during ngAnimate's `cleanup` phase:\r\n[element.removeData(NG_ANIMATE_STATE)](https://github.com/angular/angular.js/blob/master/src/ngAnimate/animate.js#L757)\r\n\r\nThis was maddening to track down :)\r\n "
4944,'matsko','ngAnimate: 1.2 using ng-class to apply an animation will restart animation secondary class binding updates\n```html\r\n  <div class="pane" ng-class="{ open: open, \'edit-mode\': isEditing }">\r\n```\r\n\r\na transition is on the open class to handle sliding in and out the pane, but if a secondary class binding updates, in this example the \'edit-mode\' class then entire open animation will restart by adding open-add and open-add-active\r\n\r\n'
4942,'tbosch',"fix(urlUtils): made removal of windows drive from path safer\nPrior to this fix, the urlResolve method would automatically\r\nstrip the first segment of a path if the segment ends in a colon.\r\nThis was to correct undesired behavior in the $location service\r\nusing the file protocol on windows in multiple browsers (see #4680).\r\n\r\nHowever, there could be cases where users intentionally \r\nhave first path segments that end in a colon \r\n(although this conflicts with section 3.3 of rfc3986).\r\n\r\nThe solution to this problem is an extra check to make sure\r\nthe first path segment of the input url does not end with a colon,\r\nto make sure we're only removing undesired path segments.\r\n\r\nFixes #4939"
4939,'tbosch',"urlUtils should only strip path segments ending with colons IF the segment does not exist in the original URL.\nThis issue is an enhancement to a [bug fix](https://github.com/angular/angular.js/pull/4928) I recently submitted, which @tbosch and I have discussed further and decided needs enhancement.\r\n\r\nThe urlResolve method will automatically strip the first segment of a path if the segment ends in a colon. This was to correct undesired behavior in the $location service using the file protocol on windows in multiple browsers (see https://github.com/angular/angular.js/issues/4680).\r\n\r\nHowever, there could be cases where users intentionally have first path segments that end in a colon (although this conflicts with section 3.3 of [rfc3986](http://tools.ietf.org/html/rfc3986)).\r\n\r\nA simple solution to this problem is to add a check to make sure the first path segment of the input url does not end with a colon, to make sure we're removing an unintentional path segment."
4935,'tbosch','Directive could not find parent directive\'s controller on AngularJS 1.2.0 when replace property is set to \'true\' \nHello\r\n\r\nWhile upgrading an application from AngularJS version 1.1.5 to 1.2.0 I ran into some issues which are related to inter-directive communication, done via directive\'s controller. In the application there\'s a parent directive and a child directive. At a certain point the child directive has to call a method of its parent directive\'s controller. Therefore the parent directive is marked as required in the child directive. One specialty about this scenario is that the parent directive uses a template which contains an ng-include directive to dynamically load a template which uses the child directive. \r\n\r\nWhen running on version 1.2.0 the child directive throws an error with the following message: "Controller \'xxx\', required by directive \'yyy\', can\'t be found!" \r\nAfter debugging and some more investigation I think the problem is related to the ng-include directive, but I\'m not 100% sure why it doesn\'t work any more with version 1.2.0. \r\n\r\nI managed to reproduce the problem on Plunker : http://plnkr.co/edit/COAkdNCYuMhpaHsWFopx   \r\n\r\nIn the example I currently use version 1.2.0 so it won\'t work but you can easily switch to version 1.1.5 to see how it should work.  \r\n\r\nThe error only happens when the \'replace\' variabel is set to \'true\'. If it is set to \'false\' everything works as expected. \r\n'
4934,'matsko',"ngAnimate: enter() and move() are unable to insert/move the new node to the first position in the parent\nngAnimate.enter and ngAnimate.move takes (element, parent, after)\r\n\r\nif after is not specified the element is inserted after the last item in the parent.\r\n\r\nthus you can't insert or move anything to position [0]. The first position you can insert into is *after* position[0] i.e at position[1].\r\n\r\nIt would make more sense to me if either: \r\n\r\n1) they took the node you wanted to insert before instead of after (it is using inserBefore internally already)\r\n\r\nor \r\n\r\n2) if you didn't specify after it inserted/moved to position 0 which is otherwise inaccessable."
4933,'vojtajina','fix($compile): secure form[action] & iframe[srcdoc]\nRequire bindings to form[action] to be $sce.RESOURCE_URL and bindings to\r\niframe[srcdoc] to be $sce.HTML\r\n\r\nCloses #4927\r\n'
4932,'petebacondarwin','fix(nodeName_): always return lowercase\nFixes #3987. Change nodeName_ to always return lowercase. Change code\r\ndirectly using .nodeName to use nodeName() instead.'
4930,'tbosch','ng-repeat should not leave junk directive fragments in the DOM\nDemonstrating the problem - http://plnkr.co/edit/GBuCj8uQkpm0H5yG3nGk?p=preview\r\n\r\nNote that the directive HTML fragments are left in the DOM although on screen the directives appear as expected, although sometimes the order of the directives is mixed up. You can use your DOM inspector to see the junk directive fragments.\r\n\r\nDelaying the application to scope of the initial array using a timeout results in expected behaviour in the DOM and on screen. Use of resolve in a route does not solve the problem.\r\n\r\nThe implications for the former problem are that classes are not applied correctly and order is not consistent.\r\n'
4928,'tbosch',"fix(urlUtils): urlUtils doesn't return right path for file:// on win\nChrome and other browsers on Windows often\r\nappend the drive name to the pathname,\r\nas described in #4680. This would cause\r\nthe location service to browse to odd\r\nURLs, such as /C:/myfile.html,\r\nwhen opening apps using file://.\r\n\r\n(I've verified CLA for primary committer of this PR)\r\n\r\nFixes  #4680"
4927,'chirayuk','ng-attr-action and ng-attr-srcdoc allow binding to Javascript\nRef:  https://code.google.com/p/mustache-security/wiki/AngularJS#The_State_of_AngularJS_1.2.0\r\n\r\n````html\r\n<html ng-app>\r\n<head>\r\n        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0-rc.2/angular.min.js"></script>\r\n</head>\r\n<body>\r\n        <form ng-attr-action="{{\'javascript:\'}}alert(1)"><button>CLICK</button></form>\r\n        <iframe ng-attr-srcdoc="{{\'<img src=x onerror=alert(1)>\'}}"></a>\r\n</body>\r\n````\r\n'
4922,'jeffbcross','script.onreadystatechange Does not exist in IE11\nIn order for Jsonp to work correctly in IE11 this is needed.'
4920,'matsko','ngAnimate fails and leaves stale items with Angular-UI Bootstrap ProgressBar\nThis can be reproduced with standard demo/integration of AngularUI bootstrap.\r\n\r\n![angularjs_progressuibugreport](https://f.cloud.github.com/assets/445208/1523644/1a95bc68-4bb9-11e3-9d58-fc58a519f92e.png)\r\n\r\nIt may be related to angular/angular.js#4716 the fixes introduced mentioned in that issue to fix Javascript errors may just be hidden and leaving stale items around.'
4917,'tbosch',"ng-form $setPristine doesn't work with nested forms\nWhen a inner form calls $setPristine() it removed ng-dirty and adds ng-pristine and then calls $setPristine on all it's child controls.\r\n\r\nBut it doesn't traverse up the dom to set $setPristine on it's parents.\r\nIt can be hard because another inner form could be in a dirty state and should be so.\r\nHow should we solve that?\r\n\r\nHere is a demo\r\nChange the field and se the header and panel header go red, but then when you blur the field only the panel header goes back.\r\n\r\nhttp://plnkr.co/edit/ekZtUG?p=preview"
4910,'petebacondarwin','Unzipping the /angular-1.2.0.zip on Windows throws errors\nWhen I download the angular zip file and extract it to my windows box, i get errors when it tries to extract ng.*.html files.\r\n\r\nhttp://code.angularjs.org/1.2.0/angular-1.2.0.zip'
4909,'jeffbcross','docs(ngdoc): fix version picker grouping\nThe grouping of the different versions was not correct for the new 1.2.0+ releases.\r\nNow versions are marked as stable only if they have an even number it the minor version\r\nposition (e.g. 1.0.8, 1.2.1, 1.2.0-abcde) and they are not an RC version, (e.g. 1.0.0rc3,\r\n1.2.0-rc2).\r\n\r\nCloses #4908'
4908,'matsko','docs app: version switcher claims that 1.2.0 is unstable\n1.2.0 and 1.2.0+ should be "stable".\r\n\r\nat this point we could just remove the unstable versions from the version switcher. no?'
4905,'jeffbcross','fix($rootScope): clear phase if an exception is raised by a watcher\nAdd calls to clearPhase() when an exception is raised by a watcher\r\nwhile a digest cycle, in order to not be stuck on `$digest` scope phase'
4904,'vojtajina','View source in 1.2.0 docs links to 1.2.0-rc.3\nThe view source button in the 1.2.0 docs links to the 1.2.0-rc.3 tag. Not a huge deal but sometimes points you to the wrong line in the source.'
4902,'matsko','ngAnimate Box Shadow disappears while animation is going.\nWhen $animate.enabled == true box shadows do not appear while the animations is going. They reappear once transition is complete.\r\n\r\nSee Plunker.\r\nhttp://plnkr.co/edit/0hnTAZJjfo2ao2whiIzr?p=preview'
4894,'tbosch','Fixing bug where ngIf adds children repeatedly if condition goes from tr...\nFix for bug described in #4893'
4892,'matsko',"Gap in ngClass switching with ngAnimate results in incorrect animations\nSee this plunkr for a demo: http://plnkr.co/edit/fwA6naUUfH55aJTXYVgm?p=preview\r\n\r\nClicking on the element should transition it's width between the values in ```.small```, ```.medium``` and ```.large```, but what is happening is that in between a class change (from small -> medium, or medium -> large), it's width is resetting. \r\n\r\nRemoving the ```ngAnimate``` dependency will show the correct behaviour, as will reverting to 1.2rc3, 1.2rc2 and prior. This may potentially tie in with a change discussed towards the bottom of #3587?\r\n\r\nThe issue seems to be due to a gap in how ```performAnimation``` calls the ```domOperation``` between ```$animate.removeClass``` and ```$animate.addClass``` calls, presumably because of separate timeouts? I verified that if the dom operations are performed immediately (in the same call stack), the issue will not occur."
4888,'petebacondarwin',"Values are not always updated with IE9 and ngDisabled\nSteps to reproduce: \r\n* Open http://plnkr.co/edit/lpvhEz?p=preview in IE9\r\n* Try clicking the 'previous' and 'next' buttons in the *bottom* row. The numeric values between the buttons are updated accordingly.\r\n* Now try clicking the buttons in the *top* row. Sometimes the numeric values are updated, sometimes they're not. It seems that clicking somewhere else on the page triggers a refresh.\r\n\r\n"
4885,'jbdeboer','angular-mocks: $timeout.flushNext() does not work\n```$timeout.flushNext(123)``` stops working since 1.2.0-rc.3. (In 1.2.0.-rc2 it works fine).\r\nIt fails with different exceptions in 1.2.0-rc.3 and 1.2.0 (release) versions:\r\n\r\nIn "1.2.0-rc.3":\r\n```\r\n\'undefined\' is not a function (evaluating \'$browser.defer.flushNext(expectedDelay)\')\r\n    at angular-mocks-1.2.0-rc.3.js:1646\r\n```\r\nIn "1.2.0":\r\n```\r\nTypeError: Attempted to assign to readonly property.\r\n    at workFn (angular-mocks-1.2.0.js:2122)\r\n```'
4882,'tbosch','fix for style attribute not being copied to the dst object\nWhen we move to 1.2 we got a lot of exceptions in the console:\r\n\r\nTypeError: Cannot read property \'length\' of undefined\r\n    at $interpolate (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js:7960:24)\r\n    at attrInterpolatePreLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js:6354:33)\r\n    at https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js:6429:44\r\n    at nodeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js:6068:13)\r\n    at compositeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js:5509:15)\r\n    at nodeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js:6082:24)\r\n    at compositeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js:5521:15)\r\n    at compositeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js:5524:13)\r\n    at publicLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js:5421:30)\r\n    at https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js:1287:27 <input type="text" style="width:100%; height:100%; background-color:{{model.background}};;width:100%; height:100%; background-color:{{model.background}};" ng-model="model.dataProviderID" title="{{model.toolTipText}}" svy-autoapply="" svymodel="{}" class="ng-isolate-scope ng-pristine ng-valid"> \r\n\r\n(and a lot more, exactly like that)\r\n\r\nthis is because angular expects that the attributes object has a "style" attribute by that name.\r\nBut angular doesn\'t copy that style tag to the dst map in the compile.js code (mergeTemplateAttributes function)\r\n\r\nWe have for example a directive called <datafield> that doesn\'t have the "style" attribute (it just have some others)\r\nthen the template of that directive does have a "style" tag in the first dom element.\r\nNow angular wants to merge all the attributes in each other. But for the style tag it seems to do something totally different then by other attributes (or even the class which also has a special copy)\r\n\r\nI made a plunker to show the problem also:\r\nhttp://plnkr.co/edit/OdFWJCmlPijE7LIOumAM?p=preview'
4874,'vojtajina',"fix(loader): don't rely on functions defined in Angular.js\nThe loader had not been tested since minErr had been implemented so was breaking the phonecat tutorial application.  Moreover I had added a call to `assertNotHasOwnProperty`, not understanding that loader does not get access to Angular.js functions.\r\n\r\nThe loader now has its own copies of minErr (via AngularFiles.js) and `assertNotHasOwnProperty`."
4872,'matsko','fix($animate): Correctly retain the old element styles when applyStyle...\n...adds new ones. Fixes #4869'
4871,'matsko','TypeError in animateSetup on deletion of repeated element when using ng-include\nPlunkr: http://plnkr.co/edit/qMFvUdi1D5JQ8yEzSWvc?p=preview\r\n\r\nThe error occurs on click on one of the "Remove this" links.\r\nI attach stack trace just in case.\r\n\r\nTypeError: Cannot set property \'transitionProperty\' of undefined\r\n    at animateSetup (http://code.angularjs.org/1.2.0/angular-animate.js:976:54)\r\n    at animateBefore (http://code.angularjs.org/1.2.0/angular-animate.js:1092:12)\r\n    at animate (http://code.angularjs.org/1.2.0/angular-animate.js:1112:37)\r\n    at Object.angular.module.config.$animateProvider.register.leave [as before] (http://code.angularjs.org/1.2.0/angular-animate.js:1178:18)\r\n    at http://code.angularjs.org/1.2.0/angular-animate.js:680:33\r\n    at Array.forEach (native)\r\n    at q (http://code.angularjs.org/1.2.0/angular.min.js:7:261)\r\n    at invokeRegisteredAnimationFns (http://code.angularjs.org/1.2.0/angular-animate.js:665:11)\r\n    at performAnimation (http://code.angularjs.org/1.2.0/angular-animate.js:643:9)\r\n    at http://code.angularjs.org/1.2.0/angular-animate.js:394:13 \r\n\r\nThis is very similar to #4548 . \r\n\r\nThe \'node\' variable should be checked if its \'nodeType\' property equals 1 (ELEMENT_NODE constant). Currently, it blows up because the node is a comment element in this case and does not have property \'style\'.'
4869,'matsko','ngAnimate 1.2 final, inline style and ngStyle are ignored during animations.\nSee plunkr for example: http://plnkr.co/edit/4Ve9tQ8ybLIjcOinOS7E?p=preview . The 70px padding only kicks in after the animation completes.\r\n\r\nBasically, during animation any styles that are applied either by an inline style attribute on the element, or using ngStyle, are ignored for the duration of the transition, and then re-applied after the transition completes.\r\n\r\nThe styles do not need to have anything to do with the animation or the transitioned properties.\r\n\r\nThis issue was also not present in 1.2RC3'
4865,'chirayuk','Revert "feat($parse): secure expressions by hiding "private" properties"\nReverting change introduced by chirayuk which needs further discussion.\r\nCheck line 29 (26 after commit): "The goal is to prevent exploits against the expression language, but not to prevent exploits that were enabled by exposing sensitive JavaScript or browser apis on Scope."\r\n\r\nBut chirayuk\'s commit enforces a convention to regard all properties beginning or ending with underscore as private. Breaks every nonSQL db implementation i know, forcing overhead code.\r\n\r\nWhile white-/blacklisting accessible properties for expressions is a nice feat, this is imho the wrong approach and does not add much in terms of security.\r\nAn attacker at this level is able to read everything on scope. The advocated change and the respective tests convey a false sense of security to unaware devs and will lead to complacency.\r\n\r\nThis reverts commit 3d6a89e8888b14ae5cb5640464e12b7811853c7e.'
4864,'IgorMinar','docs.angularjs.org: DOM Nodes Leaking\nAt http://docs.angularjs.org, click back and forth between pages the DOM Node Count continues to go up and up. No dramtical drop when I click "collect garbage".\r\n![ngss](https://f.cloud.github.com/assets/886818/1508513/1d2690e6-4a02-11e3-8ec4-a52c7540f798.png)\r\n\r\n'
4862,'jeffbcross','Issue #4680\nfix(location,route): Breaks with file:// protocol in Chrome\r\n\r\nFF and IE implementations considere the drive letter as "host" and remove it from pathname\r\nCHROME implementation let it as part of the pathname\r\nWe should remove the drive letter from the pathname to let routing work.\r\n\r\nCloses #4680 \r\n'
4859,'chirayuk',"feat($parse): Custom private field tagging\nCommit 3d6a89e introduced the concept of private field that can not be evaluated on an Angular expression for security reasons.\r\n\r\nThis PR allows changing the pattern that matches a field as private. It also allows disabling the private field access restriction.\r\n\r\nSome examples:\r\n```js\r\nmyModule.config(function($parseProvider) {\r\n  // disable private fields restriction\r\n  $parseProvider.restrictFieldsMatching(null);\r\n});\r\n```\r\n\r\n\r\n```js\r\nmyModule.config(function($parseProvider) {\r\n  // Now private fields will be those beginning with 'priv'\r\n  $parseProvider.restrictFieldsMatching(/^priv/);\r\n});\r\n```\r\n\r\nCustom private fields allow backwards compatibility with AngularJS <1.2 projects that use underscores in scope fields (i.e. data retrieved from a MongoDB instance) while still enjoying the new private field security policy.\r\n\r\nCloses #4509"
4857,'matsko','$error.number not working as expected.\nDemo see official docs:\r\nhttp://docs.angularjs.org/api/ng.directive:input.number\r\n\r\n```HTML\r\n<form name="myForm" ng-controller="Ctrl">\r\n  Number: <input type="number" name="input" ng-model="value" min="0" max="99" required>\r\n  <span class="error" ng-show="myForm.input.$error.required">Required!</span>\r\n  <span class="error" ng-show="myForm.input.$error.number">Not valid number!</span>\r\n</form>\r\n```\r\n\r\n"Required!" is shown when there\'s nothing in the input field.\r\nBut "Not valid number!" is not when entering text, negative numbers or number greater than 99.'
4852,'tbosch','ngIf repeats itself instead of updating itself in 1.2.0\nElements using ngIf aren\'t updated (or removed and recreated) when using a string as the condition and this string changes. This worked fine in angular 1.2.0-rc2, but doesn\'t work in 1.2.0.\r\n\r\nSee this plunkr for example: http://plnkr.co/edit/b6CUTqTbZIAhhZYMOXBu?p=preview\r\n\r\n```\r\nFill me: <input type="text" ng-model="test" /><br/>\r\nShow when filled:\r\n<span ng-if="test">\r\n  I\'m added when the text is filled.\r\n</span>\r\n```\r\nEach time a new char is added to the textbox, a new span is **added** to the page.\r\n\r\nWorkaround: use a real boolean condition:\r\n\r\n```\r\nFill me: <input type="text" ng-model="test" /><br/>\r\nShow when filled:\r\n<span ng-if="!!test">\r\n  I\'m added when the text is filled.\r\n</span>\r\n```'
4850,'IgorMinar',"fix($resource): don't use $parse for @dotted.member\nparams and paramDefaults support looking up the parameter value from the\r\ndata object.  The syntax for that is `@nested.property.name`.\r\nCurrently, $resource uses $parse to do this.  This is too liberal\r\n(you can use values like `@a=b` or `@a | filter` and have it work -\r\nwhich doesn't really make sense).  It also puts up a dependency on\r\n$parse which is has restrictions to secure expressions used in\r\ntemplates.  The value here, though a string, is specified in Javascript\r\ncode and shouldn't have those restrictions."
4849,'chirayuk','feat($parse): toggle evaluation of private fields via $parseProvider.allowPrivateFields()\nDisallowing evaluation of private fields in Angular expressions should be toggleable through a `config()` block.  Usage is shown in ngdoc comments.\r\n\r\nIt\'s worth noting that this behavior defaults to FALSE.  \r\n\r\nThat is to say, if you want pre-Angular-1.2 behavior, you must do:\r\n\r\n```javascript\r\nmyModule.config(function($parseProvider) {\r\n  $parseProvider.allowPrivateFields(true);\r\n});\r\n```\r\n\r\nPlease let me know if the unit tests are insufficient; they do not consider multiple "formats" of private variables as the tests do in 3d6a89e8888b14ae5cb5640464e12b7811853c7e, but the main intent here was to show that the toggle works.'
4842,'chirayuk','Filters starting with "_" shouldn\'t be considered private\nHey,\r\n\r\nI\'ve registered [Underscore](http://underscorejs.org) methods as filters, prefixing them with a `_`. Somewhat like [this](https://github.com/floydsoft/angular-underscore/issues/5).\r\n\r\nWhen I had my app running 1.2.0rc3, everything was fine, but today after updating to 1.2.0 they started to throw exceptions telling that I can\'t access private properties. __I\'m aware of this change as of 1.2.0__, but I don\'t think filters should follow the same rule.\r\n\r\nWhat could be done about this, any tip/workaround...?'
4833,'mzgol',"fix(jqLite): fix event.stopImmediatePropagation() so it works as expected\njqLite doesn't override the default implementation of `event.stopImmediatePropagation` and so it doesn't work as expected, i.e, it doesn't prevent the rest of the event handlers from being executed. I've fixed that for events handled with `on` and triggered by `triggerHandler`.\r\n\r\nFor the sake of consistency with jQuery, I've also added an `isImmediatePropagationStopped` function to the event object so one can tell whether the immediate propagation was stopped or not.\r\n\r\nLastly, this implementation won't immediate stop propagation to event handlers created with `element.addEventListener`. I could have easily solved that by making `stopImmediatePropagation` call its native counterpart, but that would render it incompatible with jQuery's implementation. In order to comply with jQuery, I would have to add an `originalEvent` property to the event object so one could call `originalEvent.stopImmediatePropagation()`, but I've found it hard to correctly implement without making the code overly complex."
4809,'petebacondarwin','fix(ngScenario): disable animations during e2e tests\nThe current tutorial (step-12) fails its e2e tests as the animations are not completing before the\r\nexpectations are checked.  This fixes that and is generally the right thing to do for other e2e\r\ntest situations.'
4805,'caitp','ng-repeat throws a \'isecdom\' error when iterating over an array with a "on" property\nUsing AngularJS 1.2.0-rc3, the following throws the error "\'Referencing DOM nodes in Angular expressions is disallowed!" in ensureSafeObject(). It seems to misinterpret the array as a DOM node because it has both a "find" and an "on" property.\r\n\r\nController code:\r\n```js\r\nvar array = [1, 2, 3];\r\narray.on = true;\r\n$scope.array = array;\r\n```\r\nTemplate:\r\n```html\r\n<li ng-repeat="el in array">{{el}}</li>\r\n```'
4801,'jeffbcross','fix(ngInclude & ngView): Conditionally autoscroll after animation\nWe need to wait until animations have added the content to the document before\r\ntrying to autoscroll to anchors that may have been inserted.'
4784,'IgorMinar','fix($compile): isolate and non-isolate directives on the same element\nA non-isolate directive should not get the isolate scope of an isolate directive on the same element.\r\n\r\nPaired with Tobias.'
4778,'petebacondarwin','fix(ngdocs): remove duplicate header ids\nHeaders with ids are being given additional id attributes.\r\nThat\'s causing the test "ngdoc usage overview should supress description heading" to fail while building the documentation.\r\nThis prevents additional id attributes from being added to a header that already has an id.'
4765,'IgorMinar','ng-bind on checkbox with ng-click happens in wrong order\nIn case of a checkbox with `ng-click` and `ng-model` like this:\r\n\r\n    <input type=\'checkbox\' ng-click=\'onCompleteTodo(todo)\' ng-model="todo.done">\r\n\r\nIf a user clicks on this checkbox, `onCompleteTodo(todo) contains the value `before` the click happened. \r\n\r\nFiddle:\r\n - http://jsfiddle.net/supercobra/ekD3r/\r\n\r\nThe argument is that, since the click occurred before the call to onCompleteTodo (or whatever method) the method should be presented with the current value, in this case a checkbox that has been clicked. \r\n'
4764,'vojtajina','docs($parse): Fix typo\n'
4758,'jeffbcross','fix(ngInclude): only run anchorScroll after animation is done\nWe need to wait until animations have added the content to the document before\r\ntrying to `autoscroll` to anchors that may have been inserted.\r\n\r\nI am a little unsure about how I refactored the tests to check for this issue.\r\n\r\nAlso, could someone check whether other things should be moved into the `afterAnimation`\r\nhandler, such as the `$compile`, the `$emit` or the `$eval`?'
4746,'jeffbcross','docs($location): update paramValue description for search() \nsearch() supports an array for paramValue, but this is not described in the docs.'
4742,'IgorMinar','Animation Fixes\n'
4736,'tbosch','fix(ngSanitize) - fixed the problem with relative links\nfixed the problem that relative links was removed by the htmlParser function\r\n\r\nCloses #3748'
4727,'matsko','fix($animate): ensure the active class is not applied if cancelled during reflow\n'
4724,'btford','Update CONTRIBUTING docs\nLink dev questions to angular-dev mailing list\r\nRefocus ngdocs contributing pages to building and testing info'
4720,'tbosch','angular-sanitize generates large amount of reflows\nOn our current site I see the attached timeline profile, with lots of style recalculations caused by angular-sanitize.\r\n\r\nThe problem is accessing `innerText` in the following code (line 362 of current angular-sanitize), as `innerText` is aware of styling and hence causes a reflow:\r\n```js\r\nvar hiddenPre=document.createElement("pre");\r\nfunction decodeEntities(value) {\r\n  hiddenPre.innerHTML=value.replace(/</g,"&lt;");\r\n  return hiddenPre.innerText || hiddenPre.textContent || \'\';\r\n}\r\n```\r\n\r\nWhat\'s the rationale of this code? Why not just use `textContent`, which is style-agnostic?\r\n\r\n**EDIT**: I see that IE<9 doesn\'t support `textContent`. But why then not reverse the order of this check? To be more clear, sth along these lines would work:\r\n```js\r\nreturn (hiddenPre.textContent !== undefined ? hiddenPre.textContent : hiddenPre.innerText) || \'\';\r\n```\r\nNote that we need to check for `undefined` and not just reverse the order of these two since for an empty string `innerText` would still be checked and a reflow would occur.\r\n\r\n![screen shot 2013-10-30 at 21 46 43](https://f.cloud.github.com/assets/1758366/1440994/bebea4e0-41a4-11e3-895d-8306fc92cae6.png)\r\n'
4716,'matsko',"ngAnimate throws errors (leaves stale items) for ngRepeat with nested ngInclude\nThe title describes the bug well enough I think, and here's my local hack to fix it:\r\n\r\n\tindex 64be7ba..7ef8d6d 100644\r\n\t--- a/src/ngAnimate/animate.js\r\n\t+++ b/src/ngAnimate/animate.js\r\n\t@@ -256,6 +256,8 @@ angular.module('ngAnimate', ['ng'])\r\n\t     var selectors = $animateProvider.$$selectors;\r\n\t \r\n\t     var ELEMENT_NODE = 1;\r\n\t+    var ELEMENT_DOCUMENTATION = 8;\r\n\t+\r\n\t     var NG_ANIMATE_STATE = '$$ngAnimateState';\r\n\t     var NG_ANIMATE_CLASS_NAME = 'ng-animate';\r\n\t     var rootAnimateState = {disabled:true};\r\n\t@@ -883,6 +885,13 @@ angular.module('ngAnimate', ['ng'])\r\n\t\t       startTime = Date.now(),\r\n\t\t       node = element[0];\r\n\t \r\n\t+          // When using ng-include within an ng-repeat, it's not always the first\r\n\t+          // child element, that's a comment inserted by ng-include.  In the case\r\n\t+          // if this node is a comment, get the next one.\r\n\t+          if (node.nodeType == ELEMENT_DOCUMENTATION) {\r\n\t+            node = element[1];\r\n\t+          }\r\n\t+\r\n\t\t   //temporarily disable the transition so that the enter styles\r\n\t\t   //don't animate twice (this is here to avoid a bug in Chrome/FF).\r\n\t\t   if(timings.transitionDuration > 0) {\r\n\r\n\r\nIf this looks sensible to you let me know and I can submit a pull request.  If not, let me know ;-)\r\n\r\nAlex"
4713,'matsko','css "transition" on repeated elements disables animation\nThere is quite unexpected behavior of `$animate`: if there is any "transition" present on element before adding/removing class, the animation is skipped.\r\n\r\nThis is caused by https://github.com/angular/angular.js/blob/master/src/ngAnimate/animate.js#L850\r\nIn this line there is a check if there is transition on the element before adding class. But this does not mean that this transition is currently in progress.\r\n\r\nHere is common use case when this issue can cause big surprise for developers:\r\n\r\nI have a list of elements that should be highlighted when hovered. If I put "transition" on element + use ngRepeat\'s animation (enter/leave/move).\r\n\r\nHere is a plunker to illustrate that:\r\nhttp://plnkr.co/edit/vI7LvG?p=preview\r\n\r\nSo currently the only workaround is to put "transitioned" elements inside elements that are repeated by `ngRepeat`\r\n'
4703,'jeffbcross',"docs: autoscroll to anchor does not work on /api/ng\nWhen visiting http://docs.angularjs.org/api/ng#filter, the browser does not autoscroll the page to the anchor.\r\n\r\nThis functionality does work on other pages, such as http://docs.angularjs.org/api/angular.Module#methods_config (that anchor link causes the page to scroll to the anchor as expected.)\r\n\r\nNote that if you first visit http://docs.angularjs.org/api/ng, and then append \\#filter to the URL and press enter, the page then scrolls to that anchor. Perhaps this bug has to do with how the content on the ng page is loaded as compared to other pages.\r\n\r\nPossibly related issues (hopefully this one isn't a dupe): #4262 #2639"
4699,'matsko','ngAnimate: Wrong classes attached to element with animations\nI got an element with `ng-class="{shown: !!some.condition}"`, initially shown, and I noticed that it has weird classes attached. I set up a breakpoint to watch changes of this element, and here\'s how the class list changed:\r\n\r\n1. `thumbnails ng-isolate-scope ng-scope shown`\r\n2. `thumbnails ng-isolate-scope ng-scope shown shown-add-active` (attached stackrace is from here)\r\n3. then some time passes... (`$timeout`)\r\n4. `thumbnails ng-isolate-scope ng-scope shown shown-add-active ng-animate`\r\n5. `thumbnails ng-isolate-scope ng-scope shown shown-add-active ng-animate shown-remove`\r\n6. `thumbnails ng-isolate-scope ng-scope shown shown-add-active ng-animate shown-remove shown-remove-active`\r\n7. `thumbnails ng-isolate-scope ng-scope shown shown-add-active ng-animate shown-remove-active`\r\n8. `thumbnails ng-isolate-scope ng-scope shown shown-add-active ng-animate`\r\n9. `thumbnails ng-isolate-scope ng-scope shown shown-add-active`\r\n10. `thumbnails ng-isolate-scope ng-scope shown-add-active` \r\n11. ...and it stays stuck in this position.\r\n\r\nOne interesting thing I noted was also that the last change (10) was done by jqLite, not jQuery (which we use in our project).\r\n\r\nHere\'s also a stacktrace from step 2:\r\n![screen shot 2013-10-29 at 15 27 24](https://f.cloud.github.com/assets/3027415/1428696/a0a50142-40a6-11e3-8eb7-67fa9d03c0a5.png)\r\n\r\nI use the newest angular (`d434eabec3` from `master`).'
4680,'jeffbcross',"ngRoute breaks with file:// protocol in 1.2.0-rc.3\nHello.\r\n\r\n[Here is code to reproduce the issue.](http://szwacz.com/upload/ng-route-bug.zip)\r\nDownload it, and launch locally index.html. Problem occurs only with `file://` protocol.\r\n\r\nSymptoms:\r\nOn Chrome, Opera and IE the view will not load. No error visible in console.\r\nOn Firefox for some reason this problem doesn't occur, everything works as expected.\r\n\r\nAngular 1.2.0-rc.2 was free of this issue."
4675,'tbosch','Source Maps reference source: "MINERR_ASSET", but do not provide such a file\nThe ng-closure-runner runs an angular specific pass during compilation which [adds a definition for MINERR_ASSET](https://github.com/angular/ng-closure-runner/blob/master/src/org/angularjs/closurerunner/MinerrPass.java#L67), that asset is not included with any of the 1.2.x releases (the only releases with source maps). However, the source map references MINERR_ASSET as a source and as a result there is a 404 when requesting the file.\r\n\r\nI\'ve only quickly glanced at the grunt tasks and also ng-closure-runner, but I\'m under the impression this is likely the ng-closure-runner included [minErr.js](https://github.com/angular/ng-closure-runner/blob/master/src/minErr.js) or some file generated based on it. Either way the correct asset should be packaged with the other source files or MINERR_ASSET should be removed from the source map "sources".\r\n\r\n'
4673,'btford','guide/index.ngdoc has invalid links\nThe documentation generator has identified a number of invalid links:\r\n\r\n```\r\nWARNING: api/AUTO.$provide (defined in src\\auto\\injector.js) points to a non existing anchor "api/AUTO.$provide#factory"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ng#directive"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing page "api/ng.ngClick"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing page "api/ng.ngInclude"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing page "api/ng.ngInclude"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ng#service"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing page "api/ng.$routeParams"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ng#filter"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ng#function"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngRoute#service"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngRoute#directive"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngAnimate#service"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/angular.Module#animation"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngResource#service"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngCookies#service"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngTouch#service"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngTouch#directive"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngSanitize#service"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngTouch#filter"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngMock#service"!\r\nWARNING: api/index (defined in docs\\content\\api\\index.ngdoc) points to a non existing anchor "api/ngMock#function"!\r\n```'
4661,'jeffbcross','(docs) preserve URL path when switching between doc versions\nFor example if I use the version dropdown while in developer guide the app redirects the me to the API docs for that version, instead of the developer guide for the version.'
4650,'tbosch',"Fix for getElementByTagName invoked on Text node.\nThis is a fixed for the problem with the find method when it tries to invoke getElementsByTagName on a TextNode causing the following error:\r\n<code>TypeError: Object #<Text> has no method 'getElementsByTagName'</code>\r\n\r\nBug report:\r\nhttps://github.com/angular/angular.js/issues/4120"
4649,'mhevery',"fix($compile): attribute bindings should not break due to terminal directives\nRecently we changed the priority of attribute interpolation directive to -100\r\nto ensure that it executes early in the post linking phase. This causes issues\r\nwith when terminal directives are placed on elements with attribute bindings\r\nbecause the terminal directive will usually have 0 or higher priority which\r\nresults in attr interpolation directive not being applied to the element.\r\n\r\nTo fix this issue I'm switching the priority back to 100 and making moving the\r\nbinding setup into the pre-linking function.\r\n\r\nThis means that:\r\n\r\n- terminal directives with priority lower than 100 will not affect the attribute\r\n  binding\r\n- if a directive wants to add or alter bindings it can do so in the pre-linking\r\n  phase, as long as the priority of this directive is more than 100\r\n- all post-linking functions will execute after the attribute binding has been\r\n  set up\r\n- all pre-linking functions with directive priority lower than 100 will execute\r\n  after the attribute bindings have been setup\r\n\r\nBREAKING CHANGE: the attribute interpolation (binding) executes as a directive\r\nwith priority 100 and the binding is set up in the pre-linking phase. It used\r\nto be that the priority was -100 in rc.2 (100 before rc.2) and that the binding\r\nwas setup in the post-linking phase.\r\n\r\nCloses #4525\r\nCloses #4528"
4636,'petebacondarwin','docs(CONTRIBUTING.md): move commit guidelines from google doc\n'
4619,'matsko','Docs issue: Sidebar does not change appropriately\nWhen I click on `Develop` in the navbar, and then `Developer Guide` or `API Reference`, I go to the pages just fine.  However, when I then click on the other, the sidebar on the left does not change.\r\n\r\nThis is for the new docs.'
4616,'vojtajina',"fix($compile): instantiate controlers when re-entering compilation\nWhen we re-enter compilation either due to async directive templates or element transclude directive\r\nwe need to keep track of controllers to instantiate during linking.\r\n\r\nThis piece of info was missing when re-entering compilation and that's what this commit fixes.\r\n\r\nI also reordered the properties in the previousCompileContext object.\r\n\r\nCloses #4434"
4605,'jeffbcross','ng-repeat can\'t handle NaN values.\nng-repeat ends up in an infinite loop when "track by $index" is used and a NaN value appears in the collection.\r\n\r\nPlease see http://plnkr.co/edit/cV3mOq and uncomment the "breaking" line in script.js'
4585,'IgorMinar',"$http.post crashes when request times out!\nIf a timeout is used on a $http.post request, and the timeout expires, IE9 throws an exception. This means that code cannot be written to handle timeout conditions\r\n\r\nEDIT: I have created a single html page that runs on IE10, Chrome, and Firefox, and clearly shows the error on IE9:\r\nhttp://www.apxproto.com/api/ngPost.htm\r\n\r\n\r\nYou don't need to read any further.\r\n________________________________________________________________________________________________\r\nHere's a plunker: http://plnkr.co/12rp7WqmDpPJC5ASazkJ\r\nHere's a jsFiddle: http://jsfiddle.net/bonneville/J3Txh/\r\n\r\nNote that for some reason, the plunker and jsfiddle will not run on IE9 - even for the $http.post requests that don't time out! You will have to put the code into a web page to see the problem."
4579,'petebacondarwin',"orderBy filter doesn't support sorting by the value itself\nFor example, it's impossible to sort an array of strings without creating an identity function\r\n\r\nHappy to make the mod and send a PR if you will merge it."
4575,'caitp',"Factory that doesn't return an object silently inject null\nFactory that return null instead of an object silently inject null object:\r\n\r\nExample: \r\n\r\nhttp://plnkr.co/edit/SJM7yZafOxV0Vu6peLQL?p=preview\r\n\r\n```\r\nvar app = angular.module('plunker', []);\r\n\r\napp.factory('api', function() {\r\n  var self = this;\r\n  // no returns...\r\n  // return self;\r\n});\r\n\r\napp.controller('MainCtrl', function($scope, api) {\r\n  if(api) {\r\n    $scope.name = 'api injected';\r\n  } else {\r\n    $scope.name = 'api not injected';\r\n  }\r\n});\r\n```\r\n\r\nACTUAL: no errors on console, $scope.name set to api not injected\r\n\r\nEXPECTED: some sort of console warning with a useful error for newbies"
4573,'mhevery','Animation fixes\nCloses #4463\r\nCloses #3784\r\nCloses #4397\r\nCloses #4231'
4572,'mhevery','fix(ngdocs): remove the side search bar\nBREAKING CHANGE\r\n\r\nThe side search bar on the docs page has been removed in favor of the\r\ntop search bar.'
4563,'vojtajina','Linting - Apply Static Analysis to the source code\nA basic set of jshint rules have been implemented in this PR and the code base has been updated to ensure it passes all the rules.\r\n\r\n- The **chore** commits update the build and implement the jshint rules\r\n- The **style** commits are changes to the code to pass the implemented rules - they are grouped by module.\r\n- There is a jshint task, which does a pass of the code\r\n- Each module has its own .jshintrc config file in its source folder, which allows jshint CLI and editor plugins to check the code separately from the Grunt task.\r\n- Only the src folder has been considered at this stage\r\n- The maxlen rule has been set high purposefully initially, there is a lot of "over-length" documentation that needs to be fixed up.'
4556,'IgorMinar',"refactor($interpolate): optimize watched $interpolate functions performance\nThis PR improves the performance of watched $interpolate functions: http://jsperf.com/ng-interpolation-optimization/8\r\n\r\nThis is the related Google groups thread, I explain my PR there: https://groups.google.com/forum/#!msg/angular-dev/QmcwYVkfsbo/8Y_pMsal0kYJ\r\n\r\nIf any changes are unclear, point them out and I'd be happy to elaborate on them :)\r\n\r\nSigned the CLA as Rodric Haddad"
4553,'matsko','fix(input): keep track of min/max attrs on-the-fly\nNow input[type=button] keeping track of both min and max attrs even if they change over time.'
4548,'matsko','ngAnimate throws exception in cancelChildAnimations on deletion of repeated element when using ng-include\nHere\'s plunker http://plnkr.co/edit/HrmBBmz949YnS7IcPyp7?p=preview\r\nPlease try to click one of the "Remove this" links.\r\nI attach stack trace just in case.\r\n\r\nTypeError: Object #<Comment> has no method \'querySelectorAll\'\r\n    at cancelChildAnimations (http://code.angularjs.org/1.2.0-rc.3/angular-animate.js:593:36)\r\n    at Object.leave (http://code.angularjs.org/1.2.0-rc.3/angular-animate.js:332:11)\r\n    at ngRepeatAction (http://code.angularjs.org/1.2.0-rc.3/angular.js:17770:24)\r\n    at Object.$watchCollectionAction [as fn] (http://code.angularjs.org/1.2.0-rc.3/angular.js:10474:11)\r\n    at Scope.$digest (http://code.angularjs.org/1.2.0-rc.3/angular.js:10569:27)\r\n    at Scope.$apply (http://code.angularjs.org/1.2.0-rc.3/angular.js:10802:24)\r\n    at HTMLAnchorElement.<anonymous> (http://code.angularjs.org/1.2.0-rc.3/angular.js:16514:17)\r\n    at http://code.angularjs.org/1.2.0-rc.3/angular.js:2331:10\r\n    at Array.forEach (native)\r\n    at forEach (http://code.angularjs.org/1.2.0-rc.3/angular.js:213:11) \r\n'
4545,'tbosch',"Fixing possible bug in initialization of value\nHello, I think I found a bug in initialisation of `value` value in `angular-resource.js`.\r\n\r\nI tried to fetch a Json array from my Api server and was getting the following error:\r\n\r\n```\r\nTypeError: Object #<Resource> has no method 'push'\r\n``` \r\n\r\nI compared code from `v1.0.6` (which is working okay) with the code from `v1.2.0-rc.3` and found the following difference:\r\n\r\n```Javascript\r\nv1.0.6:\r\nvar value = this instanceof Resource ? this : (action.isArray ? [] : new Resource(data));\r\n\r\nv1.2.0-rc.3:\r\nvar isInstanceCall = data instanceof Resource;\r\nvar value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));\r\n```\r\n\r\nAnd indeed, `data` is the second parameter to the `Resource[name] = function(a1, a2, a3, a4)` which is called from `Resource.prototype['$' + name] = function(params, success, error)` as:\r\n\r\n```Javascript\r\nvar result = Resource[name](params, this, success, error);\r\n```\r\n\r\nSo `this` in the scope of `Resource.prototype` will, presumably, be always instance of `Resource` and `var isInstanceCall = data instanceof Resource;` will be always set to true.\r\n\r\nI am, most likely, wrong, but the following change fixed my problem. I think it is worth for someone from the team to take a look at what is going in there."
4540,'tbosch',"feat($compile): optionally get controllers from ancestors only\nImplement option to strengthen require '^' operator, by adding another '^'.\r\n\r\nWhen a second '^' is used, the controller will only search parent nodes for the matching controller, and will throw or return null if not found, depending on whether or not the requirement is optional.\r\n\r\n---\r\n\r\nIt might be good to simply make this strengthened behaviour the default, since given what the original docs were saying, it really is the expected behaviour.\r\n\r\nCloses #4518"
4525,'IgorMinar','Angular 1.2: Using "terminal" on a directive breaks the interpolation on attrs.$observe\nHere\'s an example using Angular 1.2 RC3:\r\nhttp://plnkr.co/edit/LMF2YuJW1Opj9gS3wv63?p=preview\r\n\r\nIf you open the JS console you can see what the observed value is. It\'s uninterpolated with its curly braces still intact.\r\n\r\nHere\'s the same code running on Angular 1.0.8 that works correctly:\r\nhttp://plnkr.co/edit/E0vINw7Pyjk0G2I1UwBI?p=preview'
4521,'btford','regression: ng-include and ng-controller no longer work correctly on same element in -rc.3\nThe behavior of ng-include has changed in -rc.3, and appears to be a regression.  A simplified setup is along the lines of...\r\n\r\n```html\r\n<div ng-app="app">\r\n  <div ng-include="\'main.html\'" ng-controller="MainCtrl"></div>\r\n</div>\r\n```\r\n\r\nIn -rc.2, this code worked as anticipated, but in -rc.3, scopes are structured in such a way that the controller is no longer working as anticipated.\r\n\r\nFor example, with main.html as\r\n\r\n```html\r\n<button ng-click="addFoo()">New Foo</button>\r\n<div>{{foos}}</div>\r\n```\r\nand mainCtrl.js as\r\n\r\n```javascript\r\nangular.module(\'app\').controller(\'MainCtrl\', function(){\r\n\r\n  $scope.foos = []\r\n\r\n  $scope.addFoo = function(){\r\n    $scope.foos.push(\'foo\');\r\n  }\r\n\r\n});\r\n```\r\n\r\nI would expect a button to display above the text \'[]\', and after clicking the button, the text would show \'[foo]\', then \'[foo,foo]\' and so on.  That has been the behavior in earlier versions of angular, including -rc.2.  Here is a Plunker of the [expected behavior, with passing tests, under rc.2.](http://plnkr.co/edit/0VOMx4?p=info)\r\n\r\nUnder the new release candidate, the scopes are structured in such a way that the display is not properly initialized and clicking the button does not trigger the addFoo() function.  Here is a Plunker exhibiting the [regression behavior, with failing tests, under rc.3.](http://plnkr.co/edit/4GyjeR?p=info)\r\n\r\nInterestingly, the application will work correctly with ng-controller under both -rc.2 and -rc.3 if changes so that the ng-controller is placed alone and within a container element, such as:\r\n\r\n```html\r\n<div ng-app="app" ng-controller="MainCtrl">\r\n  <div ng-include="\'main.html\'"></div>\r\n</div>\r\n```\r\nor:\r\n```html\r\n<div ng-app="app" ng-controller="MainCtrl">\r\n  <div ng-controller="MainCtrl">\r\n    <div ng-include="\'main.html\'"></div>\r\n  <div>\r\n</div>\r\n```\r\nClearly ng-controller is no longer working and playing well with other directives.'
4514,'IgorMinar','fix(angular.js): wrong $httpBackend status code\nIf I run html document as a file in browser (e.g. file:///index.html), then all ajax responses have a protocol "file" (and therefore response status code can be 200 or 404)\r\n```\r\n(protocol == \'file\') ? (response ? 200 : 404)\r\n```\r\nlocationProtocol has higher priority in completeRequest function.\r\n\r\nIt\'s critical in mobile hybrid applications which use angularjs (index.html run from local filesystem)'
4509,'IgorMinar','feat($parse): secure expressions by hiding "private" properties\n## BREAKING CHANGE:\r\nThis commit introduces the notion of "private" properties (properties\r\nwhose names begin and/or end with an underscore) on the scope chain.\r\nThese properties will not be available to Angular expressions (i.e. {{\r\n}} interpolation in templates and strings passed to `$parse`)  They are\r\nfreely available to JavaScript code (as before).\r\n\r\nMotivation\r\n----------\r\nAngular expressions execute in a limited context.\xa0 They do not have\r\ndirect access to the global scope, Window, Document or the Function\r\nconstructor.\xa0 However, they have direct access to names/properties on\r\nthe scope chain.\xa0 It has been a long standing best practice to keep\r\nsensitive APIs outside of the scope chain (in a closure or your\r\ncontroller.)\xa0 That\'s easier said that done for two reasons: (1)\r\nJavaScript does not have a notion of private properties so if you need\r\nsomeone on the scope chain for JavaScript use, you also expose it to\r\nAngular expressions, and (2) the new "controller as" syntax that\'s now\r\nin increased usage exposes the entire controller on the scope chain\r\ngreatly increaing the exposed surface.\xa0 Though Angular expressions are\r\nwritten and controlled by the developer, they (1) typically deal with\r\nuser input and (2) don\'t get the kind of test coverage that JavaScript\r\ncode would.\xa0 This commit provides a way, via a naming convention, to\r\nallow publishing/restricting properties from controllers/scopes to\r\nAngular expressions enabling one to only expose those properties that\r\nare actually needed by the expressions.'
4505,'btford','Surprising behavior (and regression) when $compiling ngInclude directives\n$compiling a naked ng-include directive fails in 1.2.0-rc.*, although it has worked in earlier versions.  In a test along the following lines:\r\n\r\n```javascript\r\ndescribe(\'Integration\',function(){\r\n  var app;\r\n  beforeEach(module(\'app\', \'views/main.html\'));\r\n  beforeEach(inject(function($compile, $rootScope){\r\n    app = $compile(\r\n      \'<ng-include src="\\\'views/main.html\\\'"></ng-include>\'\r\n    )($rootScope.$new());\r\n    $rootScope.$digest();\r\n    console.log(angular.version);\r\n    console.log(app);\r\n  }));\r\n  it(\'should run angular\', function(){\r\n    expect(app.find(\'h1\').text()).toBe(\'Super2\');\r\n  });\r\n});\r\n```\r\n\r\nwhere views/main.html is:\r\n\r\n```html\r\n<h1>Super{{1+1}}</h1>\r\n```\r\n\r\nI get the following results, for v1.0.5, which works fine:\r\n\r\n```text\r\nLOG: Object{full: \'1.0.5\', major: 1, minor: 0, dot: 5, codeName: \'flatulent-propulsion\'}\r\nLOG: {0: <ng-include src="\'views/main.html\'" class="ng-scope"><h1 class="ng-scope ng-binding">Super2</h1>\r\n```\r\n\r\nand the test passes, but for 1.2.0.rc-*:\r\n\r\n```text\r\nLOG: Object{full: \'1.2.0-rc.3\', major: 1, minor: 2, dot: 0, codeName: \'ferocious-twitch\'}\r\nLOG: {0: <!-- ngInclude: undefined -->, length: 1}\r\n```\r\n\r\nthe test fails, with the actual result being `\'\'` instead of `Super2`.  Interestingly, the code works just fine in both versions if you surround the `<ng-include>` directive with a naked `<div>`.\r\n\r\nIf this is an intended regression, I haven\'t seen any documentation (which doesn\'t mean its not there).  Can you explain the reasons why this directive fails in current versions, while others do not, so I can anticipate the problem?  Or should I simply make a routine practice of surrounding all code delivered to compile with a naked div?'
4502,'IgorMinar','Docs generate anchors for headers\nEach header has now id (which [works as linkable anchor](http://stackoverflow.com/a/484781/531342)).\r\nNested headers have their ancestors in the id, but `h1` is ignored, because that\'s title of the page and so it\'s already contained in the url.\r\n\r\n```html\r\n<h1>$http</h1>\r\n<h2 id="description">Description</h2>\r\n<h3 id="description_general-usage">General usage</h2>\r\n<h2 id="methods">Methods</h2>\r\n<h3 id="methods_post">post</h3>\r\n<h4 id="methods_post_parameters">Parameters</h4>\r\n```\r\n\r\nIt also reports broken links:\r\n```\r\nWARNING: guide/directive (defined in docs/content/guide/directive.ngdoc) points to a non existing anchor "guide/directive#attributes"!\r\n```\r\n\r\nIt also collects anchors, so it is possible to use `<a name="xxx"></a>` in the markup and then link to it and it won\'t be reported as a broken link.'
4490,'matsko',"ngAnimate/ngRepeat issue with duplicates and transitional classes\nI'm aware this issue can be somewhat project-related when it comes to styles, but anyway I find it strange enough to address an issue here.\r\n\r\nPlease take a look at this screenshot:\r\nhttp://img43.imageshack.us/img43/3544/lwaj.png\r\non this screenshot you'll find an issue with duplicated elements in ngRepeat.\r\nThere are 3 elements in collection passed to ngRepeat.\r\nAs you can see 3 original elements are on top, but there 3 duplicates with ng-animate ng-leave and ng-leave-active classes as well.\r\n\r\nWith ngAnimate disabled it does not occur\r\n"
4467,'pkozlowski-opensource','element.toggleClass() does not remove one of classnames\nwhen starting with\r\n<code>someElement == [&lt;div class="class1"&gt;&lt;/div&gt;]</code>\r\nafter calling <code>someElement.toggleClass("class1 class2");</code>\r\nexpected:\r\n<code>someElement == [&lt;div class="class2"&gt;&lt;/div&gt;]</code>\r\nactual:\r\n<code>someElement == [&lt;div class="class1 class2"&gt;&lt;/div&gt;]</code>\r\nusing AngularJS v1.0.8'
4466,'btford','Fix(ng:repeat,ng:controller): Change priority order of ng:repeat and add priority to ng:controller\nEnsure priority is given to ng:controller when using ng:include/ng:repeat in conjuction with ng:controller.\r\n\r\nCloses #4431\r\nCloses #4521'
4464,'IgorMinar','responseText is still buggy on ie8\nSometimes ie8 will not load xhr content. The fix for https://github.com/angular/angular.js/issues/1922 seems to cause an additional problem in ie8 because it checks for xhr.responseType, which unfortunately is set manually to the responseType passed in. This causes ie8 to use xhr.response instead of xhr.responseText (sometimes?)\r\n\r\nThis commit introduced the issue. https://github.com/angular/angular.js/commit/509ec745fdbb54b54672fbf8595a4958c16f2b53'
4463,'matsko','1.2.0-rc.3 ngAnimate is really buggy with ng-class\nIf you use ng-class with ngAnimate, to say animate left or right conditionally, ngAnimate 1.2.0-rc.3 often skips the animation entirely, whereas it seemingly always executes properly in 1.2.0-rc.2.\r\n\r\nPlunkr for 1.2.0-rc.3: http://plnkr.co/edit/3VACcBG8GTyav5FNYNHo?p=preview\r\n\r\nJust revert back to 1.2.0-rc.2 in the above example and see the buggy behavior disappear.'
4457,'IgorMinar',"perf(jqLite): implement and use the `empty` method in place of `html(‘’)`\njQuery's elem.html('') is way slower than elem.empty(). As clearing\r\nelement contents happens quite often in certain scenarios, switching\r\nto using .empty() provides a significant performance boost when using\r\nAngular with jQuery.\r\n\r\nAn example benchmark: http://jsperf.com/html-vs-empty shows extreme performance gains.\r\n\r\nIt would be great to have it for 1.2.0, especially that it doesn't introduce any breaking changes.\r\n\r\nOn our current app on a very heavy page the load time was lowered from 2.6s to 2s after applying this patch which gives >20% performance boost."
4452,'IgorMinar','$watchCollection doesn\'t support track by or $$hashKey\n(posting on behalf of portersi@)\r\n\r\nI\'m in the process of upgrading our app to 1.2 RC2, and kept getting a digest overflow on an ng-repeat. It\'s ng-repeating over newly created objects, e.g.\r\n\r\nng-repeat="item in items()"\r\n\r\n$scope.items = function() {\r\n  return [\r\n    {name: \'John\', id: 1},\r\n    {name: \'Patrick\', id: 2}\r\n  ];\r\n};\r\n\r\nOf course this fails object equality, so we (in Angular < 1.2) just added a $$hashKey to each item. This doesn\'t seem to work in 1.2 RC2, and neither does "track by". I get:\r\n\r\nError: [$rootScope:infdig] 10 $digest() iterations reached. Aborting!\r\nWatchers fired in the last 5 iterations: [["fn: $watchCollectionWatch; newVal: 60; oldVal: 58"],["fn: $watchCollectionWatch; newVal: 62; oldVal: 60"],["fn: $watchCollectionWatch; newVal: 64; oldVal: 62"],["fn: $watchCollectionWatch; newVal: 66; oldVal: 64"],["fn: $watchCollectionWatch; newVal: 68; oldVal: 66"]]\r\n\r\nhttp://plnkr.co/edit/ouGmZM?p=preview'
4437,'petebacondarwin',"angular-loader Uncaught ReferenceError: minErr is not defined \nWe're using $script.js and angular-loader to async load our project and the introduction of minErr in 1.2.0-rc.3 is breaking.\r\n\r\nhttp://plnkr.co/edit/rxxHSS0RZd6Xavsq5Njc?p=preview shows the error if you open up the console when running it."
4435,'matsko',"[ngAnimate] ng-move classes are not always being removed\nI've created a sort of contrived example, but the `.ng-move` and `.ng-move-active` classes are not consistently being removed if the animation gets interrupted.\r\n\r\njsFiddle showing problem: http://jsfiddle.net/9736t/\r\nClick <kbd>Start / Stop</kbd> once, wait for a second, then click it again to see the issue.  Continuing to start and stop the process will exacerbate the problem.\r\n\r\nIn the example, the code randomly resorts a list.  Whenever an item is moved, it receives `.ng-move` classes to highlight it.  However, the resorting occurs faster than the animation, and sometimes the `.ng-move` classes are not removed.  If the `.ng-move` classes get stuck, they are no longer added or removed at all.  Eventually the entire list is stuck in the `.ng-move.ng-move-active` state.\r\n\r\nThis worked correctly under rc.2, with the same code.\r\n\r\nThis was tested on a Mac under Firefox, Chrome, and Safari, with consistent results."
4434,'IgorMinar','templateUrl not working in directive if ngModel is required (1.2.0-rc.3)\ntemplateUrl not working in directive if ngModel is required\r\n\r\nI copied the same content in template and it worked.\r\n\r\nCorresponding error: http://errors.angularjs.org/undefined/$compile/ctreq?p0=ngModel&p1=vatNumberInfo\r\n\r\nPlunker: http://plnkr.co/edit/ZzNTVp'
4431,'btford','ng-controller is not working in conjunction with ng-include in 1.2.0-rc.3\nWhen we are trying to declare something like\r\n\r\n```html\r\n<div class="hello" ng-include src="\'hello\'" ng-controller="HelloCtrl"></div>\r\n```\r\n\r\nAfter `hello` template is inserted - `HelloCtrl` will not be applied for template.\r\n\r\nDemo: http://jsbin.com/ekelOMI/2/edit\r\n\r\nIn 1.2.0-rc.2 everything works fine.'
4425,'matsko','Animation continues longer than expected\nI have created this **[Plunker][1]** to demonstrate the problem:\r\n\r\n - Click the toggle button\r\n - The Animation begins\r\n - After 1s the leaving element is being removed from the DOM (OK)\r\n - The entering element has not finished the animation (Problem)\r\n\r\nHere is the HTML:\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n        <script type="text/javascript"\r\n                src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0-rc.2/angular.min.js"></script>\r\n        <script type="text/javascript" src="http://code.angularjs.org/1.2.0-rc.2/angular-animate.js"></script>\r\n        <script type="text/javascript" src="app.js"></script>\r\n        <link href="app.css" type="text/css" rel="stylesheet">\r\n        <title></title>\r\n    </head>\r\n    <body ng-app="app" ng-controller="AppCtrl as app">\r\n    <button ng-click="app.toggle = !app.toggle">Toggle</button>\r\n    <div class="container">\r\n        <div class="toggle flipped" ng-if="!app.toggle">2</div>\r\n        <div class="toggle" ng-if="app.toggle">1</div>\r\n    </div>\r\n    </body>\r\n    </html>\r\n\r\nThe CSS:\r\n\r\n    .container{\r\n        position: relative;\r\n        width: 800px;\r\n        height: 200px;\r\n        border: solid 1px red;\r\n        background-color: #CCC;\r\n    }\r\n    \r\n    .toggle {\r\n        -webkit-transition: linear 1s;\r\n        -moz-transition: linear 1s;\r\n        -ms-transition: linear 1s;\r\n        -o-transition: linear 1s;\r\n        transition: linear 1s;\r\n        border: solid 1px #000000;\r\n        height: 200px;\r\n        width: 200px;\r\n        top: 0;\r\n        position: absolute;\r\n        z-index: 1000;\r\n        background-color: lightgreen;\r\n    }\r\n    \r\n    .toggle.ng-enter{\r\n        -webkit-transform: translateX(600px);\r\n        transform: translateX(600px)\r\n    }\r\n    \r\n    .toggle.ng-enter-active{\r\n        -webkit-transform: translateX(0);\r\n        transform: translateX(0);\r\n    }\r\n    \r\n    .toggle.ng-leave{\r\n        -webkit-transform: translateX(0);\r\n        transform: translateX(0);\r\n    }\r\n    \r\n    .toggle.ng-leave-active{\r\n        -webkit-transform: translateX(600px);\r\n        transform: translateX(600px)\r\n    }\r\n    \r\n    .flipped{\r\n        background-color: red;\r\n    }\r\n\r\nAnd the JS:\r\n\r\n    var app = angular.module("app", ["ngAnimate"]);\r\n    app.controller("AppCtrl", function () {\r\n        this.toggle = true;\r\n    });\r\n\r\n\r\n\r\n  [1]: http://plnkr.co/edit/aK01ZtutIIkiJnvZiWlU?p=preview'
4423,'matsko',"animate.enter gives error on collections including comment or text nodes.\nMy use-case is I have a directive where the user can provide a template, and I animate that in.\r\n\r\nI get the template into an element by doing this:\r\n```js\r\nvar newElement = angular.element('<div></div>').html(template).contents();\r\n```\r\n\r\nIf the template contains text or comment nodes, errors occur when I try to `$animate.enter`.\r\n\r\nHere's a simple example: http://ajoslin.com/test/angular-animate-text-node/ ( plunkr is down atm :-( )\r\n\r\nI guess the DOM doesn't like insertBefore-ing a text node, or something."
4421,'petebacondarwin',"fix($compile): fix missing error handling when new-scope directive is applied before isolated-scope directive\nGiven `dirA`, which requests new scope, and `dirB`, which requests new & isolated scope. If `dirA` is applied *after* `dirB`, `$compile` reports an error ('Multiple directives [dirB, dirA] asking for new/isolated scope'), which is expected. However, if `dirA` is applied *before* `dirB`, e.g. because `dirA` has higher priority, then no error is thrown and `dirA` shares the isolated scope created for `dirB`. This is inconsistent and can break `dirA`, which might need to access to parent scope's members. This fix addresses this situation by throwing error regardless of order of directive application.\r\n\r\nCloses #4402"
4401,'matsko','ngShowDirective adds the ng-hide-remove class when the element is already shown\nngShowDirective watches attr.ngShow, and adds ng-hide-remove class even when the attr.ngShow value "changes" from true to true (or from false to false).\r\n\r\nAnimations should only be applied if the actual value of ng-hide has changed:\r\n\r\nThe function on line 146 of https://github.com/angular/angular.js/blob/master/src/ng/directive/ngShowHide.js\r\n```\r\nvar ngShowDirective = [\'$animate\', function($animate) {\r\n  return function(scope, element, attr) {\r\n    scope.$watch(attr.ngShow, function ngShowWatchAction(value){\r\n      $animate[toBoolean(value) ? \'removeClass\' : \'addClass\'](element, \'ng-hide\');\r\n    });\r\n  };\r\n}];\r\n```\r\n\r\nshould become\r\n```\r\nvar ngShowDirective = [\'$animate\', function($animate) {\r\n  return function(scope, element, attr) {\r\n    scope.$watch(attr.ngShow, function ngShowWatchAction(value, oldValue){\r\n      if ( toBoolean(value) !== toBoolean(oldValue) ) {\r\n        $animate[toBoolean(value) ? \'removeClass\' : \'addClass\'](element, \'ng-hide\');\r\n      }\r\n    });\r\n  };\r\n}];\r\n```\r\n\r\nand similar with ngHideDirective on line 298'
4397,'matsko','Animations don\'t work when used inside a div that has both ng-app and ng-view directives.\nI was running my app in a single div having both ng-app and ng-view set on it.\r\n```html\r\n<div data-ng-app="shayba.app" ng-view="">\r\n</div>\r\n```\r\n\r\nAnimations didn\'t work for me until I\'ve created an inner div specifically for ng-view'
4394,'tbosch','Latest 1.2 does not work with ng-csp mode.\nAt least two major problems:\r\n   - injects inline script on startup\r\n   - ng-show/ng-hide are broken\r\n\r\nAnd I\'m not 100% certain, but I think ng-csp itself is broken in top-of-tree (it gets added to sniffer too late? - not sure, this may be my debugging failure)\r\n\r\nTo confirm:\r\n   - in Gruntfile.js, uncomment the "util.csp()" line, and try to run the tests.\r\n\r\nNote:  if you can point me at the person that knows about the state of CSP - I\'d be happy to contribute to fixing.'
4362,'matsko',"Why does ngView add the new element before the previous element when animating?\nThis seems like it's completely the wrong way around to me, if you want to do a simple fadeOut -> fadeIn animation, you can't get it to look good because the new view pushes the old view down instantly.\r\n\r\nI guess you could change the animation to a keyframed anim and set `display: none` until it starts, but it's a bit overkill..?"
4361,'IgorMinar','Circular dependency if exception during resource init\nclass MyResource extends $resource("/test", { arg: throw "holy shit!" })\r\n\r\nthe first time the resource is needed, the exception is throw.\r\nthe second time "Error: [$injector:cdep] Circular dependency found: "\r\n\r\nIt seems that the resource is in cache as an empty object and is considered as INSTANTIATING:\r\n(cache[serviceName] === INSTANTIATING) returns true'
4360,'IgorMinar','fix(modules): stop leaking global variables in tests\nThe routeUtils.js file was declaring a number of functions that were\r\nleaking into other modules such as ngMocks causing tests to pass\r\nincorrectly.'
4351,'btford','Fixing missing dependency in Step 5 of tutorial\n'
4344,'petebacondarwin','fix(input): make ngList honor custom separators\nRemove support for regexp separators, and correctly use custom separator when formatting values into the control.\r\n\r\nFollows @IgorMinar\'s suggestions from #2561, as suggested by @petebacondarwin in #4008.\r\n\r\nThe existing "should allow custom separator" test was incomplete, since it did not check that the custom separator was used to format the values in the control.\r\n\r\nNotes:\r\n\r\n1. The behaviour is still not perfect, because when using a custom separator containing whitespace, e.g. `" | "`, the spaces should be rendered into the control. Even with my changes, this is not the case, because the `attr.ngList` value has already been trimmed prior to being passed to the directive. I have omitted the failing test for this case. How would we handle this?\r\n\r\n2. The whitespace behaviour should arguably be affected by the value of `ng-trim` where present: I\'d suggest that when it is present, the values between the separators should not be trimmed.'
4326,'IgorMinar',"We need opers for #angularjs channel at freenode\nFirst, I am sorry to open an issue in this repo, but is the closest I found.\r\n\r\nI want to ask to Mr. @IgorMinar if he could spare some @ in the IRC channel.\r\n\r\nI understand that the core team have no time to be on the IRC so maybe the community can take the control of the channel.\r\n\r\nI offer myself to do that (with help of course). I spend like 14 hours/day in the channel helping everyone that comes with questions and I know others who does the same.\r\n\r\nThe channel is growing really fast (we were like 400 some months ago and we are not 600+) and sometimes we get random guys doing some spamming, random messages and other kinds of flood. Freenode opers seems to do nothing to change it.\r\n\r\nThank you for read and apologies if this doesn't belongs here.\r\n\r\n/cc @wesleycho"
4314,'pkozlowski-opensource','Can\'t load array of strings/numbers\nHi,\r\n\r\nI\'ve tried to access a resource via REST that looks like this: `["abc", "def"]`. Unfortunately, this returns an object that looks like this: `[{0: "a", 1: "b", 2: "c"}, {0: "d", 1: "e", 2: "f"}]`, in other words it iterates over the strings and converts them to objects. When trying the same with an array of `[42, 23]` I get as an result `[{},{}]`.\r\n\r\nThis is due to https://github.com/angular/angular.js/blob/master/src/ngResource/resource.js#L488 which creates a new `Resource` which can\'t deal with strings (or numbers): https://github.com/angular/angular.js/blob/master/src/ngResource/resource.js#L416 because it uses `copy` which handles neither strings nor numbers.\r\n\r\nThanks to @Lukas-Stuehrk for debugging this.'
4304,'jeffbcross','Removes px declaration from x,y coordinates in svg element\npx is the default unit for x and y coordinates in svg elements.\r\n\r\nhttp://www.w3.org/TR/SVG/coords.html#InitialCoordinateSystem'
4302,'petebacondarwin',"docs($provider): new example, more guidance on factory() vs service()\nI was quite confused by `$provide`'s documentation - it wasn't very explicit on which method (`factory()` vs `service()` etc) to use when, and the example given had no good reason to be a singleton.\r\n\r\nI've updated the docs to be explicit. I've also provided a more real-world example that uses an injected service, and has a good reason to be a singleton.\r\n\r\n[It's not just me who's confused](http://stackoverflow.com/search?q=angularjs+service+vs+factory) by $provide, so I thought it'd be good to make this page clearer.\r\n\r\nI've made an [external test](http://jsbin.com/EMabAv/1/edit?js,output) for the new documented example."
4293,'matsko','fix(input): determine input[type=number] validity with ValidityState\nFixes #2144\r\n\r\n**What happens**:\r\n\r\n```html\r\n<form name="form">\r\n  <input type="number" ng-model="value" name="value" />\r\n  Number is valid: {{form.value.$valid}}\r\n</form>\r\n```\r\n\r\n- **Chromium** / **Safari** / **Opera**\r\n   1. Non-numeric evaluates to empty string\r\n   2. Empty-string is considered valid unless `require` flag is set\r\n   3. False positive: invalid number reported as valid\r\n\r\n- **Firefox** / **Internet Explorer**\r\n   1. Non-numeric string entered, string is not transformed by native code\r\n   2. Regex tests string for validity\r\n   3. Regex test fails, invalid number reported as invalid\r\n\r\n**This patch should**:\r\n\r\n1. Listen to input\'s `ValidityState` on browsers which implement `ValidityState`\r\n2. Allow the differentiation between "invalid" empty strings and "valid" empty strings\r\n3. Not need `require` flag to validate number inputs correctly.\r\n4. Provide (kind of gross) framework for adding `ValidityState` support to other InputTypes'
4281,'jeffbcross','fix(ngResource): Remove request body from $delete\nPrevent the  obj.$delete instance method from sending the resource as the request body.  This commit uses the existing hasBody boolean to only set httpConfig.data for methods which should have a request body.\r\n\r\nCloses #4280'
4277,'mzgol','Wrong cast to boolean\n`toBoolean(window) === false`\r\n\r\nbecause of that `toBoolean(value)` function checks `value.length` property, which means for `window` the count of (i)frames - usually 0.'
4271,'mzgol','feat(jQuery): upgrade to jQuery to 2.0 [WIP]\njQuery 2.0 removes `jQuery.cache` which prevents the angular-mocks logic to clean up after each test (to remove element data). There are two tests that fail because of this change. One way to fix this might be monkey-patching `jQuery#data` with a proxy which would keep track of all elements and data that need to be cleaned.'
4265,'matsko','1.2-rc2 breaks animation steps in example\nAnimation restarts from scratch in\r\n    http://plnkr.co/edit/JX3qUkMqp7AdVeeXAj9r?p=preview\r\n\r\nworks properly in\r\n    http://plnkr.co/edit/oqIWoYimcYAArRMCKo4V?p=preview'
4257,'petebacondarwin','Clarification\nThe wording seems confusing and these adjustments seem to capture the intent with less turbulence.'
4256,'petebacondarwin','Updated example to be in line with best practices\nSee pull request https://github.com/angular/angular.js/pull/4092'
4255,'petebacondarwin','Updated example to be in line with best practices\nSee pull request https://github.com/angular/angular.js/pull/4092'
4254,'petebacondarwin','Updated example to be in line with best practices\nSee pull request https://github.com/angular/angular.js/pull/4092'
4253,'petebacondarwin','Updated example to be in line with best practices\nSee pull request https://github.com/angular/angular.js/pull/4092'
4250,'petebacondarwin','Updated example to be in line with best practices\nSee pull request https://github.com/angular/angular.js/pull/4092'
4240,'btford',"feature(ngEnabled): define ngEnabled directive as negation of ngDisabled\nProvide a negated form of the `ngDisabled` directive as `ngEnabled` in\r\nthe same vein as the `ngHide`/`ngShow` pair. Allow for slightly clearer\r\ntemplates by avoiding double negatives, as in:\r\n\r\n    <input ng-disabled='!(predicate1 && predicate2)'/>\r\n    <input ng-enabled='predicate1 && predicate2'/>\r\n\r\nCloses #1252"
4231,'matsko',"ng-class on html tag kills animation after triggering\nWhen adding conditional classes with on html tag (with ng-class), setting it off for the first time kills all the animations on page as it removes animate state from html tag.\r\n\r\nYou can see example here: http://plnkr.co/edit/nbganjCblEL4Oj2hm6Y5\r\n\r\nIf you click on 2nd link animation would be toggled endlessly. Clicking on first link runs the animation only first time. All subsequent clicks will not animate.\r\n \r\nI've investigated this and realized that during the animation, performAnimation checks for parent.inheritedData(NG_ANUMATE_STATE) which translates eventually to $(html).data('$$ngAnimateState'). If successfull, adds animateState to element animated and after animation was done removes it. When using ng-class on HTML tag, \r\nanimate state is add and removed from html tag.\r\nAs a result:\r\n\r\nparent.inheritedData(NG_ANIMATE_STATE) || disabledAnimation).running\r\n\r\nis always true after that point, thus bailing out of all the subsequent animations."
4226,'IgorMinar','Bug ngAnimate 1.2.0-rc2  with side effects on watches on form$invalid when combined with ng-if in some inputs\nI am wathcing a strange behavior when including ngAnimate as dependency.\r\n\r\nI have a button with ng-disabled="$form.invalid" which is not being updated on some user events made on the form.\r\n\r\nHere is an example ro reroduce the bug\r\n```HTML\r\n\t<!DOCTYPE html>\r\n\t<html ng-app="app">\r\n\t<head></head>\r\n\t<body ng-controller="MainCtrl">\r\n\t\t\r\n\t\t\t<form name="myForm" novalidate>\r\n\t\t\t\t<p>\r\n\t\t\t\t<label>Required Input </label>\r\n\t\t\t\t<input type="text" name="mytext" ng-model="vm.mytext" required/>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tOption 1 <input type="checkbox" name="option1" ng-model="vm.option1"/>\r\n\t\t\t\t\tOption 2<input type="checkbox" name="option2" ng-model="vm.option2"/>\r\n\t\t\t\t</p>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Fill Fields</p>\r\n\t\t\t\t\t<div ng-if="vm.option1">Fields for Option 1\r\n\t\t\t\t\t\tRequired\r\n\t\t\t\t\t\t<textarea name="myField1" required ng-model="vm.myField1"></textarea>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t<div ng-if="vm.option2">Fields for Option 2\r\n\t\t\t\t\t\tRequired\r\n\t\t\t\t\t\t<textarea name="myField2" required ng-model="vm.myField2"></textarea>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<button ng-disabled="myForm.$invalid" ng-click="submit()">Submit</button>\r\n\t\t\t</form>\t\r\n\t\t\r\n\t\t<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0-rc.2/angular.min.js"></script>\r\n\t\t<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0-rc.2/angular-route.min.js"></script>\r\n\t\t<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0-rc.2/angular-animate.min.js"></script>\r\n\t\t<script>\r\n\t(function () {\r\n\t\t"use strict";\r\n\t\t\r\n\t\tvar app = angular.module(\'app\', [\'ngAnimate\']);\t\t//WITH ngAnimate as dependency, the button ng-disabled does not respond to checkbox changes\r\n\t\t//var app = angular.module(\'app\', []);\t\t\t\t//Comment the previous line and uncomment this to have this sample working as expected\r\n\t\t\r\n\t\tapp.controller(\'MainCtrl\', [\'$scope\', \r\n\t\t\tfunction ($scope) {\r\n\t\t\t\t$scope.vm = {}\r\n\t\t\t\t\r\n\t\t\t\t$scope.submit = function() {\r\n\t\t\t\t\tconsole.log(\'submitted\');\r\n\t\t\t\t\t\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t]);\r\n\t})();\r\n\t\t</script>\r\n\t</body>\r\n\t</html>\r\n```\r\n\r\nHere the steps to reproduce the bug:\r\n\r\n1 - fill some text in text box \'Required Input\' (the button becomes enabled)\r\n2 - check Option 1 (the button becomes disabled)\r\n3 - fill textarea of Option 1 (the button becomes enabled)\r\n4 - check Option 2  (the button becomes disabled)\r\n5 - uncheck Option 2 __the button remains disabled, which is not correct__\r\n\r\n\r\nNow, if we do not include ngAnimate as dependency\r\n1 - fill some text in text box \'Required Input\' (the button becomes enabled)\r\n2 - check Option 1 (the button becomes disabled)\r\n3 - fill textarea of Option 1 (the button becomes enabled)\r\n4 - check Option 2  (the button becomes disabled)\r\n5 - uncheck Option 2  __the button becomes enabled which is correct__\r\n\r\n\r\nHere is a jsfiddle http://jsfiddle.net/bfcamara/8s6r2/'
4225,'matsko','ngAnimate causes reset (flicker) with ng-view and animate.css in Firefox\nAngularjs: 1.2.0-rc2 & rc1\r\n\r\nWhen I use ngAnimate with animate.css on ng-view it causes some sort of reset after the animation. Which results in a flicker.\r\n\r\nFirefox (23.0.1):\r\nhttp://plnkr.co/edit/BFzq7Gt4KAJlhSGqskIb?p=preview\r\n\r\nIn Chrome, IE10 and Safari 5.1.7 the animation works without any problems.\r\n\r\nSame thing seems to happen with ng-repeat;'
4221,'IgorMinar','BUG REPRO: ie8 bug when module() inside it() throws and exception (thrown during in...\nie8 bug when module() inside it() throws and exception (thrown during inject() call)\r\n\r\nThis is a bug where my exception object is getting lost.  Here\'s the\r\nresult from a Karma trace:\r\n\r\n    Running "autotest:jqlite" (autotest) task\r\n    INFO [karma]: Karma v0.11.0 server started at http://localhost:9876/\r\n    WARN [web-server]: 404: /favicon.ico\r\n    INFO [IE 8.0.0 (Windows XP)]: Connected on socket hfE_1IJ4LeFwf6RJcVOe\r\n    INFO [watcher]: Changed file "/Users/chirayu/work/angular.js/test/ng/sceSpecs.js".\r\n    INFO [karma]: Delaying execution, these browsers are not ready: IE 8.0.0 (Windows XP)\r\n    IE 8.0.0 (Windows XP) SCE CKCK: IE8 TypeError FAILED\r\n            Expected function to throw CKCK: foo , but it threw Object doesn\'t support this property or method\r\n    IE 8.0.0 (Windows XP): Executed 1 of 2225 (1 FAILED) (skipped 2224) ERROR (7.738 secs / 0.031 secs)\r\n\r\nI don\'t see the real exception but get a TypeError.  There is only one\r\nstack frame between when the exception object is the one I want and the\r\none where it\'s been replaced by TypeError.  No code executes between\r\nthose two frames afaik from looking at the IE8 debugger.\r\n\r\nIn the inject() call:\r\n\r\n      if (!injector) {\r\n        injector = currentSpec.$injector = angular.injector(modules);\r\n      }\r\n\r\nthe exception is thrown in "injector = currentSpec.$injector = angular.injector(modules);"\r\n\r\nmaking injector undefined.  The caller frame is the anonymous function\r\nin the expect() line:\r\n\r\n    expect(function() { inject(angular.nop); }).toThrow(\'CKCK: foo\');\r\n\r\nWhen control reaches that frame through, the exception object is no\r\nlonger "CKCK: foo" but a TypeError.  :('
4220,'petebacondarwin','docs(ngClass): clarity\n'
4218,'btford','Local fail on master on one of date filter tests\nRunning `grunt test` on current `master` causes the following failure on my machine (a mid-2012 MacBook Pro with OS X 10.8.5):\r\n```bash\r\nRunning "tests:jqlite" (tests) task\r\nINFO [karma]: Karma v0.11.0 server started at http://localhost:9876/\r\nINFO [launcher]: Starting browser Chrome\r\nINFO [Chrome 30.0.1599 (Mac OS X 10.8.5)]: Connected on socket M-s8df8pw3pb7fBlwWjA\r\nChrome 30.0.1599 (Mac OS X 10.8.5): Executed 700 of 2289 SUCCESS (0 secs / 2.66 secs)\r\nChrome 30.0.1599 (Mac OS X 10.8.5): Executed 703 of 2289 SUCCESS (0 secs / 2.681 secs)\r\nChrome 30.0.1599 (Mac OS X 10.8.5): Executed 707 of 2289 SUCCESS (0 secs / 2.715 secs)\r\nWARN [web-server]: 404: /%7B%7BtestUrl%7D%7D\r\nChrome 30.0.1599 (Mac OS X 10.8.5) filters date should accept negative numbers as strings FAILED\r\n\tExpected \'Jan 1, 1970\' to equal \'Dec 31, 1969\'.\r\n\tError: Expected \'Jan 1, 1970\' to equal \'Dec 31, 1969\'.\r\n\t    at null.<anonymous> (/Users/mgol/Documents/projects/public/angular.js/test/ng/filter/filtersSpec.js:250:26)\r\nChrome 30.0.1599 (Mac OS X 10.8.5): Executed 2289 of 2289 (1 FAILED) (9.315 secs / 8.54 secs)\r\n```\r\n\r\nThe test apparently passes on angular-ci jobs since http://dashboard.angularjs.org doesn\'t show any errors.\r\n\r\nWhat\'s wrong?\r\n\r\nMy `locale`, if that\'s relevant:\r\n```bash\r\n$ locale\r\nLANG="en_US.UTF-8"\r\nLC_COLLATE="en_US.UTF-8"\r\nLC_CTYPE="en_US.UTF-8"\r\nLC_MESSAGES="en_US.UTF-8"\r\nLC_MONETARY="en_US.UTF-8"\r\nLC_NUMERIC="en_US.UTF-8"\r\nLC_TIME="en_US.UTF-8"\r\nLC_ALL="en_US.UTF-8"\r\n```'
4217,'IgorMinar',"fix($compile): check clashing directives before compilation\nClashing directive check was not working correctly when two directives requested `'element'` transclusion because one would start a new compilation (a recursive sub procedure) with any duplicate info being reset.\r\n\r\nThis PR moves the checking to its own loop which is executed before the actual compilation."
4215,'btford',"The dollar sign is a bit deceptive.\nIt could just be me, but I thought $save() was a hidden Angular method of ngModelController. Quick find in the source code was good enough to find out it isn't, but it might be better to use another example here..."
4204,'petebacondarwin',"fix(event.stopPropagation()): sibling event handlers should not be cancelled by event.stopPropagation()\nThis fix addresses an issue where event.stopPropagation() prematurely ends execution of event listeners assigned to the same scope from which they are $emit-ted.\r\n\r\nFor example you assign 2 listeners to the same scope:\r\na)\r\n\r\nscope.on('myEvent', function(evt) {\r\n  evt.stopPropagation();\r\n  //Do something\r\n});\r\nb) Somewhere else on the same scope, perhaps inside other directive or controller\r\n\r\nscope.on('myEvent', function(evt) {\r\n  //Do something else\r\n});\r\nCurrently handler in 'a' will prevent handler 'b' from executing even though they are on the same exact scope, but this is not the intention of the stopPropagation() function. Intention is to prevent 'myEvent' from bubbling into $parent scope.\r\n\r\nIf we take jQuery or just plain DOM eventing model, we'll see that stopPropagation does NOT prevent multiple handlers that are attached to the same node from firing."
4202,'btford','docs($injector): Reword `fn` param docs and link to DI information\nThe documentation for $injector.invoke is currently very unclear, and contains a typographic error.\n\nI\'d like to link to the more detailed DI docs instead of simply stating "function annotation" as though that means something out of context.\n\n---\n\n**note**: I\'m not sure if I need to specify this link as an external link or not. If it\'s possible, please let me know so I can correct this.'
4194,'mzgol',"fix(jqLite): clone wrapNode in jqlite/wrap\nChange jqLite's implementation of wrap() to clone the wrapNode before\r\nwrapping the target element in it.\r\n\r\nMatch jQuery's wrap() behavior and prevent accidentally attaching\r\ntarget element to the DOM as a side effect.\r\n\r\nCloses #3860"
4190,'matsko',"Animating movement of items within a list with ngRepeat\nHere is a plunk of a simple leaderboard-style list which shows some players' names ordered by a 'points' field. There is a button to give more points to one of the player, thus making they climb a position.\r\n\r\nhttp://plnkr.co/edit/eVycM3?p=preview\r\n\r\nIn the example, the transition is static. There should be a way to animate it, making it easier for the eye of the user to follow.\r\n\r\nIs this possible with the 'move' animation of ngRepeat? How?"
4179,'petebacondarwin',"docs(angular.copy): add a form example with the 2 possible arguments\nCopied from another example but it's relevant here and also added the two possible argument signatures\r\n"
4178,'matsko','ngHide animation will peform unexpectly when working with css3 animation.\nI found that animation work with css3 animation will perform unexpectly.\r\nsee the [DEMO](http://jsfiddle.net/EXgTB/11/), Click the checkbox constantly, You will find the bug.\r\n\r\nIt will peform expectly sometime **BUT** it will peform unexpectly sometime. \r\nBecause the `ng-hide` class set unexpectly.\r\n\r\nIf you remove the `.test-pulse`, everything works fine.\r\nI am confusing with this issue for the whole day. Can anyone tell me how to fix it?'
4174,'matsko',"1.2.0rc2 : ngRepeat sometimes laggy with adding/removing elements with no animations/transitions\nThis is something that might or might not be related to #3587.\r\n\r\nBasically I have a ngRepeat that has no animations on it however sometimes when the data for the ngRepeat changes, some of the old data is visible for a brief moment.  From what I can tell, I think this has to do with the fact that the startAnimation function in the ngAnimate module is doing this:\r\n\r\n```javascript\r\n$timeout(done, duration * 1000, false);\r\n```\r\n\r\nIf the element has no animation then duration equals 0 however using ```$timeout()``` to call ```done``` seems like it can delay the removal of the element just enough so that it still appears when it should not (my understanding is that you use ```$timeout``` with 0 to have something happen when in the next digest cycle).  When I change that line to this:\r\n\r\n```javascript\r\nif(duration > 0) {\r\n  $timeout(done, duration * 1000, false);\r\n} else {\r\n  done();\r\n}\r\n```\r\n\r\nI can't get the issue to happen.  Logically this make sense to me but mind you I am not all the familiar with the internals of the animation system.  I think this code makes sure that the ```done``` callback is called within the context of the current digest which should make sure the element is remove at the proper time.\r\n\r\nThis also might be somewhat related to the performance issues I am hearing about with performAnimation() but even if it is, this still seems like something that needs to be fixed.\r\n\r\nIs this an actually issue and if so is my code change a valid way to fix it (it does fix the issue but I am not sure if it would break something else)?\r\n\r\nCreating a plunker example is going to be difficult because it works in simple application example because it is not doing a lot and the application that does show this issue is something I can't share publicly.\r\n"
4172,'petebacondarwin','Add an ngCopy directive\n'
4169,'matsko','ngClass doesn\'t work with ngInclude anymore\nI updated from 1.0.7 to 1.2.0RC2 and noticed that the ng-class doesn\'t work together with ng-include.\r\n\r\nI had to change\r\n```javascript\r\ntemplate = \'<span class="list-icon-small grey" ng-include="\\\'assets/icons/icons-background.svg\\\'" ng-class="{show: !isPending}" />\'\r\n```\r\nto\r\n```javascript\r\ntemplate = \'<span ng-class="{show: !isPending}"><span class="list-icon-small grey" ng-include="\\\'assets/icons/icons-background.svg\\\'" /></span>\'\r\n```\r\n\r\nng-include worked always, just the ng-class didn\'t work anymore.'
4166,'petebacondarwin','fixes #2235: fix docs for directive replace:false\nAs discussed in #2235, the documentation for how directives behave regarding `replace: false` falls short of explaining what will happen to the contents of the current element.\r\n\r\nThis pull request has a minor change to the documentation to make explicit what happens in this case.'
4163,'jeffbcross','fix(mock): Added a way to preserve initally-bound events\nSome third-party libraries, such as bootstrap, rely on\r\nevents that were initially added to the document in order\r\nto function properly. Since angularMock automatically\r\nclears data and events after each test, testing angular\r\ncomponents built with these third-party libraries becomes\r\nimpossible.\r\n\r\nThe solution is to preserve events that were added before\r\nthe first test, and let the angularMocks continue to do\r\nits automatic cleanup for everything that is added thereafter.\r\n\r\nFixes #3916'
4162,'btford','fix(ngTranslude): detect ngTranslude usage without a translusion directive\nCloses #3759'
4161,'petebacondarwin','docs(ngIf): formatting, clarity\n'
4159,'btford','fix($compile): work around issue in jQuery 1.10.2\njQuery 1.10.2 does not attach data to comment nodes, which previously broke `$compile`.\r\nThis changes how elements with "transclude element" and a controller are compiled to\r\navoid the issue.\r\n\r\nCloses #3764'
4157,'vojtajina','feat(ngRepeat): use block separator comments\nThis change allows the use of ngRepeat in combination with directives that use transclusion and directives that replace its original elements or add more elements to ngRepeat blocks.'
4156,'petebacondarwin','docs(angular.module) pass more than one service on controller init\nInformation regarding how to pass more than one service during controller init.'
4153,'vojtajina',"fix(input): `false` is no longer an empty value by default\nThis builds upon and improves @lgalfaso's PR https://github.com/angular/angular.js/pull/3658, without resorting to hard-coding fixes across directives.\r\n\r\n\r\n`checkboxInputType` and `ngList` directives need to have special logic for whether\r\nthey are empty or not.  Previously this had been hard coded into their\r\nown directives or the `ngRequired` directive.  This made it difficult to handle\r\nthese special cases.\r\n\r\nThis change factors out the question of whether an input is empty into a method\r\n`$isEmpty` on the `ngModelController`.  The `ngRequired` directive now uses this\r\nmethod when testing for validity and directives, such as `checkbox` or `ngList`\r\ncan override it to apply logic specific to their needs.\r\n\r\nCloses #3490, #3658, #2594\r\n"
4150,'IgorMinar','fix(ngAnimate): ensure that delays are always considered before an animation closes\nCloses #4028'
4149,'btford',"style($compile): fix comment of Attributes.$observe\nThe current comment of `Attributes.$observe` doesn't state correctly the behavior when the attribute contains no interpolation. Specifically, it states that the observer function will never be invoked if the attribute contains no interpolation. However, the actual behavior in this case is that the observer will be invoked once during the next digest loop."
4148,'IgorMinar','feat($sce): simpler patterns for $sceDelegateProviders white/blacklists\nCloses #4006'
4146,'petebacondarwin','docs(deeplinking.ngdoc): correct and enhance deep linking demo\n\r\nAdd "#/" linking\r\nImplement ability to add and remove contacts\r\nUse semantic tags\r\n\r\nCloses #3870'
4145,'IgorMinar','fix(ngRepeat): should correctly track elements even when the collection is initially undefined\nCloses #3964'
4141,'jeffbcross','chore(grunt): switch to the new //# sourceMappingURL pragma\nAll browsers except from Chrome implemented both the old\r\n"//@ sourceMappingURL" and the new "//# sourceMappingURL" pragmas\r\nin the same version so the only reason to keep the old one was Chrome.\r\nHowever, Chrome 29, i.e. current stable version already supports\r\nthe new pragma so there\'s no need to wait any longer.'
4140,'btford','chore(package.json): update npm packages\nSome of node dependencies have much newer versions; one of them is Lo-Dash\r\nthat has recently released the 2.0.0 version bringing in new useful methods.'
4126,'btford','docs(ngRoute): $routeChangeStart event, add angularEvent param\nadded missing implied first argument, angularEvent, to match other $routeChange event documentation'
4124,'matsko','ngAnimate causes serious layout trashing\nUsing ngAnimate can cause serious layout trashing. Compare two videos:\r\n1) Our current app, `ngAnimate` included: http://youtu.be/kUf9vDYIlt0\r\n2) Our current app with just one difference - removing `ngAnimate` from the list of modules our app depends on: http://youtu.be/210VHxidY0o\r\n\r\nI recorded Timeline profiles for an operation of switching the tab from the second to the third one; version with `ngAnimate` causes a massive amount of reflows:\r\n1) Timeline with `ngAnimate` included:\r\n![with-ng-animate](https://f.cloud.github.com/assets/1758366/1193892/da10e8e8-247b-11e3-8ffa-aedd54bcde94.png)\r\n2) Timeline without `ngAnimate`:\r\n![without-ng-animate](https://f.cloud.github.com/assets/1758366/1193897/e7ddda1c-247b-11e3-8060-05256d3e0a86.png)\r\n\r\nOne of my colleagues, @jrencz, created videos of analogous operations on his 4-year-old MacBook, notice the slowness:\r\n1) `ngAnimate` included: http://www.youtube.com/watch?v=FEmSiWq1qAI\r\n2) `ngAnimate` excluded: http://www.youtube.com/watch?v=bshDaxUAzU4'
4120,'tbosch',"JQLite.find() fails on when collection contains text nodes\nI created a directive. I use the transclude function passed by compile to clone one element of the original DOM into my template DOM.\r\n\r\n```javascript\r\ncompile: function (cElt, cAttrs, transclude) {\r\n  return function ($scope, lElt, lAttrs) {\r\n    // some code\r\n    transclude($scope, function (clone) {\r\n      var thead = clone.find('thead');\r\n      lElt.append(thead);\r\n    });\r\n    // some code\r\n  };\r\n}\r\n```\r\n\r\n`clone` is a JQLite array-like object and when you call `find(tagName)` on it, it calls `find(tagName)` on each element and group the results. The problem is that `clone` can contain text nodes and behind the scenes, `find(tagName)` uses `getElementsByTagName` which doesn't work on text nodes."
4114,'petebacondarwin','Prevent <code> elements from wrapping to the next line\nPrevent code wrapping to the next line like here:\r\n![code_nowrap](https://f.cloud.github.com/assets/259753/1190611/a802c1d8-2439-11e3-95aa-083d83776dc9.png)\r\n'
4112,'petebacondarwin','fixed typo\n'
4110,'btford','1.2.0-rc2 flicker on iOS7 when changing css class\nHi. When changing the class of a list item after an ngTouch event, the list item flickers. The class is changed depending on the state of $scope.selected with ngClass.'
4106,'petebacondarwin','docs(ngHref): fix formatting, clarify\n'
4105,'petebacondarwin','Fixed a lil typo\nHere was the previous sentence:\r\n\r\n"This can be used to clean up and 3rd party bindings to the DOM element before it is removed."\r\n\r\nChanged "and" to "any"'
4104,'petebacondarwin','Replace method needs a title\n'
4103,'petebacondarwin',"Cleaned up confusing use of the term URL to refer to $location as well a...\n...s 'URL in the browser'"
4101,'petebacondarwin',"Update http.js\n.get['My-header'] = 'value' will never work when .get is undefined."
4100,'petebacondarwin','"than => then" typo fix\n'
4099,'petebacondarwin','docs(ngShowHide): clarity\n'
4096,'btford','feat(filter): Array.filter function should receive a value and index\nModification of filter.filter to pass the index of the current iteration as the second argument which is similar to how the native implementation of array.filter behaves.\r\n\r\nCloses #654'
4092,'btford',"Updated example to be in line with best practices\nChanging the example documentation to be in line with best practices. This seems to be a popular complaint:\r\n\r\nhttp://docs.angularjs.org/guide/dev_guide.mvc.understanding_controller#comment-831705214\r\n\r\nI'll update the rest of the docs if this gets approved."
4091,'petebacondarwin','feat(filter): allow map of filters to be registered in $FilterProvider\nThis feature adds similar functionality to what `$ControllerProvider.register` and `$CompileProvider.directive` currently provide by allowing a map of filter name/factories to be passed as the sole argument to `$FilterProvider.register` to register all of the specified filters.\r\n\r\nCloses #4036'
4076,'petebacondarwin','doc(ngCloak): fix grammar, clarity\n'
4071,'shepheb',"ngTouch: In swipe directives, Event object is not available as $event\nHi there!, in the docs it says that Event object should be available as $event on swipe directives (http://docs.angularjs.org/api/ngTouch.directive:ngSwipeLeft), this is not working. It only works for ng-click. Here is an example in Plunker:\r\n\r\nhttp://plnkr.co/edit/I0DvVA?p=preview\r\n\r\nI'm trying to access $event in the swipe directive to use $event.stopPropagation() because sometimes (not always) I'm getting a click event after the swipe event. You should also see this behavior in the example... (maybe is this another bug?). Greets!"
4067,'petebacondarwin','encode uri: Matrix urls, semicolons fix 4065\nSolved issue 4065, Support for Matrix URIs\r\nhttps://github.com/angular/angular.js/issues/4065\r\n\r\n- added ; to the list of replacements\r\n- added a unit test'
4063,'petebacondarwin','Image has spelling error\nimg/guide/concepts-view.png has a spelling error where "wold" should be written out as "world"'
4061,'petebacondarwin','docs(ngClassEven,ngClassOdd): fix grammar\n'
4060,'petebacondarwin','docs(input): fix grammar\n'
4056,'btford','$location HTML5 Mode - appBase is case sensitive.\nIf the application lives in a sub directory, Angular raises an exception if the user types the application url in a different case than what\'s defined by the base element.\r\n\r\nExample:\r\n\r\nMarkup: `<base href="/base/" >`\r\nRoute: `.when(\'/\', { templateUrl: \'partials/gettingstarted\', caseInsensitiveMatch: true })`\r\n\r\nIf the application is accessed with `http://localhost/base/`, the routing works as expected.  If the user enters via `http://localhost/Base/`, Angular throws an exception:\r\n\r\n    TypeError: Cannot read property \'1\' of null\r\n        at matchUrl (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:7084:25)\r\n        at Object.$$parse (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:7152:5)\r\n        at $LocationProvider.$get (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:7589:15)\r\n        at Object.invoke (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3129:28)\r\n        at http://localhost/common/vendor/angular-1.2.0rc1/angular.js:2970:37\r\n        at getService (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3086:39)\r\n        at Object.invoke (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3107:13)\r\n        at http://localhost/common/vendor/angular-1.2.0rc1/angular.js:2970:37\r\n        at getService (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3086:39)\r\n        at Object.invoke (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3107:13) angular.js:7818\r\n    Error: [$injector:cdep] Circular dependency found: \r\n        at hasOwnPropertyFn (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:60:12)\r\n        at getService (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3079:17)\r\n        at invoke (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3107:13)\r\n        at Object.instantiate (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3141:23)\r\n        at $get (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:5550:28)\r\n        at http://localhost/common/vendor/angular-1.2.0rc1/angular.js:5060:34\r\n        at forEach (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:203:20)\r\n        at nodeLinkFn (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:5047:11)\r\n        at compositeLinkFn (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:4607:15)\r\n        at compositeLinkFn (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:4610:13) angular.js:7818\r\n\r\nThe `$$rewrite` function returns no url because the `beginsWith` function fails to find a match.  \r\n\r\n\r\n'
4047,'vojtajina',"feat($interval) add a service wrapping setInterval\nThe $interval service simplifies creating and testing recurring tasks.\r\nThis service does not increment $browser's outstanding request count,\r\nwhich means that scenario tests and Protractor tests will not timeout\r\nwhen a site uses a polling function registered by $interval. Provides\r\na workaround for #2402.\r\n\r\nFor unit tests, repeated tasks can be controlled using ngMock$interval's\r\ntick(), tickNext(), and tickAll() functions."
4045,'chirayuk','fix($sce): make trustAs watchable\n068d8615d245a70bfde9007606b08a54c6e1cfec made changes to ngBindHtml, making it watch `attr.ngBindHtml` instead of `$sce.parseAsHtml(attr.ngBindHtml)`. (landed in 1.2.0rc2)\r\n\r\nSince the `attr.ngBindHtml` expressions returned the result of calling `$sce.trustAs`, we would get a `[$rootScope:infdig]` error (#3932, #3980), because `.trustAs` always returns a new object.\r\n\r\nThis PR solves the problem by caching the trustedValues returned by `$sce.trustAs`'
4044,'jeffbcross',"undefined TypeError: Cannot call method 'replace' of undefined in Android Browser\nIn Android browser I use `$location.path('/login');` to route. Example:\r\n\r\n\tMainMenuCtrl.$inject = ['$scope', '$location'];\r\n\tfunction MainMenuCtrl($scope, $location) {\r\n\t\t$scope.doFileWeeklyClaim = function() {\r\n\t\t\t$location.path('/login');\r\n\t\t};\r\n\t};\r\n\r\nWhen I navigate away to say google.com and press back when clicking on a link the routing becomes unavailable and I get this error from line 3268 from angular.js version 1.0.8:\r\nundefined TypeError: Cannot call method 'replace' of undefined\r\nEverything stops working at that point. "
4042,'btford','fix($compile): ng-attr to support dash separated attribute names\nWhen compiling:\r\n```html\r\n<div ng-attr-data-src="value"></div>\r\n``` \r\nCurrently Angular will output:\r\n```html\r\n<div datasrc="value"></div>\r\n``` \r\nThis pull request and tests propose that Angular should output:\r\n```html\r\n<div data-src="value"></div>\r\n``` \r\nPlease note that ahead of making my amends, there were 3 failing tests elsewhere in master, as per my comment on the mailing list at https://groups.google.com/d/msg/angular/54olurwDWJw/_b-6_G-hl74J.\r\n\r\nThank you.\r\n\r\nNote: this is a new submission of #3798, fao: @petebacondarwin'
4032,'jankuca','fix(test): fixed toThrow usage\n'
4028,'matsko',"ngAnimate - Incorrect detection of transition end (too early / never)\nSee example: http://plnkr.co/edit/jYpCeL?p=preview\r\n\r\nThe div should have 1s transition on `width` and then 1s transition on `background`. In the example, only the first transition works. Perhaps Angular reacts to the `transitionend` event too quickly?\r\n\r\nI'm using version `v1.2.0-4aa9d2a` (the latest `master`). Tested on Chrome 31 and Firefox 23 on Linux."
4026,'IgorMinar','memory-leak in ng-repeat\nHi,\r\n\r\nI have found memory leak when using ng-view with ng-repeat in it. I believe it is a bug in angular 1.0.8 and 1.2.0.rc2. Here is a sample code http://plnkr.co/5adwl9kwCyxT5urU9D5x\r\n\r\nand without directive http://plnkr.co/edit/eRuNqTaKILjIsTkWUwIn\r\n\r\nBug occures when switching between views:\r\nview1 - view with directive nievents (ng-repeat inside it)\r\nview2 - empty view\r\n\r\nAfter switching between views several times, i can see Detached DOM tree (with 7529 entries) with elements from view1, although i am switched to view2. When you keep switching again and again, copies of Detached DOM trees are created and cause memory leak.\r\n\r\nI am not able to determine what causes a memory leak, but I can see ng-repeat scopes are not destroyed (parent scopes from controller are destroyed).\r\n\r\nTested on Chrome 29.0.1547.66 m but FF is also leaking.\r\n\r\nI attached screenshot of heap snapshot https://groups.google.com/forum/#!topic/angular/SZzrF1uR4OE'
4023,'matsko','ngAnimate interferes with unit tests concerning ngClass in v1.2.0-rc.2 and an aside...\nI have some unit tests for a directive that worked fine until I migrated to the latest release candidate.  The tests pass without incident even under the RC, but fail if the main module includes \'ngAnimate\', even where, as here, the application has no animations defined or used.  Somehow a routine synchronous test goes funky.\r\n\r\nThe application works fine when run in production.\r\n\r\nThe following plnkr illustrates the problem:\r\n\r\n  http://plnkr.co/edit/ZpdjrlZMADdeGxKYpR9Z?p=preview\r\n\r\n\r\nThe directive\r\n\r\n```javascript\r\napp.directive(\'directive\', function(){\r\n  return {\r\n    template: \'<dir ng-class="blues()">\'+\r\n                \'This text is {{blues()}}, but the test failed.\'+\r\n               \'</dir>\',\r\n    restrict: \'E\',\r\n    replace: true,\r\n    link: function(scope, element, attrs){\r\n      scope.blues = function(){return \'blue\';};\r\n    }\r\n  };\r\n});\r\n```\r\n\r\nThe test\r\n\r\n```javascript\r\n  ...\r\n  beforeEach(inject(function($rootScope, $compile) {\r\n    scope = $rootScope.$new();\r\n    element = $compile(\'<directive></directive>\')(scope);\r\n    $rootScope.$digest();\r\n  }));\r\n  ...\r\n  it(\'should have the text be blue\', function() {\r\n    expect(element.hasClass(\'blue\')).toBeTruthy();\r\n  });\r\n  ...\r\n```\r\n\r\n(just remove ngAnimate in the app.js definition of the main module to see tests pass).\r\n\r\nThe problem seems to have something to do with the recent changes to ng-class and animation.  No amount of research seems to work.  What\'s going on?\r\n\r\nPure aside:  I note that the angular.mock.animate decorator doesn\'t seem to get installed merely by adding angular-mock.js to my build in ordinary course.  ($animate does not have flushNext coded.)  Do I need to do anything special, or load in any particular order to make the config work right?\r\n'
4021,'btford',"Don't send empty String in place of no body\nXMLHttpRequest.send spec defines different semantics for an empty string as compared to null, any string, whether empty or not, should be sent with a Content-Type of text/plain, whereas null should have no Content-Type header set.  Since the user hasn't passed in content to send, the latter should be used.\r\n\r\nSee http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\r\n\r\nCombined with this bug in WebKit based browsers:\r\n\r\nhttps://code.google.com/p/chromium/issues/detail?id=172802\r\n\r\nThis means when no body is supplied, the `Content-Type` ends up being application/xml, which for an empty String, means the body is invalid according to the content type.  This causes issues for web servers that automatically parse the body according to the declared content type, such as this issue in Play framework:\r\n\r\nhttps://github.com/playframework/playframework/issues/1676"
4017,'pkozlowski-opensource','Directives in the tutorial\nThe tutorial - very helpful - lacks completely of one of the most important parts of Angular: the directives. \r\n\r\nPlease add a directives chapter to the tutorial.'
4011,'matsko','ngAnimate 1.2.0-rc2 has performance impact\nJust by including the `ngAnimate` module in my project (using latest code on master), I am seeing noticeable performance degradation that is especially visible on devices with slower processors like the iPod Touch 4g.\r\n\r\nIn my case an `ngRepeat` with around 50-100 items and no CSS transitions / animations takes what could be 2-3x longer to render on a mobile device with `ngAnimate`. I noticed that the `performAnimation` function is being called 50-100 times **per digest** (the number goes up or down depending on the number of items in the `ngRepeat`).\r\n\r\nThe animation code is being executed on all elements of directives that support animation **whether or not there are actually CSS transitions / animations that apply to those elements**, and it has a performance impact. For most animation-enabled directives it might not be a big deal but it is especially noticeable during the rendering and re-rending of items in an `ngRepeat`.'
4006,'chirayuk','$sceDelegateProvider.resourceUrlWhitelist() regex security risks\nI don\'t know how deeply this has been discussed but I think requiring regexs rather than a list of hosts/paths opens up risks.\r\n\r\nIf someone puts \'https://cdnhost-name12345.cdn.com.*\' they risk attack from anyone having a domain and creating a file at \'https://cdnhost-name12345.cdn.com.example.com".  Now obviously the user should have entered: \'https://cdnhost-name12345\\\\.cdn\\\\.com/.*\' but the documentation doesn\'t seem to give examples. [Edited as \\\\\'s weren\'t showing.]\r\n\r\nI know that there are many valid uses for regexs where a number of servers or paths may be being used but that should be the advance option rather than the default and I would like it if there was stronger documentation and examples about how to (and how not to) use the regexs.\r\n\r\nThis is what my whitelist item in Rails looks like in the end and it would be all too easy to forget the escaping of the \'.\'s or the \'/\' before the \'.*\'. \r\n\'<%= ActionController::Base.asset_host.gsub(/\\\\./, \'.\') %>/.*\' [Edited as \\\\\'s weren\'t showing.]\r\n\r\nPlease consider a safe easy option.'
4005,'mzgol','fix(ng-if): make ng-if evaluate things using javascript logic\nMake ng-if evaluate things using javascript logic\r\nDo not reevaluate everything contained within an ng-if when there\r\nis a change of the value of the ng-if, but the truthy of falsy value\r\ndoes not change\r\n\r\nFixes #3969\r\n\r\nBREAKING CHANGE: The expressions\r\n* `<div ng-if="[]">X</div>`\r\n* `<div ng-if="\'f\'">X</div>`\r\n* `<div ng-if="\'[]\'">X</div>`\r\n\r\nused to be evaluated to `false`'
4002,'jeffbcross','Ng-repeat-start with Ng-repeat causes ng-class, etc to not work\nWhen an ng-repeat-start/end block is used with another ng-repeat then ng-class, ng-hide etc do not work on the ng-repeat-start block.\r\n\r\nPlunkr is here : http://plnkr.co/edit/Hjqpqbuy0nhrTOmCjk36?p=preview\r\n\r\n* ng-repeat-start (team level in the example)\r\n  * Without ng-repeat: ng-class and ng-hide **works**\r\n  * With ng-repeat: ng-class and ng-hide **does not work**\r\n* ng-repeat (member level in the example) \r\n  * Without ng-repeat-start: ng-class and ng-hide **works**\r\n  * With ng-repeat-start: ng-class and ng-hide **works**\r\n\r\nThe workaround is using two ng-repeats, one on tbody to loop through the teams, then create the team row, then loop through the members to create the members rows. '
3991,'matsko','ng-class doesn\'t work if you have ng-include element in the same tag\nng-class doesn\'t work if you have ng-include element in the same tag\r\n\r\nExample\r\nWORK\r\n```\r\n<header class="myClass" ng-class="myDinamicClass"></header>\r\n```\r\n\r\n\r\nNO WORK\r\n```\r\n<header class="myClass" ng-class="myDinamicClass" ng-include="\'/myHtml.html\'"></header>\r\n```'
3981,'matsko','ng-show doesn\'t work with ng-include in Angular 1.2.0rc2\nSame Plunker, 2 versions of Angular:\r\n1.0.8: http://plnkr.co/edit/ltFPxRdZqJb32JOKiF5P?p=preview\r\n1.2.0rc2: http://plnkr.co/edit/o9HNd4qzE1v8IGbFVKJu?p=preview\r\n\r\nIn 1.0.8, `ng-show` adds `style="display: none"` to the item it is hiding. In 1.2.0rc2, it seems as tho it normally adds `.ng-hide` and that has a `display: none` assigned to that class (CSS added via JS).\r\n\r\nIt seems that in this specific case (as in my Plunker), it doesn\'t do that, and both `ng-include`s are always shown.\r\n\r\nAs an aside to why I would want this to work: I have a multipart form, so I need the entire form in the DOM for validation and stuff, so that\'s why I\'m using `ng-include` with `ng-show` instead of an `ng-include` with a variable `src`. (It\'s a big form and some parts are common to other forms, hence breaking it up into separate templates.) '
3980,'chirayuk',"Infinite $digest Loop when using $sce with filter\nThis example http://jsfiddle.net/FmeP9/ produce Error: [$rootScope:infdig] using this code:\r\n```\r\nfilter('markdown', function ($sce) {\r\n    var converter = new Showdown.converter();\r\n    return function (value) {\r\n\t\tvar html = converter.makeHtml(value || '');\r\n        return $sce.trustAsHtml(html);\r\n    };\r\n});\r\n```\r\nIt is working but i think perfomnce will go down if those error shows up."
3979,'caitp','jsonp httpBackend callback fix if no data sent from the server throws an error ie9 failed\nadded a default for data passed to the callback if the call of httpBackend is of type jsonp and there is null or undefined or empty string from the server to set the data to empty array - [], to avoid an error being thrown inside angular js - fixed broken test'
3971,'IgorMinar',"1.2.0-rc.2 IE8 TypeError: Object doesn't support this property or methodundefined\nHello,\r\n\r\nError appears in IE8 when using ```$http``` with [1.2.0-rc.2/angular.min.js](http://code.angularjs.org/1.2.0-rc.2/angular.min.js)\r\n\r\n```\r\nTypeError: Object doesn't support this property or methodundefined\r\n```\r\n\r\nVersion [1.2.0rc1/angular.min.js](http://code.angularjs.org/1.2.0rc1/angular.min.js) works fine.\r\n\r\n**Update**\r\nI uploaded code similar to my production:\r\n* [1.2.0rc1](http://privatebay.ru/angular/issue-3971/1.2.0rc1.html)  - works in IE8\r\n* [1.2.0-rc.2](http://privatebay.ru/angular/issue-3971/1.2.0-rc.2.html) - doesn't work in IE8\r\n\r\nI also use ```angular-route.js```, unfortunately EI8's console doesn't help to catch the error. \r\n"
3970,'btford',"1.2rc1&2's animate implementation causes a crash in PhoneGap/Cordova on iOS\nI can't provide a fiddle since it's an application, but will gladly share example source with whoever pics up the ticket. Using ngAnimate in a Cordova app triggered a crash in iOS. It would appear not related to CSS/GPU memory, as plain position and opacity changes would also crash. Removing the related CSS from my project fixed things, but broke the animation. Reverting to 1.1.5 and all is well. \r\n\r\nSorry for the obscure ticket, I'll provide any info I can, including the project files to whoever picks it up. I'm not really sure how to investigate further. "
3969,'mzgol','ngIf and ngShow mistreats "[]" (empty array)\nIf ngIf/ngShow if given an argument of a string of 2 characters: "[" and "]" it is treated as if it would be [] - empty array, which is neither true nor false.\r\n\r\nHere\'s a test (utilizing ngIf only)\r\nhttp://jsfiddle.net/VeJfM/1/'
3964,'jankuca','Directive scope "sticking" within ngRepeat (1.2.0+)\nDirectives inside an ngRepeat fail to update properly when the data model being repeated changes.   See here: http://plnkr.co/s87euU5fMWeGtdtv41Qo.    Does not happen in <= 1.1.5 '
3959,'matsko',"1.2.0rc1/rc2: Animation occasionally flickers back to start position\nI'm using ng-class to trigger a CSS keyframe animation in Angular 1.2-rc.2. Sometimes, the animation will run smoothly to completion, and then, for a tiny fraction of a second, will jump back to its start position, then jump right back to the end. So instead of animating smoothly from 0 to 100 and then stopping, it sometimes animates smoothly from 0 to 100, jumps back to 0 for a few milliseconds, then jumps back to 100.\r\n\r\nHere's a sample, with the animation repeating over and over to make it easy to see the glitch: http://plnkr.co/edit/hI9GXkXhIjqKAsmauCSK?p=preview\r\n\r\nThe plunkr uses Angular 1.2rc2. I see the same glitch if I use rc1.\r\n\r\nIn Firefox 23 on Windows, I see the glitch happen more than half the time. In Chrome 29, the glitch is much rarer, happening on average maybe one time out of every 50. I haven't observed the glitch yet in IE10, though it could just be rare like it is in Chrome."
3953,'matsko','fix(ngdoc): add default values to ngdoc template\nngDoc did not add default value to template, even though it was present\r\nin the documentation. This change adds the default value to the\r\ndescription column in the parameters table.\r\n\r\nCloses #3950'
3952,'petebacondarwin','revert(validate-commit-msg): fix incorrect comment\n`../../` is needed for the symlink to work'
3947,'btford','feat($compile): support tel: links\nAllow tel: links so that click-to-call works in mobile browsers'
3940,'matsko',"ngAnimate not preserving classes in nested directives with 'replace' set to true\nDecided to try updating to Angular 1.2rc2 so that I could try out the new ngAnimate. However, just including the module in my app broke a bunch of my styling.\r\n\r\nTurns out that some of my elements were now missing their classes. These were all transcluded elements with directives with 'replace' set to true. Normally, those classes are preserved and copied onto the new element. With ngAnimate included, they go missing.\r\n\r\nHere's a reduction of the problem: http://plnkr.co/edit/H2vUyI?p=preview\r\n\r\nI've tracked down the problem to the following lines in animate.js:\r\n```\r\n        if ((parent.inheritedData(NG_ANIMATE_STATE) || disabledAnimation).running) {\r\n          //avoid calling done() since there is no need to remove any\r\n          //data or className values since this happens earlier than that\r\n          //and also use a timeout so that it won't be asynchronous\r\n          $timeout(onComplete || noop, 0, false);\r\n          return;\r\n        }\r\n```\r\n\r\nSeems like this was changed from a synchronous call to using $timeout as part of this changeset:\r\nhttps://github.com/angular/angular.js/commit/e31104fa6c9e5efd93ac69cd70c70cffaf200843\r\n\r\nChanging it back solves my problem, but as I'm unsure why the change was made in the first place, I could be missing something."
3933,'btford',"1.2.0-rc2: ngShow translateX animation\nHaving some issues with ngShow animations in 1.2rc2 when using a translateX() animation moving an element from off to on the screen, where the animation is not being run at all, instead the element is just shown straight away.\r\n\r\nPlunkr: http://plnkr.co/edit/b86o7WSU8w3sBnXebQQi?p=preview\r\n\r\nIssue only appears to happen using Chrome stable 29.0.1547.66 m, have tested Firefox and IE and seem ok.\r\n\r\nI think it might be the [following lines in `ngAnimate/animate`](https://github.com/angular/angular.js/blob/master/src/ngAnimate/animate.js#L620) that are causing the issue:\r\n\r\n```\r\n//temporarily disable the transition so that the enter styles\r\n//don't animate twice (this is here to avoid a bug in Chrome/FF).\r\nnode.style[w3cTransitionProp + propertyKey] = 'none';\r\nnode.style[vendorTransitionProp + propertyKey] = 'none';\r\n```\r\n\r\nalthough not sure if it's something I've done wrong. If I comment these lines out the animation runs.\r\n\r\nWas working in rc1 ok.\r\n\r\nThanks :)"
3932,'chirayuk','10 $digest() iterations reached using $sce inside isolate scope directive 1.2.0-rc.2\nThe following code works in 1.2.0-rc1, but is now broken in 1.2.0-rc.2 with the following error\r\n\r\n```javascript\r\n[$rootScope:infdig] 10 $digest() iterations reached. Aborting!\r\nWatchers fired in the last 5 iterations: [["getSafeHtml(e); newVal: {}; oldVal: {}"],["getSafeHtml(e); newVal: {}; oldVal: {}"],["getSafeHtml(e); newVal: {}; oldVal: {}"],["getSafeHtml(e); newVal: {}; oldVal: {}"],["getSafeHtml(e); newVal: {}; oldVal: {}"]]\r\n```\r\n\r\nCode snippet\r\n\r\n```javascript\r\nangular.module(\'app\', [])\r\n.directive(\'myError\', [\'$sce\', function ($sce) {\r\n\r\n    return {\r\n        restrict: \'E\',\r\n        replace: true,\r\n        template:\r\n                \'<ul ng-if="errors.length > 0">\' +\r\n                   \'<li ng-repeat="e in errors" ng-bind-html="getSafeHtml(e)"></li>\' +\r\n                \'</ul>\',\r\n        scope: {\r\n            errors: \'=\'\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            scope.getSafeHtml = function (html) {\r\n                return $sce.trustAsHtml(html);\r\n            };\r\n        }\r\n    };\r\n}])\r\n.controller(\'AppCtrl\', [function () {\r\n    this.someerrors = [\'<b>What</b> an error\'];\r\n}]);\r\n```\r\n\r\nHtml\r\n\r\n```html\r\n<div ng-controller="AppCtrl as ctrl" class="container">\r\n  <my-error errors="ctrl.someerrors"></my-error>\r\n</div>\r\n```'
3931,'petebacondarwin','ngsanitize problems with doctype\nFixes #902.\r\n\r\nngSanitize removes the doctype element.'
3927,'IgorMinar','Fix $compile (remove templateUrl directive splitting)\nHow did compiling a templateUrl (async) directive with `replace:true` work before this commit?\r\n\r\n1. apply all directives with higher priority than the templateUrl directive\r\n2. partially apply the templateUrl directive (create `beforeTemplateNodeLinkFn`)\r\n3. fetch the template\r\n4. apply second part of the templateUrl directive on the fetched template\r\n(`afterTemplateNodeLinkFn`)\r\n\r\nThat is, the templateUrl directive is basically split into two parts (two `nodeLinkFn` functions),\r\nwhich has to be both applied.\r\n\r\nNormally we compose linking functions (`nodeLinkFn`) using continuation - calling the linking\r\nfunction of a parent element, passing the linking function of the child elements as an argument. The\r\nparent linking function then does:\r\n\r\n1. execute its pre-link functions\r\n2. call the child elements linking function (traverse)\r\n3. execute its post-link functions\r\n\r\nNow, we have two linking functions for the same DOM element level (because the templateUrl directive\r\nhas been split).\r\n\r\nThere has been multiple issues because of the order of these two linking functions (creating\r\ncontroller before setting up scope locals, running linking functions before instantiating\r\ncontroller, etc.). It is easy to fix one use case, but it breaks some other use case. It is hard to\r\ndecide what is the "correct" order of these two linking functions as they are essentially on the\r\nsame level.\r\n\r\nRunning them side-by-side screws up pre/post linking functions for the high priority directives\r\n(those executed before the templateUrl directive). It runs post-linking functions before traversing:\r\n```js\r\nbeforeTemplateNodeLinkFn(null); // do not travers\r\nafterTemplateNodeLinkFn(afterTemplateChildLinkFn);\r\n```\r\n\r\nComposing them (in any order) screws up the order of post-linking functions. We could fix this by\r\nhaving post-linking functions to execute in reverse order (from the lowest priority to the highest)\r\nwhich might actually make a sense.\r\n\r\n**My solution is to remove this splitting.** This commit removes the `beforeTemplateNodeLinkFn`. The\r\nfirst run (before we have the template) only schedules fetching the template. The rest (creating\r\nscope locals, instantiating a controller, linking functions, etc) is done when processing the\r\ndirective again (in the context of the already fetched template; this is the cloned\r\n`derivedSyncDirective`).\r\n\r\nWe still need to pass-through the linking functions of the higher priority directives (those\r\nexecuted before the templateUrl directive), that\'s why I added `preLinkFns` and `postLinkFns`\r\narguments to `applyDirectivesToNode`.\r\n\r\nThis also changes the "$compile transclude should make the result of a transclusion available to the\r\nparent directive in post- linking phase (templateUrl)" unit test. It was testing that a parent\r\ndirective can see the content of transclusion in its pre-link function. That is IMHO wrong (as the\r\n`ngTransclude` directive inserts the translusion in its linking function). This test was only passing because of\r\nc173ca412878d537b18df01f39e400ea48a4b398, which changed the behavior of the compiler to traverse\r\nbefore executing the parent linking function. That was wrong and also caused the #3792 issue, which\r\nthis change fixes.\r\n\r\nCloses #3792'
3916,'jeffbcross',"ngMock breaks Twitter Bootstrap\nI'm trying to test some directives based around bootstrap (2.3.2) and I noticed dropdowns weren't being opened correctly during a test. The particular test relies on being able to see if the dropdown has opened in certain situations (checking for `open` class).\r\n\r\nIt turns out that bootstrap registers a bunch of events on `document` when it loads. These are necessary for dropdowns (and other controls) to work. In `ngMock` is an `afterEach` block that clears out `jQuery.cache` as part of cleaning up after angular (ec1c5dfa). This is a little too ruthless and kills off the events that were originally registered in bootstrap.\r\n\r\nAs this happens in an `afterEach` it means the first test will work correctly, and all following will fail once the first cleanup occurs.\r\n\r\nI'm not sure if there's a better way to test things relying on things being registered in third party libraries, without worrying about the cleanup - but either way it should probably be consistent throughout every test.\r\n\r\nExample plunker: http://plnkr.co/edit/vAcjuu?p=preview"
3911,'btford','Update reloadOnSearch documentation for hash fragment changea\nreloadOnSearch also affects reloads due to $location.hash() changes'
3909,'jankuca','Dirty data on recursive ng-repeat with ng-include on 1.2 RC2\nI have a recursive ng-repeat that works on 1.1.5 and no more works in 1.2RC2.\r\n\r\nBasically when I changed <code>$scope.menu</code>, the menu show the old and new data.\r\n\r\nLive example demonstrating the problem:\r\nhttp://jsfiddle.net/cc8zJ/1/\r\n\r\nGives to consider this an issue? \r\nI appreciate any suggestion'
3908,'matsko','refactor($animate): use single variables for handling transition/animati...\n...on events & properties\r\n\r\nTo avoid code duplication, use single variables for keeping properties/events\r\nnames to use. Also, fix some errors that have happened after the rewrite from moment ago.'
3903,'petebacondarwin','refactor(select): options regexp simplification\n\\w matches [a-zA-Z0-9_] and \\d matches [0-9], using both in a character set is\r\nsimply redundant.'
3898,'petebacondarwin','docs($anchorScroll) change example controller name to ScrollCtrl and add...\n... styling\r\n\r\nChanged controller name in example html to ScrollCtrl to match name in example js.\r\n\r\nAdd styling to example html so scrollable area is not obtrusive to documentation page design.'
3896,'btford',"docs(docs.js): change deps array join to fix jsfiddle/plunkr examples\nChange return value of docsApp.serviceFactory.prepareDefaultAppModule to include empty array `[]` instead of array containing one empty string element `['']`, for situations when the deps array is empty.\r\n\r\nThis will benefit plunkr/jsfiddle examples which lack animation or other dependencies, such as [ngChecked](http://docs.angularjs.org/api/ng.directive:ngChecked).\r\n\r\nCurrent script.js sent to plunkr/jsfiddle when no deps exist: \r\n```javascript\r\nangular.module('App', ['']);\r\n```\r\n\r\nNew script.js sent to plunkr/jsfiddle when no deps exist:\r\n```javascript\r\nangular.module('App', []);\r\n```"
3895,'vojtajina','Remove timeout.flushNext()\n'
3893,'IgorMinar','Ng-include inside ng-switch duplicates\nWhen ng-include directive is placed inside ng-switch directive it is included each time ng-switch iteration. Reproduced in 1.2 rc1'
3892,'mhevery','fix($animate): ensure that animations are not disabled after $rootElement is animated\n'
3890,'petebacondarwin',"Example in live docs doesn't work due to typo, it's also ugly\nBasically, the html was pointing at the wrong controller, and the unstyled container for the scroll looked ugly because it was too tall.\r\n\r\nThis should fix that."
3879,'pkozlowski-opensource',"bootstrap html tooltip doesn't work with angularJS 1.2.0rc1\nCheck http://plnkr.co/edit/PXDGNB2LVs9G5S7CGuO2 \r\nIf you use angularJS 1.0.5 (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.5/angular.js), the html tooltip works "
3876,'petebacondarwin',"fix(directive/select/ngOptions): ignore properties which start with $ or $$ when iterating over an object for ng-options\nWhen using ```<select ng-options ...``` with an object, the directive renders properties of the object even if they begin with ```$``` or ```$$```. This means that when using ```$resource``` to ```query()``` a REST service for example, the directive renders the private ```$then``` and ```$resolved``` properties of the response object as ```<option>```s. The ```ng-repeat``` directive includes a check to make sure it doesn't render properties beginning with ```$``` or ```$$```, and this PR adds a similar check for ```ng-options```."
3870,'petebacondarwin','Deep Linking - Issue with <a> tag in index.html\n"#/" is missing in front of the links in index.html for http://docs.angularjs.org/cookbook/deeplinking:\r\n<code>\r\n[ <a href="welcome">Welcome</a> | <a href="settings">Settings</a> ]\r\n</code>\r\n\r\nSolution code:\r\nThe above line in index.html becomes:\r\n<code>\r\n[ <a href="#/welcome">Welcome</a> | <a href="#/settings">Settings</a> ]\r\n</code>'
3868,'IgorMinar','"Object #<Comment> has no method \'setAttribute\'" for interpolated attribute of transcluded directive\nWhen a directive is set to {transcluded:\'element\'} and it uses a interpolated attribute value, an exception is thrown with message: TypeError: Object #<Comment> has no method \'setAttribute\'.\r\n\r\nIt is tested against angular.min.js v1.2.0-rc1.\r\n\r\nHere is sample directive test page:\r\n```\r\n<!doctype html>\r\n<html ng-app="testApp">\r\n<head>\r\n<script type="text/javascript" src="http://code.angularjs.org/1.2.0rc1/angular.min.js"></script>\r\n<script language=\'javascript\'>\r\nangular.module(\'testApp\', [])\r\n  .directive(\'ngTest\', function(){\r\n    return {\r\n      transclude: \'element\',\r\n      scope: { ngTest:\'@\' }\r\n    }\r\n  });\r\n</script>\r\n</head>\r\n\r\n<body>\r\n  <div ng-test="test{{var}}"></div>\r\n</body>\r\n</html>\r\n```\r\n\r\nIs there something wrong? thanks'
3865,'IgorMinar','$watchCollection informs the old collection array values in the second argument of the listener. fixes #1751\n$watchCollection correctly informs the old collection values in the second argument of the listener (before it informed an array with the same values as the new collection)\r\n\r\nselect, input and nglist are affected by this change\r\n\r\nThere is a behaviour change in ngList, when you type "a , b" it automatically changes the value to "a, b" (this is reflected in inputSpec.js#989 change)\r\n'
3864,'jeffbcross','fix(ngTouch): ngClick does not pass touchend event when jQuery is loaded\nThe trigger handler event in jqLite takes an event object as a second\r\nparameter, but jQuery requires an array of parameters. This is causing\r\nthe touchend event to not come thtough in the click handler when jQuery\r\nis loaded.'
3862,'shepheb','fix(ngTouch): ngClick does not pass touchend event when jQuery is loaded\nThe trigger handler event in jqLite takes an event object as a second parameter, but jQuery requires an array of parameters.  This is causing the touchend event to not come thtough in the click handler when jQuery is loaded.'
3858,'btford',"ng-show stopped working for SVG elements in 1.2.0rc1\nIn Angular 1.1.5, you can hide SVG elements using ng-show. [Example](http://plnkr.co/edit/e5P5Em?p=preview):\r\n\r\n![115](https://f.cloud.github.com/assets/9802/1076578/eaf06c52-14e4-11e3-8217-77c3740ef482.png)\r\n\r\nIt doesn't work anymore in 1.2.0rc1. [Example](http://plnkr.co/edit/iYPuzJ?p=preview):\r\n\r\n![120](https://f.cloud.github.com/assets/9802/1076580/f5afb102-14e4-11e3-87ce-c5ba51c65aae.png)\r\n\r\nTested on Chrome 25.0.1364.172 Linux x86_64.\r\n"
3857,'btford','fix($httpBackend): set headers even if they have falsy values\nResolving the issue https://github.com/angular/angular.js/issues/2984'
3830,'matsko',"feat(ngAnimate): add between callbacks\nWe're currently working on the migration of AngularStrap/AngularUI-bootstrap to Bootstrap 3.0 + AngularJS 1.2.0.\r\n\r\nWe need theses callbacks to be able to properly handle element positioning (ie. tooltips, popovers) while still relying on the `$animate.enter`/`$animate.leave` syntax to leverage CSS animations.\r\n\r\nNot sure unit testing is required for such a basic patch, will gladly add them if you want.\r\n\r\ncc @matsko\r\n"
3824,'btford',"fix($compile): allow interpolations for non-event handlers attrs\nFix wrong behaviour that didn't allow 'data-on' and 'on' element attributes\r\nto be interpolated by $compile. The regex now accepts any string beginning\r\nwith 'on' and with at least one more English letter."
3823,'btford','fix($resource): pass interceptor-transformed value to both success callbacks and promises\nAddresses #3817\r\n\r\nhttp://jsfiddle.net/SH26x/1/'
3812,'IgorMinar','$anchorScrollProvider.disableAutoScrolling() is not working when using $routeProvider\nWhen auto scrolling is disabled and hash is changed, the page still get scrolled to the hash element.'
3811,'petebacondarwin','Tweaking anchorScrollSpec.js\n'
3806,'jeffbcross','angular-1.2.0 + ng-grid-2.0.7 bug on enableColumnReordering\nI cannot drag and drop columns to reorder when enableColumnReordering = true, but it works when I use angular-1.1.5~'
3803,'vojtajina','perf(ngBindHtml): watch the original value and sanitize later\n'
3798,'petebacondarwin','fix($compile): ng-attr to support dash separated attribute names\nWhen compiling:\r\n```html\r\n<div ng-attr-data-src="value"></div>\r\n``` \r\nCurrently Angular will output:\r\n```html\r\n<div datasrc="value"></div>\r\n``` \r\nThis pull request and tests propose that Angular should output:\r\n```html\r\n<div data-src="value"></div>\r\n``` \r\nPlease note that ahead of making my amends, there were 3 failing tests elsewhere in master, as per my comment on the mailing list at https://groups.google.com/d/msg/angular/54olurwDWJw/_b-6_G-hl74J.\r\n\r\nThank you.\r\n'
3793,'btford','Regression from 1.2.0rc1: ng-include \'bugs\' href/ng-href in an anchor element\nWhen I put a `ng-include` directive directly inside an `a` element, I get the following error in the console:\r\n`TypeError: Object #<Comment> has no method \'setAttribute\'`\r\n\r\nFor example:\r\n```\r\n      <a ng-href="#/{{href}}" ng-include="\'link.html\'"></a>\r\n      <a href="#/{{href}}" ng-include="\'link.html\'"></a>\r\n```\r\n\r\nIn the first case the element is not displayed as a link (as href is not set).\r\n\r\nSee Plunker http://plnkr.co/edit/LWa2asKqAxUYBtZL23YE?p=preview\r\n\r\nAt first I thought I was dealing with ng-include issues #3584 or #3573 . However, after testing this issue does not appear in 1.2.0rc1 and previous releases.\r\n'
3792,'vojtajina','Directive, replace, external template, ng-Switch controller\nHi,\r\n\r\nI noticed some strange behavior when creating a directive with `replace: true`, an external template (e.g. `templateUrl: \'...\'`) and `ng-switch`. An error is thrown:\r\n\r\n"Controller \'ngSwitch\', required by directive \'ngSwitchDefault\', can\'t be found!"\r\n\r\nI\'ve put a small [plunker][1] together to illustrate the error. Setting the replace option to false or using an inline template makes the error disappear, so I assume this is a bug?\r\n\r\n[1]: http://plnkr.co/edit/sUr913ANZ8Ccq018Z77B?p=preview'
3784,'matsko','1.2.0rc1 - Animation system does not work when you have both ngHide and ngClass\nWith the new animation system, if you have ngHide and ngClass on the same element, animations stop working (it might happen with other combinations too).  Look at this plunker:\r\n\r\nhttp://plnkr.co/edit/bzaQJVUvlx4BhFaAN88j?p=preview\r\n\r\nThis is a plunker from the yearofmoo article on the animation system in 1.2.0.  All I did was add a ngClass directive on this and the animations no longer play.  This is happening in 1.2.0rc1 and I also tested it against the code the include the patch for this issue : https://github.com/angular/angular.js/issues/3587 : and both of them show the issue.  If you remove the ngClass directive on the element, the animation works fine.'
3776,'tbosch','fix(form): do not prevent submit when action attribute equals to an empty string\nCloses #3370'
3761,'vojtajina','Removed duplicated `require` section in directives guide\n'
3757,'caitp','IE Document Mode: IE9 Standards Mode - Input Validation Not Working\nIn IE 10, when you are in document mode IE9 Standards Mode the input validation does not seem to be working correctly.\r\n\r\nDemo on the following page demonstrates issue:\r\nhttp://docs.angularjs.org/api/ng.directive:input.number\r\n\r\nType in letters and it still says it is valid.'
3756,'btford','1.2.0rc1 regression: script tags not loaded via ngInclude\nIf one loads jQuery before Angular, loading and execution of script tags in the html fragments with ngInclude works under 1.0.* (just tested 1.0.7 here with jq 1.10.2). This is broken in 1.2.0rc1'
3749,'btford','Fixes controller name bug when using $routeProvider\nThe controller name was previously not declared as a string and users have reported a "[controller] is not defined from [moduleName]" error. This corrects the documentation into a working example.'
3748,'tbosch',"angular-sanitize.js remove internal links\nI've written an wiki application that is showing the converted markdown as html in a **div** element that is using the **ng-bind-html** directive. \r\n\r\nI have in my html some internal links in this format\r\n\r\n    <a href='/page1.md'>Page1</a>\r\n\r\nMy html will be processed by the **angular-sanitize.js**. And here is my problem, the final html doesn't contains my link. I see only the text **Page1**.\r\n\r\nI've looked into the code of the **angular-sanitize.js** file and I've found the regex that is responsible to detect any links:\r\n\r\n    URI_REGEXP = /^((ftp|https?):\\/\\/|mailto:|tel:|#)/i,\r\n\r\nAfter I've changed the regex to this, the link wasn't removed.\r\n\r\n    URI_REGEXP = /^((ftp|https?):\\/\\/|mailto:|tel:|#|\\/)/i,\r\n\r\nCould you fix this please in the original version of the **angular-sanitize.js**? Thanks!\r\n"
3746,'vojtajina','chore(tools): Point to the NPM version of grunt-parallel && feature(ngMock) Allow for passing an object literal as shorthand to module \nThis commit allows shorthand for mocking services...\r\n\r\n```javascript\r\nmodule({\r\n  service: mock\r\n});\r\n\r\ninject(function(service) {\r\n  // Receives mock\r\n});\r\n```'
3738,'vojtajina','chore(readme): add Travis build status\n![screen shot 2013-08-24 at 9 51 22 am](https://f.cloud.github.com/assets/1016365/1021065/6afffd28-0cdd-11e3-92ea-f72970c93324.png)\r\n'
3736,'btford','chore: remove firefox CORS workaround\nremove workaround when third-party issue resolved'
3721,'chirayuk','ng-src doesn\'t work in Chrome app, even with ng-csp\nAs the description says.\r\n\r\nI\'m writing Chrome app, and `<img ng-src="img/photo{{id}}.jpg">` fails on Chrome\'s CSP, even when I use `ng-csp`.\r\n\r\n`ng-include` with `ng-csp` works, but not without. Which is incosistent with [Chrome doc](http://developer.chrome.com/apps/angular_framework.html#csp), which says that I shouldn\'t need to use `ng-csp` since Angular 1.1.x. But I gues it\'s just mistake in Chrome doc.'
3720,'btford','Fix for date filter. Allow for negative millisecond values when passed as string.\nThe regular expression for checking millisecond string values only accepts positive numbers.'
3717,'mhevery','ngAnimate ngClass digest fixes\n'
3714,'btford',"fix(isArrayLike): correctly handle string primitives\nFix for #3713:\r\n\r\n> The `isArrayLike` test in 1.0 worked properly with any string values, returning `true` (since they can be indexed just like `String` objects and work with functions like `Array.prototype.forEach`). The new test in 1.2 (introduced by #3356) raises a `TypeError`, because the `in` operator cannot be used on a non-object.\r\n\r\nSince there are no tests for the private `isArrayLike`, I'm including a test for `angular.forEach`, its main caller."
3710,'vojtajina',"fix: sanitizer should not accept <!--> as a valid comment\nAccording to http://validator.w3.org/ , <!--> is not a valid comment\r\nand neither is any comment containing the -- substring.\r\n\r\nI came across this possible issue while browsing the code for something unrelated. This makes the parser stricter, but I'm not sure that that's really desired. At any rate, I also added a unit test for comment parsing, as that was missing.\r\n\r\n"
3706,'btford','feat(docs/error): make links in error messages work\n'
3699,'btford','Promises A+ Compliance\n'
3693,'IgorMinar','fix(build): Add Promises/A+ Test Suite to the build\n'
3687,'jeffbcross','fix($sniffer): history problems on Boxee box\nsimilar to the one on Android with history.pushState\r\nhttps://github.com/angular/angular.js/pull/956\r\nsame behavior experienced with Boxee box browser'
3686,'jeffbcross','fix(package.json): use full version numbers when interpolating\nWhen using less than 3 numbers in npm package version together with\r\ntilde interpolation, it lets major version upgrades, e.g. "~0.10" means\r\nat least 0.10 and less than 1.0; this pattern would match e.g. 0.11, 0.12 etc.\r\nBesides, some package.json dependencies were upgraded.'
3682,'chirayuk','Blocked loading resource from url not allowed. IE11\nHi Guys,\r\n\r\nI recently switched my project to use Angular 1.2rc1.\r\n\r\nI have several directives that load templates using templateUrl. The directives work fine in Angular 1.15 in both Chrome and IE. \r\n\r\nThe directives also seem to work in Chrome using 1.2rc1. However, I get the following error when using IE11.\r\n\r\nBlocked loading resource from url not allowed by $sceDelegate policy.  URL: wizard/views/events.html\r\n\r\nApp Folder Structure\r\n\r\n/index.html (page the has ng-app)\r\n/wizard/wizardApp.js (Angular Module)\r\n/wizard/views (Angular partials and templates\r\n/wizard/directives (Angular directives)\r\n\r\nRegards,\r\nTarek\r\n'
3681,'IgorMinar','chore($parse): convert parser() and lex() to prototype-based code\nI refactored most of the `$parse` code into prototypes for performance. The improvement is in extracting all the helper functions from `parser()` and `lex()` so that only one set of these is in use rather than a new one being created on each run. State is now shared via `this`.\r\n\r\nThis JSPerf case demonstrates the performance boost: http://jsperf.com/closure-vs-prototype-ngparser\r\n\r\n- Chrome: 1.5–2x boost\r\n- FF: slightly slower (I would love to know why)\r\n- IE: 4x boost\r\n'
3665,'mhevery','fix($sniffer): ensure older versions of webkit work for animations\n'
3662,'jeffbcross','Fixing $resource call in docs.\n'
3658,'vojtajina','fix(required): `false` is a valid model value for required <select>\nMake the `required` directive accept the model value `false` when it is not an <input> element. \r\n\r\nCloses #3490'
3656,'IgorMinar','Order of directives link function reversed in 1.2.rc1\nHello,\r\n\r\ni\'ve been porting my application to 1.2.rc1 and I\'ve noticed that the behavior of the link function on directives using ng-transclude has changed, and it is now reversed (parent are linked before children). The real problem, however, is that the DOM element received in parent link function is empty, which makes any DOM manipulation useless (like applying a jQuery plugin). \r\n\r\nI\'ve created two fiddles: the first uses 1.1.5 (http://jsfiddle.net/NXwu5/), and in the console you can see that the child link function is called first and the parent second, and in both cases the element received is complete (its children property is non empty); the second uses 1.2.rc1 (http://jsfiddle.net/PkTLj/1/), and in this case the parent link function is called before the child and, more importantly, the element received is empty.\r\n\r\nI\'ve looked at the changelog and to previous bug reports, and if fact one of the changes seems to be related to this problem ("always instantiate controllers in parent->child order (45f9f623, #2738)"). Moreover, an older bug seems also to be related (Issue #1567), although changing the replace attribute does not seems to fix the issue.\r\n\r\nSo far I\'ve been able to solve the problem by manually transcluding (http://jsfiddle.net/PkTLj/4/ ): the order of invocation is still reversed but, as i\'m transcluding myself, I\'m able to activate my jQuery plugin when the element children have been added. Notice, however, that the element is still incomplete: as the order of the link functions is still reverted, I get access only to the parent children, not to the grandchildren (which, my plugin fortunately does not need). \r\n\r\nI don\'t know if this was intended, or if I\'m not understanding correctly the transclusion thing, but I believe the new behavior breaks the promise that the link function is fine for DOM manipulation (i\'ve tried using pre- and post- linking functions with the same result).\r\n\r\nAny idea on what I might be doing wrong?\r\n\r\nThanks,\r\nR.'
3649,'mhevery','Fix ngClass animation bugs with enter, move and leave\n'
3647,'btford','fix($compile): properly handle directive replace for table elements\nTo work around limitations in jqLite, the template snippet is wrapped in\r\na <div> element. This does not work for table elements, since they\r\ncannot be constructed inside a div. This patch takes special to properly\r\nwrap caption, thead, tbody, tfoot, tr, th and td in tags that allow them\r\nto be created.\r\n\r\nCloses #1459'
3646,'IgorMinar','fix(sce) IE 7 standards mode not supported\nChanged documentMode test from 8 to 7 to support IE 8 in IE 7 standards mode while still protecting against quirks mode. documentMode returns the following values: 5 - quirks mode, 7 - IE 7 standards mode, 8 - IE 8 standards mode.  Closes #3633. '
3640,'mhevery','Revert transclusion commits\nReverted ngView commit: 87405e25ae935eefd673e70ffd6144a5f455b662\r\nReverted ngInclude commit: 1b5bee4fa12b1f14e117f7ca222c2e2b64cc8558'
3639,'btford',"Fix for event.stopPropagation() and $emit method\nThis fix addresses an issue where event.stopPropagation() prematurely ends execution of event listeners assigned to the same scope from which they are $emit-ted.\r\n\r\nFor example you assign 2 listeners to the same scope:\r\na)\r\n```javascript\r\nscope.on('myEvent', function(evt) {\r\n  evt.stopPropagation();\r\n  //Do something\r\n});\r\n```\r\nb) Somewhere else on the same scope, perhaps inside other directive or controller\r\n```javascript\r\nscope.on('myEvent', function(evt) {\r\n  //Do something else\r\n});\r\n```\r\n\r\nCurrently handler in 'a' will prevent handler 'b' from executing even though they are on the same exact scope, but this is not the intention of the stopPropagation() function. Intention is to prevent 'myEvent' from bubbling into $parent scope.\r\n\r\nIf we take jQuery or just plain DOM eventing model, we'll see that stopPropagation does NOT prevent multiple handlers that are attached to the same node from firing."
3638,'matsko',"ngAnimate doesn't work in Safari 5.1 on Snow Leopard\nNone of the Angular ng-animate stuff works in Safari 5.1 on Snow Leopard - is this a known issue?\r\n\r\nper G+ user Rob MacDonald: https://plus.google.com/111286038866446717771/posts/GBSWrxtKzhD"
3628,'IgorMinar','fix(ngMock): make $timeout.flushNext not require an expectedDelay as per documentation.\n'
3612,'vojtajina',"1.2.0rc1 angular.mock.$LogProvider debugEnabled isDefined error\nThe angular-mocks.js is missing the namespace **angular** for angular.mock.$LogProvider debugEnabled isDefined check.\r\n\r\nThis causes exceptions in jasmine/karma unit tests when you have the following in your main app.js\r\n\r\n```javascript\r\n    app.config([\r\n        '$logProvider',\r\n        function ($logProvider) {\r\n            $logProvider.debugEnabled(true);\r\n        }\r\n    ]);\r\n```\r\n\r\nangular-mocks.js 1.2.0rs1 has:\r\n\r\n```javascript\r\n  this.debugEnabled = function(flag) {\r\n\t  if (isDefined(flag)) {\r\n\t\t  debug = flag;\r\n\t\t  return this;\r\n\t  } else {\r\n\t\t  return debug;\r\n\t  }\r\n  };\r\n```\r\n\r\nPossibly should be:\r\n\r\n```javascript\r\n  this.debugEnabled = function(flag) {\r\n\t  if (angular.isDefined(flag)) {\r\n\t\t  debug = flag;\r\n\t\t  return this;\r\n\t  } else {\r\n\t\t  return debug;\r\n\t  }\r\n  };\r\n```"
3602,'vojtajina',"fix(routeProvider): route matcher should fill non-optional parameters or fail\nAlready requested in #3481, this PR aims to correct the currently behavior of a `$routeProvider` configured like so:\r\n\r\n```\r\n$routeProvider\r\n  .when('/pages/:page/*comment', {template: 'comment'})\r\n  .when('/pages/:page', {template: 'page'})\r\n  .when('/pages', {template: 'index'});\r\n```\r\n\r\nWould never reach any of the 'page' or 'index' routes unless they are defined in reverse order. Given that ordering of route matching is not guaranteed to be the same as the definition of `when`s, a fix could be the one in this PR.\r\n\r\nWith this PR, a route containing parameters __must__ be able to give a value to all parameters to match.\r\n\r\n:bangbang: This creates _breaking change_ where locations like `/page/` will __not__ match the route `/page/:id`.\r\n\r\n@joshrtay @jbdeboer"
3600,'mhevery','chore(ngdocs): fix the version jump to list the latest master and to also list the RC versions in sorted order\n'
3597,'vojtajina','fix(filter): filter on false properties\nCode was evaluating !expression[key] while attempting to\r\nsee if the key was present, but this was evaluating to true for\r\nfalse values as well as missing keys.\r\n\r\nCloses #2797. '
3573,'matsko',"ng-include directives are not expanded when transcluded\nWhen I upgraded to 1.2.0rc1 my ng-include directives are no longer expanded when transcluded into a ng-transclude.\r\n\r\nHere's the Plunk:\r\nhttp://plnkr.co/edit/NHlNI8bdpGX7ibBoDzcx?p=preview"
3570,'vojtajina',"fix($timeout): clean deferreds immediately after callback exec/cancel\nMake sure $timeout callbacks are forgotten about immediately after\r\nexecution or cancellation.\r\n\r\nPreviously when passing invokeApply=false, the cleanup used $q and so\r\nwould be pending until the next $digest was triggered. This does not\r\nmake a large functional difference, but can be very visible when\r\nlooking at memory consumption of an app or debugging around the\r\n$$asyncQueue - these callbacks can have a big retaining tree.\r\n\r\n---\r\n\r\nMotivation\r\n\r\nIn the app that I am working on, we have some quite memory hungry pages. I noticed that on navigating away from them to lighter pages, the memory they consumed would not be released until something was clicked or happened to cause a $digest.\r\n\r\nAfter some digging it turns out that the form controller in the page is releasing event handlers inside a $timeout with applyInvoke=false. The callback is happening without trouble and releases the event handlers, but it is not itself released until the next digest cycle, and contains most of the page in its closure.\r\n\r\nIt is not clear from the $timeout documentation that internal cleanup should be dependant on the invokeApply parameter. I would only expect callbacks I'd added myself to the returned promise to be dependant on a digest as this is part of using $q. I don't think the changes in this pull request should be observable without debugging tools so shouldn't affect current code."
3569,'btford','Grammatical corrections to Form and Control definitions\n'
3558,'IgorMinar',"Link fn of a replace+transclude directive runs before transclusion takes place\nI'm unable to access transcluded elements in a link function. The behavior has changed since 1.1.5. See http://plnkr.co/edit/WvGAlByx1771wurPbWXA?p=preview and compare the result with the commented 1.1.5 script\r\n    \r\n    app.directive('test', [function () {\r\n      return {\r\n        restrict: 'E',\r\n        transclude: true,\r\n        replace: true,\r\n        template: '<div ng-transclude></div>',\r\n        link: function postLink(scope, element) {\r\n          // This should log 2 as in 1.1.5\r\n          console.log(element.children().length);\r\n        }\r\n      };\r\n    }]);\r\n\r\n` element.children();` should contain the transcluded elements like the `h2' tags:\r\n\r\n    <test>\r\n        <h2>I'm transcluded</h2>\r\n        <h2>Me too</h2>\r\n    <test>\r\n\r\n\r\n"
3549,'btford','fix($scope): $evalAsync executes on the right scope\nExecutes `$evalAsync` on the scope that the call was made.\r\n\r\nCloses: #3548'
3548,'btford',"$evalAsync does not follow $eval semantics, runs on $rootScope, not current Scope\nSince we have only a single asyncQueue (331cd5a8cb5efdafe8ad7eb386aed4033cfc1bb3), the call to `$evalAsync` does not follow the same semantics as the call to `$eval`.\r\n\r\nThis is because the scope for an expression in `$evalAsync` is always the `$rootScope`, whereas the scope for an `$eval` expression is always the current scope.\r\n\r\nIf this is intentional, which I hope it's not, it needs to carry a big fat warning in the docs. A fix could be to store the context alongside the actual expression when adding stuff to the asyncQueue.\r\n\r\nI would just like to quickly get a confirmation on this oberservation before trying to submit a patch. I created a failing test to demonstrate the problem."
3539,'btford','fix($q): promises should still resolve outside of the $digest/$apply phase\nA number of issues have been raised (see #2431) because the current promise implementation has the unexpected behavior of not forwarding execution to the `onResolve` or `onReject` callbacks until the next $digest cycle, nor does it schedule a new cycle.\r\n\r\nThe currently recommended solution is to wrap all callbacks with $apply, but that is unnecessarily cumbersome (the user will almost always wants $apply called). It becomes increasingly problematic when dealing with longer promise chains, or using third party libraries that expect conventional promises as input.\r\n\r\nCloses #2431'
3537,'IgorMinar','squash! wip\n'
3534,'btford',"fix(ngMock): preventing minifier from breaking ngMock's inject\nsee https://github.com/angular/angular.js/issues/3531"
3533,'IgorMinar','refactor(location): $location now uses urlUtils, not RegEx\nThe location service, and other portions of the application, were relying on a complicated regular expression to get parts of a URL. But there is already a private urlUtils provider which relies on HTMLAnchorElement to provide this information, which is suitable for most cases. In order to make urlUtils more accessible in the absence of DI, its methods were converted to standalone functions available globally.\r\n\r\nThe urlUtils.resolve method was renamed urlResolve, and was refactored to only take 1 argument, url, and not the 2nd "parse" boolean. The method now always returns a parsed url. All places in code which previously wanted a string instead of a parsed url can now get the value from the href property of the returned object.\r\n\r\nTests were also added to ensure IPv6 addresses were handled correctly.\r\n\r\n## Todo\r\n\r\n - [x] Get this test passing in IE: $location HashbangUrl should not preserve old properties when parsing new url FAILED (returned URL does not have #!/ as expected)\r\n - [ ] Review all changes with Igor\r\n - [x] Whatever Mary Poppins tells me'
3522,'btford','Prevent infinite digest error in IE7\nRefactored the replacedUrl variable to store the new URL on both\r\nlocation.replace and setting location.href directly to handle delays in\r\nactual location value change in IE.\r\n\r\nCloses #2802 '
3515,'btford','Animation Guides + Tutorial\n'
3500,'vojtajina',"refactor(ngRoute): make the order of route matching deterministic\nPreviously, routes were matched against the current $location in an arbitrary\r\norder. This change ensures that routes are matched in the order they were\r\noriginally configured, making it possible to specify overlapping path\r\ncomponents which are fixed in some routes and variable in others. For example,\r\n\r\n    $route.when('/Book/new', ...);\r\n    $route.when('/Book/:bookId', ...);\r\n\r\ncan now be used to ensure that a different route configuration is used for\r\nnew books and for existing ones."
3491,'IgorMinar','Allow directive\'s bi-directional isolate scope to do deep equality check\n### Background\r\n\r\nConsider the following directive:\r\n\r\n```js\r\nmyApp.directive(\'listUsers\', function() {\r\n  return {\r\n    restrict: \'E\',\r\n    template: "<ul><li ng-repeat=\'user in users\'>{{user.name}} - {{user.age}}</li></ul>",\r\n    scope: {\r\n      users: \'=\'\r\n    }\r\n  };\r\n});\r\n```\r\n\r\nIt sets up bi-directional binding to the parent scope\'s `users` property that it receives via an attribute. In this particular situation, it expects an array of user objects and lists user names and their respective ages.\r\n\r\nWe could use this directive like so.\r\n\r\n```html\r\n<div ng-init="users = [{name: \'Mark\', value: 42}, {name: \'Misko\', value: 55}]">\r\n  <list-users users="users"></list-users>\r\n</div>\r\n```\r\n\r\nEverything works just fine. At least until we decide to use a filter.\r\n\r\n```html\r\n<div ng-init="users = [{name: \'Mark\', value: 42}, {name: \'Misko\', value: 55}]">\r\n  <input type="text" ng-model="query">\r\n  <list-users users="users | filter:query"></list-users>\r\n</div>\r\n```\r\n\r\nIf you look in the browser console, you will see something along the lines of: `10 $digest() iterations reached. Aborting!`\r\n\r\nThe problem is that `filter`, along with many other functions that mutate arrays, return a copy and not the original array. During the $digest [comparison step](https://github.com/angular/angular.js/blob/master/src/ng/rootScope.js#L527-L530), the array value is deemed as changed (since a new reference is returned even though the actual elements in the array have not changed) and the watchers are called again and again.\r\n\r\n### Proposition\r\n\r\nAllow optional "deep" equality checks on bi-directional scope values to avoid unnecessary digests.\r\n\r\nThis pull request introduces an optional argument, `*`, that can be passed to a directive\'s scope definition. When passed, a deep [equality](https://github.com/angular/angular.js/blob/master/src/Angular.js#L682) check will be forced when determining if watcher value has changed.\r\n\r\nNow, the example above will work properly with just a minor tweak to the directive\'s scope definition:\r\n\r\n```js\r\nmyApp.directive(\'listUsers\', function() {\r\n  return {\r\n    ...\r\n    scope: {\r\n      users: \'=*\'\r\n    }\r\n  };\r\n});\r\n```'
3489,'IgorMinar','fix(compile): fix directive as identifier\n'
3488,'IgorMinar',"test(matchers): support 'not' text in toBeHidden matcher\n"
3483,'pkozlowski-opensource','Fix translations for locale hr-hr and hr\nWrong cases for months in croatian language have been fixed, in order to show the months correctly in a calendar.'
3477,'pkozlowski-opensource','angular-locale translation guidelines\nIt does seem like a lot of translations for angular-locales are made with Google Translate or similar and are somewhat odd.\r\n\r\nFor example:\r\n\r\nangular-locale_fi.js\r\n```\r\n"DAY": [\r\n      "sunnuntaina",\r\n      "maanantaina",\r\n      "tiistaina",\r\n      "keskiviikkona",\r\n      "torstaina",\r\n      "perjantaina",\r\n      "lauantaina"\r\n    ],\r\n```\r\n\r\nTranslated into English this would be "on sunday", "on monday"... nowhere seems to be any documentation what strings actually are supposed to be and in which context they are to be used.\r\n\r\nFor example in Finnish, date "Sunnuntaina 11.8" is correct but the name of the day is sunnuntai.'
3474,'pkozlowski-opensource','fix(angular.copy): change angular.copy to correcly clone RegExp\nangular.copy previously copied RegExp as an empty object. Change detects\r\nRegExp instance and clones into new RegExp. This change is based on a previous\r\nfix to allow Date to be copied.\r\n\r\nCloses #3473'
3465,'pkozlowski-opensource',"fix(jqLite): forgive unregistration of a non-registered handler\nI've bumped into a subtle bug when unregisering handlers with jqLite. If you try to unregister a non-existing handler by specifing both its type and a function jqLite's `off` will fail if there was already a different handler was registered. See the test for more details.\r\n\r\nWith jQuery this situation is handled correctly, that it, unregistration has no effect.\r\n\r\nI was hesitating a bit between fixing it in jqLite or fixing directly the `indexOf` / `arrayRemove` (in Angular.js). In any case the test illustrates my real problem, can amend the fix if needed."
3421,'btford','fix(gruntfile): ensure all dependent grunt tasks are called for each testing task\n'
3408,'btford','Issue #1941 - This fixes an issue that can break $observe when using a directive with a templateUrl. \nhttp://plnkr.co/edit/xJNt918gEpuXR026VuZB?p=preview illustrates the issue that this pull request addresses.\r\n\r\nWhen a node is cloned because the beforeTemplateLinkNode !== beforeTemplateCompileNode condition was met, then this would cause the link functions to create a new attrs object, but by setting their last argument to "true" below we force them to keep the same attrs object. Without this flag the $$observers is put on the afterTemplateNodeLinkFn version of attrs and the $set is called on the beforeTemplateNodeLinkFn version of the attrs whenever we make a cloned linkNode above, thus breaking $observe. See github issue #1941\r\n\r\nI have not contributed to angular before so I imagine some testing and review is needed but I wanted to offer this patch (which resolved the problem) as a starting point.\r\n\r\nThanks.'
3395,'pkozlowski-opensource',"chore(ngdocs): update the config block within the $routeProvider example to be more explicit.\nThe implicit `config` block here tripped up a few users in the angular IRC channel, and I'm of the opinion that using the explicit `.config` API is more desirable in practice and in the examples :)"
3369,'chirayuk','IE 7 Quirks Mode Bug in 1.1.6\nhi, i might be wrong but i get this error in Console and i think there is a bug because in IE developer tools if i set Document Mode to Quirks, the error goes, which should be the total opposite and when i set it to standards the error comes back !\r\n\r\nSCRIPT5022: [$sce:iequirks] Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information. \r\nangular.js, line 11046 character 9\r\n'
3331,'vojtajina','fix(*): protect calls to hasOwnProperty in public API\nObjects received from outside AngularJS may have had their `hasOwnProperty`\r\nmethod overridden with something else.\r\nAlso, we may be using an object internally to store/cache a hash-map, where\r\nthe keys for the map are provided from outside AngularJS.\r\n\r\nIn such cases we must either call directly against\r\n`Object.prototype.hasOwnProperty` or provide some other way of preventing\r\nour objects from having hasOwnProperty overridden.\r\n\r\nCloses #2141'
3314,'IgorMinar',"fix($$urlUtils): remove dependency on $window\n$window may be mocked out in tests causing those tests to fail.  So\r\ndon't use $window."
3307,'vojtajina','ng-If doesn\'t work with ng-Include\nThis doesn\'t work ... although it seems it should:\r\n<pre>\r\n&lt;div data-ng-if="oneChoice"  data-ng-include="\'optionsRadio.html\'">&lt;/div>                         \r\n&lt;div data-ng-if="!oneChoice" data-ng-include="optionsCheckbox.html\'">&lt;/div>\r\n</pre>\r\nThis alternative works as expected:\r\n<pre>\r\n&lt;div data-ng-switch="oneChoice">\r\n    &lt;div data-ng-switch-when="true"  data-ng-include="\'optionsRadio.html\'">&lt;/div>                         \r\n    &lt;div data-ng-switch-when="false" data-ng-include="\'optionsCheckbox.html\'">&lt;/div>\r\n&lt;/div>\r\n</pre>'
3284,'pkozlowski-opensource','Fix input [number] example\nThe input [number] error spans did not show on the example, as they were relying on an non-existing property (myForm.list.$error) vs the working property (myForm.$error)'
3279,'pkozlowski-opensource','docs(ngRepeat): add example for filters in conjunction with `track by`\nRefer issue #3019'
3278,'IgorMinar',"fix($parse): unwrap promise when setting a field\nThis fixes an inconsistency where you can't call the setter function\r\nwhen the expression resolves to a top level field name on a promise.\r\n\r\nSetting a field on an unresolved promise will throw an exception.  (This\r\nshouldn't really happen in your template/js code and points to a\r\nprogramming error.)\r\n\r\nCloses #1827"
3258,'ksheedlo','docs(minErr): Build minErr doc site\nThe minErr doc site is ready for review. \r\n\r\nChanges in this PR:\r\n\r\n- Include ngdoc files for each minErr that we throw in angular core\r\n- Extend ngdoc parser to handle new ngdoc type\r\n- Rearrange page headers for ALL of docs.angularjs.org\r\n    - The "view source" and "improve this doc" buttons have been moved above the header\r\n    - The module note has been moved from a h1 level span to a subheading\r\n    - This was done because minErr pages tend to have longer headers\r\n- Add `minerrDisplay` attribute directive to interpolate minErr parameters\r\n- Display minErr types in namespaces under docs.angularjs.org/minerr/ (like API modules)\r\n- Add rewrite rule to make /minerr/ accessible from `grunt webserver`\r\n'
3248,'IgorMinar','fix($compile): allow data: URIs in img[src]\n'
3236,'IgorMinar',"fix(core): parse URLs using the browser's DOM API\n"
3224,'pkozlowski-opensource','whitespace\n'
3220,'IgorMinar','Pr 2223\n'
3217,'pkozlowski-opensource','Update di.ngdoc\nThe recommended way to add a controller should NOT be by creating a global function.  Changed to use the array notation.'
3215,'matsko',"$animator and ngShow: Initial state after route change\nThere was in issue #2309 about animations that are run on a elements that are hidden during initial load. And it was fixed in case if page is opened straight away.\r\n\r\nBut in case if some view is loaded with ngView after route change all animations that initially shouldn't be run are run...\r\n\r\nHere is example: http://plnkr.co/edit/lOu6Np?p=preview\r\n\r\nMay be disable animations during route change?"
3198,'shepheb',"Fix issue with Jquery for ngMobile\nIssue:\r\n\r\nI found that the ngClick directive does not work with touch events dispatched by JQuery.\r\nJQuery will wrap touch events, and touches can only be found on originalEvent.\r\nThe touch event handlers in ngClick directive are not using the originalEvent but event instead,\r\nso the touches these handlers use, are 'undifined'.\r\n\r\nAlso, I found browsers are quite sensitive with touch, when I just tap on my touch screen,\r\nthe browser will dispatch 'touchstart', 'touchmove', and 'touchend'. Since the touch move handler\r\nalso reset status, I never get my click handler triggered.\r\n\r\nFix:\r\n\r\nCheck if event has an originalEvent property, and use it instead if it is found.\r\nAlso I make touch end handler triggers click handler if the distance between touch start and touch end, \r\nis within MOVE_TOLERANCE."
3177,'pkozlowski-opensource','docs(ngValue): added documentation for ngValue\nDocumentation for ngValue, which was added in 09e175f02cca0f4a295fd0c9b980cd8f432e722b\r\nCloses #3112'
3160,'pkozlowski-opensource','docs(overview) - fix typo in overview doc\nRemoved repeated "the" in the sentence: The input invalidates itself by turning red when you enter invalid data or leave "the" the input fields blank (Line 137).'
3137,'shepheb','fix(ngMobile): prevent ngClick when item disabled\n - the ngClick attribute was always triggered, regardless the ngDisabled/disabled attributes\r\n - we now check the ngDisabled status before triggering the original click event\r\n - and also check the DOM disabled attribute to be homogenous with the regular HTML disabled behavior (disable presence makes the element and click disabled)\r\n - deals with #3124 #3132 /cc @shepheb'
3136,'pkozlowski-opensource','Correct verifyNoOutstandingExpectation example\nThe example provided for `ngMock.$httpBackend.verifyNoOutstandingExpectation` suggests calling `$httpBackend.verifyExpectations` which results in an error.'
3093,'IgorMinar','chore(gitignore): add .agignore\nI use a .agignore file to skip the build directory and some other files\r\nwhile searching using Ag (see\r\nhttps://github.com/ggreer/the_silver_searcher).'
3092,'IgorMinar','test($compile): use FQDN for img[src]\nimg[src]="https://foo" has the unfortunate problem that the browser will\r\nactually try retrieving the resource the non FQDN foo.  The local DNS\r\nmight suffix a domain to this, resolve it, and try to present a\r\ncertificate for the https request and prompt the user to pick a\r\ncertificate. This commit avoids that by making foo a FQDN.  Note that it\r\nmight be better to replace foo with example.com (ref\r\nhttp://tools.ietf.org/html/rfc2606#section-3).'
3070,'pkozlowski-opensource','fromJson JSDoc\nThe JSDoc from the fromJson function states that it:\r\n``` * @returns {Object|Array|Date|string|number} Deserialized thingy. ```\r\nbut it does **not** return `Date`s \r\n'
3049,'IgorMinar','fix($parse): move global getter out of parse.js\n'
3047,'IgorMinar',"test($compile): fix IE specific test.\nFor some reason, the tests pass but the build doesn't turn green on http://ci.angularjs.org/user/chirayu/my-views/view/chirayu/job/angular.js-chirayu/ (e.g. http://ci.angularjs.org/user/chirayu/my-views/view/chirayu/job/angular.js-chirayu/89/  )"
3043,'IgorMinar','fix($parse): disallow access to Function constructor.\nSandboxing Angular Expressions\r\n------------------------------\r\nAngular expressions are generally considered safe because these\r\nexpressions only have direct access to $scope and locals.  However, one\r\ncan obtain the ability to execute arbitrary JS code by obtaining a\r\nreference to native JS functions such as the Function constructor.\r\n\r\nAs an example, consider the following Angular expression:\r\n\r\n  {}.toString.constructor(alert("evil JS code"))\r\n\r\nWe want to prevent this type of access.  For the sake of performance, we\r\ndisallow any access to any member named "constructor".  You can foil\r\nthis by sticking in the Function constructor under a different name in\r\nyour scope or exposing other JS apis or the DOM by sticking it on the\r\nscope.  Don\'t do that - you increase the chances of accidently allowing\r\nan exploit through.'
3042,'caguillen214','+ (Plus) in URL parameter converted to %2B\nThe `+` character is valid in url query strings as a substitute for space or its hex-coded equivalent, `%20`.\r\n\r\nWhen Angular bootstraps, `$LocationProvider.$get` initializes `$location`.  `$location.$$parse` uses `parseKeyValue` (from inside `matchAppURL`) to decompose the query string into parameters.  It calls the built-in `decodeURIComponent` which replaces hex escape sequences, but it does not replace `"+"` with space.\r\n\r\nAs a consequence, the plus character remains for `$location.$$compile` to encode as `%2B` which changes the unescaped, actual value of the parameter (as returned from `$location.search().paramName`) from `"a b"` to `"a+b"`.  This is incorrect.\r\n\r\nThe `parseKeyValue` function should be changed to scan the decoded value for `\'+\'` and replace it with space.  This function is also used for manipulation of `$location.search()`, and in that scenario, `\'+\'` replacement is not correct, so the change would need to be parameterized so that `\'+\'` is replaced when parsing a parameter from the browser and left alone when parsing a parameter from the application.\r\n\r\nVerified in angular 1.0.7 and 1.1.5.'
3028,'IgorMinar','fix($compile): disallow interpolations for DOM event handlers\ne.g. Use ng-click="..." instead of onclick="{{...}}"'
3027,'IgorMinar','fix($compile): sanitize values bound to img[src]\nRef: 9532234bf1c408af9a6fd2c4743fdb585b920531'
3019,'petebacondarwin','fix(ngRepeat): parsing of repeat_expression\nTweaked the regex used for tokenizing the repeat_expression.  Subsequently tweaked the assignment to rhs as a result of the new regex.\r\n\r\nCloses #3018'
3015,'pkozlowski-opensource','JQueryLite and html(\'\') function in IE8\nwhen I\'m using ui-typeahead plugin from AngularUI project, anguler jqlite throws exception when $compileNode.html(\'\') is executed on IE8.\r\n\r\nIE8 is throwing exception when this line of code is executed:\r\n\r\n    element.innerHTML = value; // html: function... from Angular.js\r\n\r\nIf i try execute it from console I get:\r\n\r\n    element.innerHTML = "test" \r\n    Unknown runtime error \r\n\r\nhere is note type and node name\r\n\r\n    >> element.nodeName \r\n    "TYPEAHEAD-POPUP" \r\n    >> element.nodeType \r\n    1 \r\n\r\nI use ie8 shive which have all angular UI elements defined. \r\n\r\nI\'ve notice that I can read prop from innerHTML but it can\'t be set.\r\n\r\nIf instead of jqueryLite I will include jquery everything works. so this is why IMO this is an issue with Angular.js JQLite lib.'
3012,'mhevery','fix(docs): set ng-app for editing with plunker\nCloses #3011'
3011,'chirayuk',"Edit with plunker in docs doesn't use the specified ng-app\n"
2984,'btford',"$http ignores HTTP headers with falsy values\n`$http` does not send HTTP headers if they have falsy values. For example following code does not work, header is not sent.\r\n\r\n```javascript\r\n$http(..., headers: {'Content-Version', 0})\r\n```\r\n\r\nThis issue occurs at minimum in the unstable version of Angular and master.\r\n\r\nHere is a failing test-case for `$httpBackend` which demonstrates the issue:\r\n\r\n```javascript\r\n  it('should set requested headers even if they have falsy values', function() {\r\n    $backend('POST', 'URL', null, noop, {'X-header1': 0, 'X-header2': '', 'X-header3': false});\r\n    xhr = MockXhr.$$lastInstance;\r\n\r\n    expect(xhr.$$reqHeaders).toEqual({\r\n      'X-header1': 0,\r\n      'X-header2': '',\r\n      'X-header3': false\r\n    });\r\n  });\r\n```"
2973,'caitp','Detect JSON response by content-type header\nHello. In documentation to $http we can find:\r\n`If JSON response is detected, deserialize it using a JSON parser.`\r\nPlease, don\'t ignore content-type header of response.\r\nIf server responds `"string"` (exactly with quotes) and content-type of response is JSON, $http.get().success() function should receive `string` without quotes, because data should be deserialized from JSON.'
2967,'mhevery','chore(ngdocs): provide test code for lunr search in docs\n'
2965,'mhevery','Fixes to docs + jqLite\n- Lunr 0.4.0 is much faster than what we had before.\r\n- jqLite trigger handler does not support event object override.\r\n- Allow user to press escape key to close the docs search.'
2961,'btford','v1.1.5 - $routeParams not working when html5Mode active\nThe code below works with previous versions of angular but not with v1.1.5, I\'ve looked at the changelog, but there\'s nothing there that points to some braking changes:\r\n\r\n**Edit:** the problem is that the `someId` property is not set on `$routeParams` when navigating to `/b/12345`\r\n\r\n```html\r\n<div ng-app="playground" ng-controller="main">\r\n  <ul>\r\n    <li> <a href="/a">View A - /a</a> </li>\r\n    <li> <a href="/b">View B - /b</a> </li>\r\n    <li> <a href="/b/12345">View B - /b/12345</a> </li>\r\n  </ul>\r\n\r\n  <div ng-view></div>\r\n\r\n  <script type="text/ng-template" id="tmpl-view-a">\r\n    <h1>View A</h1>\r\n  </script>\r\n\r\n  <script type="text/ng-template" id="tmpl-view-b">\r\n    <h1>View B</h1>\r\n    <p>$routeParams: {{ route.params }}</p>\r\n  </script>\r\n</div>\r\n```\r\n   .   \r\n```javascript\r\nvar app = angular.module(\'playground\', [])\r\n\r\napp.config(function ($routeProvider, $locationProvider) {\r\n  $locationProvider.html5Mode(true) // <-- if this is removed, the code works\r\n\r\n  $routeProvider\r\n    .when(\'/a\', {\r\n      controller: \'viewa\'\r\n    , templateUrl: \'tmpl-view-a\'\r\n    })\r\n    .when(\'/b\', {\r\n      controller: \'viewb\'\r\n    , templateUrl: \'tmpl-view-b\'\r\n    })\r\n    .when(\'/b/:someId\', {\r\n      controller: \'viewb\'\r\n    , templateUrl: \'tmpl-view-b\'\r\n    })\r\n    .otherwise({ redirectTo: \'/\' })\r\n})\r\n\r\napp.controller(\'main\', function ($scope, $route, $routeParams, $location) {})\r\napp.controller(\'viewa\', function ($scope, $routeParams) {})\r\napp.controller(\'viewb\', function ($scope, $routeParams) {\r\n  $scope.route = { params: $routeParams.someId }\r\n})\r\n```'
2950,'jeffbcross','fix($location): support IPv6 addresses\nFixes #2864'
2887,'pkozlowski-opensource','feat(filterFilter): provide support for an array as values to pattern objects\nArrays are now supported for pattern object values of filterFilter. For\r\nexample: `ng-repeat="item in items | filter:{name:[\'alex\', \'john\',\r\n\'simon\']}"`\r\n\r\nIn my example, I use this to filter by "types" from a list of checkboxes. Only the selected "types" are shown.'
2886,'mhevery','feat(ngdocs): provide support for user to jump between different versions of the angularjs documentation\n'
2877,'btford','Please publish AngularJS as an NPM module\nIt just takes a few minutes to publish an npm module of the existing AngularJS project, but it would accomplish the following:\r\n\r\n* Enable deployment from the standard infrastructure being used for both server and client Javascript code\r\n* Enable browserify users like me to package up client side libraries I fetch with npm (though in production, I reference a copy on the CDN)\r\n* Find new Angular releases using npm outdated.\r\n* Jump ahead of jQuery, which is in the process of taking over the npm management of their library: https://github.com/coolaj86/node-jquery/issues/56\r\n\r\nThe npm name angularjs remains available. I recommend mapping it to git://github.com/angular/angular.js.git#v1.0.x and perhaps also creating an angularjs-unstable which pulls from master.\r\n\r\nThanks!'
2811,'mhevery','Sce\n'
2810,'shepheb','ngMobile does not prevent ghost focus on form inputs after CSS transition\nWebkit based browsers synthesize mouse events roughly 300ms after the touchend event, which can cause form fields to undesirably gain focus after a CSS3 transition.\r\n\r\nThis issue has been addressed by fastclick: https://github.com/ftlabs/fastclick/issues/27\r\n\r\nMy workaround is to disable and re-enable text inputs and textareas on `$viewContentLoaded` (not pretty):\r\n\r\n```coffeescript\r\n$rootScope.$on \'$viewContentLoaded\', ->\r\n  $(\'input[type=text], textarea\').attr(\'disabled\', true)\r\n  $timeout ->\r\n    $(\'input[type=text], textarea\').removeAttr(\'disabled\')\r\n  , 1000\r\n```\r\nI also added the following CSS so disabled text inputs look like regular ones on iOS::\r\n```sass\r\ninput[type="text"]:disabled\r\n  opacity: 1\r\n  -webkit-text-fill-color: black\r\n'
2763,'petebacondarwin',"Docs filenames containing a colon are invalid in Windows\nMany of the partials contained the docs of the official Angular distribution contain a colon, e.g. ng.directive:ngAnimate.html, ng.directive:ngBind.html, etc.\r\n\r\nA colon is not a valid character within a Windows filename. This means some extractors, such as Explorer's built-in zip handling, will fail to extract to extract them. Other tools, such as 7-zip, will extract them, but will replace the the : character with something else. Either way, the docs are broken."
2733,'pkozlowski-opensource',"filtering with object fails in 1.1.4 when comparing to boolean value\nI think there's a bug in version 1.1.4; see this Plunkr: http://plnkr.co/eGw6DVq7C3rVqsa3IE2o\r\n\r\nSetting a filter like 'item in items | filter: { booleanfield: true} works as expected. Setting the field to false shows all items, regardless of the value of booleanfield of the objects.\r\n\r\nI also tried with angular 1.0.x Version and there everything is ok."
2731,'vojtajina',"fix(noConflict): replaced direct reference to $window.angular\nSimple change. Tests passed before and after. I didn't add a test since the proper way to test this is probably to run the entire test suite with `noConflict` to catch any reference bugs like this and that would be a much larger pull request."
2671,'mhevery','test($animator): ensure invalid $sniffer.transitions and $sniffer.animations flags are caught in animation spec code\n'
2650,'mhevery','feat(ngdocs): provide support for inline popover, foldouts and foldover annotations\n'
2647,'mhevery','feat($animator): provide support for custom animation events\n'
2636,'IgorMinar','fix($browser): should use first value for a cookie.\nWith this change, $browser.cookies()["foo"] will behave like\r\ndocCookies.getItem("foo") where docCookies is defined at\r\nhttps://developer.mozilla.org/en-US/docs/DOM/document.cookie\r\n\r\nRef: https://github.com/angular/angular.js/issues/2635\r\n\r\nThis fixes the issue where, if there\'s a value for the XSRF-TOKEN cookie\r\nvalue with the path /, then that value is used for all applications in\r\nthe domain even if they set path specific values for XSRF-TOKEN.'
2635,'chirayuk',"$browser.cookies reads the wrong cookie value when there are multiple values for a cookie\nConsider the case where a cookie, `foo` has the value `r_value` at the root path `/`, and another value, say, `p_value` at a subpath `/path`.\r\n\r\n`document.cookie` will contains both values for the cooke for an application served under the `/foo` path.\xa0 The value for the more specific path, `/foo`, will appear first in the list and the other less specific value will appear later.\r\n\r\nangular currently uses the last seen value of the cookie but should use the first value.\xa0 The becomes a bigger issue when coupled with the automatic XSRF protection that's provided in conjunction with the `XSRF-TOKEN` cookie.\xa0 Currently, if a value for this cookie is set on the root path, then that value is always used for applications at any other path.\r\n\r\nI'm working on a fix."
2625,'mhevery','feat(ngdocs): Add FullText search to replace Google search in docs\n'
2621,'IgorMinar','$watchCollection newValue always == oldValue\nI trying to use the $watchCollection to watch an array, and I noticed that the newvalue is always equal to the oldvalue.  After looking at the code, it looks like the values are copied to oldValue prior to firing the listener.  It should be an easy fix.'
2613,'matsko',"Should ng-hide / ng-show use '!important' to hide? Optional flag?\nWhen using ng-hide or ng-show, should they not both use the `!important` flag to make them the highest priority?\r\n\r\nAt the moment, I'm using Foundation's topbar along with `ng-hide` and even when `ng-hide` is true, the element is still visible due to the Foundation CSS rules.\r\n\r\nAt the very least it would be nice to be able to configure this as an option. Due to the way the new `$animator` has been integrated with the `ng-hide` / `ng-show` directives, it's very hard to create a directive (with animation support) that uses `!important`, without changing core angular files (`/src/ng/animator.js:366-372`)."
2610,'matsko','binding to class screws animation\nThis works fine:\r\n\r\n````html\r\n<li ng-repeat="item in items" ng-animate="\'repeat\'" ng-class="\'done-\'+item.done">\r\n````\r\n\r\nThis does not, because of binding to `class`.\r\n````html\r\n<li ng-repeat="item in items" ng-animate="\'repeat\'" class="done-{{item.done}}">\r\n````\r\n\r\n'
2606,'shepheb','feat(ngMobile): add ngSensor services to detect e.g. shake events\nAdd services for sensor events used by mobile devices.\r\n\r\nListener-Services for following services are created: \r\n* Orientation\r\n* Motion\r\n* Humidity\r\n* Light\r\n* Noise\r\n* Pressure\r\n* Proximity\r\n* Temperature\r\n\r\nBased on https://dvcs.w3.org/hg/dap/raw-file/tip/sensor-api/Overview.html#datatypes\r\n\r\nImplement shake-direktive as example...\r\n\r\n```html\r\n<div ng-init="shake=0" ng-shake="shake=shake+1">\r\n    <h1 ng-bind="shake">Test</h1>\r\n</div>\r\n```\r\nCould be used like ngClick and other EventDirectives.\r\n\r\nCould be used for e.g.\r\n* new random 9gag image\r\n* change radio station\r\n* ...\r\n\r\nThis is just a first proposal, there are still many open tasks:\r\n* tests\r\n* multiple device tests\r\n* doc\r\n\r\nBut first I want to discuss this feature.\r\nIve test it with an iOS6 Device and worked fine.\r\n\r\nfeedback & support are welcome :)'
2547,'vojtajina',"fix(jqLite): correctly monkey-patch core jQuery methods\nAngular's current way of monkey-patching jQuery core methods expects the `$.fn.html` method to always act as a setter whereas a common usage is to get elements contents via `elem.html()` and currently Angular monkey-patches it to act in the same way as `elem.html('')` which breaks a lot of simple code...\r\nhttp://api.jquery.com/html/\r\n\r\nAnother issue is that the `$.fn.remove` function accepts a selector as an optional parameter and removes only the elements matching it whereas Angular thinks this method always removes everything.\r\n\r\nThis patch solves both those issues and adds unit tests for that cases. All current unit tests are passed by Chrome, Chrome Canary, Firefox & Opera and tests written by me are broken on current master.\r\n\r\nI'd be grateful to merge it rather quickly. :)"
2545,'shepheb','feat(ngMobile): provide mobile gesture detection capabilities\nA basis for gesture detection where multiple gesture types can be applied to an element without events clashing.\r\nMultiple gestures can also be active at the same time on different elements, allowing for complex, potentially multi-user interfaces or hilarious easter eggs.\r\n\r\nSupports the following gestures: hold, click (tap), double click (double tap), swipe (up, down, left and right)\r\n\r\nEasily extended to allow for additional gestures and custom directives.'
2531,'mhevery','Transclude type multi-element, use this for ng-repeat\nThe patch adds a new transclude type multi-element to be able to handle transclusions that include more elements that the one with the directive. The transclusion type multi-element works in the following way.\r\n\r\nWhen a directive is defined of the type multi-element, then Angular looks for matching attributes named "<directive name>-start" and <directive name>-end" and transcludes the entire block. If element where the directive is present does not contain the attribute "<directive name>-start" then the transclusion works just as the transclusion type "element"\r\n\r\nE.g\r\n\r\nThe directive ng-repeat is of type multi-element when compiling the template below, the compiler will look for the attribute ng-repeat-start. Given that this is present, it will look for a matching hg-repeat-end attribute. When found the entire block will be used for the linking function\r\n\r\n```html\r\n<ul>\r\n  <li ng-repeat-start ng-repeat="item in items">{{item.name}};</li>\r\n  <li>{{item.number}};</li>\r\n  <li ng-repeat-end>{{item.color}};</li>\r\n</ul>\r\n```'
2529,'IgorMinar','feat($http): add support for timeout promises\nIf the timeout argument is a promise, abort the request when it is resolved.\r\nImplemented by adding support to $httpBackend service and $httpBackend mock service.\r\n\r\nThis is yet another approach to the $http cancel issue (see #2452 and #2523). Obviously there is still a lack of consensus on how to handle it (see https://github.com/kriskowal/q/issues/64), so I propose this as an alternative.\r\n\r\nCloses #1159'
2513,'tbosch',"ng-submit doesn't work with ng-form\nHere's a plunkr to ilustrate the behaviour....\r\n\r\nhttp://plnkr.co/edit/gist:3510140?p=preview"
2495,'pkozlowski-opensource','docs(di): fix typos and grammar\nFixes some grammar, typos, and minor formatting issues in the **Guide: Dependency Injection** documentation page.'
2489,'petebacondarwin','feat($animator): add support for CSS3 animation property detection\n'
2466,'pkozlowski-opensource','Minor grammatical change\n'
2431,'IgorMinar',"No pending request to flush ! errors when moving from 1.1.3 to 1.1.4\nWe're currently trying to migrate from `1.1.3` to `1.1.4`.\r\nWhile doing so, many of our Ajax logic tests are failing with the `No pending request to flush !` error.\r\n\r\nWhen debugging our own code, it looks like the `success` method isn't being called anymore when doing a request:\r\n\r\n```javascript\r\n$http.post('/api/' + authorizationService + '/remove_authorization').success(function(){\r\n  $scope.user.profile['has_' + authorizationService + '_access_token'] = false;\r\n});\r\n```\r\n\r\n(also tried `then` instead of `success`, but no luck)\r\n\r\nThe cause of this error is probably 4ae46814ff4e7c0bbcdbbefc0a97277283a84065 where there are a lot of changes to the `$http` service.\r\n\r\nDebugging the angular source code a bit more, it seems like the `serverRequest` function in [http.js](https://github.com/angular/angular.js/blob/4ae46814ff4e7c0bbcdbbefc0a97277283a84065/src/ng/http.js) doesn't get executed in `1.1.4`, which means `sendReq` never gets fired.\r\n\r\nIn `1.1.3` does get fired so the `success` call actually did happen then.\r\n\r\nHas anyone seen this as well and is there a way to fix this?\r\n\r\nExample code: https://github.com/ets-berkeley-edu/calcentral/blob/v7/app/assets/javascripts/angular/controllers/calcentralController.js#L90\r\nExample test: https://github.com/ets-berkeley-edu/calcentral/blob/v7/spec/javascripts/calcentral/calcentralControllerSpec.js#L47"
2404,'matsko','<input type="number" max="{{max}}"> does not set $error.max property\nWhen using an input of type number, with the max (or min) attribute set from the model, then the max field is not set in the error object of the input.  This is due to the fact that in method "numberInputType", the value of attr.max is undefined.  It is (probably) set from the model only later.\r\n\r\nChecking the HTML, shows that the max attribute gets the correct value, set from the model.\r\n\r\nIn summary, the following does not work as expected:\r\ninput type="number" max="{{max}}"\r\nThe $error for this input field does not contain a boolean value named "max".\r\n\r\nHere is a demo : http://plnkr.co/edit/YiExG5GpFt5MKKXoO4GE\r\n'
2395,'pkozlowski-opensource',"typo\n'or' should be changed to 'of'"
2393,'pkozlowski-opensource','fixed docs link to api/ng.$route\nanchor href to "api/ng.$route" was displaying incorrectly'
2385,'mhevery','Update faq.ngdoc\n- added note to FAQ re: legacy IE support'
2379,'vojtajina',"fix(a): allow jqLite triggerHandler('click') on anchors\nPreviously, anchor elements could not be used with triggerHandler because\r\ntriggerHandler passes null as the event, and any anchor element with an empty\r\nhref automatically calls event.preventDefault(). Add a check that event\r\nexists before calling preventDefault."
2374,'vojtajina','Fix typo\n'
2365,'petebacondarwin',"ngRequired: suggest mark empty arrays as invalid \nCurrent validator in the ngRequired directive looks like:\r\n\r\n```javascript\r\nvar validator = function(value) {\r\n  if (attr.required && (isEmpty(value) || value === false)) {\r\n      ctrl.$setValidity('required', false);\r\n      return;\r\n  } else {\r\n      ctrl.$setValidity('required', true);\r\n      return value;\r\n  }\r\n};\r\n```\r\nValue checked by ```isEmpty``` function which returns true for empty arrays.\r\n\r\n```javascript\r\nif (attr.required && (isEmpty(value) || value === false)) {\r\n```\r\n\r\nI think that ```[]``` should be marked as invalid for this case.\r\n"
2363,'mhevery','fix(ngdocs): improve the animations used in the docs menu\n'
2359,'shepheb','Add support for all mobile devices\nAdds support for windows 8 devices (IE 10 pointer events as well as the [W3C Version](http://www.w3.org/TR/pointerevents/)) and provides a factory for extending the input abstraction\r\n\r\nSee the following fiddle as an example of extending the mobile events for implementing draggable elements (which in turn can be extended to create sliders etc)\r\nhttp://jsfiddle.net/Z6tN3/1/ (Try using multiple fingers on any mobile device)\r\n\r\nAll existing mobile test pass.\r\n\r\nContributes to angular/angular.js#1502 and builds on angular/angular.js#2017\r\n'
2358,'vojtajina','docs(guide): updates for legacy IE7 support\n- note re: id="ng-app" to bootstrap/IE partials\r\n- added doctype/xmlns to markup\r\n- add cond comment re: json2/3 to markup'
2357,'IgorMinar','Update index.ngdoc, testacular renamed to karma\nTestacular is deprecated, just updating the doc here for you all'
2345,'mhevery','feat($animator): allow to globally disable and enable animations\n'
2342,'IgorMinar','angular-mocks.js wording\n'
2338,'IgorMinar','Give more details about directive declaration\nI had a hard time understanding the different ways of declaring a directive, so I added some text to clarify the different return values of the factory function.'
2337,'IgorMinar','Update dev_guide.templates.filters.using_filters.ngdoc\nAdd example of using a filter with that accepts multiple arguments.'
2332,'matsko',"$animator: chaining or cancelling animations (show/hide)\nCurrently there is no way to cancel/chain animations.\r\n\r\nThis leads to unexpected behaviour: if you have some elements under ngShow and quickly change expression (not waiting until animation is finished) you'll have your elements hidden even if ngShow expression is true.\r\n\r\nHere is example: http://plnkr.co/edit/67Q96KmExV78Kd84tq4g?p=preview - wait until elements will show and quickly toggle checkbox (on and off) and you'll see that no elments would be shown.\r\n\r\nI assume the solution should be to stop animation on element (so removing all added classes in case of CSS3) AND call ```afterFn``` button in case if new animation is about to be started. Or there is better solution (chaining of animations?)"
2326,'IgorMinar','injector.js wording change\n'
2325,'IgorMinar','expression.ngdoc wording changes\n'
2324,'IgorMinar','concepts.ngdoc wording change\n'
2323,'IgorMinar','concepts.ngdoc wording change\n... or when working with --> a <-- third-party library callbacks.\r\n... or when working with third-party library callbacks.'
2320,'chirayuk','set ng-app as personalLog\nwithout set ng-app as personalLog, this example can not work.'
2317,'IgorMinar','concepts.ngdoc typo\nAn event is a user **interaction**, timer event, or network event (response from a server).'
2311,'chirayuk','wording changes\nwording, a couple typos in http://code.angularjs.org/1.1.4/docs/api/ng.directive:ngAnimate'
2310,'matsko','ngAnimate to allow sync animations\nWhen it comes to animations, it is common to need to either have several animations start at the same time or one after each other. That goes for ngAnimate. Right now, it triggers both `enter` and `leave` (in the case of ngView) at the same time.\r\n\r\nWe can use a timeout on the `enter` to wait for the `leave` to finish but that\'s clearly quite buggy and not ideal.\r\n\r\nI think it would be nice to add a configuration in the ngAnimate to tell the animator if we want the `leave` to trigger the `enter` automatically when it\'s done. Something like:\r\n\r\n```<div ng-view ng-animate="{enter: anim1, leave: anim2, sync: true}"></div>```\r\n\r\nWhat do you think? Is that the way you\'d implement it?'
2298,'jbdeboer','Update animator.js\nfixed typo'
2294,'vojtajina','fix(ngPattern): allow modifiers on inline ng-pattern\nAdd support for regex modifiers on inline ng-pattern. `ng-pattern="/abc/i"`\r\n\r\nCloses #1437'
2288,'jbdeboer',"ngResource: fix cannot read property 'charAt' of null\nFixes issue when setting a default param as `null` error `TypeError: Cannot read property 'charAt' of null`"
2284,'IgorMinar','docs(jqLite): clarified that children/parent do not support selectors\nI was trapped by this. Especially since the documentation points to the jquery documentation it can be the source for bad headaches.'
2279,'IgorMinar','Some minor docstring corrections\n'
2277,'jbdeboer','[bug fix] Date formatting for ISODate string fails on Android 2.1 stock browser, #2275\nif "offset" is not specified, it messes up the calculations that follow. Apparently, it does not default to 0 in arithmetic context on some older browsers. '
2273,'vojtajina','feat(controller): support as instance syntax\nSupport `ng-controller="MyController as my"` syntax\r\nwhich publishes the controller instance to the\r\ncurrent scope.\r\n\r\nAlso supports exporting a controller defined with route:\r\n````javascript\r\nangular.module(\'routes\', [], function($routeProvider) {\r\n  $routeProvider.when(\'/home\', {controller: \'Ctrl as home\', templateUrl: \'...\'});\r\n});\r\n````\r\n\r\n\r\n## I think we should change the docs to recommend only single way of doing this. '
2259,'jbdeboer','http.js doc editing\nspelling, grammar, capitalization, etc.'
2254,'IgorMinar','fixed couple typos in api reference\n'
2241,'jbdeboer',"Update details on $locationProvider configuration\nDefault hashPrefix setting is not `'!'`, it's actually `null` at the moment."
2237,'vojtajina','chore(Grunt) update grunt-contrib-copy\ngrunt-contrib-copy@0.4.1 has the cleaner summary output by default.'
2236,'pkozlowski-opensource','docs(guide): Added missing closing div tag.\t\nAdded missing close div tag to example'
2229,'IgorMinar','fix a typo\n'
2227,'pkozlowski-opensource','docs(guide): Fixed typo in DI. angualar -> angular\nFixed typo in developer guide for dependency injection. \r\n\r\nangualar -> angular'
2223,'IgorMinar',"feat($q): added support to promise notification\nIt is now possible to notify a promise through deferred.notify() method. Notifications are useful to provide a way to send progress information to promise holders.\r\n\r\nAs there is many heavy async operation, I also see a increasingly need of reporting progress so user receive feedback. Currently, one of the best ways to cover this necessity is using callbacks. As AngularJS is based on Kris Kowal promise model, I propose the implementation of [Kris Kowal's Progress Notification feature](https://github.com/kriskowal/q#progress-notification).\r\n\r\nI've tried to follow both Kris Kowal and Angular $q philosophies. I know there is the necessity to update the DOCs, but I'd like to first discuss the implementation. As we get it done, I'll them update the docs and include in this PR.\r\n\r\nFirst of, although it's a big DIFF, most of the added lines are test cases. I'd like to know from core team if the test cases covers all necessities for such a feature. Also, explaining lightly, I added the method `.notify()` to the deferred, based on Kris Kowal's. This method is pretty simple and do pretty much the same thing as the original: **[call all callbacks in the nextTick](https://github.com/caiotoon/angular.js/blob/5192e973be316dcc66d3330fcbe2e9a1c054afe3/src/ng/q.js#L210-L224)**. \r\n\r\nSome of the points, tough, I had to make a decision regarding the behavior, and these are the points I'd like to discuss. The main one are:\r\n\r\n1. As `reject`, `notify` [does not defer the progress when receiving a promise](https://github.com/caiotoon/angular.js/blob/5192e973be316dcc66d3330fcbe2e9a1c054afe3/test/ng/qSpec.js#L423-L430) as argument, it simple notify the promise it received as is.\r\n2. [As Kris Kowal's test case](https://github.com/kriskowal/q/blob/master/spec/q-spec.js#L346-L369), we [do not save and re-emit progress notifications](https://github.com/caiotoon/angular.js/blob/5192e973be316dcc66d3330fcbe2e9a1c054afe3/test/ng/qSpec.js#L454-L465).\r\n3. [As Kris Kowal's](https://github.com/kriskowal/q/blob/master/spec/q-spec.js#L314-L344), we [do not notify after fulfillment or rejection](https://github.com/caiotoon/angular.js/blob/5192e973be316dcc66d3330fcbe2e9a1c054afe3/test/ng/qSpec.js#L386-L420).\r\n4. In case of error while notifying, [we stop notification in derived promises](https://github.com/caiotoon/angular.js/blob/5192e973be316dcc66d3330fcbe2e9a1c054afe3/test/ng/qSpec.js#L637-L646), although we still [call all parallel callbacks in the order they were registered with the original value](https://github.com/caiotoon/angular.js/blob/5192e973be316dcc66d3330fcbe2e9a1c054afe3/test/ng/qSpec.js#L573-L582).\r\n5. When using `$q.when()`, the listeners [are attached only on the nextTick](https://github.com/caiotoon/angular.js/blob/5192e973be316dcc66d3330fcbe2e9a1c054afe3/src/ng/q.js#L379-L391). This means that if the notification goes synchronous, we'll lose it, as we don't re-emit notification. Is this correct? Should we change promise behavior someway without braking any test?\r\n6. When using `$q.all()`, we do not await for all promises to notify, instead, [we defer the notification to `nextTick` and notify all notifications received](https://github.com/caiotoon/angular.js/blob/5192e973be316dcc66d3330fcbe2e9a1c054afe3/src/ng/q.js#L438-L448), passing [null if there was no notification for a specific promise](https://github.com/caiotoon/angular.js/blob/5192e973be316dcc66d3330fcbe2e9a1c054afe3/test/ng/qSpec.js#L978-L989), or [omitting the property in case of hashes](https://github.com/caiotoon/angular.js/blob/5192e973be316dcc66d3330fcbe2e9a1c054afe3/test/ng/qSpec.js#L1065-L1083). Is this behavior correct?\r\n\r\nThe reason why these are my main concerns, is because this defines the feature itself, and fixing in future might not offer backwards compatibility.\r\n\r\nPlease, tell me what you think. I tried to blend in as much as possible, also trying to add the minimum amount of new code as possible. And of course, feel free to deny this feature. I would just like to know the reason, in this case."
2208,'pkozlowski-opensource',"Fixed typo from 'ofter' to 'after'\n"
2205,'pkozlowski-opensource','Update controller.js\nImproved $controller function doc readability.'
2203,'jbdeboer',"fix(ngModel): use paste/cut events in IE to support context menu\nIn IE the model is not updated when the input value is modified using the context\r\nmenu, e.g. pasting from the clipboard, or cutting all or part of the current value.\r\nTo capture these changes, we bind to the proprietary 'paste' and 'cut' events.\r\n\r\nCloses #1462"
2202,'pkozlowski-opensource','Fixed typos (doc+src)\n'
2170,'mhevery','created new ngRepeat directive handling code\n'
2169,'IgorMinar','feat(ngSwipe): Add ngSwipeRight/Left directives to ngMobile\nThese directives fire an event handler on a touch-and-drag or\r\nclick-and-drag to the left or right. Includes unit tests and docs\r\nupdate.'
2168,'mhevery','feat(docs): Add Improve this doc link in each doc page, which links to t...\nAdded a "Improve this doc" button to each page in the generated documentation. The button links to Github for the file containing the doc, in Edit mode.\r\n\r\nAlso had to remove a done() call from gen-docs.js, because it wasn\'t working. Not sure if this was broken or something specific to my machine.\r\n\r\nPlease try this out before merging it in.'
2166,'pkozlowski-opensource',"error using services with the method get\nTell me if I wrong and sorry for my english....\r\n\r\nFor example if I have this: \r\n\r\n```javascript\r\nangular.module('listening.services', ['ngResource']).\r\n  factory('TestResource', function($resource){\r\n    return $resource('api/test/:action/:param', {}, {\r\n      getGroup: {method:'GET', params: {action: 'getGroup', param: '@groupId'}}\r\n    });\r\n  });\r\n```\r\n\r\nWhen I check the network in chrome the url who this services is calling is: \r\nhost.../api/test/getGroup?groupId=1\r\n\r\nwhen it's must be /api/test/getGroup/1"
2165,'mhevery',"fix(select): placeholder (empty option) is lost in IE9\nFixes a check inside render for select elements with ngOptions, which compares the selected property of an element with it's desired state.\r\nIn instances where no element should be selected, this resulted in the first option in the select element having it's selected attribute set from undefined to false.\r\nIn most browsers, this has the effect of displaying the first item in the list. In IE9 however, this causes the select to display nothing.\r\nIn other browsers this would still cause unnecessary changes in selected state, but no visible issue would manifest.\r\n\r\nCloses #2150, #1826"
2162,'mhevery','ngChildWindow directive\nngChildWindow allows a separate browser window to share the same scope as the parent window. \r\n\r\nhttps://groups.google.com/forum/?hl=en#!topic/angular/2szardRjAJg'
2161,'mhevery','Fix failing test in IE 10\nformSpec test\r\n- should prevent the default when the form is destroyed by a submission via a click event\r\n\r\nwas failing in IE10. \r\n\r\nThis was because of a check that was checking only for IE9, which has now been changed to include IE10, which behaves the same way.'
2156,'jeffbcross','Reopen Issue 152 - $resource().query() sometimes calls callback before returning data\nHello,\r\n\r\nI have been in some troubles recently with query callback being triggered before the data was fetch.\r\n\r\n```javascript\r\n$scope.productTypes = ProductType.query({}, function(){\r\n  //sometimes $scope.productTypes is empty here while it\'s available later in the process\r\n  if(typeof $routeParams.typeLoc === "string"){\r\n    var element = $filter(\'filter\')($scope.productTypes, {code:$routeParams.typeLoc})[0];\r\n    if(element){\r\n      $scope.searchValues.typeloc_id = element.id;\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nThanks.'
2155,'mhevery','$compile + ngRepeat + replace templates (fix #2151)\nCloses #2151'
2148,'mhevery','Fixing timeZoneGetter to fix for IST\nWhen using the Angular date filter for Indian Standard Time the output received was +5.530 rather than the expect +0530. This is because on Line 217 the hour part of the paddedZone definition is a decimal number (5.5) rather than an integer for most timezones. Fixed this by applying floor/ceiling based on whether the zone is positive or negative.'
2147,'IgorMinar','Fixes for PR 2017\n'
2144,'caitp','input[type="number"] is valid when not a number is entered in Chrome\nWhen entering invalid data into second field in Chrome - second is marked as pristine and valid which is incorrect.\r\nPossible Chrome bug - parser from numberInputType is not invoked when typing non-numerics in Chrome\r\n\r\n    <input type="text" ng-model="test">\r\n    <input type="number" ng-model="test">\r\n    {{test}}\r\n\r\nlive example: http://plnkr.co/edit/fULfvq?p=preview'
2141,'IgorMinar',"fix(*): do not rely on an object's hasOwnProperty \nAs noted by #1944, AngularJS currently relies in several places on an object's own `.hasOwnProperty()` method. This will break when said object does not inherit from `Object.prototype`, or when this key is redefined.\r\n\r\nThis patch is inspired by jQuery's approach to the problem.\r\n\r\n### Caveats\r\n\r\n* No tests for `Object.create(null)` were included, as they would break on old versions of IE; however, their practical effect is the same as redefining `hasOwnProperty` to `undefined`.\r\n* I only included tests for the main functions, as I felt that writing a test for every single instance where `hasOwnProperty` might be called would needlessly dilute the tests."
2132,'IgorMinar',"feat($filter): new date formats(timestamp, week in year, day in year)\nAdded new date formats to be used with date filter:\r\n- 'u': Unix timestamp in milliseconds as used in javascript\r\n- 'U': Unix timestamp (in seconds)\r\n- 'W': Week in year\r\n- 'D': Day in year"
2130,'mhevery','Pr1701\n'
2129,'auser','feat(input): Allow custom events and timeouts to trigger model updates\nBy default, any change on the content will trigger an immediate model update and form validation. With this PR you can override this behavior using the `ng-update-model-on` attribute to bind only to a comma-delimited list of events.\r\n\r\nI.e. `ng-update-model-on="blur"` will update and validate only after the control loses focus.\r\n\r\nIf you want to keep the default behavior and just add new events that may trigger the model update and validation, add "default" as one of the specified events.\r\n\r\nI.e. `ng-update-model-on="default,submit"`\r\n\r\nAlso, a `ng-update-model-debounce` attribute will allow defering the actual model update after the last triggered event. This feature is not available in radio buttons.\r\n\r\nI.e. `ng-update-model-debounce="500"` for 500ms\r\n\r\nCustom timeouts for each event can be set for each event if you use an object in `ng-update-model-on`. I.e. `ng-update-model-on="{default: 500, blur: 0}"`\r\n\r\nYou can specify both attributes in any tag so they became the default settings for any child control, although they can be overriden.\r\n\r\nCloses #1285'
2126,'pkozlowski-opensource','feat ($filter): add a boolean filter\nAdd a filter which converts raw data values into valid boolean values.'
2122,'chirayuk','docs(ngCloak) - Update the CSS rule with data-ng-cloak\nIn our project we had to add `[data-ng-cloak]` in order for it to work.\r\nIn this PR I also included other properties from the Angular.js source that should have a `display: none`.'
2121,'IgorMinar',"fix($location): correctly rewrite search params when html5 mode is enabled and not supported by browser\nThe conversion from html5 url to hashbang url failed to take into account search params if the path wasn't modified. I used the same test that the one used in the conversion of a hashbang url to an html5 url (https://github.com/tleruitte/angular.js/blob/master/src/ng/location.js#L67)."
2119,'pkozlowski-opensource',"Remove extranneous 'the' from injector docs\nJust a small grammar change."
2117,'mhevery','URI component check. Closes #2115\nAvoids AngularJS apps crashing when a malformed GET parameter is\r\nadded to the URL.'
2116,'mhevery','fix ($orderBy): fix orderBy filter to sort Date objects correctly\nRe-order the conditional statements in compare method to compare Date objects\r\ncorrectly. Since Date object does not equal Date object even the dates are the\r\nsame, so it can be safely assumed than one is not less than nor greater than\r\nthe other, it is the same as the other.\r\n\r\ntest\r\nhttp://jsfiddle.net/lvo811/hkbY3/'
2114,'mhevery','fix($location): parse FirefoxOS packaged app urls\nFirefoxOS uses special URLs like\r\napp://{d0419af1-8b42-41c5-96f4-ef4179e52315}/index.html for packaged Apps.\r\n\r\nCloses #2112'
2105,'IgorMinar','fix($http): ensure case-insens. header overriding\nIf user send content-type header, both content-type and default\r\nContent-Type headers were sent. Now default header overriding is\r\ncase-insensitive.\r\n\r\nAs per [RFC 2616](http://www.ietf.org/rfc/rfc2616.txt), "[header] Field \r\nnames are case-insensitive".\r\n\r\nBefore this fix, the following test would fail:\r\n\r\n``` javascript\r\nit(\'should override default headers with custom in a case insensitive manner\', function() {\r\n  $httpBackend.expect(\'POST\', \'/url\', \'messageBody\', function(headers) {\r\n    return headers[\'accept\'] == \'Rewritten\' &&\r\n           headers[\'content-type\'] == \'Rewritten\' &&\r\n           headers[\'Accept\'] === undefined &&\r\n           headers[\'Content-Type\'] === undefined;\r\n  }).respond(\'\');\r\n\r\n  $http({url: \'/url\', method: \'POST\', data: \'messageBody\', headers: {\r\n    \'accept\': \'Rewritten\',\r\n    \'content-type\': \'Rewritten\'\r\n  }});\r\n  $httpBackend.flush();\r\n});\r\n```'
2101,'pkozlowski-opensource','feat(directive): ng:keypress  New directives for binding to keypress eve...\nOriginal PR included on keyup/down. A number of comments suggested need for keypress.https://github.com/angular/angular.js/issues/1035#issuecomment-13647392'
2094,'IgorMinar','feat(Grunt) Switch from Rake to Grunt\nThis is the updated Grunt PR rebased onto the last few months of Angular progress. It also reflects the progress made to the Rake build during that time. See the initial PR #1544 for more details, discussion, improvements, etc. The build/tests/etc verified now works on Windows.'
2089,'IgorMinar','feat(ngRepeat): add count option to repeater expression\n`ngRepeat` expressions can now accept an optional count varaiable:\r\n\r\n    count for item in array\r\n    count for (key, value) in object\r\n\r\nThe count is a user-defined expression assigned to the `ngRepeat`\'s\r\nparent scope. An example of intended use:\r\n\r\n    <input type="text" ng-model="search">\r\n    <div>Showing {{itemCount}} of {{items.length}}</div>\r\n    <ul>\r\n      <li ng-repeat="itemCount for item in items | filter:search">\r\n        {{item.name}}\r\n      </li>\r\n    </ul>'
2085,'IgorMinar',"Treat range inputs the same as number inputs\nI've simply added range as to the list of input types that can be treated as a number type. It has the same properties (min, max) and should be capable of behaving exactly the same way.\r\n\r\nI'm not too comfortable with the docs/examples yet so I may have done something wrong. Please let me know if I need to fix anything.\r\n\r\n This fixes issue #1189"
2084,'jbdeboer','feat(http): set custom default cache in $http.defaults.cache\nWhen we need more control over http caching, we may want to provide\r\na custom cache to be used in all http requests by default.\r\n\r\nTo skip default cache, set {cache: false} in request configuration.\r\nTo use other cache, set {cache: cache} as before.\r\n\r\nSee #2079'
2083,'IgorMinar',"feat($resource): Added 'suffix' parameter to $resource routes\n-- Works with query (/resources.json)\r\n-- works with get (/resources/1.json)\r\n-- works with querystring parameters (/resources?color-blue)\r\n\r\nLet me know what I need to improve or if this is still wanted. Pretty sure it addresses [this pull request/issue as well](https://github.com/angular/angular.js/pull/1211)  \r\n\r\nNot sure if it's the best approach, but it works...."
2060,'IgorMinar','feat($resource): expose $promise and $response in promise-based api\nThis is a WIP to show a possible $resource promise-based api discussed in https://github.com/angular/angular.js/commit/dba6bc73e802fdae685a9f351d3e23c7efa8568a\r\n\r\nMain changes:\r\n * ```$promise``` and ```$response``` (http response) are exposed on resource instance object in addition to ```$then``` and ```$resolved```.\r\n * on success, the promise resolves to the same resource instance object filled with data. This is as expected to enable using it in resolve section of ```$route.when()```.\r\n\r\nArguably, ```$then``` and ```$response.resource``` are not needed anymore, what do you think?\r\n'
2059,'IgorMinar','feat(routing): Allow matching for case insensitive routes\nIn response to: https://github.com/angular/angular.js/issues/1383\r\n\r\nI added a function to the RouteProvider called caseSensitive to take a boolean value that can be taken into consideration when matching routes - the matching will either be case sensitive or not case sensitive, and defaults to case sensitive.\r\n\r\nI understand, from chad-configit@, if this is not the direction the AngularJS team would like to approach this.'
2054,'IgorMinar',"Being able to override url in resource actions\nA pull request already existed (https://github.com/angular/angular.js/pull/1890)\r\nbut i found out that the url set up in the action would not have their params replaced.\r\n\r\nThis is what I intent to do here:\r\n```javascript\r\n      var TypeItem = $resource('', {type: 'Order'}, {\r\n          get: {\r\n              method: 'GET',\r\n              params: {type: 'Customer'},\r\n              url: '/:type/:typeId'\r\n          }\r\n      });\r\n      var item = TypeItem.get({typeId: 123});\r\n```\r\nwill call `/Customer/123`"
2050,'IgorMinar',"Making element() selectors jQuery compatible\nChanging $document.find to angular.element permits more complex selectors when using jQuery.\xa0Otherwise\xa0you're limited to selecting only by ID's and element tags which is very restricting in the real life testing scenarios.\r\n\r\nThe fact that the current state of this library leaves users at mercy of selecting only by jQueryLite standards makes me think that: \r\na) no real e2e tests have been done\r\nb) people manually code id's where they shouldn't just to test\r\nc) people use something else for e2e tests."
2020,'IgorMinar',"fix(ngClass): keep track of old ngClass value manually\nngClassWatchAction, when called as a $watch function, gets the wrong old\r\nvalue after it has been invoked previously due to observation of the\r\ninterpolated class attribute. As a result it doesn't remove classes\r\nproperly. Keeping track of the old value manually seems to fix this.\r\n\r\nFixes #1637"
2011,'vojtajina','Quick quote style fix in directive doc.\nUsing double quotes to maintain consistency with other HTML in the documentation.'
2008,'IgorMinar',"persistent cookies / added expiration date to cookies\nIf you do not set the cookie's expiration, the cookie is created but it is not stored on the user's hard disk. Instead, the cookie is maintained as part of the user's session information. When the user closes the browser, the cookie is discarded. \r\n\r\nI added the optional expiration-date to the cookie creation.\r\n\r\nThis is my first pull request. \r\nI have not done any testing - but i hope i can make a start with this."
2006,'mhevery','Basis for animations in angularjs\nThis is a pull request to merge the basic API hooks that provide animations for ngRepeat into AngularJS master.\r\n\r\nFor review only as of now.\r\n- No tests are complete yet.\r\n- No docs are complete yet.'
1997,'IgorMinar','chore(Rakefile): paralelize the build on Travis\nnow that the forking issue is solved we can run regular build there\r\n\r\nhttps://github.com/travis-ci/travis-ci/issues/845'
1992,'IgorMinar','fix(numberFilter): fix formatting when "0" passed as fractionSize\nWhen checking to add decimal and trialing 0s number filter checks trueness of fractionSize. "0" evaluating to true causes "123" to return "123."'
1983,'IgorMinar','docs($resource): fix bad indentation producing a code block\nFix bad indentation producing a code block on the api/ngResource page: http://docs.angularjs.org/api/ngResource.$resource\r\n\r\nI signed the CLA (Cédric Soulas)'
1966,'IgorMinar','In filters, use isArray instead of instanceof\nUse the built-in isArray instead of "instanceof Array". \r\nIn the **node-webkit** framework, arrays may be created in the Node.js context, and for those arrays "instanceof Array" will return false, because the Array object of the browser context is a different reference. Using "Array.isArray" or the AngularJS function isArray fixes the problem.'
1958,'IgorMinar','feat(directive): ng:switch\nAdded the ability to handle multiple matches on ng:switch-when and ng:switch-default\r\n\r\nCloses #1074'
1956,'pkozlowski-opensource','docs(module): fix code example\n- fix typo: replace the period with a semicolon\r\n- add a couple semicolons'
1952,'IgorMinar',"feat($http): allow overriding the XSRF header and cookie name\nAdd 'xsrfCookie' and 'xsrfHeader' property to $httpProvider.defaults and http\r\nconfig object, which give the name of the cookie the XSRF token is found in,\r\nand the name of the header it is sent in, respectively.\r\nThis allows interop with servers with built-in XSRF support that use different\r\nnames.\r\nThe defaults match the current hard-coded values of 'XSRF-TOKEN' and\r\n'X-XSRF-TOKEN'."
1950,'IgorMinar','fix($compile): rename $compileNote to compileNode\nDirectives was observing different instances of Attributes than the one that interpolation was registered with.\r\n    \r\nCloses #1941'
1939,'pkozlowski-opensource','Update src/Angular.js\ntypo'
1938,'IgorMinar','fix(forEach): refined treatment of objects with numeric length property\nfixes #1840\r\nto iterate the object like an array, it must verify one of these rules:\r\n- it comes from jquery so it must have at least a context property\r\n- every other property is a number between 0 and the value of\r\nlength property\r\n'
1914,'IgorMinar','Tighten up a few spots to run on SES\nwindow.Error is a read-only property under Caja, so assigning to it fails.  Igor also says it was hurting after gzip.\r\n\r\nAssigning to undeclared globals is prohibited in Caja (and ES5 strict mode) so I added "var"s at the beginning of some "element = ..." statements.'
1904,'IgorMinar','Update src/ng/rootScope.js\nMinor argument fix to`$rootScope.$on()` docs'
1887,'IgorMinar','feat(sanitize): added support for skype links\nReference - http://developer.skype.com/skype-uri'
1885,'pkozlowski-opensource','Update src/ng/directive/a.js\nEscape sample code in ng a directive.'
1877,'pkozlowski-opensource','Update src/ng/directive/a.js\nEscape this sample code:\r\n\xa0\xa0<a href ng-click="model.$save()">Save</a>'
1876,'btford','fix(IE8+JQuery): "Object doesn\'t support this property or method" on route change\nNot sure of the detailed route cause on this one yet, but Angular 1.1.2 seems to have a regression around the `$routeChangeSuccess` event when used on IE8 w/ JQuery . While the update() method is running, it bombs out while calling     \r\n\r\n    element.contents().data(\'$ngControllerController\', controller);\r\n\r\nJSFiddle showing the issue:\r\n<http://jsfiddle.net/HsQRN/6/>\r\nNote that the new route doesn\'t load correctly, and that there is a console error. Works fine with 1.0.4, or without JQuery.\r\n\r\n**Edit:** Updated the JSFiddle'
1849,'IgorMinar','feat($compile): Allow using functions as templates in directives\nAdded dynamic template support in directives:\r\n- The call will include the directive attributes common object as a parameter\r\n- This allows generating templates on the fly\r\n- It also applies to templateUrl\r\n\r\nCloses #1039 '
1848,'pkozlowski-opensource','docs(angular.element): fix typo\n'
1835,'vojtajina','feat(httpBackend) Patch for Firefox bug w/ CORS and resonse headers\nA workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=608735\r\nIn FF getAllResponseHeaders() returns null if the request is the result of CORS.\r\n\r\nTried to format the code so that when a FF patch is released and gains enough\r\ntraction it can easily be selected and deleted. Heavily inspired by jQuery\'s\r\npatch for the same bug. This patch falls short of passing through custom headers\r\nbut covers all of the "simple response headers" in the spec at\r\nhttp://www.w3.org/TR/cors/\r\n\r\nCloses #1468'
1829,'mhevery','[issue1797] Adding ng-open directive\n'
1824,'mhevery',"Update src/ng/exceptionHandler.js\nHere's an initial attempt at documenting how one might write a\r\ntest using\xa0$exceptionHandlerProvider. The key take-away is the use\r\nof this pattern:\r\n\r\n    it(...\r\n\r\n    \xa0module(...\r\n    \xa0 \xa0$exceptionHandlerProvider.mode('log');\r\n    \xa0});\r\n\r\n    \xa0inject(...\r\n    \xa0);\r\n\r\n    });"
1812,'btford',"built with angularjs does not render correctly on IE9\nhttp://builtwith.angularjs.org/ does not render on IE9 9.0.1 64-Bit Edition\r\n\r\nIE9 has a reasonable browser market share and if people are looking to evaluate the angularjs framework then a page not rendering on IE9 is going to put them off, especially on the 'built with' page.\r\n\r\n![builtwith](https://f.cloud.github.com/assets/3152937/67404/5c31abd0-5efe-11e2-8524-7ceb25582416.png)\r\n"
1809,'petebacondarwin',"An isolated-scoped-directive's ng-transclude loses parent scope when inside of an ng-repeat.\nThe fiddle: http://jsfiddle.net/nCfBA/\r\n\r\nTo reproduce in short: 1) transcluded element needs to reference something in its parent scope, 2) directive's template needs to transclude inside of an ng-repeat. The transcluded element cannot read its original parent scope.\r\n\r\nIf included outside of the ng-repeat it can read the value in the parent scope (as one would expect).\r\n\r\nI posted this to a google group (https://groups.google.com/forum/#!topic/angular/az8_uNV7KyE) but was directed to post it as a possible bug.\r\n\r\nI don't mind trying to tackle and fix this, but I really have no idea where to start looking."
1793,'IgorMinar','fix(ngSwitch): not leak when transcluded and cloned\nThe leak can occur when ngSwich is used inside ngRepeat or any other\r\ndirective which does not attached transcluded content to DOM but clones\r\nit.\r\n\r\nRefactor ngSwitch to use controller instead of storing data on compile\r\nnode.\r\n\r\nCloses #1621'
1788,'IgorMinar','Support modifying the DOM structure in link function of a directive\nBackport of the fix to 1.0.x.\r\n\r\nSee https://github.com/angular/angular.js/pull/1773'
1780,'davidjnelson','Null filter not returning anything: filter:{category:null}"\nDataset:\r\n```javascript\r\n$scope.objs = [{name:\'obj1\', category:null}, {name:\'obj2\', category:null}, {name:\'obj3\', category:null}, {name:\'obj4\', category:1}, {name:\'obj5\', category:1}, {name:\'obj6\', category:1}, {name:\'obj7\', category:2}, {name:\'obj8\', category:2}, {name:\'obj9\', category:2}];\r\n```\r\n\r\nWhen i create an ng-repeat like this it returns the expected subset:\r\nng-repeat="obj in objs | filter:{category:1}"\r\n\r\nBut when i do this it does not show anything: (search for null instead of 1)\r\nng-repeat="obj in objs | filter:{category:null}"\r\n\r\nThis behaviour has been tested in 1.1.1 and 1.0.1 on chrome 23.0.1271.97 and IE9.\r\n\r\nPlnkr and jsfiddle demo\'s:\r\nhttp://plnkr.co/edit/jgfPPE\r\nhttp://jsfiddle.net/KQYMY/17/'
1775,'mhevery',"ngResource was incorrectly removing leading slash when param was followed by a non-slash character\n...tly removing leading slash when param was followed by a non-slash character.\r\n\r\nEx:\r\n'/:foo/:bar.baz/:aux'\r\n\r\nparams = {\r\n  foo: 'aaa',\r\n  bar: undefined,\r\n  aux: undefined\r\n}\r\n\r\nThe above params were incorrectly producing '/aaa.baz' but now it results in '/aaa/.baz'."
1760,'mhevery',"feat(filter): Add strict option to filter\nAdd an optional strict option to $filter('filter')(array, expression,\r\nstrict) such that when strict is true an equal comparision is made\r\ninstead of substring."
1756,'pkozlowski-opensource',"doc(guide): In DI, add missing greet method to greeter service in $scope...\ndoc(guide): In DI, add missing greet method to greeter service in $scope.sayHello\r\n\r\nMyController defines a $scope.sayHello function to demo the greeter service. But the actual greet method was omitted in the example code. Now instead of greeter('Hello World') we call greeter.greet('Hello World') to match the object returned from the greeter factory."
1747,'chirayuk','Localization file for angular-locale_sr-latn-rs.js\nLocalization file for "angular-locale_sr-latn-rs.js" is currently wrong (same as sr-cyrl.rs). It should be like this:  http://qusion.net/contr/angularjs/angular-locale_sr-latn-rs.js\r\n\r\n'
1746,'btford','"Wire up a Backend" example shows errors for empty form.\nIf You click (+) button on the "Wire up a Backend" example it shows empty forms with errors, I believe empty form should be shown without errors. Errors should be shown only if user already type something wrong in the field (for this field only) or click submit button (for all wrong fields).\r\n\r\nI know that it\'s just a tiny sample, but such small nuances are important to get informat details about how to build real applications with angularjs.\r\n\r\n![](https://f.cloud.github.com/assets/94196/32405/d6518df8-5013-11e2-953d-f77347cd7d6e.png)\r\n\r\nP.S. Also, if You click "Edit" button - for a short time empty form is shown (while fetching data via AJAX request) and only then fields is filled with values. I believe it should show progress or make form somehow disabled until the data is fetched.'
1722,'pkozlowski-opensource','English corrections to doco\n'
1710,'IgorMinar','Improvements for Closure Compiler compilation\nSyntax fixes helpful for compiling with Closure Compiler advanced optimizations. Even if Closure Compilation is not eventually achieved or is not a goal, it is helpful static analysis to find problems in the code or documentation.'
1701,'IgorMinar',"feat($http): promise-based request interceptors\nCurrently there is no easy way to globally intercept requests sent with $http – similar to the way responses can be intercepted with response interceptors. Furthermore, there are many legitimate scenarios and use-cases where the need for request interception arises; for example\r\n\r\n* if security tokens, parameters or headers need to be calculated for each individual request\r\n* for collecting statistics like request counts, measuring turnaround times etc.\r\n* for dynamic, client-side redirects (e.g., rewrite /api/x to /api/experimental/x for resource x but not resource y)\r\n\r\nPlease see #929 for a further discussion (and use-cases) on this topic.\r\n\r\n## Implementation\r\n\r\nThe request interceptor registration works exactly like the registration of response interceptors (in fact, I have put this into a separate routine to make it more explicit). If request interceptors are present, they are prepended to the promise chain returned by $http – this was mostly devised and written by @splondike – this gives the interceptors a lot of flexibility and fits very well into the Angular API.\r\n\r\n## Tests and Documentation\r\n\r\nThis pull requests includes both tests and documentation of the new feature.\r\n\r\nA note on testing: a separate call to $rootScope.$apply is necessary to test the interceptors with the mocked http backend.\r\n\r\n## Example\r\n\r\n    // register interceptor using an anonymous function\r\n    $httpProvider.requestInterceptors.push(function() {\r\n      return function(promise) {\r\n        return promise.then(function(config) {\r\n          \r\n          // the config object will be used by the actual request\r\n          // you can modify it here\r\n          \r\n          config.url = '/intercepted/' + config.url;\r\n\r\n          // return the config object to pass it on to the next interceptor\r\n          return config;\r\n          \r\n          // if you reject the promise, the promise\r\n          // returned by $http will be rejected\r\n        };\r\n      };\r\n    });\r\n\r\n## Compatibility\r\n\r\nWhen no request interceptors are registered, no promises are prepended to the chain. Therefore, this feature should be completely backwards compatible – if you register not interceptors everything stays the same."
1675,'IgorMinar','$location support for pushState\nI am using this to good effect in an application now. Let me know if you want to pull and I will write some tests.'
1653,'pkozlowski-opensource','feat(limitTo): limitTo filter accepts strings\nThis allows strings to be filtered by limitTo, using the same methods\n\nCloses #653'
1640,'IgorMinar','fix(ngResource): Add suport for nested params\nAllow ngResource to properly construct a query string for params which\nhave objects or arrays as values.'
1627,'IgorMinar',"Angular 1.0.3 breaks directives using ng-transclude\nng-translude for directives is broken in angular 1.0.3. It seems to be related with the fix for issue #1313 \n\nChanging view using $location from a view that uses a directive with transcluded content throws:\nTypeError: Cannot read property '$$childHead' of null\n\nTake a look at this simple snippet:\nhttp://jsfiddle.net/JJt3u/\n\n\nSnippet fails in Chrome 23.0.1271.64, and Firefox 17.0\n"
1624,'petebacondarwin','select multiple bound to multiple initial options is broken\nPlease see http://jsfiddle.net/P5WW7/ for a demonstration of the bug.'
1621,'IgorMinar',"ngSwitch directive leaks when inside transcluded content\nngSwitch leaks when inside transcluded content. This is because it associates its data during the compile phase of the template. \n\nelement.data(NG_SWITCH, cases);\n\nThe template is then cloned for rendering, and as the clone doesn't include  the jQuery expando property a leak occurs when the rendered content is removed."
1620,'IgorMinar',"ngInclude leaks if template contains comments\nThe ngInclude directive leaks if your template contains comments. For some reason Angular seems to associate random scope objects with comments. When jQuery.cleanData is eventually called it performs a getElementsByName('*'). As comment nodes and text nodes are not included in this selector the scopes associated with the comments are not cleared. Also, due to scope prototype inheritance, all parent scopes are also leaked."
1617,'mhevery','feat($parse): allow strict equality in angular expressions\nAllows the parser to parse strict equality and inequality in angular expressions. \r\n\r\nCloses #908\r\n\r\n'
1600,'btford','ARIA support on directives and angular JS\nHi,\n    Is it possible to get explicit ARIA documentation and support on existing directives and angular apps (ngrepeat, ngshow, nghide etc). Since most of these change the content of the html it should require some framework support to add the correct role so that screen readers can pick it up.\n\nIf some stuff already works it might be worth documenting it. Google is pretty big on accessibility as is obvious from sites like gmail etc. but this should be added to frameworks as well.'
1574,'pkozlowski-opensource','FormController.$removeControl is not called on destroy when jQuery script is loaded before Angular\nIn case when form contains ng-repeat and ng-switch form controls on swich/destroy FormController.$removeControl is not called when jQuery script is included before Angular script.\r\nExample code available here http://plnkr.co/2LRqYQ '
1571,'tbosch',"Change ngClick to use event delegation instead of standard events\nI'm sure that this has been talked about before, but I'm wondering why event delegation hasn't been used for some of the main angular DOM events such as onClick, onDblClick, onMouseDown, onMouseUp, etc...\r\n\r\nIf we delegate each of these events then there would be a nice performance upgrade for angular since each of the ngEVENT directives won't have to register their own copy of the DOM event.\r\n\r\nThis can be done by having one event for each type and then figuring out the in betweens with some JavaScript CSS selectors and scope checking.\r\n\r\nI forked over the code, installed the test dependencies and looked around in the repo to find where the onClick directive is set. So far so good, however, turns out that jQLite (the angular one) doesn't include the .delegate (or .live) jquery function in it.\r\n\r\nI'm sure I could get this to work since and if anything doesn't work then it looks like there is plenty of test specs to catch the bug(s).\r\n\r\nSo could we start by adding `element.delegate` to JQLite?"
1548,'mhevery','JSONP requests with the same callback name\nInstead of use JSON_CALLBACK to jsonp requests (and angular.callbacks_X callbacks), using JSON_SINGLE_CALLBACK to use always the same callback name (useful to caching)'
1547,'mhevery','Resource promise\nAdded promise properties $q and $resolved to resource object.  \r\n\r\nI put in some unit tests to make sure the properties are behaving as expected for get, query, save and delete operations.'
1544,'IgorMinar',"feat(Grunt) Switch from Rake to Grunt\nMigrates the Angular project from Rake to Grunt.\r\n\r\n### Benefits:\r\n- Drops Ruby dependency\r\n- Lowers barrier to entry for contributions from JavaScript ninjas\r\n- Simplifies the Angular project setup and build process\r\n- Adopts industry-standard tools specific to JavaScript projects\r\n- Windows support for the build and end-to-end tests\r\n\r\n### BREAKING CHANGE:\r\n Rake is completely replaced by Grunt. Below are the deprecated Rake tasks and their Grunt equivalents:\r\n\r\n- rake --> grunt\r\n- rake package --> grunt package\r\n- rake init --> N/A\r\n- rake clean --> grunt clean\r\n- rake concat_scenario --> grunt build:scenario\r\n- rake concat --> grunt build\r\n- rake concat_scenario --> grunt build:scenario\r\n- rake minify --> grunt minify\r\n- rake version --> grunt write:version\r\n- rake docs --> grunt docs\r\n- rake webserver --> grunt webserver\r\n- rake test --> grunt test\r\n- rake test:unit --> grunt test:unit\r\n- rake test:<jqlite|jquery|modules|e2e> --> grunt test:<jqlite|jquery|modules|end2end|e2e>\r\n- rake test[Firefox+Safari] --> grunt test --in=[Firefox,Safari]\r\n- rake test[Safari] --> grunt test --in=[Safari]\r\n- rake autotest --> grunt autotest\r\n\r\n### NOTES:\r\n- For convenience grunt test:e2e starts a webserver for you, while grunt test:end2end doesn't.\r\nUse grunt test:end2end if you already have the webserver running.\r\n- Removes duplicate entry for Describe.js in the angularScenario section of angularFiles.js\r\n- Updates docs/src/gen-docs.js to use #done intead of the deprecated #end\r\n- Uses grunt-contrib-connect instead of lib/nodeserver (removed)\r\n- Removes nodeserver.sh, travis now uses grunt webserver\r\n- Built and minified files are identical to Rake's output, with the exception of one less\r\ncharacter for git revisions (using --short) and a couple minor whitespace differences\r\n\r\nCloses #199"
1535,'mhevery','feat(noConflict): restore previous namespace\nAngular needs to provide a way to restore the previously defined `angular` global namespace to prevent conflict with existing scripts. This is especially important if there are multiple versions of angular loaded onto the same page. If angular is used in a thirdparty javascript environment it should provide a way to clean up the global after loading. \r\n\r\nThis feature is similiar to the jQuery [noConflict](http://api.jquery.com/jQuery.noConflict/) function. '
1533,'pkozlowski-opensource',"Docs: http://docs.angularjs.org/api/ng.filter:date 'Z' example in format strings is incorrect\n<http://docs.angularjs.org/api/ng.filter:date>\r\n\r\n`'Z': 4 digit (+sign) representation of the timezone offset (-1200-1200)`\r\n\r\nshould probably be something like:\r\n`'Z': 4 digit (+sign) representation of the timezone offset (+1200 or -1200)`\r\n\r\nnotice the + sign example, whereas the current version shows - twice"
1528,'mhevery',"feat($parse+Scope): smarter handling of constant expressions\nThis patch adds two properties to functions returned by `$parse`: literal and constant.\r\n\r\n* `literal` is set to true if the expression's top-level is a JavaScript\r\n      literal (number, string, boolean, null/undefined, array, object), even\r\n      if it contains non-literals inside.\r\n* `constant` is set to true if the expression is known to be made\r\n      entirely of constant values, i.e., evaluating it will always yield the\r\n      same result.\r\n    \r\nA consequence is that a JSON expression is guaranteed to be both literal and constant.\r\n\r\nThen, `Scope.prototype.$watch()` checks for `constant`, and won't keep it in the watchers list, meaning this expression is evaluated only once rather than needlessly evaluating it on every `$digest` cycle. For this reason, this also solves issue #1376."
1524,'mhevery',"feat($routeProvider): Allow using functions as template params in 'when'\nThis pull-request allows using custom functions when assigning templates in $routeProvider.when() method.\r\n\r\nThe new functionality could be used to generate templates on the fly based on the route parameters. Also, if used in templateUrl, the particular template URL that gets loaded can be customized.\r\n\r\nP.S. I've just signed the CLA."
1474,'mhevery',"Fix JQLiteClone in IE7/8\nAddresses Issue #1381, wherein non-native HTML elements receive an\r\nempty namespace when used within directives on IE7/8.  For example,\r\n`<nav></nav>` renders as `<:nav></:nav>`, which prevents the tag\r\nfrom being styled.\r\n\r\nThe root cause is the use of `cloneNode` within `JQLiteClone`.  Even\r\nwith an HTML5 polyfill, early versions of IE are unable to clone\r\nnon-native elements without adding this 'empty' namespace.\r\n\r\nThe solution, as seen in the corresponding `clone` function in full\r\njQuery, is to use innerHTML upon another established element to create\r\nthe clone."
1460,'tbosch',"Form model doesn't update on autocomplete\nI'm having problems with Safari 6.0 auto-complete on some simple forms \r\non Angular 1.0.2. \r\n\r\nWhen Safari uses auto-complete to fill in the form, Angular seems to be \r\nunaware of the new characters that were entered by auto-complete.   \r\nPlease see the attached image for an example. \r\n\r\nTo reproduce: \r\n1) Enter data into the form a few times so that auto-complete is activated. \r\n2) Then enter a few characters that triggers an auto-complete. \r\n3) Hit return. \r\n4) Compare the alert message with the contents of the input field. \r\n\r\nI've created a jsFiddle that can be used to reproduce the problem: \r\nhttp://jsfiddle.net/msgilligan/5cynT/ \r\n\r\nI've seen a similar problem when Safari 6.0 or Chrome 22.0.1229.79 \r\nautomatically fills in a password field that has a 'required' \r\nattribute.  The form is not marked as valid and I have to go enter a \r\nspace after the password and then delete it. \r\n"
1459,'caitp','Directive fails to insert/replace html when template root element is table row (tr)\nIn an attempt to automate some common table layouts I created a directive that emits the `<tr> ...</tr>`, including the table cells.\r\n\r\nWhen this directive is applied, angular throws an exception indicating that the template does not have a single root element (it does).\r\n\r\nWhen `replace` is set to `false`, this issue does not occur -- but the resulting markup will be invalid.\r\n\r\nI suspect that the problem is partially due to the browser "cleaning up" the table HTML and moving unrelated or unknown tags outside of the table -- while preventing table tags from being inserted/replaced at the desired location.\r\n\r\nExample\r\n------------\r\nUrl: http://jsfiddle.net/phaas/sL9gM/\r\n\r\n```html\r\n<div ng-app="tables">\r\n    <table>\r\n        <row key="x" value="y"></row>\r\n        <row key="1" value="2"></row>\r\n        <row key="longer" value="very long!"></row>\r\n    </table>\r\n</div>\r\n```\r\n\r\n```javascript\r\nangular.module(\'tables\',[])\r\n    .directive(\'row\', function() {\r\n        return {\r\n            restrict: \'E\',\r\n            replace: true,\r\n            scope: { key: \'@\', value: \'@\' },\r\n            template: \'<tr><td>{{key}}</td><td>{{value}}</td></tr>\'            \r\n        }\r\n    });\r\n```\r\n\r\n\r\n\r\nStack Trace\r\n----------------\r\n\r\n```\r\nError: Template must have exactly one root element. was: <tr><td>{{key}}</td><td>{{value}}</td></tr>\r\n    at applyDirectivesToNode (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js:4010:21)\r\n    at compileNodes (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js:3790:14)\r\n    at compileNodes (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js:3795:14)\r\n    at compile (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js:3735:29)\r\n    at http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js:932:9\r\n    at Object.Scope.$eval (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js:7808:28)\r\n    at Object.Scope.$apply (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js:7888:23)\r\n    at http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js:930:13\r\n    at Object.invoke (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js:2788:25)\r\n    at bootstrap (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js:928:12) \r\n```'
1450,'jeffbcross','ngView should register data element \'$ngViewController\' rather than \'$ngControllerController\' on the DOM node\nThis way, we could have a directive that `require`s "ngView", and have what it expects, instead of require="ngController" when you have no such directive in your app.\r\n\r\nIf there is a reason to keep ngController, then could we register *both*.  That is done at line 150 of src/ng/directives/ngView.js in the current Git repo.'
1418,'IgorMinar',"AJAX cache problem with $resource in IE8 \nInternet Explorer 8 caches AJAX requests.  When this caching operates, a GET request will not even it the server; IE simply generates its own 304.  This bizarre design choice causes serious problems.  More details here: http://stackoverflow.com/questions/1013637/unexpected-caching-of-ajax-results-in-ie8\n\nWhen using jQuery AJAX calls, the problem can be solved with the following configuration command:\n\n$.ajaxSetup({ cache: false });\n\nThis does not seem to work when using $resource, presumably because $resource does not use the jQuery AJAX functionality.  It seems that $resource needs a no-cache mode which, under IE8, would append a timestamp query parameter to prevent unwanted caching.\n\nA fix or elegant workaround would be appreciated!  We would love to tell our customers to drop IE8, but it turns out that the judicial system forces them to use IE8, so we're kind of stuck."
1402,'mhevery',"fix($resource) Route constructor, updated RegExp\nUpdate RegExp to allow urlParams with out leading slash (/).\n- Will allow reoucese to be loaded from a relative path\n\nExample:\nvar R = $resource(':path');\nR.get({ path : 'data.json' });\n\nExample usage:\nLoad resources in applications not using webserver, ie local webapp in on a tablet."
1364,'IgorMinar',' $http config.param expands array values properly.\nToday, calling e.g. $http(url, { params: { a: [1,2,3] } }) results in a query\nstring like "?a=%5B1%2C2%2C3%5D" which is undesirable. This commit enhances\nbuildURL to createa query string like "?a=1&a=2&a=3".\n\nFixes #1363.'
1362,'vojtajina','tests for isXXX function \n- isBoolean function is already existing. However, no comment, so add comment\n- add testing for isXXX functions\n- use === and !== to replace == and != in isXXX functions'
1313,'IgorMinar','nested ng-repeat causes memory leak\nThis has been confirmed in Chrome 21.0.1180.82\n\nhttp://jsfiddle.net/LEWmd/54/\n\nUsing an ng-repeat within an ng-repeat cause a memory leak and eventually the window will crash.'
1310,'mhevery','Add dblclick method to the ngSecenario dsl\nI wanted to write a test to check that an action happens when a user double click on a element. It looks like the angular-scenario dsl does not provide any method for that.  \n\nWith the new dblclick method I can write the test as: \n\n```coffeescript\n  describe "Edit property", ->\n    it "should display the input field after double clicking on a property value", ->\n      expect(element("[name=\'Account\'] li").attr("class")).toBe "ng-scope"\n      element("[name=\'Account\'] div").dblclick()\n      expect(element("[name=\'Account\'] li").attr("class")).toBe "ng-scope editing"\n```'
1307,'IgorMinar',"Can't access ng-controller inside of a template transluded by a custom directive\nI need to use a Controller scope inside a custom directive which doesn't work:\r\n\r\nhttp://plnkr.co/edit/30MrSh?p=preview\r\n\r\nHowever, putting it outside of the custom directive worked:\r\n\r\nhttp://plnkr.co/edit/g7nQ2x?p=preview\r\n\r\nRelated: https://groups.google.com/forum/?fromgroups=#!topic/angular/_cjJaJPWzww"
1272,'vojtajina',"$timeout() doesn't update the model\n$timeout() doesn't update the model in this demo while $apply() does.\n\nhttp://plunker.no.de/edit/PV2Dzv?live=preview\n\nReally weird behaviour."
1264,'IgorMinar','fix(ngClassOdd/Even): proper update with filtering/ordering\nRelated to the issue #1076'
1263,'btford','Provide a link for cookbook\nThis link http://docs.angularjs.org/cookbook/index can be found in the last chapter of the tutorial.\n\nPlease put a link to it in the Develop menu.'
1262,'jeffbcross',"Angular doesn't add ng-binding class\nInside of `ngRepeat` especially, the `ng-binding` class isn't always added. This is especially important for Batarang, as currently `show bindings` only shows a small subset of the actual bindings."
1242,'mhevery','feat(jqLite): add prev()\n'
1241,'tbosch','ng-include fails on older mobile devices\nThis issue is seen in below devices \n    >> HTC DROID incredible - Android 2.3.4 \n    >> LG P500 - Android 2.2.1 \n    >> Samsung intercept - Android 2.2.1 \n    >> HTC Thunderbolt - Android 2.3.4 \n    >> Motorola Atrix - Android 2.2.1 \n    >> Amazon Kindle Fire \n    >> iPad - IOS 4.3.4 (8K2) \n\nUsing Firebug Lite 1.2 I can see that Angular is initializing and the correct routes are being followed. \nThe first time the application is loaded  ng-include works correctly, browser refresh works too. \nOnce the tab or window is closed, subsequent load/refresh operations will not trigger the ng-include. \n\nClearing the cache, or updating the manifest file also allow ng- include to work correctly as above. \nI removed the conditional loading of controllers as a dependency, but the issue persisted. \n\nThe following github can be used to replicate the issue. It requires a server that can properly set the mime-type for cache.manifest files. \n\nhttps://github.com/cmelion/angular-yepnope \nexample path:  http://localhost:8080/yepnope/modules/generic-app-module/ \n'
1216,'pkozlowski-opensource',"angular + jquery: memory leaks in IE8\nWhen using angular with jquery and setting up route navigation, scope object(-s) leaks in IE8 (hasn't been tested in IE9) when switching between views.\n\nPlease see http://jsfiddle.net/ADukg/467/\n\nNotes:\n- view that leaks should contain ngModel directive;\n- when removing jquery, the sample above doesn't leak;\n- i am using window.CollectGarbage() to enforce IE to collect garbage."
1147,'mhevery','Add support to Catch-All routes\nIt allows to accept routes like `edit/color/:color/largecode/*largecode` to match with something like this \n`http://appdomain.com/edit/color/brown/largecode/code/with/slashs`.\n\n**I really need it because my app ids contains slashs.**'
1128,'jeffbcross','support sub-expressions for for ng-options\nMy object looks like this:\n\n    var opts = {\n      Group1: {\n        val1: \'Help Text here\', \n        val2: \'Help Text here\'\n      }, Group2: {\n        val3: \'Help Text here\', \n        val4: \'Help Text here\'\n      }\n    }\n\nI wanted to use:\n\n    ng-options="(k for (k,v) in list) group by g for (g,list) in opts"'
1122,'mhevery','Issue 1101: Allow startingTag method to handle text / comment nodes\nFix for issue https://github.com/angular/angular.js/issues/1101\n\nPlease take a look and see if this was the problem being discussed.\n\nShyam'
1108,'IgorMinar',"Introduce NgError\nFirst change for https://github.com/angular/angular.js/issues/1041\n\nChanges include:\n\n- Introduces a NgError class which extends Error and does String Interpolation\n- Tests for the same\n- Switch over to using NgError with interpolation throughout instead of the current string concatenation method\n\nFew doubts:\n- NgError - SHould I define it as it is or create a provider for it? I don't think I like the provider theme for this particular object that is followed for the rest of the objects in the ng codebase, but your call.\n- Documentation - Anything else I need to document? ANy particular format?"
1066,'mhevery',"fix($http): lowercase keys of headers when headers is an object.\nCan't get header value because the keys are not lowercased. I guess this is a bug."
1064,'mhevery','Appends slashes to urls\nAngular intenionally removes slashes from urls defined in ngResource and this causes bugs and problems in frameworks like django. It simply *adds* slashes to urls for it work.'
1058,'vojtajina',"Uncaught TypeError: Cannot read property 'nodeName' of undefined angular.js:5356\nThis bug is triggered when say a ng-click removes the node from the dom and you use $location service\n\nClick on the button at http://jsfiddle.net/ADukg/258/\n\nUncaught TypeError: Cannot read property 'nodeName' of undefined angular.js:5356\n(anonymous function) angular.js:5356\nf.event.dispatch jquery.min.js:3\nf.event.add.h.handle.i\n\nThis was working fine in say rc12 http://jsfiddle.net/ADukg/259/\n\n"
1045,'mhevery',"Extended customizability of $resource\nAdded an option to $resource's `action` parameters.  The user can define a custom httpConfig and a custom parseResponse function.  These allow the user to work with a lot more systems (sending custom headers through action.httpConfig and parsing weird responses with parseResponse).\n\nExample use case.  these additions let me use www.parse.com and $resource together easily.\n```javascript\nvar myHttpConfig = { headers: myHeaders }; //Our pre-defined custom headers to use parse.com\nvar ParseResource = $resource('https://api.parse.com/1/classes/:class/:id', {\n  class: '@class',\n  id: '@id',\n}, {\n  get: { method: 'GET', httpConfig: myHttpConfig },\n  create: { method: 'POST', httpConfig: myHttpConfig },\n  save: { method: 'PUT', httpConfig: myHttpConfig },\n  query: { \n    httpConfig: myHttpConfig,\n    isArray: true,\n    // Parse.com's response from a query is stored in response.data.result,\n    // a parseResponse function allows us to use this\n    parseResponse: function(response) {\n      return response.data.result;\n    }\n  }, \n  remove: { method: 'DELETE', httpConfig: myHttpConfig }\n});\n```\n\nI don't know if action.httpConfig and action.parseResponse are the best names, but I think the idea of adding these two simple things adds a lot more flexibility to $resource.\n"
1023,'mhevery','fix(directive): reapply ng-class when interpolated class attribute changes\nCloses #1016\n'
1018,'IgorMinar',"Errors during bootstrap SILENCED\nErrors during instantiation should be delegated to $exceptionHandler, errors during config phase should be probably just rethrown.\n\n````javascript\nangular.module('app', [], function() {\n  throw new Error('SILENCE');\n}).controller('ErrorCtrl', function(err) {\n  throw new Error('AGAIN SILENCE');\n}).factory('err', function() {\n  throw new Error('IGNORED AS WELL');\n});\n````"
1013,'vojtajina','$http service should accept xhr2\'s responseType property\nhttp://www.html5rocks.com/en/tutorials/file/xhr2/\n\nRequesting the resource as a "blob" or "arraybuffer" is something new to xhr and is quite useful for working with binary data'
987,'mhevery','Nested forms not propagating dirty/pristine state\nIn a nested form like below, the outer form has the class ng-pristine while the inner form is ng-dirty.  Valid/invalid state does propagate.\n\n```html\n<form>\n  <div ng-form>\n    <input ng-model="foo">\n  </div>\n</form>\n```\n\nSee http://jsfiddle.net/L4gdj/'
975,'jeffbcross',"Per-route option to trigger $routeUpdate instead of reloading the same controller\nIf you are looking at a page and you click a link that routes to the same controller you're already looking at again, angular throws that controller instance away and creates a new one.  That is, unless you only changed the 'search' part of the url and reloadOnSearch:false is set for the current route.  In that case it just fires $routeUpdate and you can check the $routeParams to see the differences.\n\nI see no reason why this feature has to be restricted to the 'search' part of the url though.  I'd love to see a per-view option just like reloadOnSearch:false that would simply fire $routeUpdate if you happened to hit a route back to the same controller again.  You could then pull the new values out of the $routeParams just like with reloadOnSearch:false.  The benefit from this is prettier urls, and not having to structure your urls differently just so you can enable navigation within a view without redrawing the whole ng-view.\n\nI could probably write the patch for this myself when I get the time."
972,'mhevery','feat($route): regexp support for $route params\nCommit related to the issue #918\n\n- regex for the route is constructed once and then reused\n\n- allows provide regex expressions for params in the constraints object:\n$routeProvider.when(\'/user/:id/:age\', {template:\'user.html\'}, {id:"[0-9]*", age:"[0-9]*"})\n\n- list of values is supported using regular expression:\n $routeProvider.when(\'/some/:param\', {template:\'foo.html\'}, {param:"one|two|tree"});\n\n- supports predefined types for paramsters (int, float, bool, string):\n$routeProvider.when(\'/some/:param\', {template:\'foo.html\'}, {param:"float"});\n$routeParams.param will be typeof number\n\n- predefined types can be extended, bu extending $routeProvider.shortcut object\n\nThanks for your contribution! In order for us to be able to accept it, we ask you to sign our CLA (contributor\'s license agreement).\n\nCLA is important for us to be able to avoid legal troubles down the road.\n\nFor individuals (a simple click-through form):\nhttp://code.google.com/legal/individual-cla-v1.0.html\n\nFor corporations (print, sign and scan+email, fax or mail):\nhttp://code.google.com/legal/corporate-cla-v1.0.html'
948,'mhevery',"fix issue #782,#875\n - $resource should handle multiple params with same name\n - ignore slashes of undefined parameters\n - fix default parameters issue, mentioned in #875 \n\nThanks for your contribution! In order for us to be able to accept it, we ask you to sign our CLA (contributor's license agreement).\n\nCLA is important for us to be able to avoid legal troubles down the road.\n\nFor individuals (a simple click-through form):\nhttp://code.google.com/legal/individual-cla-v1.0.html\n\nFor corporations (print, sign and scan+email, fax or mail):\nhttp://code.google.com/legal/corporate-cla-v1.0.html"
947,'IgorMinar','$evalAsync does not always get executed in the current $digest cycle (1.0.0rc8)\nHi, \r\nwhen I have a scope that contains a single $watch, which uses $evalAsync, then the $evalAsync does not get executed until the next $digest cycle, but not in the current $digest cycle.\r\n\r\nHere is a jsfiddle to show the problem: http://jsfiddle.net/GGbzx/1/\r\n\r\nWhen you type a character into the textbox, the $watch fires and logs the current value using $evalAsync to the console.\r\nHowever, in this case, the value that is logged is not the current value of the input field, but the last value (e.g. type in "aaa", then the log only shows "aa".\r\n\r\nTobias'
941,'mhevery','better ranking in docs search\ncurrently if I search for "$apply" I get "$q" as the top hit. for "$eval" I get "$compile".\r\n\r\nwe should do a better job at ranking the top results.'
933,'IgorMinar','ng-repeat does not work with primitive types\n\r\nhttp://jsfiddle.net/alexpetrov/tRxzr/'
926,'IgorMinar','ng-app breaks pre-selected SELECT tags\nExample: Without ng-app shows "SELECTED", with ng-app is empty.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html ng-app>\r\n<head>\r\n    <script src="http://code.angularjs.org/angular-1.0.0rc6.min.js"></script>\r\n</head>\r\n<body>\r\n    <select><option></option><option value="1" selected>SELECTED</option></select>\r\n</body>\r\n</html>\r\n```\r\n'
920,'IgorMinar','Apostrophe in Querystring Value in Firefox breaks angular\nExample:\r\nhttp://nickretallack.com/experiments/angular/apostrophe.html#/?query=some%27thing\r\n\r\nThis is a serious bug that causes angular to stop functioning until you refresh the page.  This happens any time there is an ```<ng-view>``` on the page and an apostrophe in a querystring argument.  It happens in Firefox, but it does not happen in Chrome.  I\'m using Angular 1.0rc6.  The error message it produces is below.\r\n\r\n10 $digest() iterations reached. Aborting!\r\nWatchers fired in the last 5 iterations: [["fn: $locationWatch; newVal: 7; oldVal: 6"],["fn: $locationWatch; newVal: 8; oldVal: 7"],["fn: $locationWatch; newVal: 9; oldVal: 8"],["fn: $locationWatch; newVal: 10; oldVal: 9"],["fn: $locationWatch; newVal: 11; oldVal: 10"]]\r\n\r\nSource code for the example program:\r\n```\r\n<!doctype html>\r\n<html ng-app>\r\n  <head>\r\n    <script src="http://code.angularjs.org/angular-1.0.0rc6.js"></script>\r\n  </head>\r\n  <body>\r\n    <ng-view></ng-view>\r\n  </body>\r\n</html>\r\n```'
913,'jeffbcross',"$location creates invalid URIs in hashbang mode when adding a hash\nWhen using $location in hashbang mode, and setting a hash, $location forms an url like this:\r\n\r\nhttp://foo.com/#!/bar?baz=23#baz (taken from http://docs-next.angularjs.org/guide/dev_guide.services.$location )\r\n\r\nUnfortunately, this is not a valid URI, since the hash character '#' is not allowed in the fragment part, according to the [RFC](http://tools.ietf.org/html/rfc3986#section-3.5) . \r\n\r\nSome frameworks may fail to parse such an URI. In JAVA, trying to parse such an URI with the java.net.URI class will cause an exception to be thrown."
906,'IgorMinar','Transclusion does not work with templateUrl\nhttp://jsfiddle.net/MTrcR/5/\r\n\r\nAnything you type in the "body" text area is not displayed by the dialog.  The Save and Close buttons don\'t work (from the code in the fiddle, it looks like they should).  The X in the upper right of the dialog doesn\'t work either.\r\n\r\nThis ticket originated from this thread:  http://groups.google.com/group/angular/browse_thread/thread/f206c26903102569/ba914c3605ab020a?lnk=gst&q=MTrcR#ba914c3605ab020a which provided an example of twitter bootstrap modals, but using angular 0.10.7'
887,'IgorMinar',"Need support for REST PATCH method \nPlease add support for the PATCH method. \r\n\r\nCurrently, a resource with a PATCH method passes the data through the URL instead of the method's body.\r\n\r\nThanks,\r\n\r\nIdo"
864,'IgorMinar','ng-bind-html is not watching bound value correctly\nIf a the ng-bind-html value is bound to {{a.b}} and then b is deleted from a (either by the delete operator or by changing a) then the binding does not update correctly: http://jsfiddle.net/qYpcA/5/\r\n\r\nFrom looking at the code the ng-bind-html is the only one that does not wrap the link function in a call to ngDirective.'
853,'mhevery',"ng:include does not preserve newlines in IE8\nscreenshot of IE8:\r\n![screenshot](http://i.imm.io/l0XN.png)\r\n\r\nnewlines *are* correctly preserved in IE9:\r\n![screenshot](http://i.imm.io/l0YE.png)\r\n\r\nSorry I couldn't get a fiddle working to demonstrate, but it should be a simple matter of putting an <ng:include> in IE8 vs IE9 and inspecting its innerHTML to verify."
850,'vojtajina','ng-href doesn\'t copy the value if no interpolation found\nFor example, this will result in a broken link:\r\n\r\n    <a ng-href="http://www.google.com">Broken</a>\r\n\r\nBut this will work:\r\n\r\n    <a ng-href="http://www.google.com/{{value}}">Works</a>\r\n\r\n\r\nSee: http://jsfiddle.net/Ufzev/1/'
845,'IgorMinar','$q.reject blows up if no errback is supplied\nI think this may be a bug in $q.reject (see https://github.com/angular/angular.js/blob/master/src/ng/q.js#L277):\r\n\r\nIf I chain a reject with a then but do not provide an errback callback function the $q.reject method blows up.\r\n\r\nSee this fiddle: http://jsfiddle.net/dWbWJ/.\r\n\r\nI believe that both arguments to the promise.then method can be optional (or at least should be).\r\nI think the $q.reject method should test for the errback before trying to call it.\r\n'
842,'IgorMinar',"$http requests do not complete successfully in IE7 1.0.0rc4\nUsing the $http example from docs sample fails at very end, in IE console there is message 'object Error: undefined' , couldn't get exact location, it seems to pull the request but chokes after. I originally thought it was just JSONP but it appears to be a general problem. "
836,'mhevery',"Interpolated values aren't reflected when using templateUrl\nIn the following fiddle, when using templateUrl, {{authorized}} isn't being reflected properly, but switching to an inline template it is reflected properly. Workaround is here, provided by votja: http://jsfiddle.net/vojtajina/CHVbb/302/"
829,'IgorMinar','Trim arguments\nIt turns out that if you have a function like this: function ( ) { }, Chrome will return the space in the empty parameter list while Firefox will not. This means that the injection lookup will get a string like this: " ", which is not handled in inferInjectionArgs.'
819,'IgorMinar','Typo and syntax error in the recent documentation.\nTypo and syntax error in the recent documentation.'
818,'IgorMinar','We should use jQuery (if present) even for bootstrap\nCurrently angular.elemnet(document).ready() always uses jqLite, even if jQuery is present.\r\n\r\nhttps://groups.google.com/forum/?fromgroups#!topic/angular/7Ja1tp9oBBE\r\n'
817,'IgorMinar','compiler leaks isolate accessors into the outer scope\nfirst reported at [here[(https://github.com/danielzen/angular.js/commit/56ef961daa30983aef884052c3c189a51cd53e67#commitcomment-1111304).\r\n\r\nlooks like when there is a name collision between the accessor name and the directive name (or something of that sort) we leak the accessor to the outer scope.\r\n\r\nexample + test: http://jsfiddle.net/IgorMinar/kQpFW/3/'
815,'IgorMinar',"$location.hash escaping path and not taking current hash into account\nWhen setting a location via $location.hash, it seems to be causing some weird behavior. \r\n\r\nhttp://jsfiddle.net/CHVbb/254/   - Contains a sample, you need to open the following to see it happen though:\r\nhttp://fiddle.jshell.net/CHVbb/254/show/#/deal/5\r\n\r\nI can mostly workaround by just calling window.location.has = ... for now, but that doesn't seem to work properly for IE for some reason (When using routes). Wonder if it might be related.\r\n\r\n"
813,'IgorMinar',"Angular 1.0.0 versions fail on any object prototype changes\nIntroduced in the 1.0.0 rc versions (not there in 10.0.7). I have not looked into the error, but some iterator seems to be implemented in a non-appropriate way accepting object prototype entries as elements of its concern.\r\n\r\nhttp://jsfiddle.net/StarcounterJack/2S7gC/\r\n\r\nComment out the line marked 'problem' and the example will work.\r\n\r\n"
807,'IgorMinar',"1.0.0RC1: $filter.filter seems broken\nI can't get my own examples to work when following the examples on the API AngularJS page: \r\nhttp://docs-next.angularjs.org/api/angular.module.ng.$filter.filter\r\n\r\nNot even the example on the page works, neither on the page itself or on the jsFiddle page (link from the page).\r\n\r\nSeems there is a bug in the code or in the documentation (or in both).\r\n\r\n\r\nTested on Firefox 9.0.1 and on Internet Explorer 9.0, Windows 7 \r\n\r\nBest Regards,\r\nDavid"
806,'IgorMinar',"Scenario Runner not working on IE8\nUsing RC1 with Windows XP SP3, IE8.\r\n\r\nMy Scenario:\r\n\r\n```javascript\r\ndescribe('myApp', function() {\r\n  describe('/user/login', function(){\r\n    beforeEach(function() {\r\n      browser().navigateTo('http://localhost:9000/#/user/login');\r\n    });\r\n    it('should render /user/login when user navigates to /user/login', function(){\r\n      expect(browser().location().url()).toBe('/user/login');\r\n    });\r\n    it('should render partials/user/login.html when user navigates to /user/login', function(){\r\n      expect(element('.login-form h2').text()).toMatch(/Login/);\r\n    });\r\n  });\r\n\r\n});\r\n```\r\n\r\nError:\r\n\r\n```\r\nUnexpected call to method or property access.  angular-scenario-1.0.0rc1.js, line 5828 character 5\r\n\r\nthis.appendChild( elem );\r\n```"
805,'IgorMinar','1.0RC1: $log.error.apply() resulting in error on IE\nNew angular 1.0 RC1 line 4942 \r\n$log.error.apply($log, arguments);\r\nResults in the following error on IE\r\n"Error: Object doesn\'t support property or method \'apply\'"\r\nIn previous versions the apply method was not being used on $log.error. Possible fix at line 6765.\r\n\r\n        // we are IE, in which case there is nothing we can do\r\n        return logFn;\r\n'
784,'IgorMinar',"$route.when('/route' should also resolve '/route/'\nFor a `GET` this is a pretty standard pattern. It's also a lovely aesthetic, with leaving off a trailing slash being a legacy/common trait on a static file -- `/index.html`, `/route/some/item/item5.html`. \r\n\r\nATM I'm using:\r\n\r\n```javascript\r\n$route.when('/user', {\r\n  redirectTo : '/user/login'\r\n});\r\n\r\n$route.when('/user/', {\r\n  redirectTo : '/user/login'\r\n});\r\n``` \r\n\r\nI could work a pull request up if you guys were interested, otherwise keep on using my helper fn.\r\n\r\n- Edward Hotchkiss"
772,'caitp','$location should not intercept #links (in html4 mode)\nSo that clicking on hash link navigates to anchor, even if the url did not changed (hash was already set to the value).\r\nOr maybe even better, $anchorScroll might intercept the links as well (as well as watching location).\r\n(that might work even on old browsers, where hashbang urls are used).'
768,'btford','Allow binding to getter/setter fn\nNow, when we have "accessor" locals, one should be able to bind to accessor.\r\nSo either $parse or ng-model shoul handle it.\r\n\r\nThis is ugly - with binding to getter/setter, I wouldn\'t have to do the extra "value" and copying back and forward:\r\nhttp://jsfiddle.net/vojtajina/XuhzP/64/\r\n\r\nThe tpl of the component would be just:\r\n\r\n````html\r\n<span ng-hide="editMode" ng-click="editMode=true">{{model()}}</span>\r\n<input type="text" ng-model="model" ng-show="editMode" ng-enter="editMode=false" />\r\n````\r\n\r\nAnother ugly solution (taking advantage of obj reference from parent scope): http://jsfiddle.net/vojtajina/XuhzP/65/\r\n'
762,'vojtajina',"Setting value to undefined doesn't clear input fields (v0.10.7 build 227)\nSetting a value to 'null' clears the input fields, but setting them to 'undefined' doesn't.\r\nsee http://jsfiddle.net/qrE8P/\r\n\r\nIt works with angular.js-angular-master v0.10.7 build 226 (see http://jsfiddle.net/qrE8P/1/)\r\nIt stopped working since angular.js-angular-master v0.10.7 build 227"
749,'IgorMinar',"$http.post shouldn't set a content-type for requests without a body\nThis causes trouble with certain frameworks (Play 2.0), and doesn't make much sense, anyway."
654,'btford','Array.filter function should get the index as well as the value\nThe filtering function (if used) should get not only the value, but the index as well...'
648,'vojtajina','anchor linking with # not working in html5mode\nCreate an HTML page where the URL is different then the base\r\n\r\ncurrent URL: http://localhost:8000/build/docs/some/path\r\n\r\n    <base href="http://localhost:8000/build/docs/">\r\n\r\ncrate a link\r\n\r\n    <a href="#someId">go there</a>\r\n\r\n    <div id="someId">\r\n\r\nwhen clicked the browser goes to \r\nhttp://localhost:8000/build/docs#someId\r\ninstead to:\r\nhttp://localhost:8000/build/docs/some/path#someId\r\n\r\n'
647,'Codier','sorting dates using .$orderBy\nrelated thread:\r\nhttp://groups.google.com/group/angular/browse_thread/thread/70060de5d086bf6b?hl=en'
634,'vojtajina',"select multiple not working with object as ng:options\nWhen using an Object as source for ng:options in a `<select multiple>` tag, it's not possible to select more than one element.\r\nTest at http://jsfiddle.net/marcenuc/7eJjm/"
599,'mhevery','ng:options selects wrong element in the view when null option is present\nsee: http://jsfiddle.net/IgorMinar/CHVbb/176/'
585,'dmanek','Improve ng:style\nSee https://github.com/angular/angular.js/blob/master/src/directives.js#L807'
584,'dmanek','make all widgets stylable in IE<9\nwe just need to call `document.createElement(widgetName);`\r\n\r\nhttp://ejohn.org/blog/html5-shiv/'
580,'dmanek','rename doc dev_guide.templates.css to dev_guide.templates.css-styling\nwe need to rename this doc because it conflicts with the HTML5 url rewriting rules.'
557,'mhevery','Allow optional input binding through ng:bind\nCurrently there\'s an issue with using AngularJS as drop-in enhancement for existing code, because it requires mandatory binding to HTML attribute \'name\':\r\n\r\n```html\r\n<input name="object[attr]">\r\n```\r\n\r\nIf angular could use ng:bind if exists, and if not then use name, it could allow more flexible use of AngularJS and graceful degradation:\r\n\r\n```html\r\n<input name="object[attr]" ng:bind="object.attr">\r\n```'
556,'IgorMinar',"Make AngularJS compatible with jQuery 1.6.4\nThere are several reports that angular doesn't work well with jquery 1.6.3, we need to upgrade and rerun our unit/e2e tests and get things fixed.\r\n\r\nRelated mailing list threads:\r\n\r\n- https://groups.google.com/forum/#!topic/angular/hViFQMWLJgE\r\n- https://groups.google.com/forum/#!topic/angular/33sONOLyFeg\r\n\r\n**UPDATE**:\r\n\r\njQuery 1.6.4 was released with some regression fixes. We'll upgrade to 1.6.4 instead."
549,'vojtajina','feature request: ability to define resources so that the root element is ignored\nWhen Rails converts an ActiveRecord object into json, it includes the class name as the root element. For example: \r\n\r\n    class Photo < ActiveRecord::Base \r\n      # assume a photos table in the db with a title field \r\n    end \r\n    t = Photo.create!(:title => \'My Photo\') \r\n    t.as_json results in { photo: { title: "My Photo" } } \r\n\r\nThen, when an Angular.js resource is generated: \r\n\r\n    self.photo = Photos.get({photo_id: this.params.photo_id}); \r\n\r\nAnd included in a partial: \r\n\r\n    <h1>{{photo.photo.title}}</h1> \r\n\r\n\r\nIt would be useful to be able to define resources so that the root element were ignored. For example:\r\n\r\n    angular.service(\'Photos\', function($resource) {\r\n     return $resource(\'_photos/:_photo_id\', {}, { \'create\': { method: \'POST\', ignoreRoot: true },\r\n                                                  \'index\': { method: \'GET\', isArray: true, ignoreRoot: true },\r\n                                                  \'get\': { method: \'GET\', ignoreRoot: true },\r\n                                                  \'update\': { method: \'PUT\', ignoreRoot: true },\r\n                                                  \'destroy\': { method: \'DELETE\', ignoreRoot: true }});\r\n    });\r\n\r\nThen, the partial in the above example could be:\r\n\r\n    <h1>{{photo.title}}</h1>\r\n\r\n\r\n\r\nFor array resources, the ignored element would be the root of individual resources:\r\n\r\n    self.photos = Photos.index({}); \r\n\r\nAnd the corresponding partial: \r\n\r\n    <div id="photos">\r\n      <div class="photo" ng:repeat="photo in photos">\r\n        <img ng:src="{{photo.image_large_url}}" alt="{{photo.title}}" />\r\n        <span class="title">{{photo.title}}</span>\r\n      </div>\r\n    </div>\r\n\r\n\r\nThis request originated as a Google Group thread: http://groups.google.com/group/angular/browse_frm/thread/b018bd3bd88abf27 for details\r\n'
537,'mhevery','two way data binding doesn\'t work with input type="search"\ntutorial described at http://docs.angularjs.org/#!/tutorial/step_04 doesn\'t work with input type "search", however works as expected with "text"'
536,'vojtajina','ability to modify xhr properties\nFor cross-domain requests to services that require any type of basic authentication or cookie exchange, it is necessary to set `xhr. withCredentials = true`\r\n\r\nCORS spec - http://www.w3.org/TR/cors/'
504,'mhevery','It doesn\'t work with <input type="number">\nAdd type="number" to any input and it will no longer work.  It wont show a value it\'s bound to, nor will it propagate a value.  This should be simple enough to support, right?'
499,'mhevery',"ng:required doesn't work with ng:options\nA <select> tag with only ng:required or ng:options works as expected, but ng:required does not work when used with ng:options.\r\n\r\nSimple test case: http://jsfiddle.net/LnHev/"
497,'Codier','Glyphs not rendering in docs properly\nemdash, and the left/right quotes are not rendering properly\r\n\r\nSee  http://docs.angularjs.org/#!/misc/contribute\r\n\r\nI\'ve checked on chrome and firefox on mac. \r\n\r\n===========================================================v----------------v\r\n"When the patch is reviewed and merged, delete your branch and pull yours â\x80\x94 and other â\x80\x94 changes from the main (upstream) repository:"\r\n\r\nThe build output can be located under the build directory. It consists of the following files and directories:\r\n\r\nangular-<version>.tgz â\x80\x94 This is the complete tarball, which contains all of the release build artifacts.\r\n\r\nangular.js â\x80\x94 The non-minified angular script.\r\n\r\nangular.min.js â\x80\x94 The minified angular script.\r\n\r\nangular-scenario.js â\x80\x94 The angular End2End test runner.\r\n\r\nangular-ie-compat.js â\x80\x94 The Internet Explorer compatibility patch file.\r\n\r\ndocs/ â\x80\x94 A directory that contains all of the files needed to run docs.angularjs.org.\r\n\r\ndocs/index.html â\x80\x94 The main page for the documentation.\r\n\r\ndocs/docs-scenario.html â\x80\x94 The End2End test runner for the documentation application.\r\n\r\n\r\n'
496,'mhevery','$watch / $observe should allow removing listeners\nWe should provide some api for removing these listeners...'
494,'IgorMinar','Comment in Developer Guide is confusing\nAt this page: http://docs.angularjs.org/#!/guide/dev_guide.mvc.understanding_controller\r\nThere is this comment  "Standard prototypical inheritance between two controllers doesn\'t work as one might expect .....".\r\nThis is a bit vague and confusing. Probably we can list cases that it does not work as expected(e.g. instanceOf) but comment that it works otherwise. '
492,'vojtajina',"$location.hashSearch breaks Firefox\nFirefox decodes the hash part of a URL and breaks if %XX encoding of high-bit bytes aren't UTF-8.\r\n\r\nExamples:\r\nFirefox works: http://server/app#?filter=PIHLSTR%C3%96M\r\nFirefox breaks: http://server/app#?filter=PIHLSTR%D6M\r\n\r\nUpdating location.hash/href or calling location.assign()/replace() is the same.  There's no exception, navigation just doesn't happen.\r\n\r\nI've found this in Firefox 3.6 and 5.0.  There are a few bugs discussing it, but it doesn't seem like a fix is imminent.\r\n\r\n"
470,'Codier','externalize script load order into json\nCurrently, we specify order of the files in many places:\r\n\r\n* bootstrap\r\n* rakefile\r\n* all JsTestDriver*.conf files'
468,'Codier',"provide angular.version\nWe need to make angular.js self-aware of its version. The best way we can think of doing this would be to provide `angular.version` property which would reference an object with various properties:\r\n\r\n````\r\nangular.version => { full: '0.9.17',\r\n                     major: 0,\r\n                     minor: 9,\r\n                     dot: 17\r\n                     codeName: 'jiggling-armfat'\r\n                   }\r\n````\r\n\r\nUsers can then do `angular.version.full` to access this info."
464,'mhevery','select + ng:options does not show all options\nWhen changing the number of options available in a select which uses \r\nng:options all options are not always visible. \r\n\r\nSee http://jsfiddle.net/pzwQY/6/ for an example. Change from "colors" \r\nto "pets" and back to "colors", the second select will now only show 2 \r\nof the 4 colors. \r\n\r\nThis can also be seen on your example of ng:options at \r\nhttp://docs.angularjs.org/#!/api/angular.directive.ng:options. Remove \r\nan option and a new one. The last option will not be visible.'
463,'mhevery',"ng:change doesn't work with select + ng:options\n"
451,'mhevery','RFE: Implement <option style="..."> in ng:options\n'
450,'mhevery','RFE: Implement <optgroup> in ng:options\n'
449,'mhevery','RFE: Allow ng:options to store scalar option value when source is composite\nIf source is [{id:1, name:\'Option 1\'}, ...] store value of "id" only in bound variable.'
448,'mhevery','RFE: Allow ng:options to accept {k1:v1, k2:v2} source\n'
433,'dmanek',"Expressions don't short circuit\nGiven x = 'cancel', This still alerts:\r\n\r\nx == 'ok' && $window.alert()\r\n\r\n"
406,'Codier','"Work in progress" box cuts off subsection name of developer guide\nThe \'Work in progress" box on the pages in the Develop Guide cut off the sub-section title of each document.  This can be revealed by highlighting the text in that area.'
403,'mhevery','eager service initialization is broken\n8cad231bd219eddd518de8b8bd040d3f12f08d17 broke $eager services'
400,'vojtajina','Browser sniffer service\nWe should extract browser feature testing into one service.\r\nPossible this service could be replaced by [Modernizr](http://www.modernizr.com/).\r\n\r\nHere is more info ("Adding sniffing methods" section):\r\nhttps://docs.google.com/document/d/1poQ8larzDDCSW69iSqTCa8J0AvkWssQoFIYhKPTaP4U/edit?hl=en_US'
399,'mhevery','$orderBy with no param should preserve original order\nright now weird stuff happens and items are reordered somehow'
396,'Codier','date filter should support string representation of days and months\ne.g. Monday or Mon for days and Jan or January for months'
387,'Codier','$browser.startPoller() should be private\nWe should remove this method from docs and hide.\r\nI hope there is no reason to expose it anymore, as polling is started automatically, when first poll callback is registered.\r\n\r\nI feel the same for poll() method. Any reason why we need these methods to be public ?\r\nSounds like we need it only when testing...'
384,'Codier','Remove double empty lines from docs\nCurrently google docs converts any single empty line into two empty lines when exporting into plain text.\r\nThis means that all empty lines are doubled in code examples.\r\nWe should trim them during fetching in the same way as we remove comments.\r\nhttps://github.com/angular/angular.js/blob/master/gdocs.js#L72\r\n'
376,'Codier',"Use new input().val() in e2e tests\nJust go through all e2e tests and change `element('input[name=x]).val()` into `input('x').val()`\r\n\r\nThe e2e tests are in-lined in source code and in google docs as well...\r\nEasy way to check which commands have to be changed is to check generated `/build/docs/docs-scenario.js` file."
355,'Codier',"ng:class{,-odd,-even} shouldn't reset element classes\n`ng:class` remembers the classes present at compile time and resets the target element's classes whenever `$eval()` is run.  Any other classes that have been added or removed since the element was compiled are reset.\r\n\r\nI have prepared an example showing how this breaks the jQueryUI selectable widget.\r\nhttp://jsfiddle.net/gronky/XsHqL/\r\n\r\n"
354,'mhevery',"Need to be able to update the $location.hashSearch without triggering route change.\nWe don't want reload the entire controller and template when the user changes the search criteria.\r\nThis will allow us to maintain the current state of the current controller, while making the page book-markable."
351,'mhevery','Binding to "disabled" attribute fails on IE7/8\nThe following markup will make the button enabled on Chrome/Firefox but not on IE:\n\n```html\n<body ng:init="scope = { isDisabled: false }">\n\n  <button disabled="{{scope.isDisabled}}">Disabled</button>\n\n</body>\n```'
340,'mhevery',"throw errors during testing\nhttps://github.com/angular/angular.js/blob/master/src/service/xhr.js#L154\r\n\r\nWhen executing callback (after xhr request), all exceptions are caught and just reported into $log.error().\r\nThat's not enough for testing !\r\n\r\nImagine this:\r\nI'm testing controller / service or whatever. And there is xhr request and then, any exception in the callback !\r\nThen the test passes, you have to explicitely check the $log service....\r\n\r\n    expect(scope.$service('$log).error.logs.length).toBe(0);"
338,'mhevery','Show error when one tries to compile multiple roots.\nangular.compile(element)();\r\n\r\nelement must be a single element not a match of multiple ones!\r\n\r\n      <html xmlns:my="http://unirgy.com" xmlns:ng="http://angularjs.org">\r\n          <head>\r\n              <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"></script>\r\n              <script src="http://code.angularjs.org/angular-0.9.15.js" type="text/javascript" ng:autobind></script>\r\n              <script type="text/javascript">\r\n      function TestCtrl() {}\r\n      TestCtrl.prototype.alert = function(str) {\r\n        alert(str);\r\n      }\r\n\r\n      angular.directive(\'my:test\', function(expression, compileElement) {\r\n          return function(element) {\r\n              var html = \r\n                  \'<a ng:click="alert(1)" href="">TEST 1</a> \' + \r\n                  \'<span ng:click="alert(2)" href="">TEST 2</span>\';\r\n              angular.compile(html)(this.$new(), function(cloned, scope) { element.html(cloned); });\r\n          }\r\n      });\r\n              </script>\r\n          </head>\r\n          <body ng:controller="TestCtrl">\r\n              <div my:test>TEST</div>\r\n          </body>\r\n      </html>'
331,'mhevery','Scope\n'
301,'mhevery','ng:options directive\nThis code is broken:\n    <select name="selection" ng:format="index">\n      <option ng:repeat="value in values" value="{{$index}}">{{value}}</option>\n    </select>\n\nIt never quite does the right thing and it is a bit slow \n\nIt should be\n    <select name="selection" ng:options="valu in values display as format(value)" ng:nullable>\n    </select>\n\ncorner cases to think about\n\n- What do you show when selection=\'X\' and there is not \'X\' in values?\n  - I think we should create an extra blank option\n  - should the option stay there. In other words can the user choose it?\n- Can we remove ng:format="index" I don\'t think it is needed'
281,'vojtajina','RFE: $location.replaceHash()\nIn two cases, it would be preferable to replace the current hash (without leaving the current value in the history, thus the back button skips it):\r\n\r\n* Assigning a default or starting route, when the root of the site is opened by a user.\r\n* Redirecting legacy URLs to a new format.\r\n\r\nThus the request is to add a `.replaceHash()` method to `$location` which functions the same as `.updateHash()`, but uses location.replace instead of location.assign.'
237,'Codier',"add input#val()\nit would be nice if I could do this:\n\n    expect(input('limit').val()).toBe('3');\n\ninstead of:\n\n     expect(element('input[name=limit]').val()).toBe('3');\n"
235,'mhevery','select/option/repeater issues on IE\nConfirmed on IE8.\r\n\r\n    <!doctype html>\r\n    <html xmlns:ng="http://angularjs.org">\r\n       <head>\r\n         <script type="text/javascript" src="http://code.angularjs.org/angular-0.9.8.js" ng:autobind></script>\r\n       </head>\r\n       <body ng:init="xs = [1,2,3]; sw = \'a\'">\r\n\r\n       <ng:switch on="sw">\r\n               <span ng:switch-when="a">\r\n                       <!-- Does not work -->\r\n                       <select name="selector1">\r\n                               <option ng:repeat="v in xs">{{v}}</option>\r\n                       </select>\r\n                       <!-- Works -->\r\n                       <select name="selector2">\r\n                               <option ng:repeat="v in xs" label = "{{v}}"></option>\r\n                       </select>\r\n               </span>\r\n       </ng:switch>\r\n       <!-- Works but select box is larger than expected-->\r\n       <select name="selector3">\r\n               <option ng:repeat="v in xs">{{v}}</option>\r\n       </select>\r\n\r\n       </body>\r\n    </html>\r\n\r\nFor "selector1" you will get the options 1, 2 and {{v}} (the last item\r\nwill remain unevaluated).\r\nFor "selector2" (the "workaround") you will get the options 1, 2 and 3\r\nas expected.\r\nFor "selector3"  you will get the options 1, 2 and 3 but the select\r\nbox is wider. (Enough to fit "{{v}}").\r\n'
234,'vojtajina',"$location.path should not contain / prefix\nwhy on earth does `$location.path` contain the `/` prefix?\r\n\r\n    $locaiton.update('http://foo:23/bar');\r\n    $location.path = 'newPath';\r\n    scope.eval();\r\n    expect($location.href).toBe('http://foo:23/newPath');\r\n\r\nthis fails because the href is `http://foo:23newPath`\r\n    "
228,'bradlygreen','ng:toggle\nproblem: display element A and hide element B or vice versa depending on an expression.\n\nRight know we have two solutions.\n\n*`ng:show` and `ng:hide`*\n    <div id="A" ng:show="exp"></div>\n    <div id="B" ng:hide="exp"></div>\n\n*`ng:switch`*\n    <ng:switch on="exp">\n      <div id="A" ng:switch-when="true"></div>\n      <div id="B" ng:switch-when="false"></div>\n    </ng:switch>\n\nToggling is such a frequently used operation that it might be worth implementing `ng:toggle`:\n\n    <ng:toggle on="exp">\n      <div id="A"></div>\n      <div id="B"></div>\n    </ng:toggle>'
207,'Codier','rename $pause -> $sleep and $wait -> $pause\n`$pause` for pausing the runner until resume link is clicked and `$sleep` for pausing the runner for a specified period are more clear and easier to distinguish.'
199,'btford','Explore using Jake instead of Rake\nhttp://howtonode.org/intro-to-jake\r\n'
192,'vojtajina',"$location service doesn't work outside of an eval\n$location service doesn't explicitly trigger an eval because it assumes that it will be used to modify the state within an eval stage.\r\n\r\nAt the same time, it is possible to inject $location into other services which can run outside of eval stage (e.g. delay service which executes callbacks outside of eval), so these services need to explicitly call root.$eval(). But the docs, nor common wisdom makes it clear that this is actually needed, unless one looks at the source code."
146,'vojtajina','do not change the URL if only the encoding changed\nwhen you navigate to #!abc it changes to #%21abc which prevents the back button from working since back is now #!abc which redirects to #%21abc.\r\n'
90,'IgorMinar','support ng:dbl-click\n'
10186,'chirayuk','fix(isArrayLike): Correct logic in isArrayLike to screen out objects\n- Fix ngRepeat check via isArrayLike check to prevent objects from\r\n  accidentally passing as array-like\r\n\r\nThis addresses #8000 & #4751.'
10184,'chirayuk','fix ($http): throw error when string URL is provided. closes issue #10016\nfix ($http): throw error when string URL is provided. closes issue #10016'
10177,'pkozlowski-opensource','fix($httpBackend): compare timeoutId with undefined in completeRequest\nfix($httpBackend): compare timeoutId with undefined in completeRequest\r\nhttpBackend with ngMock browser.defer can never cancel the first deferredFn because the timeoutId returned by defer for the first fn is a zero value.\r\nCompare timeoutId with undefined fix this issue. Replace fakeTimeout with defer mock to test this fix.\r\n'
10164,'Narretz','`$isEmpty` fixes\nWe should only use $isEmpty on $viewValue not for validating models.'
10161,'lgalfaso','Regression: cannot select the last option in <select> with ng-options\nI have a select directive with ng-options on a simple array of strings :\r\n```html\r\n<select ng-model="formData.mySelect" ng-options="o for o in [\'A\',\'B\',\'C\']"></select>\r\n```\r\nWith angularjs 1.2.27, I cannot select the last option (\'C\') the first time. I can only select other entries.\r\n\r\nReproduced here :\r\nhttp://jsbin.com/pahujutico/1/watch?html,js,output\r\nSteps :\r\n- Select the \'C\' option of the selection box at first.\r\n- Please note that \'C\' is NOT displayed.\r\n- Select the \'A\' option of the selection box.\r\n- Please note that \'A\' is displayed.\r\n\r\nIt works well with angularjs 1.2.25.'
10126,'Narretz',"View value not updated after $parsers run when allowInvalid: true\nWhen creating a form that has the setting allowInvalid: true I noticed that I was getting false positives for ng-minlength validation.  I have a directive that adds a parser that filters out invalid characters that the user may try to input.  In the example below '!' is an invalid character.  If the user types in 'a!' the view is updated to just 'a' but minlength=2 returns true.  \r\n\r\nThis happening because this.$$parseAndValidate sets the viewValue variable before the parsers run and never updates it.  This cause the original viewValue to be passed to the validators.  So the minlength validator sees 'a!' instead of the current value of 'a'.\r\n\r\nI was able to correct this behavior by updating the first line of the parsers loop to \r\n\r\n\r\n    modelValue = viewValue = ctrl.$parsers[i](modelValue);\r\n\r\n\r\nThis keeps the viewValue variable in sync but I'm unclear what side effects this might cause.  Any advice is appreciated.   \r\n\r\nI'm using v1.3.0-rc.1 but I see the same behavior in 1.3.3 which is what I used for the fiddle.\r\n\r\nHere is a example of this behavior.\r\nhttp://jsfiddle.net/bq9r7b98/"
10102,'jeffbcross',"Improve *.angularjs.org logging\nThere have been a couple of occasions where logs have silently failed to rotate, resulting in performance issues. While the underlying causes have been fixed, this should be prevented in the future.\r\n\r\nThis could be solved in one of two ways:\r\n * Add a script that runs at least daily on each VM and sends a pass/fail email to angular-dev. The script should check that the previous days' logs have been rotated (i.e. check that code-error.log-2014-11-17.gz exists), should report if a particular error log is logging more frequently than expected\r\n * Or log all logs to a logging service that can be configured to send alerts for these cases"
10096,'lgalfaso','feat($rootScope): Add custom compare and copy functions to $watch\nCloses #10069'
10078,'pkozlowski-opensource','Unable to get value of the property \'nodeName\': object is null or undefined\nI\'m including svgs using <symbol> and <use>\r\nExample: \r\n```\r\n<symbol viewBox="0 0 16 16" id="svg-icon-collapse-arrow"><title>collapse-arrow</title> <path style="fill-rule:evenodd;clip-rule:evenodd;" d="M2.859,5.826l0.818-0.822l4.319,4.348l4.325-4.348l0.818,0.823l-5.145,5.169L2.859,5.826z"/> </symbol>\r\n\r\n<svg xmlns="http://www.w3.org/2000/svg" ng-click="someMethod()">\r\n    <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#svg-icon-collapse-arrow" />\r\n</svg>\r\n```\r\n\r\nAnd am getting an error (only in IE9):\r\n```\r\nUnable to get value of the property \'nodeName\': object is null or undefined\r\n```\r\n\r\nThis error only occurs in v1.3.2. It doesn\'t even happen in the 1.3 beta versions'
10068,'matsko',"fix($animate): applyStyles from options on leave\nmissing <code>[options]</code> API that should either be removed from the docs or added in the code\r\n\r\n@param {object=} options an optional collection of options that will be applied to the element.\r\n\r\nthe tests weren't working for this feature \r\n```javascript\r\n      $animate.leave(element, 'off', {\r\n        to: { color: 'blue' }\r\n      });\r\n      assertColor('blue'); //nothing should happen the element is gone anyway\r\n```\r\n\r\nyou can view the docs here https://ng-click.com/$animate#leave"
10067,'matsko','parent ngClass is detected too late for child animations to work\nIn 1.3 we refactored the code to ensure that class-based animations are handled and coalesced via a combined digest. This is a nice fix that ensures that multiple classes can be added and removed without causing numerous animations to trigger.\r\n\r\nThis has, however, caused another bug to appear. Since Angular directives link from child to parent, this means that all of the watchers that are added for directives are registered in reverse order. This is fine and an expected thing. But the problem is that if any child animation is triggered then it will be triggered FIRST before the parent animation is triggered and if the child element/animation depends on a CSS selector to be matched for a transition or keyframe animation to occur then it will not be active in time when the ngClass animation kicks off.\r\n\r\n```html\r\n<style>\r\n.animations-on .entry { transition:1s linear all; }\r\n.animations-on .entry.ng-enter { opacity:0; }\r\n.animations-on .entry.ng-enter-active { opacity:1; }\r\n.animations-on .entry.ng-leave { opacity:1; }\r\n.animations-on .entry.ng-leave-active { opacity:0; }\r\n</style>\r\n<div ng-class="{\'animations-on\': startAnimations}">\r\n   <div ng-repeat="item in items" class="entry" ng-if="startAnimations">\r\n     {{ item }}\r\n   </div>\r\n</div>\r\n<button ng-click="startAnimations=true">Start Animation</button>\r\n```\r\n\r\nhttp://plnkr.co/edit/4zlGUT4M01fNVs6Tanua?p=preview\r\n\r\nThe following cases are effected by this bug:\r\n\r\n1) If the parent has ng-class then the CSS selector tree won\'t reach the child when the child\'s animations are run\r\n2) There may be a possible bug that a combination of enter/leave/move/ngShow/ngHide working together with ngClass may cause the animation not to run since the classes may not be added in time for it to function or the `-add` and `-remove` classes may not be applied correctly. This is not the case for ngRepeat or ngIf on its own, but there may be some issue that comes up:\r\nngRepeat: http://plnkr.co/edit/shxJzbvsFgmVEoQeLD4R?p=preview\r\nngIf: http://plnkr.co/edit/lJoUdMh5Cw5MkF4bsooc?p=preview\r\n\r\n**What\'s the solution?**\r\nWe combine all enter/leave/move/addClass/removeClass/setClass/animate animations together such that as soon as the animation kicks off then the classes ("ng-enter, ng-leave, ng-move, CLASS") are added together. This way an enter animation will already know that ng-class has seeded in classes and everything wil flush together.'
10058,'IgorMinar',"perf(*): use Object.create instead of creating temporary constructors\nFor inherit: http://jsperf.com/inherit-extend-vs-ocreate\r\n\r\nFor constructing an object without calling the constructor: http://jsperf.com/create-constructor/2\r\nNote that caching the constructor is actually faster but I'd rather avoid the extra logic and caching. Maybe that will be done in #9772 though."
10053,'petebacondarwin',"chore(docs): get rid of stable/unstable distinction in version selector\nLet's replace this mess with option groups like **v1.3.x**, **v1.2.x** etc.\r\n![image](https://cloud.githubusercontent.com/assets/94334/5039815/19314c06-6bad-11e4-9075-033f697ae3d9.png)"
10033,'matsko',"Animations don't work when element is added with $animate.enter (vs. $element.append) in angular 1.3\nI have written a directive that `$compile`s and appends child directives to itself.\r\n\r\nIf I append the child using `$element.append` then everything works as expected.\r\n\r\nIf, however, I append the child using `$animate.enter`, then animations on elements in the child do not work at all (by which I mean `ng-hide-add`-esque classes are never added).  This issue did not occur with angular 1.2(.17).\r\n\r\nI've tried (and failed) to make a minimal test case [here](http://jsfiddle.net/416fktbx/2/), which includes the broad functionality of the parent template (compiling a template, adding the element to itself) and the child template (showing/hiding some text when a link is clicked).  This currently works as expected, regardless of whether `$animate.enter` or `$element.append` is used.\r\n\r\nDo you have any suggestions on where I could look for the source of the problem?"
10025,'Narretz',"ctrl.$validate(); and custom formatters do not play well toghether in 1.3.x and can lead to side effects\nThe thing goes like this:\r\n- I have a directive with a custom formatter (a custom datetime control) that alters the value in the model in some way for display purposes (datetime object formatted using a mask, something like: dd/mm/yyyy hh:mm, you will of course loose precision)\r\n- so you have: $modelValue with the original datetime (precision up to milliseconds) and $viewValue with the modified value (precision up to minutes).\r\n\r\nif you place any directive/attribute that internally invoke ctrl.$validate() (like the ngRequired) this will have the side effect of parsing the value again and ASSIGN it to the model, OVERWRITING the  original value even if the user didn't typed or interacted with anything.\r\n\r\nPersonally I do think this kind of side-effects are dangerous, something that does a validation should not change my model value.\r\n\r\nTo my knowledge this wasn't happening in 1.2.x."
10024,'caitp','Animations are broken for SVG sub-elements if jQuery is present\nIf jQuery is present, then Angular animations on SVG sub-elements do not work, as jQuery does not support adding and removing classes from them. It would be helpful if $animate always used jqlite to perform class manipulation, rather than deferring to jQuery.'
10021,'pkozlowski-opensource','fix(:http): Fix error message on calls to $http without an object\nChecks on $http calls and validates it received an object, if it receives a string, automatically wraps it in an object containing only url.\r\nIf an array or any non object/string is passed, will throw an error.\r\n\r\nCloses #10016'
10007,'petebacondarwin','Feature Request: angular.component helper\nPlease see this demo: https://jsbin.com/yixote/11/edit?html,js,output\r\n\r\nThanks to "bindToController" in angular 1.3, we\'re able to create a much simpler api for building components. \r\n\r\nJust as "angular.service" helps us to easily build an "angular.provider", I strongly believe a simplified "angular.component" could help us easily build components with "angular.directive".\r\n\r\nI\'m sure everyone will have plenty of feedback :)'
9997,'Narretz',"<fix>(input): return original value from formatter if isEmpty, not ''\nFix the formatter on the input[type=date] to return the original value if the value\r\nevaluates to falsey. It was previously returning an empty string with was causing\r\nthe underlying model to be modified upon binding.\r\n\r\nCloses #9996"
9996,'Narretz','input[type=date] borks model on binding if ngRequired is falsey\nSo this wasn\'t a problem in the previous version of angular that I was running (1.2.*?) but as soon as I upgraded to 1.3.1 all of my required date input types would set my model value to null upon binding (which would fire my $watches prematurely and cause havok).\r\n\r\nIt seems there have been a lot of input controller related issues arise in 1.3 but looking through the open issues I don\'t *think* this one has any related.\r\n\r\nCheck out this plunk to verify the issue:\r\nhttp://plnkr.co/edit/dgsiLXD4OTDt19FF6pmi?p=info\r\n\r\nI tracked down the problem to the default formatter that is attached to the input in input.js:createDateInputType.  It is returning an empty string if the value evaluates to isEmpty.  Looking at other formatters the rule of thumb seems to be to return the original value that evaluated to falsey (not change it to empty string).  I made this one line change and if you click the "see fixed version" at the bottom of the plunk you will see the exact same page using my fixed version of the angular.js file.'
9993,'pkozlowski-opensource','fix($httpBackend): fixup patch for #9979\nBuilds ontop of c480462 from #9979'
9992,'caitp','Generate error when attempting to use filter on objects\nCurrently it fails silently if you try to use `filter` on objects, as in the example below, because it only supports arrays.\r\n\r\n````\r\n<div ng-repeat="item in object | filter:{display:true}">stuff</div>\r\n````\r\n\r\nI blew a ton of time on this because it\'s not very intuitive since `ng-repeat` supports objects. I fully expect to make the same mistake again. A simple error message would save a world of hurt. '
9991,'Narretz',"Standalone docs for (ng)Pattern\n`ngPattern` docs are currently only available for the different input types, but has been standalone for quite some time. The `pattern`attribute is also recognized as a directive (undocumented), and there's currently also a subtle difference between `pattern` and `ngPattern`, so this should definitely be documented."
9988,'jeffbcross','Set Up Performance CI Server\nCreate a jenkins instance on a local workstation to run full suite of performance benchmarks on every commit to master. Results should be reported to an external server with a basic UI for tracking performance progress for each component over time.\r\n\r\nPending [some changes](https://github.com/angular/benchpress/milestones/Q4%202014) to the benchpress runner.\r\n\r\nBackport of Issue https://github.com/angular/angular/issues/176 (though 1.x should be completed prior to Angular 2 implementation).'
9984,'caitp','filter doesn\'t work when methods are added to Object.prototype\n`$filter("filter")([{"name":"foo"}], "foo")` will return `[]` if properties/methods are added to Object.prototype because the check isn\'t done as it should. \r\n\r\nThis simple change fixes that.'
9967,'caitp',"run promise-aplus tests in the browser\n@jonathantneal says this is possible, using browserify --- so that's probably a better place to run promise tests for angular if we can make that work."
9959,'Narretz','ngModel changes model in 1.3 without any input from user, 1.2 is ok\nSimple plunker to illustrate:\r\nhttp://plnkr.co/edit/pbL86XRPluAjUkha10Dg\r\nScenario is:\r\n-set model to 3 (number 3, not string "3")\r\n-have a maxLength on field\r\n-add a parser to parse string from input to number\r\nThis scenario happens in no particular order (at least for me) as everything comes by binding to scope.\r\nWith angular 1.2.26 every is fine, 3 stays 3 while nobody touches the input field.\r\nWith angular 1.3.1, angular changes the model to "3" instead of 3 before the parser string to object is set, without anybody "touching" the input field.\r\nThe plunker only illustrates this behavior, the corruption of the model.\r\nIn our real life problem, when we set the parser we also set a formatter model to view, and this formatter fails with angular 1.3 because it finds "3" instead of the original 3.\r\nWith angular 1.2 everything works fine.'
9941,'caitp','Default route missing slash before #\nI have a case where a slash is not being put between the url and the hash for the default route.  I\'m using the same files in two different folders on my local machine hosted by IIS and run in IE 11.  In one case, $browser.url() is returning "http://localhost/app1/" and the other case it is returning "http://localhost/app2".  Notice the missing slash for app2.  This makes the default route "http://localhost/app1/#/sets" and "http://localhost/app2#/sets".  The missing slash causes the url for the views to be wrong, returning a 404.\r\n\r\nI\'m not the only one to have this issue: http://stackoverflow.com/questions/20690127/angularjs-default-route-missing-slash-before\r\n\r\nExample route setup:\r\n\r\n```js\r\n$routeProvider\r\n\t.when(\'/sets\', {\r\n\t\ttemplateUrl: \'sets/sets.html\',\r\n\t\tcontroller: \'setsController\'\r\n\t})\r\n\t.otherwise({\r\n\t\tredirectTo: \'/sets\'\r\n\t});\r\n```\r\n\r\nI\'ve tracked it down to the this.$get function in angular.js. Adding a check to make sure appBase ends with a slash fixes the issue for me.\r\n\r\n```js\r\nif (html5Mode.enabled) {\r\n      if (!baseHref && html5Mode.requireBase) {\r\n        throw $locationMinErr(\'nobase\',\r\n          "$location in HTML5 mode requires a <base> tag to be present!");\r\n      }\r\n      appBase = serverBase(initialUrl) + (baseHref || \'/\');\r\n      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;\r\n    } else {\r\n    \tappBase = stripHash(initialUrl);\r\n// make sure appBase ends with a slash!\r\n    \tif (appBase.indexOf(\'/\', appBase.length-1) == -1)\r\n    \t\tappBase = appBase + \'/\';\r\n      LocationMode = LocationHashbangUrl;\r\n    }\r\n```\r\n'
9936,'matsko','different behavior angular-animate.js angular-animate.min.js (1.2.26) in Firefox 33.0.2\nI use SolydK 64bit with latest Firefox (33.0.2). The following code behaves different when using minified version of angular-animate:\r\n\r\n----------- html ------------------\r\n```\r\n<!DOCTYPE html>\r\n<html lang="de" xmlns="http://www.w3.org/1999/html">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <title>AnimateTest</title>\r\n    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular.min.js"></script>\r\n    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular-animate.js"></script>\r\n    <link href="main.css" rel="stylesheet" type="text/css">\r\n</head>\r\n<body data-ng-app="ngAnimate">\r\n    <div class="animate-show" data-ng-hide="showPartial">\r\n        Some content here ...\r\n    </div>\r\n    <input type="checkbox" data-ng-model="showPartial">Click here ...\r\n</body>\r\n</html>\r\n```\r\n\r\n----------- css --------------------\r\n```\r\n.animate-show {\r\n    -webkit-transition:all linear 0.5s;\r\n    transition:all linear 0.5s;\r\n    line-height:20px;\r\n    opacity:1;\r\n    padding:10px;\r\n    border:1px solid black;\r\n    background:white;\r\n}\r\n\r\n.animate-show.ng-hide {\r\n    line-height:0;\r\n    opacity:0;\r\n    padding:0 10px;\r\n}\r\n\r\n.check-element {\r\n    padding:10px;\r\n    border:1px solid black;\r\n    background:white;\r\n}\r\n```\r\n\r\n------------------------------------\r\n\r\nUsing the unminified version of angular-animate everything works fine. Using the minified version hiding the `<div>` is animated but showing is not (it just pops out). In Chromium everything works as expected so it could be a Firefox-Bug, but with Angular Version 1.3.1 things are working in Firefox too ... so it should be an issue you can solve in the \'stable\' branch by yourself ...\r\n\r\n'
9929,'matsko',"Staggering animations are running simultaneously when using ng-class and ng-show\nI'm having issues adding animation using `ng-repeat` with `ng-show` and `ng-class`. Basically if one of my items have a different class added via `ng-class`, animations for these different classes run simultaneously as in the gifs below.\r\n\r\nWith `ng-class` declaration:\r\n![screen recording 2014-11-05 at 18-28](https://cloud.githubusercontent.com/assets/526122/4925426/fdbcc8c0-652a-11e4-8294-f426b857fcff.gif)\r\n\r\nWithout `ng-class` declaration:\r\n![screen recording 2014-11-05 at 18-29](https://cloud.githubusercontent.com/assets/526122/4925395/bc417454-652a-11e4-9019-739a1111b4cd.gif)\r\n\r\nThis is the plunker link: http://plnkr.co/edit/1H3K6EUOZ1y4xIEOw0eU?p=preview"
9913,'Narretz',"fix(input): don't invoke viewChangeListeners before real user input\nCloses #9867"
9906,'petebacondarwin',"fix($location): don't rewrite when link is shift-clicked\nCloses #9904"
9904,'caitp',"Shift + Click is not handled\nHello!\r\n\r\nAs I know browsers open links in a new window, when clicking on them with a 'Shift + Click'. But Angular prevents this, and open link in a current tab(window). This can be observed on main angular website.\r\n\r\nAs I see the issue is in a $locationProvider\r\n\r\n```\r\nif (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.which == 2) return;\r\n```\r\n\r\nit seems to me that it is missing ``` event.shiftKey ```\r\n\r\nCan you advise, it this a really miss or a default behavior?\r\n\r\nThank You!"
9867,'Narretz','Function in ng-change is fired before input is touched.\nToday I wanted to "upgrade" to 1.3.1.\r\nEvery piece of my app is working but ng-change not anymore.\r\nMy function "showPriority()" is called when template is rendering as many times as is items in an object speakers (deferred ajax result from laravel api).\r\nIt was working fine (function is called only when I will change the value of input) in 1.3.0-beta.19, but not in 1.3.0-rc.0+ (for 4 items is called 4x, when i will change the value +1x...).\r\n\r\nIs there any difference in ngChange?\r\n\r\n```\r\n<div data-ng-repeat="item in speakers | orderBy:sortBy:reverse">\r\n  <input type="text" data-ng-model="item.priority" data-ng-change="showPriority()">\r\n</div>'
9863,'juliemr','Should output better error messages when Sauce Connect script fails\nSee #9862'
9849,'Narretz','question / request for dynamic ng-messages error\nI\'ve been reading ng-messages api, and it seems very powerful.  However I just want to ask if its possible to have the error message being dynamic.\r\n\r\nInstead of:\r\n\r\n```\r\n<script type="text/ng-template" id="error-messages">\r\n<div ng-message="required">This field is required</div>\r\n<div ng-message="minlength">This field is too short</div>\r\n</script>\r\n<div ng-messages="myForm.myField.$error" ng-messages-include="error-messages"></div>\r\n```\r\n\r\nIs this possible?\r\n\r\n```\r\n<script type="text/ng-template" id="error-messages">\r\n<div ng-message="required">This {{ $parent.field_name }} is required</div>\r\n<div ng-message="minlength">This  {{ $parent.placeholder_perhaps }}  is too short</div>\r\n</script>\r\n<div ng-messages="myForm.myField.$error" ng-messages-include="error-messages"></div>\r\n```\r\n\r\nI believe doing it like this will make our code more DRY.  '
9837,'petebacondarwin',"ngIf with replace:true on directive template\nHello team,\r\n\r\nWe have a regression with the last angular version (since v1.3.0-beta.11)\r\n\r\nIn this commit https://github.com/angular/angular.js/commit/d71df9f83cd3882295ca01b1bb8ad7fb024165b6#diff-1c8fbee1402a2ef3c203def41d1960cdR97, you modified the child scope ngIf uses. Now with this modification, using ngIf on the root element of a directive template that is configured with `replace:true`, the $scope is not the expected one. (it's not the same)\r\n\r\nWe tried to build a reduced test case to show the regression :\r\n* 1.3.0-beta 10 : http://jsbin.com/sakuto/9/edit\r\n* 1.3.0-beta 11 : http://jsbin.com/yubetu/1/edit\r\n\r\nAs you can see, the first directive failed in beta 11.\r\n\r\nWhat do you think ? Is it a bug or the new expected behaviour ?\r\nIf so, maybe we should detail the documentation.\r\n\r\nthx!"
9788,'btford','Collection of `filterFilter` related issues (with regard to #9757)\nFollowing #9757, I tried to gather open `filterFilter`-related issues (bugs, PRs, feature requests) and investigate if/how they relate to #9757 (e.g. if they are resolved or contain test-cases that can be incorporated etc).\r\n\r\nListing my "findings" here to avoid duplication of effort.\r\n<sub>\r\nKudos to @Narretz for the idea (https://github.com/angular/angular.js/pull/9757#issuecomment-60278402) :smiley:.\r\n</sub>\r\n\r\n---\r\n#### tl;dr\r\n\r\n###### PRs:\r\n* PRs that should be probably closed anyway: #6623\r\n* PRs that will need to get updated if #9757 lands: #5451, #6695, #8750\r\n* PRs that will be obsolete if #9757 lands: #7329\r\n\r\n###### Bugs / Feature Requests:\r\n* Issues that should be probably closed anyway: #1780, #5055, #6222, #6655\r\n* Issues that are irrelevant to #9757: #2694, #6490, #8458\r\n* Issues that will be resolved if #9757 lands: #7323, #9698, #9984\r\n\r\n---\r\n#### PRs\r\n\r\n* **[#5451: feat(filter): allow filtering of objects][5451]**  \r\n  This is about adding support for filtering objects (not only arrays).  \r\n  This seems to be irrelevant to #9757.  \r\n  **Update needed if #9757 lands.**  \r\n  <img />\r\n* **[#6623: fix(filterFilter): comparator should return true if deep object key is undefined][6623]**  \r\n  Based on https://github.com/angular/angular.js/pull/9757#issuecomment-60444750 and https://github.com/angular/angular.js/pull/9757#issuecomment-60302142 the current behaviour is preferred.  \r\n  **Should be probably closed.**  \r\n  <img />\r\n* **[#6695: feat(filterFilter): support filterFilter for object literal collection][6695]**  \r\n  This is about adding support for filtering objects (not only arrays). I am not a great fan of the added tests :/  \r\n  In any case, this seems to be irrelevant to #9757.  \r\n  **Update needed if #9757 lands.**  \r\n  <img />\r\n* **[#7329: fix(filterFilter): deeply-nested predicate objects + multiple conditions][7329]**  \r\n  Essentially trying to implement a simpler version of #9757. It fails the tests added in #9757.  \r\n  **Obsolete if #9757 lands.**  \r\n  <img />\r\n* **[#8750: docs(filter): clarify what filter matches against][8750]**  \r\n  This is a docs update about what `filterFilter` matches against.  \r\n  I too think that it needs expanding anyway (https://github.com/angular/angular.js/pull/8750#issuecomment-54371116).  \r\n  **Update needed if #9757 lands.**\r\n\r\n---\r\n#### Bugs / Feature Requests\r\n\r\n* **[#1780: Null filter not returning anything][1780]**  \r\n  This issue is about a bug with `null` values. Based on https://github.com/angular/angular.js/issues/1780#issuecomment-59015936 this seems to have been fixed on both 1.2.x and 1.3.x.  \r\n  **Should be probably closed.**  \r\n  <img />\r\n* **[#2694: Allow object maps along with arrays][2694]**  \r\n  This is about adding support for filtering objects (not only arrays).  \r\n  **Irrelevant to #9757.**  \r\n  <img />\r\n* **[#5055: `filterFilter` takes out null values when compared with `\'\'`][5055]**  \r\n  This is an old issue related to 1.2.x and from the conversation it seems like it\'s a "works as expected".  \r\n  **Should be probably closed.**  \r\n  <img />\r\n* **[#6222: Filters for nested objects not working][6222]**  \r\n  This has been already fixed and works as expected on both 1.2.x and 1.3.x.  \r\n  **Should be probably closed.**  \r\n  <img />\r\n* **[#6490: Implement filtering on object-based ng-repeat][6490]**  \r\n  This is about adding support for filtering objects (not only arrays) for use with `ngRepeat`.  \r\n  **Irrelevant to #9757.**  \r\n  <img />\r\n* **[#6655: Call stack exceeded error on objects with circular references][6655]**  \r\n  Based on the conversation (and the referenced #6319) it seems to have been decided not to support objects with circular references.  \r\n  **Should be probably closed.**  \r\n  <img />\r\n* **[#7323: Nested expression support renders strict option useless][7323]**  \r\n  This issue is about strict equality comparator not being properly applied in case of deep objects. Basically the problem is that deep objects wheren\'t properly supported in `filterFilter`.  \r\n  **Solved if #9757 lands.**  \r\n  <img />\r\n* **[#8458: `filterFilter` and `orderByFilter` should also work with objects][8458]**  \r\n  This is about adding support for filtering objects (not only arrays).  \r\n  **Irrelevant to #9757.**  \r\n  <img />\r\n* **[#9698: `filterFilter` does not work with more than one nested property][9698]**  \r\n  This issue is about deep expression objects and directly related to #9757.  \r\n  **Solved if #9757 lands.**  \r\n  <img />\r\n* **[#9984: `filterFilter` does not work when methods are added to Object.prototype][9984]**  \r\n  This issue is about `filterFilter` breaking when properties are added to the expression object\'s prototype chain (or to `Object.prototype` if expression is a string). #9757 solves this "for free".  \r\n  **Solved if #9757 lands.**\r\n\r\n[1780]: https://github.com/angular/angular.js/issues/1780\r\n[2694]: https://github.com/angular/angular.js/issues/2694\r\n[5055]: https://github.com/angular/angular.js/issues/5055\r\n[5451]: https://github.com/angular/angular.js/pull/5451\r\n[6222]: https://github.com/angular/angular.js/issues/6222\r\n[6490]: https://github.com/angular/angular.js/issues/6490\r\n[6623]: https://github.com/angular/angular.js/pull/6623\r\n[6655]: https://github.com/angular/angular.js/issues/6655\r\n[6695]: https://github.com/angular/angular.js/pull/6695\r\n[7323]: https://github.com/angular/angular.js/issues/7323\r\n[7329]: https://github.com/angular/angular.js/pull/9757\r\n[8458]: https://github.com/angular/angular.js/issues/8458\r\n[8750]: https://github.com/angular/angular.js/pull/8750\r\n[9698]: https://github.com/angular/angular.js/issues/9698\r\n[9984]: https://github.com/angular/angular.js/pull/9984'
9779,'btford','docs(guide/scope): describe watch depths\nDescribe and visualize the three watch strategies: By reference, by collection items, and by value.\r\n\r\nCloses #9388'
9772,'IgorMinar',"perf(ngmodel/compile): improve ngmodel and general compile/controller performance (#9609)\nThis was mainly focused around #9609 - bringing 1.3 up to speed with 1.2 with an ng-repeated ng-model, at least when not using jQuery.\r\n\r\nOverall these changes make the added benchmark (and the jsfiddle in #9609) 2-3x faster and seem to be faster then 1.2 now.\r\n\r\nThe last 3 commits (refactoring controller stuff in $compile) can probably be squashed but I left them separate for now for nicer diffs.\r\n\r\nThe only functional change (that I know of) is that the NgModelController `$name` is now initialized by the directive (pre-link) instead of within the controller. I'm not sure if this an issue or considered breaking? This was already the case for the `$options` field..."
9771,'caitp','feat(jsonFilter): add optional arg to define custom indentation\nalso change toJson function to accomodate passing in of number of spaces'
9757,'caitp','fix(filterFilter): correctly handle deep expression objects\nPreviously, trying to use a deep expression object (i.e. an object whose properties can be objects themselves) did not work correctly. This commit refactors `filterFilter`, making it simpler and adding support for filtering collections of arbitrarily deep objects.\r\n\r\nCloses #9698\r\n\r\n---\r\n<sub>\r\nBTW, I used "non-IE8" stuff (like `Array.prototype.some/every`) for the sake of conciseness and clarity, so this is not directly back-portable to 1.2.x. If there is interest, I can create a IE8 compatible version (using `for-loops` etc).\r\n</sub>'
9748,'IgorMinar',"Angular + Chrome...are detached DOM nodes causing unbounded memory growth?\nHi\r\n\r\nI have read though most of these issues: https://github.com/angular/angular.js/issues?q=detached+dom\r\n\r\nThey seem to boil down to the discussion at:\r\nhttps://github.com/angular/angular.js/issues/4864\r\nwhich seems to point to this as the culprit:\r\nhttps://code.google.com/p/v8/issues/detail?id=2073\r\n\r\nHowever, I can't seem to come to any sort of conclusion whether there is an angular issue or angular simply will not work for a large app in Chrome. The angular issues keep getting closed. (See most of those 'q=detached+dom' issues. they are closed.)\r\n\r\nIn my app, I have a large number of detached DOM elements. This occurs on very first visit with no page interaction at all. Just visit the app. Open dev tools. Take a snapshot. Lots of detached elements. And memory grows and grows as you use the app.\r\n\r\nIs this definitely related to:\r\nhttps://code.google.com/p/v8/issues/detail?id=2073#c35\r\n\r\nOr is there something else going on inside Angular?\r\n\r\nWhat is the angular team's thoughts on this?\r\n\r\n \r\nOne can reproduce both Memory issues and Detached DOM simply using Chrome visiting angularjs.org.\r\n\r\nSymptom 1: Watch memory grow and grow...Open Activity Monitor. Search for Chrome. Open Chrome and visit angularjs.org. Select api docs. This will show the current docs for 1.3.x. Now drop down and switch to 1.2.x. Now click back. Now click forward. Going back and forth. You will see in Activity Monitor memory grows for Chrome quickly to 400mb+. (For safari, it retains a bit above 100mb.) (My app in Chrome goes to 800mb very quickly.) \r\n\r\nVideo showing Activity Monitor, comparing Safari vs Chrome: http://www.youtube.com/watch?v=eihKavtp1EQ\r\n\r\nEnvironment:\r\nYosemite 10.10\r\nChrome 39.0.2171.27 beta (64-bit)\r\nSafari 8.0 (10600.1.25)\r\n(My app is using Angular 1.2.24, no Jquery)\r\n\r\nSymptom 2: See detached DOM elements appear on first app load...Open Chrome. Do not open dev tools. Visit angularjs.org, do no clicks/actions. Open dev tools. Take Heap Snapshot. You get the below showing detached nodes:\r\n\r\n![screen shot 2014-10-22 at 17 05 23](https://cloud.githubusercontent.com/assets/9343019/4739516/481292fa-5a05-11e4-96ce-5d63c748af77.png)\r\n\r\nIs this expected?\r\n\r\n-m"
9747,'caitp','fix(orderBy): Mantain order in array of objects when predicate is not provided\n\r\nFixes #9566'
9745,'IgorMinar','feat($templateRequest): trust url if it is already in cache\nThis is a rehash of #4879. I\'ve encountered this issue a long time ago and it is no longer relevant for me, but maybe it will help someone else... This bothered me when I used the base tag in some project to point to a domain different than the one the page was served from - it meant that any template that was preloaded using something like `<script type="text/ng-template" id="/tpl.html">` was blocked by `$sce` when I tried to load it since the domain in the base tag was not trusted by default.\r\n\r\nSo I\'m thinking that it doesn\'t make much sense to block something that is already in the cache, but there was a test in`$compile` which explicitly tested that even cache will be blocked (which I had to remove), so I\'m probably missing something.\r\n\r\nAnyway, even if this is not really interesting, I think that the refactor in the first two commits might be relevant anyway....'
9730,'btford','fix(location): throw a MinErr when base path has the wrong case #4082\nIf the user inputs a url where the base path has the wrong case, an MinErr is now thrown instead of a stack trace.\r\n\r\nFrom the issue:\r\nThis issue is common when serving files from a case-insensitive filesystem, where the files may serve from /Base/ and /base/ but the href is set as /base/. This behavior is preferable because it encourages developers to follow the best practice of treating their files and URLs as case-sensitive.\r\n\r\nFixes #4082 #ng-europe'
9729,'caitp',"Add warning message when a module is reset/replaced\n- Add log to loader.js in case module with the same name is loaded again. The logProvider is not available at this point and after discussion on ng-europe we decided to use console.log.\r\n- The result of the fix was tons of messages \r\nLOG: 'The module 'ng' already exists and has been redefined.'\r\nbecause publishExternalAPI was called twice for EVERY test. Therefore  publishExternalAPI(angular); could be removed from testabilityPatch.js.\r\n\r\nFix for #6034 "
9727,'caitp','docs($compile): improve documentation on directive $scope usage\nAdd information about the behavior of several directives especially of their scopes when applied on a single element.\r\n\r\nClose #5761'
9723,'petebacondarwin',"feat($timeout): overload service API.\nProvided an overload for $timeout that doesn't take a function.\r\n\r\nCloses #9176"
9721,'caitp','feat($injector): print caller name in "unknown provider" errors (when available) #ngEurope\nThis will add the name of the service/controller/... to the error message so that we know where the error comes from.\r\nFor example, `Error: [$injector:unpr] Unknown provider: $timeuotProvider <- $timeuot` will print `Error: [$injector:unpr] Unknown provider: $timeuotProvider <- $timeuot <- AppCtrl`\r\n\r\nThis will not work in config/run block because propagating the module name would be difficult (you don\'t want to screw with invoke) but we could improve this later.\r\n\r\nAlso, I didn\'t add it to the directives because you already have an explicit message (something like `Error: [$injector:unpr] Unknown provider: $timeuotProvider <- $timeuot <- testDirective`).\r\n\r\nFixes #8135'
9681,'petebacondarwin','fix(input): $render input even if $modelValue is empty\n$render should only be concerned if there is a $viewValue present.\r\nWhen we check $isEmpty($modelValue), we assume $render is used in\r\ncontext of a model -> view update. But since it is part of the public\r\nAPI, it needs to work independent of internal usage.\r\n\r\nFixes #9156\r\n\r\nIn the end, the formatters are responsible for providing a correct value to the $render function in a model -> update. If someone uses $render manually, they are obviously responsible.'
9656,'juliemr',"Docs end to end tests should test against production index\nThe end to end tests for the docs application don't test against the production build, which led to erroneous code being deployed to production from [build 3437](https://ci.angularjs.org/job/angular.js-angular-master/3437/). This build was trying to load `null` version numbers from Google CDN for all versions of Angular."
9635,'petebacondarwin',"$location.hash('') causes infinite digest loop \nAngular version: v1.3.0\r\n`$location.hash('some_param')` works fine but `$location.hash('')` gives infinite digest loop.\r\n\r\nPlunker link: <http://embed.plnkr.co/mwtW1ZxDPDgEdj4PE7wj/preview>\r\nRelated bug: <https://github.com/angular/angular.js/issues/9629>\r\n\r\nProblem is any page with Angular v1.3.0  + empty hash, runs into this problem. Try this: <https://docs.angularjs.org/api/ng/service/$location#>\r\n"
9629,'petebacondarwin',"Bug: Setting $location.search() param value to null causes infinite digest loop\nThe bug occures only in new 1.3.0 version of Angular.\r\nWhen I use <code>$location.search('some_param', 'value')</code> everything works fine.\r\nBut when I then use <code>$location.search('some_param', null)</code> to clear that search param, Angular falls into infinite digest loop.\r\n\r\nSee [plunkr](http://run.plnkr.co/oyvpEVcBrhFMHwSJ/) for example."
9623,'caitp','fix(inputs): improve "input" event emulation for legacy browsers\nHello,\r\n\r\nIn IE versions that use the keydown handler to check for changes to an input, there is a bug when pressing the tab key that will update the input after the change and blur events.\r\n\r\nThis PR fixes this behavior ~~by cancelling the keydown handler, and updating immediately on change/blur~~.\r\n\r\nSee a demo of the bug here (only affects IE8/IE9): http://codepen.io/cvn/full/lvjJr/\r\n\r\nHere is a fixed demo with the changes from this PR applied to angular.js: http://codepen.io/cvn/full/cgLns/\r\n\r\nCurrently, this bug only impacts IE8 & 9, but if PR https://github.com/angular/angular.js/pull/9265 lands, it will affect all versions of IE.\r\n\r\nIssue https://github.com/angular/angular.js/issues/1206 may be related, but I\'m not sure about this.\r\n\r\nI\'m submitting this PR to master, but I think it makes sense to include in both 1.2 and 1.3 branches.\r\n\r\nPlease let me know what you think.'
9602,'btford',"radio button can not be selected\nI recently upgraded Angularjs v1.3.0-rc.4. I have a radio buttons on the page and the issue is once I choose a radio button, I can not change it anyway. It shows the one gets selected and then even we change the radio button selection, it doesn't change. But in the back end, it is working fine. It returns the value of last radio button we clicked although UI shows the first radio button we selected. "
9577,'matsko',"chore($$raf) Remove support for prefixed requestAnimationFrame\nAccording to [can I use](http://caniuse.com/#feat=requestanimationframe) this would drop support for the following browsers:\r\n* Firefox 22\r\n* Chrome 23\r\n* Safari 6\r\n* iOS 6.1\r\n\r\nNote, they don't have data on Blackberry 10.1 (where it's prefixed) and 10.2 (where it's unprefixed).\r\n\r\nThis is also the same level of support as provided by [jQuery](https://github.com/jquery/jquery/blob/10399ddcf8a239acc27bdec9231b996b178224d3/src/effects.js#L649)."
9566,'caitp',"orderBy should not reverse an array of objects\nWhen no predicate is provided, orderBy will reverse an array of objects.\r\nThis isn't ideal. It should err on the side of preserving the order.\r\n\r\nIt happens because, for objects, in the compare() function, v1 < v2 is\r\nfalse, so the comparator function returns 1 (effectively moving v2\r\nbefore v1)."
9559,'btford',"ng-include rendering slowness\nWe have been using ng-include for partials in our new angular app, but we had to remove them because they were loading so slowly. This had significant visual impact on page load. Here's a great example of this issue:\r\nhttp://plnkr.co/edit/dTUUPhsVrCbeSIjZzqmx?p=preview\r\n\r\nHow can we help address this? Is there something we're missing?\r\n\r\n"
9549,'matsko','Reminder to fix up animate.js\nOnce https://github.com/angular/angular.js/pull/8974 goes then the following needs to be done for `ngAnimate/animate.js`.\r\n\r\n1. Properly document the `options` API param and provide info on how to use temporary class name values.\r\n2. Fix the `options` param such that it only accepts strings or object params.\r\n3. Improve the quality of the tests here: https://github.com/angular/angular.js/blob/master/test/ngAnimate/animateSpec.js#L2459'
9485,'matsko',"Cannot read property 'ng339' of undefined error inside ng-switch-when and directive on 1.2.25\nI have a directive inside an ng-switch-when directive. When I do some changes to the scope models inside that directive (saving data to the server and updating the models) and I switch view (going to another ng-switch view) and go back again to that same ng-switch-when I get this ng339 error.\r\n\r\n"
9456,'btford','docs($rootScope): code example for $watch function using objectEquality\nThis PR improves the code example section of https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$watch by providing an example of `scope.$watch` with `objectEquality` to illustrate how `scope.$watch` will not work simply as a reference watcher on object properties. \r\n\r\nNote: first time contributor, CLA may be pending.'
9405,'btford','chore(scenarioRunner): do not publish updates to bower/npm\nSuggested by @IgorMinar.\r\n\r\nSince this has been in "maintenance mode" for a while, it\'s probably good to start winding down on it and encouraging users to switch to protractor.'
9397,'matsko','Add ng-enter-end ng-leave-end to handle final animation states\nCurrently all animation helper classes (ng-enter, ng-enter-active, etc.) dissapear when the element ends the animation. \r\n\r\nIn the case you need an element hidden in its natural state but shown after the animation ends you have no way to control this but to add additional classes. This makes animation classes less reusable as you depend on the controller or custom directives to control final animation state.\r\n\r\nAdding _and keeping_ ng-enter-end, ng-leave-end or similar only when present in the css should do the trick.\r\n\r\nThis or another way where you can define inverse animations (in which the final state is the actual state you want) should be present.'
9265,'caitp',"fix(inputs): ignoring input events in IE caused by placeholder changes o...\n...r focus/blur on inputs with placeholders\r\n\r\nThis is my attempt at fixing #8242 as well as the extra placeholder issues with focus/blur. I'm assuming I'm missing a weird test case that still breaks somewhere, but I still think this is an improvement (it definitely is for my use cases)."
9254,'btford','ng-click should do some helpful accessibility things by default \nI often see naive developers doing this:\r\n\r\n```html\r\n<a href="" ng-click="...">Click me</a>\r\n<div ng-click="...">Click me</div>\r\n```\r\n\r\nWhat would really be better is this:\r\n\r\n```html\r\n<button ng-click="..." class="link">Click me</button>\r\n<button ng-click="..." class="reset">Click me</button>\r\n```\r\n\r\nplus css styles to make the classes do the right thing.\r\n\r\nHowever, it seems that this is too much to ask of developers. We are a lazy bunch and don\'t want to define new classes and reset styles for the sake of accessibility. To help folks out would be nice if `ng-click` automatically assigned the correct accessibility attributes if not already specified (`role="button" tabindex="0"`) and handle all the right input handling (e.g. pressing enter, spacebar) to communicate to assistive technology that this element is actually a button , unless a role is explicitly specified already.\r\n\r\nThis would likely increase code size a little bit, so maybe it makes sense to put this extra logic into the `ngAria` module so that it is opt-in.'
9156,'Narretz','custom directive and ng-pattern interfere in rc.2\nhttp://plnkr.co/edit/dbvC9NWcZTpWRRiUTkJU?p=preview\r\n\r\nA custom directive (to convert a text input to all-caps as the user types), combined with a `ng-pattern` for validation, prevents any text from being entered into the text input.\r\n\r\nKey HTML:\r\n\r\n\t<input type="text" ng-pattern="/^[a-zA-Z]{2}$/" name="CustomerState" ng-model="customer.CustomerState" required allcaps>\r\n\r\nJS:\r\n\r\n    \'use strict\';\r\n    var app = angular.module(\'app\', [\'ngRoute\']);\r\n\r\n    app.directive(\'allcaps\', function() {\r\n\t// use in input fields as an HTML attribute to capitalize ALL input before sending to the model:\r\n\t// <input type="text" name="JobCodeCode" ng-model="quote.JobCodeCode" capitalize>\r\n\t// copied from: http://stackoverflow.com/a/16388643/901048\r\n\treturn {\r\n\t\trequire: \'ngModel\',\r\n\t\tlink: function(scope, element, attrs, modelCtrl) {\r\n\t\t\tvar allcaps = function(oldstr) {\r\n\t\t\t\tif (oldstr == undefined) { oldstr = \'\'; }\r\n\t\t\t\tvar newstr = oldstr.toUpperCase();\r\n\t\t\t\tif (newstr!==oldstr) {\r\n\t\t\t\t\tmodelCtrl.$setViewValue(newstr);\r\n\t \t\t\t\tmodelCtrl.$render();\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(oldstr+","+newstr); // outputs capitalized characters as I type\r\n\t\t\t\treturn newstr;\r\n\t\t\t}\r\n\t\t\tmodelCtrl.$parsers.push(allcaps);\r\n\t\t\tallcaps(scope[attrs.ngModel]);  // capitalize initial value\r\n\t\t}\r\n\t};\r\n    });\r\n\r\n\r\nIn rc.2, I type in the text field and nothing appears. This code works fine in rc.1 and previous versions.\r\n\r\nIf I remove either the custom directive JS or the `ng-pattern` attribute, the text field displays text again in rc.2'
9138,'matsko',"What changes could have affected ui-mask?\nI'm cross posting to angular-ui/ui-utils#294 because I need this working. I'm trying to fix it myself, and couldn't find what changes from beta.19 to rc0+ that broke it\r\nWhen I type the cursor moves erroneously and the characters are input in wrong order. Plus, if the field has `updateOn: 'default blue', debounce: {default: 700}`, if I don't type fast enough, it clears the input, erasing everything I wrote"
9124,'btford','Added "geo" to SanitizationWhitelist\n# Description\r\nAn Uniform Resource Identifier (URI) for geographic locations using the \'geo\' scheme name. A \'geo\' URI identifies a physical location in a two- or three-dimensional coordinate reference system in a compact, simple, human-readable, and protocol-independent way.[1]\r\n\r\nThe `geo` URI, like its siblings `mailto`and `tel`, works opening the link in the correct application. In this case, Android ([Maps intents](http://developer.android.com/guide/components/intents-common.html#Maps) and BlackBerry 10 (tested on my device) devices support this feature and open the link in the native map app.\r\n\r\n# Steps to reproduce\r\nCreate a link with a geo position like: `<a href="geo:37.422,-122.084058">Google offices</a>`.\r\n\r\n# Extra information\r\n- [geo URI on Wikipedia](https://en.wikipedia.org/wiki/Geo_URI)\r\n- Included test for `geo` uri\r\n- Extra ball: Included test for `tel` uri'
9121,'tbosch','Show template name + line number for JS errors from called functions\nindex.html:\r\n```\r\n1  Hello world\r\n2  <button ng-click="doSomething()">Do it</button>\r\n```\r\n\r\nan error like:\r\n```\r\n"Error: undefined is not a function @ index.html:2\r\n    at <anonymous>:2:5\r\n    at Object.InjectedScript._evaluateOn (<anonymous>:730:39)\r\n    at Object.InjectedScript._evaluateAndWrap (<anonymous>:669:52)\r\n    at Object.InjectedScript.evaluate (<anonymous>:581:21)"\r\n```'
9109,'caitp','When I mix class + expression with ng-class, the ng-class is not being compiled if expression is broken or fails to return anything\nI noticed when I mix `ng-class` with `class + expression` (class="something-{{data}}"), if the expression fails to return anything (does not exist for example), than the `ng-class` will not get compiled at all.\r\n\r\nAlso, it only happens when the broken expression is in the middle of the `class` `<div class="stuff-{{ok}} another-{{nothing}} third-{{ok}}"></div>`. \r\n\r\nHere is fiddle example: http://jsfiddle.net/seefeld/4z4s4hhs/6/'
9084,'Narretz','Slow and unresponsiveness in Firefox\nMy app used to work normally with beta 19, now it doesn\'t anymore, the "busy script" popup always come up. I\'m using rc1 on Firefox 32\r\n\r\nIt\'s very hard to pinpoint the problem, since nothing was changed, only the angular (and the other libraries) were updated.\r\n\r\nA simple "click" yields the following callstack (massive number of calls for a simple ngClick)\r\n![clipboard01](https://cloud.githubusercontent.com/assets/461084/4267708/41d10a56-3ca1-11e4-9aac-18f0aea0329e.png)\r\n\r\nAround 7-8 seconds to be able to click again'
9063,'Narretz','Different behavior for required and ng-required for initial values\nI\'m noticing different behavior when using `required` vs `ng-required` when combined with `ng-change`.  When the initial model value is any empty value besides `undefined` (i.e. `null` or `""`), `ng-changed` is fired when using `ng-required="true"`, but not when using the basic `required`.\r\n\r\nIt also seems that this behavior has changed from 1.3.0 rc0 and rc1.  In rc0, the change handler is never called.\r\n\r\nThe behavior for `ng-required` in rc1 makes sense to me; validation is run for the initial value, `null` and `""` do not pass validation so the model value is set to `undefined`, and sense `undefined` does not equal the initial value `ng-change` is evaluated.  But shouldn\'t the two variants behave the same?\r\n\r\nHere is a plunker demonstrating the differences: http://plnkr.co/edit/e1J1VnUSpR8xVhdKIXVY?p=preview\r\n\r\nI\'m not sure, but this might be related to #8949 and/or #9001'
8971,'matsko',"order of item removal ng-leave on ng-repeat\nIs there any way to change of order of how items are being removed? Currently it removes them from the first to the last, I want it the other way around. Someone on SO [suggested](http://stackoverflow.com/a/23416710/301596) changing the source code, but it's been a while since he wrote that, is there a better way now?\r\n\r\ncc once again @matsko "
8914,'petebacondarwin',"Nested transclude issue 2\n(reposting from (comment)[https://github.com/angular/angular.js/pull/7387#issuecomment-54363122])\r\nJSFiddle example [here](http://jsfiddle.net/xj00p270/) – in the second test, the nested transclude is ignored.\r\n\r\nIt seems to lose the transcluded content when the ng-transclude is applied to _the same element as the nested directive_ within the outer directive's template.\r\n\r\nIt works if the ng-transclude is applied to a wrapper element inside the nested directive (but then you're left with an irritating wrapper element)."
8812,'matsko',"Element with ng-show=false animates initially when it's in a bootstrap-ui modal\nThis is a follow-up to https://github.com/angular/angular.js/issues/5262 It turns out that the issue I described is different from the original issue described. In my case, I have a ng-show animation inside a bootstrap-ui modal that is initially set to false. When the modal opens, however, the element is animated from shown to hidden, while it should simply be not shown. I have posted a workaround here: https://github.com/angular/angular.js/issues/5262#issuecomment-41692920\r\n"
8776,'rodyhaddad','Update expression.ngdoc\nPlease, update the section on one-time bindings by another example showing how the feature can be used with filter (chains). I was very surprised - positively - when I discovered that feature today and wished I could have read something about it before, which would have saved me some time.'
8742,'matsko','$animate doesn\'t animate elements in multiElement: true directives\nFor instance, if you have:\r\n```\r\n<div ng-init="things = [ 1, 2, 3 ]" ng-repeat-start="thing in things">Thing:</div>\r\n<div ng-repeat-end class="animate-me">{{ thing }}</div>\r\n```\r\nwith all the corresponding CSS to support animating .animate-me elements, ain\'t nuthin\' gon\' happen, son. Which I see as a problem. It looks like it comes down to $animate relying heavily on extractElementNode, which just picks out the first element (non-comment) in the element set, which is then played with. That said, the title of this issue is misleading because $animate animates the *first* element of a multiElement: true directive perfectly fine as always. It\'s the subsequent elements $animate leaves in the lonely, static dust. Because of extractElementNode in my estimation.\r\n\r\nI\'d be happy to dig into modifying $animate to acting on an array of element nodes returned by extractElementNode. That said, I\'m not sure if y\'all have already been down that road and run into giants or monsters or any other otherwise practically insurmountable obstacles.\r\n\r\nThanks! (Btw, I seriously, passionately, deeply, desperately, grotesquely love this framework, just fyi.)'
8695,'mzgol',"test(jQuery): test not firing $destroy on jQuery.cleanData with jQuery UI\nSo far it wasn't tested that Angular's logic for skipping it triggering\r\nthe $destroy event on jQuery.cleanData in the replaceWith internal function\r\nworks correctly when Angular is not the last one to patch the cleanData method\r\n(e.g. if jQuery UI does the patching later). This commits adds the relevant\r\ntest.\r\n\r\nRef #8486\r\n\r\ncc @IgorMinar"
8660,'btford','docs($location): add note about breaking anchor links\nAs explained in #4608, $location injection can cause issues by inserting a / after a hash in the url, if html5mode is not enabled. Possible fix is in #8508.'
8578,'matsko','ngClass array syntax behavior not according to documentation\nIs this a bug or should the documentation be updated?\r\n\r\nDocumentation:\r\n> If the expression evaluates to an array, each element of the array should be a string that is one or more space-delimited class names.\r\n\r\nHowever if an array element has multiple, space-delimited, classes only the last one appears to be applied. This behavior can be seen in the example in the documentation for ngClass.\r\n\r\nMoreover; the example code for ngClass also suggest that an array element can only have one class - the placeholder text is "Type: bold, strike or red". \r\n'
8475,'juliemr','Add logic for Angular to inject mock modules itself\nsee https://github.com/angular/protractor/pull/1155'
8408,'btford','ng-options is evaluated before ng-if causing invalid "null" option\nOverview\r\n------\r\n`ng-if` is not used when determining the "null" option for ng-options. Consider the following select:\r\n\r\n    <select ng-model="ctrl.color" ng-options="color.name for color in ctrl.colors">\r\n      <option ng-if="false" value="">A</option>\r\n      <option ng-if="true" value="">B</option>\r\n    </select>\r\n\r\nI would expect the above example to produce a select with the null option `B`. However, ng-options actually finds `A` as being the correct null option ([see selectDirective](https://github.com/angular/angular.js/blob/11f5aeeee952a395edaf54e3277674f211a82fc7/src/ng/directive/select.js#L235)). After `A` is set as the null option, `ng-if` removes it from the DOM, removing the null option as well. It would seem that `ng-if` needs to be evaluated before `ng-options`. I looked through the source and was not able to find a simple fix, but I\'m not familiar with angular\'s source either.\r\n\r\nReproduce the error\r\n------\r\n[Simple example on Plunker](http://plnkr.co/edit/anuI893vdeoQ8uskIpeG?p=preview)\r\n[Stack overflow question that lead me to this](http://stackoverflow.com/q/25026702/912563)\r\n[Another, more complex, Plunker from the above stack overflow](http://plnkr.co/edit/C9Glo7rNH7HbYKHovDA3?p=preview)\r\n\r\nUse Case\r\n------\r\nI have a select directive that is used in multiple places in different ways. The logic is 100% the same, the only difference is the null option:\r\n   - As a filter\r\n     - When used as a filter, the null option signifies that all options are included. For a color model it would be something like \'Colors - All\'\r\n   - As an optional field\r\n      - When used as an optional field, the null option is either blank or \'Colors - None\'\r\n   - As a required field\r\n      - When used as a required field, there is either no null option or it is set to \'--Please select a color--\', depending if the model has a default value or not.\r\n\r\nSince the logic is the same for all three of these cases and the only difference is the null option prompt, it doesn\'t make sense to make 3 separate directives to handle the different cases.\r\n\r\nAngular Version\r\n------\r\nI\'ve verified in both 1.2.21 & 1.3.0.beta.X. I haven\'t looked at older versions.\r\n\r\nBrowsers and Operating System\r\n------\r\nThis appears to be an AngularJS bug and not a browser issue. However, I tested and verified the bug in both Chrome 36.0.1985.125 & IE 11 on Windows 8.'
8379,'caitp',"Support recursive trees of directives\nI had some ideas about implementing this during the meeting, so I might have a go at bikeshedding something over the next few weeks.\r\n\r\nWhat it comes down to is basically conditionally inserting DOM into a compiled template, based on some state. Sort of an implicit `ng-if` that gets resolved at compile-time, or else prevents `ng-if` from recursively linking the same template.\r\n\r\nAnyways, I'd like to sort out a way to do that because it's a pretty cool and useful structure, and other implementations (like http://caitp.github.io/ui-comments/#/) have depended on some ugly hacks which are better to avoid.\r\n\r\nI'm sure this has been proposed already, but I can't find any of those issues right now.\r\n\r\nAnyways, I'll throw something together and people can see what they think\r\n\r\n**use cases**\r\n\r\n- Comments\r\n- Org-charts\r\n- Graphs\r\n- Product charts\r\n- etc..."
8375,'matsko','ng-view dynamic CSS3 animations \nHi. I created a module that dynamically set the animation class for `ng-view` based on the DOM element attribute. \r\n\r\nHere\'s a module:\r\n``` javascript\r\n/**\r\n * The following code adds support for `ng-new` dynamic transitions.\r\n */\r\nangular.module(\'ngAnimateView\', [\'ngAnimate\'])\r\n\r\n// Implementing the `ng-view` dynamic animations. We extend the `$rootScope`\r\n// thus every controller will have access to all new methods.\r\n.run(function($rootScope, $location, $document) {\r\n\r\n  // Setting the default `ng-view` animation class name.\r\n  $rootScope.viewDefaultAnimationClass = \'\';\r\n  // Setting the currently active `ng-view` animation class name to default\r\n  // class name.\r\n  $rootScope.viewAnimationClass = $rootScope.viewDefaultAnimationClass;\r\n\r\n  // Sets the `ng-view` animation class name. If the parameter is `null` then\r\n  // the default animation will be set.\r\n  $rootScope.setViewAnimationClass = function(anim) {\r\n    $rootScope.viewAnimationClass = anim || $rootScope.viewDefaultAnimationClass;\r\n  };\r\n  // Returns the current `ng-view` animation class name.\r\n  $rootScope.getViewAnimationClass = function(anim) {\r\n    return $rootScope.viewAnimationClass;\r\n  };\r\n\r\n  // Navigates to the requested URL with desired animation.\r\n  $rootScope.to = function(url, anim) {\r\n    $rootScope.setViewAnimationClass(anim);\r\n    $location.path(url);\r\n  };\r\n})\r\n\r\n// Extending the built-in `ng-href` directive with the support for transitions.\r\n// If the `ng-view-animation` attribute exists on a DOM element that triggered\r\n// the `ng-href` event then the `ng-view` will use this animation class for\r\n// page transitions.\r\n.directive(\'ngHref\', function($rootScope, $location) {\r\n  return {\r\n    priority: 100, // make sure it runs before the built-in `ng-href` directive\r\n    link: function(scope, element, attr) {\r\n      element.bind(\'click\', function() {\r\n        $rootScope.setViewAnimationClass(attr.ngViewAnimation);\r\n      })\r\n    }\r\n  }\r\n});\r\n```\r\nand you would use it like this:\r\n``` html\r\n<ng-view class="{{viewAnimationClass}}" />\r\n<a ng-href=\'/where_to_go\' ng-view-animation="fade">Go back</a>\r\n```\r\nBtw, it would be very nice to have that kind of feature built-in. It would add a new level of UI experience to every angular app. Well ... I thought my module will fix my problem but nooooo :).\r\n\r\nThe module works but when a user clicks the back/forward button in a browser the class name does not change so the last animation class is always active. [Here](http://embed.plnkr.co/4agNIV94lCvJi1iQrXY9/preview) is an example app with the problem I described (I borrowed this example from @lockenj).\r\n\r\nThis thing is really annoying and I can\'t use animations if that can\'t be fixed because it destroys the whole concept of having dynamic animations on `ng-view`. Users often use these browser buttons. I hope a smart guy will tell me that this is something that could be fixed, that it is already built into angular, maybe that this is a bug or maybe there is a library that offers this out of the box. Thanks!'
8316,'btford','Feature Request: Support "select" for ng-transclude for template inheritance\nPolymer/custom templates allow to select specific DOM inside templates. It looks like this:\r\n\r\n````\r\n<polymer-element name="x-foo" noscript>\r\n  <template>\r\n    <content select="p"></content>\r\n    <content></content>\r\n  </template>\r\n</polymer-element>\r\n````\r\n\r\nThe same would be great for `ng-transclude`.\r\nWith this feature you could easily create a version of `ng-include` which supports _block extension/template inheritance_ (similar to https://github.com/wmluke/angular-blocks).\r\n\r\nExample:\r\n````\r\n// skeleton.html\r\n<header ng-transclude select="#header"></header>\r\n<h1>Welcome to my site!</h1>\r\n<main ng-transclude></main>\r\n<hr>\r\n<footer ng-transclude select="#footer"></footer>\r\n````\r\n````\r\n// index.html\r\n<body>\r\n  <ng-extend src="\'skeleton.html\'">\r\n    <div id="header">My header</div>\r\n    <div class="content">Some articles...</div>\r\n    <!-- even nesting ng-extend and ng-include could work -->\r\n    <ng-include id="footer" src="\'footer.html\'"></ng-include>\r\n  </ng-extend>\r\n</body>\r\n````\r\n````\r\n// index.html - compiled (pseudo code)\r\n<body>\r\n  <ng-extend src="\'skeleton.html\'">\r\n    <header ng-transclude select="#header">\r\n      <div id="header">My header</div>\r\n    </header>\r\n    <h1>Welcome to my site!</h1>\r\n    <main ng-transclude>\r\n      <div class="content">Some articles...</div>\r\n    </main>\r\n    <hr>\r\n    <footer ng-transclude select="#footer">\r\n      <ng-include id="footer" src="\'footer.html\'">\r\n        <!-- content of footer.html -->\r\n      </ng-include>\r\n    </footer>\r\n  </ng-extend>\r\n</body>\r\n````'
8263,'IgorMinar','App in iframe throws exception when $location tries to manipulate window.history (Firefox 30.0) (Angular 1.2.20)\n# Plunkr\r\n\r\nhttp://plnkr.co/edit/7eQ4bBYc3R6UVnvPDiii\r\n\r\n# Environment / Pre-conditions\r\nFirefox 30.0\r\nAngularJS 1.2.20\r\nAngularJS app must be loaded in an iframe.  *Iframe domain must be different than main window domain.*\r\n\r\n# Explanation\r\n\r\nCalls like $location.path() manipulate the browser history using the window.history object.  In Firefox 30.0, if angular is loaded within an iframe, window.history appears to refer to main window history object, not an iframe-specific instance.  If iframe is hosted on a different domain from the main window, calls to history.replaceState() and other similar methods violate Same Origin Policy and cause exceptions and (ultimately) odd/undefined behavior.\r\n\r\nIn many cases the cause of the exception is Browser::url().\r\n\r\n'
8174,'btford',"Module 'ngLocale' is not available! is misleading\nI think John Papa covered it pretty well.  This error message is deceptive and time wasting.  If you are looking for module A, gripe about module A, not ngLocale!\r\n\r\nhttp://www.johnpapa.net/easy-fix-to-a-common-angular-module-error/"
8166,'matsko',"bug: ng-switch animation doesn't work \n**Request Type:** bug\r\n\r\n**How to reproduce:**\r\n - Visit http://plnkr.co/edit/IctQYWhERYUBfzLkFq43?p=preview\r\n - Switch between slides 1 and 2\r\n\r\n**Component(s):** ngAnimate\r\n\r\n**Impact:** small\r\n\r\n**Complexity:** small\r\n\r\n**This issue is related to:** ngAnimate and ngSwitch animation\r\n\r\n**Detailed Description:**\r\nIt seems when you try to `ngAnimate` the `ngSwitch` component on a `form` element, only the `ng-leave` item is animated. The `ng-enter` contains inline styling to remove the animation. If I alter the classes manually then I can see that the entering form should be able to be animated\r\n\r\n**Other Comments:**"
8153,'Narretz',"Better documentation for ngRepeat disallowing duplicate elements\n1. The ngRepeat docs need an info box that makes it clear duplicate items are disallowed\r\n2.  and the track by explanation could also be simplified\r\n3.  the migration guide from 1.0 -> 1.2 doesn't mention the breaking change"
8146,'btford','add number 6 for jshint with ecmascript3 option\nfor ie 8 and lower'
8127,'btford',"Unhelpful error message when passing wrong type to module.directive()\nWhen using a Javascript module system like Closure, it's possible to make a mistake like this:\r\n\r\n```javascript\r\ngoog.provide('foo.barDirective');  // sets foo.barDirective = {}\r\n\r\n// typo, should be barDirective\r\nfoo.barDirectives = function() { return { link: function() {}}; \r\n\r\napp.directive('bar', foo.barDirective) // foo.barDirective is still {}\r\n```\r\n\r\nWhen an element using the directive is compiled, an error is raised with the message: ```Argument 'fn' is not a function, got Object```\r\n\r\nHowever, the information about what directive was being instantiated is lost, making it very difficult to trace the source of the error.  Ideally, this information would be passed to the error handler.\r\n\r\nPlunker: http://plnkr.co/edit/ly4g1yFFBpnSmShzNlcf?p=preview"
8120,'btford',"Some clarification on the 'matches' terminology.\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): $compile\n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\n\n\n**Other Comments:**\n\nAdded example with reference to Mozilla's Element.matches.\r\nAlso added another example of Element directive."
8089,'matsko','ngMessage and ngBind do not work together\nIf you have a custom validation key (such as `server` in this case), and try bind the `ngMessage` element to some object you presumably have the error message in, it does not work.\r\n\r\n```html\r\n<div ng-if="myForm.test.$dirty" ng-messages="myForm.test.$error">\r\n    <span ng-message="server" ng-bind="errors.test"></span>\r\n</div>\r\n```\r\n\r\nThe above does not work, the span remains empty but visible and `errors.test` is indeed populated (and visible in scope, by trying `angular.element($0).errors.test`).\r\n\r\nIf you use a child, like so:\r\n\r\n```html\r\n<span ng-message="server">\r\n    <span ng-bind="errors.test"></span>\r\n</span>\r\n```\r\n\r\nThis works correctly. \r\n\r\nIs this expected functionality or a bug? I have no issue with having to use a child if it is expected to behave this way.\r\n\r\nExample [here](http://jsfiddle.net/U3e2t/).'
8033,'matsko','ng-hide does work when using css keyframe sprite animations\nWhen using CSS3 keyframe animations ng-hide does not work instantaneously but delayed. \r\n\r\n**CSS Sprite animation Code (stylus):**\r\n```css\r\n.spinner\r\n  width 100%\r\n  height 30px\r\n  background-image url("../assets/images/spinner_sprite.png")\r\n  animation play 1s steps(19) infinite\r\n  background-repeat no-repeat\r\n@keyframes play\r\n  from \r\n    background-position center 0px\r\n  to \r\n    background-position center -570px\r\n```\r\n\r\n**Dirty Fix**\r\n```css\r\n.ng-hide { display: none !important; }\r\n```\r\n\r\nfixes the issue but does not feel right :/\r\n\r\n'
8001,'matsko','Element being clicked on does not fade out (animate)\nElement being clicked on does not fade out (animate), while other elements animate OK. \r\n\r\nI am using \r\nangularjs/1.2.18/angular.min.js and\r\nangularjs/1.2.18/angular-animate.js\r\n\r\nThis is a simple way I have managed to reproduce the issue in IE10, Opera 21 and Chrome 35\r\n\r\nhttp://plnkr.co/edit/LQsTF7pJRj38fdvHlbjn?p=preview\r\n\r\nNote: adding a  &lt;br /&gt; element between the two anchor elements fixes the problem in Opera and Chrome, but not in IE.\r\n\r\n```html\r\n<!doctype html>\r\n<html lang="en">\r\n<head>\r\n \r\n  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular.min.js"></script>\r\n  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular-animate.js"></script>\r\n  \r\n</head>\r\n<body ng-app="ngAnimate">\r\n\r\n<style>\r\n  .animate-show {\r\n    -webkit-transition:all linear 1s;\r\n    transition:all linear 1s;\r\n    line-height:20px;\r\n    opacity:1;\r\n  }\r\n\r\n  .animate-show.ng-hide {\r\n    line-height:0;\r\n    opacity:0;\r\n  }\r\n</style>\r\n\r\n<p>\r\n  <!--these two anchors are identical-->\r\n  <!--click this anchor, it disappears immediately, -->\r\n  <!--while the other anchor fades out-->\r\n  \r\n  <a href="#" class="animate-show" \r\n    ng-show="m===undefined" \r\n    ng-click="m=true"  \r\n    ng-model="m">\r\n    Click Me\r\n  </a>\r\n  \r\n  <a href="#" class="animate-show" \r\n    ng-show="m===undefined" \r\n    ng-click="m=true"  \r\n    ng-model="m">\r\n    Click Me\r\n  </a>\r\n</p>\r\n</body>\r\n</html>\r\n```'
7992,'caitp',"$q reports errors in promise callbacks even when they are caught\nPlunker: http://plnkr.co/edit/5vMj4AJibWcnTKYR5z73?p=preview\r\n\r\nI have caught the error and used it to display useful information to my user in the UI. However, Angular still logs a big ol' stack trace to the console.\r\n\r\nThis isn't a spec compliance issue (since the error isn't thrown, just logged), but it's a developer ergonomics issue. I don't understand how using $q on any reasonably large promise project would not just result in a console filled with spurious errors.\r\n\r\nAs always, the correct time to report a rejection as unhandled is debatable. Bluebird does it at the end of turn, whereas Q doesn't do it at all, relying on `.done()` instead. But this isn't even about unhandled rejections---it's about all rejections!\r\n\r\nThe Bluebird strategy seems like a pure win: it would remove this spurious reporting, but keep it for any cases that could potentially be real."
7932,'btford','Adds titles to various links in docs and src for improved accessibility.\n'
7862,'IgorMinar',"Adding XSRF header when request is NOT same origin, but is TRUSTED origin (subdomain)\nSo this may (probably) just be that I'm not understanding XSRF prevention correctly, so feel free to tell me I'm an idiot. But currently in the code (https://github.com/angular/angular.js/blob/dd1d189ee785a37fe1d9bddf3818152db6aa210a/src/ng/http.js#L883-L893), angular is checking if the requested URL is same origin with `urlIsSameOrigin(config.url)`. If it's not same origin, angular does not add the XSRF header token (`X-XSRF-TOKEN`).\r\n\r\nNow, that's all good. Except that I'm requesting `api.example.com` from `example.com`, which fails the same origin check. Should this be allowed? Or does that somehow completely break the XSRF prevention?"
7821,'matsko','Animate causes error if on repeat on a changing array with ng-if\nThis is a bit of an edge case. But when an array changes while ng-animate is evaluating an ng-if, and this happens quickly there is an error:\r\nTypeError: Cannot read property \'ng-leave\' of undefined\r\n\r\nThis only happens when done quickly, but I have a drag an drop implementation that if dragging and dropping quickly triggers the issue.\r\n\r\nFor a demo of the issue:\r\nhttp://plnkr.co/edit/FMGx6QOElQvRI5K6cbNq?p=preview\r\n\r\nWhen bashing "toggle" quickly the error will occur.'
7800,'rodyhaddad','docs($rootScope): wrong parameter name, grammar\n'
7777,'btford','docs(guide/services): Replaced broken link\nReplaced broken link with link to more relevant API'
7738,'btford',"Update filters.js documentation\nRequest Type: docs\n\nHow to reproduce: \n\nComponent(s): misc core\n\nImpact: small\n\nComplexity: small\n\nThis issue is related to: \n\n**Detailed Description:**\n\nAdded documentation for the use of the 'currency' filter (added examples and tests for Euro and Rupee). Tests have not been tested.\n\n**Other Comments:**\n\nAdded examples for currency (Euro and Rupee). Please confirm that the Rupee and the Euro sign in the tests will work as expected."
7631,'btford',"$cookies doesn't represent current state of document.cookie\nIn an `$http` login call that we make, the resulting header has a `Set-Cookie`. While the cookie does get set in the browser, i.e. I can see it in `document.cookie`, it doesn't make it's way to `$cookies`.\r\n\r\nBelow is the response header setting the cookie:\r\n![response-header-cookie](https://cloud.githubusercontent.com/assets/167443/3122303/ca255f4c-e765-11e3-8248-d459c4e194c0.png)\r\n\r\nAnd here is `document.cookie` indicating the cookie exists but `$cookies` doesn't see it.\r\n![nothing-in-cookies](https://cloud.githubusercontent.com/assets/167443/3122307/d87924d4-e765-11e3-8d62-76ef00cb61c6.png)\r\n\r\nThe strangest thing is on the next Angular action I take, `$cookies` has the cookie. The example above is already wrapping the `$cookies` check in a `$timeout` to give the browser time to digest.\r\n\r\nThe workaround right now is to parse `document.cookie` and set `$cookies` manually, but this is super hacky."
7404,'matsko','ngAnimate leave class removed before element is removed from the DOM\nWhen running `$animate.leave(element)` (in Angular 1.2.16), the following events occur in order:\r\n\r\n1. `.ng-animate` is added to the element.\r\n2. `.ng-leave` is added to the element.\r\n3. `.ng-leave-active` is added to the element.\r\n4. The element animates.\r\n5. `.ng-leave-active` is removed from the element.\r\n6. `.ng-leave` is removed from the element.\r\n7. `.ng-animate` is removed from the element.\r\n8. The element is removed from the DOM.\r\n\r\nOn mobile, this ordering is causing the element to flash to a pre-animation state between steps 5 and 8 due to the `.ng-leave` classes being removed.\r\n\r\nParticularly in the case of `ng-leave`, since the element is being removed from the DOM it should be possible to avoid removing those classes to ensure that the element is removed from the DOM without there being any point in time where the classes are not applied.'
7338,'matsko',"Javascript animations fail to fire within content instantiated by ngRoute\nI've created a simple example where a directive triggers a javascript animation within its link function. If this is placed directly into index.html, with an app on the html tag of the document, the animation is triggered fine, but if the directive is included within a template that is specified for a route, the directive code executes, but the animation is not triggered. I've done this using $animate.addClass(element, 'test') within the directive and inside the animation's addClass handler I've got the conditional if(check className === 'test'). I've even added a timeout as I thought it might be a race conditions thing, but that didn't seem to fix it.\r\n\r\nThe strange thing is that the test class is being added to the element in question, but that in the case where it fails, ng-animate is not. I've also experienced situations where the animation does work, but only intermittently, although I couldn't seem to recreated this in Plunkr. If you need a code sample of this I can zip and send.\r\n\r\nhttp://plnkr.co/edit/MUUbiKureqatyoG9HKHQ?p=preview\r\n\r\n"
7303,'btford','Update contribution docs concerning cross-browser tests\nThere are more tests that run on the Travis server than are listed in [the unit testing section in the Contribute docs](https://docs.angularjs.org/misc/contribute#running-the-unit-test-suite). `grunt test:unit` doesn\'t include the cross-browser tests, and there are no instructions on how to run all of the tests that are run on Travis. Also, some of the tests listed as possible in the docs don\'t work on a clean, updated fork - note Opera not being registered, below. \r\n\r\nThere may be an easy fix to this; for instance, suggesting that the users set up a Saucelabs account, or use Travis\'s, or that they preinstall a few extra modules. Either way, it should be in the docs. \r\n\r\n```\r\n~/Github/angular.js $ grunt test:unit --browsers Opera,Firefox\r\nRunning "tests:jqlite" (tests) task\r\nINFO [karma]: Karma v0.12.9 server started at http://localhost:9876/\r\nWARN [launcher]: Can not load "Opera", it is not registered!\r\n  Perhaps you are missing some plugin?\r\nINFO [launcher]: Starting browser Firefox\r\nINFO [Firefox 28.0.0 (Mac OS X 10.9)]: Connected on socket 0W2CN5mA2DzUtzaP0NLB with id 76848034\r\nFirefox 28.0.0 (Mac OS X 10.9): Executed 3000 of 3000 SUCCESS (8.791 secs / 8.511 secs)\r\n\r\nRunning "tests:jquery" (tests) task\r\nINFO [karma]: Karma v0.12.9 server started at http://localhost:9876/\r\nWARN [launcher]: Can not load "Opera", it is not registered!\r\n  Perhaps you are missing some plugin?\r\nINFO [launcher]: Starting browser Firefox\r\nINFO [Firefox 28.0.0 (Mac OS X 10.9)]: Connected on socket 9EMnouvPQ0um3jUg0QBr with id 68862994\r\nFirefox 28.0.0 (Mac OS X 10.9): Executed 3009 of 3009 SUCCESS (9.463 secs / 9.21 secs)\r\n\r\nRunning "tests:modules" (tests) task\r\nINFO [karma]: Karma v0.12.9 server started at http://localhost:9876/\r\nWARN [launcher]: Can not load "Opera", it is not registered!\r\n  Perhaps you are missing some plugin?\r\nINFO [launcher]: Starting browser Firefox\r\nINFO [Firefox 28.0.0 (Mac OS X 10.9)]: Connected on socket wM6Q1mnnJFJG2f0E0S51 with id 33078552\r\nFirefox 28.0.0 (Mac OS X 10.9): Executed 385 of 385 SUCCESS (1.134 secs / 1.086 secs)\r\n\r\nDone, without errors.\r\n```\r\n\r\n**Version**: v1.3.0-beta.7\r\n**Reproducible**: Always\r\n**OS**: OSX 10.9.2\r\n**Steps to reproduce**: \r\n  * Fork project, get master  \r\n  * Run `grunt test:unit --browsers Opera,Firefox`  '
7273,'btford',"feature(misc core): add ngId directive\nRequest Type: feature\r\n\r\nHow to reproduce: \r\n\r\nComponent(s): misc core\r\n\r\nImpact: large\r\n\r\nComplexity: medium\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\nSee below.\r\n\r\n**Other Comments:**\r\n\r\nThere wasn't an ngId directive. While ngClass works a lot of the time - and ngClassOdd/Even and all of the $animate effects are incredibly useful - a directive that switches Ids would help with the way I configure Sass files, and would just be generally useful. I couldn't find any mention of an ngId directive around, probably due to poor google-fu, but here's a start. "
7222,'matsko',"$animate.removeClass() doesn't work if addClass animation incomplete\nRequest Type: bug\r\n\r\n*How to reproduce:* \r\n* Use $animate.addClass() to add a class to an element, e.g. 'super'\r\n* While the 'super-add' class has been added to the element, and before the 'super' class has been added, use $animate.removeClass() to remove the 'super' class. \r\n* When the jqLiteRemoveClass() function is called to remove the 'super' class, it will not be removed due to the element not having that class yet. \r\n* In the next tick, the 'super-add' class will be removed from the element, and the 'super' class is added, even though it was requested to be removed.\r\n\r\n*Component(s):* ngAnimate, jqLite\r\n\r\n*Impact:* medium\r\n\r\n*Complexity:* small\r\n\r\n*Detailed Description:*\r\n\r\nThe way I got this to occur was by using ng-class with the object syntax where the condition for one of the classes was initially true but then became false (possibly within the same $digest, I'm not sure). Hence the class was first added but then (unsuccessfully) removed.\r\n\r\nI would imagine that the solution would be to check for active 'addClass' animations when trying to remove classes and if there is one for the class to be removed, cancelling it."
7012,'vojtajina',"optimize sortedKeys function\nRequest Type: refactor\n\nHow to reproduce: \n\nComponent(s): \n\nImpact: medium\n\nComplexity: small\n\nThis issue is related to: performance regression\n\n**Detailed Description:**\n\nnative function Object.keys is much more faster than for loop when getting the array of keys.\n\n**Other Comments:**\n\nif there is Object.keys, it's much faster than for loop .\r\nThis is a test example:\r\nhttp://jsperf.com/angular-object-keys-vs-for-loop"
6974,'IgorMinar',"scope is destroyed too early for ngView and ngInclude causing ngClass not to update\nA popular animation trick is to perform a back and forward-style animation in using ngClass on a ngView or ngInclude element. This used to work with older versions of ngAnimate (pre 1.2) since ngAnimate didn't use CSS classes for animations.\r\n\r\nRight now if you try and perform an animation that, when the route changes, updates ngClass and triggers the leave animation to be different, it won't reflect on the leaving element. This is because ngView and ngInclude both destroy the scope first and then trigger the animation. However, since an extra digest is required for a class to update via ngClass upon routeChange, the newly updated CSS classes won't show up in the element.\r\n\r\nTherefore, we need to fix ngView and ngInclude to destroy the scope after a single digest loop via $$postDigest or something. \r\n\r\nDupes: #7515 "
6925,'matsko',"perf(ngAnimate): closeAnimation synchronously when no animation\nRequest Type: perf\r\n\r\nHow to reproduce: Enter an ng-view with ng-repeat items inside, check Developer Tools' timeline.\r\n\r\nComponent(s): ngAnimate\r\n\r\nImpact: medium\r\n\r\nComplexity: small\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\nWhen a view with animatable (e.g., ng-repeat) children is entered, the children don't get a structural animation since the parent is being animated. This is noticed in performAnimation with a call to animationsDisabled(...) and the code calls closeAnimation. closeAnimation is asynchronous when the animation that could have been run is structural, but this is unnecessary in this case as nothing has been done. One such callback costs 0.2 - 0.5ms on an iPhone5, a view with 100 items will cost 20ms of javascript execution.\r\n\r\n**Other Comments:**"
6898,'petebacondarwin','ng-include regression not fully fixed by #5247\nIf I have a terminal directive on the same element as ng-include I cannot get access to element when linking occurs inside my directive.\r\n\r\nIn angular 1.2.1 -> 1.2.2 there was a regression with ng-include that caused this problem for all directives.\r\n\r\n#5247 fixed the problem for directives with terminal: false\r\n\r\nIt is still a problem for directives with terminal: true.\r\n\r\nexample:\r\nhttp://plnkr.co/edit/ehqS2VOFTvPLt5Z7iXs1'
6890,'btford','fix($sniffer) & fix(ng-input): add check for older webkit browsers and extra milliseconds for iOS7\n**Request Type**: bug\r\n\r\n#### How to reproduce:\r\n\r\n- $sniffer: Create a multipage app with redirects in angular and test it in Android or Safari 5 or lower, the app will end up in an endless loop and eventually crash the browser.\r\n- ng-input: Create a form with validation and try to submit on an iOS7 device, the last character never gets sent, so the form always returns invalid.\r\n\r\n**Component(s)**: misc core\r\n\r\n**Impact**: medium\r\n\r\n**Complexity**: small\r\n\r\n**This issue is related to**: [#6733](https://github.com/angular/angular.js/pull/6733)\r\n\r\n#### Detailed Description:\r\n\r\nWe created a responsive web app in angular, but ran into two issues:\r\n\r\n* older webkit engines (< 534) have problem with pushState, these are used in Safari 5 and lower and the Android default browser (not Chrome)\r\n* iOS7 the change event is fired before the value is updated'
6718,'matsko','autoscroll on long pages with animation causes ugly page jump\nI have a site where user is navigating via top menu and pages are injected via ngView.\r\n\r\nHaving animations on long pages with autoscroll on ngView causes problems when user scrolls down on one page and then goes to another. The second page is transitioned including remembered scroll and then jumps to the top.\r\n\r\nReproduction steps:\r\n1. Open http://jsfiddle.net/lobodpav/jfLcx/2/ in WebKit browser\r\n2. Click Link1\r\n3. Scroll down\r\n4. Click Link2\r\n5. Expected result: Page2 is scrolled up and nicely animated\r\n6. Actual result: Page2 is first animated and then jumps to the top causing an ugly effect\r\n'
6696,'auser','Angular guide doesn\'t work on Ipad 1 - Safari\nThere is a problem with loading guide (http://docs.angularjs.org/guide) on Ipad 1 iOS 5.1.1 - Safari \r\n\r\nI see only "loading" and nothing else - there is an error in console (particular referred line depends on guide version):\r\n\r\nJavascript: Error on line 86 - http://code.angularjs.org/1.2.14/angular.min.js - TypeError: \'undefined\' is not a function\r\n\r\nLast working version is - http://code.angularjs.org/1.1.5/docs/guide'
6577,'btford','html 5 history api support detection not sufficient for BlackBerry OS 6\nHi,\r\n\r\n**Overview of the issue:**\r\nIn a BlackBerry Tourch 9800 I got a ```infdig``` exception when routing to a different state:\r\n\r\n```\r\nError: [$rootScope:infdig] 10 $digest() iterations reached. Aborting!\r\nWatchers fired in the last 5 iterations: [["fn: $locationWatch; newVal: 7; oldVal: 6"],["fn: $locationWatch; newVal: 8; oldVal: 7"],["fn: $locationWatch; newVal: 9; oldVal: 8"],["fn: $locationWatch; newVal: 10; oldVal: 9"],["fn: $locationWatch; newVal: 11; oldVal: 10"]]\r\nWithout jQuery, all click listeners got an empty event object if the link is annotated with ng-click.\r\n```\r\n\r\n**Angular Version**\r\n1.2.14\r\n\r\n**Browsers and Operating System**\r\nBlackBerry Tourch 9800\r\nuser agent string:\r\n\r\n```\r\nblackberry: 6 mozilla/5.0 (blackberry; u; blackberry 9800; de) applewebkit/534.1+ (khtml, like gecko) version/6.0.0.337 mobile safari/534.1+\r\n```\r\n\r\n**Possible fix:**\r\n\r\n```\r\n/*\r\n * angulars $locationWatch seems to require that a history.pushState is reflected in location.href otherwise a infdig exception is thrown.\r\n * \r\n * To test your browser: http://jsfiddle.net/scheffield/2dfqL/show\r\n */\r\nangular.module(\'app\').config(function($provide) {\r\n   $provide.decorator(\'$sniffer\', [ \'$delegate\', \'$window\', function($delegate, $window){\r\n       \r\n       var useragent = angular.lowercase(($window.navigator || {}).userAgent);\r\n       // derived from\r\n       // http://supportforums.blackberry.com/t5/Web-and-WebWorks-Development/How-to-detect-the-BlackBerry-Browser/ta-p/559862\r\n       // should work for BB OS 6+\r\n       var blackberry = parseFloat((/.*(blackberry|bb).*version\\/(\\d+\\.\\d+)/.exec(useragent) || [])[2], 10);\r\n       var _history = $delegate.history;\r\n       \r\n       $delegate.history = _history && !(blackberry < 7.0);\r\n       $delegate.blackberry = blackberry;\r\n       \r\n       return $delegate;\r\n   }]); \r\n});\r\n```'
6493,'btford','fix($compile): prevent inlined JSON values in directive templates from being broken by a wrong replacement of \'}}\' with the user-defined endSymbol.\nRequest Type: bug\r\n\r\nHow to reproduce:\r\n\r\n1. Change the *startSymbol* and *endSymbol* in *$interpolateProvider*.\r\n2. Put this inside a Directive template:\r\n```\r\n<div data-context=\'{"context":{"id":3,"type":"page"}}">\r\n```\r\nResult: the \'}}\' at the end of the embedded JSON data gets transformed to the endSymbol defined by the developer.\r\n\r\nComponent(s): $compile\r\n\r\nImpact: small\r\n\r\nComplexity: medium\r\n\r\nThis issue is related to: \r\n\r\n**Detailed Description:**\r\n\r\n\r\n\r\n**Other Comments:**\r\n\r\nDiscussion about this in a previous PR: https://github.com/angular/angular.js/pull/6453'
6480,'btford','fix($resource): functions in params should not be executed if overridden\n'
6404,'caitp',"directives with isolated scope and a optional function '&?' should be returned as undefined if the function is missing\nOverview of the issue\r\n----------------------------\r\nIt is not a bug, probably just a design issue about directives with isolated scope and optional functions passed via '&?'.\r\n\r\nIf you don't pass any function to the directive, you get a function that returns undefined instead of undefined.\r\n\r\nErrors\r\n---------\r\nNo errors are thrown.\r\n\r\nMotivation for or Use Case\r\n-------------------------------------\r\nIf you declare a scope property as optional, probably the expected behaviour is getting undefined if you try to access this property.\r\nThis is exactly what happens when you have a '@?' binding and you don't fill in the optional attribute: you get undefined trying to access $scope.property.\r\n\r\nThe way to understand if there is a function parameter is inspecting the attrs.\r\nSo this seems a special case not motivated for '&?'.\r\n\r\nAngular Version(s)\r\n--------------------------\r\nAll versions, no regression.\r\n\r\nBrowsers and Operating System\r\n---------------------------------------------\r\nAll browsers and operting systems.\r\n\r\nSuggestion\r\n----------------\r\nIn order to get a common behaviour for optional parameters you could just add the following control to https://github.com/angular/angular.js/blob/4a6a3ba7fb08ce99007893ef75365a3e8aff938a/src/ng/compile.js#L1463:\r\n                if (optional && !attrs[attrName]) {\r\n                  return;\r\n                }\r\n\r\nIf you find that this proposal is ok I can make a pull request from: https://github.com/davidemoro/angular.js/blob/master/src/ng/compile.js\r\n\r\nI've just run the tests and all seems fine."
6273,'petebacondarwin','regression: ngHref - \nThis commit (https://github.com/angular/angular.js/commit/f3de5b6eac90baf649506072162f36dbc6d2f028) caused an old e2e test to fail (See https://github.com/angular/dgeni/issues/44).\r\n\r\nSee https://github.com/angular/angular.js/blob/master/src/ng/directive/booleanAttrs.js#L72\r\n\r\n```\r\n<a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don\'t reload)<br />\r\n```\r\n\r\n```\r\n        it(\'should execute ng-click but not reload when href empty string and name specified\', function() {\r\n          element(by.id(\'link-4\')).click();\r\n          expect(element(by.model(\'value\')).getAttribute(\'value\')).toEqual(\'4\');\r\n          expect(element(by.id(\'link-4\')).getAttribute(\'href\')).toBe(\'\');\r\n        });\r\n```\r\n\r\nPreviously, if you had a `name` but no `href` it would still prevent the click from propagating.  The performance refactor commit, referenced above, changed the `a` directive so that if there is neither `href` or `name` then the click will propagate and so clicking the link would cause the page to reload.\r\n\r\nWe need to decide if this previous functionality is important and if so modify the `a` directive accordingly and potentially re-activate the protractor test that was broken. If not, then we should just remove the failing protractor test altogether.\r\n\r\nFAO: @IgorMinar and @kseamon'
6242,'btford','fix($compile): fix duplicate style attributes\nThis fix avoids duplicating style attributes in directives that specify\r\n\'replace: true\' and \'template: &lt;div style="..." /&gt;\'.\r\n\r\nCloses #6239'
6191,'btford',"feat($ngModule): Add warning message when a module is reset/replaced\nThis PR warns the user if they are replacing an existing module, i.e.\r\n\r\n```js\r\nfoo.js:  angular.module('modname', []).directive(......\r\n\r\nbar.js:  angular.module('modname', []).directive(......\r\n```\r\n\r\nCloses #6034"
6150,'matsko','ngRepeat incorrect animation\nCircular list animation work incorrect with ngRepeat.\r\n\r\nPure js code (work correct):\r\n``` html\r\n<!doctype html>\r\n<html ng-app="test">\r\n<head>\r\n\t<title>test</title>\r\n\t<meta charset="utf-8" />\r\n\t\r\n\t<style>\r\n\t.container {\r\n\t\tposition: relative;\r\n\t\toverflow: hidden;\r\n\t\theight: 210px;\r\n\t}\r\n\t.item {\r\n\t\tposition: relative;\r\n\t\twidth: 100px;\r\n\t\theight: 25px;\r\n\t\tmargin-bottom: 5px;\r\n\t\tbackground: #CCCCCC;\r\n\t\t-webkit-transition: all ease-in-out .5s;\r\n\t\ttransition: all ease-in-out .5s;\r\n\t}\r\n\t.item:nth-child(1) {\r\n\t\theight: 0;\r\n\t\tmargin-bottom: 0;\r\n\t}\r\n\t.item:nth-child(5) {\r\n\t\tbackground: #FFCCCC;\r\n\t}\r\n\t</style>\r\n</head>\r\n<body>\r\n\t<div id="container" class="container"></div>\r\n\t\r\n\t<script>\r\n\tvar model = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\tvar container = document.getElementById(\'container\');\r\n\t\r\n\tfor (var i = 0; i < model.length; ++i) {\r\n\t\tvar div = document.createElement(\'div\');\r\n\t\tdiv.innerHTML = model[i];\r\n\t\tdiv.className = \'item\';\r\n\t\tcontainer.appendChild(div);\r\n\t}\r\n\t\r\n\tdocument.addEventListener(\'keydown\', function(e) {\r\n\t\tif (e.keyCode == 38) {\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t\r\n\t\t\tcontainer.insertBefore(container.lastChild, container.firstChild);\r\n\t\t}\r\n\t\telse if (e.keyCode == 40) {\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\r\n\t\t\tcontainer.appendChild(container.firstChild);\r\n\t\t}\r\n\t});\r\n\t</script>\r\n</body>\r\n</html>\r\n```\r\n\r\nUse angular (incorrect):\r\n``` html\r\n<!doctype html>\r\n<html ng-app="test">\r\n<head>\r\n\t<title>test</title>\r\n\t<meta charset="utf-8" />\r\n\t\r\n\t<style>\r\n\t.container {\r\n\t\tposition: relative;\r\n\t\toverflow: hidden;\r\n\t\theight: 210px;\r\n\t}\r\n\t.item {\r\n\t\tposition: relative;\r\n\t\twidth: 100px;\r\n\t\theight: 25px;\r\n\t\tmargin-bottom: 5px;\r\n\t\tbackground: #CCCCCC;\r\n\t\t-webkit-transition: all ease-in-out .5s;\r\n\t\ttransition: all ease-in-out .5s;\r\n\t}\r\n\t.item:nth-child(1) {\r\n\t\theight: 0;\r\n\t\tmargin-bottom: 0;\r\n\t}\r\n\t.item:nth-child(5) {\r\n\t\tbackground: #FFCCCC;\r\n\t}\r\n\t</style>\r\n</head>\r\n<body>\r\n\t<div ng-controller="mainCtrl" class="container">\r\n\t\t<div ng-repeat="item in model" class="item">\r\n\t\t\t{{ item }}\r\n\t\t</div>\r\n\t</div>\r\n\t\r\n\t<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.9/angular.min.js"></script>\r\n\t<script>\r\n\tangular.module(\'test\', [])\r\n\t.controller(\'mainCtrl\', [\'$scope\', \'$document\', function($scope, $document) {\r\n\t\t$scope.model = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\t\t\r\n\t\t$document.on(\'keydown\', function(e) {\r\n\t\t\tif (e.keyCode == 38) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t\r\n\t\t\t\t$scope.model.unshift($scope.model.pop());\r\n\t\t\t\t$scope.$digest();\r\n\t\t\t}\r\n\t\t\telse if (e.keyCode == 40) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\te.stopPropagation();\r\n\r\n\t\t\t\t$scope.model.push($scope.model.shift());\r\n\t\t\t\t$scope.$digest();\r\n\t\t\t}\r\n\t\t});\r\n\t}]);\r\n\t</script>\r\n</body>\r\n</html>\r\n```'
6049,'matsko','Callback "$animate:close" isn\'t called after an ng-leave animation finishes\nThe $animate:after and $animate:close callbacks fire for ng-enter events but they do not fire for ng-leave events.  Is this expected since the element/directive doesn\'t exist anymore?  Is there a workaround besides using JS animations?\r\n\r\nExample at http://jsbin.com/utOrAPO/11/edit?html,js,output'
6034,'btford','Add warning message when a module is reset/replaced\nRight now if you do something stupid like\r\n\r\n```\r\nfoo.js:  angular.module(\'modname\', []).directive(......\r\n\r\nbar.js:  angular.module(\'modname\', []).directive(......\r\n````\r\n\r\nThe second statement wipes the first one from memory without any warning.  It would be good if you could get some clue that something has been done wrong.  Like\r\n\r\n```\r\n$log.warn("Module modname is being replaced");\r\n```'
5998,'vojtajina',"Decoration of $q defer.promise\nI want to decorate $q defer promise. Here is some code:\r\n```javascript\r\n $provide.decorator('$q', function ($delegate) {\r\n    var defer = $delegate.defer;\r\n    $delegate.defer = function () {\r\n      var deferred = defer();\r\n      deferred.promise.success = function (fn) {\r\n        deferred.promise.then(function (value) {\r\n          fn(value);\r\n        });\r\n        return deferred.promise;\r\n      };\r\n      deferred.promise.error = function (fn) {\r\n        deferred.promise.then(null, function (value) {\r\n          fn(value);\r\n        });\r\n        return deferred.promise;\r\n      };\r\n      return deferred;\r\n    };\r\n    return $delegate;\r\n```\r\nAll is ok in simple case:\r\n```javascript\r\nvar def = $q.defer()\r\ndef.promise.success(function(data) {...});\r\n```\r\nBut when i use $q functions like **then**, **all**, **when** returned promise has no **success** and **error** methods, because of internally $q closures old defer function implementation and uses non-decorated code for constructing defer objects.\r\n"
5812,'caitp','feat($swipe) Add config param to allow choosing X/Y thresholds.\nCloses #4550.\r\n\r\n- Create config parameter to pass in swipe/scroll (X/Y) thresholds.\r\n- Allow the new thresholds to be applied to how the function determines when to scroll and when to swipe.\r\n- Fix bug where swiping back and forth within the thresholds would cause a bad cancel event.\r\n- Fix bug where if you went back inside the thresholds, you could potentially cancel a swipe in progress.\r\n- Add tests for all these changes.\r\n- Clean up the docs and add definition for the parameters used in `$swipe.bind`.'
5732,'tbosch',"touchend / mouseup listeners for ngTouch should be bound to window\nAs touchend / mouseup listeners are bound to `element`, if the user releases outside of the element's boundaries, the touchend / mouseup listeners wont be called.\r\n\r\nA mouse up event from an element is intrinsically a mouse up event from the window.\r\n\r\nhttps://github.com/angular/angular.js/blob/master/src/ngTouch/swipe.js\r\nLine 130:\r\n\r\n\tangular.element(window).on('touchend mouseup', function(event) {\r\n\t\tif (!active) return;\r\n\t\tactive = false;\r\n\t\teventHandlers['end'] && eventHandlers['end'](getCoordinates(event), event);\r\n\t});\r\n\r\nhttp://plnkr.co/edit/VebWtE3HiFX3xHWzJmif"
5712,'IgorMinar',"fix($location): return '/' for root path in hashbang mode\nBefore this change, on the root of the application, $location.path() would return the empty string. Following this change, it will always return a root of '/'.\r\n\r\nCloses #5650"
5682,'caitp','bug($ng): change numberInputType to check for leading decimals\nadd check for leading decimal.  Some browsers swallow leading decimals on\r\ninput type="number".\r\n\r\nfixes #5680'
5681,'IgorMinar','fix($route): update current route upon service instantiation\nThis fixes cases where the first ngView is loaded in a template asynchronously (such as through ngInclude), as the service will miss the first $locationChangeSuccess event otherwise.\r\n\r\nCloses #4957'
5668,'vojtajina','Explicit module dependencies should be required.\nCurrently if a module has already been loaded it doesn\'t matter for Angular that another module uses it without depending on it explicitely. This causes hard to detect problems in tests where sth doesn\'t work because a certain directive wasn\'t evaluated.\r\n\r\nI think Angular should throw a missing dependency error in such a case instead of just using the already loaded module.\r\n\r\nSee [the example on Plunker](http://plnkr.co/edit/a5j21G?p=preview). Instead of seeing the text `"c"` there should be an error thrown as the module `b` doesn\'t depend on the module `c`.\r\n\r\nThe code used in the example (put here for posterity):\r\n```js\r\nangular.module(\'testApp\', [\'a\', \'b\']);\r\n\r\nangular.module(\'a\', [\'c\']);\r\n\r\nangular.module(\'c\', [])\r\n  .value(\'c\', \'c\');\r\n\r\nangular.module(\'b\', [])\r\n  .run(function(c) {\r\n    document.getElementById(\'test-div\').innerHTML = c;\r\n  });\r\n```\r\n\r\nHTML:\r\n```html\r\n<!DOCTYPE html>\r\n<html ng-app="testApp">\r\n\r\n<head>\r\n  <meta charset="utf-8">\r\n  <meta http-equiv="X-UA-Compatible" content="IE=edge">\r\n</head>\r\n\r\n<body>\r\n  <div id="test-div"></div>\r\n  <script src="http://code.angularjs.org/snapshot/angular.js"></script>\r\n  <script src="app.js"></script>\r\n</body>\r\n\r\n</html>\r\n```\r\n'
5570,'matsko',"feat($animate): proper support for multiple elements\nRun performAnimation for each node instead of doing it for the first\r\nelement node.\r\n\r\nUpdate: Made this less hacky. ~~I made this PR keeping in mind to make as little changes in animate.js and as quickly as possible to get across my point. The code can be more elegant (e.g. introduce another function, etc.).~~\r\n\r\nBy running the animation on a per-element basis, there will be no issue with comment nodes etc. and the animation methods are now more intuitive and less surprising (more explanation in #5561 for what I'm referring to).\r\n\r\nFixes #4954 , relates to #5561 and #4786 .\r\n\r\nNote that this change makes the animations method behaviors asymmetric. When calling `$animate.leave(elements)`, the `leave` animation to fire for each element in `elements`. However, as the current implementation of animations is class-based, I don't see any value in firing the `leave` animation for non-element nodes as they cannot have classes and hence, have no meaning to ngAnimate."
5489,'IgorMinar',"ng-transclude should not create new sibling scope.\nThis is more of a change request and I would like to see what other people think.\r\n\r\nIn my humble opinion ng-transclude should not create it's own scope or at least have a way to prevent it from doing so. The reason behind this is that a directive which requests transclusion already has means to specify whether or not it wants to have a scope or an isolated scope or no scope at all. It uses ng-transclude directive to mark where it wants to insert the content. When ng-transclude creates it's own sibling scope it kind of breaks the expectations of the directive which defines what kind of scope it wants and there comes the manifestation of the popular 'value' vs 'object.value' confusion.\r\n\r\nHere's an example of where new scope doesn't make sense in my opinion:\r\n```\r\nui.directive('box', function() {\r\n\treturn {\r\n\t\trestrict: 'E',\r\n\t\ttransclude: true,\r\n\t\ttemplate: '<div ng-transclude/>',\r\n\t\treplace: true,\r\n\t\tscope: {}\r\n\t};\r\n});\r\n```\r\nAll this directive wants is replace the `<box>content</box>` with a `<div>content</div>` and the content to have the isolated scope.\r\n\r\nCreating nested structure of directives like this leads to a scope tree pollution. Here's a plunker example (http://plnkr.co/edit/DwukVGGprFFjQuVY8yTz) of three nested directives which create a scope tree structure like this:\r\n```\r\n< Scope (002) : ng-app\r\n\t< Scope (003) : ng-controller\r\n\t\t< Scope (004) : box\r\n\t\t< Scope (005) : ng-transclude\r\n\t\t\t< Scope (006) : box\r\n\t\t\t< Scope (007) : ng-transclude\r\n\t\t\t\t< Scope (008) : box\r\n\t\t\t\t< Scope (009) : ng-transclude\r\n```\r\nThis behaviour doesn't seem to add any value to its purpose but creates a lot of confusion among beginners.\r\n\r\nAt the moment I use the following workaround which achieves exactly what the previous example does:\r\n```\r\nui.directive('box', function() {\r\n\treturn {\r\n\t\trestrict: 'E',\r\n\t\ttransclude: true,\r\n\t\ttemplate: '<div/>',\r\n\t\treplace: true,\r\n\t\tscope: {},\r\n\t\tlink: function(scope, element, attrs, transclude) {\r\n\t\t\ttransclude(scope.$parent, function(content) {\r\n\t\t\t\telement.append(content);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n});\r\n```\r\nHere's a plunker example (http://plnkr.co/edit/46v6IBLkhS71L1WbUDFl) which illustrates this concept. It leaves the scope tree nice and tidy:\r\n```\r\n< Scope (002) : ng-app\r\n\t< Scope (003) : ng-controller\r\n\t\t< Scope (004) : box\r\n\t\t< Scope (005) : box\r\n\t\t< Scope (006) : box\r\n```\r\nAnd the 2-way binding works the way many expect when they bind 'value' rather than 'object.value'. (I believe that the fact that passing just 'value' works in some cases but not the other and blaming the nature of prototypal inheritance in javascript is not a good excuse. The fact that many people find this behaviour unexpected indicates that there's an architectural flaw.)\r\n\r\nI would love to hear what other people think and use cases where they think that creating a new sibling scope for ng-transclude makes sense."
5482,'vojtajina','cache should support timed invalidation\nFor example if an $http.get request is made after :60 of the cache, and I have set cacheTimeout to :30, then a new $http.get request should hit the network.'
5453,'vojtajina',"ngMock.$httpBackend.verifyNoOutstandingRequest don't work as expected\nConsider the following failing test:\r\n\r\n```\r\ndescribe('verifyNoOutstandingRequest does not work', function () {\r\n\r\n    it('should flush call', inject(function ($http, $httpBackend) {\r\n        $httpBackend.when('POST', '/api/feedback', {}).respond('done');\r\n\r\n        var result = '';\r\n        $http.post('/api/feedback', {}).then(function (ret) {\r\n            result = ret.data;\r\n        });\r\n\r\n        expect(result).toBe('');\r\n        $httpBackend.flush();\r\n        expect(result).toBe('done');\r\n        $httpBackend.verifyNoOutstandingRequest();\r\n    }));\r\n\r\n    it('should detect outstanding request', inject(function ($http, $httpBackend) {\r\n        var result = '';\r\n        $http.post('/api/feedback', {}).then(function (ret) {\r\n            result = ret.data;\r\n        });\r\n\r\n        expect(function () {\r\n            $httpBackend.verifyNoOutstandingRequest();\r\n        }).toThrow('Unflushed requests: 1');\r\n    }));\r\n});\r\n```\r\n\r\nThe test `should detect outstanding request` doesn't work. I'm using `angular-1.2.5` and `jasmine-2.0.0`\r\n"
5429,'btford','1.2.5 angular-mocks copy change breaks tests using XML datatype \nApparently the XML datatype in Chrome/Firefox (and others?) contains pointers to itself.  The change here (https://github.com/angular/angular.js/commit/f69dc16241c8b631123ad0b09674f0a5e0ff32fe) copies the HTTP response.\r\n\r\nIf you are mocking an HTTP service with XML datatype as the return type, copy() never terminates.'
5236,'naomiblack',"update the individual doc pages for directives affected by $sce to refer back to sce docs\nIt's not obvious from the ngSrc docs that content in ngSrc needs to be explicitly trusted. Should update these and other directive help pages to refer to the new sce docs."
5177,'matsko','ngAnimate: ng-view animation doesn\'t work in some cases\nHi.\r\nI\'m using an ng-view transitions with ngAnimate. I have the $routeProvider configured that in default view the ng-view doesn\'t display anything. I want to achieve an effect: that when a ng-view enters i have a ng-enter transition, and when it leaves a ng-leave transition. But when it switches between view i don\'t want any transitions.\r\n\r\nSee this fiddle for the example app: http://jsfiddle.net/p7mfU/1/\r\n\r\nI achieved this effect by adding a :only-child css pseudo class selector to transition classes. The above example only works when you "Run" the fiddle, and switch between "no view" and "view 1" or "no view" and "view 2". But when i switch from "view  1" to "view 2" (or the other way around) it breaks, i.e. when i then click "no view" there is no transition.\r\n\r\nReplacing line 886\r\n```\r\nvar data = cacheKey ? lookupCache[cacheKey] : null;\r\n```\r\nin angular-animate.js with\r\n```\r\nvar data = null;\r\n```\r\nfixes the issue. \r\n\r\nTry to comment\r\n```\r\n<script src="http://code.angularjs.org/1.2.2/angular-animate.js"></script>\r\n```\r\nand uncomment\r\n```\r\n<!-- <script src="http://kamilkp.co.nf/angular-animate.js"></script> -->\r\n```\r\nin CSS jsfiddle section to see the effect.'
5154,'IgorMinar','Module dependencies not loading properly. Getting i.e. $animate is not defined in directive even if  $animate was available during factory init.\nangular 1.2.2, angular-animate 1.2.2 in Chrome on Maverick\r\n\r\nI have been having issue with using ngAnimate but have found that I can reproduce the issue with ngTouch as well. I have made a very simple "bare-bones" app to make sure I don\'t have any conflicts with any other js libs and the problem persists. Here is my case:\r\n\r\nThe following app was scaffolded by yo, I only added the test directive to the app. I have added angular-animate.js script to my html.\r\n\r\n````\r\nangular.module(\'nganimateTestApp\', [\'ngRoute\', \'ngAnimate\'])\r\n  .config(function ($routeProvider) {\r\n    $routeProvider\r\n      .when(\'/\', {\r\n        templateUrl: \'views/main.html\',\r\n        controller: \'MainCtrl\'\r\n      })\r\n      .otherwise({\r\n        redirectTo: \'/\'\r\n      });\r\n  })\r\n  .directive(\'test\', function ($animate) {\r\n    return {\r\n      restrict: \'A\',\r\n      link: function (scope, element, attrs) {\r\n        scope.clickHandler = function () {\r\n          var t = \'\';\r\n        };\r\n      }\r\n    }\r\n  });\r\n````\r\n\r\n````\r\n<div class="jumbotron">\r\n  <h1>\'Allo, \'Allo!</h1>\r\n  <p class="lead">\r\n    <img src="images/yeoman.png" alt="I\'m Yeoman" test ng-click="clickHandler()"><br>\r\n    Always a pleasure scaffolding your apps.\r\n  </p>\r\n  <p><a class="btn btn-lg btn-success" ng-href="#">Splendid!</a></p>\r\n</div>\r\n````\r\n\r\nHere is my issue: (hopefully i\'m not doing anything stupid here or I owe you a beer ;)\r\n\r\nDuring the directive initialization (i.e. breakpoint on the return statement of the directive factory function) the $animate service is defined which indicates that the ngAnimate module was loaded and initialized properly. But if I step into the clickHandler which is triggered by a simple ng-click on the directive\'s element $animate is "not defined"...  I have also duplicated this issue with ngTouch as a test using the $touch service.\r\n\r\nI originally stepped into this debug spree when I could get animations working. I could publish the app shortly if you need some solid proof. If I am indeed doing something stupid please provide your beer of choice. ;)'
4899,'vojtajina','feat($resource): pass resource to the dynamic param function\n'
4891,'pkozlowski-opensource',"ngMock $httpBackend does not support numeric timeouts\nngMock's $httpBackend service appears to support promised-based timeouts, but not numeric ones.  Example test demonstrating the issue:\r\n\r\n    it('should abort requests after numeric timeout', inject(function($timeout) {\r\n      hb.expect('GET', '/url1').respond(200);\r\n\r\n      hb('GET', '/url1', null, callback, null, 200);\r\n      $timeout.flush(300);\r\n\r\n      expect(callback).toHaveBeenCalledWith(-1, undefined, '');\r\n      hb.verifyNoOutstandingExpectation();\r\n      hb.verifyNoOutstandingRequest();\r\n    }));\r\n"
4550,'caitp','Tolerances for $swipe\nI was working on a directive to make it so you can slideout an offscreen menu via swipe, and I noticed a lot of the time, it was calling the cancel action seemingly prematurely.\r\n\r\nDigging into the docs and code, it seems that the `$swipe` service has some tolerances: if you move Y pixels vertically before moving X pixels horizontally, it will cancel the swipe.\r\n\r\nThing is, the tolerances seem a bit too tight when testing on my Nexus 4. \r\n\r\nUsing this demo: http://cwspear.github.io/angular-menu-slideout/, I was logging when cancel was getting called and it was calling it about 1 out or every 3 or 4 times on what I would have considered perfectly good swipes.\r\n\r\nIs it possible to make the tolerances Angular uses configurable?\r\n\r\n---\r\n\r\nPR: #5812'
4508,'IgorMinar',"Don't copy server response to resource value if they are already the same object\nEXPLANATION\r\n-----------------------\r\nAn $http response interceptor may be used to compare the value sent **to** the server--available via `response.config.data`--to the value returned **from** the server--available via `response.data`--BEFORE logic inside `$resource` copies `response.data` to the resource instance value.   The logic of this response interceptor *MAY*, in some cases (see use case below), set the value of `response.data` to `response.config.data` which, when using `$resource` also happens to be a resource instance value.\r\n\r\nThis very simple pull request simply skips `$resource`'s attempt to copy the `response.data` to the resource value *if* the two already reference the same object.   Without this change, the `copy()` function will throw when called from within the resource.\r\n\r\nUSE CASE\r\n----------------\r\nThe use case leading to this pull request is as follows.  In an application implementing auto-save, `$resource` is used to periodically persist in-progress changes (identified using `FormController.$dirty`) to the server.  While that save request is outstanding, the user may continue to make changes.   Because `$resource`'s default logic will discard any changes made between the time the save request was issued and it returns using `copy(data, value);`, a response interceptor has been implemented with custom application logic to merge three states of the object being saved:\r\n 1. at the time request was issued\r\n 2. the object's current state (possibly modified by the user since request was issued) \r\n 3. the object state returned from the server (wherein the server may have made changes e.g. optimistic concurrency, etc.)\r\n\r\nThe application's custom merge logic, to avoid firing unnecessary watches or losing the user's changes, merges states (1) and (3) onto the existing object which is `response.config.data` and then sets `response.data` to `response.config.data`.   This currently causes `$resource` to throw and requires the very minor customization in this pull request.   I'd *LOVE* to NOT have a customized copy of `ngResource` in my app."
4262,'caitp',"Broken anchor link when directive replaces its markup\nA simple directive that replaces markup with an anchor surrounded by a div. This is broken when the markup being replaced is an anchor itself.\r\n\r\nThere are 2 workarounds:\r\n\r\n* don't use an anchor tag to be replaced\r\n* don't surround the replacing anchor with a div\r\n\r\nSee here for a reproduction of the issue: http://plnkr.co/edit/sYqXhe3gcBicmR1tSECN"
4232,'caitp','Error: No controller: init\nDirective require fails (with link) then including external template and using quick redirect.\r\n\r\nCan\'t reproduce this in jsfiddle, because we need to load external template\r\n\r\nSteps to reproduce this issue:\r\n1. http://plnkr.co/edit/HPtMJhM30ezAxpClmgdT?p=preview\r\n2. press "error" button\r\n3. wholia\r\n\r\n````\r\nError: No controller: init\r\n    at Error (<anonymous>)\r\n    at getControllers (https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.js:4454:19)\r\n    at nodeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.js:4583:35)\r\n    at compositeLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.js:4191:15)\r\n    at publicLinkFn (https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.js:4096:30)\r\n    at https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.js:13588:43\r\n    at https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.js:9137:11\r\n    at wrappedCallback (https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.js:6995:59)\r\n    at https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.js:7032:26\r\n    at Object.Scope.$eval (https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.js:8218:28) <div init-require="" class="ng-scope ng-binding"> \r\n````\r\n\r\nbrowsers: Chrome, IE10, maybe others too.\r\n'
4192,'btford','feature (ngRoute) expose #parseRoute as public function\n`$route.parseRoute` should be public, allowing you to determine which route a given path will resolve to. This lets you store meta data in your routes config, and take action (e.g. cancel route) before the route changes.\r\n\r\nExample use case: before navigating, check if the route\'s feature is feature-switched on or off. If off, cancel the route and display a "feature disabled" popup.\r\n\r\nAdd a `feature` property to each route:\r\n\r\n```js\r\n$routeProvider.when(\'/profile\',\r\n  feature: \'profile\',\r\n  template: \'profile.html\',\r\n  controller: \'ProfileCtrl\'\r\n});\r\n```\r\n\r\nIn a main controller, cancel routing and display popup when a route\'s feature is disabled.\r\n\r\n```js\r\n$scope.$on(\'$locationChangeStart\', function(e) {\r\n  // determine the route the user is trying to navigate to\r\n  var nextRoute = $route.parseRoute($location.path());\r\n  // get the feature metadata from the route\r\n  var nextFeature = nextRoute.$$route.feature;\r\n  // check if the feature is set to disabled using an app-specific\r\n  // service\r\n  var status = AppFeatures.status(nextFeature);\r\n  if (status === \'disabled\'){\r\n    // cancel the route\r\n    e.preventDefault();\r\n    // display popup\r\n    $scope.showFeatureDisabledModal();\r\n  }\r\n});\r\n```\r\n\r\nMaking `parseRoute` public gives your application a lot of flexibility and control over routing.'
4090,'shepheb',"ngTouch: Swipe easily activates accidentally while selecting text\nI'd like to at least be able to disable the behavior for mouse events and only use it for touch events."
4082,'btford',"Throw a better error when no routes are matched\nIf no routes match because the base href doesn't match the location, Angular throws this cryptic from `$locationProvider`. It should throw an error from MinErr prescribing users to address the discrepancy with the base href.\r\n\r\nThis issue is common when serving files from a case-insensitive filesystem (lookin' at you, HFS), where the files may serve from `/Base/` and `/base/` but the href is set as `/base/`.\r\n\r\nThis behavior is preferable because it encourages developers to follow the best practice of treating their files and URLs as case-sensitive.\r\n\r\n```\r\nTypeError: Cannot read property '1' of null\r\n    at matchUrl (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:7084:25)\r\n    at Object.$$parse (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:7152:5)\r\n    at $LocationProvider.$get (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:7589:15)\r\n    at Object.invoke (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3129:28)\r\n    at http://localhost/common/vendor/angular-1.2.0rc1/angular.js:2970:37\r\n    at getService (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3086:39)\r\n    at Object.invoke (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3107:13)\r\n    at http://localhost/common/vendor/angular-1.2.0rc1/angular.js:2970:37\r\n    at getService (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3086:39)\r\n    at Object.invoke (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3107:13) angular.js:7818\r\nError: [$injector:cdep] Circular dependency found: \r\n    at hasOwnPropertyFn (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:60:12)\r\n    at getService (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3079:17)\r\n    at invoke (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3107:13)\r\n    at Object.instantiate (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:3141:23)\r\n    at $get (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:5550:28)\r\n    at http://localhost/common/vendor/angular-1.2.0rc1/angular.js:5060:34\r\n    at forEach (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:203:20)\r\n    at nodeLinkFn (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:5047:11)\r\n    at compositeLinkFn (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:4607:15)\r\n    at compositeLinkFn (http://localhost/common/vendor/angular-1.2.0rc1/angular.js:4610:13) angular.js:7818\r\n```\r\n\r\nFrom #4056."
4018,'mhevery','DOM Spec Input - Virtual MutationRecords\nThis is a request for input on data binding and web component state:\r\n\r\nWith respect to <input> <select> and <textarea> elements, change events do not currently map to MutationRecords, please see https://www.w3.org/Bugs/Public/show_bug.cgi?id=23226 , please make any comments that you find relevant.\r\n\r\nIRC recommended I make an issue'
4001,'shepheb','angular-touch with jQuery fails to "fastclick"\nIf jQuery is loaded before AngularJS it uses it and fails to get proper touches/changedTouches properties from TouchEvent in \r\n\r\nangular-touch.js:1.2-RC2\r\n353:element.on(\'touchstart\', function(event) {\r\n380:element.on(\'touchend\', function(event) {\r\n\r\nadding\r\nevent = event.originalEvent;\r\nsolves the issue'
3999,'shepheb',"ng-touch, mouse event and 'ng-click-active' \nI am building angularjs app that works on both touch and mouse environment. I am pleased to use ng-touch for touch support. I am using 'ng-click-active' for styling pressed state and it works well on touch device. But it does not works well on desktop and mouse environment. 'ng-click-active' is work differently from a  :active selector.\r\n\r\n- 'ng-click-active' should not be disappeared if mouse down and hold on the element. (chrome and ie)\r\n- 'ng-click-active' should not be disappeared if mouse down and move on the element.\r\n\r\nbelow code makes the problem. \r\n   element.on('mousemove mouseup', function(event) {\r\n      element.removeClass(ACTIVE_CLASS_NAME);\r\n    });\r\n\r\nchrome trigger mousemove event even if mouse does not move.\r\n\r\n\r\n \r\n"
3939,'shepheb','$swipe does not handle a mechanism for properly unbinding callbacks bound via service\nI noticed that while $swipe will bind touch events properly, it will not remove them properly when an element with touch events bound to it via the service is removed from the DOM.  It should add a listener for the `remove` event and deregister the listener.'
3789,'btford',"Directly modifying the URL path & search without any side effects.\nIs it possible to directly modify the URL's path and search without any sideeffects in terms of reloading, refreshing, reinitialising, or affecting AngularJS in anyway. Basically a pure cosmetic effect.\r\n\r\nI need this sometimes when I need to correct the URL without doing anything else.\r\n\r\nThis could be useful for overlays that need a directly accessible URL. Or when someone enters the wrong title for a particular ID. See Stackoverflow, when you change the title but enter just the ID, it will correct the title portion of the URL to be correct.\r\n\r\nI know history.pushState can do this, but when I try this inside AngularJS it results in 10 digest errors."
3606,'vojtajina','feat($http) XHR progress events\nShould likely add a few more specs for this. Any suggestions? May need to add to `MockXHR` a bit.'
3556,'shepheb','fix(ngTouch): replace event with originalEvent\nWhen jQuery is included touches are found on event.originalEvent'
3543,'caguillen214','Memory leaks that occurs in IE9 when using ng-view\nThe following gist demonstrate the problem and also the makeshift solution:\r\nhttps://gist.github.com/anonymous/6181994\r\n\r\nAngular version: 1.1.5'
2548,'shepheb',"ngMobile doesn't override ng-click with faster touch-based event when JQuery is loaded\nhttp://plnkr.co/edit/fnJCUMn2fMZy9cIunfFj\r\n\r\nIf we leave the jquery include commented out, the ng-click responds quickly on my ipad.\r\nIf we add the jquery include back in, then the click seems to revert back to the slow click behavior."
2459,'IgorMinar',"Setting cookie attributes in $cookieStore\nAs a response to issues: #1786,#950,#1918,#1320\r\nThis PR enables setting a cookie's path and expires attributes using the $cookieStore service. \r\n$cookies was not changed, since it's API is too strict, I could find no way to implement it without causing breaking changes, or using some terrible hacks.\r\nI would suggest adding a new service to the module to support more advanced features (such as Json $watch expression, which should be more useful then binding the $cookies object directly), but this would probably require a bit of research regarding use cases.\r\n\r\nSome things to note regarding the implementation:\r\n* urlroot (karma property) was added to all unit tests - to facilitate testing of different cookie path\r\n* Backward incompatible change (bad fixing a bad behaviour):\r\n\tdelete cookie now deletes cookies set with a path other then / (or baseHref)\r\n\t   that is before the fix, if you had a cookie set on path /karma (if it was added by the server for instance), \r\n\t   you would be able to see it, but deleting it will fail silently (and will not delete)\r\n\tdelete cookie now deletes duplicate cookies with the same name (if they have different paths)\r\n* Due to the fact that no browser allows inspecting the Path and Expiration date of a cookie, I chose to add a private _setCookie function inside the $browser module\r\n  which I override in unit tests. Not the most elegent solution, but the only other way to check Expiration is to mock the document object and change how document.cookie works, and that would have taken me too long for very little benefit.\r\n\r\nDesign decisions:\r\n* to change the path and/or expiration date of a cookie, you can pass an options object as the third argument to cookies(name,value)\r\n\tthe options object can override Path and Expires when adding a value, all other options variables are ignored (but are allowed, I.E. no validation is made).\r\n\tYou can pass either path, expires,none or both.\r\n* the path option is checked to be a string and be partial to window.location, otherwise, the default path is used. (warning is logged)\r\n* the expires option is checked to be a Date and in the future, otherwise no expiration is set. (warning is logged)\r\n* at the moment no support for non-Date expires is supported (for instance such as maxAge, or a number to indicate number of millesconds for cookie to last)\r\n* you can now delete a cookie on a specific path by calling cookie(name,undefined,options), with options containing path\r\n* only the $cookieStore service will support putting cookies with different path/expiration (as well as deleting certain paths.\r\n\tthis is to support backward compatability with $cookies.\r\n\r\nNotes:\r\n if the value passed to browser.cookies is not a String, it fails silently.\r\n\r\n\r\nThis is my first time contributing here (and on a Major open source project), I hope this can be incorporated.\r\nI'm more than happy to make changes if something is wrong, so please let me know.\r\n"
2163,'mhevery','enables AngularJS to use any jQuery, implementing issue #608\nEnables AngularJS to use any jQuery library by using the `window.angularjsUseJquery` variable, that can have the following values:\r\n  * `undefined` / `null` / `false` - the default behavior (try to use window.jQuery, if not, use internal)\r\n  * `"internal"` - use the internal jQuery lite, no matter which other jQuery is present in the page\r\n  * reference to any variable containing a jQuery instance\r\n\r\nAlso updated the documentation (manual bootstrapping guide) to include details about this feature.'
1786,'petebacondarwin','Cookie path not settable using $cookies service\nWhen using the $cookies service, there is no easy way to set the path of the cookie to match every path on the domain.\r\n\r\nOn line 3137 of angular.1.0.2.js the path of all cookies created is set as self.baseHref()\r\nWhen trying to write the same cookie from different paths this results in additional cookies being created due to the different path.\r\n\r\nWith no facility implemented to pass in a path, the path needs to be hard coded in order to be changed.'
1769,'btford',"Don't clear initial content in ng-view until resolve is complete\nRight now I have something like:\r\n\r\n```html\r\n<div ng-view>\r\n  <div>PHP-rendered content for faster initial-load experience + SEO</div>\r\n</div>\r\n```\r\n\r\nThe experience when loading the page is to\r\n 1. See that initial content before the javascript runs.\r\n 2. Once the javascript runs, a blank section that possibly changes height if the initial content is long enough (this is quite jarring)\r\n 3. Then the Angular-rendered content once the resolve callbacks are complete.\r\n\r\nI was expecting Angular to behave more like it does when transitioning between pages, where it waits until the next page is ready to load before it clears the current content.\r\n\r\nSee http://jsfiddle.net/7tnDN/ for an example of this behavior."
1699,'matsko',"Option on $location to allow hash/path change w/o reloading the route\nWe have a paradigm in our app that user's create new things on the same page that they view things.  So our route is like /thing/:id.  When creating a new thing they go to /thing/new.  Once the thing has been successfully saved we want to change the route to /thing/1234 (or whatever its new id is).  Now the partial doesnt need to be reloaded because the data is all the same.  We just want the path to be updated so a user can now bookmark the correct link, etc.\r\n\r\nHaving an option on $location (not on the route definition) to enable/disable route loading would work but I'm sure there are other ways to implement the feature."
1352,'btford','ngSrc doesn\'t work properly with HTML5 Video Source tag\nIn firefox, ngSrc directive on video elements\' <source> tag doesn\'t work at all, and results in unsupported video format error.  In chrome, updating ngSrc with data-binding doesn\'t update video, as it only loads video on page-load.  i.e.\r\n\r\n    <video controls>\r\n         <source ng-src="{{src}}">\r\n    </video>\r\n\r\ndoesn\'t work in Firefox at all, and in chrome it only works on first loading.\r\n\r\n\r\nHowever,\r\n\r\n    <video ng-src="{{src}} controls></video>\r\n\r\nworks in both browsers, and it can be updated dynamically with no problems.\r\n\r\nThis is a problem, when having multiple video formats in order to support all browsers.\r\n\r\nRelated: #339'
